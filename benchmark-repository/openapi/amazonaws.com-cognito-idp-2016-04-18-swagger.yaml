openapi: 3.0.0
info:
  version: 2016-04-18
  x-release: v4
  title: Amazon Cognito Identity Provider
  description: <p>Using the Amazon Cognito User Pools API, you can create a user pool to
    manage directories and users. You can authenticate a user to obtain tokens
    related to user identity and access policies.</p> <p>This API reference
    provides information about user pools in Amazon Cognito User Pools.</p>
    <p>For more information, see the Amazon Cognito Documentation.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: cognito-idp
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/cognito-idp/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AddCustomAttributes:
    post:
      operationId: AddCustomAttributes
      description: Adds additional user attributes to the user pool schema.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddCustomAttributesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserImportInProgressException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AddCustomAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCustomAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminAddUserToGroup:
    post:
      operationId: AdminAddUserToGroup
      description: <p>Adds the specified user to the specified group.</p> <p>Calling this
        action requires developer credentials.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminAddUserToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminAddUserToGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminConfirmSignUp:
    post:
      operationId: AdminConfirmSignUp
      description: <p>Confirms user registration as an admin without using a confirmation
        code. Works on any user.</p> <p>Calling this action requires developer
        credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminConfirmSignUpResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFailedAttemptsException"
        "486":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "488":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "489":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "490":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminConfirmSignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminConfirmSignUpRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminCreateUser:
    post:
      operationId: AdminCreateUser
      description: <p>Creates a new user in the specified user pool.</p> <p>If
        <code>MessageAction</code> is not set, the default is to send a welcome
        message via email or phone (SMS).</p> <note> <p>This message is based on
        a template that you configured in your call to or . This template
        includes your custom sign-up instructions and placeholders for user name
        and temporary password.</p> </note> <p>Alternatively, you can call
        AdminCreateUser with “SUPPRESS” for the <code>MessageAction</code>
        parameter, and Amazon Cognito will not send any email. </p> <p>In either
        case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state
        until they sign in and change their password.</p> <p>AdminCreateUser
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminCreateUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "483":
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsernameExistsException"
        "484":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "485":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
        "486":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "487":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "488":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "489":
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionNotMetException"
        "490":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "491":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "492":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "493":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "494":
          description: UnsupportedUserStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedUserStateException"
        "495":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCreateUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUser:
    post:
      operationId: AdminDeleteUser
      description: <p>Deletes a user as an administrator. Works on any user.</p> <p>Calling
        this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDeleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminDeleteUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUserAttributes:
    post:
      operationId: AdminDeleteUserAttributes
      description: <p>Deletes the user attributes in a user pool as an administrator. Works
        on any user.</p> <p>Calling this action requires developer
        credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminDeleteUserAttributesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDeleteUserAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminDeleteUserAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableProviderForUser:
    post:
      operationId: AdminDisableProviderForUser
      description: <p>Disables the user from signing in with the specified external (SAML
        or social) identity provider. If the user to disable is a Cognito User
        Pools native username + password user, they are not permitted to use
        their password to sign-in. If the user to disable is a linked external
        IdP user, any link between that user and an existing user is removed.
        The next time the external user (no longer attached to the previously
        linked <code>DestinationUser</code>) signs in, they must create a new
        user account. See .</p> <p>This action is enabled only for admin access
        and requires developer credentials.</p> <p>The <code>ProviderName</code>
        must match the value specified when creating an IdP for the pool. </p>
        <p>To disable a native username + password user, the
        <code>ProviderName</code> value must be <code>Cognito</code> and the
        <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>,
        with the <code>ProviderAttributeValue</code> being the name that is used
        in the user pool for the user.</p> <p>The
        <code>ProviderAttributeName</code> must always be
        <code>Cognito_Subject</code> for social identity providers. The
        <code>ProviderAttributeValue</code> must always be the exact subject
        that was used when the user was originally linked as a source user.</p>
        <p>For de-linking a SAML identity, there are two scenarios. If the
        linked identity has not yet been used to sign-in, the
        <code>ProviderAttributeName</code> and
        <code>ProviderAttributeValue</code> must be the same values that were
        used for the <code>SourceUser</code> when the identities were originally
        linked in the call. (If the linking was done with
        <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>,
        the same applies here). However, if the user has already signed in, the
        <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>
        and <code>ProviderAttributeValue</code> must be the subject of the SAML
        assertion.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminDisableProviderForUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDisableProviderForUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminDisableProviderForUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableUser:
    post:
      operationId: AdminDisableUser
      description: <p>Disables the specified user.</p> <p>Calling this action requires
        developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminDisableUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminDisableUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminDisableUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminEnableUser:
    post:
      operationId: AdminEnableUser
      description: <p>Enables the specified user as an administrator. Works on any
        user.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminEnableUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminEnableUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminEnableUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminForgetDevice:
    post:
      operationId: AdminForgetDevice
      description: <p>Forgets the device, as an administrator.</p> <p>Calling this action
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminForgetDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminForgetDeviceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetDevice:
    post:
      operationId: AdminGetDevice
      description: <p>Gets the device, as an administrator.</p> <p>Calling this action
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminGetDeviceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminGetDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminGetDeviceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetUser:
    post:
      operationId: AdminGetUser
      description: <p>Gets the specified user by user name in a user pool as an
        administrator. Works on any user.</p> <p>Calling this action requires
        developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminGetUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminGetUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminGetUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminInitiateAuth:
    post:
      operationId: AdminInitiateAuth
      description: <p>Initiates the authentication flow, as an administrator.</p>
        <p>Calling this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInitiateAuthResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "485":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "486":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "487":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "488":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "489":
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MFAMethodNotFoundException"
        "490":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "491":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "492":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "493":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "494":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminInitiateAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminInitiateAuthRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminLinkProviderForUser:
    post:
      operationId: AdminLinkProviderForUser
      description: <p>Links an existing user account in a user pool
        (<code>DestinationUser</code>) to an identity from an external identity
        provider (<code>SourceUser</code>) based on a specified attribute name
        and value from the external identity provider. This allows you to create
        a link from the existing user account to an external federated user
        identity that has not yet been used to sign in, so that the federated
        user identity can be used to sign in as the existing user account. </p>
        <p> For example, if there is an existing user with a username and
        password, this API links that user to a federated user identity, so that
        when the federated user identity is used, the user signs in as the
        existing user account. </p> <important> <p>Because this API allows a
        user with an external federated identity to sign in as an existing user
        in the user pool, it is critical that it only be used with external
        identity providers and provider attributes that have been trusted by the
        application owner.</p> </important> <p>See also .</p> <p>This action is
        enabled only for admin access and requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLinkProviderForUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminLinkProviderForUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLinkProviderForUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListDevices:
    post:
      operationId: AdminListDevices
      description: <p>Lists devices, as an administrator.</p> <p>Calling this action
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminListDevicesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminListDevices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminListDevicesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListGroupsForUser:
    post:
      operationId: AdminListGroupsForUser
      description: <p>Lists the groups that the user belongs to.</p> <p>Calling this action
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminListGroupsForUserResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminListGroupsForUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminListGroupsForUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListUserAuthEvents:
    post:
      operationId: AdminListUserAuthEvents
      description: Lists a history of user activity and any risks detected as part of
        Amazon Cognito advanced security.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminListUserAuthEventsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolAddOnNotEnabledException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminListUserAuthEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminListUserAuthEventsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup:
    post:
      operationId: AdminRemoveUserFromGroup
      description: <p>Removes the specified user from the specified group.</p> <p>Calling
        this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRemoveUserFromGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminResetUserPassword:
    post:
      operationId: AdminResetUserPassword
      description: <p>Resets the specified user's password in a user pool as an
        administrator. Works on any user.</p> <p>When a developer calls this
        API, the current password is invalidated, so it must be changed. If a
        user tries to sign in after the API is called, the app will get a
        PasswordResetRequiredException exception back and should direct the user
        down the flow to reset the password, which is the same as the forgot
        password flow. In addition, if the user pool has phone verification
        selected and a verified phone number exists for the user, or if email
        verification is selected and a verified email exists for the user,
        calling this API will also result in sending a message to the end user
        with the code to change their password.</p> <p>Calling this action
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResetUserPasswordResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "487":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "488":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "489":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "490":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "491":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "492":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminResetUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminResetUserPasswordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge:
    post:
      operationId: AdminRespondToAuthChallenge
      description: <p>Responds to an authentication challenge, as an administrator.</p>
        <p>Calling this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRespondToAuthChallengeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
        "484":
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCodeException"
        "485":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "486":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "487":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "488":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "489":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "490":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "491":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "492":
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MFAMethodNotFoundException"
        "493":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "494":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "495":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "496":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "497":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "498":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "499":
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareTokenMFANotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRespondToAuthChallengeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserMFAPreference:
    post:
      operationId: AdminSetUserMFAPreference
      description: Sets the user's multi-factor authentication (MFA) preference, including
        which MFA options are enabled and if any are preferred. Only one factor
        can be set as preferred. The preferred MFA factor will be used to
        authenticate a user if multiple factors are enabled. If multiple options
        are enabled and no preference is set, a challenge to choose an MFA
        option will be returned during sign in.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminSetUserMFAPreferenceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminSetUserMFAPreference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminSetUserMFAPreferenceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserPassword:
    post:
      operationId: AdminSetUserPassword
      description: <p>Sets the specified user's password in a user pool as an
        administrator. Works on any user. </p> <p>The password can be temporary
        or permanent. If it is temporary, the user status will be placed into
        the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries
        to sign in, the InitiateAuth/AdminInitiateAuth response will contain the
        <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user does not sign
        in before it expires, the user will not be able to sign in and their
        password will need to be reset by an administrator. </p> <p>Once the
        user has set a new password, or the password is permanent, the user
        status will be set to <code>Confirmed</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminSetUserPasswordResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "486":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminSetUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminSetUserPasswordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserSettings:
    post:
      operationId: AdminSetUserSettings
      description: " <i>This action is no longer supported.</i> You can use it to configure
        only SMS MFA. You can't use it to configure TOTP software token MFA. To
        configure either type of MFA, use the <a>AdminSetUserMFAPreference</a>
        action instead."
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminSetUserSettingsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminSetUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminSetUserSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback:
    post:
      operationId: AdminUpdateAuthEventFeedback
      description: Provides feedback for an authentication event as to whether it was from
        a valid user. This feedback is used for improving the risk evaluation
        decision for the user pool as part of Amazon Cognito advanced security.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUpdateAuthEventFeedbackResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolAddOnNotEnabledException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUpdateAuthEventFeedbackRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus:
    post:
      operationId: AdminUpdateDeviceStatus
      description: <p>Updates the device status as an administrator.</p> <p>Calling this
        action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUpdateDeviceStatusResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUpdateDeviceStatusRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateUserAttributes:
    post:
      operationId: AdminUpdateUserAttributes
      description: <p>Updates the specified user's attributes, including developer
        attributes, as an administrator. Works on any user.</p> <p>For custom
        attributes, you must prepend the <code>custom:</code> prefix to the
        attribute name.</p> <p>In addition to updating user attributes, this API
        can also be used to mark phone and email as verified.</p> <p>Calling
        this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUpdateUserAttributesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "485":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "487":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "488":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "489":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "490":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "491":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "492":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUpdateUserAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUpdateUserAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUserGlobalSignOut:
    post:
      operationId: AdminUserGlobalSignOut
      description: <p>Signs out users from all devices, as an administrator.</p> <p>Calling
        this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserGlobalSignOutResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AdminUserGlobalSignOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserGlobalSignOutRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.AssociateSoftwareToken:
    post:
      operationId: AssociateSoftwareToken
      description: Returns a unique generated shared secret key code for the user account.
        The request takes an access token or a session string, but not both.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssociateSoftwareTokenResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "484":
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareTokenMFANotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.AssociateSoftwareToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssociateSoftwareTokenRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ChangePassword:
    post:
      operationId: ChangePassword
      description: Changes the password for a specified user in a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "486":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "487":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "488":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "489":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ChangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmDevice:
    post:
      operationId: ConfirmDevice
      description: Confirms tracking of the device. This API call is the call that begins
        device tracking.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmDeviceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "484":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "485":
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsernameExistsException"
        "486":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "488":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "489":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "490":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "491":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ConfirmDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmDeviceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmForgotPassword:
    post:
      operationId: ConfirmForgotPassword
      description: Allows a user to enter a confirmation code to reset a forgotten password.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmForgotPasswordResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "482":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "484":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "486":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
        "487":
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCodeException"
        "488":
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFailedAttemptsException"
        "489":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "490":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "491":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "492":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "493":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "494":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ConfirmForgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmForgotPasswordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmSignUp:
    post:
      operationId: ConfirmSignUp
      description: Confirms registration of a user and handles the existing alias from a
        previous user.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmSignUpResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyFailedAttemptsException"
        "486":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
        "487":
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCodeException"
        "488":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "489":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "490":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "491":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "492":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "493":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ConfirmSignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmSignUpRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateGroup:
    post:
      operationId: CreateGroup
      description: <p>Creates a new group in the specified user pool.</p> <p>Calling this
        action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGroupResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: GroupExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupExistsException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateIdentityProvider:
    post:
      operationId: CreateIdentityProvider
      description: Creates an identity provider for a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIdentityProviderResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: DuplicateProviderException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateProviderException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateIdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIdentityProviderRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateResourceServer:
    post:
      operationId: CreateResourceServer
      description: Creates a new OAuth2.0 resource server and defines custom scopes in it.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResourceServerResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateResourceServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResourceServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserImportJob:
    post:
      operationId: CreateUserImportJob
      description: Creates the user import job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserImportJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionNotMetException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserImportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserImportJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPool:
    post:
      operationId: CreateUserPool
      description: Creates a new Amazon Cognito user pool and sets the password policy for
        the pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserPoolResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "484":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "485":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "486":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "487":
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolTaggingException"
        "488":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserPoolRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolClient:
    post:
      operationId: CreateUserPoolClient
      description: Creates the user pool client.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserPoolClientResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: ScopeDoesNotExistException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeDoesNotExistException"
        "486":
          description: InvalidOAuthFlowException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidOAuthFlowException"
        "487":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserPoolClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserPoolClientRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolDomain:
    post:
      operationId: CreateUserPoolDomain
      description: Creates a new domain for a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserPoolDomainResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.CreateUserPoolDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserPoolDomainRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteGroup:
    post:
      operationId: DeleteGroup
      description: <p>Deletes a group. Currently only groups with no members can be
        deleted.</p> <p>Calling this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteIdentityProvider:
    post:
      operationId: DeleteIdentityProvider
      description: Deletes an identity provider for a user pool.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: UnsupportedIdentityProviderException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedIdentityProviderException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteIdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteIdentityProviderRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteResourceServer:
    post:
      operationId: DeleteResourceServer
      description: Deletes a resource server.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteResourceServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteResourceServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUser:
    post:
      operationId: DeleteUser
      description: Allows a user to delete himself or herself.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "485":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "486":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "487":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserAttributes:
    post:
      operationId: DeleteUserAttributes
      description: Deletes the attributes for a user.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserAttributesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "485":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "486":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "487":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPool:
    post:
      operationId: DeleteUserPool
      description: Deletes the specified Amazon Cognito user pool.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserImportInProgressException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserPoolRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolClient:
    post:
      operationId: DeleteUserPoolClient
      description: Allows the developer to delete the user pool client.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserPoolClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserPoolClientRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolDomain:
    post:
      operationId: DeleteUserPoolDomain
      description: Deletes a domain for a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserPoolDomainResponse"
        "480":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DeleteUserPoolDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserPoolDomainRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeIdentityProvider:
    post:
      operationId: DescribeIdentityProvider
      description: Gets information about a specific identity provider.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeIdentityProviderResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeIdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeIdentityProviderRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeResourceServer:
    post:
      operationId: DescribeResourceServer
      description: Describes a resource server.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeResourceServerResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeResourceServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeResourceServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeRiskConfiguration:
    post:
      operationId: DescribeRiskConfiguration
      description: Describes the risk configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeRiskConfigurationResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolAddOnNotEnabledException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeRiskConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeRiskConfigurationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserImportJob:
    post:
      operationId: DescribeUserImportJob
      description: Describes the user import job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeUserImportJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserImportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeUserImportJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPool:
    post:
      operationId: DescribeUserPool
      description: Returns the configuration information and metadata of the specified user
        pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeUserPoolResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolTaggingException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeUserPoolRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolClient:
    post:
      operationId: DescribeUserPoolClient
      description: Client method for returning the configuration information and metadata
        of the specified user pool app client.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeUserPoolClientResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserPoolClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeUserPoolClientRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolDomain:
    post:
      operationId: DescribeUserPoolDomain
      description: Gets information about a domain.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeUserPoolDomainResponse"
        "480":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.DescribeUserPoolDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeUserPoolDomainRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ForgetDevice:
    post:
      operationId: ForgetDevice
      description: Forgets the specified device.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "485":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "486":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "487":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "488":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ForgetDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgetDeviceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ForgotPassword:
    post:
      operationId: ForgotPassword
      description: Calling this API causes a message to be sent to the end user with a
        confirmation code that is required to change the user's password. For
        the <code>Username</code> parameter, you can use the username or user
        alias. If a verified phone number exists for the user, the confirmation
        code is sent to the phone number. Otherwise, if a verified email exists,
        the confirmation code is sent to the email. If neither a verified phone
        number nor a verified email exists,
        <code>InvalidParameterException</code> is thrown. To use the
        confirmation code for resetting the password, call .
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForgotPasswordResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "487":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "488":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "489":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "490":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "491":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
        "492":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "493":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "494":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ForgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetCSVHeader:
    post:
      operationId: GetCSVHeader
      description: Gets the header information for the .csv file to be used as input for
        the user import job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCSVHeaderResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetCSVHeader
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCSVHeaderRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetDevice:
    post:
      operationId: GetDevice
      description: Gets the device.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "486":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "487":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "488":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDeviceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetGroup:
    post:
      operationId: GetGroup
      description: <p>Gets a group.</p> <p>Calling this action requires developer
        credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier:
    post:
      operationId: GetIdentityProviderByIdentifier
      description: Gets the specified identity provider.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIdentityProviderByIdentifierResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIdentityProviderByIdentifierRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetSigningCertificate:
    post:
      operationId: GetSigningCertificate
      description: This method takes a user pool ID, and returns the signing certificate.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSigningCertificateResponse"
        "480":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetSigningCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSigningCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUICustomization:
    post:
      operationId: GetUICustomization
      description: Gets the UI Customization information for a particular app client's app
        UI, if there is something set. If nothing is set for the particular
        client, but there is an existing pool level customization (app
        <code>clientId</code> will be <code>ALL</code>), then that is returned.
        If nothing is present, then an empty shape is returned.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUICustomizationResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUICustomization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUICustomizationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUser:
    post:
      operationId: GetUser
      description: Gets the user attributes and metadata for a user.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "485":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "486":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "487":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode:
    post:
      operationId: GetUserAttributeVerificationCode
      description: Gets the user attribute verification code for the specified attribute
        name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserAttributeVerificationCodeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "485":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "486":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "487":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "488":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "489":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "490":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
        "491":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "492":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "493":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "494":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "495":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserAttributeVerificationCodeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserPoolMfaConfig:
    post:
      operationId: GetUserPoolMfaConfig
      description: Gets the user pool multi-factor authentication (MFA) configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserPoolMfaConfigResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GetUserPoolMfaConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserPoolMfaConfigRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.GlobalSignOut:
    post:
      operationId: GlobalSignOut
      description: Signs out users from all devices.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalSignOutResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "485":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.GlobalSignOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalSignOutRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.InitiateAuth:
    post:
      operationId: InitiateAuth
      description: Initiates the authentication flow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateAuthResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "485":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "486":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "487":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "488":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "489":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "490":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "491":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "492":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "493":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.InitiateAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateAuthRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListDevices:
    post:
      operationId: ListDevices
      description: Lists the devices.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDevicesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "486":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "487":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "488":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListDevices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDevicesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListGroups:
    post:
      operationId: ListGroups
      description: <p>Lists the groups associated with a user pool.</p> <p>Calling this
        action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListGroupsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListIdentityProviders:
    post:
      operationId: ListIdentityProviders
      description: Lists information about all identity providers for a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIdentityProvidersResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListIdentityProviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListIdentityProvidersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListResourceServers:
    post:
      operationId: ListResourceServers
      description: Lists the resource servers for a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResourceServersResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListResourceServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListResourceServersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: <p>Lists the tags that are assigned to an Amazon Cognito user pool.</p>
        <p>A tag is a label that you can apply to user pools to categorize and
        manage them in different ways, such as by purpose, owner, environment,
        or other criteria.</p> <p>You can use this action up to 10 times per
        second, per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserImportJobs:
    post:
      operationId: ListUserImportJobs
      description: Lists the user import jobs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserImportJobsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUserImportJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUserImportJobsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPoolClients:
    post:
      operationId: ListUserPoolClients
      description: Lists the clients that have been created for the specified user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserPoolClientsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUserPoolClients
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUserPoolClientsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPools:
    post:
      operationId: ListUserPools
      description: Lists the user pools associated with an AWS account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserPoolsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUserPools
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUserPoolsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsers:
    post:
      operationId: ListUsers
      description: Lists the users in the Amazon Cognito user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: PaginationToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUsersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsersInGroup:
    post:
      operationId: ListUsersInGroup
      description: <p>Lists the users in the specified group.</p> <p>Calling this action
        requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersInGroupResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ListUsersInGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUsersInGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.ResendConfirmationCode:
    post:
      operationId: ResendConfirmationCode
      description: Resends the confirmation (for confirmation of registration) to a
        specific user in the user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResendConfirmationCodeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "487":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "488":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "489":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "490":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "491":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
        "492":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "493":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.ResendConfirmationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendConfirmationCodeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.RespondToAuthChallenge:
    post:
      operationId: RespondToAuthChallenge
      description: Responds to the authentication challenge.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespondToAuthChallengeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
        "484":
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCodeException"
        "485":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "486":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "487":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "488":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "489":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "490":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "491":
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MFAMethodNotFoundException"
        "492":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "493":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "494":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "495":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "496":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "497":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "498":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "499":
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareTokenMFANotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.RespondToAuthChallenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RespondToAuthChallengeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetRiskConfiguration:
    post:
      operationId: SetRiskConfiguration
      description: <p>Configures actions on detected risks. To delete the risk
        configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass
        null values for all four configuration types.</p> <p>To enable Amazon
        Cognito advanced security features, update the user pool to include the
        <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>
        <p>See .</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetRiskConfigurationResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolAddOnNotEnabledException"
        "485":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
        "486":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "487":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetRiskConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetRiskConfigurationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUICustomization:
    post:
      operationId: SetUICustomization
      description: <p>Sets the UI customization information for a user pool's built-in app
        UI.</p> <p>You can specify app UI customization settings for a single
        client (with a specific <code>clientId</code>) or for all clients (by
        setting the <code>clientId</code> to <code>ALL</code>). If you specify
        <code>ALL</code>, the default configuration will be used for every
        client that has no UI customization set previously. If you specify UI
        customization settings for a particular client, it will no longer fall
        back to the <code>ALL</code> configuration. </p> <note> <p>To use this
        API, your user pool must have a domain associated with it. Otherwise,
        there is no place to host the app's pages, and the service will throw an
        error.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUICustomizationResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUICustomization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUICustomizationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserMFAPreference:
    post:
      operationId: SetUserMFAPreference
      description: Set the user's multi-factor authentication (MFA) method preference,
        including which MFA factors are enabled and if any are preferred. Only
        one factor can be set as preferred. The preferred MFA factor will be
        used to authenticate a user if multiple factors are enabled. If multiple
        options are enabled and no preference is set, a challenge to choose an
        MFA option will be returned during sign in.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUserMFAPreferenceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUserMFAPreference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUserMFAPreferenceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserPoolMfaConfig:
    post:
      operationId: SetUserPoolMfaConfig
      description: Set the user pool multi-factor authentication (MFA) configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUserPoolMfaConfigResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "484":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUserPoolMfaConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUserPoolMfaConfigRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserSettings:
    post:
      operationId: SetUserSettings
      description: " <i>This action is no longer supported.</i> You can use it to configure
        only SMS MFA. You can't use it to configure TOTP software token MFA. To
        configure either type of MFA, use the <a>SetUserMFAPreference</a> action
        instead."
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUserSettingsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SetUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUserSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.SignUp:
    post:
      operationId: SignUp
      description: Registers the user in the specified user pool and creates a user name,
        password, and user attributes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "483":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPasswordException"
        "486":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "487":
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsernameExistsException"
        "488":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "489":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "490":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "491":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "492":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "493":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.SignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.StartUserImportJob:
    post:
      operationId: StartUserImportJob
      description: Starts the user import.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartUserImportJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "484":
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionNotMetException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.StartUserImportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartUserImportJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.StopUserImportJob:
    post:
      operationId: StopUserImportJob
      description: Stops the user import job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopUserImportJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "484":
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionNotMetException"
        "485":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.StopUserImportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopUserImportJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.TagResource:
    post:
      operationId: TagResource
      description: <p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a
        label that you can use to categorize and manage user pools in different
        ways, such as by purpose, owner, environment, or other criteria.</p>
        <p>Each tag consists of a key and value, both of which you define. A key
        is a general category for more specific values. For example, if you have
        two versions of a user pool, one for testing and another for production,
        you might assign an <code>Environment</code> tag key to both user pools.
        The value of this key might be <code>Test</code> for one user pool and
        <code>Production</code> for the other.</p> <p>Tags are useful for cost
        tracking and access control. You can activate your tags so that they
        appear on the Billing and Cost Management console, where you can track
        the costs associated with your user pools. In an IAM policy, you can
        constrain permissions for user pools based on specific tags or tag
        values.</p> <p>You can use this action up to 5 times per second, per
        account. A user pool can have as many as 50 tags.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UntagResource:
    post:
      operationId: UntagResource
      description: Removes the specified tags from an Amazon Cognito user pool. You can use
        this action up to 5 times per second, per account
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateAuthEventFeedback:
    post:
      operationId: UpdateAuthEventFeedback
      description: Provides the feedback for an authentication event whether it was from a
        valid user or not. This feedback is used for improving the risk
        evaluation decision for the user pool as part of Amazon Cognito advanced
        security.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAuthEventFeedbackResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "485":
          description: UserPoolAddOnNotEnabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolAddOnNotEnabledException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateAuthEventFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuthEventFeedbackRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateDeviceStatus:
    post:
      operationId: UpdateDeviceStatus
      description: Updates the device status.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDeviceStatusResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "486":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "487":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "488":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateDeviceStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeviceStatusRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateGroup:
    post:
      operationId: UpdateGroup
      description: <p>Updates the specified group with the specified attributes.</p>
        <p>Calling this action requires developer credentials.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateIdentityProvider:
    post:
      operationId: UpdateIdentityProvider
      description: Updates identity provider information for a user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateIdentityProviderResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: UnsupportedIdentityProviderException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedIdentityProviderException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateIdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIdentityProviderRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateResourceServer:
    post:
      operationId: UpdateResourceServer
      description: Updates the name and scopes of resource server. All other fields are
        read-only.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResourceServerResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateResourceServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateResourceServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserAttributes:
    post:
      operationId: UpdateUserAttributes
      description: Allows a user to update a specific attribute (one at a time).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserAttributesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
        "483":
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCodeException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedLambdaException"
        "486":
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLambdaValidationException"
        "487":
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLambdaResponseException"
        "488":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "489":
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasExistsException"
        "490":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "491":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "492":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
        "493":
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeDeliveryFailureException"
        "494":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "495":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "496":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "497":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPool:
    post:
      operationId: UpdateUserPool
      description: Updates the specified user pool with the specified attributes. If you
        don't provide a value for an attribute, it will be set to the default
        value. You can get a list of the current user pool settings with .
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserPoolResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserImportInProgressException"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "487":
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleAccessPolicyException"
        "488":
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSmsRoleTrustRelationshipException"
        "489":
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPoolTaggingException"
        "490":
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEmailRoleAccessPolicyException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPoolRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolClient:
    post:
      operationId: UpdateUserPoolClient
      description: Updates the specified user pool app client with the specified
        attributes. If you don't provide a value for an attribute, it will be
        set to the default value. You can get a list of the current user pool
        app client settings with .
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserPoolClientResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: ScopeDoesNotExistException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScopeDoesNotExistException"
        "486":
          description: InvalidOAuthFlowException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidOAuthFlowException"
        "487":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserPoolClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPoolClientRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolDomain:
    post:
      operationId: UpdateUserPoolDomain
      description: <p>Updates the Secure Sockets Layer (SSL) certificate for the custom
        domain for your user pool.</p> <p>You can use this operation to provide
        the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito.
        You cannot use it to change the domain for a user pool.</p> <p>A custom
        domain is used to host the Amazon Cognito hosted UI, which provides
        sign-up and sign-in pages for your application. When you set up a custom
        domain, you provide a certificate that you manage with AWS Certificate
        Manager (ACM). When necessary, you can use this operation to change the
        certificate that you applied to your custom domain.</p> <p>Usually, this
        is unnecessary following routine certificate renewal with ACM. When you
        renew your existing certificate in ACM, the ARN for your certificate
        remains the same, and your custom domain uses the new certificate
        automatically.</p> <p>However, if you replace your existing certificate
        with a new one, ACM gives the new certificate a new ARN. To apply the
        new certificate to your custom domain, you must provide this ARN to
        Amazon Cognito.</p> <p>When you add your new certificate in ACM, you
        must choose US East (N. Virginia) as the AWS Region.</p> <p>After you
        submit your request, Amazon Cognito requires up to 1 hour to distribute
        your new certificate to your custom domain.</p> <p>For more information
        about adding a custom domain to your user pool, see <a
        href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using
        Your Own Domain for the Hosted UI</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserPoolDomainResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.UpdateUserPoolDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPoolDomainRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.VerifySoftwareToken:
    post:
      operationId: VerifySoftwareToken
      description: Use this API to register a user's entered TOTP code and mark the user's
        software token MFA status as "verified" if successful. The request takes
        an access token or a session string, but not both.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifySoftwareTokenResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidUserPoolConfigurationException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "486":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "487":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "488":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "489":
          description: EnableSoftwareTokenMFAException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnableSoftwareTokenMFAException"
        "490":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "491":
          description: SoftwareTokenMFANotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareTokenMFANotFoundException"
        "492":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.VerifySoftwareToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifySoftwareTokenRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityProviderService.VerifyUserAttribute:
    post:
      operationId: VerifyUserAttribute
      description: Verifies the specified user attributes in the user pool.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyUserAttributeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeMismatchException"
        "483":
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredCodeException"
        "484":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "487":
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetRequiredException"
        "488":
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotFoundException"
        "489":
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotConfirmedException"
        "490":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityProviderService.VerifyUserAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyUserAttributeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://cognito-idp.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Cognito Identity Provider multi-region endpoint
  - url: https://cognito-idp.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Cognito Identity Provider multi-region endpoint
  - url: http://cognito-idp.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity Provider endpoint for China (Beijing) and
      China (Ningxia)
  - url: https://cognito-idp.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity Provider endpoint for China (Beijing) and
      China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddCustomAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to add custom
        attributes.
    AddCustomAttributesRequest:
      type: object
      required:
        - UserPoolId
        - CustomAttributes
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        CustomAttributes:
          $ref: "#/components/schemas/CustomAttributesListType"
      description: Represents the request to add custom attributes.
    ResourceNotFoundException: {}
    InvalidParameterException: {}
    TooManyRequestsException: {}
    NotAuthorizedException: {}
    UserImportInProgressException: {}
    InternalErrorException: {}
    AdminAddUserToGroupRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - GroupName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
    UserNotFoundException: {}
    AdminConfirmSignUpResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to confirm
        registration.
    AdminConfirmSignUpRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to confirm user registration.
    UnexpectedLambdaException: {}
    UserLambdaValidationException: {}
    TooManyFailedAttemptsException: {}
    InvalidLambdaResponseException: {}
    LimitExceededException: {}
    AdminCreateUserResponse:
      type: object
      properties:
        User:
          $ref: "#/components/schemas/UserType"
      description: Represents the response from the server to the request to create the
        user.
    AdminCreateUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserAttributes:
          $ref: "#/components/schemas/AttributeListType"
        ValidationData:
          $ref: "#/components/schemas/AttributeListType"
        TemporaryPassword:
          $ref: "#/components/schemas/PasswordType"
        ForceAliasCreation:
          $ref: "#/components/schemas/ForceAliasCreation"
        MessageAction:
          $ref: "#/components/schemas/MessageActionType"
        DesiredDeliveryMediums:
          $ref: "#/components/schemas/DeliveryMediumListType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to create a user in the specified user pool.
    UsernameExistsException: {}
    InvalidPasswordException: {}
    CodeDeliveryFailureException: {}
    PreconditionNotMetException: {}
    InvalidSmsRoleAccessPolicyException: {}
    InvalidSmsRoleTrustRelationshipException: {}
    UnsupportedUserStateException: {}
    AdminDeleteUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
      description: Represents the request to delete a user as an administrator.
    AdminDeleteUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response received from the server for a request to delete
        user attributes.
    AdminDeleteUserAttributesRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - UserAttributeNames
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserAttributeNames:
          $ref: "#/components/schemas/AttributeNameListType"
      description: Represents the request to delete user attributes as an administrator.
    AdminDisableProviderForUserResponse:
      type: object
      properties: {}
    AdminDisableProviderForUserRequest:
      type: object
      required:
        - UserPoolId
        - User
      properties:
        UserPoolId:
          $ref: "#/components/schemas/StringType"
        User:
          $ref: "#/components/schemas/ProviderUserIdentifierType"
    AliasExistsException: {}
    AdminDisableUserResponse:
      type: object
      properties: {}
      description: Represents the response received from the server to disable the user as
        an administrator.
    AdminDisableUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
      description: Represents the request to disable any user as an administrator.
    AdminEnableUserResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to enable a user
        as an administrator.
    AdminEnableUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
      description: Represents the request that enables the user as an administrator.
    AdminForgetDeviceRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - DeviceKey
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
      description: Sends the forgot device request, as an administrator.
    InvalidUserPoolConfigurationException: {}
    AdminGetDeviceResponse:
      type: object
      required:
        - Device
      properties:
        Device:
          $ref: "#/components/schemas/DeviceType"
      description: Gets the device response, as an administrator.
    AdminGetDeviceRequest:
      type: object
      required:
        - DeviceKey
        - UserPoolId
        - Username
      properties:
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
      description: Represents the request to get the device, as an administrator.
    AdminGetUserResponse:
      type: object
      required:
        - Username
      properties:
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserAttributes:
          $ref: "#/components/schemas/AttributeListType"
        UserCreateDate:
          $ref: "#/components/schemas/DateType"
        UserLastModifiedDate:
          $ref: "#/components/schemas/DateType"
        Enabled:
          $ref: "#/components/schemas/BooleanType"
        UserStatus:
          $ref: "#/components/schemas/UserStatusType"
        MFAOptions:
          $ref: "#/components/schemas/MFAOptionListType"
        PreferredMfaSetting:
          $ref: "#/components/schemas/StringType"
        UserMFASettingList:
          $ref: "#/components/schemas/UserMFASettingListType"
      description: Represents the response from the server from the request to get the
        specified user as an administrator.
    AdminGetUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
      description: Represents the request to get the specified user as an administrator.
    AdminInitiateAuthResponse:
      type: object
      properties:
        ChallengeName:
          $ref: "#/components/schemas/ChallengeNameType"
        Session:
          $ref: "#/components/schemas/SessionType"
        ChallengeParameters:
          $ref: "#/components/schemas/ChallengeParametersType"
        AuthenticationResult:
          $ref: "#/components/schemas/AuthenticationResultType"
      description: Initiates the authentication response, as an administrator.
    AdminInitiateAuthRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
        - AuthFlow
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        AuthFlow:
          $ref: "#/components/schemas/AuthFlowType"
        AuthParameters:
          $ref: "#/components/schemas/AuthParametersType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        ContextData:
          $ref: "#/components/schemas/ContextDataType"
      description: Initiates the authorization request, as an administrator.
    MFAMethodNotFoundException: {}
    PasswordResetRequiredException: {}
    UserNotConfirmedException: {}
    AdminLinkProviderForUserResponse:
      type: object
      properties: {}
    AdminLinkProviderForUserRequest:
      type: object
      required:
        - UserPoolId
        - DestinationUser
        - SourceUser
      properties:
        UserPoolId:
          $ref: "#/components/schemas/StringType"
        DestinationUser:
          $ref: "#/components/schemas/ProviderUserIdentifierType"
        SourceUser:
          $ref: "#/components/schemas/ProviderUserIdentifierType"
    AdminListDevicesResponse:
      type: object
      properties:
        Devices:
          $ref: "#/components/schemas/DeviceListType"
        PaginationToken:
          $ref: "#/components/schemas/SearchPaginationTokenType"
      description: Lists the device's response, as an administrator.
    AdminListDevicesRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        Limit:
          $ref: "#/components/schemas/QueryLimitType"
        PaginationToken:
          $ref: "#/components/schemas/SearchPaginationTokenType"
      description: Represents the request to list devices, as an administrator.
    AdminListGroupsForUserResponse:
      type: object
      properties:
        Groups:
          $ref: "#/components/schemas/GroupListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    AdminListGroupsForUserRequest:
      type: object
      required:
        - Username
        - UserPoolId
      properties:
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Limit:
          $ref: "#/components/schemas/QueryLimitType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    AdminListUserAuthEventsResponse:
      type: object
      properties:
        AuthEvents:
          $ref: "#/components/schemas/AuthEventsType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    AdminListUserAuthEventsRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        MaxResults:
          $ref: "#/components/schemas/QueryLimitType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    UserPoolAddOnNotEnabledException: {}
    AdminRemoveUserFromGroupRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - GroupName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
    AdminResetUserPasswordResponse:
      type: object
      properties: {}
      description: Represents the response from the server to reset a user password as an
        administrator.
    AdminResetUserPasswordRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to reset a user's password as an administrator.
    InvalidEmailRoleAccessPolicyException: {}
    AdminRespondToAuthChallengeResponse:
      type: object
      properties:
        ChallengeName:
          $ref: "#/components/schemas/ChallengeNameType"
        Session:
          $ref: "#/components/schemas/SessionType"
        ChallengeParameters:
          $ref: "#/components/schemas/ChallengeParametersType"
        AuthenticationResult:
          $ref: "#/components/schemas/AuthenticationResultType"
      description: Responds to the authentication challenge, as an administrator.
    AdminRespondToAuthChallengeRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
        - ChallengeName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        ChallengeName:
          $ref: "#/components/schemas/ChallengeNameType"
        ChallengeResponses:
          $ref: "#/components/schemas/ChallengeResponsesType"
        Session:
          $ref: "#/components/schemas/SessionType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        ContextData:
          $ref: "#/components/schemas/ContextDataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: The request to respond to the authentication challenge, as an
        administrator.
    CodeMismatchException: {}
    ExpiredCodeException: {}
    SoftwareTokenMFANotFoundException: {}
    AdminSetUserMFAPreferenceResponse:
      type: object
      properties: {}
    AdminSetUserMFAPreferenceRequest:
      type: object
      required:
        - Username
        - UserPoolId
      properties:
        SMSMfaSettings:
          $ref: "#/components/schemas/SMSMfaSettingsType"
        SoftwareTokenMfaSettings:
          $ref: "#/components/schemas/SoftwareTokenMfaSettingsType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
    AdminSetUserPasswordResponse:
      type: object
      properties: {}
    AdminSetUserPasswordRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - Password
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        Password:
          $ref: "#/components/schemas/PasswordType"
        Permanent:
          $ref: "#/components/schemas/BooleanType"
    AdminSetUserSettingsResponse:
      type: object
      properties: {}
      description: Represents the response from the server to set user settings as an
        administrator.
    AdminSetUserSettingsRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - MFAOptions
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        MFAOptions:
          $ref: "#/components/schemas/MFAOptionListType"
      description: You can use this parameter to set an MFA configuration that uses the SMS
        delivery medium.
    AdminUpdateAuthEventFeedbackResponse:
      type: object
      properties: {}
    AdminUpdateAuthEventFeedbackRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - EventId
        - FeedbackValue
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        EventId:
          $ref: "#/components/schemas/EventIdType"
        FeedbackValue:
          $ref: "#/components/schemas/FeedbackValueType"
    AdminUpdateDeviceStatusResponse:
      type: object
      properties: {}
      description: The status response from the request to update the device, as an
        administrator.
    AdminUpdateDeviceStatusRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - DeviceKey
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        DeviceRememberedStatus:
          $ref: "#/components/schemas/DeviceRememberedStatusType"
      description: The request to update the device status, as an administrator.
    AdminUpdateUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to update user
        attributes as an administrator.
    AdminUpdateUserAttributesRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - UserAttributes
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserAttributes:
          $ref: "#/components/schemas/AttributeListType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to update the user's attributes as an
        administrator.
    AdminUserGlobalSignOutResponse:
      type: object
      properties: {}
      description: The global sign-out response, as an administrator.
    AdminUserGlobalSignOutRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
      description: The request to sign out of all devices, as an administrator.
    AssociateSoftwareTokenResponse:
      type: object
      properties:
        SecretCode:
          $ref: "#/components/schemas/SecretCodeType"
        Session:
          $ref: "#/components/schemas/SessionType"
    AssociateSoftwareTokenRequest:
      type: object
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        Session:
          $ref: "#/components/schemas/SessionType"
    ChangePasswordResponse:
      type: object
      properties: {}
      description: The response from the server to the change password request.
    ChangePasswordRequest:
      type: object
      required:
        - PreviousPassword
        - ProposedPassword
        - AccessToken
      properties:
        PreviousPassword:
          $ref: "#/components/schemas/PasswordType"
        ProposedPassword:
          $ref: "#/components/schemas/PasswordType"
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
      description: Represents the request to change a user password.
    ConfirmDeviceResponse:
      type: object
      properties:
        UserConfirmationNecessary:
          $ref: "#/components/schemas/BooleanType"
      description: Confirms the device response.
    ConfirmDeviceRequest:
      type: object
      required:
        - AccessToken
        - DeviceKey
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        DeviceSecretVerifierConfig:
          $ref: "#/components/schemas/DeviceSecretVerifierConfigType"
        DeviceName:
          $ref: "#/components/schemas/DeviceNameType"
      description: Confirms the device request.
    ConfirmForgotPasswordResponse:
      type: object
      properties: {}
      description: The response from the server that results from a user's request to
        retrieve a forgotten password.
    ConfirmForgotPasswordRequest:
      type: object
      required:
        - ClientId
        - Username
        - ConfirmationCode
        - Password
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        SecretHash:
          $ref: "#/components/schemas/SecretHashType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        ConfirmationCode:
          $ref: "#/components/schemas/ConfirmationCodeType"
        Password:
          $ref: "#/components/schemas/PasswordType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: The request representing the confirmation for a password reset.
    ConfirmSignUpResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the registration
        confirmation.
    ConfirmSignUpRequest:
      type: object
      required:
        - ClientId
        - Username
        - ConfirmationCode
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        SecretHash:
          $ref: "#/components/schemas/SecretHashType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        ConfirmationCode:
          $ref: "#/components/schemas/ConfirmationCodeType"
        ForceAliasCreation:
          $ref: "#/components/schemas/ForceAliasCreation"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to confirm registration of a user.
    CreateGroupResponse:
      type: object
      properties:
        Group:
          $ref: "#/components/schemas/GroupType"
    CreateGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        RoleArn:
          $ref: "#/components/schemas/ArnType"
        Precedence:
          $ref: "#/components/schemas/PrecedenceType"
    GroupExistsException: {}
    CreateIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: "#/components/schemas/IdentityProviderType"
    CreateIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
        - ProviderType
        - ProviderDetails
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ProviderName:
          $ref: "#/components/schemas/ProviderNameTypeV1"
        ProviderType:
          $ref: "#/components/schemas/IdentityProviderTypeType"
        ProviderDetails:
          $ref: "#/components/schemas/ProviderDetailsType"
        AttributeMapping:
          $ref: "#/components/schemas/AttributeMappingType"
        IdpIdentifiers:
          $ref: "#/components/schemas/IdpIdentifiersListType"
    DuplicateProviderException: {}
    CreateResourceServerResponse:
      type: object
      required:
        - ResourceServer
      properties:
        ResourceServer:
          $ref: "#/components/schemas/ResourceServerType"
    CreateResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
        - Name
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Identifier:
          $ref: "#/components/schemas/ResourceServerIdentifierType"
        Name:
          $ref: "#/components/schemas/ResourceServerNameType"
        Scopes:
          $ref: "#/components/schemas/ResourceServerScopeListType"
    CreateUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: "#/components/schemas/UserImportJobType"
      description: Represents the response from the server to the request to create the
        user import job.
    CreateUserImportJobRequest:
      type: object
      required:
        - JobName
        - UserPoolId
        - CloudWatchLogsRoleArn
      properties:
        JobName:
          $ref: "#/components/schemas/UserImportJobNameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        CloudWatchLogsRoleArn:
          $ref: "#/components/schemas/ArnType"
      description: Represents the request to create the user import job.
    CreateUserPoolResponse:
      type: object
      properties:
        UserPool:
          $ref: "#/components/schemas/UserPoolType"
      description: Represents the response from the server for the request to create a user
        pool.
    CreateUserPoolRequest:
      type: object
      required:
        - PoolName
      properties:
        PoolName:
          $ref: "#/components/schemas/UserPoolNameType"
        Policies:
          $ref: "#/components/schemas/UserPoolPolicyType"
        LambdaConfig:
          $ref: "#/components/schemas/LambdaConfigType"
        AutoVerifiedAttributes:
          $ref: "#/components/schemas/VerifiedAttributesListType"
        AliasAttributes:
          $ref: "#/components/schemas/AliasAttributesListType"
        UsernameAttributes:
          $ref: "#/components/schemas/UsernameAttributesListType"
        SmsVerificationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        EmailVerificationMessage:
          $ref: "#/components/schemas/EmailVerificationMessageType"
        EmailVerificationSubject:
          $ref: "#/components/schemas/EmailVerificationSubjectType"
        VerificationMessageTemplate:
          $ref: "#/components/schemas/VerificationMessageTemplateType"
        SmsAuthenticationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        MfaConfiguration:
          $ref: "#/components/schemas/UserPoolMfaType"
        DeviceConfiguration:
          $ref: "#/components/schemas/DeviceConfigurationType"
        EmailConfiguration:
          $ref: "#/components/schemas/EmailConfigurationType"
        SmsConfiguration:
          $ref: "#/components/schemas/SmsConfigurationType"
        UserPoolTags:
          $ref: "#/components/schemas/UserPoolTagsType"
        AdminCreateUserConfig:
          $ref: "#/components/schemas/AdminCreateUserConfigType"
        Schema:
          $ref: "#/components/schemas/SchemaAttributesListType"
        UserPoolAddOns:
          $ref: "#/components/schemas/UserPoolAddOnsType"
      description: Represents the request to create a user pool.
    UserPoolTaggingException: {}
    CreateUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: "#/components/schemas/UserPoolClientType"
      description: Represents the response from the server to create a user pool client.
    CreateUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientName:
          $ref: "#/components/schemas/ClientNameType"
        GenerateSecret:
          $ref: "#/components/schemas/GenerateSecret"
        RefreshTokenValidity:
          $ref: "#/components/schemas/RefreshTokenValidityType"
        ReadAttributes:
          $ref: "#/components/schemas/ClientPermissionListType"
        WriteAttributes:
          $ref: "#/components/schemas/ClientPermissionListType"
        ExplicitAuthFlows:
          $ref: "#/components/schemas/ExplicitAuthFlowsListType"
        SupportedIdentityProviders:
          $ref: "#/components/schemas/SupportedIdentityProvidersListType"
        CallbackURLs:
          $ref: "#/components/schemas/CallbackURLsListType"
        LogoutURLs:
          $ref: "#/components/schemas/LogoutURLsListType"
        DefaultRedirectURI:
          $ref: "#/components/schemas/RedirectUrlType"
        AllowedOAuthFlows:
          $ref: "#/components/schemas/OAuthFlowsType"
        AllowedOAuthScopes:
          $ref: "#/components/schemas/ScopeListType"
        AllowedOAuthFlowsUserPoolClient:
          $ref: "#/components/schemas/BooleanType"
        AnalyticsConfiguration:
          $ref: "#/components/schemas/AnalyticsConfigurationType"
      description: Represents the request to create a user pool client.
    ScopeDoesNotExistException: {}
    InvalidOAuthFlowException: {}
    CreateUserPoolDomainResponse:
      type: object
      properties:
        CloudFrontDomain:
          $ref: "#/components/schemas/DomainType"
    CreateUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
      properties:
        Domain:
          $ref: "#/components/schemas/DomainType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        CustomDomainConfig:
          $ref: "#/components/schemas/CustomDomainConfigType"
    DeleteGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
    DeleteIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ProviderName:
          $ref: "#/components/schemas/ProviderNameType"
    UnsupportedIdentityProviderException: {}
    DeleteResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Identifier:
          $ref: "#/components/schemas/ResourceServerIdentifierType"
    DeleteUserRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
      description: Represents the request to delete a user.
    DeleteUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server to delete user attributes.
    DeleteUserAttributesRequest:
      type: object
      required:
        - UserAttributeNames
        - AccessToken
      properties:
        UserAttributeNames:
          $ref: "#/components/schemas/AttributeNameListType"
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
      description: Represents the request to delete user attributes.
    DeleteUserPoolRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
      description: Represents the request to delete a user pool.
    DeleteUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
      description: Represents the request to delete a user pool client.
    DeleteUserPoolDomainResponse:
      type: object
      properties: {}
    DeleteUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
      properties:
        Domain:
          $ref: "#/components/schemas/DomainType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
    DescribeIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: "#/components/schemas/IdentityProviderType"
    DescribeIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ProviderName:
          $ref: "#/components/schemas/ProviderNameType"
    DescribeResourceServerResponse:
      type: object
      required:
        - ResourceServer
      properties:
        ResourceServer:
          $ref: "#/components/schemas/ResourceServerType"
    DescribeResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Identifier:
          $ref: "#/components/schemas/ResourceServerIdentifierType"
    DescribeRiskConfigurationResponse:
      type: object
      required:
        - RiskConfiguration
      properties:
        RiskConfiguration:
          $ref: "#/components/schemas/RiskConfigurationType"
    DescribeRiskConfigurationRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
    DescribeUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: "#/components/schemas/UserImportJobType"
      description: Represents the response from the server to the request to describe the
        user import job.
    DescribeUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        JobId:
          $ref: "#/components/schemas/UserImportJobIdType"
      description: Represents the request to describe the user import job.
    DescribeUserPoolResponse:
      type: object
      properties:
        UserPool:
          $ref: "#/components/schemas/UserPoolType"
      description: Represents the response to describe the user pool.
    DescribeUserPoolRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
      description: Represents the request to describe the user pool.
    DescribeUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: "#/components/schemas/UserPoolClientType"
      description: Represents the response from the server from a request to describe the
        user pool client.
    DescribeUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
      description: Represents the request to describe a user pool client.
    DescribeUserPoolDomainResponse:
      type: object
      properties:
        DomainDescription:
          $ref: "#/components/schemas/DomainDescriptionType"
    DescribeUserPoolDomainRequest:
      type: object
      required:
        - Domain
      properties:
        Domain:
          $ref: "#/components/schemas/DomainType"
    ForgetDeviceRequest:
      type: object
      required:
        - DeviceKey
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
      description: Represents the request to forget the device.
    ForgotPasswordResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: "#/components/schemas/CodeDeliveryDetailsType"
      description: Respresents the response from the server regarding the request to reset
        a password.
    ForgotPasswordRequest:
      type: object
      required:
        - ClientId
        - Username
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        SecretHash:
          $ref: "#/components/schemas/SecretHashType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to reset a user's password.
    GetCSVHeaderResponse:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        CSVHeader:
          $ref: "#/components/schemas/ListOfStringTypes"
      description: Represents the response from the server to the request to get the header
        information for the .csv file for the user import job.
    GetCSVHeaderRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
      description: Represents the request to get the header information for the .csv file
        for the user import job.
    GetDeviceResponse:
      type: object
      required:
        - Device
      properties:
        Device:
          $ref: "#/components/schemas/DeviceType"
      description: Gets the device response.
    GetDeviceRequest:
      type: object
      required:
        - DeviceKey
      properties:
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
      description: Represents the request to get the device.
    GetGroupResponse:
      type: object
      properties:
        Group:
          $ref: "#/components/schemas/GroupType"
    GetGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
    GetIdentityProviderByIdentifierResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: "#/components/schemas/IdentityProviderType"
    GetIdentityProviderByIdentifierRequest:
      type: object
      required:
        - UserPoolId
        - IdpIdentifier
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        IdpIdentifier:
          $ref: "#/components/schemas/IdpIdentifierType"
    GetSigningCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: "#/components/schemas/StringType"
      description: Response from Cognito for a signing certificate request.
    GetSigningCertificateRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
      description: Request to get a signing certificate from Cognito.
    GetUICustomizationResponse:
      type: object
      required:
        - UICustomization
      properties:
        UICustomization:
          $ref: "#/components/schemas/UICustomizationType"
    GetUICustomizationRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
    GetUserResponse:
      type: object
      required:
        - Username
        - UserAttributes
      properties:
        Username:
          $ref: "#/components/schemas/UsernameType"
        UserAttributes:
          $ref: "#/components/schemas/AttributeListType"
        MFAOptions:
          $ref: "#/components/schemas/MFAOptionListType"
        PreferredMfaSetting:
          $ref: "#/components/schemas/StringType"
        UserMFASettingList:
          $ref: "#/components/schemas/UserMFASettingListType"
      description: Represents the response from the server from the request to get
        information about the user.
    GetUserRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
      description: Represents the request to get information about the user.
    GetUserAttributeVerificationCodeResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: "#/components/schemas/CodeDeliveryDetailsType"
      description: The verification code response returned by the server response to get
        the user attribute verification code.
    GetUserAttributeVerificationCodeRequest:
      type: object
      required:
        - AccessToken
        - AttributeName
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        AttributeName:
          $ref: "#/components/schemas/AttributeNameType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to get user attribute verification.
    GetUserPoolMfaConfigResponse:
      type: object
      properties:
        SmsMfaConfiguration:
          $ref: "#/components/schemas/SmsMfaConfigType"
        SoftwareTokenMfaConfiguration:
          $ref: "#/components/schemas/SoftwareTokenMfaConfigType"
        MfaConfiguration:
          $ref: "#/components/schemas/UserPoolMfaType"
    GetUserPoolMfaConfigRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
    GlobalSignOutResponse:
      type: object
      properties: {}
      description: The response to the request to sign out all devices.
    GlobalSignOutRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
      description: Represents the request to sign out all devices.
    InitiateAuthResponse:
      type: object
      properties:
        ChallengeName:
          $ref: "#/components/schemas/ChallengeNameType"
        Session:
          $ref: "#/components/schemas/SessionType"
        ChallengeParameters:
          $ref: "#/components/schemas/ChallengeParametersType"
        AuthenticationResult:
          $ref: "#/components/schemas/AuthenticationResultType"
      description: Initiates the authentication response.
    InitiateAuthRequest:
      type: object
      required:
        - AuthFlow
        - ClientId
      properties:
        AuthFlow:
          $ref: "#/components/schemas/AuthFlowType"
        AuthParameters:
          $ref: "#/components/schemas/AuthParametersType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
      description: Initiates the authentication request.
    ListDevicesResponse:
      type: object
      properties:
        Devices:
          $ref: "#/components/schemas/DeviceListType"
        PaginationToken:
          $ref: "#/components/schemas/SearchPaginationTokenType"
      description: Represents the response to list devices.
    ListDevicesRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        Limit:
          $ref: "#/components/schemas/QueryLimitType"
        PaginationToken:
          $ref: "#/components/schemas/SearchPaginationTokenType"
      description: Represents the request to list the devices.
    ListGroupsResponse:
      type: object
      properties:
        Groups:
          $ref: "#/components/schemas/GroupListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    ListGroupsRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Limit:
          $ref: "#/components/schemas/QueryLimitType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    ListIdentityProvidersResponse:
      type: object
      required:
        - Providers
      properties:
        Providers:
          $ref: "#/components/schemas/ProvidersListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKeyType"
    ListIdentityProvidersRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        MaxResults:
          $ref: "#/components/schemas/ListProvidersLimitType"
        NextToken:
          $ref: "#/components/schemas/PaginationKeyType"
    ListResourceServersResponse:
      type: object
      required:
        - ResourceServers
      properties:
        ResourceServers:
          $ref: "#/components/schemas/ResourceServersListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKeyType"
    ListResourceServersRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        MaxResults:
          $ref: "#/components/schemas/ListResourceServersLimitType"
        NextToken:
          $ref: "#/components/schemas/PaginationKeyType"
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/UserPoolTagsType"
    ListTagsForResourceRequest:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ArnType"
    ListUserImportJobsResponse:
      type: object
      properties:
        UserImportJobs:
          $ref: "#/components/schemas/UserImportJobsListType"
        PaginationToken:
          $ref: "#/components/schemas/PaginationKeyType"
      description: Represents the response from the server to the request to list the user
        import jobs.
    ListUserImportJobsRequest:
      type: object
      required:
        - UserPoolId
        - MaxResults
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        MaxResults:
          $ref: "#/components/schemas/PoolQueryLimitType"
        PaginationToken:
          $ref: "#/components/schemas/PaginationKeyType"
      description: Represents the request to list the user import jobs.
    ListUserPoolClientsResponse:
      type: object
      properties:
        UserPoolClients:
          $ref: "#/components/schemas/UserPoolClientListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: Represents the response from the server that lists user pool clients.
    ListUserPoolClientsRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        MaxResults:
          $ref: "#/components/schemas/QueryLimit"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: Represents the request to list the user pool clients.
    ListUserPoolsResponse:
      type: object
      properties:
        UserPools:
          $ref: "#/components/schemas/UserPoolListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKeyType"
      description: Represents the response to list user pools.
    ListUserPoolsRequest:
      type: object
      required:
        - MaxResults
      properties:
        NextToken:
          $ref: "#/components/schemas/PaginationKeyType"
        MaxResults:
          $ref: "#/components/schemas/PoolQueryLimitType"
      description: Represents the request to list user pools.
    ListUsersResponse:
      type: object
      properties:
        Users:
          $ref: "#/components/schemas/UsersListType"
        PaginationToken:
          $ref: "#/components/schemas/SearchPaginationTokenType"
      description: The response from the request to list users.
    ListUsersRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        AttributesToGet:
          $ref: "#/components/schemas/SearchedAttributeNamesListType"
        Limit:
          $ref: "#/components/schemas/QueryLimitType"
        PaginationToken:
          $ref: "#/components/schemas/SearchPaginationTokenType"
        Filter:
          $ref: "#/components/schemas/UserFilterType"
      description: Represents the request to list users.
    ListUsersInGroupResponse:
      type: object
      properties:
        Users:
          $ref: "#/components/schemas/UsersListType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    ListUsersInGroupRequest:
      type: object
      required:
        - UserPoolId
        - GroupName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
        Limit:
          $ref: "#/components/schemas/QueryLimitType"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
    ResendConfirmationCodeResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: "#/components/schemas/CodeDeliveryDetailsType"
      description: The response from the server when the Amazon Cognito Your User Pools
        service makes the request to resend a confirmation code.
    ResendConfirmationCodeRequest:
      type: object
      required:
        - ClientId
        - Username
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        SecretHash:
          $ref: "#/components/schemas/SecretHashType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to resend the confirmation code.
    RespondToAuthChallengeResponse:
      type: object
      properties:
        ChallengeName:
          $ref: "#/components/schemas/ChallengeNameType"
        Session:
          $ref: "#/components/schemas/SessionType"
        ChallengeParameters:
          $ref: "#/components/schemas/ChallengeParametersType"
        AuthenticationResult:
          $ref: "#/components/schemas/AuthenticationResultType"
      description: The response to respond to the authentication challenge.
    RespondToAuthChallengeRequest:
      type: object
      required:
        - ClientId
        - ChallengeName
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        ChallengeName:
          $ref: "#/components/schemas/ChallengeNameType"
        Session:
          $ref: "#/components/schemas/SessionType"
        ChallengeResponses:
          $ref: "#/components/schemas/ChallengeResponsesType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: The request to respond to an authentication challenge.
    SetRiskConfigurationResponse:
      type: object
      required:
        - RiskConfiguration
      properties:
        RiskConfiguration:
          $ref: "#/components/schemas/RiskConfigurationType"
    SetRiskConfigurationRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        CompromisedCredentialsRiskConfiguration:
          $ref: "#/components/schemas/CompromisedCredentialsRiskConfigurationType"
        AccountTakeoverRiskConfiguration:
          $ref: "#/components/schemas/AccountTakeoverRiskConfigurationType"
        RiskExceptionConfiguration:
          $ref: "#/components/schemas/RiskExceptionConfigurationType"
    SetUICustomizationResponse:
      type: object
      required:
        - UICustomization
      properties:
        UICustomization:
          $ref: "#/components/schemas/UICustomizationType"
    SetUICustomizationRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        CSS:
          $ref: "#/components/schemas/CSSType"
        ImageFile:
          $ref: "#/components/schemas/ImageFileType"
    SetUserMFAPreferenceResponse:
      type: object
      properties: {}
    SetUserMFAPreferenceRequest:
      type: object
      required:
        - AccessToken
      properties:
        SMSMfaSettings:
          $ref: "#/components/schemas/SMSMfaSettingsType"
        SoftwareTokenMfaSettings:
          $ref: "#/components/schemas/SoftwareTokenMfaSettingsType"
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
    SetUserPoolMfaConfigResponse:
      type: object
      properties:
        SmsMfaConfiguration:
          $ref: "#/components/schemas/SmsMfaConfigType"
        SoftwareTokenMfaConfiguration:
          $ref: "#/components/schemas/SoftwareTokenMfaConfigType"
        MfaConfiguration:
          $ref: "#/components/schemas/UserPoolMfaType"
    SetUserPoolMfaConfigRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        SmsMfaConfiguration:
          $ref: "#/components/schemas/SmsMfaConfigType"
        SoftwareTokenMfaConfiguration:
          $ref: "#/components/schemas/SoftwareTokenMfaConfigType"
        MfaConfiguration:
          $ref: "#/components/schemas/UserPoolMfaType"
    SetUserSettingsResponse:
      type: object
      properties: {}
      description: The response from the server for a set user settings request.
    SetUserSettingsRequest:
      type: object
      required:
        - AccessToken
        - MFAOptions
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        MFAOptions:
          $ref: "#/components/schemas/MFAOptionListType"
      description: Represents the request to set user settings.
    SignUpResponse:
      type: object
      required:
        - UserConfirmed
        - UserSub
      properties:
        UserConfirmed:
          $ref: "#/components/schemas/BooleanType"
        CodeDeliveryDetails:
          $ref: "#/components/schemas/CodeDeliveryDetailsType"
        UserSub:
          $ref: "#/components/schemas/StringType"
      description: The response from the server for a registration request.
    SignUpRequest:
      type: object
      required:
        - ClientId
        - Username
        - Password
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        SecretHash:
          $ref: "#/components/schemas/SecretHashType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        Password:
          $ref: "#/components/schemas/PasswordType"
        UserAttributes:
          $ref: "#/components/schemas/AttributeListType"
        ValidationData:
          $ref: "#/components/schemas/AttributeListType"
        AnalyticsMetadata:
          $ref: "#/components/schemas/AnalyticsMetadataType"
        UserContextData:
          $ref: "#/components/schemas/UserContextDataType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to register a user.
    StartUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: "#/components/schemas/UserImportJobType"
      description: Represents the response from the server to the request to start the user
        import job.
    StartUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        JobId:
          $ref: "#/components/schemas/UserImportJobIdType"
      description: Represents the request to start the user import job.
    StopUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: "#/components/schemas/UserImportJobType"
      description: Represents the response from the server to the request to stop the user
        import job.
    StopUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        JobId:
          $ref: "#/components/schemas/UserImportJobIdType"
      description: Represents the request to stop the user import job.
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - ResourceArn
        - Tags
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ArnType"
        Tags:
          $ref: "#/components/schemas/UserPoolTagsType"
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - ResourceArn
        - TagKeys
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ArnType"
        TagKeys:
          $ref: "#/components/schemas/UserPoolTagsListType"
    UpdateAuthEventFeedbackResponse:
      type: object
      properties: {}
    UpdateAuthEventFeedbackRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - EventId
        - FeedbackToken
        - FeedbackValue
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Username:
          $ref: "#/components/schemas/UsernameType"
        EventId:
          $ref: "#/components/schemas/EventIdType"
        FeedbackToken:
          $ref: "#/components/schemas/TokenModelType"
        FeedbackValue:
          $ref: "#/components/schemas/FeedbackValueType"
    UpdateDeviceStatusResponse:
      type: object
      properties: {}
      description: The response to the request to update the device status.
    UpdateDeviceStatusRequest:
      type: object
      required:
        - AccessToken
        - DeviceKey
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        DeviceRememberedStatus:
          $ref: "#/components/schemas/DeviceRememberedStatusType"
      description: Represents the request to update the device status.
    UpdateGroupResponse:
      type: object
      properties:
        Group:
          $ref: "#/components/schemas/GroupType"
    UpdateGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        RoleArn:
          $ref: "#/components/schemas/ArnType"
        Precedence:
          $ref: "#/components/schemas/PrecedenceType"
    UpdateIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: "#/components/schemas/IdentityProviderType"
    UpdateIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ProviderName:
          $ref: "#/components/schemas/ProviderNameType"
        ProviderDetails:
          $ref: "#/components/schemas/ProviderDetailsType"
        AttributeMapping:
          $ref: "#/components/schemas/AttributeMappingType"
        IdpIdentifiers:
          $ref: "#/components/schemas/IdpIdentifiersListType"
    UpdateResourceServerResponse:
      type: object
      required:
        - ResourceServer
      properties:
        ResourceServer:
          $ref: "#/components/schemas/ResourceServerType"
    UpdateResourceServerRequest:
      type: object
      required:
        - UserPoolId
        - Identifier
        - Name
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Identifier:
          $ref: "#/components/schemas/ResourceServerIdentifierType"
        Name:
          $ref: "#/components/schemas/ResourceServerNameType"
        Scopes:
          $ref: "#/components/schemas/ResourceServerScopeListType"
    UpdateUserAttributesResponse:
      type: object
      properties:
        CodeDeliveryDetailsList:
          $ref: "#/components/schemas/CodeDeliveryDetailsListType"
      description: Represents the response from the server for the request to update user
        attributes.
    UpdateUserAttributesRequest:
      type: object
      required:
        - UserAttributes
        - AccessToken
      properties:
        UserAttributes:
          $ref: "#/components/schemas/AttributeListType"
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        ClientMetadata:
          $ref: "#/components/schemas/ClientMetadataType"
      description: Represents the request to update user attributes.
    UpdateUserPoolResponse:
      type: object
      properties: {}
      description: Represents the response from the server when you make a request to
        update the user pool.
    UpdateUserPoolRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Policies:
          $ref: "#/components/schemas/UserPoolPolicyType"
        LambdaConfig:
          $ref: "#/components/schemas/LambdaConfigType"
        AutoVerifiedAttributes:
          $ref: "#/components/schemas/VerifiedAttributesListType"
        SmsVerificationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        EmailVerificationMessage:
          $ref: "#/components/schemas/EmailVerificationMessageType"
        EmailVerificationSubject:
          $ref: "#/components/schemas/EmailVerificationSubjectType"
        VerificationMessageTemplate:
          $ref: "#/components/schemas/VerificationMessageTemplateType"
        SmsAuthenticationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        MfaConfiguration:
          $ref: "#/components/schemas/UserPoolMfaType"
        DeviceConfiguration:
          $ref: "#/components/schemas/DeviceConfigurationType"
        EmailConfiguration:
          $ref: "#/components/schemas/EmailConfigurationType"
        SmsConfiguration:
          $ref: "#/components/schemas/SmsConfigurationType"
        UserPoolTags:
          $ref: "#/components/schemas/UserPoolTagsType"
        AdminCreateUserConfig:
          $ref: "#/components/schemas/AdminCreateUserConfigType"
        UserPoolAddOns:
          $ref: "#/components/schemas/UserPoolAddOnsType"
      description: Represents the request to update the user pool.
    ConcurrentModificationException: {}
    UpdateUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: "#/components/schemas/UserPoolClientType"
      description: Represents the response from the server to the request to update the
        user pool client.
    UpdateUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        ClientName:
          $ref: "#/components/schemas/ClientNameType"
        RefreshTokenValidity:
          $ref: "#/components/schemas/RefreshTokenValidityType"
        ReadAttributes:
          $ref: "#/components/schemas/ClientPermissionListType"
        WriteAttributes:
          $ref: "#/components/schemas/ClientPermissionListType"
        ExplicitAuthFlows:
          $ref: "#/components/schemas/ExplicitAuthFlowsListType"
        SupportedIdentityProviders:
          $ref: "#/components/schemas/SupportedIdentityProvidersListType"
        CallbackURLs:
          $ref: "#/components/schemas/CallbackURLsListType"
        LogoutURLs:
          $ref: "#/components/schemas/LogoutURLsListType"
        DefaultRedirectURI:
          $ref: "#/components/schemas/RedirectUrlType"
        AllowedOAuthFlows:
          $ref: "#/components/schemas/OAuthFlowsType"
        AllowedOAuthScopes:
          $ref: "#/components/schemas/ScopeListType"
        AllowedOAuthFlowsUserPoolClient:
          $ref: "#/components/schemas/BooleanType"
        AnalyticsConfiguration:
          $ref: "#/components/schemas/AnalyticsConfigurationType"
      description: Represents the request to update the user pool client.
    UpdateUserPoolDomainResponse:
      type: object
      properties:
        CloudFrontDomain:
          $ref: "#/components/schemas/DomainType"
      description: The UpdateUserPoolDomain response output.
    UpdateUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
        - CustomDomainConfig
      properties:
        Domain:
          $ref: "#/components/schemas/DomainType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        CustomDomainConfig:
          $ref: "#/components/schemas/CustomDomainConfigType"
      description: The UpdateUserPoolDomain request input.
    VerifySoftwareTokenResponse:
      type: object
      properties:
        Status:
          $ref: "#/components/schemas/VerifySoftwareTokenResponseType"
        Session:
          $ref: "#/components/schemas/SessionType"
    VerifySoftwareTokenRequest:
      type: object
      required:
        - UserCode
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        Session:
          $ref: "#/components/schemas/SessionType"
        UserCode:
          $ref: "#/components/schemas/SoftwareTokenMFAUserCodeType"
        FriendlyDeviceName:
          $ref: "#/components/schemas/StringType"
    EnableSoftwareTokenMFAException: {}
    VerifyUserAttributeResponse:
      type: object
      properties: {}
      description: A container representing the response from the server from the request
        to verify user attributes.
    VerifyUserAttributeRequest:
      type: object
      required:
        - AccessToken
        - AttributeName
        - Code
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        AttributeName:
          $ref: "#/components/schemas/AttributeNameType"
        Code:
          $ref: "#/components/schemas/ConfirmationCodeType"
      description: Represents the request to verify user attributes.
    AWSAccountIdType:
      type: string
    AccountTakeoverActionNotifyType:
      type: boolean
    AccountTakeoverEventActionType:
      type: string
      enum:
        - BLOCK
        - MFA_IF_CONFIGURED
        - MFA_REQUIRED
        - NO_ACTION
    AccountTakeoverActionType:
      type: object
      required:
        - Notify
        - EventAction
      properties:
        Notify:
          $ref: "#/components/schemas/AccountTakeoverActionNotifyType"
        EventAction:
          $ref: "#/components/schemas/AccountTakeoverEventActionType"
      description: Account takeover action type.
    AccountTakeoverActionsType:
      type: object
      properties:
        LowAction:
          $ref: "#/components/schemas/AccountTakeoverActionType"
        MediumAction:
          $ref: "#/components/schemas/AccountTakeoverActionType"
        HighAction:
          $ref: "#/components/schemas/AccountTakeoverActionType"
      description: Account takeover actions type.
    NotifyConfigurationType:
      type: object
      required:
        - SourceArn
      properties:
        From:
          $ref: "#/components/schemas/StringType"
        ReplyTo:
          $ref: "#/components/schemas/StringType"
        SourceArn:
          $ref: "#/components/schemas/ArnType"
        BlockEmail:
          $ref: "#/components/schemas/NotifyEmailType"
        NoActionEmail:
          $ref: "#/components/schemas/NotifyEmailType"
        MfaEmail:
          $ref: "#/components/schemas/NotifyEmailType"
      description: The notify configuration type.
    AccountTakeoverRiskConfigurationType:
      type: object
      required:
        - Actions
      properties:
        NotifyConfiguration:
          $ref: "#/components/schemas/NotifyConfigurationType"
        Actions:
          $ref: "#/components/schemas/AccountTakeoverActionsType"
      description: Configuration for mitigation actions and notification for different
        levels of risk detected for a potential account takeover.
    UserPoolIdType:
      type: string
      pattern: "[\\w-]+_[0-9a-zA-Z]+"
      minLength: 1
      maxLength: 55
    CustomAttributesListType:
      type: array
      items:
        $ref: "#/components/schemas/SchemaAttributeType"
      minItems: 1
      maxItems: 25
    UsernameType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 128
      format: password
    GroupNameType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 128
    ClientMetadataType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringType"
    BooleanType:
      type: boolean
    AdminCreateUserUnusedAccountValidityDaysType:
      type: integer
      minimum: 0
      maximum: 365
    MessageTemplateType:
      type: object
      properties:
        SMSMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        EmailMessage:
          $ref: "#/components/schemas/EmailVerificationMessageType"
        EmailSubject:
          $ref: "#/components/schemas/EmailVerificationSubjectType"
      description: The message template structure.
    AdminCreateUserConfigType:
      type: object
      properties:
        AllowAdminCreateUserOnly:
          $ref: "#/components/schemas/BooleanType"
        UnusedAccountValidityDays:
          $ref: "#/components/schemas/AdminCreateUserUnusedAccountValidityDaysType"
        InviteMessageTemplate:
          $ref: "#/components/schemas/MessageTemplateType"
      description: The configuration for creating a new user profile.
    AttributeListType:
      type: array
      items:
        $ref: "#/components/schemas/AttributeType"
    PasswordType:
      type: string
      pattern: "[\\S]+"
      minLength: 6
      maxLength: 256
      format: password
    ForceAliasCreation:
      type: boolean
    MessageActionType:
      type: string
      enum:
        - RESEND
        - SUPPRESS
    DeliveryMediumListType:
      type: array
      items:
        $ref: "#/components/schemas/DeliveryMediumType"
    UserType:
      type: object
      properties:
        Username:
          $ref: "#/components/schemas/UsernameType"
        Attributes:
          $ref: "#/components/schemas/AttributeListType"
        UserCreateDate:
          $ref: "#/components/schemas/DateType"
        UserLastModifiedDate:
          $ref: "#/components/schemas/DateType"
        Enabled:
          $ref: "#/components/schemas/BooleanType"
        UserStatus:
          $ref: "#/components/schemas/UserStatusType"
        MFAOptions:
          $ref: "#/components/schemas/MFAOptionListType"
      description: The user type.
    AttributeNameListType:
      type: array
      items:
        $ref: "#/components/schemas/AttributeNameType"
    StringType:
      type: string
    ProviderUserIdentifierType:
      type: object
      properties:
        ProviderName:
          $ref: "#/components/schemas/ProviderNameType"
        ProviderAttributeName:
          $ref: "#/components/schemas/StringType"
        ProviderAttributeValue:
          $ref: "#/components/schemas/StringType"
      description: A container for information about an identity provider for a user pool.
    DeviceKeyType:
      type: string
      pattern: "[\\w-]+_[0-9a-f-]+"
      minLength: 1
      maxLength: 55
    DeviceType:
      type: object
      properties:
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        DeviceAttributes:
          $ref: "#/components/schemas/AttributeListType"
        DeviceCreateDate:
          $ref: "#/components/schemas/DateType"
        DeviceLastModifiedDate:
          $ref: "#/components/schemas/DateType"
        DeviceLastAuthenticatedDate:
          $ref: "#/components/schemas/DateType"
      description: The device type.
    DateType:
      type: string
      format: date-time
    UserStatusType:
      type: string
      enum:
        - UNCONFIRMED
        - CONFIRMED
        - ARCHIVED
        - COMPROMISED
        - UNKNOWN
        - RESET_REQUIRED
        - FORCE_CHANGE_PASSWORD
    MFAOptionListType:
      type: array
      items:
        $ref: "#/components/schemas/MFAOptionType"
    UserMFASettingListType:
      type: array
      items:
        $ref: "#/components/schemas/StringType"
    ClientIdType:
      type: string
      pattern: "[\\w+]+"
      minLength: 1
      maxLength: 128
      format: password
    AuthFlowType:
      type: string
      enum:
        - USER_SRP_AUTH
        - REFRESH_TOKEN_AUTH
        - REFRESH_TOKEN
        - CUSTOM_AUTH
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
    AuthParametersType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringType"
    AnalyticsMetadataType:
      type: object
      properties:
        AnalyticsEndpointId:
          $ref: "#/components/schemas/StringType"
      description: <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely
        identifies a mobile device, email address, or phone number that can
        receive messages from Amazon Pinpoint analytics.</p>
    ContextDataType:
      type: object
      required:
        - IpAddress
        - ServerName
        - ServerPath
        - HttpHeaders
      properties:
        IpAddress:
          $ref: "#/components/schemas/StringType"
        ServerName:
          $ref: "#/components/schemas/StringType"
        ServerPath:
          $ref: "#/components/schemas/StringType"
        HttpHeaders:
          $ref: "#/components/schemas/HttpHeaderList"
        EncodedData:
          $ref: "#/components/schemas/StringType"
      description: Contextual user data type used for evaluating the risk of an unexpected
        event by Amazon Cognito advanced security.
    ChallengeNameType:
      type: string
      enum:
        - SMS_MFA
        - SOFTWARE_TOKEN_MFA
        - SELECT_MFA_TYPE
        - MFA_SETUP
        - PASSWORD_VERIFIER
        - CUSTOM_CHALLENGE
        - DEVICE_SRP_AUTH
        - DEVICE_PASSWORD_VERIFIER
        - ADMIN_NO_SRP_AUTH
        - NEW_PASSWORD_REQUIRED
    SessionType:
      type: string
      minLength: 20
      maxLength: 2048
    ChallengeParametersType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringType"
    AuthenticationResultType:
      type: object
      properties:
        AccessToken:
          $ref: "#/components/schemas/TokenModelType"
        ExpiresIn:
          $ref: "#/components/schemas/IntegerType"
        TokenType:
          $ref: "#/components/schemas/StringType"
        RefreshToken:
          $ref: "#/components/schemas/TokenModelType"
        IdToken:
          $ref: "#/components/schemas/TokenModelType"
        NewDeviceMetadata:
          $ref: "#/components/schemas/NewDeviceMetadataType"
      description: The authentication result.
    QueryLimitType:
      type: integer
      minimum: 0
      maximum: 60
    SearchPaginationTokenType:
      type: string
      pattern: "[\\S]+"
      minLength: 1
    DeviceListType:
      type: array
      items:
        $ref: "#/components/schemas/DeviceType"
    PaginationKey:
      type: string
      pattern: "[\\S]+"
      minLength: 1
    GroupListType:
      type: array
      items:
        $ref: "#/components/schemas/GroupType"
    AuthEventsType:
      type: array
      items:
        $ref: "#/components/schemas/AuthEventType"
    ChallengeResponsesType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringType"
    SMSMfaSettingsType:
      type: object
      properties:
        Enabled:
          $ref: "#/components/schemas/BooleanType"
        PreferredMfa:
          $ref: "#/components/schemas/BooleanType"
      description: The type used for enabling SMS MFA at the user level.
    SoftwareTokenMfaSettingsType:
      type: object
      properties:
        Enabled:
          $ref: "#/components/schemas/BooleanType"
        PreferredMfa:
          $ref: "#/components/schemas/BooleanType"
      description: The type used for enabling software token MFA at the user level.
    EventIdType:
      type: string
      pattern: "[\\w+-]+"
      minLength: 1
      maxLength: 50
    FeedbackValueType:
      type: string
      enum:
        - Valid
        - Invalid
    DeviceRememberedStatusType:
      type: string
      enum:
        - remembered
        - not_remembered
    AdvancedSecurityModeType:
      type: string
      enum:
        - OFF
        - AUDIT
        - ENFORCED
    AliasAttributeType:
      type: string
      enum:
        - phone_number
        - email
        - preferred_username
    AliasAttributesListType:
      type: array
      items:
        $ref: "#/components/schemas/AliasAttributeType"
    HexStringType:
      type: string
      pattern: ^[0-9a-fA-F]+$
    ArnType:
      type: string
      pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
      minLength: 20
      maxLength: 2048
    AnalyticsConfigurationType:
      type: object
      required:
        - ApplicationId
        - RoleArn
        - ExternalId
      properties:
        ApplicationId:
          $ref: "#/components/schemas/HexStringType"
        RoleArn:
          $ref: "#/components/schemas/ArnType"
        ExternalId:
          $ref: "#/components/schemas/StringType"
        UserDataShared:
          $ref: "#/components/schemas/BooleanType"
      description: The Amazon Pinpoint analytics configuration for collecting metrics for a
        user pool.
    TokenModelType:
      type: string
      pattern: "[A-Za-z0-9-_=.]+"
      format: password
    SecretCodeType:
      type: string
      pattern: "[A-Za-z0-9]+"
      minLength: 16
      format: password
    AttributeDataType:
      type: string
      enum:
        - String
        - Number
        - DateTime
        - Boolean
    AttributeType:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/AttributeNameType"
        Value:
          $ref: "#/components/schemas/AttributeValueType"
      description: Specifies whether the attribute is standard or custom.
    AttributeMappingKeyType:
      type: string
      minLength: 1
      maxLength: 32
    AttributeMappingType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringType"
    AttributeNameType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 32
    AttributeValueType:
      type: string
      maxLength: 2048
      format: password
    EventType:
      type: string
      enum:
        - SignIn
        - SignUp
        - ForgotPassword
    EventResponseType:
      type: string
      enum:
        - Success
        - Failure
    EventRiskType:
      type: object
      properties:
        RiskDecision:
          $ref: "#/components/schemas/RiskDecisionType"
        RiskLevel:
          $ref: "#/components/schemas/RiskLevelType"
      description: The event risk type.
    ChallengeResponseListType:
      type: array
      items:
        $ref: "#/components/schemas/ChallengeResponseType"
    EventContextDataType:
      type: object
      properties:
        IpAddress:
          $ref: "#/components/schemas/StringType"
        DeviceName:
          $ref: "#/components/schemas/StringType"
        Timezone:
          $ref: "#/components/schemas/StringType"
        City:
          $ref: "#/components/schemas/StringType"
        Country:
          $ref: "#/components/schemas/StringType"
      description: Specifies the user context data captured at the time of an event request.
    EventFeedbackType:
      type: object
      required:
        - FeedbackValue
        - Provider
      properties:
        FeedbackValue:
          $ref: "#/components/schemas/FeedbackValueType"
        Provider:
          $ref: "#/components/schemas/StringType"
        FeedbackDate:
          $ref: "#/components/schemas/DateType"
      description: Specifies the event feedback type.
    AuthEventType:
      type: object
      properties:
        EventId:
          $ref: "#/components/schemas/StringType"
        EventType:
          $ref: "#/components/schemas/EventType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
        EventResponse:
          $ref: "#/components/schemas/EventResponseType"
        EventRisk:
          $ref: "#/components/schemas/EventRiskType"
        ChallengeResponses:
          $ref: "#/components/schemas/ChallengeResponseListType"
        EventContextData:
          $ref: "#/components/schemas/EventContextDataType"
        EventFeedback:
          $ref: "#/components/schemas/EventFeedbackType"
      description: The authentication event type.
    IntegerType:
      type: integer
    NewDeviceMetadataType:
      type: object
      properties:
        DeviceKey:
          $ref: "#/components/schemas/DeviceKeyType"
        DeviceGroupKey:
          $ref: "#/components/schemas/StringType"
      description: The new device metadata type.
    BlockedIPRangeListType:
      type: array
      items:
        $ref: "#/components/schemas/StringType"
      maxItems: 20
    CSSType:
      type: string
    CSSVersionType:
      type: string
    RedirectUrlType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 1024
    CallbackURLsListType:
      type: array
      items:
        $ref: "#/components/schemas/RedirectUrlType"
      minItems: 0
      maxItems: 100
    ChallengeName:
      type: string
      enum:
        - Password
        - Mfa
    ChallengeResponse:
      type: string
      enum:
        - Success
        - Failure
    ChallengeResponseType:
      type: object
      properties:
        ChallengeName:
          $ref: "#/components/schemas/ChallengeName"
        ChallengeResponse:
          $ref: "#/components/schemas/ChallengeResponse"
      description: The challenge response type.
    ClientNameType:
      type: string
      pattern: "[\\w\\s+=,.@-]+"
      minLength: 1
      maxLength: 128
    ClientPermissionType:
      type: string
      minLength: 1
      maxLength: 2048
    ClientPermissionListType:
      type: array
      items:
        $ref: "#/components/schemas/ClientPermissionType"
    ClientSecretType:
      type: string
      pattern: "[\\w+]+"
      minLength: 1
      maxLength: 64
      format: password
    CodeDeliveryDetailsType:
      type: object
      properties:
        Destination:
          $ref: "#/components/schemas/StringType"
        DeliveryMedium:
          $ref: "#/components/schemas/DeliveryMediumType"
        AttributeName:
          $ref: "#/components/schemas/AttributeNameType"
      description: The code delivery details being returned from the server.
    CodeDeliveryDetailsListType:
      type: array
      items:
        $ref: "#/components/schemas/CodeDeliveryDetailsType"
    DeliveryMediumType:
      type: string
      enum:
        - SMS
        - EMAIL
    CompletionMessageType:
      type: string
      pattern: "[\\w]+"
      minLength: 1
      maxLength: 128
    CompromisedCredentialsEventActionType:
      type: string
      enum:
        - BLOCK
        - NO_ACTION
    CompromisedCredentialsActionsType:
      type: object
      required:
        - EventAction
      properties:
        EventAction:
          $ref: "#/components/schemas/CompromisedCredentialsEventActionType"
      description: The compromised credentials actions type
    EventFiltersType:
      type: array
      items:
        $ref: "#/components/schemas/EventFilterType"
    CompromisedCredentialsRiskConfigurationType:
      type: object
      required:
        - Actions
      properties:
        EventFilter:
          $ref: "#/components/schemas/EventFiltersType"
        Actions:
          $ref: "#/components/schemas/CompromisedCredentialsActionsType"
      description: The compromised credentials risk configuration type.
    DeviceSecretVerifierConfigType:
      type: object
      properties:
        PasswordVerifier:
          $ref: "#/components/schemas/StringType"
        Salt:
          $ref: "#/components/schemas/StringType"
      description: The device verifier against which it will be authenticated.
    DeviceNameType:
      type: string
      minLength: 1
      maxLength: 1024
    SecretHashType:
      type: string
      pattern: "[\\w+=/]+"
      minLength: 1
      maxLength: 128
      format: password
    ConfirmationCodeType:
      type: string
      pattern: "[\\S]+"
      minLength: 1
      maxLength: 2048
    UserContextDataType:
      type: object
      properties:
        EncodedData:
          $ref: "#/components/schemas/StringType"
      description: Contextual data such as the user's device fingerprint, IP address, or
        location used for evaluating the risk of an unexpected event by Amazon
        Cognito advanced security.
    HttpHeaderList:
      type: array
      items:
        $ref: "#/components/schemas/HttpHeader"
    DescriptionType:
      type: string
      maxLength: 2048
    PrecedenceType:
      type: integer
      minimum: 0
    GroupType:
      type: object
      properties:
        GroupName:
          $ref: "#/components/schemas/GroupNameType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        RoleArn:
          $ref: "#/components/schemas/ArnType"
        Precedence:
          $ref: "#/components/schemas/PrecedenceType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
      description: The group type.
    ProviderNameTypeV1:
      type: string
      pattern: "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+"
      minLength: 1
      maxLength: 32
    IdentityProviderTypeType:
      type: string
      enum:
        - SAML
        - Facebook
        - Google
        - LoginWithAmazon
        - OIDC
    ProviderDetailsType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringType"
    IdpIdentifiersListType:
      type: array
      items:
        $ref: "#/components/schemas/IdpIdentifierType"
      minItems: 0
      maxItems: 50
    IdentityProviderType:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ProviderName:
          $ref: "#/components/schemas/ProviderNameType"
        ProviderType:
          $ref: "#/components/schemas/IdentityProviderTypeType"
        ProviderDetails:
          $ref: "#/components/schemas/ProviderDetailsType"
        AttributeMapping:
          $ref: "#/components/schemas/AttributeMappingType"
        IdpIdentifiers:
          $ref: "#/components/schemas/IdpIdentifiersListType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
      description: A container for information about an identity provider.
    ResourceServerIdentifierType:
      type: string
      pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+"
      minLength: 1
      maxLength: 256
    ResourceServerNameType:
      type: string
      pattern: "[\\w\\s+=,.@-]+"
      minLength: 1
      maxLength: 256
    ResourceServerScopeListType:
      type: array
      items:
        $ref: "#/components/schemas/ResourceServerScopeType"
      maxItems: 100
    ResourceServerType:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        Identifier:
          $ref: "#/components/schemas/ResourceServerIdentifierType"
        Name:
          $ref: "#/components/schemas/ResourceServerNameType"
        Scopes:
          $ref: "#/components/schemas/ResourceServerScopeListType"
      description: A container for information about a resource server for a user pool.
    UserImportJobNameType:
      type: string
      pattern: "[\\w\\s+=,.@-]+"
      minLength: 1
      maxLength: 128
    UserImportJobType:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/UserImportJobNameType"
        JobId:
          $ref: "#/components/schemas/UserImportJobIdType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        PreSignedUrl:
          $ref: "#/components/schemas/PreSignedUrlType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
        StartDate:
          $ref: "#/components/schemas/DateType"
        CompletionDate:
          $ref: "#/components/schemas/DateType"
        Status:
          $ref: "#/components/schemas/UserImportJobStatusType"
        CloudWatchLogsRoleArn:
          $ref: "#/components/schemas/ArnType"
        ImportedUsers:
          $ref: "#/components/schemas/LongType"
        SkippedUsers:
          $ref: "#/components/schemas/LongType"
        FailedUsers:
          $ref: "#/components/schemas/LongType"
        CompletionMessage:
          $ref: "#/components/schemas/CompletionMessageType"
      description: The user import job type.
    GenerateSecret:
      type: boolean
    RefreshTokenValidityType:
      type: integer
      minimum: 0
      maximum: 3650
    ExplicitAuthFlowsListType:
      type: array
      items:
        $ref: "#/components/schemas/ExplicitAuthFlowsType"
    SupportedIdentityProvidersListType:
      type: array
      items:
        $ref: "#/components/schemas/ProviderNameType"
    LogoutURLsListType:
      type: array
      items:
        $ref: "#/components/schemas/RedirectUrlType"
      minItems: 0
      maxItems: 100
    OAuthFlowsType:
      type: array
      items:
        $ref: "#/components/schemas/OAuthFlowType"
      minItems: 0
      maxItems: 3
    ScopeListType:
      type: array
      items:
        $ref: "#/components/schemas/ScopeType"
      maxItems: 50
    UserPoolClientType:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientName:
          $ref: "#/components/schemas/ClientNameType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        ClientSecret:
          $ref: "#/components/schemas/ClientSecretType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
        RefreshTokenValidity:
          $ref: "#/components/schemas/RefreshTokenValidityType"
        ReadAttributes:
          $ref: "#/components/schemas/ClientPermissionListType"
        WriteAttributes:
          $ref: "#/components/schemas/ClientPermissionListType"
        ExplicitAuthFlows:
          $ref: "#/components/schemas/ExplicitAuthFlowsListType"
        SupportedIdentityProviders:
          $ref: "#/components/schemas/SupportedIdentityProvidersListType"
        CallbackURLs:
          $ref: "#/components/schemas/CallbackURLsListType"
        LogoutURLs:
          $ref: "#/components/schemas/LogoutURLsListType"
        DefaultRedirectURI:
          $ref: "#/components/schemas/RedirectUrlType"
        AllowedOAuthFlows:
          $ref: "#/components/schemas/OAuthFlowsType"
        AllowedOAuthScopes:
          $ref: "#/components/schemas/ScopeListType"
        AllowedOAuthFlowsUserPoolClient:
          $ref: "#/components/schemas/BooleanType"
        AnalyticsConfiguration:
          $ref: "#/components/schemas/AnalyticsConfigurationType"
      description: Contains information about a user pool client.
    DomainType:
      type: string
      pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
      minLength: 1
      maxLength: 63
    CustomDomainConfigType:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: "#/components/schemas/ArnType"
      description: The configuration for a custom domain that hosts the sign-up and sign-in
        webpages for your application.
    UserPoolNameType:
      type: string
      pattern: "[\\w\\s+=,.@-]+"
      minLength: 1
      maxLength: 128
    UserPoolPolicyType:
      type: object
      properties:
        PasswordPolicy:
          $ref: "#/components/schemas/PasswordPolicyType"
      description: The policy associated with a user pool.
    LambdaConfigType:
      type: object
      properties:
        PreSignUp:
          $ref: "#/components/schemas/ArnType"
        CustomMessage:
          $ref: "#/components/schemas/ArnType"
        PostConfirmation:
          $ref: "#/components/schemas/ArnType"
        PreAuthentication:
          $ref: "#/components/schemas/ArnType"
        PostAuthentication:
          $ref: "#/components/schemas/ArnType"
        DefineAuthChallenge:
          $ref: "#/components/schemas/ArnType"
        CreateAuthChallenge:
          $ref: "#/components/schemas/ArnType"
        VerifyAuthChallengeResponse:
          $ref: "#/components/schemas/ArnType"
        PreTokenGeneration:
          $ref: "#/components/schemas/ArnType"
        UserMigration:
          $ref: "#/components/schemas/ArnType"
      description: Specifies the configuration for AWS Lambda triggers.
    VerifiedAttributesListType:
      type: array
      items:
        $ref: "#/components/schemas/VerifiedAttributeType"
    UsernameAttributesListType:
      type: array
      items:
        $ref: "#/components/schemas/UsernameAttributeType"
    SmsVerificationMessageType:
      type: string
      pattern: .*\{####\}.*
      minLength: 6
      maxLength: 140
    EmailVerificationMessageType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{\
        N}\\p{P}\\s*]*"
      minLength: 6
      maxLength: 20000
    EmailVerificationSubjectType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+"
      minLength: 1
      maxLength: 140
    VerificationMessageTemplateType:
      type: object
      properties:
        SmsMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        EmailMessage:
          $ref: "#/components/schemas/EmailVerificationMessageType"
        EmailSubject:
          $ref: "#/components/schemas/EmailVerificationSubjectType"
        EmailMessageByLink:
          $ref: "#/components/schemas/EmailVerificationMessageByLinkType"
        EmailSubjectByLink:
          $ref: "#/components/schemas/EmailVerificationSubjectByLinkType"
        DefaultEmailOption:
          $ref: "#/components/schemas/DefaultEmailOptionType"
      description: The template for verification messages.
    UserPoolMfaType:
      type: string
      enum:
        - OFF
        - ON
        - OPTIONAL
    DeviceConfigurationType:
      type: object
      properties:
        ChallengeRequiredOnNewDevice:
          $ref: "#/components/schemas/BooleanType"
        DeviceOnlyRememberedOnUserPrompt:
          $ref: "#/components/schemas/BooleanType"
      description: The configuration for the user pool's device tracking.
    EmailConfigurationType:
      type: object
      properties:
        SourceArn:
          $ref: "#/components/schemas/ArnType"
        ReplyToEmailAddress:
          $ref: "#/components/schemas/EmailAddressType"
        EmailSendingAccount:
          $ref: "#/components/schemas/EmailSendingAccountType"
      description: The email configuration type.
    SmsConfigurationType:
      type: object
      required:
        - SnsCallerArn
      properties:
        SnsCallerArn:
          $ref: "#/components/schemas/ArnType"
        ExternalId:
          $ref: "#/components/schemas/StringType"
      description: The SMS configuration type that includes the settings the Cognito User
        Pool needs to call for the Amazon SNS service to send an SMS message
        from your AWS account. The Cognito User Pool makes the request to the
        Amazon SNS Service by using an AWS IAM role that you provide for your
        AWS account.
    UserPoolTagsType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TagValueType"
    SchemaAttributesListType:
      type: array
      items:
        $ref: "#/components/schemas/SchemaAttributeType"
      minItems: 1
      maxItems: 50
    UserPoolAddOnsType:
      type: object
      required:
        - AdvancedSecurityMode
      properties:
        AdvancedSecurityMode:
          $ref: "#/components/schemas/AdvancedSecurityModeType"
      description: The user pool add-ons type.
    UserPoolType:
      type: object
      properties:
        Id:
          $ref: "#/components/schemas/UserPoolIdType"
        Name:
          $ref: "#/components/schemas/UserPoolNameType"
        Policies:
          $ref: "#/components/schemas/UserPoolPolicyType"
        LambdaConfig:
          $ref: "#/components/schemas/LambdaConfigType"
        Status:
          $ref: "#/components/schemas/StatusType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
        SchemaAttributes:
          $ref: "#/components/schemas/SchemaAttributesListType"
        AutoVerifiedAttributes:
          $ref: "#/components/schemas/VerifiedAttributesListType"
        AliasAttributes:
          $ref: "#/components/schemas/AliasAttributesListType"
        UsernameAttributes:
          $ref: "#/components/schemas/UsernameAttributesListType"
        SmsVerificationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        EmailVerificationMessage:
          $ref: "#/components/schemas/EmailVerificationMessageType"
        EmailVerificationSubject:
          $ref: "#/components/schemas/EmailVerificationSubjectType"
        VerificationMessageTemplate:
          $ref: "#/components/schemas/VerificationMessageTemplateType"
        SmsAuthenticationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        MfaConfiguration:
          $ref: "#/components/schemas/UserPoolMfaType"
        DeviceConfiguration:
          $ref: "#/components/schemas/DeviceConfigurationType"
        EstimatedNumberOfUsers:
          $ref: "#/components/schemas/IntegerType"
        EmailConfiguration:
          $ref: "#/components/schemas/EmailConfigurationType"
        SmsConfiguration:
          $ref: "#/components/schemas/SmsConfigurationType"
        UserPoolTags:
          $ref: "#/components/schemas/UserPoolTagsType"
        SmsConfigurationFailure:
          $ref: "#/components/schemas/StringType"
        EmailConfigurationFailure:
          $ref: "#/components/schemas/StringType"
        Domain:
          $ref: "#/components/schemas/DomainType"
        CustomDomain:
          $ref: "#/components/schemas/DomainType"
        AdminCreateUserConfig:
          $ref: "#/components/schemas/AdminCreateUserConfigType"
        UserPoolAddOns:
          $ref: "#/components/schemas/UserPoolAddOnsType"
        Arn:
          $ref: "#/components/schemas/ArnType"
      description: A container for information about the user pool.
    CustomAttributeNameType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 20
    SchemaAttributeType:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/CustomAttributeNameType"
        AttributeDataType:
          $ref: "#/components/schemas/AttributeDataType"
        DeveloperOnlyAttribute:
          $ref: "#/components/schemas/BooleanType"
        Mutable:
          $ref: "#/components/schemas/BooleanType"
        Required:
          $ref: "#/components/schemas/BooleanType"
        NumberAttributeConstraints:
          $ref: "#/components/schemas/NumberAttributeConstraintsType"
        StringAttributeConstraints:
          $ref: "#/components/schemas/StringAttributeConstraintsType"
      description: Contains information about the schema attribute.
    DefaultEmailOptionType:
      type: string
      enum:
        - CONFIRM_WITH_LINK
        - CONFIRM_WITH_CODE
    ProviderNameType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 32
    RiskConfigurationType:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        CompromisedCredentialsRiskConfiguration:
          $ref: "#/components/schemas/CompromisedCredentialsRiskConfigurationType"
        AccountTakeoverRiskConfiguration:
          $ref: "#/components/schemas/AccountTakeoverRiskConfigurationType"
        RiskExceptionConfiguration:
          $ref: "#/components/schemas/RiskExceptionConfigurationType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
      description: The risk configuration type.
    UserImportJobIdType:
      type: string
      pattern: import-[0-9a-zA-Z-]+
      minLength: 1
      maxLength: 55
    DomainDescriptionType:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        AWSAccountId:
          $ref: "#/components/schemas/AWSAccountIdType"
        Domain:
          $ref: "#/components/schemas/DomainType"
        S3Bucket:
          $ref: "#/components/schemas/S3BucketType"
        CloudFrontDistribution:
          $ref: "#/components/schemas/StringType"
        Version:
          $ref: "#/components/schemas/DomainVersionType"
        Status:
          $ref: "#/components/schemas/DomainStatusType"
        CustomDomainConfig:
          $ref: "#/components/schemas/CustomDomainConfigType"
      description: A container for information about a domain.
    S3BucketType:
      type: string
      pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
      minLength: 3
      maxLength: 1024
    DomainVersionType:
      type: string
      minLength: 1
      maxLength: 20
    DomainStatusType:
      type: string
      enum:
        - CREATING
        - DELETING
        - UPDATING
        - ACTIVE
        - FAILED
    EmailAddressType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
    EmailSendingAccountType:
      type: string
      enum:
        - COGNITO_DEFAULT
        - DEVELOPER
    EmailNotificationBodyType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+"
      minLength: 6
      maxLength: 20000
    EmailNotificationSubjectType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+"
      minLength: 1
      maxLength: 140
    EmailVerificationMessageByLinkType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p\
        {P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*"
      minLength: 6
      maxLength: 20000
    EmailVerificationSubjectByLinkType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+"
      minLength: 1
      maxLength: 140
    EventFilterType:
      type: string
      enum:
        - SIGN_IN
        - PASSWORD_CHANGE
        - SIGN_UP
    RiskDecisionType:
      type: string
      enum:
        - NoRisk
        - AccountTakeover
        - Block
    RiskLevelType:
      type: string
      enum:
        - Low
        - Medium
        - High
    ExplicitAuthFlowsType:
      type: string
      enum:
        - ADMIN_NO_SRP_AUTH
        - CUSTOM_AUTH_FLOW_ONLY
        - USER_PASSWORD_AUTH
    ListOfStringTypes:
      type: array
      items:
        $ref: "#/components/schemas/StringType"
    IdpIdentifierType:
      type: string
      pattern: "[\\w\\s+=.@-]+"
      minLength: 1
      maxLength: 40
    UICustomizationType:
      type: object
      properties:
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        ImageUrl:
          $ref: "#/components/schemas/ImageUrlType"
        CSS:
          $ref: "#/components/schemas/CSSType"
        CSSVersion:
          $ref: "#/components/schemas/CSSVersionType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
      description: A container for the UI customization information for a user pool's
        built-in app UI.
    SmsMfaConfigType:
      type: object
      properties:
        SmsAuthenticationMessage:
          $ref: "#/components/schemas/SmsVerificationMessageType"
        SmsConfiguration:
          $ref: "#/components/schemas/SmsConfigurationType"
      description: The SMS text message multi-factor authentication (MFA) configuration
        type.
    SoftwareTokenMfaConfigType:
      type: object
      properties:
        Enabled:
          $ref: "#/components/schemas/BooleanType"
      description: The type used for enabling software token MFA at the user pool level.
    HttpHeader:
      type: object
      properties:
        headerName:
          $ref: "#/components/schemas/StringType"
        headerValue:
          $ref: "#/components/schemas/StringType"
      description: The HTTP header.
    ImageFileType:
      type: string
    ImageUrlType:
      type: string
    ListProvidersLimitType:
      type: integer
      minimum: 0
      maximum: 60
    PaginationKeyType:
      type: string
      pattern: "[\\S]+"
      minLength: 1
    ProvidersListType:
      type: array
      items:
        $ref: "#/components/schemas/ProviderDescription"
      minItems: 0
      maxItems: 50
    ListResourceServersLimitType:
      type: integer
      minimum: 1
      maximum: 50
    ResourceServersListType:
      type: array
      items:
        $ref: "#/components/schemas/ResourceServerType"
    PoolQueryLimitType:
      type: integer
      minimum: 1
      maximum: 60
    UserImportJobsListType:
      type: array
      items:
        $ref: "#/components/schemas/UserImportJobType"
      minItems: 1
      maxItems: 50
    QueryLimit:
      type: integer
      minimum: 1
      maximum: 60
    UserPoolClientListType:
      type: array
      items:
        $ref: "#/components/schemas/UserPoolClientDescription"
    UserPoolListType:
      type: array
      items:
        $ref: "#/components/schemas/UserPoolDescriptionType"
    UsersListType:
      type: array
      items:
        $ref: "#/components/schemas/UserType"
    SearchedAttributeNamesListType:
      type: array
      items:
        $ref: "#/components/schemas/AttributeNameType"
    UserFilterType:
      type: string
      maxLength: 256
    LongType:
      type: integer
    MFAOptionType:
      type: object
      properties:
        DeliveryMedium:
          $ref: "#/components/schemas/DeliveryMediumType"
        AttributeName:
          $ref: "#/components/schemas/AttributeNameType"
      description: <p> <i>This data type is no longer supported.</i> You can use it only
        for SMS MFA configurations. You can't use it for TOTP software token MFA
        configurations.</p> <p>To set either type of MFA configuration, use the
        <a>AdminSetUserMFAPreference</a> or <a>SetUserMFAPreference</a>
        actions.</p> <p>To look up information about either type of MFA
        configuration, use the <a>AdminGetUserResponse$UserMFASettingList</a> or
        <a>GetUserResponse$UserMFASettingList</a> responses.</p>
    NotifyEmailType:
      type: object
      required:
        - Subject
      properties:
        Subject:
          $ref: "#/components/schemas/EmailNotificationSubjectType"
        HtmlBody:
          $ref: "#/components/schemas/EmailNotificationBodyType"
        TextBody:
          $ref: "#/components/schemas/EmailNotificationBodyType"
      description: The notify email type.
    NumberAttributeConstraintsType:
      type: object
      properties:
        MinValue:
          $ref: "#/components/schemas/StringType"
        MaxValue:
          $ref: "#/components/schemas/StringType"
      description: The minimum and maximum value of an attribute that is of the number data
        type.
    OAuthFlowType:
      type: string
      enum:
        - code
        - implicit
        - client_credentials
    PasswordPolicyMinLengthType:
      type: integer
      minimum: 6
      maximum: 99
    TemporaryPasswordValidityDaysType:
      type: integer
      minimum: 0
      maximum: 365
    PasswordPolicyType:
      type: object
      properties:
        MinimumLength:
          $ref: "#/components/schemas/PasswordPolicyMinLengthType"
        RequireUppercase:
          $ref: "#/components/schemas/BooleanType"
        RequireLowercase:
          $ref: "#/components/schemas/BooleanType"
        RequireNumbers:
          $ref: "#/components/schemas/BooleanType"
        RequireSymbols:
          $ref: "#/components/schemas/BooleanType"
        TemporaryPasswordValidityDays:
          $ref: "#/components/schemas/TemporaryPasswordValidityDaysType"
      description: The password policy type.
    PreSignedUrlType:
      type: string
      minLength: 0
      maxLength: 2048
    ProviderDescription:
      type: object
      properties:
        ProviderName:
          $ref: "#/components/schemas/ProviderNameType"
        ProviderType:
          $ref: "#/components/schemas/IdentityProviderTypeType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
      description: A container for identity provider details.
    ResourceServerScopeDescriptionType:
      type: string
      minLength: 1
      maxLength: 256
    ResourceServerScopeType:
      type: object
      required:
        - ScopeName
        - ScopeDescription
      properties:
        ScopeName:
          $ref: "#/components/schemas/ResourceServerScopeNameType"
        ScopeDescription:
          $ref: "#/components/schemas/ResourceServerScopeDescriptionType"
      description: A resource server scope.
    ResourceServerScopeNameType:
      type: string
      pattern: "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+"
      minLength: 1
      maxLength: 256
    RiskExceptionConfigurationType:
      type: object
      properties:
        BlockedIPRangeList:
          $ref: "#/components/schemas/BlockedIPRangeListType"
        SkippedIPRangeList:
          $ref: "#/components/schemas/SkippedIPRangeListType"
      description: The type of the configuration to override the risk decision.
    SkippedIPRangeListType:
      type: array
      items:
        $ref: "#/components/schemas/StringType"
      maxItems: 20
    StringAttributeConstraintsType:
      type: object
      properties:
        MinLength:
          $ref: "#/components/schemas/StringType"
        MaxLength:
          $ref: "#/components/schemas/StringType"
      description: The constraints associated with a string attribute.
    ScopeType:
      type: string
      pattern: "[\\x21\\x23-\\x5B\\x5D-\\x7E]+"
      minLength: 1
      maxLength: 256
    SoftwareTokenMFAUserCodeType:
      type: string
      pattern: "[0-9]+"
      minLength: 6
      maxLength: 6
    StatusType:
      type: string
      enum:
        - Enabled
        - Disabled
    TagKeysType:
      type: string
      minLength: 1
      maxLength: 128
    TagValueType:
      type: string
      minLength: 0
      maxLength: 256
    UserPoolTagsListType:
      type: array
      items:
        $ref: "#/components/schemas/TagKeysType"
    UserImportJobStatusType:
      type: string
      enum:
        - Created
        - Pending
        - InProgress
        - Stopping
        - Expired
        - Stopped
        - Failed
        - Succeeded
    UserPoolClientDescription:
      type: object
      properties:
        ClientId:
          $ref: "#/components/schemas/ClientIdType"
        UserPoolId:
          $ref: "#/components/schemas/UserPoolIdType"
        ClientName:
          $ref: "#/components/schemas/ClientNameType"
      description: The description of the user pool client.
    UserPoolDescriptionType:
      type: object
      properties:
        Id:
          $ref: "#/components/schemas/UserPoolIdType"
        Name:
          $ref: "#/components/schemas/UserPoolNameType"
        LambdaConfig:
          $ref: "#/components/schemas/LambdaConfigType"
        Status:
          $ref: "#/components/schemas/StatusType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
        CreationDate:
          $ref: "#/components/schemas/DateType"
      description: A user pool description.
    UsernameAttributeType:
      type: string
      enum:
        - phone_number
        - email
    VerifiedAttributeType:
      type: string
      enum:
        - phone_number
        - email
    VerifySoftwareTokenResponseType:
      type: string
      enum:
        - SUCCESS
        - ERROR
