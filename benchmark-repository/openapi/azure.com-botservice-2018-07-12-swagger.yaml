openapi: 3.0.0
info:
  description: Azure Bot Service is a platform for creating smart conversational agents.
  title: Azure Bot Service
  version: 2018-07-12
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/botservice/resource-manager/Microsoft.BotService/preview/2018-07-12/botservice.json
      version: "2.0"
  x-preferred: true
  x-providerName: azure.com
  x-serviceName: botservice
  x-tags:
    - Azure
    - Microsoft
paths:
  /providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability:
    post:
      description: Check whether an Enterprise Channel name is available.
      operationId: EnterpriseChannels_CheckNameAvailability
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnterpriseChannelCheckNameAvailabilityReq\
                uest"
        description: The parameters to provide for the Enterprise Channel check name
          availability request.
        required: true
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.

            For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannelCheckNameAvailabilityR\
                  esponse"
              examples:
                Check Enterprise Channel Name Availability:
                  $ref: "#/components/examples/Check_Enterprise_Channel_Name_Availa\
                    bility"
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Enterprise Channel
  /providers/Microsoft.BotService/checkNameAvailability:
    post:
      description: Check whether a bot name is available.
      operationId: Bots_GetCheckNameAvailability
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckNameAvailabilityRequestBody"
        description: The request body parameters to provide for the check name availability
          request
        required: true
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.

            For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckNameAvailabilityResponseBody"
              examples:
                check Name Availability:
                  $ref: "#/components/examples/check_Name_Availability"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
  /providers/Microsoft.BotService/operations:
    get:
      deprecated: false
      description: Lists all the available BotService operations.
      operationId: Operations_List
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationEntityListResult"
              examples:
                Get Operations:
                  $ref: "#/components/examples/Get_Operations"
      tags:
        - Operations
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices":
    get:
      description: Returns all the resources of a particular type belonging to a
        subscription.
      operationId: Bots_List
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.

            For a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotResponseList"
              examples:
                List Bots by Subscription:
                  $ref: "#/components/examples/List_Bots_by_Subscription"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders":
    post:
      description: Lists the available Service Providers for creating Connection Settings
      operationId: BotConnection_ListServiceProviders
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: If resource is retrieved successfully, the service should return 200
            (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceProviderResponseList"
              examples:
                List Auth Service Providers:
                  $ref: "#/components/examples/List_Auth_Service_Providers"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - ListServiceProviders
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices":
    get:
      description: Returns all the resources of a particular type belonging to a resource
        group
      operationId: Bots_ListByResourceGroup
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.

            The nextLink should be implemented using following query parameters:

            · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.

            · top: the optional client query parameter which defines the maximum number of records to be returned by the server.

            Implementation details:

            · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 

            · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 

            Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotResponseList"
              examples:
                List Bots by Resource Group:
                  $ref: "#/components/examples/List_Bots_by_Resource_Group"
        default:
          description: Error response describing why the operation failed. If the resource
            group does not exist, 404 (NotFound) will be returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}":
    delete:
      description: "Deletes a Bot Service from the resource group. "
      operationId: Bots_Delete
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: A 200 (OK) should be returned if the object exists and was deleted
            successfully;
        "204":
          description: a 204 (NoContent) should be used if the resource does not exist and
            the request is well formed.
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
    get:
      description: Returns a BotService specified by the parameters.
      operationId: Bots_Get
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bot"
              examples:
                Get Bot:
                  $ref: "#/components/examples/Get_Bot"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
    patch:
      description: Updates a Bot Service
      operationId: Bots_Update
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bot"
        description: The parameters to provide for the created bot.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bot"
              examples:
                Update Bot:
                  $ref: "#/components/examples/Update_Bot"
        "201":
          description: If resource is updated successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bot"
              examples:
                Update Bot:
                  $ref: "#/components/examples/Update_Bot"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
    put:
      description: Creates a Bot Service. Bot Service is a resource group wide resource
        type.
      operationId: Bots_Create
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bot"
        description: The parameters to provide for the created bot.
        required: true
      responses:
        "200":
          description: If resource is created successfully or already existed, the service
            should return 200 (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bot"
              examples:
                Create Bot:
                  $ref: "#/components/examples/Create_Bot"
        "201":
          description: If resource is created successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bot"
              examples:
                Create Bot:
                  $ref: "#/components/examples/Create_Bot"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Bot
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}":
    delete:
      description: Deletes a Connection Setting registration for a Bot Service
      operationId: BotConnection_Delete
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/connectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: A 200 (OK) should be returned if the object exists and was deleted
            successfully;
        "204":
          description: a 204 (NoContent) should be used if the resource does not exist and
            the request is well formed.
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - BotConnection
    get:
      description: Get a Connection Setting registration for a Bot Service
      operationId: BotConnection_Get
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/connectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSetting"
              examples:
                Update Connection Setting:
                  $ref: "#/components/examples/Update_Connection_Setting"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - BotConnection
    patch:
      description: Updates a Connection Setting registration for a Bot Service
      operationId: BotConnection_Update
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/connectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSetting"
        description: The parameters to provide for updating the Connection Setting.
        required: true
      responses:
        "200":
          description: If resource is created successfully or already existed, the service
            should return 200 (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSetting"
              examples:
                Update Connection Setting:
                  $ref: "#/components/examples/Update_Connection_Setting"
        "201":
          description: If resource is created successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSetting"
              examples:
                Update Connection Setting:
                  $ref: "#/components/examples/Update_Connection_Setting"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - BotConnection
    put:
      description: Register a new Auth Connection for a Bot Service
      operationId: BotConnection_Create
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/connectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSetting"
        description: The parameters to provide for creating the Connection Setting.
        required: true
      responses:
        "200":
          description: If resource is created successfully or already existed, the service
            should return 200 (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSetting"
              examples:
                Create Connection Setting:
                  $ref: "#/components/examples/Create_Connection_Setting"
        "201":
          description: If resource is created successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSetting"
              examples:
                Create Connection Setting:
                  $ref: "#/components/examples/Create_Connection_Setting"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - BotConnection
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}/listWithSecrets":
    post:
      description: Get a Connection Setting registration for a Bot Service
      operationId: BotConnection_ListWithSecrets
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/connectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSetting"
              examples:
                Update Connection Setting:
                  $ref: "#/components/examples/Update_Connection_Setting"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - BotConnection
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels":
    get:
      description: Returns all the Channel registrations of a particular BotService resource
      operationId: Channels_ListByResourceGroup
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.

            The nextLink should be implemented using following query parameters:

            · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.

            · top: the optional client query parameter which defines the maximum number of records to be returned by the server.

            Implementation details:

            · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 

            · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 

            Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelResponseList"
              examples:
                List Bots by Resource Group:
                  $ref: "#/components/examples/List_Bots_by_Resource_Group"
        default:
          description: Error response describing why the operation failed. If the resource
            group does not exist, 404 (NotFound) will be returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Channel
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}":
    delete:
      description: Deletes a Channel registration from a Bot Service
      operationId: Channels_Delete
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - description: The name of the Bot resource.
          in: path
          name: channelName
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 64
            pattern: ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$
          examples:
            Delete Bot:
              value: EmailChannel
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: A 200 (OK) should be returned if the object exists and was deleted
            successfully;
        "204":
          description: a 204 (NoContent) should be used if the resource does not exist and
            the request is well formed.
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Channel
    get:
      description: Returns a BotService Channel registration specified by the parameters.
      operationId: Channels_Get
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - description: The name of the Bot resource.
          in: path
          name: channelName
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 64
            pattern: ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$
          examples:
            Get Bot:
              value: EmailChannel
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotChannel"
              examples:
                Get Bot:
                  $ref: "#/components/examples/Get_Bot"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Channel
    patch:
      description: Updates a Channel registration for a Bot Service
      operationId: Channels_Update
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/channelNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BotChannel"
        description: The parameters to provide for the created bot.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotChannel"
              examples:
                Update Bot:
                  $ref: "#/components/examples/Update_Bot"
        "201":
          description: If resource is updated successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotChannel"
              examples:
                Update Bot:
                  $ref: "#/components/examples/Update_Bot"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Channel
    put:
      description: Creates a Channel registration for a Bot Service
      operationId: Channels_Create
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/channelNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BotChannel"
        description: The parameters to provide for the created bot.
        required: true
      responses:
        "200":
          description: If resource is created successfully or already existed, the service
            should return 200 (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotChannel"
              examples:
                Create Bot:
                  $ref: "#/components/examples/Create_Bot"
        "201":
          description: If resource is created successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotChannel"
              examples:
                Create Bot:
                  $ref: "#/components/examples/Create_Bot"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Channel
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys":
    post:
      description: Lists a Channel registration for a Bot Service including secrets
      operationId: Channels_ListWithKeys
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/channelNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: If resource is retrieved successfully, the service should return 200
            (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BotChannel"
              examples:
                List Channel:
                  $ref: "#/components/examples/List_Channel"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Channel
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections":
    get:
      description: Returns all the Connection Settings registered to a particular
        BotService resource
      operationId: BotConnection_ListByBotService
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.

            The nextLink should be implemented using following query parameters:

            · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.

            · top: the optional client query parameter which defines the maximum number of records to be returned by the server.

            Implementation details:

            · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 

            · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 

            Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionSettingResponseList"
              examples:
                List Connection Settings:
                  $ref: "#/components/examples/List_Connection_Settings"
        default:
          description: Error response describing why the operation failed. If the resource
            group does not exist, 404 (NotFound) will be returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - BotConnection
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels":
    get:
      description: Returns all the resources of a particular type belonging to a resource
        group.
      operationId: EnterpriseChannels_ListByResourceGroup
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: >-
            The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. For other errors (e.g. internal
            errors) use the appropriate HTTP error code.

            The nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.

            The nextLink should be implemented using following query parameters:

            · skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.

            · top: the optional client query parameter which defines the maximum number of records to be returned by the server.

            Implementation details:

            · NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. 

            · Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. 

            Clients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannelResponseList"
              examples:
                List Enterprise Channels by Resource Group:
                  $ref: "#/components/examples/List_Enterprise_Channels_by_Resource\
                    _Group"
        default:
          description: Error response describing why the operation failed. If the resource
            group does not exist, 404 (NotFound) will be returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Enterprise Channel
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}":
    delete:
      description: Deletes an Enterprise Channel from the resource group
      operationId: EnterpriseChannels_Delete
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: A 200 (OK) should be returned if the object exists and was deleted
            successfully;
        "204":
          description: a 204 (NoContent) should be used if the resource does not exist and
            the request is well formed.
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Enterprise Channel
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    get:
      description: Returns an Enterprise Channel specified by the parameters.
      operationId: EnterpriseChannels_Get
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: "The resource provider should return 200 (OK) to indicate that the
            operation completed successfully. "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannel"
              examples:
                Get Enterprise Channel:
                  $ref: "#/components/examples/Get_Enterprise_Channel"
        default:
          description: Error response describing why the operation failed. If the resource
            group *or* resource does not exist, 404 (NotFound) should be
            returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Enterprise Channel
    patch:
      description: Updates an Enterprise Channel.
      operationId: EnterpriseChannels_Update
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnterpriseChannel"
        description: The parameters to provide to update the Enterprise Channel.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: If resource is created successfully or already existed, the service
            should return 200 (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannel"
              examples:
                Update Enterprise Channel:
                  $ref: "#/components/examples/Update_Enterprise_Channel"
        "201":
          description: If resource is created successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannel"
              examples:
                Update Enterprise Channel:
                  $ref: "#/components/examples/Update_Enterprise_Channel"
        default:
          description: Error response describing why the operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Enterprise Channel
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    put:
      description: Creates an Enterprise Channel.
      operationId: EnterpriseChannels_Create
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/resourceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnterpriseChannel"
        description: The parameters to provide for the new Enterprise Channel.
        required: true
      responses:
        "200":
          description: If resource is created successfully or already existed, the service
            should return 200 (OK).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannel"
              examples:
                Create Enterprise Channel:
                  $ref: "#/components/examples/Create_Enterprise_Channel"
        "201":
          description: If resource is created successfully, the service should return 201
            (Created). Execution to continue asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnterpriseChannel"
              examples:
                Create Enterprise Channel:
                  $ref: "#/components/examples/Create_Enterprise_Channel"
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - Enterprise Channel
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
servers:
  - url: https://management.azure.com
components:
  examples:
    Check_Enterprise_Channel_Name_Availability:
      value:
        message: custom message from server
        valid: true
    check_Name_Availability:
      value:
        message: custom message from server
        valid: true
    Get_Operations:
      value:
        value:
          - display:
              description: Read Bot Service
              operation: Read Bot Service
              provider: Microsoft Bot Service
              resource: Bot Service
            name: Microsoft.BotService/botService/read
            origin: user,system
          - display:
              description: Writes Bot Service
              operation: Write Bot Service
              provider: Microsoft Bot Service
              resource: Bot Service
            name: Microsoft.BotService/botService/write
            origin: user,system
          - display:
              description: Deletes Bot Service
              operation: Delete Bot Service
              provider: Microsoft Bot Service
              resource: Bot Service
            name: Microsoft.BotService/botService/delete
            origin: user,system
          - display:
              description: Check bot name availability
              operation: Check bot name availability
              provider: Microsoft Bot Service
              resource: Bot Service name availability
            name: Microsoft.BotService/botService/botName/read
            origin: user,system
    List_Bots_by_Subscription:
      value:
        value:
          - etag: etag1
            id: someid
            kind: sdk
            location: West US
            name: samplename
            properties:
              configuredChannels:
                - facebook
                - groupme
              description: The description of the bot
              developerAppInsightKey: appinsightskey
              developerAppInsightsApplicationId: appinsightsappid
              displayName: The Name of the bot
              enabledChannels:
                - facebook
              endpoint: http://mybot.coffee
              endpointVersion: version
              iconUrl: http://myicon
              luisAppIds:
                - luisappid1
                - luisappid2
              msaAppId: msaappid
            tags:
              tag1: value1
              tag2: value2
            type: sampletype
    List_Auth_Service_Providers:
      value:
        value:
          - properties:
              devPortalUrl: sampleDevPortalUrl
              displayName: sample display name
              iconUrl: sampleIconUrl
              id: sampleId
              parameters:
                - default: sampleDefaultValue
                  description: sampleDescription
                  displayName: sampleDisplayName
                  helpUrl: sampleHelpUrl
                  name: sampleParameterName
                  type: sampleParameterType
              serviceProviderName: sampleServiceProvider
    List_Bots_by_Resource_Group:
      value:
        value:
          - location: global
            properties:
              channelName: EmailChannel
              properties:
                emailAddress: a@b.com
                isEnabled: true
                password: pwd
          - location: global
            properties:
              channelName: FacebookChannel
              properties:
                appId: id
                appSecret: secret
                callbackUrl: appid
                isEnabled: true
                pages:
                  - accessToken: token
                    id: id
                verifyToken: othertoken
    Get_Bot:
      value:
        location: global
        properties:
          channelName: EmailChannel
          properties:
            emailAddress: a@b.com
            isEnabled: true
            password: pwd
    Update_Bot:
      value:
        location: global
        properties:
          channelName: EmailChannel
          properties:
            emailAddress: a@b.com
            isEnabled: true
            password: pwd
    Create_Bot:
      value:
        location: global
        properties:
          channelName: EmailChannel
          properties:
            emailAddress: a@b.com
            isEnabled: true
            password: pwd
    Update_Connection_Setting:
      value:
        etag: etag1
        id: someid
        location: global
        name: The Name of the Connection Setting
        properties:
          clientId: sampleclientid
          clientSecret: samplesecret
          parameters:
            - key: key1
              value: value1
            - key: key2
              value: value2
          scopes: samplescope
          serviceProviderDisplayName: serviceProviderDisplayName
          serviceProviderId: serviceproviderid
    Create_Connection_Setting:
      value:
        etag: etag1
        id: someid
        location: global
        name: The Name of the Connection Setting
        properties:
          clientId: sampleclientid
          clientSecret: samplesecret
          parameters:
            - key: key1
              value: value1
            - key: key2
              value: value2
          scopes: samplescope
          serviceProviderDisplayName: serviceProviderDisplayName
          serviceProviderId: serviceproviderid
    List_Channel:
      value:
        location: global
        properties:
          channelName: EmailChannel
          properties:
            emailAddress: a@b.com
            isEnabled: true
            password: pwd
    List_Connection_Settings:
      value:
        value:
          - name: The Name of the Connection Setting
            properties:
              clientId: sampleclientid
              clientSecret: samplesecret
              parameters:
                - key: key1
                  value: value1
                - key: key2
                  value: value2
              scopes: samplescope
              serviceProviderId: serviceproviderid
    List_Enterprise_Channels_by_Resource_Group:
      value:
        value:
          - etag: etag1
            id: someid
            location: West US
            properties:
              nodes:
                - azureLocation: WestUs
                  azureSku: Int1
                  id: 00000000-0000-0000-0000-000000000000
                  name: Node 1
                  state: Creating
                - azureLocation: EastUs
                  azureSku: Int1
                  id: 00000000-0000-0000-0000-000000000001
                  name: Node 2
                  state: Creating
              state: Creating
            tags:
              tag1: value1
              tag2: value2
    Get_Enterprise_Channel:
      value:
        etag: etag1
        id: contoso-dl
        location: West US
        properties:
          nodes:
            - azureLocation: WestUs
              azureSku: Int1
              id: 00000000-0000-0000-0000-000000000000
              name: Node 1
              state: Stopping
            - azureLocation: EastUs
              azureSku: Int1
              id: 00000000-0000-0000-0000-000000000001
              name: Node 2
              state: Started
          state: Started
        tags:
          tag1: value1
          tag2: value2
    Update_Enterprise_Channel:
      value:
        id: someid
        location: West US
        properties:
          nodes:
            - azureLocation: WestUs
              azureSku: Int1
              id: 00000000-0000-0000-0000-000000000000
              name: Node 1
              state: Stopping
          state: Stopping
        tags:
          tag1: value1
          tag2: value2
    Create_Enterprise_Channel:
      value:
        id: someid
        location: West US
        properties:
          nodes:
            - azureLocation: WestUs
              azureSku: Int1
              id: 00000000-0000-0000-0000-000000000000
              name: Node 1
              state: Creating
          state: Creating
        tags:
          tag1: value1
          tag2: value2
  parameters:
    apiVersionParameter:
      description: Version of the API to be used with the client request.
      in: query
      name: api-version
      required: true
      schema:
        type: string
      examples:
        Check Enterprise Channel Name Availability:
          value: 2018-07-12
        check Name Availability:
          value: 2018-07-12
        Get Operations:
          value: 2017-04-18
        List Bots by Subscription:
          value: 2017-01-01
        List Auth Service Providers:
          value: 2017-01-01
        List Bots by Resource Group:
          value: 2017-01-01
        Delete Bot:
          value: 2017-01-01
        Get Bot:
          value: 2017-01-01
        Update Bot:
          value: 2017-01-01
        Create Bot:
          value: 2017-01-01
        Update Connection Setting:
          value: 2017-01-01
        Create Connection Setting:
          value: 2017-01-01
        List Channel:
          value: 2017-01-01
        List Connection Settings:
          value: 2017-01-01
        List Enterprise Channels by Resource Group:
          value: 2018-07-12
        Delete Enterprise Channel:
          value: 2018-07-12
        Get Enterprise Channel:
          value: 2018-07-12
        Update Enterprise Channel:
          value: 2018-07-12
        Create Enterprise Channel:
          value: 2018-07-12
    channelNameParameter:
      description: The name of the Channel resource.
      in: path
      name: channelName
      required: true
      x-ms-enum:
        modelAsString: false
        name: channelName
        values:
          - value: FacebookChannel
          - value: EmailChannel
          - value: KikChannel
          - value: TelegramChannel
          - value: SlackChannel
          - value: MsTeamsChannel
          - value: SkypeChannel
          - value: WebChatChannel
          - value: DirectLineChannel
          - value: SmsChannel
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - FacebookChannel
          - EmailChannel
          - KikChannel
          - TelegramChannel
          - SlackChannel
          - MsTeamsChannel
          - SkypeChannel
          - WebChatChannel
          - DirectLineChannel
          - SmsChannel
      examples:
        Update Bot:
          value: EmailChannel
        Create Bot:
          value: EmailChannel
        List Channel:
          value: EmailChannel
    connectionNameParameter:
      description: The name of the Bot Service Connection Setting resource
      in: path
      name: connectionName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        minLength: 2
        maxLength: 64
        pattern: ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$
      examples:
        Update Connection Setting:
          value: sampleConnection
        Create Connection Setting:
          value: sampleConnection
    resourceGroupNameParameter:
      description: The name of the Bot resource group in the user subscription.
      in: path
      name: resourceGroupName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        minLength: 2
        maxLength: 64
        pattern: ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$
      examples:
        List Bots by Resource Group:
          value: OneResourceGroupName
        Delete Bot:
          value: OneResourceGroupName
        Get Bot:
          value: OneResourceGroupName
        Update Bot:
          value: OneResourceGroupName
        Create Bot:
          value: OneResourceGroupName
        Update Connection Setting:
          value: OneResourceGroupName
        Create Connection Setting:
          value: OneResourceGroupName
        List Channel:
          value: OneResourceGroupName
        List Connection Settings:
          value: OneResourceGroupName
        List Enterprise Channels by Resource Group:
          value: OneResourceGroupName
        Delete Enterprise Channel:
          value: OneResourceGroupName
        Get Enterprise Channel:
          value: OneResourceGroupName
        Update Enterprise Channel:
          value: OneResourceGroupName
        Create Enterprise Channel:
          value: OneResourceGroupName
    resourceNameParameter:
      description: The name of the Bot resource.
      in: path
      name: resourceName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        minLength: 2
        maxLength: 64
        pattern: ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$
      examples:
        Delete Bot:
          value: samplebotname
        Get Bot:
          value: samplebotname
        Update Bot:
          value: samplebotname
        Create Bot:
          value: samplebotname
        Update Connection Setting:
          value: samplebotname
        Create Connection Setting:
          value: samplebotname
        List Bots by Resource Group:
          value: samplebotname
        List Channel:
          value: samplebotname
        List Connection Settings:
          value: samplebotname
        Delete Enterprise Channel:
          value: contoso-dl
        Get Enterprise Channel:
          value: contoso-dl
        Update Enterprise Channel:
          value: contoso-dl
        Create Enterprise Channel:
          value: contoso-dl
    subscriptionIdParameter:
      description: Azure Subscription ID.
      in: path
      name: subscriptionId
      required: true
      schema:
        type: string
      examples:
        List Bots by Subscription:
          value: subscription-id
        List Auth Service Providers:
          value: subscription-id
        List Bots by Resource Group:
          value: subscription-id
        Delete Bot:
          value: subscription-id
        Get Bot:
          value: subscription-id
        Update Bot:
          value: subscription-id
        Create Bot:
          value: subscription-id
        Update Connection Setting:
          value: subscription-id
        Create Connection Setting:
          value: subscription-id
        List Channel:
          value: subscription-id
        List Connection Settings:
          value: subscription-id
        List Enterprise Channels by Resource Group:
          value: subscription-id
        Delete Enterprise Channel:
          value: subscription-id
        Get Enterprise Channel:
          value: subscription-id
        Update Enterprise Channel:
          value: subscription-id
        Create Enterprise Channel:
          value: subscription-id
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: impersonate your user account
  schemas:
    Bot:
      allOf:
        - $ref: "#/components/schemas/Resource"
      description: Bot resource definition
      properties:
        properties:
          $ref: "#/components/schemas/BotProperties"
      type: object
    BotChannel:
      allOf:
        - $ref: "#/components/schemas/Resource"
      description: Bot channel resource definition
      properties:
        properties:
          $ref: "#/components/schemas/Channel"
      type: object
    BotProperties:
      description: The parameters to provide for the Bot.
      properties:
        configuredChannels:
          description: Collection of channels for which the bot is configured
          items:
            type: string
          readOnly: true
          type: array
        description:
          description: The description of the bot
          type: string
        developerAppInsightKey:
          description: The Application Insights key
          type: string
        developerAppInsightsApiKey:
          description: The Application Insights Api Key
          type: string
        developerAppInsightsApplicationId:
          description: The Application Insights App Id
          type: string
        displayName:
          description: The Name of the bot
          type: string
        enabledChannels:
          description: Collection of channels for which the bot is enabled
          items:
            type: string
          readOnly: true
          type: array
        endpoint:
          description: The bot's endpoint
          type: string
        endpointVersion:
          description: The bot's endpoint version
          readOnly: true
          type: string
        iconUrl:
          description: The Icon Url of the bot
          type: string
        luisAppIds:
          description: Collection of LUIS App Ids
          items:
            type: string
          type: array
        luisKey:
          description: The LUIS Key
          type: string
        msaAppId:
          description: Microsoft App Id for the bot
          type: string
      required:
        - displayName
        - endpoint
        - msaAppId
    BotResponseList:
      description: The list of  bot service operation response.
      properties:
        nextLink:
          description: The link used to get the next page of bot service resources.
          type: string
        value:
          description: Gets the list of bot service results and their properties.
          items:
            $ref: "#/components/schemas/Bot"
          readOnly: true
          type: array
    Channel:
      description: Channel definition
      discriminator:
        propertyName: channelName
      properties:
        channelName:
          description: The channel name
          type: string
      required:
        - channelName
      type: object
    ChannelResponseList:
      description: The list of bot service channel operation response.
      properties:
        nextLink:
          description: The link used to get the next page of bot service channel resources.
          type: string
        value:
          description: Gets the list of bot service channel results and their properties.
          items:
            $ref: "#/components/schemas/BotChannel"
          readOnly: true
          type: array
    CheckNameAvailabilityRequestBody:
      description: The request body for a request to Bot Service Management to check
        availability of a bot name.
      properties:
        name:
          description: the name of the bot for which availability needs to be checked.
          type: string
        type:
          description: the type of the bot for which availability needs to be checked
          type: string
      type: object
    CheckNameAvailabilityResponseBody:
      description: The response body returned for a request to Bot Service Management to
        check availability of a bot name.
      properties:
        message:
          description: additional message from the bot management api showing why a bot
            name is not available
          type: string
        valid:
          description: indicates if the bot name is valid.
          type: boolean
      type: object
    ConnectionItemName:
      description: The display name of a connection Item Setting registered with the Bot
      properties:
        name:
          description: Connection Item name that has been added in the API
          readOnly: true
          type: string
    ConnectionSetting:
      allOf:
        - $ref: "#/components/schemas/Resource"
      description: Bot channel resource definition
      properties:
        properties:
          $ref: "#/components/schemas/ConnectionSettingProperties"
      type: object
    ConnectionSettingParameter:
      description: Extra Parameter in a Connection Setting Properties to indicate service
        provider specific properties
      properties:
        key:
          description: Key for the Connection Setting Parameter.
          type: string
        value:
          description: Value associated with the Connection Setting Parameter.
          type: string
    ConnectionSettingProperties:
      description: Properties for a Connection Setting Item
      properties:
        clientId:
          description: Client Id associated with the Connection Setting.
          type: string
        clientSecret:
          description: Client Secret associated with the Connection Setting
          type: string
        parameters:
          description: Service Provider Parameters associated with the Connection Setting
          items:
            $ref: "#/components/schemas/ConnectionSettingParameter"
          type: array
        scopes:
          description: Scopes associated with the Connection Setting
          type: string
        serviceProviderDisplayName:
          description: Service Provider Display Name associated with the Connection Setting
          type: string
        serviceProviderId:
          description: Service Provider Id associated with the Connection Setting
          type: string
        settingId:
          description: Setting Id set by the service for the Connection Setting.
          readOnly: true
          type: string
    ConnectionSettingResponseList:
      description: The list of bot service connection settings response.
      properties:
        nextLink:
          description: The link used to get the next page of bot service connection setting
            resources.
          type: string
        value:
          description: Gets the list of bot service connection settings and their
            properties.
          items:
            $ref: "#/components/schemas/ConnectionSetting"
          readOnly: true
          type: array
    DirectLineChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Direct Line channel definition
      properties:
        properties:
          $ref: "#/components/schemas/DirectLineChannelProperties"
      type: object
      x-ms-discriminator-value: DirectLineChannel
    DirectLineChannelProperties:
      description: The parameters to provide for the Direct Line channel.
      properties:
        sites:
          description: The list of Direct Line sites
          items:
            $ref: "#/components/schemas/DirectLineSite"
          type: array
    DirectLineSite:
      description: A site for the Direct Line channel
      properties:
        isEnabled:
          description: Whether this site is enabled for DirectLine channel.
          type: boolean
        isSecureSiteEnabled:
          description: Whether this site is enabled for authentication with Bot Framework.
          type: boolean
        isV1Enabled:
          description: Whether this site is enabled for Bot Framework V1 protocol.
          type: boolean
        isV3Enabled:
          description: Whether this site is enabled for Bot Framework V1 protocol.
          type: boolean
        key:
          description: Primary key. Value only returned through POST to the action Channel
            List API, otherwise empty.
          readOnly: true
          type: string
          x-ms-mutability:
            - read
        key2:
          description: Secondary key. Value only returned through POST to the action
            Channel List API, otherwise empty.
          readOnly: true
          type: string
          x-ms-mutability:
            - read
        siteId:
          description: Site Id
          readOnly: true
          type: string
          x-ms-mutability:
            - read
        siteName:
          description: Site name
          type: string
        trustedOrigins:
          description: List of Trusted Origin URLs for this site. This field is applicable
            only if isSecureSiteEnabled is True.
          items:
            type: string
          type: array
      required:
        - isV1Enabled
        - isV3Enabled
        - isEnabled
        - siteName
    EmailChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Email channel definition
      properties:
        properties:
          $ref: "#/components/schemas/EmailChannelProperties"
      type: object
      x-ms-discriminator-value: EmailChannel
    EmailChannelProperties:
      description: The parameters to provide for the Email channel.
      properties:
        emailAddress:
          description: The email address
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
        password:
          description: The password for the email address. Value only returned through POST
            to the action Channel List API, otherwise empty.
          type: string
      required:
        - emailAddress
        - password
        - isEnabled
    EnterpriseChannel:
      allOf:
        - $ref: "#/components/schemas/Resource"
      description: Enterprise Channel resource definition
      properties:
        properties:
          $ref: "#/components/schemas/EnterpriseChannelProperties"
      type: object
    EnterpriseChannelCheckNameAvailabilityRequest:
      description: A request to Bot Service Management to check availability of an
        Enterprise Channel name.
      properties:
        name:
          description: The name of the Enterprise Channel for which availability needs to
            be checked.
          type: string
      type: object
    EnterpriseChannelCheckNameAvailabilityResponse:
      description: A request to Bot Service Management to check availability of an
        Enterprise Channel name.
      properties:
        message:
          description: Additional information about why a bot name is not available.
          type: string
        valid:
          description: Indicates if the Enterprise Channel name is valid.
          type: boolean
      type: object
    EnterpriseChannelNode:
      description: The properties specific to an Enterprise Channel Node.
      properties:
        azureLocation:
          description: The location of the Enterprise Channel Node.
          type: string
        azureSku:
          description: The sku of the Enterprise Channel Node.
          type: string
        id:
          description: Id of Enterprise Channel Node. This is generated by the Bot
            Framework.
          readOnly: true
          type: string
        name:
          description: The name of the Enterprise Channel Node.
          type: string
        state:
          description: The current state of the Enterprise Channel Node.
          enum:
            - Creating
            - CreateFailed
            - Started
            - Starting
            - StartFailed
            - Stopped
            - Stopping
            - StopFailed
            - Deleting
            - DeleteFailed
          type: string
          x-ms-enum:
            modelAsString: true
            name: EnterpriseChannelNodeState
      required:
        - name
        - azureSku
        - azureLocation
    EnterpriseChannelProperties:
      description: The parameters to provide for the Enterprise Channel.
      properties:
        nodes:
          description: The nodes associated with the Enterprise Channel.
          items:
            $ref: "#/components/schemas/EnterpriseChannelNode"
          type: array
        state:
          description: The current state of the Enterprise Channel.
          enum:
            - Creating
            - CreateFailed
            - Started
            - Starting
            - StartFailed
            - Stopped
            - Stopping
            - StopFailed
            - Deleting
            - DeleteFailed
          type: string
          x-ms-enum:
            modelAsString: true
            name: EnterpriseChannelState
      required:
        - nodes
    EnterpriseChannelResponseList:
      description: The list of  bot service operation response.
      properties:
        nextLink:
          description: The link used to get the next page of bot service resources.
          type: string
        value:
          description: The list of Enterprise Channels and their properties.
          items:
            $ref: "#/components/schemas/EnterpriseChannel"
          readOnly: true
          type: array
    Error:
      description: Bot Service error object.
      properties:
        error:
          $ref: "#/components/schemas/ErrorBody"
    ErrorBody:
      description: Bot Service error body.
      properties:
        code:
          description: error code
          type: string
        message:
          description: error message
          type: string
      required:
        - code
        - message
    FacebookChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Facebook channel definition
      properties:
        properties:
          $ref: "#/components/schemas/FacebookChannelProperties"
      type: object
      x-ms-discriminator-value: FacebookChannel
    FacebookChannelProperties:
      description: The parameters to provide for the Facebook channel.
      properties:
        appId:
          description: Facebook application id
          type: string
        appSecret:
          description: Facebook application secret. Value only returned through POST to the
            action Channel List API, otherwise empty.
          type: string
        callbackUrl:
          description: Callback Url
          readOnly: true
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
        pages:
          description: The list of Facebook pages
          items:
            $ref: "#/components/schemas/FacebookPage"
          type: array
        verifyToken:
          description: Verify token. Value only returned through POST to the action Channel
            List API, otherwise empty.
          readOnly: true
          type: string
      required:
        - appId
        - appSecret
        - isEnabled
    FacebookPage:
      description: A Facebook page for Facebook channel registration
      properties:
        accessToken:
          description: Facebook application access token. Value only returned through POST
            to the action Channel List API, otherwise empty.
          type: string
        id:
          description: Page id
          type: string
      required:
        - id
        - accessToken
    KikChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Kik channel definition
      properties:
        properties:
          $ref: "#/components/schemas/KikChannelProperties"
      type: object
      x-ms-discriminator-value: KikChannel
    KikChannelProperties:
      description: The parameters to provide for the Kik channel.
      properties:
        apiKey:
          description: Kik API key. Value only returned through POST to the action Channel
            List API, otherwise empty.
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
        isValidated:
          description: Whether this channel is validated for the bot
          type: boolean
        userName:
          description: The Kik user name
          type: string
      required:
        - userName
        - apiKey
        - isEnabled
    Kind:
      description: Indicates the type of bot service
      enum:
        - sdk
        - designer
        - bot
        - function
      type: string
      x-ms-enum:
        modelAsString: true
        name: Kind
    MsTeamsChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Microsoft Teams channel definition
      properties:
        properties:
          $ref: "#/components/schemas/MsTeamsChannelProperties"
      type: object
      x-ms-discriminator-value: MsTeamsChannel
    MsTeamsChannelProperties:
      description: The parameters to provide for the Microsoft Teams channel.
      properties:
        callingWebHook:
          description: Webhook for Microsoft Teams channel calls
          type: string
        enableCalling:
          description: Enable calling for Microsoft Teams channel
          type: boolean
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
      required:
        - isEnabled
    OperationDisplayInfo:
      description: The operation supported by Bot Service Management.
      properties:
        description:
          description: The description of the operation.
          type: string
        operation:
          description: The action that users can perform, based on their permission level.
          type: string
        provider:
          description: "Service provider: Microsoft Bot Service."
          type: string
        resource:
          description: Resource on which the operation is performed.
          type: string
      type: object
    OperationEntity:
      description: The operations supported by Bot Service Management.
      properties:
        display:
          $ref: "#/components/schemas/OperationDisplayInfo"
        name:
          description: "Operation name: {provider}/{resource}/{operation}."
          type: string
        origin:
          description: The origin of the operation.
          type: string
        properties:
          description: Additional properties.
          type: object
      type: object
    OperationEntityListResult:
      description: The list of bot service operation response.
      properties:
        nextLink:
          description: The link used to get the next page of operations.
          type: string
        value:
          description: The list of operations.
          items:
            $ref: "#/components/schemas/OperationEntity"
          type: array
      type: object
    Resource:
      description: Azure resource
      properties:
        etag:
          description: Entity Tag
          type: string
        id:
          description: Specifies the resource ID.
          readOnly: true
          type: string
        kind:
          $ref: "#/components/schemas/Kind"
        location:
          description: Specifies the location of the resource.
          type: string
        name:
          description: Specifies the name of the resource.
          readOnly: true
          type: string
        sku:
          $ref: "#/components/schemas/Sku"
        tags:
          additionalProperties:
            type: string
          description: Contains resource tags defined as key/value pairs.
          type: object
        type:
          description: Specifies the type of the resource.
          readOnly: true
          type: string
      x-ms-azure-resource: true
    ServiceProvider:
      description: Service Provider Definition
      properties:
        properties:
          $ref: "#/components/schemas/ServiceProviderProperties"
      type: object
    ServiceProviderParameter:
      description: Extra Parameters specific to each Service Provider
      properties:
        default:
          description: Default Name for the Service Provider
          readOnly: true
          type: string
        description:
          description: Description of the Service Provider
          readOnly: true
          type: string
        displayName:
          description: Display Name of the Service Provider
          readOnly: true
          type: string
        helpUrl:
          description: Help Url for the  Service Provider
          readOnly: true
          type: string
        name:
          description: Name of the Service Provider
          readOnly: true
          type: string
        type:
          description: Type of the Service Provider
          readOnly: true
          type: string
    ServiceProviderProperties:
      description: The Object used to describe a Service Provider supported by Bot Service
      properties:
        devPortalUrl:
          description: Display Name of the Service Provider
          readOnly: true
          type: string
        displayName:
          description: Display Name of the Service Provider
          readOnly: true
          type: string
        iconUrl:
          description: Display Name of the Service Provider
          readOnly: true
          type: string
        id:
          description: Id for Service Provider
          readOnly: true
          type: string
        parameters:
          description: The list of parameters for the Service Provider
          items:
            $ref: "#/components/schemas/ServiceProviderParameter"
          type: array
        serviceProviderName:
          description: Display Name of the Service Provider
          readOnly: true
          type: string
    ServiceProviderResponseList:
      description: The list of bot service providers response.
      properties:
        nextLink:
          description: The link used to get the next page of bot service providers.
          type: string
        value:
          description: Gets the list of bot service providers and their properties.
          items:
            $ref: "#/components/schemas/ServiceProvider"
          readOnly: true
          type: array
    Sku:
      description: The SKU of the cognitive services account.
      properties:
        name:
          $ref: "#/components/schemas/SkuName"
        tier:
          description: Gets the sku tier. This is based on the SKU name.
          enum:
            - Free
            - Standard
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: SkuTier
      required:
        - name
    SkuName:
      description: The name of SKU.
      enum:
        - F0
        - S1
      type: string
      x-ms-enum:
        modelAsString: true
        name: SkuName
    SkypeChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Skype channel definition
      properties:
        properties:
          $ref: "#/components/schemas/SkypeChannelProperties"
      type: object
      x-ms-discriminator-value: SkypeChannel
    SkypeChannelProperties:
      description: The parameters to provide for the Microsoft Teams channel.
      properties:
        callingWebHook:
          description: Calling web hook for Skype channel
          type: string
        enableCalling:
          description: Enable calling for Skype channel
          type: boolean
        enableGroups:
          description: Enable groups for Skype channel
          type: boolean
        enableMediaCards:
          description: Enable media cards for Skype channel
          type: boolean
        enableMessaging:
          description: Enable messaging for Skype channel
          type: boolean
        enableScreenSharing:
          description: Enable screen sharing for Skype channel
          type: boolean
        enableVideo:
          description: Enable video for Skype channel
          type: boolean
        groupsMode:
          description: Group mode for Skype channel
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
      required:
        - isEnabled
    SlackChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Slack channel definition
      properties:
        properties:
          $ref: "#/components/schemas/SlackChannelProperties"
      type: object
      x-ms-discriminator-value: SlackChannel
    SlackChannelProperties:
      description: The parameters to provide for the Slack channel.
      properties:
        clientId:
          description: The Slack client id
          type: string
        clientSecret:
          description: The Slack client secret. Value only returned through POST to the
            action Channel List API, otherwise empty.
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
        isValidated:
          description: Whether this channel is validated for the bot
          readOnly: true
          type: boolean
        landingPageUrl:
          description: The Slack landing page Url
          type: string
        lastSubmissionId:
          description: The Sms auth token
          readOnly: true
          type: string
        redirectAction:
          description: The Slack redirect action
          readOnly: true
          type: string
        registerBeforeOAuthFlow:
          description: Whether to register the settings before OAuth validation is
            performed. Recommended to True.
          readOnly: true
          type: boolean
        verificationToken:
          description: The Slack verification token. Value only returned through POST to
            the action Channel List API, otherwise empty.
          type: string
      required:
        - clientId
        - clientSecret
        - verificationToken
        - isEnabled
    SmsChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Sms channel definition
      properties:
        properties:
          $ref: "#/components/schemas/SmsChannelProperties"
      type: object
      x-ms-discriminator-value: SmsChannel
    SmsChannelProperties:
      description: The parameters to provide for the Sms channel.
      properties:
        accountSID:
          description: The Sms account SID. Value only returned through POST to the action
            Channel List API, otherwise empty.
          type: string
        authToken:
          description: The Sms auth token. Value only returned through POST to the action
            Channel List API, otherwise empty.
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
        isValidated:
          description: Whether this channel is validated for the bot
          type: boolean
        phone:
          description: The Sms phone
          type: string
      required:
        - phone
        - accountSID
        - authToken
        - isEnabled
    TelegramChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Telegram channel definition
      properties:
        properties:
          $ref: "#/components/schemas/TelegramChannelProperties"
      type: object
      x-ms-discriminator-value: TelegramChannel
    TelegramChannelProperties:
      description: The parameters to provide for the Telegram channel.
      properties:
        accessToken:
          description: The Telegram access token. Value only returned through POST to the
            action Channel List API, otherwise empty.
          type: string
        isEnabled:
          description: Whether this channel is enabled for the bot
          type: boolean
        isValidated:
          description: Whether this channel is validated for the bot
          type: boolean
      required:
        - accessToken
        - isEnabled
    WebChatChannel:
      allOf:
        - $ref: "#/components/schemas/Channel"
      description: Web Chat channel definition
      properties:
        properties:
          $ref: "#/components/schemas/WebChatChannelProperties"
      type: object
      x-ms-discriminator-value: WebChatChannel
    WebChatChannelProperties:
      description: The parameters to provide for the Web Chat channel.
      properties:
        sites:
          description: The list of Web Chat sites
          items:
            $ref: "#/components/schemas/WebChatSite"
          type: array
        webChatEmbedCode:
          description: Web chat control embed code
          readOnly: true
          type: string
          x-ms-mutability:
            - read
    WebChatSite:
      description: A site for the Webchat channel
      properties:
        enablePreview:
          description: Whether this site is enabled for preview versions of Webchat
          type: boolean
        isEnabled:
          description: Whether this site is enabled for DirectLine channel
          type: boolean
        key:
          description: Primary key. Value only returned through POST to the action Channel
            List API, otherwise empty.
          readOnly: true
          type: string
          x-ms-mutability:
            - read
        key2:
          description: Secondary key. Value only returned through POST to the action
            Channel List API, otherwise empty.
          readOnly: true
          type: string
          x-ms-mutability:
            - read
        siteId:
          description: Site Id
          readOnly: true
          type: string
          x-ms-mutability:
            - read
        siteName:
          description: Site name
          type: string
      required:
        - siteName
        - isEnabled
        - enablePreview
