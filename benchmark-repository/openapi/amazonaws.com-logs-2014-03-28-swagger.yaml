openapi: 3.0.0
info:
  version: 2014-03-28
  x-release: v4
  title: Amazon CloudWatch Logs
  description: '<p>You can use Amazon CloudWatch Logs to monitor, store, and access your
    log files from Amazon EC2 instances, AWS CloudTrail, or other sources. You
    can then retrieve the associated log data from CloudWatch Logs using the
    CloudWatch console, CloudWatch Logs commands in the AWS CLI, CloudWatch Logs
    API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul>
    <li> <p> <b>Monitor logs from EC2 instances in real-time</b>: You can use
    CloudWatch Logs to monitor applications and systems using log data. For
    example, CloudWatch Logs can track the number of errors that occur in your
    application logs and send you a notification whenever the rate of errors
    exceeds a threshold that you specify. CloudWatch Logs uses your log data for
    monitoring; so, no code changes are required. For example, you can monitor
    application logs for specific literal terms (such as
    "NullReferenceException") or count the number of occurrences of a literal
    term at a particular position in log data (such as "404" status codes in an
    Apache access log). When the term you are searching for is found, CloudWatch
    Logs reports the data to a CloudWatch metric that you specify.</p> </li>
    <li> <p> <b>Monitor AWS CloudTrail logged events</b>: You can create alarms
    in CloudWatch and receive notifications of particular API activity as
    captured by CloudTrail and use the notification to perform
    troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use
    CloudWatch Logs to store your log data in highly durable storage. You can
    change the log retention setting so that any log events older than this
    setting are automatically deleted. The CloudWatch Logs agent makes it easy
    to quickly send both rotated and non-rotated log data off of a host and into
    the log service. You can then access the raw log data when you need it.</p>
    </li> </ul>'
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: logs
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/logs-2014-03-28.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/logs/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=Logs_20140328.AssociateKmsKey:
    post:
      operationId: AssociateKmsKey
      description: <p>Associates the specified AWS Key Management Service (AWS KMS)
        customer master key (CMK) with the specified log group.</p>
        <p>Associating an AWS KMS CMK with a log group overrides any existing
        associations between the log group and a CMK. After a CMK is associated
        with a log group, all newly ingested data for the log group is encrypted
        using the CMK. This association is stored as long as the data encrypted
        with the CMK is still within Amazon CloudWatch Logs. This enables Amazon
        CloudWatch Logs to decrypt this data whenever it is requested.</p>
        <p>Note that it can take up to 5 minutes for this operation to take
        effect.</p> <p>If you attempt to associate a CMK with a log group but
        the CMK does not exist or the CMK is disabled, you will receive an
        <code>InvalidParameterException</code> error. </p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.AssociateKmsKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssociateKmsKeyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.CancelExportTask:
    post:
      operationId: CancelExportTask
      description: <p>Cancels the specified export task.</p> <p>The task must be in the
        <code>PENDING</code> or <code>RUNNING</code> state.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidOperationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidOperationException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CancelExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelExportTaskRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.CreateExportTask:
    post:
      operationId: CreateExportTask
      description: <p>Creates an export task, which allows you to efficiently export data
        from a log group to an Amazon S3 bucket.</p> <p>This is an asynchronous
        call. If all the required information is provided, this operation
        initiates an export task and responds with the ID of the task. After the
        task has started, you can use <a>DescribeExportTasks</a> to get the
        status of the export task. Each account can only have one active
        (<code>RUNNING</code> or <code>PENDING</code>) export task at a time. To
        cancel an export task, use <a>CancelExportTask</a>.</p> <p>You can
        export logs from multiple log groups or multiple time ranges to the same
        S3 bucket. To separate out log data for each export task, you can
        specify a prefix to be used as the Amazon S3 key prefix for all exported
        objects.</p> <p>Exporting to S3 buckets that are encrypted with AES-256
        is supported. Exporting to S3 buckets encrypted with SSE-KMS is not
        supported. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateExportTaskResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "485":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CreateExportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExportTaskRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.CreateLogGroup:
    post:
      operationId: CreateLogGroup
      description: "<p>Creates a log group with the specified name.</p> <p>You can create
        up to 5000 log groups per account.</p> <p>You must use the following
        guidelines when naming a log group:</p> <ul> <li> <p>Log group names
        must be unique within a region for an AWS account.</p> </li> <li> <p>Log
        group names can be between 1 and 512 characters long.</p> </li> <li>
        <p>Log group names consist of the following characters: a-z, A-Z, 0-9,
        '_' (underscore), '-' (hyphen), '/' (forward slash), and '.'
        (period).</p> </li> </ul> <p>If you associate a AWS Key Management
        Service (AWS KMS) customer master key (CMK) with the log group, ingested
        data is encrypted using the CMK. This association is stored as long as
        the data encrypted with the CMK is still within Amazon CloudWatch Logs.
        This enables Amazon CloudWatch Logs to decrypt this data whenever it is
        requested.</p> <p>If you attempt to associate a CMK with the log group
        but the CMK does not exist or the CMK is disabled, you will receive an
        <code>InvalidParameterException</code> error. </p>"
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CreateLogGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLogGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.CreateLogStream:
    post:
      operationId: CreateLogStream
      description: <p>Creates a log stream for the specified log group.</p> <p>There is no
        limit on the number of log streams that you can create for a log
        group.</p> <p>You must use the following guidelines when naming a log
        stream:</p> <ul> <li> <p>Log stream names must be unique within the log
        group.</p> </li> <li> <p>Log stream names can be between 1 and 512
        characters long.</p> </li> <li> <p>The ':' (colon) and '*' (asterisk)
        characters are not allowed.</p> </li> </ul>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CreateLogStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLogStreamRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteDestination:
    post:
      operationId: DeleteDestination
      description: Deletes the specified destination, and eventually disables all the
        subscription filters that publish to it. This operation does not delete
        the physical resource encapsulated by the destination.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDestinationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteLogGroup:
    post:
      operationId: DeleteLogGroup
      description: Deletes the specified log group and permanently deletes all the archived
        log events associated with the log group.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteLogGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteLogGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteLogStream:
    post:
      operationId: DeleteLogStream
      description: Deletes the specified log stream and permanently deletes all the
        archived log events associated with the log stream.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteLogStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteLogStreamRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteMetricFilter:
    post:
      operationId: DeleteMetricFilter
      description: Deletes the specified metric filter.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteMetricFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteMetricFilterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteResourcePolicy:
    post:
      operationId: DeleteResourcePolicy
      description: Deletes a resource policy from this account. This revokes the access of
        the identities in that policy to put log events to this account.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteRetentionPolicy:
    post:
      operationId: DeleteRetentionPolicy
      description: <p>Deletes the specified retention policy.</p> <p>Log events do not
        expire if they belong to log groups without a retention policy.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteRetentionPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRetentionPolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DeleteSubscriptionFilter:
    post:
      operationId: DeleteSubscriptionFilter
      description: Deletes the specified subscription filter.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteSubscriptionFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSubscriptionFilterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeDestinations:
    post:
      operationId: DescribeDestinations
      description: Lists all your destinations. The results are ASCII-sorted by destination
        name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeDestinationsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeDestinations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeDestinationsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeExportTasks:
    post:
      operationId: DescribeExportTasks
      description: Lists the specified export tasks. You can list all your export tasks or
        filter the results based on task ID or task status.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeExportTasksResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeExportTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeExportTasksRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeLogGroups:
    post:
      operationId: DescribeLogGroups
      description: Lists the specified log groups. You can list all your log groups or
        filter the results by prefix. The results are ASCII-sorted by log group
        name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeLogGroupsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeLogGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeLogGroupsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeLogStreams:
    post:
      operationId: DescribeLogStreams
      description: <p>Lists the log streams for the specified log group. You can list all
        the log streams or filter the results by prefix. You can also control
        how the results are ordered.</p> <p>This operation has a limit of five
        transactions per second, after which transactions are throttled.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeLogStreamsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeLogStreams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeLogStreamsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeMetricFilters:
    post:
      operationId: DescribeMetricFilters
      description: Lists the specified metric filters. You can list all the metric filters
        or filter the results by log name, prefix, metric name, or metric
        namespace. The results are ASCII-sorted by filter name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeMetricFiltersResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeMetricFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeMetricFiltersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeQueries:
    post:
      operationId: DescribeQueries
      description: Returns a list of CloudWatch Logs Insights queries that are scheduled,
        executing, or have been executed recently in this account. You can
        request all queries, or limit it to queries of a specific log group or
        queries with a certain status.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeQueriesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeQueries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeQueriesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeResourcePolicies:
    post:
      operationId: DescribeResourcePolicies
      description: Lists the resource policies in this account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeResourcePoliciesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeResourcePolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeResourcePoliciesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DescribeSubscriptionFilters:
    post:
      operationId: DescribeSubscriptionFilters
      description: Lists the subscription filters for the specified log group. You can list
        all the subscription filters or filter the results by prefix. The
        results are ASCII-sorted by filter name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeSubscriptionFiltersResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeSubscriptionFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeSubscriptionFiltersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.DisassociateKmsKey:
    post:
      operationId: DisassociateKmsKey
      description: <p>Disassociates the associated AWS Key Management Service (AWS KMS)
        customer master key (CMK) from the specified log group.</p> <p>After the
        AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs
        stops encrypting newly ingested data for the log group. All previously
        ingested data remains encrypted, and AWS CloudWatch Logs requires
        permissions for the CMK whenever the encrypted data is requested.</p>
        <p>Note that it can take up to 5 minutes for this operation to take
        effect.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DisassociateKmsKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisassociateKmsKeyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.FilterLogEvents:
    post:
      operationId: FilterLogEvents
      description: <p>Lists log events from the specified log group. You can list all the
        log events or filter the results using a filter pattern, a time range,
        and the name of the log stream.</p> <p>By default, this operation
        returns as many log events as can fit in 1 MB (up to 10,000 log events),
        or all the events found within the time range that you specify. If the
        results include a token, then there are more log events available, and
        you can get additional results by specifying the token in a subsequent
        call.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterLogEventsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.FilterLogEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterLogEventsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.GetLogEvents:
    post:
      operationId: GetLogEvents
      description: <p>Lists log events from the specified log stream. You can list all the
        log events or filter using a time range.</p> <p>By default, this
        operation returns as many log events as can fit in a response size of
        1MB (up to 10,000 log events). You can get additional log events by
        specifying one of the tokens in a subsequent call.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLogEventsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetLogEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLogEventsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.GetLogGroupFields:
    post:
      operationId: GetLogGroupFields
      description: <p>Returns a list of the fields that are included in log events in the
        specified log group, along with the percentage of log events that
        contain each field. The search is limited to a time period that you
        specify.</p> <p>In the results, fields that start with @ are fields
        generated by CloudWatch Logs. For example, <code>@timestamp</code> is
        the timestamp of each log event.</p> <p>The response results are sorted
        by the frequency percentage, starting with the highest percentage.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLogGroupFieldsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetLogGroupFields
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLogGroupFieldsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.GetLogRecord:
    post:
      operationId: GetLogRecord
      description: <p>Retrieves all the fields and values of a single log event. All fields
        are retrieved, even if the original query that produced the
        <code>logRecordPointer</code> retrieved only a subset of fields. Fields
        are returned as field name/field value pairs.</p> <p>Additionally, the
        entire unparsed log event is returned within <code>@message</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLogRecordResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetLogRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLogRecordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.GetQueryResults:
    post:
      operationId: GetQueryResults
      description: <p>Returns the results from the specified query.</p> <p>Only the fields
        requested in the query are returned, along with a <code>@ptr</code>
        field which is the identifier for the log record. You can use the value
        of <code>@ptr</code> in a operation to get the full log record.</p> <p>
        <code>GetQueryResults</code> does not start a query execution. To run a
        query, use .</p> <p>If the value of the <code>Status</code> field in the
        output is <code>Running</code>, this operation returns only partial
        results. If you see a value of <code>Scheduled</code> or
        <code>Running</code> for the status, you can retry the operation later
        to see the final results. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryResultsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetQueryResults
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetQueryResultsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.ListTagsLogGroup:
    post:
      operationId: ListTagsLogGroup
      description: Lists the tags for the specified log group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsLogGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.ListTagsLogGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsLogGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutDestination:
    post:
      operationId: PutDestination
      description: <p>Creates or updates a destination. A destination encapsulates a
        physical resource (such as an Amazon Kinesis stream) and enables you to
        subscribe to a real-time stream of log events for a different account,
        ingested using <a>PutLogEvents</a>. A destination can be an Amazon
        Kinesis stream, Amazon Kinesis Data Firehose strea, or an AWS Lambda
        function.</p> <p>Through an access policy, a destination controls what
        is written to it. By default, <code>PutDestination</code> does not set
        any access policy with the destination, which means a cross-account user
        cannot call <a>PutSubscriptionFilter</a> against this destination. To
        enable this, the destination owner must call <a>PutDestinationPolicy</a>
        after <code>PutDestination</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutDestinationResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutDestinationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutDestinationPolicy:
    post:
      operationId: PutDestinationPolicy
      description: Creates or updates an access policy associated with an existing
        destination. An access policy is an <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html">IAM
        policy document</a> that is used to authorize claims to register a
        subscription filter against a given destination.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutDestinationPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutDestinationPolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutLogEvents:
    post:
      operationId: PutLogEvents
      description: '<p>Uploads a batch of log events to the specified log stream.</p>
        <p>You must include the sequence token obtained from the response of the
        previous call. An upload in a newly created log stream does not require
        a sequence token. You can also get the sequence token using
        <a>DescribeLogStreams</a>. If you call <code>PutLogEvents</code> twice
        within a narrow time period using the same value for
        <code>sequenceToken</code>, both calls may be successful, or one may be
        rejected.</p> <p>The batch of events must satisfy the following
        constraints:</p> <ul> <li> <p>The maximum batch size is 1,048,576 bytes,
        and this size is calculated as the sum of all event messages in UTF-8,
        plus 26 bytes for each log event.</p> </li> <li> <p>None of the log
        events in the batch can be more than 2 hours in the future.</p> </li>
        <li> <p>None of the log events in the batch can be older than 14 days or
        older than the retention period of the log group.</p> </li> <li> <p>The
        log events in the batch must be in chronological ordered by their
        timestamp. The timestamp is the time the event occurred, expressed as
        the number of milliseconds after Jan 1, 1970 00:00:00 UTC. (In AWS Tools
        for PowerShell and the AWS SDK for .NET, the timestamp is specified in
        .NET format: yyyy-mm-ddThh:mm:ss. For example, 2017-09-15T13:45:30.)
        </p> </li> <li> <p>The maximum number of log events in a batch is
        10,000.</p> </li> <li> <p>A batch of log events in a single request
        cannot span more than 24 hours. Otherwise, the operation fails.</p>
        </li> </ul> <p>If a call to PutLogEvents returns
        "UnrecognizedClientException" the most likely cause is an invalid AWS
        access key ID or secret key. </p>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutLogEventsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidSequenceTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSequenceTokenException"
        "482":
          description: DataAlreadyAcceptedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataAlreadyAcceptedException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: UnrecognizedClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnrecognizedClientException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutLogEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutLogEventsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutMetricFilter:
    post:
      operationId: PutMetricFilter
      description: <p>Creates or updates a metric filter and associates it with the
        specified log group. Metric filters allow you to configure rules to
        extract metric data from log events ingested through
        <a>PutLogEvents</a>.</p> <p>The maximum number of metric filters that
        can be associated with a log group is 100.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutMetricFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutMetricFilterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutResourcePolicy:
    post:
      operationId: PutResourcePolicy
      description: Creates or updates a resource policy allowing other AWS services to put
        log events to this account, such as Amazon Route 53. An account can have
        up to 10 resource policies per region.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutResourcePolicyResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutRetentionPolicy:
    post:
      operationId: PutRetentionPolicy
      description: Sets the retention of the specified log group. A retention policy allows
        you to configure the number of days for which to retain log events in
        the specified log group.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutRetentionPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutRetentionPolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.PutSubscriptionFilter:
    post:
      operationId: PutSubscriptionFilter
      description: <p>Creates or updates a subscription filter and associates it with the
        specified log group. Subscription filters allow you to subscribe to a
        real-time stream of log events ingested through <a>PutLogEvents</a> and
        have them delivered to a specific destination. Currently, the supported
        destinations are:</p> <ul> <li> <p>An Amazon Kinesis stream belonging to
        the same account as the subscription filter, for same-account
        delivery.</p> </li> <li> <p>A logical destination that belongs to a
        different account, for cross-account delivery.</p> </li> <li> <p>An
        Amazon Kinesis Firehose delivery stream that belongs to the same account
        as the subscription filter, for same-account delivery.</p> </li> <li>
        <p>An AWS Lambda function that belongs to the same account as the
        subscription filter, for same-account delivery.</p> </li> </ul> <p>There
        can only be one subscription filter associated with a log group. If you
        are updating an existing filter, you must specify the correct name in
        <code>filterName</code>. Otherwise, the call fails because you cannot
        associate a second filter with a log group.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationAbortedException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutSubscriptionFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutSubscriptionFilterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.StartQuery:
    post:
      operationId: StartQuery
      description: <p>Schedules a query of a log group using CloudWatch Logs Insights. You
        specify the log group and time range to query, and the query string to
        use.</p> <p>For more information, see <a
        href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch
        Logs Insights Query Syntax</a>.</p> <p>Queries time out after 15 minutes
        of execution. If your queries are timing out, reduce the time range
        being searched, or partition your query into a number of queries.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartQueryResponse"
        "480":
          description: MalformedQueryException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedQueryException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.StartQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartQueryRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.StopQuery:
    post:
      operationId: StopQuery
      description: Stops a CloudWatch Logs Insights query that is in progress. If the query
        has already ended, the operation returns an error indicating that the
        specified query is not running.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopQueryResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.StopQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopQueryRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.TagLogGroup:
    post:
      operationId: TagLogGroup
      description: <p>Adds or updates the specified tags for the specified log group.</p>
        <p>To list the tags for a log group, use <a>ListTagsLogGroup</a>. To
        remove tags, use <a>UntagLogGroup</a>.</p> <p>For more information about
        tags, see <a
        href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/log-group-tagging.html">Tag
        Log Groups in Amazon CloudWatch Logs</a> in the <i>Amazon CloudWatch
        Logs User Guide</i>.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.TagLogGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagLogGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.TestMetricFilter:
    post:
      operationId: TestMetricFilter
      description: Tests the filter pattern of a metric filter against a sample of log
        event messages. You can use this operation to validate the correctness
        of a metric filter pattern.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestMetricFilterResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.TestMetricFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestMetricFilterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Logs_20140328.UntagLogGroup:
    post:
      operationId: UntagLogGroup
      description: <p>Removes the specified tags from the specified log group.</p> <p>To
        list the tags for a log group, use <a>ListTagsLogGroup</a>. To add tags,
        use <a>UntagLogGroup</a>.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.UntagLogGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagLogGroupRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://logs.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon CloudWatch Logs multi-region endpoint
  - url: https://logs.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon CloudWatch Logs multi-region endpoint
  - url: http://logs.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon CloudWatch Logs endpoint for China (Beijing) and China (Ningxia)
  - url: https://logs.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon CloudWatch Logs endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssociateKmsKeyRequest:
      type: object
      required:
        - logGroupName
        - kmsKeyId
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        kmsKeyId:
          $ref: "#/components/schemas/KmsKeyId"
    InvalidParameterException: {}
    ResourceNotFoundException: {}
    OperationAbortedException: {}
    ServiceUnavailableException: {}
    CancelExportTaskRequest:
      type: object
      required:
        - taskId
      properties:
        taskId:
          $ref: "#/components/schemas/ExportTaskId"
    InvalidOperationException: {}
    CreateExportTaskResponse:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/ExportTaskId"
    CreateExportTaskRequest:
      type: object
      required:
        - logGroupName
        - from
        - to
        - destination
      properties:
        taskName:
          $ref: "#/components/schemas/ExportTaskName"
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamNamePrefix:
          $ref: "#/components/schemas/LogStreamName"
        from:
          $ref: "#/components/schemas/Timestamp"
        to:
          $ref: "#/components/schemas/Timestamp"
        destination:
          $ref: "#/components/schemas/ExportDestinationBucket"
        destinationPrefix:
          $ref: "#/components/schemas/ExportDestinationPrefix"
    LimitExceededException: {}
    ResourceAlreadyExistsException: {}
    CreateLogGroupRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        kmsKeyId:
          $ref: "#/components/schemas/KmsKeyId"
        tags:
          $ref: "#/components/schemas/Tags"
    CreateLogStreamRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
    DeleteDestinationRequest:
      type: object
      required:
        - destinationName
      properties:
        destinationName:
          $ref: "#/components/schemas/DestinationName"
    DeleteLogGroupRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
    DeleteLogStreamRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
    DeleteMetricFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterName:
          $ref: "#/components/schemas/FilterName"
    DeleteResourcePolicyRequest:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
    DeleteRetentionPolicyRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
    DeleteSubscriptionFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterName:
          $ref: "#/components/schemas/FilterName"
    DescribeDestinationsResponse:
      type: object
      properties:
        destinations:
          $ref: "#/components/schemas/Destinations"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeDestinationsRequest:
      type: object
      properties:
        DestinationNamePrefix:
          $ref: "#/components/schemas/DestinationName"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
    DescribeExportTasksResponse:
      type: object
      properties:
        exportTasks:
          $ref: "#/components/schemas/ExportTasks"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeExportTasksRequest:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/ExportTaskId"
        statusCode:
          $ref: "#/components/schemas/ExportTaskStatusCode"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
    DescribeLogGroupsResponse:
      type: object
      properties:
        logGroups:
          $ref: "#/components/schemas/LogGroups"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeLogGroupsRequest:
      type: object
      properties:
        logGroupNamePrefix:
          $ref: "#/components/schemas/LogGroupName"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
    DescribeLogStreamsResponse:
      type: object
      properties:
        logStreams:
          $ref: "#/components/schemas/LogStreams"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeLogStreamsRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamNamePrefix:
          $ref: "#/components/schemas/LogStreamName"
        orderBy:
          $ref: "#/components/schemas/OrderBy"
        descending:
          $ref: "#/components/schemas/Descending"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
    DescribeMetricFiltersResponse:
      type: object
      properties:
        metricFilters:
          $ref: "#/components/schemas/MetricFilters"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeMetricFiltersRequest:
      type: object
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterNamePrefix:
          $ref: "#/components/schemas/FilterName"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
        metricName:
          $ref: "#/components/schemas/MetricName"
        metricNamespace:
          $ref: "#/components/schemas/MetricNamespace"
    DescribeQueriesResponse:
      type: object
      properties:
        queries:
          $ref: "#/components/schemas/QueryInfoList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeQueriesRequest:
      type: object
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        status:
          $ref: "#/components/schemas/QueryStatus"
        maxResults:
          $ref: "#/components/schemas/DescribeQueriesMaxResults"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeResourcePoliciesResponse:
      type: object
      properties:
        resourcePolicies:
          $ref: "#/components/schemas/ResourcePolicies"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeResourcePoliciesRequest:
      type: object
      properties:
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
    DescribeSubscriptionFiltersResponse:
      type: object
      properties:
        subscriptionFilters:
          $ref: "#/components/schemas/SubscriptionFilters"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeSubscriptionFiltersRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterNamePrefix:
          $ref: "#/components/schemas/FilterName"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/DescribeLimit"
    DisassociateKmsKeyRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
    FilterLogEventsResponse:
      type: object
      properties:
        events:
          $ref: "#/components/schemas/FilteredLogEvents"
        searchedLogStreams:
          $ref: "#/components/schemas/SearchedLogStreams"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    FilterLogEventsRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamNames:
          $ref: "#/components/schemas/InputLogStreamNames"
        logStreamNamePrefix:
          $ref: "#/components/schemas/LogStreamName"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        endTime:
          $ref: "#/components/schemas/Timestamp"
        filterPattern:
          $ref: "#/components/schemas/FilterPattern"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/EventsLimit"
        interleaved:
          $ref: "#/components/schemas/Interleaved"
    GetLogEventsResponse:
      type: object
      properties:
        events:
          $ref: "#/components/schemas/OutputLogEvents"
        nextForwardToken:
          $ref: "#/components/schemas/NextToken"
        nextBackwardToken:
          $ref: "#/components/schemas/NextToken"
    GetLogEventsRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        endTime:
          $ref: "#/components/schemas/Timestamp"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        limit:
          $ref: "#/components/schemas/EventsLimit"
        startFromHead:
          $ref: "#/components/schemas/StartFromHead"
    GetLogGroupFieldsResponse:
      type: object
      properties:
        logGroupFields:
          $ref: "#/components/schemas/LogGroupFieldList"
    GetLogGroupFieldsRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        time:
          $ref: "#/components/schemas/Timestamp"
    GetLogRecordResponse:
      type: object
      properties:
        logRecord:
          $ref: "#/components/schemas/LogRecord"
    GetLogRecordRequest:
      type: object
      required:
        - logRecordPointer
      properties:
        logRecordPointer:
          $ref: "#/components/schemas/LogRecordPointer"
    GetQueryResultsResponse:
      type: object
      properties:
        results:
          $ref: "#/components/schemas/QueryResults"
        statistics:
          $ref: "#/components/schemas/QueryStatistics"
        status:
          $ref: "#/components/schemas/QueryStatus"
    GetQueryResultsRequest:
      type: object
      required:
        - queryId
      properties:
        queryId:
          $ref: "#/components/schemas/QueryId"
    ListTagsLogGroupResponse:
      type: object
      properties:
        tags:
          $ref: "#/components/schemas/Tags"
    ListTagsLogGroupRequest:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
    PutDestinationResponse:
      type: object
      properties:
        destination:
          $ref: "#/components/schemas/Destination"
    PutDestinationRequest:
      type: object
      required:
        - destinationName
        - targetArn
        - roleArn
      properties:
        destinationName:
          $ref: "#/components/schemas/DestinationName"
        targetArn:
          $ref: "#/components/schemas/TargetArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
    PutDestinationPolicyRequest:
      type: object
      required:
        - destinationName
        - accessPolicy
      properties:
        destinationName:
          $ref: "#/components/schemas/DestinationName"
        accessPolicy:
          $ref: "#/components/schemas/AccessPolicy"
    PutLogEventsResponse:
      type: object
      properties:
        nextSequenceToken:
          $ref: "#/components/schemas/SequenceToken"
        rejectedLogEventsInfo:
          $ref: "#/components/schemas/RejectedLogEventsInfo"
    PutLogEventsRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
        - logEvents
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
        logEvents:
          $ref: "#/components/schemas/InputLogEvents"
        sequenceToken:
          $ref: "#/components/schemas/SequenceToken"
    InvalidSequenceTokenException: {}
    DataAlreadyAcceptedException: {}
    UnrecognizedClientException: {}
    PutMetricFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
        - filterPattern
        - metricTransformations
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterName:
          $ref: "#/components/schemas/FilterName"
        filterPattern:
          $ref: "#/components/schemas/FilterPattern"
        metricTransformations:
          $ref: "#/components/schemas/MetricTransformations"
    PutResourcePolicyResponse:
      type: object
      properties:
        resourcePolicy:
          $ref: "#/components/schemas/ResourcePolicy"
    PutResourcePolicyRequest:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
    PutRetentionPolicyRequest:
      type: object
      required:
        - logGroupName
        - retentionInDays
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        retentionInDays:
          $ref: "#/components/schemas/Days"
    PutSubscriptionFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
        - filterPattern
        - destinationArn
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterName:
          $ref: "#/components/schemas/FilterName"
        filterPattern:
          $ref: "#/components/schemas/FilterPattern"
        destinationArn:
          $ref: "#/components/schemas/DestinationArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        distribution:
          $ref: "#/components/schemas/Distribution"
    StartQueryResponse:
      type: object
      properties:
        queryId:
          $ref: "#/components/schemas/QueryId"
    StartQueryRequest:
      type: object
      required:
        - startTime
        - endTime
        - queryString
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        logGroupNames:
          $ref: "#/components/schemas/LogGroupNames"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        endTime:
          $ref: "#/components/schemas/Timestamp"
        queryString:
          $ref: "#/components/schemas/QueryString"
        limit:
          $ref: "#/components/schemas/EventsLimit"
    MalformedQueryException: {}
    StopQueryResponse:
      type: object
      properties:
        success:
          $ref: "#/components/schemas/Success"
    StopQueryRequest:
      type: object
      required:
        - queryId
      properties:
        queryId:
          $ref: "#/components/schemas/QueryId"
    TagLogGroupRequest:
      type: object
      required:
        - logGroupName
        - tags
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        tags:
          $ref: "#/components/schemas/Tags"
    TestMetricFilterResponse:
      type: object
      properties:
        matches:
          $ref: "#/components/schemas/MetricFilterMatches"
    TestMetricFilterRequest:
      type: object
      required:
        - filterPattern
        - logEventMessages
      properties:
        filterPattern:
          $ref: "#/components/schemas/FilterPattern"
        logEventMessages:
          $ref: "#/components/schemas/TestEventMessages"
    UntagLogGroupRequest:
      type: object
      required:
        - logGroupName
        - tags
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        tags:
          $ref: "#/components/schemas/TagList"
    AccessPolicy:
      type: string
      minLength: 1
    Arn:
      type: string
    LogGroupName:
      type: string
      pattern: "[\\.\\-_/#A-Za-z0-9]+"
      minLength: 1
      maxLength: 512
    KmsKeyId:
      type: string
      maxLength: 256
    ExportTaskId:
      type: string
      minLength: 1
      maxLength: 512
    ExportTaskName:
      type: string
      minLength: 1
      maxLength: 512
    LogStreamName:
      type: string
      pattern: "[^:*]*"
      minLength: 1
      maxLength: 512
    Timestamp:
      type: integer
      minimum: 0
    ExportDestinationBucket:
      type: string
      minLength: 1
      maxLength: 512
    ExportDestinationPrefix:
      type: string
    Tags:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    Days:
      type: integer
      description: "The number of days to retain the log events in the specified log group.
        Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365,
        400, 545, 731, 1827, and 3653."
    DefaultValue:
      type: number
      format: double
    DestinationName:
      type: string
      pattern: "[^:*]*"
      minLength: 1
      maxLength: 512
    FilterName:
      type: string
      pattern: "[^:*]*"
      minLength: 1
      maxLength: 512
    PolicyName:
      type: string
    Descending:
      type: boolean
    NextToken:
      type: string
      description: The token for the next set of items to return. The token expires after
        24 hours.
      minLength: 1
    DescribeLimit:
      type: integer
      minimum: 1
      maximum: 50
    Destinations:
      type: array
      items:
        $ref: "#/components/schemas/Destination"
    ExportTaskStatusCode:
      type: string
      enum:
        - CANCELLED
        - COMPLETED
        - FAILED
        - PENDING
        - PENDING_CANCEL
        - RUNNING
    ExportTasks:
      type: array
      items:
        $ref: "#/components/schemas/ExportTask"
    LogGroups:
      type: array
      items:
        $ref: "#/components/schemas/LogGroup"
    OrderBy:
      type: string
      enum:
        - LogStreamName
        - LastEventTime
    LogStreams:
      type: array
      items:
        $ref: "#/components/schemas/LogStream"
    MetricName:
      type: string
      pattern: "[^:*$]*"
      description: The name of the CloudWatch metric to which the monitored log information
        should be published. For example, you may publish to a metric called
        ErrorCount.
      maxLength: 255
    MetricNamespace:
      type: string
      pattern: "[^:*$]*"
      maxLength: 255
    MetricFilters:
      type: array
      items:
        $ref: "#/components/schemas/MetricFilter"
    DescribeQueriesMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    QueryStatus:
      type: string
      enum:
        - Scheduled
        - Running
        - Complete
        - Failed
        - Cancelled
    QueryInfoList:
      type: array
      items:
        $ref: "#/components/schemas/QueryInfo"
    ResourcePolicies:
      type: array
      items:
        $ref: "#/components/schemas/ResourcePolicy"
    SubscriptionFilters:
      type: array
      items:
        $ref: "#/components/schemas/SubscriptionFilter"
    TargetArn:
      type: string
      minLength: 1
    RoleArn:
      type: string
      minLength: 1
    Destination:
      type: object
      properties:
        destinationName:
          $ref: "#/components/schemas/DestinationName"
        targetArn:
          $ref: "#/components/schemas/TargetArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        accessPolicy:
          $ref: "#/components/schemas/AccessPolicy"
        arn:
          $ref: "#/components/schemas/Arn"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
      description: Represents a cross-account destination that receives subscription log
        events.
    DestinationArn:
      type: string
      minLength: 1
    Distribution:
      type: string
      enum:
        - Random
        - ByLogStream
      description: The method used to distribute log data to the destination, which can be
        either random or grouped by log stream.
    EventId:
      type: string
    EventMessage:
      type: string
      minLength: 1
    EventNumber:
      type: integer
    EventsLimit:
      type: integer
      minimum: 1
      maximum: 10000
    ExportTaskStatus:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/ExportTaskStatusCode"
        message:
          $ref: "#/components/schemas/ExportTaskStatusMessage"
      description: Represents the status of an export task.
    ExportTaskExecutionInfo:
      type: object
      properties:
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        completionTime:
          $ref: "#/components/schemas/Timestamp"
      description: Represents the status of an export task.
    ExportTask:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/ExportTaskId"
        taskName:
          $ref: "#/components/schemas/ExportTaskName"
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        from:
          $ref: "#/components/schemas/Timestamp"
        to:
          $ref: "#/components/schemas/Timestamp"
        destination:
          $ref: "#/components/schemas/ExportDestinationBucket"
        destinationPrefix:
          $ref: "#/components/schemas/ExportDestinationPrefix"
        status:
          $ref: "#/components/schemas/ExportTaskStatus"
        executionInfo:
          $ref: "#/components/schemas/ExportTaskExecutionInfo"
      description: Represents an export task.
    ExportTaskStatusMessage:
      type: string
    Value:
      type: string
    ExtractedValues:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Value"
    Field:
      type: string
    FilterCount:
      type: integer
    InputLogStreamNames:
      type: array
      items:
        $ref: "#/components/schemas/LogStreamName"
      minItems: 1
      maxItems: 100
    FilterPattern:
      type: string
      description: A symbolic description of how CloudWatch Logs should interpret the data
        in each log event. For example, a log event may contain timestamps, IP
        addresses, strings, and so on. You use the filter pattern to specify
        what to look for in the log event message.
      minLength: 0
      maxLength: 1024
    Interleaved:
      type: boolean
    FilteredLogEvents:
      type: array
      items:
        $ref: "#/components/schemas/FilteredLogEvent"
    SearchedLogStreams:
      type: array
      items:
        $ref: "#/components/schemas/SearchedLogStream"
    FilteredLogEvent:
      type: object
      properties:
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        message:
          $ref: "#/components/schemas/EventMessage"
        ingestionTime:
          $ref: "#/components/schemas/Timestamp"
        eventId:
          $ref: "#/components/schemas/EventId"
      description: Represents a matched event.
    StartFromHead:
      type: boolean
    OutputLogEvents:
      type: array
      items:
        $ref: "#/components/schemas/OutputLogEvent"
    LogGroupFieldList:
      type: array
      items:
        $ref: "#/components/schemas/LogGroupField"
    LogRecordPointer:
      type: string
    LogRecord:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Value"
    QueryId:
      type: string
      minLength: 0
      maxLength: 256
    QueryResults:
      type: array
      items:
        $ref: "#/components/schemas/ResultRows"
    QueryStatistics:
      type: object
      properties:
        recordsMatched:
          $ref: "#/components/schemas/StatsValue"
        recordsScanned:
          $ref: "#/components/schemas/StatsValue"
        bytesScanned:
          $ref: "#/components/schemas/StatsValue"
      description: Contains the number of log events scanned by the query, the number of
        log events that matched the query criteria, and the total number of
        bytes in the log events that were scanned.
    InputLogEvent:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        message:
          $ref: "#/components/schemas/EventMessage"
      description: Represents a log event, which is a record of activity that was recorded
        by the application or resource being monitored.
    InputLogEvents:
      type: array
      items:
        $ref: "#/components/schemas/InputLogEvent"
      minItems: 1
      maxItems: 10000
    LogEventIndex:
      type: integer
    StoredBytes:
      type: integer
      minimum: 0
    LogGroup:
      type: object
      properties:
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        retentionInDays:
          $ref: "#/components/schemas/Days"
        metricFilterCount:
          $ref: "#/components/schemas/FilterCount"
        arn:
          $ref: "#/components/schemas/Arn"
        storedBytes:
          $ref: "#/components/schemas/StoredBytes"
        kmsKeyId:
          $ref: "#/components/schemas/KmsKeyId"
      description: Represents a log group.
    Percentage:
      type: integer
      minimum: 0
      maximum: 100
    LogGroupField:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Field"
        percent:
          $ref: "#/components/schemas/Percentage"
      description: The fields contained in log events found by a
        <code>GetLogGroupFields</code> operation, along with the percentage of
        queried log events in which each field appears.
    LogGroupNames:
      type: array
      items:
        $ref: "#/components/schemas/LogGroupName"
    SequenceToken:
      type: string
      minLength: 1
    LogStream:
      type: object
      properties:
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        firstEventTimestamp:
          $ref: "#/components/schemas/Timestamp"
        lastEventTimestamp:
          $ref: "#/components/schemas/Timestamp"
        lastIngestionTime:
          $ref: "#/components/schemas/Timestamp"
        uploadSequenceToken:
          $ref: "#/components/schemas/SequenceToken"
        arn:
          $ref: "#/components/schemas/Arn"
        storedBytes:
          $ref: "#/components/schemas/StoredBytes"
      description: Represents a log stream, which is a sequence of log events from a single
        emitter of logs.
    LogStreamSearchedCompletely:
      type: boolean
    MetricTransformations:
      type: array
      items:
        $ref: "#/components/schemas/MetricTransformation"
      minItems: 1
      maxItems: 1
    MetricFilter:
      type: object
      properties:
        filterName:
          $ref: "#/components/schemas/FilterName"
        filterPattern:
          $ref: "#/components/schemas/FilterPattern"
        metricTransformations:
          $ref: "#/components/schemas/MetricTransformations"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
      description: Metric filters express how CloudWatch Logs would extract metric
        observations from ingested log events and transform them into metric
        data in a CloudWatch metric.
    MetricFilterMatchRecord:
      type: object
      properties:
        eventNumber:
          $ref: "#/components/schemas/EventNumber"
        eventMessage:
          $ref: "#/components/schemas/EventMessage"
        extractedValues:
          $ref: "#/components/schemas/ExtractedValues"
      description: Represents a matched event.
    MetricFilterMatches:
      type: array
      items:
        $ref: "#/components/schemas/MetricFilterMatchRecord"
    MetricValue:
      type: string
      description: The value to publish to the CloudWatch metric. For example, if you're
        counting the occurrences of a term like "Error", the value is "1" for
        each occurrence. If you're counting the bytes transferred, the value is
        the value in the log event.
      maxLength: 100
    MetricTransformation:
      type: object
      required:
        - metricName
        - metricNamespace
        - metricValue
      properties:
        metricName:
          $ref: "#/components/schemas/MetricName"
        metricNamespace:
          $ref: "#/components/schemas/MetricNamespace"
        metricValue:
          $ref: "#/components/schemas/MetricValue"
        defaultValue:
          $ref: "#/components/schemas/DefaultValue"
      description: Indicates how to transform ingested log events to metric data in a
        CloudWatch metric.
    OutputLogEvent:
      type: object
      properties:
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        message:
          $ref: "#/components/schemas/EventMessage"
        ingestionTime:
          $ref: "#/components/schemas/Timestamp"
      description: Represents a log event.
    PolicyDocument:
      type: string
      minLength: 1
      maxLength: 5120
    RejectedLogEventsInfo:
      type: object
      properties:
        tooNewLogEventStartIndex:
          $ref: "#/components/schemas/LogEventIndex"
        tooOldLogEventEndIndex:
          $ref: "#/components/schemas/LogEventIndex"
        expiredLogEventEndIndex:
          $ref: "#/components/schemas/LogEventIndex"
      description: Represents the rejected events.
    ResourcePolicy:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
        lastUpdatedTime:
          $ref: "#/components/schemas/Timestamp"
      description: A policy enabling one or more entities to put logs to a log group in
        this account.
    QueryString:
      type: string
      minLength: 0
      maxLength: 2048
    QueryInfo:
      type: object
      properties:
        queryId:
          $ref: "#/components/schemas/QueryId"
        queryString:
          $ref: "#/components/schemas/QueryString"
        status:
          $ref: "#/components/schemas/QueryStatus"
        createTime:
          $ref: "#/components/schemas/Timestamp"
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
      description: "Information about one CloudWatch Logs Insights query that matches the
        request in a <code>DescribeQueries</code> operation. "
    ResultRows:
      type: array
      items:
        $ref: "#/components/schemas/ResultField"
    StatsValue:
      type: number
      format: double
    ResultField:
      type: object
      properties:
        field:
          $ref: "#/components/schemas/Field"
        value:
          $ref: "#/components/schemas/Value"
      description: Contains one field from one log event returned by a CloudWatch Logs
        Insights query, along with the value of that field.
    SearchedLogStream:
      type: object
      properties:
        logStreamName:
          $ref: "#/components/schemas/LogStreamName"
        searchedCompletely:
          $ref: "#/components/schemas/LogStreamSearchedCompletely"
      description: Represents the search status of a log stream.
    Success:
      type: boolean
    SubscriptionFilter:
      type: object
      properties:
        filterName:
          $ref: "#/components/schemas/FilterName"
        logGroupName:
          $ref: "#/components/schemas/LogGroupName"
        filterPattern:
          $ref: "#/components/schemas/FilterPattern"
        destinationArn:
          $ref: "#/components/schemas/DestinationArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        distribution:
          $ref: "#/components/schemas/Distribution"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
      description: Represents a subscription filter.
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]+)$
      minLength: 1
      maxLength: 128
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
    TagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      maxLength: 256
    TestEventMessages:
      type: array
      items:
        $ref: "#/components/schemas/EventMessage"
      minItems: 1
      maxItems: 50
    Token:
      type: string
