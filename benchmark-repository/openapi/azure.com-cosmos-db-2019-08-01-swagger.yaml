openapi: 3.0.0
info:
  description: Azure Cosmos DB Database Service Resource Provider REST API
  title: Cosmos DB
  version: 2019-08-01
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2019-08-01/cosmos-db.json
      version: "2.0"
  x-preferred: true
  x-providerName: azure.com
  x-serviceName: cosmos-db
  x-tags:
    - Azure
    - Microsoft
security:
  - azure_auth:
      - user_impersonation
paths:
  "/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}":
    head:
      description: Checks that the Azure Cosmos DB account name already exists. A valid
        account name may contain only lowercase letters, numbers, and the '-'
        character, and must be between 3 and 50 characters.
      operationId: DatabaseAccounts_CheckNameExists
      parameters:
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: OK. The account name is valid but is already in use.
        "404":
          description: Not Found. The account name is available and valid.
  /providers/Microsoft.DocumentDB/operations:
    get:
      description: Lists all of the available Cosmos DB Resource Provider operations.
      operationId: Operations_List
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationListResult"
              examples:
                CosmosDBOperationsList:
                  $ref: "#/components/examples/CosmosDBOperationsList"
      tags:
        - Operations
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts":
    get:
      description: Lists all the Azure Cosmos DB database accounts available under the
        subscription.
      operationId: DatabaseAccounts_List
      parameters:
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountsListResult"
              examples:
                CosmosDBDatabaseAccountList:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts":
    get:
      description: Lists all the Azure Cosmos DB database accounts available under the
        given resource group.
      operationId: DatabaseAccounts_ListByResourceGroup
      parameters:
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/subscriptionIdParameter"
      responses:
        "200":
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountsListResult"
              examples:
                CosmosDBDatabaseAccountListByResourceGroup:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountListByResourc\
                    eGroup"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}":
    delete:
      description: Deletes an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_Delete
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The database account delete operation will complete asynchronously.
        "204":
          description: The specified account does not exist in the subscription.
      x-ms-long-running-operation: true
    get:
      description: Retrieves the properties of an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_Get
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The database account properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountGetResults"
              examples:
                CosmosDBDatabaseAccountGet:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountGet"
    patch:
      description: Patches the properties of an existing Azure Cosmos DB database account.
      operationId: DatabaseAccounts_Patch
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseAccountPatchParameters"
        description: The tags parameter to patch for the current database account.
        required: true
      responses:
        "200":
          description: The properties of the database account were patched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountGetResults"
              examples:
                CosmosDBDatabaseAccountPatch:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountPatch"
      x-ms-long-running-operation: true
    put:
      description: Creates or updates an Azure Cosmos DB database account.
      operationId: DatabaseAccounts_CreateOrUpdate
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseAccountCreateUpdateParameters"
        description: The parameters to provide for the current database account.
        required: true
      responses:
        "200":
          description: The database account create or update operation will complete
            asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountGetResults"
              examples:
                CosmosDBDatabaseAccountCreateMax:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountCreateMax"
                CosmosDBDatabaseAccountCreateMin:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountCreateMin"
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces":
    get:
      description: Lists the Cassandra keyspaces under an existing Azure Cosmos DB database
        account.
      operationId: CassandraResources_ListCassandraKeyspaces
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Cassandra keyspace properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CassandraKeyspaceListResult"
              examples:
                CosmosDBCassandraKeyspaceList:
                  $ref: "#/components/examples/CosmosDBCassandraKeyspaceList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}":
    delete:
      description: Deletes an existing Azure Cosmos DB Cassandra keyspace.
      operationId: CassandraResources_DeleteCassandraKeyspace
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The Cassandra keyspace delete operation will complete asynchronously.
        "204":
          description: The Cassandra keyspace delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the Cassandra keyspaces under an existing Azure Cosmos DB database
        account with the provided name.
      operationId: CassandraResources_GetCassandraKeyspace
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Cassandra keyspace property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CassandraKeyspaceGetResults"
              examples:
                CosmosDBCassandraKeyspaceGet:
                  $ref: "#/components/examples/CosmosDBCassandraKeyspaceGet"
    put:
      description: Create or update an Azure Cosmos DB Cassandra keyspace
      operationId: CassandraResources_CreateUpdateCassandraKeyspace
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CassandraKeyspaceCreateUpdateParameters"
        description: The parameters to provide for the current Cassandra keyspace.
        required: true
      responses:
        "200":
          description: The Cassandra keyspace create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CassandraKeyspaceGetResults"
              examples:
                CosmosDBCassandraKeyspaceCreateUpdate:
                  $ref: "#/components/examples/CosmosDBCassandraKeyspaceCreateUpdate"
        "202":
          description: The Cassandra keyspace create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables":
    get:
      description: Lists the Cassandra table under an existing Azure Cosmos DB database
        account.
      operationId: CassandraResources_ListCassandraTables
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Cassandra table properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CassandraTableListResult"
              examples:
                CosmosDBCassandraTableList:
                  $ref: "#/components/examples/CosmosDBCassandraTableList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}":
    delete:
      description: Deletes an existing Azure Cosmos DB Cassandra table.
      operationId: CassandraResources_DeleteCassandraTable
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The Cassandra table delete operation will complete asynchronously.
        "204":
          description: The Cassandra table delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the Cassandra table under an existing Azure Cosmos DB database
        account.
      operationId: CassandraResources_GetCassandraTable
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Cassandra table property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CassandraTableGetResults"
              examples:
                CosmosDBCassandraTableGet:
                  $ref: "#/components/examples/CosmosDBCassandraTableGet"
    put:
      description: Create or update an Azure Cosmos DB Cassandra Table
      operationId: CassandraResources_CreateUpdateCassandraTable
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CassandraTableCreateUpdateParameters"
        description: The parameters to provide for the current Cassandra Table.
        required: true
      responses:
        "200":
          description: The Cassandra Table create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CassandraTableGetResults"
              examples:
                CosmosDBCassandraTableCreateUpdate:
                  $ref: "#/components/examples/CosmosDBCassandraTableCreateUpdate"
        "202":
          description: The Cassandra Table create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the Cassandra table under an existing Azure
        Cosmos DB database account with the provided name.
      operationId: CassandraResources_GetCassandraTableThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the Cassandra table was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBCassandraTableThroughputGet:
                  $ref: "#/components/examples/CosmosDBCassandraTableThroughputGet"
    put:
      description: Update RUs per second of an Azure Cosmos DB Cassandra table
      operationId: CassandraResources_UpdateCassandraTableThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The RUs per second of the parameters to provide for the current
          Cassandra table.
        required: true
      responses:
        "200":
          description: The RUs per second of the Cassandra table update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBCassandraTableThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBCassandraTableThroughputUpda\
                    te"
        "202":
          description: The RUs per second of the Cassandra table update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the Cassandra Keyspace under an existing
        Azure Cosmos DB database account with the provided name.
      operationId: CassandraResources_GetCassandraKeyspaceThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the Cassandra Keyspace was retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBCassandraKeyspaceThroughputGet:
                  $ref: "#/components/examples/CosmosDBCassandraKeyspaceThroughputG\
                    et"
    put:
      description: Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
      operationId: CassandraResources_UpdateCassandraKeyspaceThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/keyspaceNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The RUs per second of the parameters to provide for the current
          Cassandra Keyspace.
        required: true
      responses:
        "200":
          description: The RUs per second of the Cassandra Keyspace update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBCassandraKeyspaceThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBCassandraKeyspaceThroughputU\
                    pdate"
        "202":
          description: The RUs per second of the Cassandra Keyspace update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions":
    get:
      description: Retrieves metric definitions for the given collection.
      operationId: Collection_ListMetricDefinitions
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The metric definitions for the collection were retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricDefinitionsListResult"
              examples:
                CosmosDBCollectionGetMetricDefinitions:
                  $ref: "#/components/examples/CosmosDBCollectionGetMetricDefinitio\
                    ns"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        database account and collection.
      operationId: Collection_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The metrics for the database account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricListResult"
              examples:
                CosmosDBCollectionGetMetrics:
                  $ref: "#/components/examples/CosmosDBCollectionGetMetrics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        partition key range id.
      operationId: PartitionKeyRangeId_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/partitionKeyRangeIdParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The partition-level metrics for the partition key range id were
            retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        collection, split by partition.
      operationId: CollectionPartition_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The partition-level metrics for the collection were retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages":
    get:
      description: Retrieves the usages (most recent storage data) for the given
        collection, split by partition.
      operationId: CollectionPartition_ListUsages
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/usageFilterParameter"
      responses:
        "200":
          description: The usages for the collection, per partition were retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionUsagesResult"
              examples:
                CosmosDBCollectionGetUsages:
                  $ref: "#/components/examples/CosmosDBCollectionGetUsages"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages":
    get:
      description: Retrieves the usages (most recent storage data) for the given collection.
      operationId: Collection_ListUsages
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/usageFilterParameter"
      responses:
        "200":
          description: The usages for the collection were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagesResult"
              examples:
                CosmosDBCollectionGetUsages:
                  $ref: "#/components/examples/CosmosDBCollectionGetUsages"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions":
    get:
      description: Retrieves metric definitions for the given database.
      operationId: Database_ListMetricDefinitions
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The metric definitions for the database were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricDefinitionsListResult"
              examples:
                CosmosDBDatabaseGetMetricDefinitions:
                  $ref: "#/components/examples/CosmosDBDatabaseGetMetricDefinitions"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        database account and database.
      operationId: Database_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The metrics for the database account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricListResult"
              examples:
                CosmosDBDatabaseGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseGetMetrics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages":
    get:
      description: Retrieves the usages (most recent data) for the given database.
      operationId: Database_ListUsages
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/usageFilterParameter"
      responses:
        "200":
          description: The usages for the database were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagesResult"
              examples:
                CosmosDBDatabaseGetUsages:
                  $ref: "#/components/examples/CosmosDBDatabaseGetUsages"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange":
    post:
      description: Changes the failover priority for the Azure Cosmos DB database account.
        A failover priority of 0 indicates a write region. The maximum value for
        a failover priority = (total number of regions - 1). Failover priority
        values must be unique for each of the regions in which the database
        account exists.
      operationId: DatabaseAccounts_FailoverPriorityChange
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailoverPolicies"
        description: The new failover policies for the database account.
        required: true
      responses:
        "202":
          description: Accepted. The failover policy change operation will complete
            asynchronously.
        "204":
          description: No Content
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases":
    get:
      description: Lists the Gremlin databases under an existing Azure Cosmos DB database
        account.
      operationId: GremlinResources_ListGremlinDatabases
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Gremlin database properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GremlinDatabaseListResult"
              examples:
                CosmosDBGremlinDatabaseList:
                  $ref: "#/components/examples/CosmosDBGremlinDatabaseList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}":
    delete:
      description: Deletes an existing Azure Cosmos DB Gremlin database.
      operationId: GremlinResources_DeleteGremlinDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The Gremlin database delete operation will complete asynchronously.
        "204":
          description: The Gremlin database delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the Gremlin databases under an existing Azure Cosmos DB database
        account with the provided name.
      operationId: GremlinResources_GetGremlinDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Gremlin database property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GremlinDatabaseGetResults"
              examples:
                CosmosDBGremlinDatabaseGet:
                  $ref: "#/components/examples/CosmosDBGremlinDatabaseGet"
    put:
      description: Create or update an Azure Cosmos DB Gremlin database
      operationId: GremlinResources_CreateUpdateGremlinDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GremlinDatabaseCreateUpdateParameters"
        description: The parameters to provide for the current Gremlin database.
        required: true
      responses:
        "200":
          description: The Gremlin database create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GremlinDatabaseGetResults"
              examples:
                CosmosDBGremlinDatabaseCreateUpdate:
                  $ref: "#/components/examples/CosmosDBGremlinDatabaseCreateUpdate"
        "202":
          description: The Gremlin database create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs":
    get:
      description: Lists the Gremlin graph under an existing Azure Cosmos DB database
        account.
      operationId: GremlinResources_ListGremlinGraphs
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Gremlin graph properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GremlinGraphListResult"
              examples:
                CosmosDBGremlinGraphList:
                  $ref: "#/components/examples/CosmosDBGremlinGraphList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}":
    delete:
      description: Deletes an existing Azure Cosmos DB Gremlin graph.
      operationId: GremlinResources_DeleteGremlinGraph
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/graphNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The Gremlin graph delete operation will complete asynchronously.
        "204":
          description: The Gremlin graph delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the Gremlin graph under an existing Azure Cosmos DB database
        account.
      operationId: GremlinResources_GetGremlinGraph
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/graphNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Gremlin graph property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GremlinGraphGetResults"
              examples:
                CosmosDBGremlinGraphGet:
                  $ref: "#/components/examples/CosmosDBGremlinGraphGet"
    put:
      description: Create or update an Azure Cosmos DB Gremlin graph
      operationId: GremlinResources_CreateUpdateGremlinGraph
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/graphNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GremlinGraphCreateUpdateParameters"
        description: The parameters to provide for the current Gremlin graph.
        required: true
      responses:
        "200":
          description: The Gremlin graph create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GremlinGraphGetResults"
              examples:
                CosmosDBGremlinGraphCreateUpdate:
                  $ref: "#/components/examples/CosmosDBGremlinGraphCreateUpdate"
        "202":
          description: The Gremlin graph create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default":
    get:
      description: Gets the Gremlin graph throughput under an existing Azure Cosmos DB
        database account with the provided name.
      operationId: GremlinResources_GetGremlinGraphThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/graphNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the Gremlin graph was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBGremlinGraphThroughputGet:
                  $ref: "#/components/examples/CosmosDBGremlinGraphThroughputGet"
    put:
      description: Update RUs per second of an Azure Cosmos DB Gremlin graph
      operationId: GremlinResources_UpdateGremlinGraphThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/graphNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The RUs per second of the parameters to provide for the current
          Gremlin graph.
        required: true
      responses:
        "200":
          description: The RUs per second of the Gremlin graph update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBGremlinGraphThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBGremlinGraphThroughputUpdate"
        "202":
          description: The RUs per second of the Gremlin graph update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the Gremlin database under an existing Azure
        Cosmos DB database account with the provided name.
      operationId: GremlinResources_GetGremlinDatabaseThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the Gremlin database was retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBGremlinDatabaseThroughputGet:
                  $ref: "#/components/examples/CosmosDBGremlinDatabaseThroughputGet"
    put:
      description: Update RUs per second of an Azure Cosmos DB Gremlin database
      operationId: GremlinResources_UpdateGremlinDatabaseThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The RUs per second of the parameters to provide for the current
          Gremlin database.
        required: true
      responses:
        "200":
          description: The RUs per second of the Gremlin database update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBGremlinDatabaseThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBGremlinDatabaseThroughputUpd\
                    ate"
        "202":
          description: The RUs per second of the Gremlin database update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings":
    post:
      description: Lists the connection strings for the specified Azure Cosmos DB database
        account.
      operationId: DatabaseAccounts_ListConnectionStrings
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountListConnectionStringsRes\
                  ult"
              examples:
                CosmosDBDatabaseAccountListConnectionStrings:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountListConnectio\
                    nStrings"
                CosmosDBDatabaseAccountListConnectionStringsMongo:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountListConnectio\
                    nStringsMongo"
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys":
    post:
      description: Lists the access keys for the specified Azure Cosmos DB database account.
      operationId: DatabaseAccounts_ListKeys
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountListKeysResult"
              examples:
                CosmosDBDatabaseAccountListKeys:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountListKeys"
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions":
    get:
      description: Retrieves metric definitions for the given database account.
      operationId: DatabaseAccounts_ListMetricDefinitions
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The metric definitions for the database account were retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricDefinitionsListResult"
              examples:
                CosmosDBDatabaseAccountGetMetricDefinitions:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountGetMetricDefi\
                    nitions"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        database account.
      operationId: DatabaseAccounts_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The metrics for the database account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricListResult"
              examples:
                CosmosDBDatabaseAccountGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountGetMetrics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases":
    get:
      description: Lists the MongoDB databases under an existing Azure Cosmos DB database
        account.
      operationId: MongoDBResources_ListMongoDBDatabases
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The MongoDB database properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoDBDatabaseListResult"
              examples:
                CosmosDBMongoDBDatabaseList:
                  $ref: "#/components/examples/CosmosDBMongoDBDatabaseList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}":
    delete:
      description: Deletes an existing Azure Cosmos DB MongoDB database.
      operationId: MongoDBResources_DeleteMongoDBDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The MongoDB database delete operation will complete asynchronously.
        "204":
          description: The MongoDB database delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the MongoDB databases under an existing Azure Cosmos DB database
        account with the provided name.
      operationId: MongoDBResources_GetMongoDBDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The MongoDB database property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoDBDatabaseGetResults"
              examples:
                CosmosDBMongoDBDatabaseGet:
                  $ref: "#/components/examples/CosmosDBMongoDBDatabaseGet"
    put:
      description: Create or updates Azure Cosmos DB MongoDB database
      operationId: MongoDBResources_CreateUpdateMongoDBDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MongoDBDatabaseCreateUpdateParameters"
        description: The parameters to provide for the current MongoDB database.
        required: true
      responses:
        "200":
          description: The MongoDB database create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoDBDatabaseGetResults"
              examples:
                CosmosDBMongoDBDatabaseCreateUpdate:
                  $ref: "#/components/examples/CosmosDBMongoDBDatabaseCreateUpdate"
        "202":
          description: The MongoDB database create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections":
    get:
      description: Lists the MongoDB collection under an existing Azure Cosmos DB database
        account.
      operationId: MongoDBResources_ListMongoDBCollections
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The MongoDB collection properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoDBCollectionListResult"
              examples:
                CosmosDBMongoDBCollectionList:
                  $ref: "#/components/examples/CosmosDBMongoDBCollectionList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}":
    delete:
      description: Deletes an existing Azure Cosmos DB MongoDB Collection.
      operationId: MongoDBResources_DeleteMongoDBCollection
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/collectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The MongoDB collection delete operation will complete asynchronously.
        "204":
          description: The MongoDB collection delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the MongoDB collection under an existing Azure Cosmos DB database
        account.
      operationId: MongoDBResources_GetMongoDBCollection
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/collectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The MongoDB collection property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoDBCollectionGetResults"
              examples:
                CosmosDBMongoDBCollectionGet:
                  $ref: "#/components/examples/CosmosDBMongoDBCollectionGet"
    put:
      description: Create or update an Azure Cosmos DB MongoDB Collection
      operationId: MongoDBResources_CreateUpdateMongoDBCollection
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/collectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MongoDBCollectionCreateUpdateParameters"
        description: The parameters to provide for the current MongoDB Collection.
        required: true
      responses:
        "200":
          description: The MongoDB Collection create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MongoDBCollectionGetResults"
              examples:
                CosmosDBMongoDBCollectionCreateUpdate:
                  $ref: "#/components/examples/CosmosDBMongoDBCollectionCreateUpdate"
        "202":
          description: The MongoDB Collection create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the MongoDB collection under an existing
        Azure Cosmos DB database account with the provided name.
      operationId: MongoDBResources_GetMongoDBCollectionThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/collectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the MongoDB collection was retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBMongoDBCollectionThroughputGet:
                  $ref: "#/components/examples/CosmosDBMongoDBCollectionThroughputG\
                    et"
    put:
      description: Update the RUs per second of an Azure Cosmos DB MongoDB collection
      operationId: MongoDBResources_UpdateMongoDBCollectionThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/collectionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The RUs per second of the parameters to provide for the current
          MongoDB collection.
        required: true
      responses:
        "200":
          description: The RUs per second of the MongoDB collection update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBMongoDBCollectionThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBMongoDBCollectionThroughputU\
                    pdate"
        "202":
          description: The RUs per second of the MongoDB collection update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the MongoDB database under an existing Azure
        Cosmos DB database account with the provided name.
      operationId: MongoDBResources_GetMongoDBDatabaseThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the MongoDB database was retrieved
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBMongoDBDatabaseThroughputGet:
                  $ref: "#/components/examples/CosmosDBMongoDBDatabaseThroughputGet"
    put:
      description: Update RUs per second of the an Azure Cosmos DB MongoDB database
      operationId: MongoDBResources_UpdateMongoDBDatabaseThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The RUs per second of the parameters to provide for the current
          MongoDB database.
        required: true
      responses:
        "200":
          description: The RUs per second of the MongoDB database update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBMongoDBDatabaseThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBMongoDBDatabaseThroughputUpd\
                    ate"
        "202":
          description: The RUs per second of the MongoDB database update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion":
    post:
      description: Offline the specified region for the specified Azure Cosmos DB database
        account.
      operationId: DatabaseAccounts_OfflineRegion
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegionForOnlineOffline"
        description: Cosmos DB region to offline for the database account.
        required: true
      responses:
        "200":
          description: The offline region operation is completed successfully.
        "202":
          description: Accepted. The offline region operation will complete asynchronously.
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion":
    post:
      description: Online the specified region for the specified Azure Cosmos DB database
        account.
      operationId: DatabaseAccounts_OnlineRegion
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegionForOnlineOffline"
        description: Cosmos DB region to online for the database account.
        required: true
      responses:
        "200":
          description: The online region operation is completed successfully.
        "202":
          description: Accepted. The online region operation will complete asynchronously.
        default:
          description: Error response describing why the operation failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        database account. This url is only for PBS and Replication Latency data
      operationId: Percentile_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The percentile metrics for the account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PercentileMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys":
    get:
      description: Lists the read-only access keys for the specified Azure Cosmos DB
        database account.
      operationId: DatabaseAccounts_GetReadOnlyKeys
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountListReadOnlyKeysResult"
              examples:
                CosmosDBDatabaseAccountListReadOnlyKeys:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountListReadOnlyK\
                    eys"
    post:
      description: Lists the read-only access keys for the specified Azure Cosmos DB
        database account.
      operationId: DatabaseAccounts_ListReadOnlyKeys
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseAccountListReadOnlyKeysResult"
              examples:
                CosmosDBDatabaseAccountListReadOnlyKeys:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountListReadOnlyK\
                    eys"
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey":
    post:
      description: Regenerates an access key for the specified Azure Cosmos DB database
        account.
      operationId: DatabaseAccounts_RegenerateKey
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseAccountRegenerateKeyParameters"
        description: The name of the key to regenerate.
        required: true
      responses:
        "200":
          description: OK
        "202":
          description: Accepted. The regenerate key operation will complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        database account, collection and region.
      operationId: CollectionRegion_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/regionParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The metrics for the database account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricListResult"
              examples:
                CosmosDBRegionCollectionGetMetrics:
                  $ref: "#/components/examples/CosmosDBRegionCollectionGetMetrics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        partition key range id and region.
      operationId: PartitionKeyRangeIdRegion_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/regionParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/partitionKeyRangeIdParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The partition-level metrics for the partition key range id and
            region were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        collection and region, split by partition.
      operationId: CollectionPartitionRegion_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/regionParameter"
        - $ref: "#/components/parameters/databaseRidParameter"
        - $ref: "#/components/parameters/collectionRidParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The partition-level metrics for the collection and region were
            retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        database account and region.
      operationId: DatabaseAccountRegion_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/regionParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The metrics for the database account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        account, source and target region. This url is only for PBS and
        Replication Latency data
      operationId: PercentileSourceTarget_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/sourceRegionParameter"
        - $ref: "#/components/parameters/targetRegionParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The percentile metrics for the account, source and target regions
            were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PercentileMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases":
    get:
      description: Lists the SQL databases under an existing Azure Cosmos DB database
        account.
      operationId: SqlResources_ListSqlDatabases
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL database properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlDatabaseListResult"
              examples:
                CosmosDBSqlDatabaseList:
                  $ref: "#/components/examples/CosmosDBSqlDatabaseList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}":
    delete:
      description: Deletes an existing Azure Cosmos DB SQL database.
      operationId: SqlResources_DeleteSqlDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The SQL database delete operation will complete asynchronously.
        "204":
          description: The SQL database delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL database under an existing Azure Cosmos DB database account
        with the provided name.
      operationId: SqlResources_GetSqlDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL database property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlDatabaseGetResults"
              examples:
                CosmosDBSqlDatabaseGet:
                  $ref: "#/components/examples/CosmosDBSqlDatabaseGet"
    put:
      description: Create or update an Azure Cosmos DB SQL database
      operationId: SqlResources_CreateUpdateSqlDatabase
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SqlDatabaseCreateUpdateParameters"
        description: The parameters to provide for the current SQL database.
        required: true
      responses:
        "200":
          description: The SQL database create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlDatabaseGetResults"
              examples:
                CosmosDBSqlDatabaseCreateUpdate:
                  $ref: "#/components/examples/CosmosDBSqlDatabaseCreateUpdate"
        "202":
          description: The SQL database create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers":
    get:
      description: Lists the SQL container under an existing Azure Cosmos DB database
        account.
      operationId: SqlResources_ListSqlContainers
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL container properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlContainerListResult"
              examples:
                CosmosDBSqlContainerList:
                  $ref: "#/components/examples/CosmosDBSqlContainerList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}":
    delete:
      description: Deletes an existing Azure Cosmos DB SQL container.
      operationId: SqlResources_DeleteSqlContainer
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The SQL container delete operation will complete asynchronously.
        "204":
          description: The SQL container delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL container under an existing Azure Cosmos DB database
        account.
      operationId: SqlResources_GetSqlContainer
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL container property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlContainerGetResults"
              examples:
                CosmosDBSqlContainerGet:
                  $ref: "#/components/examples/CosmosDBSqlContainerGet"
    put:
      description: Create or update an Azure Cosmos DB SQL container
      operationId: SqlResources_CreateUpdateSqlContainer
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SqlContainerCreateUpdateParameters"
        description: The parameters to provide for the current SQL container.
        required: true
      responses:
        "200":
          description: The SQL container create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlContainerGetResults"
              examples:
                CosmosDBSqlContainerCreateUpdate:
                  $ref: "#/components/examples/CosmosDBSqlContainerCreateUpdate"
        "202":
          description: The SQL container create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/":
    get:
      description: Lists the SQL storedProcedure under an existing Azure Cosmos DB database
        account.
      operationId: SqlResources_ListSqlStoredProcedures
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL stored procedure properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlStoredProcedureListResult"
              examples:
                CosmosDBSqlStoredProcedureList:
                  $ref: "#/components/examples/CosmosDBSqlStoredProcedureList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}":
    delete:
      description: Deletes an existing Azure Cosmos DB SQL storedProcedure.
      operationId: SqlResources_DeleteSqlStoredProcedure
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/storedProcedureNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The SQL storedProcedure delete operation will complete
            asynchronously.
        "204":
          description: The SQL storedProcedure delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL storedProcedure under an existing Azure Cosmos DB database
        account.
      operationId: SqlResources_GetSqlStoredProcedure
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/storedProcedureNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL storedProcedure property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlStoredProcedureGetResults"
              examples:
                CosmosDBSqlStoredProcedureGet:
                  $ref: "#/components/examples/CosmosDBSqlStoredProcedureGet"
    put:
      description: Create or update an Azure Cosmos DB SQL storedProcedure
      operationId: SqlResources_CreateUpdateSqlStoredProcedure
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/storedProcedureNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SqlStoredProcedureCreateUpdateParameters"
        description: The parameters to provide for the current SQL storedProcedure.
        required: true
      responses:
        "200":
          description: The SQL storedProcedure create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlStoredProcedureGetResults"
              examples:
                CosmosDBSqlStoredProcedureCreateUpdate:
                  $ref: "#/components/examples/CosmosDBSqlStoredProcedureCreateUpda\
                    te"
        "202":
          description: The SQL storedProcedure create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the SQL container under an existing Azure
        Cosmos DB database account.
      operationId: SqlResources_GetSqlContainerThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the SQL container was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBSqlContainerThroughputGet:
                  $ref: "#/components/examples/CosmosDBSqlContainerThroughputGet"
    put:
      description: Update RUs per second of an Azure Cosmos DB SQL container
      operationId: SqlResources_UpdateSqlContainerThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The parameters to provide for the RUs per second of the current SQL
          container.
        required: true
      responses:
        "200":
          description: The RUs per second of the SQL container update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBSqlContainerThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBSqlContainerThroughputUpdate"
        "202":
          description: The RUs per second of the SQL container update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/":
    get:
      description: Lists the SQL trigger under an existing Azure Cosmos DB database account.
      operationId: SqlResources_ListSqlTriggers
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL trigger properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlTriggerListResult"
              examples:
                CosmosDBSqlTriggerList:
                  $ref: "#/components/examples/CosmosDBSqlTriggerList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}":
    delete:
      description: Deletes an existing Azure Cosmos DB SQL trigger.
      operationId: SqlResources_DeleteSqlTrigger
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/triggerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The SQL trigger delete operation will complete asynchronously.
        "204":
          description: The SQL trigger delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL trigger under an existing Azure Cosmos DB database account.
      operationId: SqlResources_GetSqlTrigger
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/triggerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL trigger property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlTriggerGetResults"
              examples:
                CosmosDBSqlTriggerGet:
                  $ref: "#/components/examples/CosmosDBSqlTriggerGet"
    put:
      description: Create or update an Azure Cosmos DB SQL trigger
      operationId: SqlResources_CreateUpdateSqlTrigger
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/triggerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SqlTriggerCreateUpdateParameters"
        description: The parameters to provide for the current SQL trigger.
        required: true
      responses:
        "200":
          description: The SQL trigger create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlTriggerGetResults"
              examples:
                CosmosDBSqlTriggerCreateUpdate:
                  $ref: "#/components/examples/CosmosDBSqlTriggerCreateUpdate"
        "202":
          description: The SQL trigger create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/":
    get:
      description: Lists the SQL userDefinedFunction under an existing Azure Cosmos DB
        database account.
      operationId: SqlResources_ListSqlUserDefinedFunctions
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL userDefinedFunction properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlUserDefinedFunctionListResult"
              examples:
                CosmosDBSqlUserDefinedFunctionList:
                  $ref: "#/components/examples/CosmosDBSqlUserDefinedFunctionList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}":
    delete:
      description: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
      operationId: SqlResources_DeleteSqlUserDefinedFunction
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/userDefinedFunctionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The SQL userDefinedFunction delete operation will complete
            asynchronously.
        "204":
          description: The SQL userDefinedFunction delete operation was completed
            successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the SQL userDefinedFunction under an existing Azure Cosmos DB
        database account.
      operationId: SqlResources_GetSqlUserDefinedFunction
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/userDefinedFunctionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The SQL userDefinedFunction property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlUserDefinedFunctionGetResults"
              examples:
                CosmosDBSqlUserDefinedFunctionGet:
                  $ref: "#/components/examples/CosmosDBSqlUserDefinedFunctionGet"
    put:
      description: Create or update an Azure Cosmos DB SQL userDefinedFunction
      operationId: SqlResources_CreateUpdateSqlUserDefinedFunction
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/containerNameParameter"
        - $ref: "#/components/parameters/userDefinedFunctionNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SqlUserDefinedFunctionCreateUpdateParamet\
                ers"
        description: The parameters to provide for the current SQL userDefinedFunction.
        required: true
      responses:
        "200":
          description: The SQL userDefinedFunction create or update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlUserDefinedFunctionGetResults"
              examples:
                CosmosDBSqlUserDefinedFunctionCreateUpdate:
                  $ref: "#/components/examples/CosmosDBSqlUserDefinedFunctionCreate\
                    Update"
        "202":
          description: The SQL userDefinedFunction create or update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the SQL database under an existing Azure
        Cosmos DB database account with the provided name.
      operationId: SqlResources_GetSqlDatabaseThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the SQL database was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBSqlDatabaseThroughputGet:
                  $ref: "#/components/examples/CosmosDBSqlDatabaseThroughputGet"
    put:
      description: Update RUs per second of an Azure Cosmos DB SQL database
      operationId: SqlResources_UpdateSqlDatabaseThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/databaseNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The parameters to provide for the RUs per second of the current SQL
          database.
        required: true
      responses:
        "200":
          description: The RUs per second of the SQL database update operation was
            completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBSqlDatabaseThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBSqlDatabaseThroughputUpdate"
        "202":
          description: The RUs per second of the SQL database update operation will
            complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables":
    get:
      description: Lists the Tables under an existing Azure Cosmos DB database account.
      operationId: TableResources_ListTables
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Table properties were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableListResult"
              examples:
                CosmosDBTableList:
                  $ref: "#/components/examples/CosmosDBTableList"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}":
    delete:
      description: Deletes an existing Azure Cosmos DB Table.
      operationId: TableResources_DeleteTable
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "202":
          description: The Table delete operation will complete asynchronously.
        "204":
          description: The Table delete operation was completed successfully.
      x-ms-long-running-operation: true
    get:
      description: Gets the Tables under an existing Azure Cosmos DB database account with
        the provided name.
      operationId: TableResources_GetTable
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The Table property was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableGetResults"
              examples:
                CosmosDBTableGet:
                  $ref: "#/components/examples/CosmosDBTableGet"
    put:
      description: Create or update an Azure Cosmos DB Table
      operationId: TableResources_CreateUpdateTable
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableCreateUpdateParameters"
        description: The parameters to provide for the current Table.
        required: true
      responses:
        "200":
          description: The Table create or update operation was completed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableGetResults"
              examples:
                CosmosDBTableReplace:
                  $ref: "#/components/examples/CosmosDBTableReplace"
        "202":
          description: The Table create or update operation will complete asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default":
    get:
      description: Gets the RUs per second of the Table under an existing Azure Cosmos DB
        database account with the provided name.
      operationId: TableResources_GetTableThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      responses:
        "200":
          description: The RUs per second of the Table was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBTableThroughputGet:
                  $ref: "#/components/examples/CosmosDBTableThroughputGet"
    put:
      description: Update RUs per second of an Azure Cosmos DB Table
      operationId: TableResources_UpdateTableThroughput
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/tableNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThroughputSettingsUpdateParameters"
        description: The parameters to provide for the RUs per second of the current Table.
        required: true
      responses:
        "200":
          description: The RUs per second of the Table update operation was completed
            successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputSettingsGetResults"
              examples:
                CosmosDBTableThroughputUpdate:
                  $ref: "#/components/examples/CosmosDBTableThroughputUpdate"
        "202":
          description: The RUs per second of the Table update operation will complete
            asynchronously.
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics":
    get:
      description: Retrieves the metrics determined by the given filter for the given
        account target region. This url is only for PBS and Replication Latency
        data
      operationId: PercentileTarget_ListMetrics
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/targetRegionParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/filterParameter"
      responses:
        "200":
          description: The percentile metrics for the account and target regions were
            retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PercentileMetricListResult"
              examples:
                CosmosDBDatabaseAccountRegionGetMetrics:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountRegionGetMetr\
                    ics"
      x-ms-pageable: {}
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages":
    get:
      description: Retrieves the usages (most recent data) for the given database account.
      operationId: DatabaseAccounts_ListUsages
      parameters:
        - $ref: "#/components/parameters/subscriptionIdParameter"
        - $ref: "#/components/parameters/resourceGroupNameParameter"
        - $ref: "#/components/parameters/accountNameParameter"
        - $ref: "#/components/parameters/apiVersionParameter"
        - $ref: "#/components/parameters/usageFilterParameter"
      responses:
        "200":
          description: The usages for the database account were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsagesResult"
              examples:
                CosmosDBDatabaseAccountGetUsages:
                  $ref: "#/components/examples/CosmosDBDatabaseAccountGetUsages"
      x-ms-pageable: {}
servers:
  - url: https://management.azure.com
components:
  examples:
    CosmosDBOperationsList:
      value:
        value:
          - display:
              Description: description
              Operation: operationName
              Provider: providerName
              Resource: resourceName
            name: operationName
    CosmosDBDatabaseAccountList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
            kind: GlobalDocumentDB
            location: West US
            name: ddb1
            properties:
              consistencyPolicy:
                defaultConsistencyLevel: Session
                maxIntervalInSeconds: 5
                maxStalenessPrefix: 100
              databaseAccountOfferType: Standard
              documentEndpoint: https://ddb1.documents.azure.com:443/
              failoverPolicies:
                - failoverPriority: 0
                  id: ddb1-eastus
                  locationName: East US
              ipRangeFilter: ""
              provisioningState: Succeeded
              readLocations:
                - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
                  failoverPriority: 0
                  id: ddb1-eastus
                  locationName: East US
                  provisioningState: Succeeded
              writeLocations:
                - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
                  failoverPriority: 0
                  id: ddb1-eastus
                  locationName: East US
                  provisioningState: Succeeded
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts
    CosmosDBDatabaseAccountListByResourceGroup:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
            kind: GlobalDocumentDB
            location: West US
            name: ddb1
            properties:
              consistencyPolicy:
                defaultConsistencyLevel: Session
                maxIntervalInSeconds: 5
                maxStalenessPrefix: 100
              databaseAccountOfferType: Standard
              documentEndpoint: https://ddb1.documents.azure.com:443/
              failoverPolicies:
                - failoverPriority: 0
                  id: ddb1-eastus
                  locationName: East US
              ipRangeFilter: ""
              provisioningState: Succeeded
              readLocations:
                - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
                  failoverPriority: 0
                  id: ddb1-eastus
                  locationName: East US
                  provisioningState: Succeeded
              writeLocations:
                - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
                  failoverPriority: 0
                  id: ddb1-eastus
                  locationName: East US
                  provisioningState: Succeeded
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts
    CosmosDBDatabaseAccountGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
        kind: GlobalDocumentDB
        location: West US
        name: ddb1
        properties:
          consistencyPolicy:
            defaultConsistencyLevel: Session
            maxIntervalInSeconds: 5
            maxStalenessPrefix: 100
          databaseAccountOfferType: Standard
          documentEndpoint: https://ddb1.documents.azure.com:443/
          failoverPolicies:
            - failoverPriority: 0
              id: ddb1-eastus
              locationName: East US
          ipRangeFilter: ""
          isVirtualNetworkFilterEnabled: false
          provisioningState: Succeeded
          readLocations:
            - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
              failoverPriority: 0
              id: ddb1-eastus
              locationName: East US
              provisioningState: Succeeded
          virtualNetworkRules: []
          writeLocations:
            - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
              failoverPriority: 0
              id: ddb1-eastus
              locationName: East US
              provisioningState: Succeeded
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts
    CosmosDBDatabaseAccountPatch:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
        kind: GlobalDocumentDB
        location: West US
        name: ddb1
        properties:
          consistencyPolicy:
            defaultConsistencyLevel: Session
            maxIntervalInSeconds: 5
            maxStalenessPrefix: 100
          databaseAccountOfferType: Standard
          documentEndpoint: https://ddb1.documents.azure.com:443/
          failoverPolicies:
            - failoverPriority: 0
              id: ddb1-eastus
              locationName: East US
          ipRangeFilter: ""
          provisioningState: Succeeded
          readLocations:
            - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
              failoverPriority: 0
              id: ddb1-eastus
              locationName: East US
              provisioningState: Succeeded
          writeLocations:
            - documentEndpoint: https://ddb1-eastus.documents.azure.com:443/
              failoverPriority: 0
              id: ddb1-eastus
              locationName: East US
              provisioningState: Succeeded
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts
    CosmosDBDatabaseAccountCreateMax:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
        kind: GlobalDocumentDB
        location: West US
        name: ddb1
        properties:
          consistencyPolicy:
            defaultConsistencyLevel: BoundedStaleness
            maxIntervalInSeconds: 10
            maxStalenessPrefix: 200
          databaseAccountOfferType: Standard
          failoverPolicies:
            - failoverPriority: 0
              id: ddb1-southcentralus
              locationName: South Central US
            - failoverPriority: 1
              id: ddb1-eastus
              locationName: East US
          ipRangeFilter: 10.10.10.10
          isVirtualNetworkFilterEnabled: true
          provisioningState: Initializing
          readLocations:
            - failoverPriority: 0
              id: ddb1-southcentralus
              isZoneRedundant: false
              locationName: South Central US
              provisioningState: Initializing
            - failoverPriority: 1
              id: ddb1-eastus
              isZoneRedundant: false
              locationName: East US
              provisioningState: Initializing
          virtualNetworkRules:
            - id: /subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1
          writeLocations:
            - failoverPriority: 0
              id: ddb1-southcentralus
              isZoneRedundant: false
              locationName: South Central US
              provisioningState: Initializing
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts
    CosmosDBDatabaseAccountCreateMin:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
        kind: GlobalDocumentDB
        location: West US
        name: ddb1
        properties:
          consistencyPolicy:
            defaultConsistencyLevel: Session
            maxIntervalInSeconds: 5
            maxStalenessPrefix: 100
          databaseAccountOfferType: Standard
          failoverPolicies:
            - failoverPriority: 0
              id: ddb1-southcentralus
              locationName: South Central US
          ipRangeFilter: ""
          provisioningState: Initializing
          readLocations:
            - failoverPriority: 0
              id: ddb1-southcentralus
              isZoneRedundant: false
              locationName: South Central US
              provisioningState: Initializing
          writeLocations:
            - failoverPriority: 0
              id: ddb1-southcentralus
              isZoneRedundant: false
              locationName: South Central US
              provisioningState: Initializing
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts
    CosmosDBCassandraKeyspaceList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName
            location: West US
            name: keyspaceName
            properties:
              id: keyspaceName
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces
    CosmosDBCassandraKeyspaceGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName
        location: West US
        name: keyspaceName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          id: keyspaceName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces
    CosmosDBCassandraKeyspaceCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName
        location: West US
        name: keyspaceName
        properties:
          id: keyspaceName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces
    CosmosDBCassandraTableList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName
            location: West US
            name: tableName
            properties:
              defaultTtl: 100
              id: tableName
              schema:
                clusterKeys:
                  - name: columnA
                    orderBy: Asc
                columns:
                  - name: columnA
                    type: Ascii
                partitionKeys:
                  - name: columnA
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables
    CosmosDBCassandraTableGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName
        location: West US
        name: tableName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          defaultTtl: 100
          id: tableName
          schema:
            clusterKeys:
              - name: columnA
                orderBy: Asc
            columns:
              - name: columnA
                type: Ascii
            partitionKeys:
              - name: columnA
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables
    CosmosDBCassandraTableCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName
        location: West US
        name: tableName
        properties:
          defaultTtl: 100
          id: tableName
          schema:
            clusterKeys:
              - name: columnA
                orderBy: Asc
            columns:
              - name: columnA
                type: Ascii
            partitionKeys:
              - name: columnA
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables
    CosmosDBCassandraTableThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables/throughputSettings
    CosmosDBCassandraTableThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName/throughputSettings/default
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables/throughputSettings
    CosmosDBCassandraKeyspaceThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings
    CosmosDBCassandraKeyspaceThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings
    CosmosDBCollectionGetMetricDefinitions:
      value:
        value:
          - metricAvailabilities:
              - retention: P2D
                timeGrain: PT5M
              - retention: P14D
                timeGrain: PT1H
              - retention: P60D
                timeGrain: P1D
            name:
              localizedValue: Total Requests
              value: Total Requests
            primaryAggregationType: Total
            resourceUri: /subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
            unit: Count
    CosmosDBCollectionGetMetrics:
      value:
        value:
          - endTime: 2017-11-20T00:13:55.2780000Z
            metricValues:
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:53:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:58:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:03:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:08:55.2780000Z
                total: 0
            name:
              localizedValue: Total Requests
              value: Total Requests
            startTime: 2017-11-19T23:53:55.2780000Z
            timeGrain: PT5M
            unit: Count
    CosmosDBDatabaseAccountRegionGetMetrics:
      value:
        value:
          - endTime: 2017-11-20T00:13:55.2780000Z
            metricValues:
              - P10: 1.11
                P25: 2.5
                P50: 4.34
                P75: 5.2
                P90: 6.77
                P95: 7.1
                P99: 8.3
                timestamp: 2017-11-19T23:53:55.2780000Z
            name:
              localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-East US
              value: Probabilistic Bounded Staleness-S-West Central US-T-East US
            startTime: 2017-11-19T23:53:55.2780000Z
            timeGrain: PT5M
            unit: Milliseconds
          - endTime: 2017-11-20T00:13:55.2780000Z
            metricValues:
              - P10: 1.11
                P25: 2.5
                P50: 4.34
                P75: 5.2
                P90: 6.77
                P95: 7.1
                P99: 8.3
                timestamp: 2017-11-19T23:53:55.2780000Z
            name:
              localizedValue: Probabilistic Bounded Staleness-S-West Central US-T-West US
              value: Probabilistic Bounded Staleness-S-West US-T-East US
            startTime: 2017-11-19T23:53:55.2780000Z
            timeGrain: PT5M
            unit: Milliseconds
    CosmosDBCollectionGetUsages:
      value:
        value:
          - currentValue: 0
            limit: 10737418240
            name:
              localizedValue: Storage
              value: Storage
            quotaPeriod: P1D
            unit: Bytes
    CosmosDBDatabaseGetMetricDefinitions:
      value:
        value:
          - metricAvailabilities:
              - retention: P2D
                timeGrain: PT5M
              - retention: P14D
                timeGrain: PT1H
              - retention: P60D
                timeGrain: P1D
            name:
              localizedValue: Total Requests
              value: Total Requests
            primaryAggregationType: Total
            resourceUri: /subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
            unit: Count
    CosmosDBDatabaseGetMetrics:
      value:
        value:
          - endTime: 2017-11-20T00:13:55.2780000Z
            metricValues:
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:53:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:58:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:03:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:08:55.2780000Z
                total: 0
            name:
              localizedValue: Total Requests
              value: Total Requests
            startTime: 2017-11-19T23:53:55.2780000Z
            timeGrain: PT5M
            unit: Count
    CosmosDBDatabaseGetUsages:
      value:
        value:
          - currentValue: 0
            limit: 10737418240
            name:
              localizedValue: Storage
              value: Storage
            quotaPeriod: P1D
            unit: Bytes
    CosmosDBGremlinDatabaseList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName
            location: West US
            name: databaseName
            properties:
              _etag: '"00000a00-0000-0000-0000-56672f920000"'
              _rid: CqNBAA==
              _ts: 1449602962
              id: databaseName
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases
    CosmosDBGremlinDatabaseGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName
        location: West US
        name: databaseName
        properties:
          _etag: '"00000a00-0000-0000-0000-56672f920000"'
          _rid: CqNBAA==
          _ts: 1449602962
          id: databaseName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases
    CosmosDBGremlinDatabaseCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName
        location: West US
        name: databaseName
        properties:
          _etag: '"00000a00-0000-0000-0000-56672f920000"'
          _rid: CqNBAA==
          _ts: 1449602962
          id: databaseName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases
    CosmosDBGremlinGraphList:
      value:
        value:
          - id: testgrf
            name: testgrf
            properties:
              _etag: '"00005900-0000-0000-0000-56f9a2630000"'
              _rid: PD5DALigDgw=
              _ts: 1459200611
              conflictResolutionPolicy:
                conflictResolutionPath: /path
                mode: LastWriterWins
              defaultTtl: 100
              id: testgrf
              indexingPolicy:
                automatic: true
                excludedPaths: []
                includedPaths:
                  - indexes:
                      - dataType: String
                        kind: Range
                        precision: -1
                      - dataType: Number
                        kind: Range
                        precision: -1
                    path: /*
                indexingMode: Consistent
              partitionKey:
                kind: Hash
                paths:
                  - /AccountNumber
              uniqueKeyPolicy:
                uniqueKeys:
                  - paths:
                      - /testPath
            type: Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs
    CosmosDBGremlinGraphGet:
      value:
        id: graphName
        name: graphName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          conflictResolutionPolicy:
            conflictResolutionPath: /path
            mode: LastWriterWins
          defaultTtl: 100
          id: graphName
          indexingPolicy:
            automatic: true
            excludedPaths: []
            includedPaths:
              - indexes:
                  - dataType: String
                    kind: Range
                    precision: -1
                  - dataType: Number
                    kind: Range
                    precision: -1
                path: /*
            indexingMode: Consistent
          partitionKey:
            kind: Hash
            paths:
              - /AccountNumber
          uniqueKeyPolicy:
            uniqueKeys:
              - paths:
                  - /testPath
        type: Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs
    CosmosDBGremlinGraphCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/gremlinGraphs/graphName
        location: West US
        name: graphName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          conflictResolutionPolicy:
            conflictResolutionPath: /path
            mode: LastWriterWins
          defaultTtl: 100
          id: graphName
          indexingPolicy:
            automatic: true
            excludedPaths: []
            includedPaths:
              - indexes:
                  - dataType: String
                    kind: Range
                    precision: -1
                  - dataType: Number
                    kind: Range
                    precision: -1
                path: /*
            indexingMode: Consistent
          partitionKey:
            kind: Hash
            paths:
              - /AccountNumber
          uniqueKeyPolicy:
            uniqueKeys:
              - paths:
                  - /testPath
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/gremlinGraphs
    CosmosDBGremlinGraphThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/gremlinGraphs/graphName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings
    CosmosDBGremlinGraphThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/gremlinGraphs/graphName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings
    CosmosDBGremlinDatabaseThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings
    CosmosDBGremlinDatabaseThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings
    CosmosDBDatabaseAccountListConnectionStrings:
      value: {}
    CosmosDBDatabaseAccountListConnectionStringsMongo:
      value:
        connectionStrings:
          - connectionString: connection-string
            description: Name of the connection string
    CosmosDBDatabaseAccountListKeys:
      value:
        primaryMasterKey: primaryMasterKey
        primaryReadonlyMasterKey: primaryReadonlyMasterKey
        secondaryMasterKey: secondaryMasterKey
        secondaryReadonlyMasterKey: secondaryReadonlyMasterKey
    CosmosDBDatabaseAccountGetMetricDefinitions:
      value:
        value:
          - metricAvailabilities:
              - retention: P2D
                timeGrain: PT5M
              - retention: P14D
                timeGrain: PT1H
              - retention: P60D
                timeGrain: P1D
            name:
              localizedValue: Total Requests
              value: Total Requests
            primaryAggregationType: Total
            resourceUri: /subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1
            unit: Count
    CosmosDBDatabaseAccountGetMetrics:
      value:
        value:
          - endTime: 2017-11-20T00:13:55.2780000Z
            metricValues:
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:53:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:58:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:03:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:08:55.2780000Z
                total: 0
            name:
              localizedValue: Total Requests
              value: Total Requests
            startTime: 2017-11-19T23:53:55.2780000Z
            timeGrain: PT5M
            unit: Count
    CosmosDBMongoDBDatabaseList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName
            location: West US
            name: databaseName
            properties:
              id: databaseName
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases
    CosmosDBMongoDBDatabaseGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName
        location: West US
        name: databaseName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          id: databaseName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases
    CosmosDBMongoDBDatabaseCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName
        location: West US
        name: databaseName
        properties:
          id: updatedDatabaseName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases
    CosmosDBMongoDBCollectionList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName
            location: West US
            name: collectionName
            properties:
              id: testcoll
              indexes:
                - key:
                    keys:
                      - testKey
                  options:
                    expireAfterSeconds: 100
                    unique: true
              shardKey:
                testKey: Hash
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections
    CosmosDBMongoDBCollectionGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName
        location: West US
        name: collectionName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          id: testcoll
          indexes:
            - key:
                keys:
                  - testKey
              options:
                expireAfterSeconds: 100
                unique: true
          shardKey:
            testKey: Hash
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections
    CosmosDBMongoDBCollectionCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName
        location: West US
        name: collectionName
        properties:
          id: collectionName
          indexes:
            - key:
                keys:
                  - testKey
              options:
                expireAfterSeconds: 100
                unique: true
          shardKey:
            testKey: Hash
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections
    CosmosDBMongoDBCollectionThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections/throughputSettings
    CosmosDBMongoDBCollectionThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections/throughputSettings
    CosmosDBMongoDBDatabaseThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/throughputSettings
    CosmosDBMongoDBDatabaseThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/throughputSettings
    CosmosDBDatabaseAccountListReadOnlyKeys:
      value:
        primaryReadonlyMasterKey: primaryReadonlyMasterKey
        secondaryReadonlyMasterKey: secondaryReadonlyMasterKey
    CosmosDBRegionCollectionGetMetrics:
      value:
        value:
          - endTime: 2017-11-20T00:13:55.2780000Z
            metricValues:
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:53:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-19T23:58:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:03:55.2780000Z
                total: 0
              - _count: 0
                average: 0
                timestamp: 2017-11-20T00:08:55.2780000Z
                total: 0
            name:
              localizedValue: Total Requests
              value: Total Requests
            startTime: 2017-11-19T23:53:55.2780000Z
            timeGrain: PT5M
            unit: Count
    CosmosDBSqlDatabaseList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName
            location: West US
            name: databaseName
            properties:
              _colls: colls/
              _etag: '"00000a00-0000-0000-0000-56672f920000"'
              _rid: CqNBAA==
              _ts: 1449602962
              _users: users/
              id: databaseName
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases
    CosmosDBSqlDatabaseGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName
        location: West US
        name: databaseName
        properties:
          _colls: colls/
          _etag: '"00000a00-0000-0000-0000-56672f920000"'
          _rid: CqNBAA==
          _ts: 1449602962
          _users: users/
          id: databaseName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases
    CosmosDBSqlDatabaseCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName
        location: West US
        name: databaseName
        properties:
          _etag: '"00000a00-0000-0000-0000-56672f920000"'
          _rid: CqNBAA==
          _ts: 1449602962
          id: databaseName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases
    CosmosDBSqlContainerList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName
            location: West US
            name: containerName
            properties:
              _etag: '"00005900-0000-0000-0000-56f9a2630000"'
              _rid: PD5DALigDgw=
              _ts: 1459200611
              conflictResolutionPolicy:
                conflictResolutionPath: /path
                mode: LastWriterWins
              defaultTtl: 100
              id: testctn
              indexingPolicy:
                automatic: true
                excludedPaths: []
                includedPaths:
                  - indexes:
                      - dataType: String
                        kind: Range
                        precision: -1
                      - dataType: Number
                        kind: Range
                        precision: -1
                    path: /*
                indexingMode: Consistent
              partitionKey:
                kind: Hash
                paths:
                  - /AccountNumber
              uniqueKeyPolicy:
                uniqueKeys:
                  - paths:
                      - /testPath
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers
    CosmosDBSqlContainerGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName
        location: West US
        name: containerName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          conflictResolutionPolicy:
            conflictResolutionPath: /path
            mode: LastWriterWins
          defaultTtl: 100
          id: containerName
          indexingPolicy:
            automatic: true
            excludedPaths: []
            includedPaths:
              - indexes:
                  - dataType: String
                    kind: Range
                    precision: -1
                  - dataType: Number
                    kind: Range
                    precision: -1
                path: /*
            indexingMode: Consistent
          partitionKey:
            kind: Hash
            paths:
              - /AccountNumber
          uniqueKeyPolicy:
            uniqueKeys:
              - paths:
                  - /testPath
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers
    CosmosDBSqlContainerCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName
        location: West US
        name: containerName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          conflictResolutionPolicy:
            conflictResolutionPath: /path
            mode: LastWriterWins
          defaultTtl: 100
          id: containerName
          indexingPolicy:
            automatic: true
            excludedPaths: []
            includedPaths:
              - indexes:
                  - dataType: String
                    kind: Range
                    precision: -1
                  - dataType: Number
                    kind: Range
                    precision: -1
                path: /*
            indexingMode: Consistent
          partitionKey:
            kind: Hash
            paths:
              - /AccountNumber
          uniqueKeyPolicy:
            uniqueKeys:
              - paths:
                  - /testPath
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers
    CosmosDBSqlStoredProcedureList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlStoredProcedures/storedProcedureName
            name: testctn
            properties:
              _etag: '"00005900-0000-0000-0000-56f9a2630000"'
              _rid: PD5DALigDgw=
              _ts: 1459200611
              body: body
              id: testctn
            type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlStoredProcedures
    CosmosDBSqlStoredProcedureGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlStoredProcedures/storedProcedureName
        name: storedProcedureName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          body: body
          id: storedProcedureName
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlStoredProcedures
    CosmosDBSqlStoredProcedureCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlStoredProcedures/storedProcedureName
        name: storedProcedureName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          body: body
          id: storedProcedureName
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlStoredProcedures
    CosmosDBSqlContainerThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/throughputSettings
    CosmosDBSqlContainerThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/throughputSettings
    CosmosDBSqlTriggerList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlTriggers/triggerName
            name: testctn
            properties:
              _etag: '"00005900-0000-0000-0000-56f9a2630000"'
              _rid: PD5DALigDgw=
              _ts: 1459200611
              body: body
              id: testctn
              triggerOperation: triggerOperation
              triggerType: triggerType
            type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlTriggers
    CosmosDBSqlTriggerGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlTriggers/triggerName
        name: triggerName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          body: body
          id: triggerName
          triggerOperation: triggerOperation
          triggerType: triggerType
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlTriggers
    CosmosDBSqlTriggerCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlTriggers/triggerName
        name: triggerName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          body: body
          id: triggerName
          triggerOperation: triggerOperation
          triggerType: triggerType
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlTriggers
    CosmosDBSqlUserDefinedFunctionList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlUserDefinedFunctions/userDefinedFunctionName
            name: testctn
            properties:
              _etag: '"00005900-0000-0000-0000-56f9a2630000"'
              _rid: PD5DALigDgw=
              _ts: 1459200611
              body: body
              id: testctn
            type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlUserDefinedFunctions
    CosmosDBSqlUserDefinedFunctionGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlUserDefinedFunctions/userDefinedFunctionName
        name: userDefinedFunctionName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          body: body
          id: userDefinedFunctionName
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlUserDefinedFunctions
    CosmosDBSqlUserDefinedFunctionCreateUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName/sqlUserDefinedFunctions/userDefinedFunctionName
        name: userDefinedFunctionName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          body: body
          id: userDefinedFunctionName
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/sqlContainers/sqlUserDefinedFunctions
    CosmosDBSqlDatabaseThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings
    CosmosDBSqlDatabaseThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings
    CosmosDBTableList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName
            location: West US
            name: tableName
            properties:
              id: tableName
            tags: {}
            type: Microsoft.DocumentDB/databaseAccounts/tables
    CosmosDBTableGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName
        location: West US
        name: tableName
        properties:
          _etag: '"00005900-0000-0000-0000-56f9a2630000"'
          _rid: PD5DALigDgw=
          _ts: 1459200611
          id: tableName
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/tables
    CosmosDBTableReplace:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName
        location: West US
        name: tableName
        properties:
          id: tableName
        type: Microsoft.DocumentDB/databaseAccounts/tables
    CosmosDBTableThroughputGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/tables/throughputSettings
    CosmosDBTableThroughputUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName/throughputSettings/default
        location: West US
        name: default
        properties:
          minimumThroughput: "400"
          offerReplacePending: "true"
          throughput: 400
        tags: {}
        type: Microsoft.DocumentDB/databaseAccounts/tables/throughputSettings
    CosmosDBDatabaseAccountGetUsages:
      value:
        value:
          - currentValue: 0
            limit: 10737418240
            name:
              localizedValue: Storage
              value: Storage
            quotaPeriod: P1D
            unit: Bytes
  parameters:
    accountNameParameter:
      description: Cosmos DB database account name.
      in: path
      name: accountName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        minLength: 3
        maxLength: 50
        pattern: ^[a-z0-9]+(-[a-z0-9]+)*
      examples:
        CosmosDBDatabaseAccountCheckNameExists:
          value: ddb1
        CosmosDBDatabaseAccountDelete:
          value: ddb1
        CosmosDBDatabaseAccountGet:
          value: ddb1
        CosmosDBDatabaseAccountPatch:
          value: ddb1
        CosmosDBDatabaseAccountCreateMax:
          value: ddb1
        CosmosDBDatabaseAccountCreateMin:
          value: ddb1
        CosmosDBCassandraKeyspaceList:
          value: ddb1
        CosmosDBCassandraKeyspaceDelete:
          value: ddb1
        CosmosDBCassandraKeyspaceGet:
          value: ddb1
        CosmosDBCassandraKeyspaceCreateUpdate:
          value: ddb1
        CosmosDBCassandraTableList:
          value: ddb1
        CosmosDBCassandraTableDelete:
          value: ddb1
        CosmosDBCassandraTableGet:
          value: ddb1
        CosmosDBCassandraTableCreateUpdate:
          value: ddb1
        CosmosDBCassandraTableThroughputGet:
          value: ddb1
        CosmosDBCassandraTableThroughputUpdate:
          value: ddb1
        CosmosDBCassandraKeyspaceThroughputGet:
          value: ddb1
        CosmosDBCassandraKeyspaceThroughputUpdate:
          value: ddb1
        CosmosDBCollectionGetMetricDefinitions:
          value: ddb1
        CosmosDBCollectionGetMetrics:
          value: ddb1
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: ddb1
        CosmosDBCollectionGetUsages:
          value: ddb1
        CosmosDBDatabaseGetMetricDefinitions:
          value: ddb1
        CosmosDBDatabaseGetMetrics:
          value: ddb1
        CosmosDBDatabaseGetUsages:
          value: ddb1
        CosmosDBDatabaseAccountFailoverPriorityChange:
          value: ddb1-failover
        CosmosDBGremlinDatabaseList:
          value: ddb1
        CosmosDBGremlinDatabaseDelete:
          value: ddb1
        CosmosDBGremlinDatabaseGet:
          value: ddb1
        CosmosDBGremlinDatabaseCreateUpdate:
          value: ddb1
        CosmosDBGremlinGraphList:
          value: ddb1
        CosmosDBGremlinGraphDelete:
          value: ddb1
        CosmosDBGremlinGraphGet:
          value: ddb1
        CosmosDBGremlinGraphCreateUpdate:
          value: ddb1
        CosmosDBGremlinGraphThroughputGet:
          value: ddb1
        CosmosDBGremlinGraphThroughputUpdate:
          value: ddb1
        CosmosDBGremlinDatabaseThroughputGet:
          value: ddb1
        CosmosDBGremlinDatabaseThroughputUpdate:
          value: ddb1
        CosmosDBDatabaseAccountListConnectionStrings:
          value: ddb1
        CosmosDBDatabaseAccountListConnectionStringsMongo:
          value: mongo-ddb1
        CosmosDBDatabaseAccountListKeys:
          value: ddb1
        CosmosDBDatabaseAccountGetMetricDefinitions:
          value: ddb1
        CosmosDBDatabaseAccountGetMetrics:
          value: ddb1
        CosmosDBMongoDBDatabaseList:
          value: ddb1
        CosmosDBMongoDBDatabaseDelete:
          value: ddb1
        CosmosDBMongoDBDatabaseGet:
          value: ddb1
        CosmosDBMongoDBDatabaseCreateUpdate:
          value: ddb1
        CosmosDBMongoDBCollectionList:
          value: ddb1
        CosmosDBMongoDBCollectionDelete:
          value: ddb1
        CosmosDBMongoDBCollectionGet:
          value: ddb1
        CosmosDBMongoDBCollectionCreateUpdate:
          value: ddb1
        CosmosDBMongoDBCollectionThroughputGet:
          value: ddb1
        CosmosDBMongoDBCollectionThroughputUpdate:
          value: ddb1
        CosmosDBMongoDBDatabaseThroughputGet:
          value: ddb1
        CosmosDBMongoDBDatabaseThroughputUpdate:
          value: ddb1
        CosmosDBDatabaseAccountOfflineRegion:
          value: ddb1
        CosmosDBDatabaseAccountOnlineRegion:
          value: ddb1
        CosmosDBDatabaseAccountListReadOnlyKeys:
          value: ddb1
        CosmosDBDatabaseAccountRegenerateKey:
          value: ddb1
        CosmosDBRegionCollectionGetMetrics:
          value: ddb1
        CosmosDBSqlDatabaseList:
          value: ddb1
        CosmosDBSqlDatabaseDelete:
          value: ddb1
        CosmosDBSqlDatabaseGet:
          value: ddb1
        CosmosDBSqlDatabaseCreateUpdate:
          value: ddb1
        CosmosDBSqlContainerList:
          value: ddb1
        CosmosDBSqlContainerDelete:
          value: ddb1
        CosmosDBSqlContainerGet:
          value: ddb1
        CosmosDBSqlContainerCreateUpdate:
          value: ddb1
        CosmosDBSqlStoredProcedureList:
          value: ddb1
        CosmosDBSqlStoredProcedureDelete:
          value: ddb1
        CosmosDBSqlStoredProcedureGet:
          value: ddb1
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: ddb1
        CosmosDBSqlContainerThroughputGet:
          value: ddb1
        CosmosDBSqlContainerThroughputUpdate:
          value: ddb1
        CosmosDBSqlTriggerList:
          value: ddb1
        CosmosDBSqlTriggerDelete:
          value: ddb1
        CosmosDBSqlTriggerGet:
          value: ddb1
        CosmosDBSqlTriggerCreateUpdate:
          value: ddb1
        CosmosDBSqlUserDefinedFunctionList:
          value: ddb1
        CosmosDBSqlUserDefinedFunctionDelete:
          value: ddb1
        CosmosDBSqlUserDefinedFunctionGet:
          value: ddb1
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: ddb1
        CosmosDBSqlDatabaseThroughputGet:
          value: ddb1
        CosmosDBSqlDatabaseThroughputUpdate:
          value: ddb1
        CosmosDBTableList:
          value: ddb1
        CosmosDBTableDelete:
          value: ddb1
        CosmosDBTableGet:
          value: ddb1
        CosmosDBTableReplace:
          value: ddb1
        CosmosDBTableThroughputGet:
          value: ddb1
        CosmosDBTableThroughputUpdate:
          value: ddb1
        CosmosDBDatabaseAccountGetUsages:
          value: ddb1
    apiVersionParameter:
      description: Version of the API to be used with the client request. The current
        version is 2019-08-01.
      in: query
      name: api-version
      required: true
      schema:
        type: string
      examples:
        CosmosDBDatabaseAccountCheckNameExists:
          value: 2019-08-01
        CosmosDBOperationsList:
          value: 2019-08-01
        CosmosDBDatabaseAccountList:
          value: 2019-08-01
        CosmosDBDatabaseAccountListByResourceGroup:
          value: 2019-08-01
        CosmosDBDatabaseAccountDelete:
          value: 2019-08-01
        CosmosDBDatabaseAccountGet:
          value: 2019-08-01
        CosmosDBDatabaseAccountPatch:
          value: 2019-08-01
        CosmosDBDatabaseAccountCreateMax:
          value: 2019-08-01
        CosmosDBDatabaseAccountCreateMin:
          value: 2019-08-01
        CosmosDBCassandraKeyspaceList:
          value: 2019-08-01
        CosmosDBCassandraKeyspaceDelete:
          value: 2019-08-01
        CosmosDBCassandraKeyspaceGet:
          value: 2019-08-01
        CosmosDBCassandraKeyspaceCreateUpdate:
          value: 2019-08-01
        CosmosDBCassandraTableList:
          value: 2019-08-01
        CosmosDBCassandraTableDelete:
          value: 2019-08-01
        CosmosDBCassandraTableGet:
          value: 2019-08-01
        CosmosDBCassandraTableCreateUpdate:
          value: 2019-08-01
        CosmosDBCassandraTableThroughputGet:
          value: 2019-08-01
        CosmosDBCassandraTableThroughputUpdate:
          value: 2019-08-01
        CosmosDBCassandraKeyspaceThroughputGet:
          value: 2019-08-01
        CosmosDBCassandraKeyspaceThroughputUpdate:
          value: 2019-08-01
        CosmosDBCollectionGetMetricDefinitions:
          value: 2019-08-01
        CosmosDBCollectionGetMetrics:
          value: 2019-08-01
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: 2019-08-01
        CosmosDBCollectionGetUsages:
          value: 2019-08-01
        CosmosDBDatabaseGetMetricDefinitions:
          value: 2019-08-01
        CosmosDBDatabaseGetMetrics:
          value: 2019-08-01
        CosmosDBDatabaseGetUsages:
          value: 2019-08-01
        CosmosDBDatabaseAccountFailoverPriorityChange:
          value: 2019-08-01
        CosmosDBGremlinDatabaseList:
          value: 2019-08-01
        CosmosDBGremlinDatabaseDelete:
          value: 2019-08-01
        CosmosDBGremlinDatabaseGet:
          value: 2019-08-01
        CosmosDBGremlinDatabaseCreateUpdate:
          value: 2019-08-01
        CosmosDBGremlinGraphList:
          value: 2019-08-01
        CosmosDBGremlinGraphDelete:
          value: 2019-08-01
        CosmosDBGremlinGraphGet:
          value: 2019-08-01
        CosmosDBGremlinGraphCreateUpdate:
          value: 2019-08-01
        CosmosDBGremlinGraphThroughputGet:
          value: 2019-08-01
        CosmosDBGremlinGraphThroughputUpdate:
          value: 2019-08-01
        CosmosDBGremlinDatabaseThroughputGet:
          value: 2019-08-01
        CosmosDBGremlinDatabaseThroughputUpdate:
          value: 2019-08-01
        CosmosDBDatabaseAccountListConnectionStrings:
          value: 2019-08-01
        CosmosDBDatabaseAccountListConnectionStringsMongo:
          value: 2019-08-01
        CosmosDBDatabaseAccountListKeys:
          value: 2019-08-01
        CosmosDBDatabaseAccountGetMetricDefinitions:
          value: 2019-08-01
        CosmosDBDatabaseAccountGetMetrics:
          value: 2019-08-01
        CosmosDBMongoDBDatabaseList:
          value: 2019-08-01
        CosmosDBMongoDBDatabaseDelete:
          value: 2019-08-01
        CosmosDBMongoDBDatabaseGet:
          value: 2019-08-01
        CosmosDBMongoDBDatabaseCreateUpdate:
          value: 2019-08-01
        CosmosDBMongoDBCollectionList:
          value: 2019-08-01
        CosmosDBMongoDBCollectionDelete:
          value: 2019-08-01
        CosmosDBMongoDBCollectionGet:
          value: 2019-08-01
        CosmosDBMongoDBCollectionCreateUpdate:
          value: 2019-08-01
        CosmosDBMongoDBCollectionThroughputGet:
          value: 2019-08-01
        CosmosDBMongoDBCollectionThroughputUpdate:
          value: 2019-08-01
        CosmosDBMongoDBDatabaseThroughputGet:
          value: 2019-08-01
        CosmosDBMongoDBDatabaseThroughputUpdate:
          value: 2019-08-01
        CosmosDBDatabaseAccountOfflineRegion:
          value: 2019-08-01
        CosmosDBDatabaseAccountOnlineRegion:
          value: 2019-08-01
        CosmosDBDatabaseAccountListReadOnlyKeys:
          value: 2019-08-01
        CosmosDBDatabaseAccountRegenerateKey:
          value: 2019-08-01
        CosmosDBRegionCollectionGetMetrics:
          value: 2019-08-01
        CosmosDBSqlDatabaseList:
          value: 2019-08-01
        CosmosDBSqlDatabaseDelete:
          value: 2019-08-01
        CosmosDBSqlDatabaseGet:
          value: 2019-08-01
        CosmosDBSqlDatabaseCreateUpdate:
          value: 2019-08-01
        CosmosDBSqlContainerList:
          value: 2019-08-01
        CosmosDBSqlContainerDelete:
          value: 2019-08-01
        CosmosDBSqlContainerGet:
          value: 2019-08-01
        CosmosDBSqlContainerCreateUpdate:
          value: 2019-08-01
        CosmosDBSqlStoredProcedureList:
          value: 2019-08-01
        CosmosDBSqlStoredProcedureDelete:
          value: 2019-08-01
        CosmosDBSqlStoredProcedureGet:
          value: 2019-08-01
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: 2019-08-01
        CosmosDBSqlContainerThroughputGet:
          value: 2019-08-01
        CosmosDBSqlContainerThroughputUpdate:
          value: 2019-08-01
        CosmosDBSqlTriggerList:
          value: 2019-08-01
        CosmosDBSqlTriggerDelete:
          value: 2019-08-01
        CosmosDBSqlTriggerGet:
          value: 2019-08-01
        CosmosDBSqlTriggerCreateUpdate:
          value: 2019-08-01
        CosmosDBSqlUserDefinedFunctionList:
          value: 2019-08-01
        CosmosDBSqlUserDefinedFunctionDelete:
          value: 2019-08-01
        CosmosDBSqlUserDefinedFunctionGet:
          value: 2019-08-01
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: 2019-08-01
        CosmosDBSqlDatabaseThroughputGet:
          value: 2019-08-01
        CosmosDBSqlDatabaseThroughputUpdate:
          value: 2019-08-01
        CosmosDBTableList:
          value: 2019-08-01
        CosmosDBTableDelete:
          value: 2019-08-01
        CosmosDBTableGet:
          value: 2019-08-01
        CosmosDBTableReplace:
          value: 2019-08-01
        CosmosDBTableThroughputGet:
          value: 2019-08-01
        CosmosDBTableThroughputUpdate:
          value: 2019-08-01
        CosmosDBDatabaseAccountGetUsages:
          value: 2019-08-01
    collectionNameParameter:
      description: Cosmos DB collection name.
      in: path
      name: collectionName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBMongoDBCollectionDelete:
          value: collectionName
        CosmosDBMongoDBCollectionGet:
          value: collectionName
        CosmosDBMongoDBCollectionCreateUpdate:
          value: collectionName
        CosmosDBMongoDBCollectionThroughputGet:
          value: collectionName
        CosmosDBMongoDBCollectionThroughputUpdate:
          value: collectionName
    collectionRidParameter:
      description: Cosmos DB collection rid.
      in: path
      name: collectionRid
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBCollectionGetMetricDefinitions:
          value: collectionRid
        CosmosDBCollectionGetMetrics:
          value: collectionRid
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: collectionRid
        CosmosDBCollectionGetUsages:
          value: collectionRid
        CosmosDBRegionCollectionGetMetrics:
          value: collectionRid
    containerNameParameter:
      description: Cosmos DB container name.
      in: path
      name: containerName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBSqlContainerDelete:
          value: containerName
        CosmosDBSqlContainerGet:
          value: containerName
        CosmosDBSqlContainerCreateUpdate:
          value: containerName
        CosmosDBSqlStoredProcedureList:
          value: containerName
        CosmosDBSqlStoredProcedureDelete:
          value: containerName
        CosmosDBSqlStoredProcedureGet:
          value: containerName
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: containerName
        CosmosDBSqlContainerThroughputGet:
          value: containerName
        CosmosDBSqlContainerThroughputUpdate:
          value: containerName
        CosmosDBSqlTriggerList:
          value: containerName
        CosmosDBSqlTriggerDelete:
          value: containerName
        CosmosDBSqlTriggerGet:
          value: containerName
        CosmosDBSqlTriggerCreateUpdate:
          value: containerName
        CosmosDBSqlUserDefinedFunctionList:
          value: containerName
        CosmosDBSqlUserDefinedFunctionDelete:
          value: containerName
        CosmosDBSqlUserDefinedFunctionGet:
          value: containerName
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: containerName
    databaseNameParameter:
      description: Cosmos DB database name.
      in: path
      name: databaseName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBGremlinDatabaseDelete:
          value: databaseName
        CosmosDBGremlinDatabaseGet:
          value: databaseName
        CosmosDBGremlinDatabaseCreateUpdate:
          value: databaseName
        CosmosDBGremlinGraphList:
          value: databaseName
        CosmosDBGremlinGraphDelete:
          value: databaseName
        CosmosDBGremlinGraphGet:
          value: databaseName
        CosmosDBGremlinGraphCreateUpdate:
          value: databaseName
        CosmosDBGremlinGraphThroughputGet:
          value: databaseName
        CosmosDBGremlinGraphThroughputUpdate:
          value: databaseName
        CosmosDBGremlinDatabaseThroughputGet:
          value: databaseName
        CosmosDBGremlinDatabaseThroughputUpdate:
          value: databaseName
        CosmosDBMongoDBDatabaseDelete:
          value: databaseName
        CosmosDBMongoDBDatabaseGet:
          value: databaseName
        CosmosDBMongoDBDatabaseCreateUpdate:
          value: databaseName
        CosmosDBMongoDBCollectionList:
          value: databaseName
        CosmosDBMongoDBCollectionDelete:
          value: databaseName
        CosmosDBMongoDBCollectionGet:
          value: databaseName
        CosmosDBMongoDBCollectionCreateUpdate:
          value: databaseName
        CosmosDBMongoDBCollectionThroughputGet:
          value: databaseName
        CosmosDBMongoDBCollectionThroughputUpdate:
          value: databaseName
        CosmosDBMongoDBDatabaseThroughputGet:
          value: databaseName
        CosmosDBMongoDBDatabaseThroughputUpdate:
          value: databaseName
        CosmosDBSqlDatabaseDelete:
          value: databaseName
        CosmosDBSqlDatabaseGet:
          value: databaseName
        CosmosDBSqlDatabaseCreateUpdate:
          value: databaseName
        CosmosDBSqlContainerList:
          value: databaseName
        CosmosDBSqlContainerDelete:
          value: databaseName
        CosmosDBSqlContainerGet:
          value: databaseName
        CosmosDBSqlContainerCreateUpdate:
          value: databaseName
        CosmosDBSqlStoredProcedureList:
          value: databaseName
        CosmosDBSqlStoredProcedureDelete:
          value: databaseName
        CosmosDBSqlStoredProcedureGet:
          value: databaseName
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: databaseName
        CosmosDBSqlContainerThroughputGet:
          value: databaseName
        CosmosDBSqlContainerThroughputUpdate:
          value: databaseName
        CosmosDBSqlTriggerList:
          value: databaseName
        CosmosDBSqlTriggerDelete:
          value: databaseName
        CosmosDBSqlTriggerGet:
          value: databaseName
        CosmosDBSqlTriggerCreateUpdate:
          value: databaseName
        CosmosDBSqlUserDefinedFunctionList:
          value: databaseName
        CosmosDBSqlUserDefinedFunctionDelete:
          value: databaseName
        CosmosDBSqlUserDefinedFunctionGet:
          value: databaseName
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: databaseName
        CosmosDBSqlDatabaseThroughputGet:
          value: databaseName
        CosmosDBSqlDatabaseThroughputUpdate:
          value: databaseName
    databaseRidParameter:
      description: Cosmos DB database rid.
      in: path
      name: databaseRid
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBCollectionGetMetricDefinitions:
          value: databaseRid
        CosmosDBCollectionGetMetrics:
          value: databaseRid
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: databaseRid
        CosmosDBCollectionGetUsages:
          value: databaseRid
        CosmosDBDatabaseGetMetricDefinitions:
          value: databaseRid
        CosmosDBDatabaseGetMetrics:
          value: rid
        CosmosDBDatabaseGetUsages:
          value: databaseRid
        CosmosDBRegionCollectionGetMetrics:
          value: databaseRid
    filterParameter:
      description: An OData filter expression that describes a subset of metrics to return.
        The parameters that can be filtered are name.value (name of the metric,
        can have an or of multiple names), startTime, endTime, and timeGrain.
        The supported operator is eq.
      in: query
      name: $filter
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBCollectionGetMetrics:
          value: $filter=(name.value eq 'Total Requests') and timeGrain eq
            duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and
            endTime eq '2017-11-20T00:13:55.2780000Z
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: $filter=(name.value eq 'Probabilistic Bounded Staleness') and
            timeGrain eq duration'PT5M' and startTime eq
            '2017-11-19T23:53:55.2780000Z' and endTime eq
            '2017-11-20T00:13:55.2780000Z
        CosmosDBDatabaseGetMetrics:
          value: $filter=(name.value eq 'Total Requests') and timeGrain eq
            duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and
            endTime eq '2017-11-20T00:13:55.2780000Z
        CosmosDBDatabaseAccountGetMetrics:
          value: $filter=(name.value eq 'Total Requests') and timeGrain eq
            duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and
            endTime eq '2017-11-20T00:13:55.2780000Z
        CosmosDBRegionCollectionGetMetrics:
          value: $filter=(name.value eq 'Total Requests') and timeGrain eq
            duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and
            endTime eq '2017-11-20T00:13:55.2780000Z
    graphNameParameter:
      description: Cosmos DB graph name.
      in: path
      name: graphName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBGremlinGraphDelete:
          value: graphName
        CosmosDBGremlinGraphGet:
          value: graphName
        CosmosDBGremlinGraphCreateUpdate:
          value: graphName
        CosmosDBGremlinGraphThroughputGet:
          value: graphName
        CosmosDBGremlinGraphThroughputUpdate:
          value: graphName
    keyspaceNameParameter:
      description: Cosmos DB keyspace name.
      in: path
      name: keyspaceName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBCassandraKeyspaceDelete:
          value: keyspaceName
        CosmosDBCassandraKeyspaceGet:
          value: keyspaceName
        CosmosDBCassandraKeyspaceCreateUpdate:
          value: keyspaceName
        CosmosDBCassandraTableList:
          value: keyspaceName
        CosmosDBCassandraTableDelete:
          value: keyspaceName
        CosmosDBCassandraTableGet:
          value: keyspaceName
        CosmosDBCassandraTableCreateUpdate:
          value: keyspaceName
        CosmosDBCassandraTableThroughputGet:
          value: keyspaceName
        CosmosDBCassandraTableThroughputUpdate:
          value: keyspaceName
        CosmosDBCassandraKeyspaceThroughputGet:
          value: keyspaceName
        CosmosDBCassandraKeyspaceThroughputUpdate:
          value: keyspaceName
    partitionKeyRangeIdParameter:
      description: Partition Key Range Id for which to get data.
      in: path
      name: partitionKeyRangeId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: "0"
    regionParameter:
      description: Cosmos DB region, with spaces between words and each word capitalized.
      in: path
      name: region
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBRegionCollectionGetMetrics:
          value: North Europe
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: North Europe
    resourceGroupNameParameter:
      description: Name of an Azure resource group.
      in: path
      name: resourceGroupName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        minLength: 1
        maxLength: 90
        pattern: ^[-\w\._\(\)]+$
      examples:
        CosmosDBDatabaseAccountListByResourceGroup:
          value: rg1
        CosmosDBDatabaseAccountDelete:
          value: rg1
        CosmosDBDatabaseAccountGet:
          value: rg1
        CosmosDBDatabaseAccountPatch:
          value: rg1
        CosmosDBDatabaseAccountCreateMax:
          value: rg1
        CosmosDBDatabaseAccountCreateMin:
          value: rg1
        CosmosDBCassandraKeyspaceList:
          value: rgName
        CosmosDBCassandraKeyspaceDelete:
          value: rg1
        CosmosDBCassandraKeyspaceGet:
          value: rg1
        CosmosDBCassandraKeyspaceCreateUpdate:
          value: rg1
        CosmosDBCassandraTableList:
          value: rgName
        CosmosDBCassandraTableDelete:
          value: rg1
        CosmosDBCassandraTableGet:
          value: rg1
        CosmosDBCassandraTableCreateUpdate:
          value: rg1
        CosmosDBCassandraTableThroughputGet:
          value: rg1
        CosmosDBCassandraTableThroughputUpdate:
          value: rg1
        CosmosDBCassandraKeyspaceThroughputGet:
          value: rg1
        CosmosDBCassandraKeyspaceThroughputUpdate:
          value: rg1
        CosmosDBCollectionGetMetricDefinitions:
          value: rg1
        CosmosDBCollectionGetMetrics:
          value: rg1
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: rg1
        CosmosDBCollectionGetUsages:
          value: rg1
        CosmosDBDatabaseGetMetricDefinitions:
          value: rg1
        CosmosDBDatabaseGetMetrics:
          value: rg1
        CosmosDBDatabaseGetUsages:
          value: rg1
        CosmosDBDatabaseAccountFailoverPriorityChange:
          value: rg1
        CosmosDBGremlinDatabaseList:
          value: rgName
        CosmosDBGremlinDatabaseDelete:
          value: rg1
        CosmosDBGremlinDatabaseGet:
          value: rg1
        CosmosDBGremlinDatabaseCreateUpdate:
          value: rg1
        CosmosDBGremlinGraphList:
          value: rgName
        CosmosDBGremlinGraphDelete:
          value: rg1
        CosmosDBGremlinGraphGet:
          value: rgName
        CosmosDBGremlinGraphCreateUpdate:
          value: rg1
        CosmosDBGremlinGraphThroughputGet:
          value: rg1
        CosmosDBGremlinGraphThroughputUpdate:
          value: rg1
        CosmosDBGremlinDatabaseThroughputGet:
          value: rg1
        CosmosDBGremlinDatabaseThroughputUpdate:
          value: rg1
        CosmosDBDatabaseAccountListConnectionStrings:
          value: rg1
        CosmosDBDatabaseAccountListConnectionStringsMongo:
          value: rg1
        CosmosDBDatabaseAccountListKeys:
          value: rg1
        CosmosDBDatabaseAccountGetMetricDefinitions:
          value: rg1
        CosmosDBDatabaseAccountGetMetrics:
          value: rg1
        CosmosDBMongoDBDatabaseList:
          value: rgName
        CosmosDBMongoDBDatabaseDelete:
          value: rg1
        CosmosDBMongoDBDatabaseGet:
          value: rg1
        CosmosDBMongoDBDatabaseCreateUpdate:
          value: rg1
        CosmosDBMongoDBCollectionList:
          value: rgName
        CosmosDBMongoDBCollectionDelete:
          value: rg1
        CosmosDBMongoDBCollectionGet:
          value: rgName
        CosmosDBMongoDBCollectionCreateUpdate:
          value: rg1
        CosmosDBMongoDBCollectionThroughputGet:
          value: rg1
        CosmosDBMongoDBCollectionThroughputUpdate:
          value: rg1
        CosmosDBMongoDBDatabaseThroughputGet:
          value: rg1
        CosmosDBMongoDBDatabaseThroughputUpdate:
          value: rg1
        CosmosDBDatabaseAccountOfflineRegion:
          value: rg1
        CosmosDBDatabaseAccountOnlineRegion:
          value: rg1
        CosmosDBDatabaseAccountListReadOnlyKeys:
          value: rg1
        CosmosDBDatabaseAccountRegenerateKey:
          value: rg1
        CosmosDBRegionCollectionGetMetrics:
          value: rg1
        CosmosDBSqlDatabaseList:
          value: rgName
        CosmosDBSqlDatabaseDelete:
          value: rg1
        CosmosDBSqlDatabaseGet:
          value: rg1
        CosmosDBSqlDatabaseCreateUpdate:
          value: rg1
        CosmosDBSqlContainerList:
          value: rgName
        CosmosDBSqlContainerDelete:
          value: rg1
        CosmosDBSqlContainerGet:
          value: rgName
        CosmosDBSqlContainerCreateUpdate:
          value: rg1
        CosmosDBSqlStoredProcedureList:
          value: rgName
        CosmosDBSqlStoredProcedureDelete:
          value: rg1
        CosmosDBSqlStoredProcedureGet:
          value: rgName
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: rg1
        CosmosDBSqlContainerThroughputGet:
          value: rg1
        CosmosDBSqlContainerThroughputUpdate:
          value: rg1
        CosmosDBSqlTriggerList:
          value: rgName
        CosmosDBSqlTriggerDelete:
          value: rg1
        CosmosDBSqlTriggerGet:
          value: rgName
        CosmosDBSqlTriggerCreateUpdate:
          value: rg1
        CosmosDBSqlUserDefinedFunctionList:
          value: rgName
        CosmosDBSqlUserDefinedFunctionDelete:
          value: rg1
        CosmosDBSqlUserDefinedFunctionGet:
          value: rgName
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: rg1
        CosmosDBSqlDatabaseThroughputGet:
          value: rg1
        CosmosDBSqlDatabaseThroughputUpdate:
          value: rg1
        CosmosDBTableList:
          value: rgName
        CosmosDBTableDelete:
          value: rg1
        CosmosDBTableGet:
          value: rg1
        CosmosDBTableReplace:
          value: rg1
        CosmosDBTableThroughputGet:
          value: rg1
        CosmosDBTableThroughputUpdate:
          value: rg1
        CosmosDBDatabaseAccountGetUsages:
          value: rg1
    sourceRegionParameter:
      description: Source region from which data is written. Cosmos DB region, with spaces
        between words and each word capitalized.
      in: path
      name: sourceRegion
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: West Central US
    storedProcedureNameParameter:
      description: Cosmos DB storedProcedure name.
      in: path
      name: storedProcedureName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBSqlStoredProcedureDelete:
          value: storedProcedureName
        CosmosDBSqlStoredProcedureGet:
          value: storedProcedureName
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: storedProcedureName
    subscriptionIdParameter:
      description: Azure subscription ID.
      in: path
      name: subscriptionId
      required: true
      schema:
        type: string
      examples:
        CosmosDBDatabaseAccountList:
          value: subid
        CosmosDBDatabaseAccountListByResourceGroup:
          value: subid
        CosmosDBDatabaseAccountDelete:
          value: subid
        CosmosDBDatabaseAccountGet:
          value: subid
        CosmosDBDatabaseAccountPatch:
          value: subid
        CosmosDBDatabaseAccountCreateMax:
          value: subid
        CosmosDBDatabaseAccountCreateMin:
          value: subid
        CosmosDBCassandraKeyspaceList:
          value: subid
        CosmosDBCassandraKeyspaceDelete:
          value: subid
        CosmosDBCassandraKeyspaceGet:
          value: subid
        CosmosDBCassandraKeyspaceCreateUpdate:
          value: subid
        CosmosDBCassandraTableList:
          value: subid
        CosmosDBCassandraTableDelete:
          value: subid
        CosmosDBCassandraTableGet:
          value: subid
        CosmosDBCassandraTableCreateUpdate:
          value: subid
        CosmosDBCassandraTableThroughputGet:
          value: subid
        CosmosDBCassandraTableThroughputUpdate:
          value: subid
        CosmosDBCassandraKeyspaceThroughputGet:
          value: subid
        CosmosDBCassandraKeyspaceThroughputUpdate:
          value: subid
        CosmosDBCollectionGetMetricDefinitions:
          value: subid
        CosmosDBCollectionGetMetrics:
          value: subid
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: subid
        CosmosDBCollectionGetUsages:
          value: subid
        CosmosDBDatabaseGetMetricDefinitions:
          value: subid
        CosmosDBDatabaseGetMetrics:
          value: subid
        CosmosDBDatabaseGetUsages:
          value: subid
        CosmosDBDatabaseAccountFailoverPriorityChange:
          value: subid
        CosmosDBGremlinDatabaseList:
          value: subid
        CosmosDBGremlinDatabaseDelete:
          value: subid
        CosmosDBGremlinDatabaseGet:
          value: subid
        CosmosDBGremlinDatabaseCreateUpdate:
          value: subid
        CosmosDBGremlinGraphList:
          value: subid
        CosmosDBGremlinGraphDelete:
          value: subid
        CosmosDBGremlinGraphGet:
          value: subid
        CosmosDBGremlinGraphCreateUpdate:
          value: subid
        CosmosDBGremlinGraphThroughputGet:
          value: subid
        CosmosDBGremlinGraphThroughputUpdate:
          value: subid
        CosmosDBGremlinDatabaseThroughputGet:
          value: subid
        CosmosDBGremlinDatabaseThroughputUpdate:
          value: subid
        CosmosDBDatabaseAccountListConnectionStrings:
          value: subid
        CosmosDBDatabaseAccountListConnectionStringsMongo:
          value: subid
        CosmosDBDatabaseAccountListKeys:
          value: subid
        CosmosDBDatabaseAccountGetMetricDefinitions:
          value: subid
        CosmosDBDatabaseAccountGetMetrics:
          value: subid
        CosmosDBMongoDBDatabaseList:
          value: subid
        CosmosDBMongoDBDatabaseDelete:
          value: subid
        CosmosDBMongoDBDatabaseGet:
          value: subid
        CosmosDBMongoDBDatabaseCreateUpdate:
          value: subid
        CosmosDBMongoDBCollectionList:
          value: subid
        CosmosDBMongoDBCollectionDelete:
          value: subid
        CosmosDBMongoDBCollectionGet:
          value: subid
        CosmosDBMongoDBCollectionCreateUpdate:
          value: subid
        CosmosDBMongoDBCollectionThroughputGet:
          value: subid
        CosmosDBMongoDBCollectionThroughputUpdate:
          value: subid
        CosmosDBMongoDBDatabaseThroughputGet:
          value: subid
        CosmosDBMongoDBDatabaseThroughputUpdate:
          value: subid
        CosmosDBDatabaseAccountOfflineRegion:
          value: subid
        CosmosDBDatabaseAccountOnlineRegion:
          value: subid
        CosmosDBDatabaseAccountListReadOnlyKeys:
          value: subid
        CosmosDBDatabaseAccountRegenerateKey:
          value: subid
        CosmosDBRegionCollectionGetMetrics:
          value: subid
        CosmosDBSqlDatabaseList:
          value: subid
        CosmosDBSqlDatabaseDelete:
          value: subid
        CosmosDBSqlDatabaseGet:
          value: subid
        CosmosDBSqlDatabaseCreateUpdate:
          value: subid
        CosmosDBSqlContainerList:
          value: subid
        CosmosDBSqlContainerDelete:
          value: subid
        CosmosDBSqlContainerGet:
          value: subid
        CosmosDBSqlContainerCreateUpdate:
          value: subid
        CosmosDBSqlStoredProcedureList:
          value: subid
        CosmosDBSqlStoredProcedureDelete:
          value: subid
        CosmosDBSqlStoredProcedureGet:
          value: subid
        CosmosDBSqlStoredProcedureCreateUpdate:
          value: subid
        CosmosDBSqlContainerThroughputGet:
          value: subid
        CosmosDBSqlContainerThroughputUpdate:
          value: subid
        CosmosDBSqlTriggerList:
          value: subid
        CosmosDBSqlTriggerDelete:
          value: subid
        CosmosDBSqlTriggerGet:
          value: subid
        CosmosDBSqlTriggerCreateUpdate:
          value: subid
        CosmosDBSqlUserDefinedFunctionList:
          value: subid
        CosmosDBSqlUserDefinedFunctionDelete:
          value: subid
        CosmosDBSqlUserDefinedFunctionGet:
          value: subid
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: subid
        CosmosDBSqlDatabaseThroughputGet:
          value: subid
        CosmosDBSqlDatabaseThroughputUpdate:
          value: subid
        CosmosDBTableList:
          value: subid
        CosmosDBTableDelete:
          value: subid
        CosmosDBTableGet:
          value: subid
        CosmosDBTableReplace:
          value: subid
        CosmosDBTableThroughputGet:
          value: subid
        CosmosDBTableThroughputUpdate:
          value: subid
        CosmosDBDatabaseAccountGetUsages:
          value: subid
    tableNameParameter:
      description: Cosmos DB table name.
      in: path
      name: tableName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBCassandraTableDelete:
          value: tableName
        CosmosDBCassandraTableGet:
          value: tableName
        CosmosDBCassandraTableCreateUpdate:
          value: tableName
        CosmosDBCassandraTableThroughputGet:
          value: tableName
        CosmosDBCassandraTableThroughputUpdate:
          value: tableName
        CosmosDBTableDelete:
          value: tableName
        CosmosDBTableGet:
          value: tableName
        CosmosDBTableReplace:
          value: tableName
        CosmosDBTableThroughputGet:
          value: tableName
        CosmosDBTableThroughputUpdate:
          value: tableName
    targetRegionParameter:
      description: Target region to which data is written. Cosmos DB region, with spaces
        between words and each word capitalized.
      in: path
      name: targetRegion
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBDatabaseAccountRegionGetMetrics:
          value: East US
    triggerNameParameter:
      description: Cosmos DB trigger name.
      in: path
      name: triggerName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBSqlTriggerDelete:
          value: triggerName
        CosmosDBSqlTriggerGet:
          value: triggerName
        CosmosDBSqlTriggerCreateUpdate:
          value: triggerName
    usageFilterParameter:
      description: An OData filter expression that describes a subset of usages to return.
        The supported parameter is name.value (name of the metric, can have an
        or of multiple names).
      in: query
      name: $filter
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBCollectionGetUsages:
          value: $filter=name.value eq 'Storage'
        CosmosDBDatabaseGetUsages:
          value: $filter=name.value eq 'Storage'
        CosmosDBDatabaseAccountGetUsages:
          value: $filter=name.value eq 'Storage'
    userDefinedFunctionNameParameter:
      description: Cosmos DB userDefinedFunction name.
      in: path
      name: userDefinedFunctionName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        CosmosDBSqlUserDefinedFunctionDelete:
          value: userDefinedFunctionName
        CosmosDBSqlUserDefinedFunctionGet:
          value: userDefinedFunctionName
        CosmosDBSqlUserDefinedFunctionCreateUpdate:
          value: userDefinedFunctionName
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: Impersonate your user account
  schemas:
    ARMResourceProperties:
      description: The core properties of ARM resources.
      properties:
        id:
          description: The unique resource identifier of the ARM resource.
          readOnly: true
          type: string
        location:
          description: The location of the resource group to which the resource belongs.
          type: string
        name:
          description: The name of the ARM resource.
          readOnly: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        type:
          description: The type of Azure resource.
          readOnly: true
          type: string
      type: object
      x-ms-azure-resource: true
    Capability:
      description: Cosmos DB capability object
      properties:
        name:
          description: 'Name of the Cosmos DB capability. For example, "name":
            "EnableCassandra". Current values also include "EnableTable" and
            "EnableGremlin".'
          type: string
      type: object
    CassandraKeyspaceCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB Cassandra keyspace.
      properties:
        properties:
          $ref: "#/components/schemas/CassandraKeyspaceCreateUpdateProperties"
      required:
        - properties
      type: object
    CassandraKeyspaceCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB Cassandra keyspace.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/CassandraKeyspaceResource"
      required:
        - resource
        - options
      type: object
    CassandraKeyspaceGetProperties:
      allOf:
        - $ref: "#/components/schemas/CassandraKeyspaceResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB Cassandra keyspace
      type: object
    CassandraKeyspaceGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB Cassandra keyspace.
      properties:
        properties:
          $ref: "#/components/schemas/CassandraKeyspaceGetProperties"
      type: object
    CassandraKeyspaceListResult:
      description: The List operation response, that contains the Cassandra keyspaces and
        their properties.
      properties:
        value:
          description: List of Cassandra keyspaces and their properties.
          items:
            $ref: "#/components/schemas/CassandraKeyspaceGetResults"
          readOnly: true
          type: array
    CassandraKeyspaceResource:
      description: Cosmos DB Cassandra keyspace resource object
      properties:
        id:
          description: Name of the Cosmos DB Cassandra keyspace
          type: string
      required:
        - id
      type: object
    CassandraPartitionKey:
      description: Cosmos DB Cassandra table partition key
      properties:
        name:
          description: Name of the Cosmos DB Cassandra table partition key
          type: string
      type: object
    CassandraSchema:
      description: Cosmos DB Cassandra table schema
      properties:
        clusterKeys:
          description: List of cluster key.
          items:
            $ref: "#/components/schemas/ClusterKey"
          type: array
        columns:
          description: List of Cassandra table columns.
          items:
            $ref: "#/components/schemas/Column"
          type: array
        partitionKeys:
          description: List of partition key.
          items:
            $ref: "#/components/schemas/CassandraPartitionKey"
          type: array
      type: object
    CassandraTableCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB Cassandra table.
      properties:
        properties:
          $ref: "#/components/schemas/CassandraTableCreateUpdateProperties"
      required:
        - properties
      type: object
    CassandraTableCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB Cassandra table.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/CassandraTableResource"
      required:
        - resource
        - options
      type: object
    CassandraTableGetProperties:
      allOf:
        - $ref: "#/components/schemas/CassandraTableResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB Cassandra table
      type: object
    CassandraTableGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB Cassandra table.
      properties:
        properties:
          $ref: "#/components/schemas/CassandraTableGetProperties"
      type: object
    CassandraTableListResult:
      description: The List operation response, that contains the Cassandra tables and
        their properties.
      properties:
        value:
          description: List of Cassandra tables and their properties.
          items:
            $ref: "#/components/schemas/CassandraTableGetResults"
          readOnly: true
          type: array
    CassandraTableResource:
      description: Cosmos DB Cassandra table resource object
      properties:
        defaultTtl:
          description: Time to live of the Cosmos DB Cassandra table
          type: integer
        id:
          description: Name of the Cosmos DB Cassandra table
          type: string
        schema:
          $ref: "#/components/schemas/CassandraSchema"
      required:
        - id
      type: object
    ClusterKey:
      description: Cosmos DB Cassandra table cluster key
      properties:
        name:
          description: Name of the Cosmos DB Cassandra table cluster key
          type: string
        orderBy:
          description: Order of the Cosmos DB Cassandra table cluster key, only support
            "Asc" and "Desc"
          type: string
      type: object
    Column:
      description: Cosmos DB Cassandra table column
      properties:
        name:
          description: Name of the Cosmos DB Cassandra table column
          type: string
        type:
          description: Type of the Cosmos DB Cassandra table column
          type: string
      type: object
    ConflictResolutionPolicy:
      description: The conflict resolution policy for the container.
      properties:
        conflictResolutionPath:
          description: The conflict resolution path in the case of LastWriterWins mode.
          type: string
        conflictResolutionProcedure:
          description: The procedure to resolve conflicts in the case of custom mode.
          type: string
        mode:
          default: LastWriterWins
          description: Indicates the conflict resolution mode.
          enum:
            - LastWriterWins
            - Custom
          type: string
          x-ms-enum:
            modelAsString: true
            name: ConflictResolutionMode
      type: object
    ConnectorOffer:
      description: The cassandra connector offer type for the Cosmos DB C* database account.
      enum:
        - Small
      type: string
      x-ms-enum:
        modelAsString: true
        name: ConnectorOffer
    ConsistencyPolicy:
      description: The consistency policy for the Cosmos DB database account.
      properties:
        defaultConsistencyLevel:
          description: The default consistency level and configuration settings of the
            Cosmos DB account.
          enum:
            - Eventual
            - Session
            - BoundedStaleness
            - Strong
            - ConsistentPrefix
          type: string
          x-ms-enum:
            modelAsString: false
            name: DefaultConsistencyLevel
        maxIntervalInSeconds:
          description: When used with the Bounded Staleness consistency level, this value
            represents the time amount of staleness (in seconds) tolerated.
            Accepted range for this value is 5 - 86400. Required when
            defaultConsistencyPolicy is set to 'BoundedStaleness'.
          format: int32
          maximum: 86400
          minimum: 5
          type: integer
        maxStalenessPrefix:
          description: When used with the Bounded Staleness consistency level, this value
            represents the number of stale requests tolerated. Accepted range
            for this value is 1 – 2,147,483,647. Required when
            defaultConsistencyPolicy is set to 'BoundedStaleness'.
          format: int64
          maximum: 2147483647
          minimum: 1
          type: integer
      required:
        - defaultConsistencyLevel
      type: object
    ContainerPartitionKey:
      description: The configuration of the partition key to be used for partitioning data
        into multiple partitions
      properties:
        kind:
          default: Hash
          description: Indicates the kind of algorithm used for partitioning
          enum:
            - Hash
            - Range
          type: string
          x-ms-enum:
            modelAsString: true
            name: PartitionKind
        paths:
          description: List of paths using which data within the container can be
            partitioned
          items:
            $ref: "#/components/schemas/Path"
          type: array
      type: object
    CreateUpdateOptions:
      additionalProperties:
        type: string
      description: CreateUpdateOptions are a list of key-value pairs that describe the
        resource. Supported keys are "If-Match", "If-None-Match",
        "Session-Token" and "Throughput"
      type: object
    DatabaseAccountConnectionString:
      description: Connection string for the Cosmos DB account
      properties:
        connectionString:
          description: Value of the connection string
          readOnly: true
          type: string
        description:
          description: Description of the connection string
          readOnly: true
          type: string
    DatabaseAccountCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB database accounts.
      properties:
        kind:
          default: GlobalDocumentDB
          description: Indicates the type of database account. This can only be set at
            database account creation.
          enum:
            - GlobalDocumentDB
            - MongoDB
            - Parse
          type: string
          x-ms-enum:
            modelAsString: true
            name: DatabaseAccountKind
        properties:
          $ref: "#/components/schemas/DatabaseAccountCreateUpdateProperties"
      required:
        - properties
      type: object
    DatabaseAccountCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB database accounts.
      properties:
        capabilities:
          description: List of Cosmos DB capabilities for the account
          items:
            $ref: "#/components/schemas/Capability"
          type: array
        connectorOffer:
          $ref: "#/components/schemas/ConnectorOffer"
        consistencyPolicy:
          $ref: "#/components/schemas/ConsistencyPolicy"
        databaseAccountOfferType:
          $ref: "#/components/schemas/DatabaseAccountOfferType"
        enableAutomaticFailover:
          description: Enables automatic failover of the write region in the rare event
            that the region is unavailable due to an outage. Automatic failover
            will result in a new write region for the account and is chosen
            based on the failover priorities configured for the account.
          type: boolean
        enableCassandraConnector:
          description: Enables the cassandra connector on the Cosmos DB C* account
          type: boolean
        enableMultipleWriteLocations:
          description: Enables the account to write in multiple locations
          type: boolean
        ipRangeFilter:
          $ref: "#/components/schemas/IPRangeFilter"
        isVirtualNetworkFilterEnabled:
          description: Flag to indicate whether to enable/disable Virtual Network ACL rules.
          type: boolean
        locations:
          description: An array that contains the georeplication locations enabled for the
            Cosmos DB account.
          items:
            $ref: "#/components/schemas/Location"
          type: array
        virtualNetworkRules:
          description: List of Virtual Network ACL rules configured for the Cosmos DB
            account.
          items:
            $ref: "#/components/schemas/VirtualNetworkRule"
          type: array
      required:
        - locations
        - databaseAccountOfferType
      type: object
    DatabaseAccountGetProperties:
      description: Properties for the database account.
      properties:
        capabilities:
          description: List of Cosmos DB capabilities for the account
          items:
            $ref: "#/components/schemas/Capability"
          type: array
        connectorOffer:
          $ref: "#/components/schemas/ConnectorOffer"
        consistencyPolicy:
          $ref: "#/components/schemas/ConsistencyPolicy"
        databaseAccountOfferType:
          $ref: "#/components/schemas/DatabaseAccountOfferType"
        documentEndpoint:
          description: The connection endpoint for the Cosmos DB database account.
          readOnly: true
          type: string
        enableAutomaticFailover:
          description: Enables automatic failover of the write region in the rare event
            that the region is unavailable due to an outage. Automatic failover
            will result in a new write region for the account and is chosen
            based on the failover priorities configured for the account.
          type: boolean
        enableCassandraConnector:
          description: Enables the cassandra connector on the Cosmos DB C* account
          type: boolean
        enableMultipleWriteLocations:
          description: Enables the account to write in multiple locations
          type: boolean
        failoverPolicies:
          description: An array that contains the regions ordered by their failover
            priorities.
          items:
            $ref: "#/components/schemas/FailoverPolicy"
          readOnly: true
          type: array
        ipRangeFilter:
          $ref: "#/components/schemas/IPRangeFilter"
        isVirtualNetworkFilterEnabled:
          description: Flag to indicate whether to enable/disable Virtual Network ACL rules.
          type: boolean
        provisioningState:
          $ref: "#/components/schemas/ProvisioningState"
        readLocations:
          description: An array that contains of the read locations enabled for the Cosmos
            DB account.
          items:
            $ref: "#/components/schemas/Location"
          readOnly: true
          type: array
        virtualNetworkRules:
          description: List of Virtual Network ACL rules configured for the Cosmos DB
            account.
          items:
            $ref: "#/components/schemas/VirtualNetworkRule"
          type: array
        writeLocations:
          description: An array that contains the write location for the Cosmos DB account.
          items:
            $ref: "#/components/schemas/Location"
          readOnly: true
          type: array
      type: object
    DatabaseAccountGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB database account.
      properties:
        kind:
          default: GlobalDocumentDB
          description: Indicates the type of database account. This can only be set at
            database account creation.
          enum:
            - GlobalDocumentDB
            - MongoDB
            - Parse
          type: string
          x-ms-enum:
            modelAsString: true
            name: DatabaseAccountKind
        properties:
          $ref: "#/components/schemas/DatabaseAccountGetProperties"
      type: object
    DatabaseAccountListConnectionStringsResult:
      description: The connection strings for the given database account.
      properties:
        connectionStrings:
          description: An array that contains the connection strings for the Cosmos DB
            account.
          items:
            $ref: "#/components/schemas/DatabaseAccountConnectionString"
          type: array
    DatabaseAccountListKeysResult:
      allOf:
        - $ref: "#/components/schemas/DatabaseAccountListReadOnlyKeysResult"
      description: The access keys for the given database account.
      properties:
        primaryMasterKey:
          description: Base 64 encoded value of the primary read-write key.
          readOnly: true
          type: string
        secondaryMasterKey:
          description: Base 64 encoded value of the secondary read-write key.
          readOnly: true
          type: string
    DatabaseAccountListReadOnlyKeysResult:
      description: The read-only access keys for the given database account.
      properties:
        primaryReadonlyMasterKey:
          description: Base 64 encoded value of the primary read-only key.
          readOnly: true
          type: string
        secondaryReadonlyMasterKey:
          description: Base 64 encoded value of the secondary read-only key.
          readOnly: true
          type: string
    DatabaseAccountOfferType:
      description: The offer type for the Cosmos DB database account.
      enum:
        - Standard
      type: string
      x-ms-enum:
        modelAsString: false
        name: DatabaseAccountOfferType
    DatabaseAccountPatchParameters:
      description: Parameters for patching Azure Cosmos DB database account properties.
      properties:
        properties:
          $ref: "#/components/schemas/DatabaseAccountPatchProperties"
        tags:
          $ref: "#/components/schemas/Tags"
      type: object
    DatabaseAccountPatchProperties:
      description: Properties to update Azure Cosmos DB database accounts.
      properties:
        capabilities:
          description: List of Cosmos DB capabilities for the account
          items:
            $ref: "#/components/schemas/Capability"
          type: array
      type: object
    DatabaseAccountRegenerateKeyParameters:
      description: Parameters to regenerate the keys within the database account.
      properties:
        keyKind:
          description: The access key to regenerate.
          enum:
            - primary
            - secondary
            - primaryReadonly
            - secondaryReadonly
          type: string
          x-ms-enum:
            modelAsString: true
            name: KeyKind
      required:
        - keyKind
      type: object
    DatabaseAccountsListResult:
      description: The List operation response, that contains the database accounts and
        their properties.
      properties:
        value:
          description: List of database account and their properties.
          items:
            $ref: "#/components/schemas/DatabaseAccountGetResults"
          readOnly: true
          type: array
    ErrorResponse:
      description: Error Response.
      properties:
        code:
          description: Error code.
          type: string
        message:
          description: Error message indicating why the operation failed.
          type: string
    ExcludedPath:
      properties:
        path:
          description: The path for which the indexing behavior applies to. Index paths
            typically start with root and end with wildcard (/path/*)
          type: string
      type: object
    ExtendedResourceProperties:
      description: The system generated resource properties associated with SQL databases,
        SQL containers, Gremlin databases and Gremlin graphs.
      properties:
        _etag:
          description: A system generated property representing the resource etag required
            for optimistic concurrency control.
          readOnly: true
          type: string
        _rid:
          description: A system generated property. A unique identifier.
          readOnly: true
          type: string
        _ts:
          description: A system generated property that denotes the last updated timestamp
            of the resource.
          readOnly: true
      type: object
    FailoverPolicies:
      description: The list of new failover policies for the failover priority change.
      properties:
        failoverPolicies:
          description: List of failover policies.
          items:
            $ref: "#/components/schemas/FailoverPolicy"
          type: array
      required:
        - failoverPolicies
    FailoverPolicy:
      description: The failover policy for a given region of a database account.
      properties:
        failoverPriority:
          description: The failover priority of the region. A failover priority of 0
            indicates a write region. The maximum value for a failover priority
            = (total number of regions - 1). Failover priority values must be
            unique for each of the regions in which the database account exists.
          format: int32
          minimum: 0
          type: integer
        id:
          description: "The unique identifier of the region in which the database account
            replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;."
          readOnly: true
          type: string
        locationName:
          description: The name of the region in which the database account exists.
          type: string
      type: object
    GremlinDatabaseCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB Gremlin database.
      properties:
        properties:
          $ref: "#/components/schemas/GremlinDatabaseCreateUpdateProperties"
      required:
        - properties
      type: object
    GremlinDatabaseCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB Gremlin database.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/GremlinDatabaseResource"
      required:
        - resource
        - options
      type: object
    GremlinDatabaseGetProperties:
      allOf:
        - $ref: "#/components/schemas/GremlinDatabaseResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB SQL database
      type: object
    GremlinDatabaseGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB Gremlin database.
      properties:
        properties:
          $ref: "#/components/schemas/GremlinDatabaseGetProperties"
      type: object
    GremlinDatabaseListResult:
      description: The List operation response, that contains the Gremlin databases and
        their properties.
      properties:
        value:
          description: List of Gremlin databases and their properties.
          items:
            $ref: "#/components/schemas/GremlinDatabaseGetResults"
          readOnly: true
          type: array
    GremlinDatabaseResource:
      description: Cosmos DB Gremlin database resource object
      properties:
        id:
          description: Name of the Cosmos DB Gremlin database
          type: string
      required:
        - id
      type: object
    GremlinGraphCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB Gremlin graph.
      properties:
        properties:
          $ref: "#/components/schemas/GremlinGraphCreateUpdateProperties"
      required:
        - properties
      type: object
    GremlinGraphCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB Gremlin graph.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/GremlinGraphResource"
      required:
        - resource
        - options
      type: object
    GremlinGraphGetProperties:
      allOf:
        - $ref: "#/components/schemas/GremlinGraphResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB Gremlin graph
      type: object
    GremlinGraphGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB Gremlin graph.
      properties:
        properties:
          $ref: "#/components/schemas/GremlinGraphGetProperties"
      type: object
    GremlinGraphListResult:
      description: The List operation response, that contains the graphs and their
        properties.
      properties:
        value:
          description: List of graphs and their properties.
          items:
            $ref: "#/components/schemas/GremlinGraphGetResults"
          readOnly: true
          type: array
    GremlinGraphResource:
      description: Cosmos DB Gremlin graph resource object
      properties:
        conflictResolutionPolicy:
          $ref: "#/components/schemas/ConflictResolutionPolicy"
        defaultTtl:
          description: Default time to live
          type: integer
        id:
          description: Name of the Cosmos DB Gremlin graph
          type: string
        indexingPolicy:
          $ref: "#/components/schemas/IndexingPolicy"
        partitionKey:
          $ref: "#/components/schemas/ContainerPartitionKey"
        uniqueKeyPolicy:
          $ref: "#/components/schemas/UniqueKeyPolicy"
      required:
        - id
      type: object
    IPRangeFilter:
      description: "Cosmos DB Firewall Support: This value specifies the set of IP
        addresses or IP address ranges in CIDR form to be included as the
        allowed list of client IPs for a given database account. IP
        addresses/ranges must be comma separated and must not contain any
        spaces."
      type: string
    IncludedPath:
      description: The paths that are included in indexing
      properties:
        indexes:
          description: List of indexes for this path
          items:
            $ref: "#/components/schemas/Indexes"
          type: array
        path:
          description: The path for which the indexing behavior applies to. Index paths
            typically start with root and end with wildcard (/path/*)
          type: string
      type: object
    Indexes:
      description: The indexes for the path.
      properties:
        dataType:
          default: String
          description: The datatype for which the indexing behavior is applied to.
          enum:
            - String
            - Number
            - Point
            - Polygon
            - LineString
            - MultiPolygon
          type: string
          x-ms-enum:
            modelAsString: true
            name: DataType
        kind:
          default: Hash
          description: Indicates the type of index.
          enum:
            - Hash
            - Range
            - Spatial
          type: string
          x-ms-enum:
            modelAsString: true
            name: IndexKind
        precision:
          description: The precision of the index. -1 is maximum precision.
          type: integer
      type: object
    IndexingPolicy:
      description: Cosmos DB indexing policy
      properties:
        automatic:
          description: Indicates if the indexing policy is automatic
          type: boolean
        excludedPaths:
          description: List of paths to exclude from indexing
          items:
            $ref: "#/components/schemas/ExcludedPath"
          type: array
        includedPaths:
          description: List of paths to include in the indexing
          items:
            $ref: "#/components/schemas/IncludedPath"
          type: array
        indexingMode:
          default: Consistent
          description: Indicates the indexing mode.
          enum:
            - Consistent
            - Lazy
            - None
          type: string
          x-ms-enum:
            modelAsString: true
            name: IndexingMode
      type: object
    Key:
      description: A Key.
      type: string
    Location:
      description: A region in which the Azure Cosmos DB database account is deployed.
      properties:
        documentEndpoint:
          description: "The connection endpoint for the specific region. Example:
            https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.co\
            m:443/"
          readOnly: true
          type: string
        failoverPriority:
          description: The failover priority of the region. A failover priority of 0
            indicates a write region. The maximum value for a failover priority
            = (total number of regions - 1). Failover priority values must be
            unique for each of the regions in which the database account exists.
          format: int32
          minimum: 0
          type: integer
        id:
          description: "The unique identifier of the region within the database account.
            Example: &lt;accountName&gt;-&lt;locationName&gt;."
          readOnly: true
          type: string
        isZoneRedundant:
          description: Flag to indicate whether or not this region is an AvailabilityZone
            region
          type: boolean
        locationName:
          description: The name of the region.
          type: string
        provisioningState:
          $ref: "#/components/schemas/ProvisioningState"
      type: object
    Metric:
      description: Metric data
      properties:
        endTime:
          description: The end time for the metric (ISO-8601 format).
          format: date-time
          readOnly: true
          type: string
        metricValues:
          description: The metric values for the specified time window and timestep.
          items:
            $ref: "#/components/schemas/MetricValue"
          readOnly: true
          type: array
        name:
          $ref: "#/components/schemas/MetricName"
        startTime:
          description: The start time for the metric (ISO-8601 format).
          format: date-time
          readOnly: true
          type: string
        timeGrain:
          description: The time grain to be used to summarize the metric values.
          readOnly: true
          type: string
        unit:
          $ref: "#/components/schemas/UnitType"
    MetricAvailability:
      description: The availability of the metric.
      properties:
        retention:
          description: The retention for the metric values.
          readOnly: true
          type: string
        timeGrain:
          description: The time grain to be used to summarize the metric values.
          readOnly: true
          type: string
    MetricDefinition:
      description: The definition of a metric.
      properties:
        metricAvailabilities:
          description: The list of metric availabilities for the account.
          items:
            $ref: "#/components/schemas/MetricAvailability"
          readOnly: true
          type: array
        name:
          $ref: "#/components/schemas/MetricName"
        primaryAggregationType:
          description: The primary aggregation type of the metric.
          enum:
            - None
            - Average
            - Total
            - Minimum
            - Maximum
            - Last
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: true
            name: PrimaryAggregationType
        resourceUri:
          description: The resource uri of the database.
          readOnly: true
          type: string
        unit:
          $ref: "#/components/schemas/UnitType"
    MetricDefinitionsListResult:
      description: The response to a list metric definitions request.
      properties:
        value:
          description: The list of metric definitions for the account.
          items:
            $ref: "#/components/schemas/MetricDefinition"
          readOnly: true
          type: array
    MetricListResult:
      description: The response to a list metrics request.
      properties:
        value:
          description: The list of metrics for the account.
          items:
            $ref: "#/components/schemas/Metric"
          readOnly: true
          type: array
    MetricName:
      description: A metric name.
      properties:
        localizedValue:
          description: The friendly name of the metric.
          readOnly: true
          type: string
        value:
          description: The name of the metric.
          readOnly: true
          type: string
    MetricValue:
      description: Represents metrics values.
      properties:
        _count:
          description: The number of values for the metric.
          format: int32
          readOnly: true
          type: number
        average:
          description: The average value of the metric.
          format: double
          readOnly: true
          type: number
        maximum:
          description: The max value of the metric.
          format: double
          readOnly: true
          type: number
        minimum:
          description: The min value of the metric.
          format: double
          readOnly: true
          type: number
        timestamp:
          description: The metric timestamp (ISO-8601 format).
          format: date-time
          readOnly: true
          type: string
        total:
          description: The total value of the metric.
          format: double
          readOnly: true
          type: number
    MongoDBCollectionCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB MongoDB collection.
      properties:
        properties:
          $ref: "#/components/schemas/MongoDBCollectionCreateUpdateProperties"
      required:
        - properties
      type: object
    MongoDBCollectionCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB MongoDB collection.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/MongoDBCollectionResource"
      required:
        - resource
        - options
      type: object
    MongoDBCollectionGetProperties:
      allOf:
        - $ref: "#/components/schemas/MongoDBCollectionResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB MongoDB collection
      type: object
    MongoDBCollectionGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB MongoDB collection.
      properties:
        properties:
          $ref: "#/components/schemas/MongoDBCollectionGetProperties"
      type: object
    MongoDBCollectionListResult:
      description: The List operation response, that contains the MongoDB collections and
        their properties.
      properties:
        value:
          description: List of MongoDB collections and their properties.
          items:
            $ref: "#/components/schemas/MongoDBCollectionGetResults"
          readOnly: true
          type: array
    MongoDBCollectionResource:
      description: Cosmos DB MongoDB collection resource object
      properties:
        id:
          description: Name of the Cosmos DB MongoDB collection
          type: string
        indexes:
          description: List of index keys
          items:
            $ref: "#/components/schemas/MongoIndex"
          type: array
        shardKey:
          $ref: "#/components/schemas/ShardKeys"
      required:
        - id
      type: object
    MongoDBDatabaseCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB MongoDB database.
      properties:
        properties:
          $ref: "#/components/schemas/MongoDBDatabaseCreateUpdateProperties"
      required:
        - properties
      type: object
    MongoDBDatabaseCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB MongoDB database.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/MongoDBDatabaseResource"
      required:
        - resource
        - options
      type: object
    MongoDBDatabaseGetProperties:
      allOf:
        - $ref: "#/components/schemas/MongoDBDatabaseResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB MongoDB database
      type: object
    MongoDBDatabaseGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB MongoDB database.
      properties:
        properties:
          $ref: "#/components/schemas/MongoDBDatabaseGetProperties"
      type: object
    MongoDBDatabaseListResult:
      description: The List operation response, that contains the MongoDB databases and
        their properties.
      properties:
        value:
          description: List of MongoDB databases and their properties.
          items:
            $ref: "#/components/schemas/MongoDBDatabaseGetResults"
          readOnly: true
          type: array
    MongoDBDatabaseResource:
      description: Cosmos DB MongoDB database resource object
      properties:
        id:
          description: Name of the Cosmos DB MongoDB database
          type: string
      required:
        - id
      type: object
    MongoIndex:
      description: Cosmos DB MongoDB collection index key
      properties:
        key:
          $ref: "#/components/schemas/MongoIndexKeys"
        options:
          $ref: "#/components/schemas/MongoIndexOptions"
      type: object
    MongoIndexKeys:
      description: Cosmos DB MongoDB collection resource object
      properties:
        keys:
          description: List of keys for each MongoDB collection in the Azure Cosmos DB
            service
          items:
            $ref: "#/components/schemas/Key"
          type: array
      type: object
    MongoIndexOptions:
      description: Cosmos DB MongoDB collection index options
      properties:
        expireAfterSeconds:
          description: Expire after seconds
          type: integer
        unique:
          description: Is unique or not
          type: boolean
      type: object
    Operation:
      description: REST API operation
      properties:
        display:
          description: The object that represents the operation.
          properties:
            Description:
              description: Description of operation
              type: string
            Operation:
              description: "Operation type: Read, write, delete, etc."
              type: string
            Provider:
              description: "Service provider: Microsoft.ResourceProvider"
              type: string
            Resource:
              description: "Resource on which the operation is performed: Profile,
                endpoint, etc."
              type: string
        name:
          description: "Operation name: {provider}/{resource}/{operation}"
          type: string
      type: object
    OperationListResult:
      description: Result of the request to list Resource Provider operations. It contains
        a list of operations and a URL link to get the next set of results.
      properties:
        nextLink:
          description: URL to get the next set of operation list results if there are any.
          type: string
        value:
          description: List of operations supported by the Resource Provider.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
    PartitionMetric:
      allOf:
        - $ref: "#/components/schemas/Metric"
      description: The metric values for a single partition.
      properties:
        partitionId:
          description: The partition id (GUID identifier) of the metric values.
          readOnly: true
          type: string
        partitionKeyRangeId:
          description: The partition key range id (integer identifier) of the metric values.
          readOnly: true
          type: string
    PartitionMetricListResult:
      description: The response to a list partition metrics request.
      properties:
        value:
          description: The list of partition-level metrics for the account.
          items:
            $ref: "#/components/schemas/PartitionMetric"
          readOnly: true
          type: array
    PartitionUsage:
      allOf:
        - $ref: "#/components/schemas/Usage"
      description: The partition level usage data for a usage request.
      properties:
        partitionId:
          description: The partition id (GUID identifier) of the usages.
          readOnly: true
          type: string
        partitionKeyRangeId:
          description: The partition key range id (integer identifier) of the usages.
          readOnly: true
          type: string
    PartitionUsagesResult:
      description: The response to a list partition level usage request.
      properties:
        value:
          description: The list of partition-level usages for the database. A usage is a
            point in time metric
          items:
            $ref: "#/components/schemas/PartitionUsage"
          readOnly: true
          type: array
    Path:
      description: A path. These typically start with root (/path)
      type: string
    PercentileMetric:
      description: Percentile Metric data
      properties:
        endTime:
          description: The end time for the metric (ISO-8601 format).
          format: date-time
          readOnly: true
          type: string
        metricValues:
          description: The percentile metric values for the specified time window and
            timestep.
          items:
            $ref: "#/components/schemas/PercentileMetricValue"
          readOnly: true
          type: array
        name:
          $ref: "#/components/schemas/MetricName"
        startTime:
          description: The start time for the metric (ISO-8601 format).
          format: date-time
          readOnly: true
          type: string
        timeGrain:
          description: The time grain to be used to summarize the metric values.
          readOnly: true
          type: string
        unit:
          $ref: "#/components/schemas/UnitType"
    PercentileMetricListResult:
      description: The response to a list percentile metrics request.
      properties:
        value:
          description: The list of percentile metrics for the account.
          items:
            $ref: "#/components/schemas/PercentileMetric"
          readOnly: true
          type: array
    PercentileMetricValue:
      allOf:
        - $ref: "#/components/schemas/MetricValue"
      description: Represents percentile metrics values.
      properties:
        P10:
          description: The 10th percentile value for the metric.
          format: double
          readOnly: true
          type: number
        P25:
          description: The 25th percentile value for the metric.
          format: double
          readOnly: true
          type: number
        P50:
          description: The 50th percentile value for the metric.
          format: double
          readOnly: true
          type: number
        P75:
          description: The 75th percentile value for the metric.
          format: double
          readOnly: true
          type: number
        P90:
          description: The 90th percentile value for the metric.
          format: double
          readOnly: true
          type: number
        P95:
          description: The 95th percentile value for the metric.
          format: double
          readOnly: true
          type: number
        P99:
          description: The 99th percentile value for the metric.
          format: double
          readOnly: true
          type: number
    ProvisioningState:
      description: The status of the Cosmos DB account at the time the operation was
        called. The status can be one of following. 'Creating' – the Cosmos DB
        account is being created. When an account is in Creating state, only
        properties that are specified as input for the Create Cosmos DB account
        operation are returned. 'Succeeded' – the Cosmos DB account is active
        for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting'
        – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB
        account failed creation.
      readOnly: true
      type: string
    RegionForOnlineOffline:
      description: Cosmos DB region to online or offline.
      properties:
        region:
          description: Cosmos DB region, with spaces between words and each word
            capitalized.
          type: string
      required:
        - region
    ShardKeys:
      additionalProperties:
        type: string
      description: The shard key and partition kind pair, only support "Hash" partition kind
      type: object
    SqlContainerCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB container.
      properties:
        properties:
          $ref: "#/components/schemas/SqlContainerCreateUpdateProperties"
      required:
        - properties
      type: object
    SqlContainerCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB container.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/SqlContainerResource"
      required:
        - resource
        - options
      type: object
    SqlContainerGetProperties:
      allOf:
        - $ref: "#/components/schemas/SqlContainerResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB container
      type: object
    SqlContainerGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB container.
      properties:
        properties:
          $ref: "#/components/schemas/SqlContainerGetProperties"
      type: object
    SqlContainerListResult:
      description: The List operation response, that contains the containers and their
        properties.
      properties:
        value:
          description: List of containers and their properties.
          items:
            $ref: "#/components/schemas/SqlContainerGetResults"
          readOnly: true
          type: array
    SqlContainerResource:
      description: Cosmos DB SQL container resource object
      properties:
        conflictResolutionPolicy:
          $ref: "#/components/schemas/ConflictResolutionPolicy"
        defaultTtl:
          description: Default time to live
          type: integer
        id:
          description: Name of the Cosmos DB SQL container
          type: string
        indexingPolicy:
          $ref: "#/components/schemas/IndexingPolicy"
        partitionKey:
          $ref: "#/components/schemas/ContainerPartitionKey"
        uniqueKeyPolicy:
          $ref: "#/components/schemas/UniqueKeyPolicy"
      required:
        - id
      type: object
    SqlDatabaseCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB SQL database.
      properties:
        properties:
          $ref: "#/components/schemas/SqlDatabaseCreateUpdateProperties"
      required:
        - properties
      type: object
    SqlDatabaseCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB SQL database.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/SqlDatabaseResource"
      required:
        - resource
        - options
      type: object
    SqlDatabaseGetProperties:
      allOf:
        - $ref: "#/components/schemas/SqlDatabaseResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB SQL database
      properties:
        _colls:
          description: A system generated property that specified the addressable path of
            the collections resource.
          type: string
        _users:
          description: A system generated property that specifies the addressable path of
            the users resource.
          type: string
      type: object
    SqlDatabaseGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB SQL database.
      properties:
        properties:
          $ref: "#/components/schemas/SqlDatabaseGetProperties"
      type: object
    SqlDatabaseListResult:
      description: The List operation response, that contains the SQL databases and their
        properties.
      properties:
        value:
          description: List of SQL databases and their properties.
          items:
            $ref: "#/components/schemas/SqlDatabaseGetResults"
          readOnly: true
          type: array
    SqlDatabaseResource:
      description: Cosmos DB SQL database resource object
      properties:
        id:
          description: Name of the Cosmos DB SQL database
          type: string
      required:
        - id
      type: object
    SqlStoredProcedureCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB storedProcedure.
      properties:
        properties:
          $ref: "#/components/schemas/SqlStoredProcedureCreateUpdateProperties"
      required:
        - properties
      type: object
    SqlStoredProcedureCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB storedProcedure.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/SqlStoredProcedureResource"
      required:
        - resource
        - options
      type: object
    SqlStoredProcedureGetProperties:
      allOf:
        - $ref: "#/components/schemas/SqlStoredProcedureResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB StoredProcedure
      type: object
    SqlStoredProcedureGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB storedProcedure.
      properties:
        properties:
          $ref: "#/components/schemas/SqlStoredProcedureGetProperties"
      type: object
    SqlStoredProcedureListResult:
      description: The List operation response, that contains the storedProcedures and
        their properties.
      properties:
        value:
          description: List of storedProcedures and their properties.
          items:
            $ref: "#/components/schemas/SqlStoredProcedureGetResults"
          readOnly: true
          type: array
    SqlStoredProcedureResource:
      description: Cosmos DB SQL storedProcedure resource object
      properties:
        body:
          description: Body of the Stored Procedure
          type: string
        id:
          description: Name of the Cosmos DB SQL storedProcedure
          type: string
      required:
        - id
      type: object
    SqlTriggerCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB trigger.
      properties:
        properties:
          $ref: "#/components/schemas/SqlTriggerCreateUpdateProperties"
      required:
        - properties
      type: object
    SqlTriggerCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB trigger.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/SqlTriggerResource"
      required:
        - resource
        - options
      type: object
    SqlTriggerGetProperties:
      allOf:
        - $ref: "#/components/schemas/SqlTriggerResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB trigger
      type: object
    SqlTriggerGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB trigger.
      properties:
        properties:
          $ref: "#/components/schemas/SqlTriggerGetProperties"
      type: object
    SqlTriggerListResult:
      description: The List operation response, that contains the triggers and their
        properties.
      properties:
        value:
          description: List of triggers and their properties.
          items:
            $ref: "#/components/schemas/SqlTriggerGetResults"
          readOnly: true
          type: array
    SqlTriggerResource:
      description: Cosmos DB SQL trigger resource object
      properties:
        body:
          description: Body of the Trigger
          type: string
        id:
          description: Name of the Cosmos DB SQL trigger
          type: string
        triggerOperation:
          description: The operation the trigger is associated with
          enum:
            - All
            - Create
            - Update
            - Delete
            - Replace
          type: string
          x-ms-enum:
            modelAsString: true
            name: triggerOperation
        triggerType:
          description: Type of the Trigger
          enum:
            - Pre
            - Post
          type: string
          x-ms-enum:
            modelAsString: true
            name: triggerType
      required:
        - id
      type: object
    SqlUserDefinedFunctionCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB userDefinedFunction.
      properties:
        properties:
          $ref: "#/components/schemas/SqlUserDefinedFunctionCreateUpdateProperties"
      required:
        - properties
      type: object
    SqlUserDefinedFunctionCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB userDefinedFunction.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/SqlUserDefinedFunctionResource"
      required:
        - resource
        - options
      type: object
    SqlUserDefinedFunctionGetProperties:
      allOf:
        - $ref: "#/components/schemas/SqlUserDefinedFunctionResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos DB userDefinedFunction
      type: object
    SqlUserDefinedFunctionGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB userDefinedFunction.
      properties:
        properties:
          $ref: "#/components/schemas/SqlUserDefinedFunctionGetProperties"
      type: object
    SqlUserDefinedFunctionListResult:
      description: The List operation response, that contains the userDefinedFunctions and
        their properties.
      properties:
        value:
          description: List of userDefinedFunctions and their properties.
          items:
            $ref: "#/components/schemas/SqlUserDefinedFunctionGetResults"
          readOnly: true
          type: array
    SqlUserDefinedFunctionResource:
      description: Cosmos DB SQL userDefinedFunction resource object
      properties:
        body:
          description: Body of the User Defined Function
          type: string
        id:
          description: Name of the Cosmos DB SQL userDefinedFunction
          type: string
      required:
        - id
      type: object
    TableCreateUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to create and update Cosmos DB Table.
      properties:
        properties:
          $ref: "#/components/schemas/TableCreateUpdateProperties"
      required:
        - properties
      type: object
    TableCreateUpdateProperties:
      description: Properties to create and update Azure Cosmos DB Table.
      properties:
        options:
          $ref: "#/components/schemas/CreateUpdateOptions"
        resource:
          $ref: "#/components/schemas/TableResource"
      required:
        - resource
        - options
      type: object
    TableGetProperties:
      allOf:
        - $ref: "#/components/schemas/TableResource"
        - $ref: "#/components/schemas/ExtendedResourceProperties"
      description: The properties of an Azure Cosmos Table
      type: object
    TableGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB Table.
      properties:
        properties:
          $ref: "#/components/schemas/TableGetProperties"
      type: object
    TableListResult:
      description: The List operation response, that contains the Table and their
        properties.
      properties:
        value:
          description: List of Table and their properties.
          items:
            $ref: "#/components/schemas/TableGetResults"
          readOnly: true
          type: array
    TableResource:
      description: Cosmos DB table resource object
      properties:
        id:
          description: Name of the Cosmos DB table
          type: string
      required:
        - id
      type: object
    Tags:
      additionalProperties:
        type: string
      description: 'Tags are a list of key-value pairs that describe the resource. These
        tags can be used in viewing and grouping this resource (across resource
        groups). A maximum of 15 tags can be provided for a resource. Each tag
        must have a key no greater than 128 characters and value no greater than
        256 characters. For example, the default experience for a template type
        is set with "defaultExperience": "Cassandra". Current
        "defaultExperience" values also include "Table", "Graph", "DocumentDB",
        and "MongoDB".'
      type: object
    ThroughputSettingsGetProperties:
      allOf:
        - $ref: "#/components/schemas/ThroughputSettingsResource"
      description: The properties of an Azure Cosmos DB resource throughput
      type: object
    ThroughputSettingsGetResults:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: An Azure Cosmos DB resource throughput.
      properties:
        properties:
          $ref: "#/components/schemas/ThroughputSettingsGetProperties"
      type: object
    ThroughputSettingsResource:
      description: Cosmos DB resource throughput object
      properties:
        minimumThroughput:
          description: The minimum throughput of the resource
          readOnly: true
          type: string
        offerReplacePending:
          description: The throughput replace is pending
          readOnly: true
          type: string
        throughput:
          description: Value of the Cosmos DB resource throughput
          type: integer
      required:
        - throughput
      type: object
    ThroughputSettingsUpdateParameters:
      allOf:
        - $ref: "#/components/schemas/ARMResourceProperties"
      description: Parameters to update Cosmos DB resource throughput.
      properties:
        properties:
          $ref: "#/components/schemas/ThroughputSettingsUpdateProperties"
      required:
        - properties
      type: object
    ThroughputSettingsUpdateProperties:
      description: Properties to update Azure Cosmos DB resource throughput.
      properties:
        resource:
          $ref: "#/components/schemas/ThroughputSettingsResource"
      required:
        - resource
      type: object
    UniqueKey:
      description: The unique key on that enforces uniqueness constraint on documents in
        the collection in the Azure Cosmos DB service.
      properties:
        paths:
          description: List of paths must be unique for each document in the Azure Cosmos
            DB service
          items:
            $ref: "#/components/schemas/Path"
          type: array
      type: object
    UniqueKeyPolicy:
      description: The unique key policy configuration for specifying uniqueness
        constraints on documents in the collection in the Azure Cosmos DB
        service.
      properties:
        uniqueKeys:
          description: List of unique keys on that enforces uniqueness constraint on
            documents in the collection in the Azure Cosmos DB service.
          items:
            $ref: "#/components/schemas/UniqueKey"
          type: array
      type: object
    UnitType:
      description: The unit of the metric.
      enum:
        - Count
        - Bytes
        - Seconds
        - Percent
        - CountPerSecond
        - BytesPerSecond
        - Milliseconds
      readOnly: true
      type: string
      x-ms-enum:
        modelAsString: true
        name: UnitType
    Usage:
      description: The usage data for a usage request.
      properties:
        currentValue:
          description: Current value for this metric
          format: int64
          readOnly: true
          type: integer
        limit:
          description: Maximum value for this metric
          format: int64
          readOnly: true
          type: integer
        name:
          $ref: "#/components/schemas/MetricName"
        quotaPeriod:
          description: The quota period used to summarize the usage values.
          readOnly: true
          type: string
        unit:
          $ref: "#/components/schemas/UnitType"
    UsagesResult:
      description: The response to a list usage request.
      properties:
        value:
          description: The list of usages for the database. A usage is a point in time
            metric
          items:
            $ref: "#/components/schemas/Usage"
          readOnly: true
          type: array
    VirtualNetworkRule:
      description: Virtual Network ACL Rule object
      properties:
        id:
          description: "Resource ID of a subnet, for example:
            /subscriptions/{subscriptionId}/resourceGroups/{groupName}/provider\
            s/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{s\
            ubnetName}."
          type: string
        ignoreMissingVNetServiceEndpoint:
          description: Create firewall rule before the virtual network has vnet service
            endpoint enabled.
          type: boolean
      type: object
