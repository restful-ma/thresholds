openapi: 3.0.0
info:
  version: 2015-05-28
  x-release: v4
  title: AWS IoT
  description: <fullname>AWS IoT</fullname> <p>AWS IoT provides secure, bi-directional
    communication between Internet-connected devices (such as sensors,
    actuators, embedded devices, or smart appliances) and the AWS cloud. You can
    discover your custom IoT-Data endpoint to communicate with, configure rules
    for data processing and integration with other services, organize resources
    associated with each device (Registry), configure logging, and create and
    manage policies and credentials to authenticate devices.</p> <p>For more
    information about how AWS IoT works, see the <a
    href="https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html">Developer
    Guide</a>.</p> <p>For information about how to use the credentials provider
    for AWS IoT, see <a
    href="https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html">Authorizing
    Direct Calls to AWS Services</a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: iot
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iot-2015-05-28.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/iot/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  "/accept-certificate-transfer/{certificateId}":
    patch:
      operationId: AcceptCertificateTransfer
      description: <p>Accepts a pending certificate transfer. The default state of the
        certificate is INACTIVE.</p> <p>To check for pending certificate
        transfers, call <a>ListCertificates</a> to enumerate your
        certificates.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: TransferAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferAlreadyCompletedException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
        - name: setAsActive
          in: query
          required: false
          description: Specifies whether the certificate is active.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /billing-groups/addThingToBillingGroup:
    put:
      operationId: AddThingToBillingGroup
      description: Adds a thing to a billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddThingToBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                billingGroupName:
                  description: The name of the billing group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                billingGroupArn:
                  description: The ARN of the billing group.
                  type: string
                thingName:
                  description: The name of the thing to be added to the billing group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingArn:
                  description: The ARN of the thing to be added to the billing group.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /thing-groups/addThingToThingGroup:
    put:
      operationId: AddThingToThingGroup
      description: Adds a thing to a thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddThingToThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thingGroupName:
                  description: The name of the group to which you are adding a thing.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingGroupArn:
                  description: The ARN of the group to which you are adding a thing.
                  type: string
                thingName:
                  description: The name of the thing to add to a group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingArn:
                  description: The ARN of the thing to add to a group.
                  type: string
                overrideDynamicGroups:
                  description: Override dynamic thing groups with static thing groups when
                    10-group limit is reached. If a thing belongs to 10 thing
                    groups, and one or more of those groups are dynamic thing
                    groups, adding a thing to a static group removes the thing
                    from the last dynamic group.
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/jobs/{jobId}/targets":
    post:
      operationId: AssociateTargetsWithJob
      description: '<p>Associates a group with a continuous job. The following criteria
        must be met: </p> <ul> <li> <p>The job must have been created with the
        <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li>
        <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The
        total number of targets associated with a job must not exceed 100.</p>
        </li> </ul>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssociateTargetsWithJobResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The unique identifier you assigned to this job when it was created.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - targets
              properties:
                targets:
                  description: A list of thing group ARNs that define the targets of the
                    job.
                  type: array
                  items:
                    $ref: "#/components/schemas/TargetArn"
                  minItems: 1
                comment:
                  description: An optional comment string describing why the job was
                    associated with the targets.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/target-policies/{policyName}":
    put:
      operationId: AttachPolicy
      description: Attaches a policy to the specified target.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The name of the policy to attach.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target
              properties:
                target:
                  description: The <a
                    href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-security-identity.html">identity</a>
                    to which the policy is attached.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: DetachPolicy
      description: Detaches a policy from the specified target.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy to detach.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target
              properties:
                target:
                  description: The target from which the policy will be detached.
                  type: string
        required: true
  "/principal-policies/{policyName}#x-amzn-iot-principal":
    put:
      deprecated: true
      operationId: AttachPrincipalPolicy
      description: <p>Attaches the specified policy to the specified principal (certificate
        or other credential).</p> <p> <b>Note:</b> This API is deprecated.
        Please use <a>AttachPolicy</a> instead.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: x-amzn-iot-principal
          in: header
          required: true
          description: The principal, which can be a certificate ARN (as returned from the
            CreateCertificate operation) or an Amazon Cognito ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      deprecated: true
      operationId: DetachPrincipalPolicy
      description: <p>Removes the specified policy from the specified certificate.</p> <p>
        <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a>
        instead.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The name of the policy to detach.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: x-amzn-iot-principal
          in: header
          required: true
          description: <p>The principal.</p> <p>If the principal is a certificate, specify
            the certificate ARN. If the principal is an Amazon Cognito identity,
            specify the identity ID.</p>
          schema:
            type: string
  "/security-profiles/{securityProfileName}/targets#securityProfileTargetArn":
    put:
      operationId: AttachSecurityProfile
      description: Associates a Device Defender security profile with a thing group or this
        account. Each thing group or account can have up to five security
        profiles associated with it.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The security profile that is attached.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: securityProfileTargetArn
          in: query
          required: true
          description: The ARN of the target (thing group) to which the security profile is
            attached.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DetachSecurityProfile
      description: Disassociates a Device Defender security profile from a thing group or
        from this account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetachSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The security profile that is detached.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: securityProfileTargetArn
          in: query
          required: true
          description: The ARN of the thing group from which the security profile is
            detached.
          schema:
            type: string
  "/things/{thingName}/principals#x-amzn-principal":
    put:
      operationId: AttachThingPrincipal
      description: Attaches the specified principal to the specified thing. A principal can
        be X.509 certificates, IAM users, groups, and roles, Amazon Cognito
        identities or federated identities.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachThingPrincipalResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: x-amzn-principal
          in: header
          required: true
          description: The principal, such as a certificate or other credential.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DetachThingPrincipal
      description: <p>Detaches the specified principal from the specified thing. A
        principal can be X.509 certificates, IAM users, groups, and roles,
        Amazon Cognito identities or federated identities.</p> <note> <p>This
        call is asynchronous. It might take several seconds for the detachment
        to propagate.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetachThingPrincipalResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: x-amzn-principal
          in: header
          required: true
          description: If the principal is a certificate, this value must be ARN of the
            certificate. If the principal is an Amazon Cognito identity, this
            value must be the ID of the Amazon Cognito identity.
          schema:
            type: string
  "/audit/mitigationactions/tasks/{taskId}/cancel":
    put:
      operationId: CancelAuditMitigationActionsTask
      description: Cancels a mitigation action task that is in progress. If the task is not
        in progress, an InvalidRequestException occurs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelAuditMitigationActionsTaskResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: "The unique identifier for the task that you want to cancel. "
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/audit/tasks/{taskId}/cancel":
    put:
      operationId: CancelAuditTask
      description: Cancels an audit that is in progress. The audit can be either scheduled
        or on-demand. If the audit is not in progress, an
        "InvalidRequestException" occurs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelAuditTaskResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: The ID of the audit you want to cancel. You can only cancel an audit
            that is "IN_PROGRESS".
          schema:
            type: string
            minLength: 1
            maxLength: 40
            pattern: "[a-zA-Z0-9\\-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/cancel-certificate-transfer/{certificateId}":
    patch:
      operationId: CancelCertificateTransfer
      description: <p>Cancels a pending transfer for the specified certificate.</p> <p>
        <b>Note</b> Only the transfer source account can use this operation to
        cancel a transfer. (Transfer destinations can use
        <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT
        returns the certificate to the source account in the INACTIVE state.
        After the destination account has accepted the transfer, the transfer
        cannot be cancelled.</p> <p>After a certificate transfer is cancelled,
        the status of the certificate changes from PENDING_TRANSFER to
        INACTIVE.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: TransferAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferAlreadyCompletedException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/jobs/{jobId}/cancel":
    put:
      operationId: CancelJob
      description: Cancels a job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelJobResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The unique identifier you assigned to this job when it was created.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
        - name: force
          in: query
          required: false
          description: <p>(Optional) If <code>true</code> job executions with status
            "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job
            executions with status "QUEUED" are canceled. The default is
            <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS",
            will cause a device which is executing the job to be unable to
            update the job execution status. Use caution and ensure that each
            device executing a job which is canceled is able to recover to a
            valid state.</p>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reasonCode:
                  description: (Optional)A reason code string that explains why the job was
                    canceled.
                  type: string
                  pattern: "[\\p{Upper}\\p{Digit}_]+"
                  maxLength: 128
                comment:
                  description: An optional comment string describing why the job was
                    canceled.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/things/{thingName}/jobs/{jobId}/cancel":
    put:
      operationId: CancelJobExecution
      description: Cancels the execution of a job for a given thing.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InvalidStateTransitionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateTransitionException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The ID of the job to be canceled.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
        - name: thingName
          in: path
          required: true
          description: The name of the thing whose execution of the job will be canceled.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: force
          in: query
          required: false
          description: <p>(Optional) If <code>true</code> the job execution will be
            canceled if it has status IN_PROGRESS or QUEUED, otherwise the job
            execution will be canceled only if it has status QUEUED. If you
            attempt to cancel a job execution that is IN_PROGRESS, and you do
            not set <code>force</code> to <code>true</code>, then an
            <code>InvalidStateTransitionException</code> will be thrown. The
            default is <code>false</code>.</p> <p>Canceling a job execution
            which is "IN_PROGRESS", will cause the device to be unable to update
            the job execution status. Use caution and ensure that the device is
            able to recover to a valid state.</p>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expectedVersion:
                  description: (Optional) The expected current version of the job
                    execution. Each time you update the job execution, its
                    version is incremented. If the version of the job execution
                    stored in Jobs does not match, the update is rejected with a
                    VersionMismatch error, and an ErrorResponse that contains
                    the current job execution status data is returned. (This
                    makes it unnecessary to perform a separate
                    DescribeJobExecution request in order to obtain the job
                    execution status data.)
                  type: integer
                statusDetails:
                  description: A collection of name/value pairs that describe the status of
                    the job execution. If not specified, the statusDetails are
                    unchanged. You can specify at most 10 name/value pairs.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/DetailsValue"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /default-authorizer:
    delete:
      operationId: ClearDefaultAuthorizer
      description: Clears the default authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClearDefaultAuthorizerResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeDefaultAuthorizer
      description: Describes the default authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeDefaultAuthorizerResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
    post:
      operationId: SetDefaultAuthorizer
      description: Sets the default authorizer. This will be used if a websocket connection
        is made without specifying an authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetDefaultAuthorizerResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizerName
              properties:
                authorizerName:
                  description: The authorizer name.
                  type: string
                  pattern: "[\\w=,@-]+"
                  minLength: 1
                  maxLength: 128
        required: true
  "/authorizer/{authorizerName}":
    post:
      operationId: CreateAuthorizer
      description: Creates an authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAuthorizerResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: authorizerName
          in: path
          required: true
          description: The authorizer name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizerFunctionArn
                - tokenKeyName
                - tokenSigningPublicKeys
              properties:
                authorizerFunctionArn:
                  description: The ARN of the authorizer's Lambda function.
                  type: string
                tokenKeyName:
                  description: The name of the token key used to extract the token from the
                    HTTP headers.
                  type: string
                  pattern: "[a-zA-Z0-9_-]+"
                  minLength: 1
                  maxLength: 128
                tokenSigningPublicKeys:
                  description: The public keys used to verify the digital signature
                    returned by your custom authentication service.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/KeyValue"
                status:
                  description: The status of the create authorizer request.
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAuthorizerResponse"
        "480":
          description: DeleteConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConflictException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: authorizerName
          in: path
          required: true
          description: The name of the authorizer to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
    get:
      operationId: DescribeAuthorizer
      description: Describes an authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAuthorizerResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: authorizerName
          in: path
          required: true
          description: The name of the authorizer to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
    put:
      operationId: UpdateAuthorizer
      description: Updates an authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAuthorizerResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: authorizerName
          in: path
          required: true
          description: The authorizer name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizerFunctionArn:
                  description: The ARN of the authorizer's Lambda function.
                  type: string
                tokenKeyName:
                  description: "The key used to extract the token from the HTTP headers. "
                  type: string
                  pattern: "[a-zA-Z0-9_-]+"
                  minLength: 1
                  maxLength: 128
                tokenSigningPublicKeys:
                  description: The public keys used to verify the token signature.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/KeyValue"
                status:
                  description: The status of the update authorizer request.
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
        required: true
  "/billing-groups/{billingGroupName}":
    post:
      operationId: CreateBillingGroup
      description: Creates a billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: billingGroupName
          in: path
          required: true
          description: The name you wish to give to the billing group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                billingGroupProperties:
                  description: The properties of a billing group.
                  type: object
                  properties:
                    billingGroupDescription:
                      $ref: "#/components/schemas/BillingGroupDescription"
                tags:
                  description: Metadata which can be used to manage the billing group.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteBillingGroup
      description: Deletes the billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: billingGroupName
          in: path
          required: true
          description: The name of the billing group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: expectedVersion
          in: query
          required: false
          description: The expected version of the billing group. If the version of the
            billing group does not match the expected version specified in the
            request, the <code>DeleteBillingGroup</code> request is rejected
            with a <code>VersionConflictException</code>.
          schema:
            type: integer
    get:
      operationId: DescribeBillingGroup
      description: Returns information about a billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: billingGroupName
          in: path
          required: true
          description: The name of the billing group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    patch:
      operationId: UpdateBillingGroup
      description: Updates information about the billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: billingGroupName
          in: path
          required: true
          description: The name of the billing group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - billingGroupProperties
              properties:
                billingGroupProperties:
                  description: The properties of a billing group.
                  type: object
                  properties:
                    billingGroupDescription:
                      $ref: "#/components/schemas/BillingGroupDescription"
                expectedVersion:
                  description: The expected version of the billing group. If the version of
                    the billing group does not match the expected version
                    specified in the request, the
                    <code>UpdateBillingGroup</code> request is rejected with a
                    <code>VersionConflictException</code>.
                  type: integer
        required: true
  /certificates:
    post:
      operationId: CreateCertificateFromCsr
      description: <p>Creates an X.509 certificate using the specified certificate signing
        request.</p> <p> <b>Note:</b> The CSR must include a public key that is
        either an RSA key with a length of at least 2048 bits or an ECC key from
        NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same
        certificate signing request (CSR) results in a distinct certificate.</p>
        <p>You can create multiple certificates in a batch by creating a
        directory, copying multiple .csr files into that directory, and then
        specifying that directory on the command line. The following commands
        show how to create a batch of certificates given a batch of CSRs.</p>
        <p>Assuming a set of CSRs are located inside of the directory
        my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls
        my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr
        --certificate-signing-request file://my-csr-directory/{}</p> <p>This
        command lists all of the CSRs in my-csr-directory and pipes each CSR
        file name to the aws iot create-certificate-from-csr AWS CLI command to
        create a certificate for the corresponding CSR.</p> <p>The aws iot
        create-certificate-from-csr part of the command can also be run in
        parallel to speed up the certificate creation process:</p> <p>$ ls
        my-csr-directory/ | xargs -P 10 -I {} aws iot
        create-certificate-from-csr --certificate-signing-request
        file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to
        create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls
        -Name my-csr-directory | %{aws iot create-certificate-from-csr
        --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a
        Windows command prompt, the command to create certificates for all CSRs
        in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd
        /c aws iot create-certificate-from-csr --certificate-signing-request
        file://@path"</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCertificateFromCsrResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: setAsActive
          in: query
          required: false
          description: Specifies whether the certificate is active.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - certificateSigningRequest
              properties:
                certificateSigningRequest:
                  description: The certificate signing request (CSR).
                  type: string
                  minLength: 1
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListCertificates
      description: <p>Lists the certificates registered in your AWS account.</p> <p>The
        results are paginated with a default page size of 25. You can use the
        returned marker to retrieve additional results.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCertificatesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: isAscendingOrder
          in: query
          required: false
          description: Specifies the order for results. If True, the results are returned
            in ascending order, based on the creation date.
          schema:
            type: boolean
  "/dynamic-thing-groups/{thingGroupName}":
    post:
      operationId: CreateDynamicThingGroup
      description: Creates a dynamic thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDynamicThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: InvalidQueryException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidQueryException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The dynamic thing group name to create.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - queryString
              properties:
                thingGroupProperties:
                  description: Thing group properties.
                  type: object
                  properties:
                    thingGroupDescription:
                      $ref: "#/components/schemas/ThingGroupDescription"
                    attributePayload:
                      $ref: "#/components/schemas/AttributePayload"
                indexName:
                  description: '<p>The dynamic thing group index name.</p> <note>
                    <p>Currently one index is supported: "AWS_Things".</p>
                    </note>'
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                queryString:
                  description: <p>The dynamic thing group search query string.</p> <p>See
                    <a
                    href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query
                    Syntax</a> for information about query string syntax.</p>
                  type: string
                  minLength: 1
                queryVersion:
                  description: '<p>The dynamic thing group query version.</p> <note>
                    <p>Currently one query version is supported: "2017-09-30".
                    If not specified, the query version defaults to this
                    value.</p> </note>'
                  type: string
                tags:
                  description: Metadata which can be used to manage the dynamic thing group.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteDynamicThingGroup
      description: Deletes a dynamic thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDynamicThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The name of the dynamic thing group to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: expectedVersion
          in: query
          required: false
          description: The expected version of the dynamic thing group to delete.
          schema:
            type: integer
    patch:
      operationId: UpdateDynamicThingGroup
      description: Updates a dynamic thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDynamicThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "485":
          description: InvalidQueryException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidQueryException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The name of the dynamic thing group to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - thingGroupProperties
              properties:
                thingGroupProperties:
                  description: Thing group properties.
                  type: object
                  properties:
                    thingGroupDescription:
                      $ref: "#/components/schemas/ThingGroupDescription"
                    attributePayload:
                      $ref: "#/components/schemas/AttributePayload"
                expectedVersion:
                  description: The expected version of the dynamic thing group to update.
                  type: integer
                indexName:
                  description: "<p>The dynamic thing group index to update.</p> <note>
                    <p>Currently one index is supported: 'AWS_Things'.</p>
                    </note>"
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                queryString:
                  description: The dynamic thing group search query string to update.
                  type: string
                  minLength: 1
                queryVersion:
                  description: '<p>The dynamic thing group query version to update.</p>
                    <note> <p>Currently one query version is supported:
                    "2017-09-30". If not specified, the query version defaults
                    to this value.</p> </note>'
                  type: string
        required: true
  "/jobs/{jobId}":
    put:
      operationId: CreateJob
      description: Creates a job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateJobResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: A job identifier which must be unique for your AWS account. We
            recommend using a UUID. Alpha-numeric characters, "-" and "_" are
            valid for use here.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - targets
                - abortConfig
              properties:
                targets:
                  description: A list of things and thing groups to which the job should be
                    sent.
                  type: array
                  items:
                    $ref: "#/components/schemas/TargetArn"
                  minItems: 1
                documentSource:
                  description: An S3 link to the job document.
                  type: string
                  minLength: 1
                  maxLength: 1350
                document:
                  description: <p>The job document.</p> <note> <p>If the job document
                    resides in an S3 bucket, you must use a placeholder link
                    when specifying the document.</p> <p>The placeholder link is
                    of the following form:</p> <p>
                    <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code>
                    </p> <p>where <i>bucket</i> is your bucket name and
                    <i>key</i> is the object in the bucket to which you are
                    linking.</p> </note>
                  type: string
                  maxLength: 32768
                description:
                  description: A short text description of the job.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
                presignedUrlConfig:
                  description: Configuration for pre-signed S3 URLs.
                  type: object
                  properties:
                    roleArn:
                      $ref: "#/components/schemas/RoleArn"
                    expiresInSec:
                      $ref: "#/components/schemas/ExpiresInSec"
                targetSelection:
                  description: Specifies whether the job will continue to run (CONTINUOUS),
                    or will be complete after all those things specified as
                    targets have completed the job (SNAPSHOT). If continuous,
                    the job may also be run on a thing when a change is detected
                    in a target. For example, a job will run on a thing when the
                    thing is added to a target group, even after the job was
                    completed by all things originally in the group.
                  type: string
                  enum:
                    - CONTINUOUS
                    - SNAPSHOT
                jobExecutionsRolloutConfig:
                  description: Allows you to create a staged rollout of a job.
                  type: object
                  properties:
                    maximumPerMinute:
                      $ref: "#/components/schemas/MaxJobExecutionsPerMin"
                    exponentialRate:
                      $ref: "#/components/schemas/ExponentialRolloutRate"
                abortConfig:
                  description: Details of abort criteria to abort the job.
                  type: object
                  properties:
                    criteriaList:
                      $ref: "#/components/schemas/AbortCriteriaList"
                timeoutConfig:
                  description: Specifies the amount of time each device has to finish its
                    execution of the job. A timer is started when the job
                    execution status is set to <code>IN_PROGRESS</code>. If the
                    job execution status is not set to another terminal state
                    before the timer expires, it will be automatically set to
                    <code>TIMED_OUT</code>.
                  type: object
                  properties:
                    inProgressTimeoutInMinutes:
                      $ref: "#/components/schemas/InProgressTimeoutInMinutes"
                tags:
                  description: Metadata which can be used to manage the job.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteJob
      description: <p>Deletes a job and its related job executions.</p> <p>Deleting a job
        may take time, depending on the number of job executions created for the
        job and various other factors. While the job is being deleted, the
        status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to
        delete or cancel a job whose status is already "DELETION_IN_PROGRESS"
        will result in an error.</p> <p>Only 10 jobs may have status
        "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException
        will occur.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InvalidStateTransitionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateTransitionException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: <p>The ID of the job to be deleted.</p> <p>After a job deletion is
            completed, you may reuse this jobId when you create a new job.
            However, this is not recommended, and you must ensure that your
            devices are not using the jobId to refer to the deleted job.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
        - name: force
          in: query
          required: false
          description: <p>(Optional) When true, you can delete a job which is
            "IN_PROGRESS". Otherwise, you can only delete a job which is in a
            terminal state ("COMPLETED" or "CANCELED") or an exception will
            occur. The default is false.</p> <note> <p>Deleting a job which is
            "IN_PROGRESS", will cause a device which is executing the job to be
            unable to access job information or update the job execution status.
            Use caution and ensure that each device executing a job which is
            deleted is able to recover to a valid state.</p> </note>
          schema:
            type: boolean
    get:
      operationId: DescribeJob
      description: Describes a job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeJobResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The unique identifier you assigned to this job when it was created.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
    patch:
      operationId: UpdateJob
      description: Updates supported fields of the specified job.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The ID of the job to be updated.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - abortConfig
              properties:
                description:
                  description: A short text description of the job.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
                presignedUrlConfig:
                  description: Configuration for pre-signed S3 URLs.
                  type: object
                  properties:
                    roleArn:
                      $ref: "#/components/schemas/RoleArn"
                    expiresInSec:
                      $ref: "#/components/schemas/ExpiresInSec"
                jobExecutionsRolloutConfig:
                  description: Allows you to create a staged rollout of a job.
                  type: object
                  properties:
                    maximumPerMinute:
                      $ref: "#/components/schemas/MaxJobExecutionsPerMin"
                    exponentialRate:
                      $ref: "#/components/schemas/ExponentialRolloutRate"
                abortConfig:
                  description: Details of abort criteria to abort the job.
                  type: object
                  properties:
                    criteriaList:
                      $ref: "#/components/schemas/AbortCriteriaList"
                timeoutConfig:
                  description: Specifies the amount of time each device has to finish its
                    execution of the job. A timer is started when the job
                    execution status is set to <code>IN_PROGRESS</code>. If the
                    job execution status is not set to another terminal state
                    before the timer expires, it will be automatically set to
                    <code>TIMED_OUT</code>.
                  type: object
                  properties:
                    inProgressTimeoutInMinutes:
                      $ref: "#/components/schemas/InProgressTimeoutInMinutes"
        required: true
  /keys-and-certificate:
    post:
      operationId: CreateKeysAndCertificate
      description: <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using
        the issued public key.</p> <p> <b>Note</b> This is the only time AWS IoT
        issues the private key for this certificate, so it is important to keep
        it in a secure location.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateKeysAndCertificateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: setAsActive
          in: query
          required: false
          description: Specifies whether the certificate is active.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/mitigationactions/actions/{actionName}":
    post:
      operationId: CreateMitigationAction
      description: Defines an action that can be applied to audit findings by using
        StartAuditMitigationActionsTask. Each mitigation action can apply only
        one type of change.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMitigationActionResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: actionName
          in: path
          required: true
          description: A friendly name for the action. Choose a friendly name that
            accurately describes the action (for example,
            <code>EnableLoggingAction</code>).
          schema:
            type: string
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - roleArn
                - actionParams
              properties:
                roleArn:
                  description: The ARN of the IAM role that is used to apply the mitigation
                    action.
                  type: string
                  minLength: 20
                  maxLength: 2048
                actionParams:
                  description: The set of parameters for this mitigation action. You can
                    specify only one type of parameter (in other words, you can
                    apply only one action for each defined mitigation action).
                  type: object
                  properties:
                    updateDeviceCertificateParams:
                      $ref: "#/components/schemas/UpdateDeviceCertificateParams"
                    updateCACertificateParams:
                      $ref: "#/components/schemas/UpdateCACertificateParams"
                    addThingsToThingGroupParams:
                      $ref: "#/components/schemas/AddThingsToThingGroupParams"
                    replaceDefaultPolicyVersionParams:
                      $ref: "#/components/schemas/ReplaceDefaultPolicyVersionParams"
                    enableIoTLoggingParams:
                      $ref: "#/components/schemas/EnableIoTLoggingParams"
                    publishFindingToSnsParams:
                      $ref: "#/components/schemas/PublishFindingToSnsParams"
                tags:
                  description: Metadata that can be used to manage the mitigation action.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteMitigationAction
      description: Deletes a defined mitigation action from your AWS account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteMitigationActionResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: actionName
          in: path
          required: true
          description: The name of the mitigation action that you want to delete.
          schema:
            type: string
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    get:
      operationId: DescribeMitigationAction
      description: Gets information about a mitigation action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeMitigationActionResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: actionName
          in: path
          required: true
          description: The friendly name that uniquely identifies the mitigation action.
          schema:
            type: string
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    patch:
      operationId: UpdateMitigationAction
      description: Updates the definition for the specified mitigation action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMitigationActionResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: actionName
          in: path
          required: true
          description: The friendly name for the mitigation action. You can't change the
            name by using <code>UpdateMitigationAction</code>. Instead, you must
            delete and re-create the mitigation action with the new name.
          schema:
            type: string
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roleArn:
                  description: The ARN of the IAM role that is used to apply the mitigation
                    action.
                  type: string
                  minLength: 20
                  maxLength: 2048
                actionParams:
                  description: The set of parameters for this mitigation action. You can
                    specify only one type of parameter (in other words, you can
                    apply only one action for each defined mitigation action).
                  type: object
                  properties:
                    updateDeviceCertificateParams:
                      $ref: "#/components/schemas/UpdateDeviceCertificateParams"
                    updateCACertificateParams:
                      $ref: "#/components/schemas/UpdateCACertificateParams"
                    addThingsToThingGroupParams:
                      $ref: "#/components/schemas/AddThingsToThingGroupParams"
                    replaceDefaultPolicyVersionParams:
                      $ref: "#/components/schemas/ReplaceDefaultPolicyVersionParams"
                    enableIoTLoggingParams:
                      $ref: "#/components/schemas/EnableIoTLoggingParams"
                    publishFindingToSnsParams:
                      $ref: "#/components/schemas/PublishFindingToSnsParams"
        required: true
  "/otaUpdates/{otaUpdateId}":
    post:
      operationId: CreateOTAUpdate
      description: Creates an AWS IoT OTAUpdate on a target group of things or groups.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOTAUpdateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "487":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: otaUpdateId
          in: path
          required: true
          description: The ID of the OTA update to be created.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - targets
                - files
                - roleArn
              properties:
                description:
                  description: The description of the OTA update.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
                targets:
                  description: The targeted devices to receive OTA updates.
                  type: array
                  items:
                    $ref: "#/components/schemas/Target"
                  minItems: 1
                targetSelection:
                  description: "Specifies whether the update will continue to run
                    (CONTINUOUS), or will be complete after all the things
                    specified as targets have completed the update (SNAPSHOT).
                    If continuous, the update may also be run on a thing when a
                    change is detected in a target. For example, an update will
                    run on a thing when the thing is added to a target group,
                    even after the update was completed by all things originally
                    in the group. Valid values: CONTINUOUS | SNAPSHOT."
                  type: string
                  enum:
                    - CONTINUOUS
                    - SNAPSHOT
                awsJobExecutionsRolloutConfig:
                  description: Configuration for the rollout of OTA updates.
                  type: object
                  properties:
                    maximumPerMinute:
                      $ref: "#/components/schemas/MaximumPerMinute"
                files:
                  description: The files to be streamed by the OTA update.
                  type: array
                  items:
                    $ref: "#/components/schemas/OTAUpdateFile"
                  minItems: 1
                  maxItems: 50
                roleArn:
                  description: The IAM role that allows access to the AWS IoT Jobs service.
                  type: string
                  minLength: 20
                  maxLength: 2048
                additionalParameters:
                  description: A list of additional OTA update parameters which are
                    name-value pairs.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Value"
                tags:
                  description: Metadata which can be used to manage updates.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteOTAUpdate
      description: Delete an OTA update.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteOTAUpdateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
      parameters:
        - name: otaUpdateId
          in: path
          required: true
          description: The OTA update ID to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
        - name: deleteStream
          in: query
          required: false
          description: Specifies if the stream associated with an OTA update should be
            deleted when the OTA update is deleted.
          schema:
            type: boolean
        - name: forceDeleteAWSJob
          in: query
          required: false
          description: Specifies if the AWS Job associated with the OTA update should be
            deleted with the OTA update is deleted.
          schema:
            type: boolean
    get:
      operationId: GetOTAUpdate
      description: Gets an OTA update.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOTAUpdateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: otaUpdateId
          in: path
          required: true
          description: The OTA update ID.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
  "/policies/{policyName}":
    post:
      operationId: CreatePolicy
      description: <p>Creates an AWS IoT policy.</p> <p>The created policy is the default
        version for the policy. This operation creates a policy version with a
        version identifier of <b>1</b> and sets <b>1</b> as the policy's default
        version.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePolicyResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: MalformedPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedPolicyException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - policyDocument
              properties:
                policyDocument:
                  description: The JSON document that describes the policy.
                    <b>policyDocument</b> must have a minimum length of 1, with
                    a maximum length of 2048, excluding whitespace.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeletePolicy
      description: <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it
        has non-default versions or it is attached to any certificate.</p> <p>To
        delete a policy, use the DeletePolicyVersion API to delete all
        non-default versions of the policy; use the DetachPrincipalPolicy API to
        detach the policy from any certificate; and then use the DeletePolicy
        API to delete the policy.</p> <p>When a policy is deleted using
        DeletePolicy, its default version is deleted with it.</p>
      responses:
        "200":
          description: Success
        "480":
          description: DeleteConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConflictException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The name of the policy to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
    get:
      operationId: GetPolicy
      description: Gets information about the specified policy with the policy document of
        the default version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The name of the policy.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
  "/policies/{policyName}/version":
    post:
      operationId: CreatePolicyVersion
      description: <p>Creates a new version of the specified AWS IoT policy. To update a
        policy, create a new policy version. A managed policy can have up to
        five versions. If the policy has five versions, you must use
        <a>DeletePolicyVersion</a> to delete an existing version before you
        create a new one.</p> <p>Optionally, you can set the new version as the
        policy's default version. The default version is the operative version
        (that is, the version that is in effect for the certificates to which
        the policy is attached).</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePolicyVersionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: MalformedPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedPolicyException"
        "482":
          description: VersionsLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionsLimitExceededException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: setAsDefault
          in: query
          required: false
          description: Specifies whether the policy version is set as the default. When
            this parameter is true, the new policy version becomes the operative
            version (that is, the version that is in effect for the certificates
            to which the policy is attached).
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - policyDocument
              properties:
                policyDocument:
                  description: The JSON document that describes the policy. Minimum length
                    of 1. Maximum length of 2048, excluding whitespace.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListPolicyVersions
      description: Lists the versions of the specified policy and identifies the default
        version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPolicyVersionsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
  "/role-aliases/{roleAlias}":
    post:
      operationId: CreateRoleAlias
      description: Creates a role alias.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRoleAliasResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: roleAlias
          in: path
          required: true
          description: The role alias that points to a role ARN. This allows you to change
            the role without having to update the device.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - roleArn
              properties:
                roleArn:
                  description: The role ARN.
                  type: string
                  minLength: 20
                  maxLength: 2048
                credentialDurationSeconds:
                  description: How long (in seconds) the credentials will be valid.
                  type: integer
                  minimum: 900
                  maximum: 3600
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteRoleAlias
      description: Deletes a role alias
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRoleAliasResponse"
        "480":
          description: DeleteConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConflictException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: roleAlias
          in: path
          required: true
          description: The role alias to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
    get:
      operationId: DescribeRoleAlias
      description: Describes a role alias.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeRoleAliasResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: roleAlias
          in: path
          required: true
          description: The role alias to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
    put:
      operationId: UpdateRoleAlias
      description: Updates a role alias.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRoleAliasResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: roleAlias
          in: path
          required: true
          description: The role alias to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roleArn:
                  description: The role ARN.
                  type: string
                  minLength: 20
                  maxLength: 2048
                credentialDurationSeconds:
                  description: The number of seconds the credential will be valid.
                  type: integer
                  minimum: 900
                  maximum: 3600
        required: true
  "/audit/scheduledaudits/{scheduledAuditName}":
    post:
      operationId: CreateScheduledAudit
      description: Creates a scheduled audit that is run at a specified time interval.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateScheduledAuditResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: scheduledAuditName
          in: path
          required: true
          description: The name you want to give to the scheduled audit. (Max. 128 chars)
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - frequency
                - targetCheckNames
              properties:
                frequency:
                  description: How often the scheduled audit takes place. Can be one of
                    "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The start time
                    of each audit is determined by the system.
                  type: string
                  enum:
                    - DAILY
                    - WEEKLY
                    - BIWEEKLY
                    - MONTHLY
                dayOfMonth:
                  description: The day of the month on which the scheduled audit takes
                    place. Can be "1" through "31" or "LAST". This field is
                    required if the "frequency" parameter is set to "MONTHLY".
                    If days 29-31 are specified, and the month does not have
                    that many days, the audit takes place on the "LAST" day of
                    the month.
                  type: string
                  pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
                dayOfWeek:
                  description: The day of the week on which the scheduled audit takes
                    place. Can be one of "SUN", "MON", "TUE", "WED", "THU",
                    "FRI", or "SAT". This field is required if the "frequency"
                    parameter is set to "WEEKLY" or "BIWEEKLY".
                  type: string
                  enum:
                    - SUN
                    - MON
                    - TUE
                    - WED
                    - THU
                    - FRI
                    - SAT
                targetCheckNames:
                  description: Which checks are performed during the scheduled audit.
                    Checks must be enabled for your account. (Use
                    <code>DescribeAccountAuditConfiguration</code> to see the
                    list of all checks, including those that are enabled or use
                    <code>UpdateAccountAuditConfiguration</code> to select which
                    checks are enabled.)
                  type: array
                  items:
                    $ref: "#/components/schemas/AuditCheckName"
                tags:
                  description: Metadata that can be used to manage the scheduled audit.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteScheduledAudit
      description: Deletes a scheduled audit.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteScheduledAuditResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: scheduledAuditName
          in: path
          required: true
          description: The name of the scheduled audit you want to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    get:
      operationId: DescribeScheduledAudit
      description: Gets information about a scheduled audit.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeScheduledAuditResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: scheduledAuditName
          in: path
          required: true
          description: The name of the scheduled audit whose information you want to get.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    patch:
      operationId: UpdateScheduledAudit
      description: Updates a scheduled audit, including which checks are performed and how
        often the audit takes place.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateScheduledAuditResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: scheduledAuditName
          in: path
          required: true
          description: The name of the scheduled audit. (Max. 128 chars)
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                frequency:
                  description: How often the scheduled audit takes place. Can be one of
                    "DAILY", "WEEKLY", "BIWEEKLY", or "MONTHLY". The start time
                    of each audit is determined by the system.
                  type: string
                  enum:
                    - DAILY
                    - WEEKLY
                    - BIWEEKLY
                    - MONTHLY
                dayOfMonth:
                  description: The day of the month on which the scheduled audit takes
                    place. Can be "1" through "31" or "LAST". This field is
                    required if the "frequency" parameter is set to "MONTHLY".
                    If days 29-31 are specified, and the month does not have
                    that many days, the audit takes place on the "LAST" day of
                    the month.
                  type: string
                  pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
                dayOfWeek:
                  description: The day of the week on which the scheduled audit takes
                    place. Can be one of "SUN", "MON", "TUE", "WED", "THU",
                    "FRI", or "SAT". This field is required if the "frequency"
                    parameter is set to "WEEKLY" or "BIWEEKLY".
                  type: string
                  enum:
                    - SUN
                    - MON
                    - TUE
                    - WED
                    - THU
                    - FRI
                    - SAT
                targetCheckNames:
                  description: Which checks are performed during the scheduled audit.
                    Checks must be enabled for your account. (Use
                    <code>DescribeAccountAuditConfiguration</code> to see the
                    list of all checks, including those that are enabled or use
                    <code>UpdateAccountAuditConfiguration</code> to select which
                    checks are enabled.)
                  type: array
                  items:
                    $ref: "#/components/schemas/AuditCheckName"
        required: true
  "/security-profiles/{securityProfileName}":
    post:
      operationId: CreateSecurityProfile
      description: Creates a Device Defender security profile.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The name you are giving to the security profile.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                securityProfileDescription:
                  description: A description of the security profile.
                  type: string
                  pattern: "[\\p{Graph}\\x20]*"
                  maxLength: 1000
                behaviors:
                  description: Specifies the behaviors that, when violated by a device
                    (thing), cause an alert.
                  type: array
                  items:
                    $ref: "#/components/schemas/Behavior"
                  maxItems: 100
                alertTargets:
                  description: Specifies the destinations to which alerts are sent. (Alerts
                    are always sent to the console.) Alerts are generated when a
                    device (thing) violates a behavior.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/AlertTarget"
                additionalMetricsToRetain:
                  description: A list of metrics whose data is retained (stored). By
                    default, data is retained for any metric used in the
                    profile's <code>behaviors</code>, but it is also retained
                    for any metric specified here.
                  type: array
                  items:
                    $ref: "#/components/schemas/BehaviorMetric"
                tags:
                  description: Metadata that can be used to manage the security profile.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteSecurityProfile
      description: Deletes a Device Defender security profile.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The name of the security profile to be deleted.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: expectedVersion
          in: query
          required: false
          description: The expected version of the security profile. A new version is
            generated whenever the security profile is updated. If you specify a
            value that is different from the actual version, a
            <code>VersionConflictException</code> is thrown.
          schema:
            type: integer
    get:
      operationId: DescribeSecurityProfile
      description: Gets information about a Device Defender security profile.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The name of the security profile whose information you want to get.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    patch:
      operationId: UpdateSecurityProfile
      description: Updates a Device Defender security profile.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The name of the security profile you want to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: expectedVersion
          in: query
          required: false
          description: The expected version of the security profile. A new version is
            generated whenever the security profile is updated. If you specify a
            value that is different from the actual version, a
            <code>VersionConflictException</code> is thrown.
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                securityProfileDescription:
                  description: A description of the security profile.
                  type: string
                  pattern: "[\\p{Graph}\\x20]*"
                  maxLength: 1000
                behaviors:
                  description: Specifies the behaviors that, when violated by a device
                    (thing), cause an alert.
                  type: array
                  items:
                    $ref: "#/components/schemas/Behavior"
                  maxItems: 100
                alertTargets:
                  description: Where the alerts are sent. (Alerts are always sent to the
                    console.)
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/AlertTarget"
                additionalMetricsToRetain:
                  description: A list of metrics whose data is retained (stored). By
                    default, data is retained for any metric used in the
                    profile's <code>behaviors</code>, but it is also retained
                    for any metric specified here.
                  type: array
                  items:
                    $ref: "#/components/schemas/BehaviorMetric"
                deleteBehaviors:
                  description: If true, delete all <code>behaviors</code> defined for this
                    security profile. If any <code>behaviors</code> are defined
                    in the current invocation, an exception occurs.
                  type: boolean
                deleteAlertTargets:
                  description: If true, delete all <code>alertTargets</code> defined for
                    this security profile. If any <code>alertTargets</code> are
                    defined in the current invocation, an exception occurs.
                  type: boolean
                deleteAdditionalMetricsToRetain:
                  description: If true, delete all <code>additionalMetricsToRetain</code>
                    defined for this security profile. If any
                    <code>additionalMetricsToRetain</code> are defined in the
                    current invocation, an exception occurs.
                  type: boolean
        required: true
  "/streams/{streamId}":
    post:
      operationId: CreateStream
      description: Creates a stream for delivering one or more large files in chunks over
        MQTT. A stream transports data bytes in chunks or blocks packaged as
        MQTT messages from a source like S3. You can have one or more files
        associated with a stream. The total size of a file associated with the
        stream cannot exceed more than 2 MB. The stream will be created with
        version 0. If a stream is created with the same streamID as a stream
        that existed and was deleted within last 90 days, we will resurrect that
        old stream by incrementing the version by 1.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStreamResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: streamId
          in: path
          required: true
          description: The stream ID.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - files
                - roleArn
              properties:
                description:
                  description: A description of the stream.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
                files:
                  description: The files to stream.
                  type: array
                  items:
                    $ref: "#/components/schemas/StreamFile"
                  minItems: 1
                  maxItems: 50
                roleArn:
                  description: An IAM role that allows the IoT service principal assumes to
                    access your S3 files.
                  type: string
                  minLength: 20
                  maxLength: 2048
                tags:
                  description: Metadata which can be used to manage streams.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteStream
      description: Deletes a stream.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteStreamResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: DeleteConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConflictException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: streamId
          in: path
          required: true
          description: The stream ID.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    get:
      operationId: DescribeStream
      description: Gets information about a stream.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeStreamResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: streamId
          in: path
          required: true
          description: The stream ID.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    put:
      operationId: UpdateStream
      description: Updates an existing stream. The stream version will be incremented by
        one.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStreamResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: streamId
          in: path
          required: true
          description: The stream ID.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The description of the stream.
                  type: string
                  pattern: "[^\\p{C}]+"
                  maxLength: 2028
                files:
                  description: The files associated with the stream.
                  type: array
                  items:
                    $ref: "#/components/schemas/StreamFile"
                  minItems: 1
                  maxItems: 50
                roleArn:
                  description: An IAM role that allows the IoT service principal assumes to
                    access your S3 files.
                  type: string
                  minLength: 20
                  maxLength: 2048
        required: true
  "/things/{thingName}":
    post:
      operationId: CreateThing
      description: <p>Creates a thing record in the registry. If this call is made multiple
        times using the same thing name and configuration, the call will
        succeed. If this call is made with the same thing name but different
        configuration a <code>ResourceAlreadyExistsException</code> is
        thrown.</p> <note> <p>This is a control plane operation. See <a
        href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a>
        for information about authorizing control plane actions.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateThingResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "486":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing to create.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thingTypeName:
                  description: The name of the thing type associated with the new thing.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                attributePayload:
                  description: The attribute payload.
                  type: object
                  properties:
                    attributes:
                      $ref: "#/components/schemas/Attributes"
                    merge:
                      $ref: "#/components/schemas/Flag"
                billingGroupName:
                  description: The name of the billing group the thing will be added to.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteThing
      description: Deletes the specified thing. Returns successfully with no error if the
        deletion is successful or you specify a thing that doesn't exist.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteThingResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: expectedVersion
          in: query
          required: false
          description: The expected version of the thing record in the registry. If the
            version of the record in the registry does not match the expected
            version specified in the request, the <code>DeleteThing</code>
            request is rejected with a <code>VersionConflictException</code>.
          schema:
            type: integer
    get:
      operationId: DescribeThing
      description: Gets information about the specified thing.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeThingResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    patch:
      operationId: UpdateThing
      description: Updates the data for a thing.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateThingResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thingTypeName:
                  description: The name of the thing type.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                attributePayload:
                  description: The attribute payload.
                  type: object
                  properties:
                    attributes:
                      $ref: "#/components/schemas/Attributes"
                    merge:
                      $ref: "#/components/schemas/Flag"
                expectedVersion:
                  description: The expected version of the thing record in the registry. If
                    the version of the record in the registry does not match the
                    expected version specified in the request, the
                    <code>UpdateThing</code> request is rejected with a
                    <code>VersionConflictException</code>.
                  type: integer
                removeThingType:
                  description: Remove a thing type association. If <b>true</b>, the
                    association is removed.
                  type: boolean
        required: true
  "/thing-groups/{thingGroupName}":
    post:
      operationId: CreateThingGroup
      description: <p>Create a thing group.</p> <note> <p>This is a control plane
        operation. See <a
        href="https://docs.aws.amazon.com/iot/latest/developerguide/authorization.html">Authorization</a>
        for information about authorizing control plane actions.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The thing group name to create.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parentGroupName:
                  description: The name of the parent thing group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingGroupProperties:
                  description: Thing group properties.
                  type: object
                  properties:
                    thingGroupDescription:
                      $ref: "#/components/schemas/ThingGroupDescription"
                    attributePayload:
                      $ref: "#/components/schemas/AttributePayload"
                tags:
                  description: Metadata which can be used to manage the thing group.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteThingGroup
      description: Deletes a thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The name of the thing group to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: expectedVersion
          in: query
          required: false
          description: The expected version of the thing group to delete.
          schema:
            type: integer
    get:
      operationId: DescribeThingGroup
      description: Describe a thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The name of the thing group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    patch:
      operationId: UpdateThingGroup
      description: Update a thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: VersionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionConflictException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The thing group to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - thingGroupProperties
              properties:
                thingGroupProperties:
                  description: Thing group properties.
                  type: object
                  properties:
                    thingGroupDescription:
                      $ref: "#/components/schemas/ThingGroupDescription"
                    attributePayload:
                      $ref: "#/components/schemas/AttributePayload"
                expectedVersion:
                  description: The expected version of the thing group. If this does not
                    match the version of the thing group being updated, the
                    update will fail.
                  type: integer
        required: true
  "/thing-types/{thingTypeName}":
    post:
      operationId: CreateThingType
      description: Creates a new thing type.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateThingTypeResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
      parameters:
        - name: thingTypeName
          in: path
          required: true
          description: The name of the thing type.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thingTypeProperties:
                  description: "The ThingTypeProperties contains information about the
                    thing type including: a thing type description, and a list
                    of searchable thing attribute names."
                  type: object
                  properties:
                    thingTypeDescription:
                      $ref: "#/components/schemas/ThingTypeDescription"
                    searchableAttributes:
                      $ref: "#/components/schemas/SearchableAttributes"
                tags:
                  description: Metadata which can be used to manage the thing type.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteThingType
      description: Deletes the specified thing type. You cannot delete a thing type if it
        has things associated with it. To delete a thing type, first mark it as
        deprecated by calling <a>DeprecateThingType</a>, then remove any
        associated things by calling <a>UpdateThing</a> to change the thing type
        on any associated thing, and finally use <a>DeleteThingType</a> to
        delete the thing type.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteThingTypeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingTypeName
          in: path
          required: true
          description: The name of the thing type.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    get:
      operationId: DescribeThingType
      description: Gets information about the specified thing type.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeThingTypeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingTypeName
          in: path
          required: true
          description: The name of the thing type.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
  "/rules/{ruleName}":
    post:
      operationId: CreateTopicRule
      description: Creates a rule. Creating rules is an administrator-level action. Any
        user who has permission to create rules will be able to access data
        processed by the rule.
      responses:
        "200":
          description: Success
        "480":
          description: SqlParseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlParseException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: ConflictingResourceUpdateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictingResourceUpdateException"
      parameters:
        - name: ruleName
          in: path
          required: true
          description: The name of the rule.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: x-amz-tagging
          in: header
          required: false
          description: '<p>Metadata which can be used to manage the topic rule.</p> <note>
            <p>For URI Request parameters use format:
            ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line
            parameter use format: --tags "key1=value1&amp;key2=value2..."</p>
            <p>For the cli-input-json file use format: "tags":
            "key1=value1&amp;key2=value2..."</p> </note>'
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateTopicRuleBody"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteTopicRule
      description: Deletes the rule.
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ConflictingResourceUpdateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictingResourceUpdateException"
      parameters:
        - name: ruleName
          in: path
          required: true
          description: The name of the rule.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    get:
      operationId: GetTopicRule
      description: Gets information about the rule.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTopicRuleResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
      parameters:
        - name: ruleName
          in: path
          required: true
          description: The name of the rule.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    patch:
      operationId: ReplaceTopicRule
      description: Replaces the rule. You must specify all parameters for the new rule.
        Creating rules is an administrator-level action. Any user who has
        permission to create rules will be able to access data processed by the
        rule.
      responses:
        "200":
          description: Success
        "480":
          description: SqlParseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SqlParseException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ConflictingResourceUpdateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictingResourceUpdateException"
      parameters:
        - name: ruleName
          in: path
          required: true
          description: The name of the rule.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
      requestBody:
        $ref: "#/components/requestBodies/CreateTopicRuleBody"
  /audit/configuration:
    delete:
      operationId: DeleteAccountAuditConfiguration
      description: "Restores the default settings for Device Defender audits for this
        account. Any configuration data you entered is deleted and all audit
        checks are reset to disabled. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAccountAuditConfigurationResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: deleteScheduledAudits
          in: query
          required: false
          description: If true, all scheduled audits are deleted.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeAccountAuditConfiguration
      description: Gets information about the Device Defender audit settings for this
        account. Settings include how audit notifications are sent and which
        audit checks are enabled or disabled.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAccountAuditConfigurationRespon\
                  se"
        "480":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
    patch:
      operationId: UpdateAccountAuditConfiguration
      description: Configures or reconfigures the Device Defender audit settings for this
        account. Settings include how audit notifications are sent and which
        audit checks are enabled or disabled.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAccountAuditConfigurationResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roleArn:
                  description: The ARN of the role that grants permission to AWS IoT to
                    access information about your devices, policies,
                    certificates and other items as required when performing an
                    audit.
                  type: string
                  minLength: 20
                  maxLength: 2048
                auditNotificationTargetConfigurations:
                  description: Information about the targets to which audit notifications
                    are sent.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/AuditNotificationTarget"
                auditCheckConfigurations:
                  description: <p>Specifies which audit checks are enabled and disabled for
                    this account. Use
                    <code>DescribeAccountAuditConfiguration</code> to see the
                    list of all checks, including those that are currently
                    enabled.</p> <p>Some data collection might start immediately
                    when certain checks are enabled. When a check is disabled,
                    any data collected so far in relation to the check is
                    deleted.</p> <p>You cannot disable a check if it is used by
                    any scheduled audit. You must first delete the check from
                    the scheduled audit or delete the scheduled audit
                    itself.</p> <p>On the first call to
                    <code>UpdateAccountAuditConfiguration</code>, this parameter
                    is required and must specify at least one enabled check.</p>
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/AuditCheckConfiguration"
        required: true
  "/cacertificate/{caCertificateId}":
    delete:
      operationId: DeleteCACertificate
      description: Deletes a registered CA certificate.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCACertificateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: CertificateStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateStateException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: caCertificateId
          in: path
          required: true
          description: The ID of the certificate to delete. (The last part of the
            certificate ARN contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeCACertificate
      description: Describes a registered CA certificate.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeCACertificateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: caCertificateId
          in: path
          required: true
          description: The CA certificate identifier.
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
    put:
      operationId: UpdateCACertificate
      description: Updates a registered CA certificate.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: caCertificateId
          in: path
          required: true
          description: The CA certificate identifier.
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
        - name: newStatus
          in: query
          required: false
          description: <p>The updated status of the CA certificate.</p> <p> <b>Note:</b>
            The status value REGISTER_INACTIVE is deprecated and should not be
            used.</p>
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
        - name: newAutoRegistrationStatus
          in: query
          required: false
          description: 'The new value for the auto registration status. Valid values are:
            "ENABLE" or "DISABLE".'
          schema:
            type: string
            enum:
              - ENABLE
              - DISABLE
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationConfig:
                  description: The registration configuration.
                  type: object
                  properties:
                    templateBody:
                      $ref: "#/components/schemas/TemplateBody"
                    roleArn:
                      $ref: "#/components/schemas/RoleArn"
                removeAutoRegistration:
                  description: If true, removes auto registration.
                  type: boolean
        required: true
  "/certificates/{certificateId}":
    delete:
      operationId: DeleteCertificate
      description: <p>Deletes the specified certificate.</p> <p>A certificate cannot be
        deleted if it has a policy or IoT thing attached to it or if its status
        is set to ACTIVE. To delete a certificate, first use the
        <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the
        <a>UpdateCertificate</a> API to set the certificate to the INACTIVE
        status.</p>
      responses:
        "200":
          description: Success
        "480":
          description: CertificateStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateStateException"
        "481":
          description: DeleteConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConflictException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "487":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
        - name: forceDelete
          in: query
          required: false
          description: Forces the deletion of a certificate if it is inactive and is not
            attached to an IoT thing.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeCertificate
      description: Gets information about the specified certificate.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeCertificateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
  "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}":
    delete:
      operationId: DeleteJobExecution
      description: Deletes a job execution.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InvalidStateTransitionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateTransitionException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The ID of the job whose execution on a particular device will be
            deleted.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
        - name: thingName
          in: path
          required: true
          description: The name of the thing whose job execution will be deleted.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: executionNumber
          in: path
          required: true
          description: <p>The ID of the job execution to be deleted. The
            <code>executionNumber</code> refers to the execution of a particular
            job on a particular device.</p> <p>Note that once a job execution is
            deleted, the <code>executionNumber</code> may be reused by IoT, so
            be sure you get and use the correct value here.</p>
          schema:
            type: integer
        - name: force
          in: query
          required: false
          description: <p>(Optional) When true, you can delete a job execution which is
            "IN_PROGRESS". Otherwise, you can only delete a job execution which
            is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED"
            or "CANCELED") or an exception will occur. The default is false.</p>
            <note> <p>Deleting a job execution which is "IN_PROGRESS", will
            cause the device to be unable to access job information or update
            the job execution status. Use caution and ensure that the device is
            able to recover to a valid state.</p> </note>
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/policies/{policyName}/version/{policyVersionId}":
    delete:
      operationId: DeletePolicyVersion
      description: Deletes the specified version of the specified policy. You cannot delete
        the default version of a policy using this API. To delete the default
        version of a policy, use <a>DeletePolicy</a>. To find out which version
        of a policy is marked as the default version, use ListPolicyVersions.
      responses:
        "200":
          description: Success
        "480":
          description: DeleteConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConflictException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The name of the policy.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: policyVersionId
          in: path
          required: true
          description: The policy version ID.
          schema:
            type: string
            pattern: "[0-9]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetPolicyVersion
      description: Gets information about the specified policy version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPolicyVersionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The name of the policy.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: policyVersionId
          in: path
          required: true
          description: The policy version ID.
          schema:
            type: string
            pattern: "[0-9]+"
    patch:
      operationId: SetDefaultPolicyVersion
      description: Sets the specified version of the specified policy as the policy's
        default (operative) version. This action affects all certificates to
        which the policy is attached. To list the principals the policy is
        attached to, use the ListPrincipalPolicy API.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: policyVersionId
          in: path
          required: true
          description: The policy version ID.
          schema:
            type: string
            pattern: "[0-9]+"
  /registrationcode:
    delete:
      operationId: DeleteRegistrationCode
      description: Deletes a CA certificate registration code.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRegistrationCodeResponse"
        "480":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRegistrationCode
      description: Gets a registration code used to register a CA certificate with AWS IoT.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRegistrationCodeResponse"
        "480":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "481":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
  /v2LoggingLevel#targetType&targetName:
    delete:
      operationId: DeleteV2LoggingLevel
      description: Deletes a logging level.
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: targetType
          in: query
          required: true
          description: The type of resource for which you are configuring logging. Must be
            <code>THING_Group</code>.
          schema:
            type: string
            enum:
              - DEFAULT
              - THING_GROUP
        - name: targetName
          in: query
          required: true
          description: The name of the resource for which you are configuring logging.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/thing-types/{thingTypeName}/deprecate":
    post:
      operationId: DeprecateThingType
      description: Deprecates a thing type. You can not associate new things with
        deprecated thing type.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeprecateThingTypeResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingTypeName
          in: path
          required: true
          description: The name of the thing type to deprecate.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                undoDeprecate:
                  description: Whether to undeprecate a deprecated thing type. If
                    <b>true</b>, the thing type will not be deprecated anymore
                    and you can associate it with things.
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/audit/findings/{findingId}":
    get:
      operationId: DescribeAuditFinding
      description: Gets information about a single audit finding. Properties include the
        reason for noncompliance, the severity of the issue, and when the audit
        that returned the finding was started.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAuditFindingResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: findingId
          in: path
          required: true
          description: A unique identifier for a single audit finding. You can use this
            identifier to apply mitigation actions to the finding.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/audit/mitigationactions/tasks/{taskId}":
    get:
      operationId: DescribeAuditMitigationActionsTask
      description: Gets information about an audit mitigation task that is used to apply
        mitigation actions to a set of audit findings. Properties include the
        actions being applied, the audit checks to which they're being applied,
        the task status, and aggregated task statistics.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAuditMitigationActionsTaskRespo\
                  nse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: The unique identifier for the audit mitigation task.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: StartAuditMitigationActionsTask
      description: Starts a task that applies a set of mitigation actions to the specified
        target.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartAuditMitigationActionsTaskResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: TaskAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskAlreadyExistsException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: A unique identifier for the task. You can use this identifier to
            check the status of the task or to cancel it.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - target
                - auditCheckToActionsMapping
                - clientRequestToken
              properties:
                target:
                  description: Used in MitigationActionParams, this information identifies
                    the target findings to which the mitigation actions are
                    applied. Only one entry appears.
                  type: object
                  properties:
                    auditTaskId:
                      $ref: "#/components/schemas/AuditTaskId"
                    findingIds:
                      $ref: "#/components/schemas/FindingIds"
                    auditCheckToReasonCodeFilter:
                      $ref: "#/components/schemas/AuditCheckToReasonCodeFilter"
                auditCheckToActionsMapping:
                  description: For an audit check, specifies which mitigation actions to
                    apply. Those actions must be defined in your AWS account.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/MitigationActionNameList"
                clientRequestToken:
                  description: Each audit mitigation task must have a unique client request
                    token. If you try to start a new task with the same token as
                    a task that already exists, an exception occurs. If you omit
                    this value, a unique client request token is generated
                    automatically.
                  type: string
                  pattern: ^[a-zA-Z0-9-_]+$
                  minLength: 1
                  maxLength: 64
        required: true
  "/audit/tasks/{taskId}":
    get:
      operationId: DescribeAuditTask
      description: Gets information about a Device Defender audit.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAuditTaskResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: The ID of the audit whose information you want to get.
          schema:
            type: string
            minLength: 1
            maxLength: 40
            pattern: "[a-zA-Z0-9\\-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /endpoint:
    get:
      operationId: DescribeEndpoint
      description: Returns a unique endpoint specific to the AWS account making the call.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeEndpointResponse"
        "480":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: endpointType
          in: query
          required: false
          description: <p>The endpoint type. Valid endpoint types include:</p> <ul> <li>
            <p> <code>iot:Data</code> - Returns a VeriSign signed data
            endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> -
            Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p>
            <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials
            provider API endpoint.</p> </li> </ul> <ul> <li> <p>
            <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs
            API endpoint.</p> </li> </ul>
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /event-configurations:
    get:
      operationId: DescribeEventConfigurations
      description: Describes event configurations.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeEventConfigurationsResponse"
        "480":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    patch:
      operationId: UpdateEventConfigurations
      description: Updates the event configurations.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateEventConfigurationsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                eventConfigurations:
                  description: The new event configuration values.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Configuration"
        required: true
  "/indices/{indexName}":
    get:
      operationId: DescribeIndex
      description: Describes a search index.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeIndexResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: indexName
          in: path
          required: true
          description: The index name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/things/{thingName}/jobs/{jobId}":
    get:
      operationId: DescribeJobExecution
      description: Describes a job execution.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeJobExecutionResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The unique identifier you assigned to this job when it was created.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
        - name: thingName
          in: path
          required: true
          description: The name of the thing on which the job execution is running.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: executionNumber
          in: query
          required: false
          description: A string (consisting of the digits "0" through "9" which is used to
            specify a particular job execution on a particular device.
          schema:
            type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/thing-registration-tasks/{taskId}":
    get:
      operationId: DescribeThingRegistrationTask
      description: Describes a bulk thing provisioning task.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeThingRegistrationTaskResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: The task ID.
          schema:
            type: string
            maxLength: 40
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/rules/{ruleName}/disable":
    post:
      operationId: DisableTopicRule
      description: Disables the rule.
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ConflictingResourceUpdateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictingResourceUpdateException"
      parameters:
        - name: ruleName
          in: path
          required: true
          description: The name of the rule to disable.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/rules/{ruleName}/enable":
    post:
      operationId: EnableTopicRule
      description: Enables the rule.
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ConflictingResourceUpdateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictingResourceUpdateException"
      parameters:
        - name: ruleName
          in: path
          required: true
          description: The name of the topic rule to enable.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /effective-policies:
    post:
      operationId: GetEffectivePolicies
      description: Gets a list of the policies that have an effect on the authorization
        behavior of the specified device when it connects to the AWS IoT device
        gateway.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEffectivePoliciesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: thingName
          in: query
          required: false
          description: The thing name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                principal:
                  description: The principal.
                  type: string
                cognitoIdentityPoolId:
                  description: The Cognito identity pool ID.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /indexing/config:
    get:
      operationId: GetIndexingConfiguration
      description: Gets the search configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIndexingConfigurationResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: UpdateIndexingConfiguration
      description: Updates the search configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateIndexingConfigurationResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - thingIndexingConfiguration
                - thingGroupIndexingConfiguration
              properties:
                thingIndexingConfiguration:
                  description: The thing indexing configuration. For more information, see
                    <a
                    href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing
                    Thing Indexing</a>.
                  type: object
                  properties:
                    thingIndexingMode:
                      $ref: "#/components/schemas/ThingIndexingMode"
                    thingConnectivityIndexingMode:
                      $ref: "#/components/schemas/ThingConnectivityIndexingMode"
                thingGroupIndexingConfiguration:
                  description: Thing group indexing configuration.
                  type: object
                  properties:
                    thingGroupIndexingMode:
                      $ref: "#/components/schemas/ThingGroupIndexingMode"
        required: true
  "/jobs/{jobId}/job-document":
    get:
      operationId: GetJobDocument
      description: Gets a job document.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobDocumentResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The unique identifier you assigned to this job when it was created.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /loggingOptions:
    get:
      operationId: GetLoggingOptions
      description: "<p>Gets the logging options.</p> <p>NOTE: use of this command is not
        recommended. Use <code>GetV2LoggingOptions</code> instead.</p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoggingOptionsResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: SetLoggingOptions
      description: "<p>Sets the logging options.</p> <p>NOTE: use of this command is not
        recommended. Use <code>SetV2LoggingOptions</code> instead.</p>"
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - loggingOptionsPayload
              properties:
                loggingOptionsPayload:
                  description: Describes the logging options payload.
                  type: object
                  properties:
                    roleArn:
                      $ref: "#/components/schemas/AwsArn"
                    logLevel:
                      $ref: "#/components/schemas/LogLevel"
        required: true
  /indices/statistics:
    post:
      operationId: GetStatistics
      description: Gets statistics about things that match the specified query.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStatisticsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: InvalidQueryException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidQueryException"
        "487":
          description: InvalidAggregationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidAggregationException"
        "488":
          description: IndexNotReadyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexNotReadyException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - queryString
              properties:
                indexName:
                  description: The name of the index to search. The default value is
                    <code>AWS_Things</code>.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                queryString:
                  description: The query used to search. You can specify "*" for the query
                    string to get the count of all indexed things in your AWS
                    account.
                  type: string
                  minLength: 1
                aggregationField:
                  description: The aggregation field name. Currently not supported.
                  type: string
                  minLength: 1
                queryVersion:
                  description: The version of the query used to search.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /v2LoggingOptions:
    get:
      operationId: GetV2LoggingOptions
      description: Gets the fine grained logging options.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetV2LoggingOptionsResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: NotConfiguredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotConfiguredException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: SetV2LoggingOptions
      description: Sets the logging options for the V2 logging service.
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roleArn:
                  description: The ARN of the role that allows IoT to write to Cloudwatch
                    logs.
                  type: string
                defaultLogLevel:
                  description: The default logging level.
                  type: string
                  enum:
                    - DEBUG
                    - INFO
                    - ERROR
                    - WARN
                    - DISABLED
                disableAllLogs:
                  description: If true all logs are disabled. The default is false.
                  type: boolean
        required: true
  /active-violations:
    get:
      operationId: ListActiveViolations
      description: Lists the active violations for a given Device Defender security profile.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListActiveViolationsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: thingName
          in: query
          required: false
          description: The name of the thing whose active violations are listed.
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - name: securityProfileName
          in: query
          required: false
          description: The name of the Device Defender security profile for which
            violations are listed.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/attached-policies/{target}":
    post:
      operationId: ListAttachedPolicies
      description: Lists the policies attached to the specified thing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAttachedPoliciesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: target
          in: path
          required: true
          description: The group or principal for which the policies will be listed.
          schema:
            type: string
        - name: recursive
          in: query
          required: false
          description: When true, recursively list attached policies.
          schema:
            type: boolean
        - name: marker
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: pageSize
          in: query
          required: false
          description: The maximum number of results to be returned per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /audit/findings:
    post:
      operationId: ListAuditFindings
      description: Lists the findings (results) of a Device Defender audit or of the audits
        performed during a specified time period. (Findings are retained for 180
        days.)
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAuditFindingsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                taskId:
                  description: A filter to limit results to the audit with the specified
                    ID. You must specify either the taskId or the startTime and
                    endTime, but not both.
                  type: string
                  pattern: "[a-zA-Z0-9\\-]+"
                  minLength: 1
                  maxLength: 40
                checkName:
                  description: An audit check name. Checks must be enabled for your
                    account. (Use <code>DescribeAccountAuditConfiguration</code>
                    to see the list of all checks, including those that are
                    enabled or use <code>UpdateAccountAuditConfiguration</code>
                    to select which checks are enabled.)
                  type: string
                resourceIdentifier:
                  description: Information that identifies the noncompliant resource.
                  type: object
                  properties:
                    deviceCertificateId:
                      $ref: "#/components/schemas/CertificateId"
                    caCertificateId:
                      $ref: "#/components/schemas/CertificateId"
                    cognitoIdentityPoolId:
                      $ref: "#/components/schemas/CognitoIdentityPoolId"
                    clientId:
                      $ref: "#/components/schemas/ClientId"
                    policyVersionIdentifier:
                      $ref: "#/components/schemas/PolicyVersionIdentifier"
                    account:
                      $ref: "#/components/schemas/AwsAccountId"
                maxResults:
                  description: The maximum number of results to return at one time. The
                    default is 25.
                  type: integer
                  minimum: 1
                  maximum: 250
                nextToken:
                  description: The token for the next set of results.
                  type: string
                startTime:
                  description: A filter to limit results to those found after the specified
                    time. You must specify either the startTime and endTime or
                    the taskId, but not both.
                  type: string
                  format: date-time
                endTime:
                  description: A filter to limit results to those found before the
                    specified time. You must specify either the startTime and
                    endTime or the taskId, but not both.
                  type: string
                  format: date-time
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /audit/mitigationactions/executions#taskId&findingId:
    get:
      operationId: ListAuditMitigationActionsExecutions
      description: Gets the status of audit mitigation action tasks that were executed.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAuditMitigationActionsExecutionsRes\
                  ponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: query
          required: true
          description: Specify this filter to limit results to actions for a specific audit
            mitigation actions task.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
        - name: actionStatus
          in: query
          required: false
          description: Specify this filter to limit results to those with a specific status.
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - COMPLETED
              - FAILED
              - CANCELED
              - SKIPPED
              - PENDING
        - name: findingId
          in: query
          required: true
          description: Specify this filter to limit results to those that were applied to a
            specific audit finding.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time. The default is
            25.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /audit/mitigationactions/tasks#startTime&endTime:
    get:
      operationId: ListAuditMitigationActionsTasks
      description: Gets a list of audit mitigation action tasks that match the specified
        filters.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAuditMitigationActionsTasksResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: auditTaskId
          in: query
          required: false
          description: Specify this filter to limit results to tasks that were applied to
            results for a specific audit.
          schema:
            type: string
            minLength: 1
            maxLength: 40
            pattern: "[a-zA-Z0-9\\-]+"
        - name: findingId
          in: query
          required: false
          description: Specify this filter to limit results to tasks that were applied to a
            specific audit finding.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9_-]+"
        - name: taskStatus
          in: query
          required: false
          description: Specify this filter to limit results to tasks that are in a specific
            state.
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - COMPLETED
              - FAILED
              - CANCELED
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time. The default is
            25.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: startTime
          in: query
          required: true
          description: Specify this filter to limit results to tasks that began on or after
            a specific date and time.
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          required: true
          description: Specify this filter to limit results to tasks that were completed or
            canceled on or before a specific date and time.
          schema:
            type: string
            format: date-time
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /audit/tasks#startTime&endTime:
    get:
      operationId: ListAuditTasks
      description: Lists the Device Defender audits that have been performed during a given
        time period.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAuditTasksResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: startTime
          in: query
          required: true
          description: The beginning of the time period. Audit information is retained for
            a limited time (180 days). Requesting a start time prior to what is
            retained results in an "InvalidRequestException".
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          required: true
          description: The end of the time period.
          schema:
            type: string
            format: date-time
        - name: taskType
          in: query
          required: false
          description: 'A filter to limit the output to the specified type of audit: can be
            one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".'
          schema:
            type: string
            enum:
              - ON_DEMAND_AUDIT_TASK
              - SCHEDULED_AUDIT_TASK
        - name: taskStatus
          in: query
          required: false
          description: 'A filter to limit the output to audits with the specified
            completion status: can be one of "IN_PROGRESS", "COMPLETED",
            "FAILED", or "CANCELED".'
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - COMPLETED
              - FAILED
              - CANCELED
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time. The default is
            25.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /authorizers/:
    get:
      operationId: ListAuthorizers
      description: Lists the authorizers registered in your account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAuthorizersResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: pageSize
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: marker
          in: query
          required: false
          description: A marker used to get the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: isAscendingOrder
          in: query
          required: false
          description: Return the list of authorizers in ascending alphabetical order.
          schema:
            type: boolean
        - name: status
          in: query
          required: false
          description: The status of the list authorizers request.
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /billing-groups:
    get:
      operationId: ListBillingGroups
      description: Lists the billing groups you have created.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBillingGroupsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: namePrefixFilter
          in: query
          required: false
          description: Limit the results to billing groups whose names have the given
            prefix.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /cacertificates:
    get:
      operationId: ListCACertificates
      description: <p>Lists the CA certificates registered for your AWS account.</p> <p>The
        results are paginated with a default page size of 25. You can use the
        returned marker to retrieve additional results.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCACertificatesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: isAscendingOrder
          in: query
          required: false
          description: Determines the order of the results.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/certificates-by-ca/{caCertificateId}":
    get:
      operationId: ListCertificatesByCA
      description: List the device certificates signed by the specified CA certificate.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCertificatesByCAResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: caCertificateId
          in: path
          required: true
          description: The ID of the CA certificate. This operation will list all
            registered device certificate that were signed by this CA
            certificate.
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: isAscendingOrder
          in: query
          required: false
          description: Specifies the order for results. If True, the results are returned
            in ascending order, based on the creation date.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /indices:
    get:
      operationId: ListIndices
      description: Lists the search indices.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIndicesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token used to get the next set of results, or null if there are
            no additional results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 500
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/jobs/{jobId}/things":
    get:
      operationId: ListJobExecutionsForJob
      description: Lists the job executions for a job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJobExecutionsForJobResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: jobId
          in: path
          required: true
          description: The unique identifier you assigned to this job when it was created.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[a-zA-Z0-9_-]+"
        - name: status
          in: query
          required: false
          description: The status of the job.
          schema:
            type: string
            enum:
              - QUEUED
              - IN_PROGRESS
              - SUCCEEDED
              - FAILED
              - TIMED_OUT
              - REJECTED
              - REMOVED
              - CANCELED
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/things/{thingName}/jobs":
    get:
      operationId: ListJobExecutionsForThing
      description: Lists the job executions for the specified thing.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJobExecutionsForThingResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The thing name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: status
          in: query
          required: false
          description: An optional filter that lets you search for jobs that have the
            specified status.
          schema:
            type: string
            enum:
              - QUEUED
              - IN_PROGRESS
              - SUCCEEDED
              - FAILED
              - TIMED_OUT
              - REJECTED
              - REMOVED
              - CANCELED
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to be returned per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /jobs:
    get:
      operationId: ListJobs
      description: Lists jobs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJobsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: status
          in: query
          required: false
          description: An optional filter that lets you search for jobs that have the
            specified status.
          schema:
            type: string
            enum:
              - IN_PROGRESS
              - CANCELED
              - COMPLETED
              - DELETION_IN_PROGRESS
        - name: targetSelection
          in: query
          required: false
          description: "Specifies whether the job will continue to run (CONTINUOUS), or
            will be complete after all those things specified as targets have
            completed the job (SNAPSHOT). If continuous, the job may also be run
            on a thing when a change is detected in a target. For example, a job
            will run on a thing when the thing is added to a target group, even
            after the job was completed by all things originally in the group. "
          schema:
            type: string
            enum:
              - CONTINUOUS
              - SNAPSHOT
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: thingGroupName
          in: query
          required: false
          description: A filter that limits the returned jobs to those for the specified
            group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: thingGroupId
          in: query
          required: false
          description: A filter that limits the returned jobs to those for the specified
            group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9\\-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /mitigationactions/actions:
    get:
      operationId: ListMitigationActions
      description: Gets a list of all mitigation actions that match the specified filter
        criteria.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMitigationActionsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: actionType
          in: query
          required: false
          description: Specify a value to limit the result to mitigation actions with a
            specific action type.
          schema:
            type: string
            enum:
              - UPDATE_DEVICE_CERTIFICATE
              - UPDATE_CA_CERTIFICATE
              - ADD_THINGS_TO_THING_GROUP
              - REPLACE_DEFAULT_POLICY_VERSION
              - ENABLE_IOT_LOGGING
              - PUBLISH_FINDING_TO_SNS
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time. The default is
            25.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /otaUpdates:
    get:
      operationId: ListOTAUpdates
      description: Lists OTA updates.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOTAUpdatesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: A token used to retrieve the next set of results.
          schema:
            type: string
        - name: otaUpdateStatus
          in: query
          required: false
          description: The OTA update job status.
          schema:
            type: string
            enum:
              - CREATE_PENDING
              - CREATE_IN_PROGRESS
              - CREATE_COMPLETE
              - CREATE_FAILED
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /certificates-out-going:
    get:
      operationId: ListOutgoingCertificates
      description: Lists certificates that are being transferred but not yet accepted.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOutgoingCertificatesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: isAscendingOrder
          in: query
          required: false
          description: Specifies the order for results. If True, the results are returned
            in ascending order, based on the creation date.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /policies:
    get:
      operationId: ListPolicies
      description: Lists your policies.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPoliciesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: isAscendingOrder
          in: query
          required: false
          description: Specifies the order for results. If true, the results are returned
            in ascending creation order.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /policy-principals#x-amzn-iot-policy:
    get:
      deprecated: true
      operationId: ListPolicyPrincipals
      description: <p>Lists the principals associated with the specified policy.</p> <p>
        <b>Note:</b> This API is deprecated. Please use
        <a>ListTargetsForPolicy</a> instead.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPolicyPrincipalsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: x-amzn-iot-policy
          in: header
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: isAscendingOrder
          in: query
          required: false
          description: Specifies the order for results. If true, the results are returned
            in ascending creation order.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /principal-policies#x-amzn-iot-principal:
    get:
      deprecated: true
      operationId: ListPrincipalPolicies
      description: <p>Lists the policies attached to the specified principal. If you use an
        Cognito identity, the ID must be in <a
        href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito
        Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please
        use <a>ListAttachedPolicies</a> instead.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPrincipalPoliciesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: x-amzn-iot-principal
          in: header
          required: true
          description: The principal.
          schema:
            type: string
        - name: marker
          in: query
          required: false
          description: The marker for the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: pageSize
          in: query
          required: false
          description: The result page size.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: isAscendingOrder
          in: query
          required: false
          description: Specifies the order for results. If true, results are returned in
            ascending creation order.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /principals/things#x-amzn-principal:
    get:
      operationId: ListPrincipalThings
      description: "Lists the things associated with the specified principal. A principal
        can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito
        identities or federated identities. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPrincipalThingsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in this operation.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: x-amzn-principal
          in: header
          required: true
          description: The principal.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /role-aliases:
    get:
      operationId: ListRoleAliases
      description: Lists the role aliases registered in your account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRoleAliasesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: pageSize
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: marker
          in: query
          required: false
          description: A marker used to get the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: isAscendingOrder
          in: query
          required: false
          description: Return the list of role aliases in ascending alphabetical order.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /audit/scheduledaudits:
    get:
      operationId: ListScheduledAudits
      description: Lists all of your scheduled audits.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListScheduledAuditsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time. The default is
            25.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /security-profiles:
    get:
      operationId: ListSecurityProfiles
      description: Lists the Device Defender security profiles you have created. You can
        use filters to list only those security profiles associated with a thing
        group or only those associated with your account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSecurityProfilesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /security-profiles-for-target#securityProfileTargetArn:
    get:
      operationId: ListSecurityProfilesForTarget
      description: Lists the Device Defender security profiles attached to a target (thing
        group).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSecurityProfilesForTargetResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: recursive
          in: query
          required: false
          description: If true, return child groups too.
          schema:
            type: boolean
        - name: securityProfileTargetArn
          in: query
          required: true
          description: The ARN of the target (thing group) whose attached security profiles
            you want to get.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /streams:
    get:
      operationId: ListStreams
      description: Lists all of the streams in your AWS account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListStreamsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at a time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: nextToken
          in: query
          required: false
          description: A token used to get the next set of results.
          schema:
            type: string
        - name: isAscendingOrder
          in: query
          required: false
          description: Set to true to return the list of streams in ascending order.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /tags#resourceArn:
    get:
      operationId: ListTagsForResource
      description: Lists the tags (metadata) you have assigned to the resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/policy-targets/{policyName}":
    post:
      operationId: ListTargetsForPolicy
      description: List targets for the specified policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTargetsForPolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyName
          in: path
          required: true
          description: The policy name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w+=,.@-]+"
        - name: marker
          in: query
          required: false
          description: A marker used to get the next set of results.
          schema:
            type: string
            pattern: "[A-Za-z0-9+/]+={0,2}"
        - name: pageSize
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/security-profiles/{securityProfileName}/targets":
    get:
      operationId: ListTargetsForSecurityProfile
      description: Lists the targets (thing groups) associated with a given Device Defender
        security profile.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTargetsForSecurityProfileResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: securityProfileName
          in: path
          required: true
          description: The security profile.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /thing-groups:
    get:
      operationId: ListThingGroups
      description: List the thing groups in your account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingGroupsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: parentGroup
          in: query
          required: false
          description: A filter that limits the results to those with the specified parent
            group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: namePrefixFilter
          in: query
          required: false
          description: A filter that limits the results to those with the specified name
            prefix.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: recursive
          in: query
          required: false
          description: If true, return child groups as well.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/things/{thingName}/thing-groups":
    get:
      operationId: ListThingGroupsForThing
      description: List the thing groups to which the specified thing belongs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingGroupsForThingResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The thing name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/things/{thingName}/principals":
    get:
      operationId: ListThingPrincipals
      description: Lists the principals associated with the specified thing. A principal
        can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito
        identities or federated identities.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingPrincipalsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingName
          in: path
          required: true
          description: The name of the thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/thing-registration-tasks/{taskId}/reports#reportType":
    get:
      operationId: ListThingRegistrationTaskReports
      description: Information about the thing registration tasks.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingRegistrationTaskReportsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: The id of the task.
          schema:
            type: string
            maxLength: 40
        - name: reportType
          in: query
          required: true
          description: The type of task report.
          schema:
            type: string
            enum:
              - ERRORS
              - RESULTS
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /thing-registration-tasks:
    get:
      operationId: ListThingRegistrationTasks
      description: List bulk thing provisioning tasks.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingRegistrationTasksResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: status
          in: query
          required: false
          description: The status of the bulk thing provisioning task.
          schema:
            type: string
            enum:
              - InProgress
              - Completed
              - Failed
              - Cancelled
              - Cancelling
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: StartThingRegistrationTask
      description: Creates a bulk thing provisioning task.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartThingRegistrationTaskResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - templateBody
                - inputFileBucket
                - inputFileKey
                - roleArn
              properties:
                templateBody:
                  description: The provisioning template.
                  type: string
                inputFileBucket:
                  description: The S3 bucket that contains the input file.
                  type: string
                  pattern: "[a-zA-Z0-9._-]+"
                  minLength: 3
                  maxLength: 256
                inputFileKey:
                  description: The name of input file within the S3 bucket. This file
                    contains a newline delimited JSON file. Each line contains
                    the parameter values to provision one device (thing).
                  type: string
                  pattern: "[a-zA-Z0-9!_.*'()-\\/]+"
                  minLength: 1
                  maxLength: 1024
                roleArn:
                  description: The IAM role ARN that grants permission the input file.
                  type: string
                  minLength: 20
                  maxLength: 2048
        required: true
  /thing-types:
    get:
      operationId: ListThingTypes
      description: Lists the existing thing types.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingTypesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in this operation.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: thingTypeName
          in: query
          required: false
          description: The name of the thing type.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /things:
    get:
      operationId: ListThings
      description: "Lists your things. Use the <b>attributeName</b> and
        <b>attributeValue</b> parameters to filter your things. For example,
        calling <code>ListThings</code> with attributeName=Color and
        attributeValue=Red retrieves all things in the registry that contain an
        attribute <b>Color</b> with the value <b>Red</b>. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in this operation.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: attributeName
          in: query
          required: false
          description: The attribute name used to search for things.
          schema:
            type: string
            maxLength: 128
            pattern: "[a-zA-Z0-9_.,@/:#-]+"
        - name: attributeValue
          in: query
          required: false
          description: The attribute value used to search for things.
          schema:
            type: string
            maxLength: 800
            pattern: "[a-zA-Z0-9_.,@/:#-]*"
        - name: thingTypeName
          in: query
          required: false
          description: The name of the thing type used to search for things.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: RegisterThing
      description: Provisions a thing.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterThingResponse"
        "480":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: ConflictingResourceUpdateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictingResourceUpdateException"
        "486":
          description: ResourceRegistrationFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRegistrationFailureException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - templateBody
              properties:
                templateBody:
                  description: The provisioning template. See <a
                    href="https://docs.aws.amazon.com/iot/latest/developerguide/programmatic-provisioning.html">Programmatic
                    Provisioning</a> for more information.
                  type: string
                parameters:
                  description: The parameters for provisioning a thing. See <a
                    href="https://docs.aws.amazon.com/iot/latest/developerguide/programmatic-provisioning.html">Programmatic
                    Provisioning</a> for more information.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Value"
        required: true
  "/billing-groups/{billingGroupName}/things":
    get:
      operationId: ListThingsInBillingGroup
      description: Lists the things you have added to the given billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingsInBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: billingGroupName
          in: path
          required: true
          description: The name of the billing group.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return per request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/thing-groups/{thingGroupName}/things":
    get:
      operationId: ListThingsInThingGroup
      description: Lists the things in the specified group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThingsInThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: thingGroupName
          in: path
          required: true
          description: The thing group name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: recursive
          in: query
          required: false
          description: When true, list things in this thing group and in all child groups
            as well.
          schema:
            type: boolean
        - name: nextToken
          in: query
          required: false
          description: The token to retrieve the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /rules:
    get:
      operationId: ListTopicRules
      description: Lists the rules for the specific topic.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTopicRulesResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: topic
          in: query
          required: false
          description: The topic.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
        - name: nextToken
          in: query
          required: false
          description: A token used to retrieve the next value.
          schema:
            type: string
        - name: ruleDisabled
          in: query
          required: false
          description: Specifies whether the rule is disabled.
          schema:
            type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /v2LoggingLevel:
    get:
      operationId: ListV2LoggingLevels
      description: Lists logging levels.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListV2LoggingLevelsResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: NotConfiguredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotConfiguredException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: targetType
          in: query
          required: false
          description: The type of resource for which you are configuring logging. Must be
            <code>THING_Group</code>.
          schema:
            type: string
            enum:
              - DEFAULT
              - THING_GROUP
        - name: nextToken
          in: query
          required: false
          description: The token used to get the next set of results, or <b>null</b> if
            there are no additional results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: SetV2LoggingLevel
      description: Sets the logging level.
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: NotConfiguredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotConfiguredException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - logTarget
                - logLevel
              properties:
                logTarget:
                  description: A log target.
                  type: object
                  properties:
                    targetType:
                      $ref: "#/components/schemas/LogTargetType"
                    targetName:
                      $ref: "#/components/schemas/LogTargetName"
                logLevel:
                  description: The log level.
                  type: string
                  enum:
                    - DEBUG
                    - INFO
                    - ERROR
                    - WARN
                    - DISABLED
        required: true
  /violation-events#startTime&endTime:
    get:
      operationId: ListViolationEvents
      description: Lists the Device Defender security profile violations discovered during
        the given time period. You can use filters to limit the results to those
        alerts issued for a particular security profile, behavior, or thing
        (device).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViolationEventsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: startTime
          in: query
          required: true
          description: The start time for the alerts to be listed.
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          required: true
          description: The end time for the alerts to be listed.
          schema:
            type: string
            format: date-time
        - name: thingName
          in: query
          required: false
          description: A filter to limit results to those alerts caused by the specified
            thing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - name: securityProfileName
          in: query
          required: false
          description: A filter to limit results to those alerts generated by the specified
            security profile.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[a-zA-Z0-9:_-]+"
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /cacertificate:
    post:
      operationId: RegisterCACertificate
      description: Registers a CA certificate with AWS IoT. This CA certificate can then be
        used to sign device certificates, which can be then registered with AWS
        IoT. You can register up to 10 CA certificates per AWS account that have
        the same subject field. This enables you to have up to 10 certificate
        authorities sign your device certificates. If you have more than one CA
        certificate registered, make sure you pass the CA certificate when you
        register your device certificates with the RegisterCertificate API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterCACertificateResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: RegistrationCodeValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationCodeValidationException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: CertificateValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateValidationException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "486":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "487":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "488":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: setAsActive
          in: query
          required: false
          description: A boolean value that specifies if the CA certificate is set to
            active.
          schema:
            type: boolean
        - name: allowAutoRegistration
          in: query
          required: false
          description: Allows this CA certificate to be used for auto registration of
            device certificates.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - caCertificate
                - verificationCertificate
              properties:
                caCertificate:
                  description: The PEM of a certificate.
                  type: string
                  minLength: 1
                  maxLength: 65536
                verificationCertificate:
                  description: The PEM of a certificate.
                  type: string
                  minLength: 1
                  maxLength: 65536
                registrationConfig:
                  description: The registration configuration.
                  type: object
                  properties:
                    templateBody:
                      $ref: "#/components/schemas/TemplateBody"
                    roleArn:
                      $ref: "#/components/schemas/RoleArn"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /certificate/register:
    post:
      operationId: RegisterCertificate
      description: Registers a device certificate with AWS IoT. If you have more than one
        CA certificate that has the same subject field, you must specify the CA
        certificate that was used to sign the device certificate being
        registered.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterCertificateResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: CertificateValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateValidationException"
        "483":
          description: CertificateStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateStateException"
        "484":
          description: CertificateConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateConflictException"
        "485":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "486":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "487":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "488":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: setAsActive
          in: query
          required: false
          description: A boolean value that specifies if the certificate is set to active.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - certificatePem
              properties:
                certificatePem:
                  description: The PEM of a certificate.
                  type: string
                  minLength: 1
                  maxLength: 65536
                caCertificatePem:
                  description: The PEM of a certificate.
                  type: string
                  minLength: 1
                  maxLength: 65536
                status:
                  description: The status of the register certificate request.
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
                    - REVOKED
                    - PENDING_TRANSFER
                    - REGISTER_INACTIVE
                    - PENDING_ACTIVATION
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/reject-certificate-transfer/{certificateId}":
    patch:
      operationId: RejectCertificateTransfer
      description: <p>Rejects a pending certificate transfer. After AWS IoT rejects a
        certificate transfer, the certificate status changes from
        <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending
        certificate transfers, call <a>ListCertificates</a> to enumerate your
        certificates.</p> <p>This operation can only be called by the transfer
        destination. After it is called, the certificate will be returned to the
        source's account in the INACTIVE state.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: TransferAlreadyCompletedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferAlreadyCompletedException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rejectReason:
                  description: The reason the certificate transfer was rejected.
                  type: string
                  maxLength: 128
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /billing-groups/removeThingFromBillingGroup:
    put:
      operationId: RemoveThingFromBillingGroup
      description: Removes the given thing from the billing group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveThingFromBillingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                billingGroupName:
                  description: The name of the billing group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                billingGroupArn:
                  description: The ARN of the billing group.
                  type: string
                thingName:
                  description: The name of the thing to be removed from the billing group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingArn:
                  description: The ARN of the thing to be removed from the billing group.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /thing-groups/removeThingFromThingGroup:
    put:
      operationId: RemoveThingFromThingGroup
      description: Remove the specified thing from the specified group.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveThingFromThingGroupResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thingGroupName:
                  description: The group name.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingGroupArn:
                  description: The group ARN.
                  type: string
                thingName:
                  description: The name of the thing to remove from the group.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingArn:
                  description: The ARN of the thing to remove from the group.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /indices/search:
    post:
      operationId: SearchIndex
      description: The query search index.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchIndexResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: InvalidQueryException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidQueryException"
        "487":
          description: IndexNotReadyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexNotReadyException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - queryString
              properties:
                indexName:
                  description: The search index name.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                queryString:
                  description: The search query string.
                  type: string
                  minLength: 1
                nextToken:
                  description: The token used to get the next set of results, or null if
                    there are no additional results.
                  type: string
                maxResults:
                  description: The maximum number of results to return at one time.
                  type: integer
                  minimum: 1
                  maximum: 500
                queryVersion:
                  description: The query version.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /audit/tasks:
    post:
      operationId: StartOnDemandAuditTask
      description: Starts an on-demand Device Defender audit.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartOnDemandAuditTaskResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - targetCheckNames
              properties:
                targetCheckNames:
                  description: Which checks are performed during the audit. The checks you
                    specify must be enabled for your account or an exception
                    occurs. Use <code>DescribeAccountAuditConfiguration</code>
                    to see the list of all checks, including those that are
                    enabled or <code>UpdateAccountAuditConfiguration</code> to
                    select which checks are enabled.
                  type: array
                  items:
                    $ref: "#/components/schemas/AuditCheckName"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/thing-registration-tasks/{taskId}/cancel":
    put:
      operationId: StopThingRegistrationTask
      description: Cancels a bulk thing provisioning task.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopThingRegistrationTaskResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: taskId
          in: path
          required: true
          description: The bulk thing provisioning task ID.
          schema:
            type: string
            maxLength: 40
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /tags:
    post:
      operationId: TagResource
      description: Adds to or modifies the tags of the given resource. Tags are metadata
        which can be used to manage a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - tags
              properties:
                resourceArn:
                  description: The ARN of the resource.
                  type: string
                tags:
                  description: The new or modified tags for the resource.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /test-authorization:
    post:
      operationId: TestAuthorization
      description: Tests if a specified principal is authorized to perform an AWS IoT
        action on a specified resource. Use this to test and debug the
        authorization behavior of devices that connect to the AWS IoT device
        gateway.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestAuthorizationResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: clientId
          in: query
          required: false
          description: The MQTT client ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - authInfos
              properties:
                principal:
                  description: The principal.
                  type: string
                cognitoIdentityPoolId:
                  description: The Cognito identity pool ID.
                  type: string
                authInfos:
                  description: A list of authorization info objects. Simulating
                    authorization will create a response for each
                    <code>authInfo</code> object in the list.
                  type: array
                  items:
                    $ref: "#/components/schemas/AuthInfo"
                  minItems: 1
                  maxItems: 10
                policyNamesToAdd:
                  description: When testing custom authorization, the policies specified
                    here are treated as if they are attached to the principal
                    being authorized.
                  type: array
                  items:
                    $ref: "#/components/schemas/PolicyName"
                policyNamesToSkip:
                  description: When testing custom authorization, the policies specified
                    here are treated as if they are not attached to the
                    principal being authorized.
                  type: array
                  items:
                    $ref: "#/components/schemas/PolicyName"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/authorizer/{authorizerName}/test":
    post:
      operationId: TestInvokeAuthorizer
      description: Tests a custom authorization behavior by invoking a specified custom
        authorizer. Use this to test and debug the custom authorization behavior
        of devices that connect to the AWS IoT device gateway.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestInvokeAuthorizerResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "486":
          description: InvalidResponseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResponseException"
      parameters:
        - name: authorizerName
          in: path
          required: true
          description: The custom authorizer name.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: "[\\w=,@-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - tokenSignature
              properties:
                token:
                  description: The token returned by your custom authentication service.
                  type: string
                  minLength: 1
                  maxLength: 6144
                tokenSignature:
                  description: The signature made with the token and your custom
                    authentication service's private key.
                  type: string
                  pattern: "[A-Za-z0-9+/]+={0,2}"
                  minLength: 1
                  maxLength: 2560
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/transfer-certificate/{certificateId}#targetAwsAccount":
    patch:
      operationId: TransferCertificate
      description: <p>Transfers the specified certificate to the specified AWS account.</p>
        <p>You can cancel the transfer until it is acknowledged by the
        recipient.</p> <p>No notification is sent to the transfer destination's
        account. It is up to the caller to notify the transfer target.</p>
        <p>The certificate being transferred must not be in the ACTIVE state.
        You can use the UpdateCertificate API to deactivate it.</p> <p>The
        certificate must not have any policies attached to it. You can use the
        DetachPrincipalPolicy API to detach them.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferCertificateResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: CertificateStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateStateException"
        "483":
          description: TransferConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferConflictException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
        - name: targetAwsAccount
          in: query
          required: true
          description: The AWS account.
          schema:
            type: string
            minLength: 12
            maxLength: 12
            pattern: "[0-9]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transferMessage:
                  description: The transfer message.
                  type: string
                  maxLength: 128
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /untag:
    post:
      operationId: UntagResource
      description: Removes the given tags (metadata) from the resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - tagKeys
              properties:
                resourceArn:
                  description: The ARN of the resource.
                  type: string
                tagKeys:
                  description: A list of the keys of the tags to be removed from the
                    resource.
                  type: array
                  items:
                    $ref: "#/components/schemas/TagKey"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/certificates/{certificateId}#newStatus":
    put:
      operationId: UpdateCertificate
      description: <p>Updates the status of the specified certificate. This operation is
        idempotent.</p> <p>Moving a certificate from the ACTIVE state (including
        REVOKED) will not disconnect currently connected devices, but these
        devices will be unable to reconnect.</p> <p>The ACTIVE state is required
        to authenticate devices connecting to AWS IoT using a certificate.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: CertificateStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateStateException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: UnauthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: certificateId
          in: path
          required: true
          description: The ID of the certificate. (The last part of the certificate ARN
            contains the certificate ID.)
          schema:
            type: string
            minLength: 64
            maxLength: 64
            pattern: (0x)?[a-fA-F0-9]+
        - name: newStatus
          in: query
          required: true
          description: <p>The new status.</p> <p> <b>Note:</b> Setting the status to
            PENDING_TRANSFER will result in an exception being thrown.
            PENDING_TRANSFER is a status used internally by AWS IoT. It is not
            intended for developer use.</p> <p> <b>Note:</b> The status value
            REGISTER_INACTIVE is deprecated and should not be used.</p>
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - REVOKED
              - PENDING_TRANSFER
              - REGISTER_INACTIVE
              - PENDING_ACTIVATION
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /thing-groups/updateThingGroupsForThing:
    put:
      operationId: UpdateThingGroupsForThing
      description: Updates the groups to which the thing belongs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateThingGroupsForThingResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thingName:
                  description: The thing whose group memberships will be updated.
                  type: string
                  pattern: "[a-zA-Z0-9:_-]+"
                  minLength: 1
                  maxLength: 128
                thingGroupsToAdd:
                  description: The groups to which the thing will be added.
                  type: array
                  items:
                    $ref: "#/components/schemas/ThingGroupName"
                thingGroupsToRemove:
                  description: The groups from which the thing will be removed.
                  type: array
                  items:
                    $ref: "#/components/schemas/ThingGroupName"
                overrideDynamicGroups:
                  description: Override dynamic thing groups with static thing groups when
                    10-group limit is reached. If a thing belongs to 10 thing
                    groups, and one or more of those groups are dynamic thing
                    groups, adding a thing to a static group removes the thing
                    from the last dynamic group.
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /security-profile-behaviors/validate:
    post:
      operationId: ValidateSecurityProfileBehaviors
      description: Validates a Device Defender security profile behaviors specification.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateSecurityProfileBehaviorsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - behaviors
              properties:
                behaviors:
                  description: Specifies the behaviors that, when violated by a device
                    (thing), cause an alert.
                  type: array
                  items:
                    $ref: "#/components/schemas/Behavior"
                  maxItems: 100
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://iot.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT multi-region endpoint
  - url: https://iot.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT multi-region endpoint
  - url: http://iot.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT endpoint for China (Beijing) and China (Ningxia)
  - url: https://iot.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  requestBodies:
    CreateTopicRuleBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - topicRulePayload
            properties:
              topicRulePayload:
                description: Describes a rule.
                type: object
                properties:
                  sql:
                    $ref: "#/components/schemas/SQL"
                  description:
                    $ref: "#/components/schemas/Description"
                  actions:
                    $ref: "#/components/schemas/ActionList"
                  ruleDisabled:
                    $ref: "#/components/schemas/IsDisabled"
                  awsIotSqlVersion:
                    $ref: "#/components/schemas/AwsIotSqlVersion"
                  errorAction:
                    $ref: "#/components/schemas/Action"
      required: true
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ResourceNotFoundException: {}
    TransferAlreadyCompletedException: {}
    InvalidRequestException: {}
    ThrottlingException: {}
    UnauthorizedException: {}
    ServiceUnavailableException: {}
    InternalFailureException: {}
    AddThingToBillingGroupResponse:
      type: object
      properties: {}
    AddThingToThingGroupResponse:
      type: object
      properties: {}
    AssociateTargetsWithJobResponse:
      type: object
      properties:
        jobArn:
          $ref: "#/components/schemas/JobArn"
        jobId:
          $ref: "#/components/schemas/JobId"
        description:
          $ref: "#/components/schemas/JobDescription"
    TargetArn:
      type: string
    LimitExceededException: {}
    AttachSecurityProfileResponse:
      type: object
      properties: {}
    VersionConflictException: {}
    AttachThingPrincipalResponse:
      type: object
      properties: {}
      description: The output from the AttachThingPrincipal operation.
    CancelAuditMitigationActionsTaskResponse:
      type: object
      properties: {}
    CancelAuditTaskResponse:
      type: object
      properties: {}
    CancelJobResponse:
      type: object
      properties:
        jobArn:
          $ref: "#/components/schemas/JobArn"
        jobId:
          $ref: "#/components/schemas/JobId"
        description:
          $ref: "#/components/schemas/JobDescription"
    DetailsValue:
      type: string
      pattern: "[^\\p\\{C\\}]*\\+"
      minLength: 1
      maxLength: 1024
    InvalidStateTransitionException: {}
    ClearDefaultAuthorizerResponse:
      type: object
      properties: {}
    CreateAuthorizerResponse:
      type: object
      properties:
        authorizerName:
          $ref: "#/components/schemas/AuthorizerName"
        authorizerArn:
          $ref: "#/components/schemas/AuthorizerArn"
    KeyValue:
      type: string
      maxLength: 5120
    ResourceAlreadyExistsException: {}
    CreateBillingGroupResponse:
      type: object
      properties:
        billingGroupName:
          $ref: "#/components/schemas/BillingGroupName"
        billingGroupArn:
          $ref: "#/components/schemas/BillingGroupArn"
        billingGroupId:
          $ref: "#/components/schemas/BillingGroupId"
    BillingGroupDescription:
      type: string
      pattern: "[\\p{Graph}\\x20]*"
      maxLength: 2028
    Tag:
      type: object
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: A set of key/value pairs that are used to manage the resource.
    CreateCertificateFromCsrResponse:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        certificatePem:
          $ref: "#/components/schemas/CertificatePem"
      description: The output from the CreateCertificateFromCsr operation.
    CreateDynamicThingGroupResponse:
      type: object
      properties:
        thingGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupArn:
          $ref: "#/components/schemas/ThingGroupArn"
        thingGroupId:
          $ref: "#/components/schemas/ThingGroupId"
        indexName:
          $ref: "#/components/schemas/IndexName"
        queryString:
          $ref: "#/components/schemas/QueryString"
        queryVersion:
          $ref: "#/components/schemas/QueryVersion"
    ThingGroupDescription:
      type: string
      pattern: "[\\p{Graph}\\x20]*"
      maxLength: 2028
    AttributePayload:
      type: object
      properties:
        attributes:
          $ref: "#/components/schemas/Attributes"
        merge:
          $ref: "#/components/schemas/Flag"
      description: The attribute payload.
    InvalidQueryException: {}
    CreateJobResponse:
      type: object
      properties:
        jobArn:
          $ref: "#/components/schemas/JobArn"
        jobId:
          $ref: "#/components/schemas/JobId"
        description:
          $ref: "#/components/schemas/JobDescription"
    RoleArn:
      type: string
      minLength: 20
      maxLength: 2048
    ExpiresInSec:
      type: integer
      minimum: 60
      maximum: 3600
    MaxJobExecutionsPerMin:
      type: integer
      minimum: 1
    ExponentialRolloutRate:
      type: object
      required:
        - baseRatePerMinute
        - incrementFactor
        - rateIncreaseCriteria
      properties:
        baseRatePerMinute:
          $ref: "#/components/schemas/RolloutRatePerMinute"
        incrementFactor:
          $ref: "#/components/schemas/IncrementFactor"
        rateIncreaseCriteria:
          $ref: "#/components/schemas/RateIncreaseCriteria"
      description: Allows you to create an exponential rate of rollout for a job.
    AbortCriteriaList:
      type: array
      items:
        $ref: "#/components/schemas/AbortCriteria"
      minItems: 1
    InProgressTimeoutInMinutes:
      type: integer
    CreateKeysAndCertificateResponse:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        certificatePem:
          $ref: "#/components/schemas/CertificatePem"
        keyPair:
          $ref: "#/components/schemas/KeyPair"
      description: The output of the CreateKeysAndCertificate operation.
    CreateMitigationActionResponse:
      type: object
      properties:
        actionArn:
          $ref: "#/components/schemas/MitigationActionArn"
        actionId:
          $ref: "#/components/schemas/MitigationActionId"
    UpdateDeviceCertificateParams:
      type: object
      required:
        - action
      properties:
        action:
          $ref: "#/components/schemas/DeviceCertificateUpdateAction"
      description: Parameters to define a mitigation action that changes the state of the
        device certificate to inactive.
    UpdateCACertificateParams:
      type: object
      required:
        - action
      properties:
        action:
          $ref: "#/components/schemas/CACertificateUpdateAction"
      description: Parameters to define a mitigation action that changes the state of the
        CA certificate to inactive.
    AddThingsToThingGroupParams:
      type: object
      required:
        - thingGroupNames
      properties:
        thingGroupNames:
          $ref: "#/components/schemas/ThingGroupNames"
        overrideDynamicGroups:
          $ref: "#/components/schemas/OverrideDynamicGroups"
      description: Parameters used when defining a mitigation action that move a set of
        things to a thing group.
    ReplaceDefaultPolicyVersionParams:
      type: object
      required:
        - templateName
      properties:
        templateName:
          $ref: "#/components/schemas/PolicyTemplateName"
      description: Parameters to define a mitigation action that adds a blank policy to
        restrict permissions.
    EnableIoTLoggingParams:
      type: object
      required:
        - roleArnForLogging
        - logLevel
      properties:
        roleArnForLogging:
          $ref: "#/components/schemas/RoleArn"
        logLevel:
          $ref: "#/components/schemas/LogLevel"
      description: Parameters used when defining a mitigation action that enable AWS IoT
        logging.
    PublishFindingToSnsParams:
      type: object
      required:
        - topicArn
      properties:
        topicArn:
          $ref: "#/components/schemas/SnsTopicArn"
      description: Parameters to define a mitigation action that publishes findings to
        Amazon SNS. You can implement your own custom actions in response to the
        Amazon SNS messages.
    CreateOTAUpdateResponse:
      type: object
      properties:
        otaUpdateId:
          $ref: "#/components/schemas/OTAUpdateId"
        awsIotJobId:
          $ref: "#/components/schemas/AwsIotJobId"
        otaUpdateArn:
          $ref: "#/components/schemas/OTAUpdateArn"
        awsIotJobArn:
          $ref: "#/components/schemas/AwsIotJobArn"
        otaUpdateStatus:
          $ref: "#/components/schemas/OTAUpdateStatus"
    Target:
      type: string
    MaximumPerMinute:
      type: integer
      minimum: 1
      maximum: 1000
    OTAUpdateFile:
      type: object
      properties:
        fileName:
          $ref: "#/components/schemas/FileName"
        fileVersion:
          $ref: "#/components/schemas/OTAUpdateFileVersion"
        fileLocation:
          $ref: "#/components/schemas/FileLocation"
        codeSigning:
          $ref: "#/components/schemas/CodeSigning"
        attributes:
          $ref: "#/components/schemas/AttributesMap"
      description: Describes a file to be associated with an OTA update.
    Value:
      type: string
    CreatePolicyResponse:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyArn:
          $ref: "#/components/schemas/PolicyArn"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
        policyVersionId:
          $ref: "#/components/schemas/PolicyVersionId"
      description: The output from the CreatePolicy operation.
    MalformedPolicyException: {}
    CreatePolicyVersionResponse:
      type: object
      properties:
        policyArn:
          $ref: "#/components/schemas/PolicyArn"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
        policyVersionId:
          $ref: "#/components/schemas/PolicyVersionId"
        isDefaultVersion:
          $ref: "#/components/schemas/IsDefaultVersion"
      description: The output of the CreatePolicyVersion operation.
    VersionsLimitExceededException: {}
    CreateRoleAliasResponse:
      type: object
      properties:
        roleAlias:
          $ref: "#/components/schemas/RoleAlias"
        roleAliasArn:
          $ref: "#/components/schemas/RoleAliasArn"
    CreateScheduledAuditResponse:
      type: object
      properties:
        scheduledAuditArn:
          $ref: "#/components/schemas/ScheduledAuditArn"
    AuditCheckName:
      type: string
      description: An audit check name. Checks must be enabled for your account. (Use
        <code>DescribeAccountAuditConfiguration</code> to see the list of all
        checks, including those that are enabled or use
        <code>UpdateAccountAuditConfiguration</code> to select which checks are
        enabled.)
    CreateSecurityProfileResponse:
      type: object
      properties:
        securityProfileName:
          $ref: "#/components/schemas/SecurityProfileName"
        securityProfileArn:
          $ref: "#/components/schemas/SecurityProfileArn"
    Behavior:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/BehaviorName"
        metric:
          $ref: "#/components/schemas/BehaviorMetric"
        criteria:
          $ref: "#/components/schemas/BehaviorCriteria"
      description: A Device Defender security profile behavior.
    AlertTarget:
      type: object
      required:
        - alertTargetArn
        - roleArn
      properties:
        alertTargetArn:
          $ref: "#/components/schemas/AlertTargetArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: A structure containing the alert target ARN and the role ARN.
    BehaviorMetric:
      type: string
    CreateStreamResponse:
      type: object
      properties:
        streamId:
          $ref: "#/components/schemas/StreamId"
        streamArn:
          $ref: "#/components/schemas/StreamArn"
        description:
          $ref: "#/components/schemas/StreamDescription"
        streamVersion:
          $ref: "#/components/schemas/StreamVersion"
    StreamFile:
      type: object
      properties:
        fileId:
          $ref: "#/components/schemas/FileId"
        s3Location:
          $ref: "#/components/schemas/S3Location"
      description: Represents a file to stream.
    CreateThingResponse:
      type: object
      properties:
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
        thingId:
          $ref: "#/components/schemas/ThingId"
      description: The output of the CreateThing operation.
    Attributes:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    Flag:
      type: boolean
    CreateThingGroupResponse:
      type: object
      properties:
        thingGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupArn:
          $ref: "#/components/schemas/ThingGroupArn"
        thingGroupId:
          $ref: "#/components/schemas/ThingGroupId"
    CreateThingTypeResponse:
      type: object
      properties:
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        thingTypeArn:
          $ref: "#/components/schemas/ThingTypeArn"
        thingTypeId:
          $ref: "#/components/schemas/ThingTypeId"
      description: The output of the CreateThingType operation.
    ThingTypeDescription:
      type: string
      pattern: "[\\p{Graph}\\x20]*"
      maxLength: 2028
    SearchableAttributes:
      type: array
      items:
        $ref: "#/components/schemas/AttributeName"
    SQL:
      type: string
    Description:
      type: string
    ActionList:
      type: array
      items:
        $ref: "#/components/schemas/Action"
      minItems: 0
      maxItems: 10
    IsDisabled:
      type: boolean
    AwsIotSqlVersion:
      type: string
    Action:
      type: object
      properties:
        dynamoDB:
          $ref: "#/components/schemas/DynamoDBAction"
        dynamoDBv2:
          $ref: "#/components/schemas/DynamoDBv2Action"
        lambda:
          $ref: "#/components/schemas/LambdaAction"
        sns:
          $ref: "#/components/schemas/SnsAction"
        sqs:
          $ref: "#/components/schemas/SqsAction"
        kinesis:
          $ref: "#/components/schemas/KinesisAction"
        republish:
          $ref: "#/components/schemas/RepublishAction"
        s3:
          $ref: "#/components/schemas/S3Action"
        firehose:
          $ref: "#/components/schemas/FirehoseAction"
        cloudwatchMetric:
          $ref: "#/components/schemas/CloudwatchMetricAction"
        cloudwatchAlarm:
          $ref: "#/components/schemas/CloudwatchAlarmAction"
        elasticsearch:
          $ref: "#/components/schemas/ElasticsearchAction"
        salesforce:
          $ref: "#/components/schemas/SalesforceAction"
        iotAnalytics:
          $ref: "#/components/schemas/IotAnalyticsAction"
        iotEvents:
          $ref: "#/components/schemas/IotEventsAction"
        stepFunctions:
          $ref: "#/components/schemas/StepFunctionsAction"
      description: Describes the actions associated with a rule.
    SqlParseException: {}
    InternalException: {}
    ConflictingResourceUpdateException: {}
    DeleteAccountAuditConfigurationResponse:
      type: object
      properties: {}
    DeleteAuthorizerResponse:
      type: object
      properties: {}
    DeleteConflictException: {}
    DeleteBillingGroupResponse:
      type: object
      properties: {}
    DeleteCACertificateResponse:
      type: object
      properties: {}
      description: The output for the DeleteCACertificate operation.
    CertificateStateException: {}
    DeleteDynamicThingGroupResponse:
      type: object
      properties: {}
    DeleteMitigationActionResponse:
      type: object
      properties: {}
    DeleteOTAUpdateResponse:
      type: object
      properties: {}
    DeleteRegistrationCodeResponse:
      type: object
      properties: {}
      description: The output for the DeleteRegistrationCode operation.
    DeleteRoleAliasResponse:
      type: object
      properties: {}
    DeleteScheduledAuditResponse:
      type: object
      properties: {}
    DeleteSecurityProfileResponse:
      type: object
      properties: {}
    DeleteStreamResponse:
      type: object
      properties: {}
    DeleteThingResponse:
      type: object
      properties: {}
      description: The output of the DeleteThing operation.
    DeleteThingGroupResponse:
      type: object
      properties: {}
    DeleteThingTypeResponse:
      type: object
      properties: {}
      description: The output for the DeleteThingType operation.
    DeprecateThingTypeResponse:
      type: object
      properties: {}
      description: The output for the DeprecateThingType operation.
    DescribeAccountAuditConfigurationResponse:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        auditNotificationTargetConfigurations:
          $ref: "#/components/schemas/AuditNotificationTargetConfigurations"
        auditCheckConfigurations:
          $ref: "#/components/schemas/AuditCheckConfigurations"
    DescribeAuditFindingResponse:
      type: object
      properties:
        finding:
          $ref: "#/components/schemas/AuditFinding"
    DescribeAuditMitigationActionsTaskResponse:
      type: object
      properties:
        taskStatus:
          $ref: "#/components/schemas/AuditMitigationActionsTaskStatus"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        endTime:
          $ref: "#/components/schemas/Timestamp"
        taskStatistics:
          $ref: "#/components/schemas/AuditMitigationActionsTaskStatistics"
        target:
          $ref: "#/components/schemas/AuditMitigationActionsTaskTarget"
        auditCheckToActionsMapping:
          $ref: "#/components/schemas/AuditCheckToActionsMapping"
        actionsDefinition:
          $ref: "#/components/schemas/MitigationActionList"
    DescribeAuditTaskResponse:
      type: object
      properties:
        taskStatus:
          $ref: "#/components/schemas/AuditTaskStatus"
        taskType:
          $ref: "#/components/schemas/AuditTaskType"
        taskStartTime:
          $ref: "#/components/schemas/Timestamp"
        taskStatistics:
          $ref: "#/components/schemas/TaskStatistics"
        scheduledAuditName:
          $ref: "#/components/schemas/ScheduledAuditName"
        auditDetails:
          $ref: "#/components/schemas/AuditDetails"
    DescribeAuthorizerResponse:
      type: object
      properties:
        authorizerDescription:
          $ref: "#/components/schemas/AuthorizerDescription"
    DescribeBillingGroupResponse:
      type: object
      properties:
        billingGroupName:
          $ref: "#/components/schemas/BillingGroupName"
        billingGroupId:
          $ref: "#/components/schemas/BillingGroupId"
        billingGroupArn:
          $ref: "#/components/schemas/BillingGroupArn"
        version:
          $ref: "#/components/schemas/Version"
        billingGroupProperties:
          $ref: "#/components/schemas/BillingGroupProperties"
        billingGroupMetadata:
          $ref: "#/components/schemas/BillingGroupMetadata"
    DescribeCACertificateResponse:
      type: object
      properties:
        certificateDescription:
          $ref: "#/components/schemas/CACertificateDescription"
        registrationConfig:
          $ref: "#/components/schemas/RegistrationConfig"
      description: The output from the DescribeCACertificate operation.
    DescribeCertificateResponse:
      type: object
      properties:
        certificateDescription:
          $ref: "#/components/schemas/CertificateDescription"
      description: The output of the DescribeCertificate operation.
    DescribeDefaultAuthorizerResponse:
      type: object
      properties:
        authorizerDescription:
          $ref: "#/components/schemas/AuthorizerDescription"
    DescribeEndpointResponse:
      type: object
      properties:
        endpointAddress:
          $ref: "#/components/schemas/EndpointAddress"
      description: The output from the DescribeEndpoint operation.
    DescribeEventConfigurationsResponse:
      type: object
      properties:
        eventConfigurations:
          $ref: "#/components/schemas/EventConfigurations"
        creationDate:
          $ref: "#/components/schemas/CreationDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"
    DescribeIndexResponse:
      type: object
      properties:
        indexName:
          $ref: "#/components/schemas/IndexName"
        indexStatus:
          $ref: "#/components/schemas/IndexStatus"
        schema:
          $ref: "#/components/schemas/IndexSchema"
    DescribeJobResponse:
      type: object
      properties:
        documentSource:
          $ref: "#/components/schemas/JobDocumentSource"
        job:
          $ref: "#/components/schemas/Job"
    DescribeJobExecutionResponse:
      type: object
      properties:
        execution:
          $ref: "#/components/schemas/JobExecution"
    DescribeMitigationActionResponse:
      type: object
      properties:
        actionName:
          $ref: "#/components/schemas/MitigationActionName"
        actionType:
          $ref: "#/components/schemas/MitigationActionType"
        actionArn:
          $ref: "#/components/schemas/MitigationActionArn"
        actionId:
          $ref: "#/components/schemas/MitigationActionId"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        actionParams:
          $ref: "#/components/schemas/MitigationActionParams"
        creationDate:
          $ref: "#/components/schemas/Timestamp"
        lastModifiedDate:
          $ref: "#/components/schemas/Timestamp"
    DescribeRoleAliasResponse:
      type: object
      properties:
        roleAliasDescription:
          $ref: "#/components/schemas/RoleAliasDescription"
    DescribeScheduledAuditResponse:
      type: object
      properties:
        frequency:
          $ref: "#/components/schemas/AuditFrequency"
        dayOfMonth:
          $ref: "#/components/schemas/DayOfMonth"
        dayOfWeek:
          $ref: "#/components/schemas/DayOfWeek"
        targetCheckNames:
          $ref: "#/components/schemas/TargetAuditCheckNames"
        scheduledAuditName:
          $ref: "#/components/schemas/ScheduledAuditName"
        scheduledAuditArn:
          $ref: "#/components/schemas/ScheduledAuditArn"
    DescribeSecurityProfileResponse:
      type: object
      properties:
        securityProfileName:
          $ref: "#/components/schemas/SecurityProfileName"
        securityProfileArn:
          $ref: "#/components/schemas/SecurityProfileArn"
        securityProfileDescription:
          $ref: "#/components/schemas/SecurityProfileDescription"
        behaviors:
          $ref: "#/components/schemas/Behaviors"
        alertTargets:
          $ref: "#/components/schemas/AlertTargets"
        additionalMetricsToRetain:
          $ref: "#/components/schemas/AdditionalMetricsToRetainList"
        version:
          $ref: "#/components/schemas/Version"
        creationDate:
          $ref: "#/components/schemas/Timestamp"
        lastModifiedDate:
          $ref: "#/components/schemas/Timestamp"
    DescribeStreamResponse:
      type: object
      properties:
        streamInfo:
          $ref: "#/components/schemas/StreamInfo"
    DescribeThingResponse:
      type: object
      properties:
        defaultClientId:
          $ref: "#/components/schemas/ClientId"
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingId:
          $ref: "#/components/schemas/ThingId"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        attributes:
          $ref: "#/components/schemas/Attributes"
        version:
          $ref: "#/components/schemas/Version"
        billingGroupName:
          $ref: "#/components/schemas/BillingGroupName"
      description: The output from the DescribeThing operation.
    DescribeThingGroupResponse:
      type: object
      properties:
        thingGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupId:
          $ref: "#/components/schemas/ThingGroupId"
        thingGroupArn:
          $ref: "#/components/schemas/ThingGroupArn"
        version:
          $ref: "#/components/schemas/Version"
        thingGroupProperties:
          $ref: "#/components/schemas/ThingGroupProperties"
        thingGroupMetadata:
          $ref: "#/components/schemas/ThingGroupMetadata"
        indexName:
          $ref: "#/components/schemas/IndexName"
        queryString:
          $ref: "#/components/schemas/QueryString"
        queryVersion:
          $ref: "#/components/schemas/QueryVersion"
        status:
          $ref: "#/components/schemas/DynamicGroupStatus"
    DescribeThingRegistrationTaskResponse:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/TaskId"
        creationDate:
          $ref: "#/components/schemas/CreationDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"
        templateBody:
          $ref: "#/components/schemas/TemplateBody"
        inputFileBucket:
          $ref: "#/components/schemas/RegistryS3BucketName"
        inputFileKey:
          $ref: "#/components/schemas/RegistryS3KeyName"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        status:
          $ref: "#/components/schemas/Status"
        message:
          $ref: "#/components/schemas/ErrorMessage"
        successCount:
          $ref: "#/components/schemas/Count"
        failureCount:
          $ref: "#/components/schemas/Count"
        percentageProgress:
          $ref: "#/components/schemas/Percentage"
    DescribeThingTypeResponse:
      type: object
      properties:
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        thingTypeId:
          $ref: "#/components/schemas/ThingTypeId"
        thingTypeArn:
          $ref: "#/components/schemas/ThingTypeArn"
        thingTypeProperties:
          $ref: "#/components/schemas/ThingTypeProperties"
        thingTypeMetadata:
          $ref: "#/components/schemas/ThingTypeMetadata"
      description: The output for the DescribeThingType operation.
    DetachSecurityProfileResponse:
      type: object
      properties: {}
    DetachThingPrincipalResponse:
      type: object
      properties: {}
      description: The output from the DetachThingPrincipal operation.
    GetEffectivePoliciesResponse:
      type: object
      properties:
        effectivePolicies:
          $ref: "#/components/schemas/EffectivePolicies"
    GetIndexingConfigurationResponse:
      type: object
      properties:
        thingIndexingConfiguration:
          $ref: "#/components/schemas/ThingIndexingConfiguration"
        thingGroupIndexingConfiguration:
          $ref: "#/components/schemas/ThingGroupIndexingConfiguration"
    GetJobDocumentResponse:
      type: object
      properties:
        document:
          $ref: "#/components/schemas/JobDocument"
    GetLoggingOptionsResponse:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        logLevel:
          $ref: "#/components/schemas/LogLevel"
      description: The output from the GetLoggingOptions operation.
    GetOTAUpdateResponse:
      type: object
      properties:
        otaUpdateInfo:
          $ref: "#/components/schemas/OTAUpdateInfo"
    GetPolicyResponse:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyArn:
          $ref: "#/components/schemas/PolicyArn"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
        defaultVersionId:
          $ref: "#/components/schemas/PolicyVersionId"
        creationDate:
          $ref: "#/components/schemas/DateType"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
        generationId:
          $ref: "#/components/schemas/GenerationId"
      description: The output from the GetPolicy operation.
    GetPolicyVersionResponse:
      type: object
      properties:
        policyArn:
          $ref: "#/components/schemas/PolicyArn"
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
        policyVersionId:
          $ref: "#/components/schemas/PolicyVersionId"
        isDefaultVersion:
          $ref: "#/components/schemas/IsDefaultVersion"
        creationDate:
          $ref: "#/components/schemas/DateType"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
        generationId:
          $ref: "#/components/schemas/GenerationId"
      description: The output from the GetPolicyVersion operation.
    GetRegistrationCodeResponse:
      type: object
      properties:
        registrationCode:
          $ref: "#/components/schemas/RegistrationCode"
      description: The output from the GetRegistrationCode operation.
    GetStatisticsResponse:
      type: object
      properties:
        statistics:
          $ref: "#/components/schemas/Statistics"
    InvalidAggregationException: {}
    IndexNotReadyException: {}
    GetTopicRuleResponse:
      type: object
      properties:
        ruleArn:
          $ref: "#/components/schemas/RuleArn"
        rule:
          $ref: "#/components/schemas/TopicRule"
      description: The output from the GetTopicRule operation.
    GetV2LoggingOptionsResponse:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        defaultLogLevel:
          $ref: "#/components/schemas/LogLevel"
        disableAllLogs:
          $ref: "#/components/schemas/DisableAllLogs"
    NotConfiguredException: {}
    ListActiveViolationsResponse:
      type: object
      properties:
        activeViolations:
          $ref: "#/components/schemas/ActiveViolations"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListAttachedPoliciesResponse:
      type: object
      properties:
        policies:
          $ref: "#/components/schemas/Policies"
        nextMarker:
          $ref: "#/components/schemas/Marker"
    ListAuditFindingsResponse:
      type: object
      properties:
        findings:
          $ref: "#/components/schemas/AuditFindings"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    CertificateId:
      type: string
      pattern: (0x)?[a-fA-F0-9]+
      minLength: 64
      maxLength: 64
    CognitoIdentityPoolId:
      type: string
    ClientId:
      type: string
    PolicyVersionIdentifier:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyVersionId:
          $ref: "#/components/schemas/PolicyVersionId"
      description: Information about the version of the policy associated with the resource.
    AwsAccountId:
      type: string
      pattern: "[0-9]+"
      minLength: 12
      maxLength: 12
    ListAuditMitigationActionsExecutionsResponse:
      type: object
      properties:
        actionsExecutions:
          $ref: "#/components/schemas/AuditMitigationActionExecutionMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListAuditMitigationActionsTasksResponse:
      type: object
      properties:
        tasks:
          $ref: "#/components/schemas/AuditMitigationActionsTaskMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListAuditTasksResponse:
      type: object
      properties:
        tasks:
          $ref: "#/components/schemas/AuditTaskMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListAuthorizersResponse:
      type: object
      properties:
        authorizers:
          $ref: "#/components/schemas/Authorizers"
        nextMarker:
          $ref: "#/components/schemas/Marker"
    ListBillingGroupsResponse:
      type: object
      properties:
        billingGroups:
          $ref: "#/components/schemas/BillingGroupNameAndArnList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListCACertificatesResponse:
      type: object
      properties:
        certificates:
          $ref: "#/components/schemas/CACertificates"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output from the ListCACertificates operation.
    ListCertificatesResponse:
      type: object
      properties:
        certificates:
          $ref: "#/components/schemas/Certificates"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output of the ListCertificates operation.
    ListCertificatesByCAResponse:
      type: object
      properties:
        certificates:
          $ref: "#/components/schemas/Certificates"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output of the ListCertificatesByCA operation.
    ListIndicesResponse:
      type: object
      properties:
        indexNames:
          $ref: "#/components/schemas/IndexNamesList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListJobExecutionsForJobResponse:
      type: object
      properties:
        executionSummaries:
          $ref: "#/components/schemas/JobExecutionSummaryForJobList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListJobExecutionsForThingResponse:
      type: object
      properties:
        executionSummaries:
          $ref: "#/components/schemas/JobExecutionSummaryForThingList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListJobsResponse:
      type: object
      properties:
        jobs:
          $ref: "#/components/schemas/JobSummaryList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListMitigationActionsResponse:
      type: object
      properties:
        actionIdentifiers:
          $ref: "#/components/schemas/MitigationActionIdentifierList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListOTAUpdatesResponse:
      type: object
      properties:
        otaUpdates:
          $ref: "#/components/schemas/OTAUpdatesSummary"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListOutgoingCertificatesResponse:
      type: object
      properties:
        outgoingCertificates:
          $ref: "#/components/schemas/OutgoingCertificates"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output from the ListOutgoingCertificates operation.
    ListPoliciesResponse:
      type: object
      properties:
        policies:
          $ref: "#/components/schemas/Policies"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output from the ListPolicies operation.
    ListPolicyPrincipalsResponse:
      type: object
      properties:
        principals:
          $ref: "#/components/schemas/Principals"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output from the ListPolicyPrincipals operation.
    ListPolicyVersionsResponse:
      type: object
      properties:
        policyVersions:
          $ref: "#/components/schemas/PolicyVersions"
      description: The output from the ListPolicyVersions operation.
    ListPrincipalPoliciesResponse:
      type: object
      properties:
        policies:
          $ref: "#/components/schemas/Policies"
        nextMarker:
          $ref: "#/components/schemas/Marker"
      description: The output from the ListPrincipalPolicies operation.
    ListPrincipalThingsResponse:
      type: object
      properties:
        things:
          $ref: "#/components/schemas/ThingNameList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
      description: The output from the ListPrincipalThings operation.
    ListRoleAliasesResponse:
      type: object
      properties:
        roleAliases:
          $ref: "#/components/schemas/RoleAliases"
        nextMarker:
          $ref: "#/components/schemas/Marker"
    ListScheduledAuditsResponse:
      type: object
      properties:
        scheduledAudits:
          $ref: "#/components/schemas/ScheduledAuditMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListSecurityProfilesResponse:
      type: object
      properties:
        securityProfileIdentifiers:
          $ref: "#/components/schemas/SecurityProfileIdentifiers"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListSecurityProfilesForTargetResponse:
      type: object
      properties:
        securityProfileTargetMappings:
          $ref: "#/components/schemas/SecurityProfileTargetMappings"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListStreamsResponse:
      type: object
      properties:
        streams:
          $ref: "#/components/schemas/StreamsSummary"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: "#/components/schemas/TagList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListTargetsForPolicyResponse:
      type: object
      properties:
        targets:
          $ref: "#/components/schemas/PolicyTargets"
        nextMarker:
          $ref: "#/components/schemas/Marker"
    ListTargetsForSecurityProfileResponse:
      type: object
      properties:
        securityProfileTargets:
          $ref: "#/components/schemas/SecurityProfileTargets"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListThingGroupsResponse:
      type: object
      properties:
        thingGroups:
          $ref: "#/components/schemas/ThingGroupNameAndArnList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListThingGroupsForThingResponse:
      type: object
      properties:
        thingGroups:
          $ref: "#/components/schemas/ThingGroupNameAndArnList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListThingPrincipalsResponse:
      type: object
      properties:
        principals:
          $ref: "#/components/schemas/Principals"
      description: The output from the ListThingPrincipals operation.
    ListThingRegistrationTaskReportsResponse:
      type: object
      properties:
        resourceLinks:
          $ref: "#/components/schemas/S3FileUrlList"
        reportType:
          $ref: "#/components/schemas/ReportType"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListThingRegistrationTasksResponse:
      type: object
      properties:
        taskIds:
          $ref: "#/components/schemas/TaskIdList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListThingTypesResponse:
      type: object
      properties:
        thingTypes:
          $ref: "#/components/schemas/ThingTypeList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
      description: The output for the ListThingTypes operation.
    ListThingsResponse:
      type: object
      properties:
        things:
          $ref: "#/components/schemas/ThingAttributeList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
      description: The output from the ListThings operation.
    ListThingsInBillingGroupResponse:
      type: object
      properties:
        things:
          $ref: "#/components/schemas/ThingNameList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListThingsInThingGroupResponse:
      type: object
      properties:
        things:
          $ref: "#/components/schemas/ThingNameList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListTopicRulesResponse:
      type: object
      properties:
        rules:
          $ref: "#/components/schemas/TopicRuleList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
      description: The output from the ListTopicRules operation.
    ListV2LoggingLevelsResponse:
      type: object
      properties:
        logTargetConfigurations:
          $ref: "#/components/schemas/LogTargetConfigurations"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListViolationEventsResponse:
      type: object
      properties:
        violationEvents:
          $ref: "#/components/schemas/ViolationEvents"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    RegisterCACertificateResponse:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
      description: The output from the RegisterCACertificateResponse operation.
    TemplateBody:
      type: string
    RegistrationCodeValidationException: {}
    CertificateValidationException: {}
    RegisterCertificateResponse:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
      description: The output from the RegisterCertificate operation.
    CertificateConflictException: {}
    RegisterThingResponse:
      type: object
      properties:
        certificatePem:
          $ref: "#/components/schemas/CertificatePem"
        resourceArns:
          $ref: "#/components/schemas/ResourceArns"
    ResourceRegistrationFailureException: {}
    RemoveThingFromBillingGroupResponse:
      type: object
      properties: {}
    RemoveThingFromThingGroupResponse:
      type: object
      properties: {}
    SearchIndexResponse:
      type: object
      properties:
        nextToken:
          $ref: "#/components/schemas/NextToken"
        things:
          $ref: "#/components/schemas/ThingDocumentList"
        thingGroups:
          $ref: "#/components/schemas/ThingGroupDocumentList"
    SetDefaultAuthorizerResponse:
      type: object
      properties:
        authorizerName:
          $ref: "#/components/schemas/AuthorizerName"
        authorizerArn:
          $ref: "#/components/schemas/AuthorizerArn"
    AwsArn:
      type: string
    LogLevel:
      type: string
      enum:
        - DEBUG
        - INFO
        - ERROR
        - WARN
        - DISABLED
    LogTargetType:
      type: string
      enum:
        - DEFAULT
        - THING_GROUP
    LogTargetName:
      type: string
    StartAuditMitigationActionsTaskResponse:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/AuditMitigationActionsTaskId"
    AuditTaskId:
      type: string
      pattern: "[a-zA-Z0-9\\-]+"
      minLength: 1
      maxLength: 40
    FindingIds:
      type: array
      items:
        $ref: "#/components/schemas/FindingId"
      minItems: 1
      maxItems: 25
    AuditCheckToReasonCodeFilter:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ReasonForNonComplianceCodes"
    MitigationActionNameList:
      type: array
      items:
        $ref: "#/components/schemas/MitigationActionName"
      minItems: 1
      maxItems: 5
    TaskAlreadyExistsException: {}
    StartOnDemandAuditTaskResponse:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/AuditTaskId"
    StartThingRegistrationTaskResponse:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/TaskId"
    StopThingRegistrationTaskResponse:
      type: object
      properties: {}
    TagResourceResponse:
      type: object
      properties: {}
    TestAuthorizationResponse:
      type: object
      properties:
        authResults:
          $ref: "#/components/schemas/AuthResults"
    AuthInfo:
      type: object
      properties:
        actionType:
          $ref: "#/components/schemas/ActionType"
        resources:
          $ref: "#/components/schemas/Resources"
      description: A collection of authorization information.
    PolicyName:
      type: string
      pattern: "[\\w+=,.@-]+"
      minLength: 1
      maxLength: 128
    TestInvokeAuthorizerResponse:
      type: object
      properties:
        isAuthenticated:
          $ref: "#/components/schemas/IsAuthenticated"
        principalId:
          $ref: "#/components/schemas/PrincipalId"
        policyDocuments:
          $ref: "#/components/schemas/PolicyDocuments"
        refreshAfterInSeconds:
          $ref: "#/components/schemas/Seconds"
        disconnectAfterInSeconds:
          $ref: "#/components/schemas/Seconds"
    InvalidResponseException: {}
    TransferCertificateResponse:
      type: object
      properties:
        transferredCertificateArn:
          $ref: "#/components/schemas/CertificateArn"
      description: The output from the TransferCertificate operation.
    TransferConflictException: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
    UpdateAccountAuditConfigurationResponse:
      type: object
      properties: {}
    AuditNotificationTarget:
      type: object
      properties:
        targetArn:
          $ref: "#/components/schemas/TargetArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        enabled:
          $ref: "#/components/schemas/Enabled"
      description: Information about the targets to which audit notifications are sent.
    AuditCheckConfiguration:
      type: object
      properties:
        enabled:
          $ref: "#/components/schemas/Enabled"
      description: Which audit checks are enabled and disabled for this account.
    UpdateAuthorizerResponse:
      type: object
      properties:
        authorizerName:
          $ref: "#/components/schemas/AuthorizerName"
        authorizerArn:
          $ref: "#/components/schemas/AuthorizerArn"
    UpdateBillingGroupResponse:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/Version"
    UpdateDynamicThingGroupResponse:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/Version"
    UpdateEventConfigurationsResponse:
      type: object
      properties: {}
    Configuration:
      type: object
      properties:
        Enabled:
          $ref: "#/components/schemas/Enabled"
      description: Configuration.
    UpdateIndexingConfigurationResponse:
      type: object
      properties: {}
    ThingIndexingMode:
      type: string
      enum:
        - OFF
        - REGISTRY
        - REGISTRY_AND_SHADOW
    ThingConnectivityIndexingMode:
      type: string
      enum:
        - OFF
        - STATUS
    ThingGroupIndexingMode:
      type: string
      enum:
        - OFF
        - ON
    UpdateMitigationActionResponse:
      type: object
      properties:
        actionArn:
          $ref: "#/components/schemas/MitigationActionArn"
        actionId:
          $ref: "#/components/schemas/MitigationActionId"
    UpdateRoleAliasResponse:
      type: object
      properties:
        roleAlias:
          $ref: "#/components/schemas/RoleAlias"
        roleAliasArn:
          $ref: "#/components/schemas/RoleAliasArn"
    UpdateScheduledAuditResponse:
      type: object
      properties:
        scheduledAuditArn:
          $ref: "#/components/schemas/ScheduledAuditArn"
    UpdateSecurityProfileResponse:
      type: object
      properties:
        securityProfileName:
          $ref: "#/components/schemas/SecurityProfileName"
        securityProfileArn:
          $ref: "#/components/schemas/SecurityProfileArn"
        securityProfileDescription:
          $ref: "#/components/schemas/SecurityProfileDescription"
        behaviors:
          $ref: "#/components/schemas/Behaviors"
        alertTargets:
          $ref: "#/components/schemas/AlertTargets"
        additionalMetricsToRetain:
          $ref: "#/components/schemas/AdditionalMetricsToRetainList"
        version:
          $ref: "#/components/schemas/Version"
        creationDate:
          $ref: "#/components/schemas/Timestamp"
        lastModifiedDate:
          $ref: "#/components/schemas/Timestamp"
    UpdateStreamResponse:
      type: object
      properties:
        streamId:
          $ref: "#/components/schemas/StreamId"
        streamArn:
          $ref: "#/components/schemas/StreamArn"
        description:
          $ref: "#/components/schemas/StreamDescription"
        streamVersion:
          $ref: "#/components/schemas/StreamVersion"
    UpdateThingResponse:
      type: object
      properties: {}
      description: The output from the UpdateThing operation.
    UpdateThingGroupResponse:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/Version"
    UpdateThingGroupsForThingResponse:
      type: object
      properties: {}
    ThingGroupName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    ValidateSecurityProfileBehaviorsResponse:
      type: object
      properties:
        valid:
          $ref: "#/components/schemas/Valid"
        validationErrors:
          $ref: "#/components/schemas/ValidationErrors"
    AbortAction:
      type: string
      enum:
        - CANCEL
    AbortConfig:
      type: object
      required:
        - criteriaList
      properties:
        criteriaList:
          $ref: "#/components/schemas/AbortCriteriaList"
      description: Details of abort criteria to abort the job.
    JobExecutionFailureType:
      type: string
      enum:
        - FAILED
        - REJECTED
        - TIMED_OUT
        - ALL
    AbortThresholdPercentage:
      type: number
      format: double
      maximum: 100
    MinimumNumberOfExecutedThings:
      type: integer
      minimum: 1
    AbortCriteria:
      type: object
      required:
        - failureType
        - action
        - thresholdPercentage
        - minNumberOfExecutedThings
      properties:
        failureType:
          $ref: "#/components/schemas/JobExecutionFailureType"
        action:
          $ref: "#/components/schemas/AbortAction"
        thresholdPercentage:
          $ref: "#/components/schemas/AbortThresholdPercentage"
        minNumberOfExecutedThings:
          $ref: "#/components/schemas/MinimumNumberOfExecutedThings"
      description: Details of abort criteria to define rules to abort the job.
    SetAsActive:
      type: boolean
    AcceptCertificateTransferRequest:
      type: object
      properties: {}
      description: The input for the AcceptCertificateTransfer operation.
    DynamoDBAction:
      type: object
      required:
        - tableName
        - roleArn
        - hashKeyField
        - hashKeyValue
      properties:
        tableName:
          $ref: "#/components/schemas/TableName"
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        operation:
          $ref: "#/components/schemas/DynamoOperation"
        hashKeyField:
          $ref: "#/components/schemas/HashKeyField"
        hashKeyValue:
          $ref: "#/components/schemas/HashKeyValue"
        hashKeyType:
          $ref: "#/components/schemas/DynamoKeyType"
        rangeKeyField:
          $ref: "#/components/schemas/RangeKeyField"
        rangeKeyValue:
          $ref: "#/components/schemas/RangeKeyValue"
        rangeKeyType:
          $ref: "#/components/schemas/DynamoKeyType"
        payloadField:
          $ref: "#/components/schemas/PayloadField"
      description: '<p>Describes an action to write to a DynamoDB table.</p> <p>The
        <code>tableName</code>, <code>hashKeyField</code>, and
        <code>rangeKeyField</code> values must match the values used when you
        created the table.</p> <p>The <code>hashKeyValue</code> and
        <code>rangeKeyvalue</code> fields use a substitution template syntax.
        These templates provide data at runtime. The syntax is as follows:
        ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in
        a WHERE or SELECT clause, including JSON properties, comparisons,
        calculations, and functions. For example, the following field uses the
        third level of the topic:</p> <p> <code>"hashKeyValue":
        "${topic(3)}"</code> </p> <p>The following field uses the timestamp:</p>
        <p> <code>"rangeKeyValue": "${timestamp()}"</code> </p>'
    DynamoDBv2Action:
      type: object
      required:
        - roleArn
        - putItem
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        putItem:
          $ref: "#/components/schemas/PutItemInput"
      description: <p>Describes an action to write to a DynamoDB table.</p> <p>This
        DynamoDB action writes each attribute in the message payload into it's
        own column in the DynamoDB table.</p>
    LambdaAction:
      type: object
      required:
        - functionArn
      properties:
        functionArn:
          $ref: "#/components/schemas/FunctionArn"
      description: Describes an action to invoke a Lambda function.
    SnsAction:
      type: object
      required:
        - targetArn
        - roleArn
      properties:
        targetArn:
          $ref: "#/components/schemas/AwsArn"
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        messageFormat:
          $ref: "#/components/schemas/MessageFormat"
      description: Describes an action to publish to an Amazon SNS topic.
    SqsAction:
      type: object
      required:
        - roleArn
        - queueUrl
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        queueUrl:
          $ref: "#/components/schemas/QueueUrl"
        useBase64:
          $ref: "#/components/schemas/UseBase64"
      description: Describes an action to publish data to an Amazon SQS queue.
    KinesisAction:
      type: object
      required:
        - roleArn
        - streamName
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        streamName:
          $ref: "#/components/schemas/StreamName"
        partitionKey:
          $ref: "#/components/schemas/PartitionKey"
      description: Describes an action to write data to an Amazon Kinesis stream.
    RepublishAction:
      type: object
      required:
        - roleArn
        - topic
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        topic:
          $ref: "#/components/schemas/TopicPattern"
        qos:
          $ref: "#/components/schemas/Qos"
      description: Describes an action to republish to another topic.
    S3Action:
      type: object
      required:
        - roleArn
        - bucketName
        - key
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        bucketName:
          $ref: "#/components/schemas/BucketName"
        key:
          $ref: "#/components/schemas/Key"
        cannedAcl:
          $ref: "#/components/schemas/CannedAccessControlList"
      description: Describes an action to write data to an Amazon S3 bucket.
    FirehoseAction:
      type: object
      required:
        - roleArn
        - deliveryStreamName
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        deliveryStreamName:
          $ref: "#/components/schemas/DeliveryStreamName"
        separator:
          $ref: "#/components/schemas/FirehoseSeparator"
      description: Describes an action that writes data to an Amazon Kinesis Firehose
        stream.
    CloudwatchMetricAction:
      type: object
      required:
        - roleArn
        - metricNamespace
        - metricName
        - metricValue
        - metricUnit
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        metricNamespace:
          $ref: "#/components/schemas/String"
        metricName:
          $ref: "#/components/schemas/String"
        metricValue:
          $ref: "#/components/schemas/String"
        metricUnit:
          $ref: "#/components/schemas/String"
        metricTimestamp:
          $ref: "#/components/schemas/String"
      description: Describes an action that captures a CloudWatch metric.
    CloudwatchAlarmAction:
      type: object
      required:
        - roleArn
        - alarmName
        - stateReason
        - stateValue
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        alarmName:
          $ref: "#/components/schemas/AlarmName"
        stateReason:
          $ref: "#/components/schemas/StateReason"
        stateValue:
          $ref: "#/components/schemas/StateValue"
      description: Describes an action that updates a CloudWatch alarm.
    ElasticsearchAction:
      type: object
      required:
        - roleArn
        - endpoint
        - index
        - type
        - id
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        endpoint:
          $ref: "#/components/schemas/ElasticsearchEndpoint"
        index:
          $ref: "#/components/schemas/ElasticsearchIndex"
        type:
          $ref: "#/components/schemas/ElasticsearchType"
        id:
          $ref: "#/components/schemas/ElasticsearchId"
      description: Describes an action that writes data to an Amazon Elasticsearch Service
        domain.
    SalesforceAction:
      type: object
      required:
        - token
        - url
      properties:
        token:
          $ref: "#/components/schemas/SalesforceToken"
        url:
          $ref: "#/components/schemas/SalesforceEndpoint"
      description: Describes an action to write a message to a Salesforce IoT Cloud Input
        Stream.
    IotAnalyticsAction:
      type: object
      properties:
        channelArn:
          $ref: "#/components/schemas/AwsArn"
        channelName:
          $ref: "#/components/schemas/ChannelName"
        roleArn:
          $ref: "#/components/schemas/AwsArn"
      description: Sends message data to an AWS IoT Analytics channel.
    IotEventsAction:
      type: object
      required:
        - inputName
        - roleArn
      properties:
        inputName:
          $ref: "#/components/schemas/InputName"
        messageId:
          $ref: "#/components/schemas/MessageId"
        roleArn:
          $ref: "#/components/schemas/AwsArn"
      description: Sends an input to an AWS IoT Events detector.
    StepFunctionsAction:
      type: object
      required:
        - stateMachineName
        - roleArn
      properties:
        executionNamePrefix:
          $ref: "#/components/schemas/ExecutionNamePrefix"
        stateMachineName:
          $ref: "#/components/schemas/StateMachineName"
        roleArn:
          $ref: "#/components/schemas/AwsArn"
      description: Starts execution of a Step Functions state machine.
    ActionType:
      type: string
      enum:
        - PUBLISH
        - SUBSCRIBE
        - RECEIVE
        - CONNECT
    ViolationId:
      type: string
      pattern: "[a-zA-Z0-9\\-]+"
      minLength: 1
      maxLength: 128
    DeviceDefenderThingName:
      type: string
      minLength: 1
      maxLength: 128
    SecurityProfileName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    MetricValue:
      type: object
      properties:
        count:
          $ref: "#/components/schemas/UnsignedLong"
        cidrs:
          $ref: "#/components/schemas/Cidrs"
        ports:
          $ref: "#/components/schemas/Ports"
      description: The value to be compared with the <code>metric</code>.
    Timestamp:
      type: string
      format: date-time
    ActiveViolation:
      type: object
      properties:
        violationId:
          $ref: "#/components/schemas/ViolationId"
        thingName:
          $ref: "#/components/schemas/DeviceDefenderThingName"
        securityProfileName:
          $ref: "#/components/schemas/SecurityProfileName"
        behavior:
          $ref: "#/components/schemas/Behavior"
        lastViolationValue:
          $ref: "#/components/schemas/MetricValue"
        lastViolationTime:
          $ref: "#/components/schemas/Timestamp"
        violationStartTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about an active Device Defender security profile behavior
        violation.
    ActiveViolations:
      type: array
      items:
        $ref: "#/components/schemas/ActiveViolation"
    BillingGroupName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    BillingGroupArn:
      type: string
    ThingName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    ThingArn:
      type: string
    AddThingToBillingGroupRequest:
      type: object
      properties:
        billingGroupName:
          $ref: "#/components/schemas/BillingGroupName"
        billingGroupArn:
          $ref: "#/components/schemas/BillingGroupArn"
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
    ThingGroupArn:
      type: string
    OverrideDynamicGroups:
      type: boolean
    AddThingToThingGroupRequest:
      type: object
      properties:
        thingGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupArn:
          $ref: "#/components/schemas/ThingGroupArn"
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
        overrideDynamicGroups:
          $ref: "#/components/schemas/OverrideDynamicGroups"
    ThingGroupNames:
      type: array
      items:
        $ref: "#/components/schemas/ThingGroupName"
      minItems: 1
      maxItems: 10
    AdditionalMetricsToRetainList:
      type: array
      items:
        $ref: "#/components/schemas/BehaviorMetric"
    AdditionalParameterMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Value"
    AggregationField:
      type: string
      minLength: 1
    AlarmName:
      type: string
    AlertTargetArn:
      type: string
    AlertTargetType:
      type: string
      enum:
        - SNS
      description: 'The type of alert target: one of "SNS".'
    AlertTargets:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AlertTarget"
    AllowAutoRegistration:
      type: boolean
    Policies:
      type: array
      items:
        $ref: "#/components/schemas/Policy"
    Allowed:
      type: object
      properties:
        policies:
          $ref: "#/components/schemas/Policies"
      description: Contains information that allowed the authorization.
    ApproximateSecondsBeforeTimedOut:
      type: integer
    AscendingOrder:
      type: boolean
    JobTargets:
      type: array
      items:
        $ref: "#/components/schemas/TargetArn"
      minItems: 1
    JobId:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 64
    Comment:
      type: string
      pattern: "[^\\p{C}]+"
      maxLength: 2028
    AssociateTargetsWithJobRequest:
      type: object
      required:
        - targets
      properties:
        targets:
          $ref: "#/components/schemas/JobTargets"
        comment:
          $ref: "#/components/schemas/Comment"
    JobArn:
      type: string
    JobDescription:
      type: string
      pattern: "[^\\p{C}]+"
      maxLength: 2028
    PolicyTarget:
      type: string
    AttachPolicyRequest:
      type: object
      required:
        - target
      properties:
        target:
          $ref: "#/components/schemas/PolicyTarget"
    Principal:
      type: string
    AttachPrincipalPolicyRequest:
      type: object
      properties: {}
      description: The input for the AttachPrincipalPolicy operation.
    SecurityProfileTargetArn:
      type: string
    AttachSecurityProfileRequest:
      type: object
      properties: {}
    AttachThingPrincipalRequest:
      type: object
      properties: {}
      description: The input for the AttachThingPrincipal operation.
    AttributeKey:
      type: string
    AttributeName:
      type: string
      pattern: "[a-zA-Z0-9_.,@/:#-]+"
      maxLength: 128
    AttributeValue:
      type: string
      pattern: "[a-zA-Z0-9_.,@/:#-]*"
      maxLength: 800
    AttributesMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Value"
    Enabled:
      type: boolean
    AuditCheckConfigurations:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AuditCheckConfiguration"
    AuditCheckRunStatus:
      type: string
      enum:
        - IN_PROGRESS
        - WAITING_FOR_DATA_COLLECTION
        - CANCELED
        - COMPLETED_COMPLIANT
        - COMPLETED_NON_COMPLIANT
        - FAILED
    CheckCompliant:
      type: boolean
    TotalResourcesCount:
      type: integer
    NonCompliantResourcesCount:
      type: integer
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
      maxLength: 2048
    AuditCheckDetails:
      type: object
      properties:
        checkRunStatus:
          $ref: "#/components/schemas/AuditCheckRunStatus"
        checkCompliant:
          $ref: "#/components/schemas/CheckCompliant"
        totalResourcesCount:
          $ref: "#/components/schemas/TotalResourcesCount"
        nonCompliantResourcesCount:
          $ref: "#/components/schemas/NonCompliantResourcesCount"
        errorCode:
          $ref: "#/components/schemas/ErrorCode"
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: Information about the audit check.
    AuditCheckToActionsMapping:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MitigationActionNameList"
    ReasonForNonComplianceCodes:
      type: array
      items:
        $ref: "#/components/schemas/ReasonForNonComplianceCode"
      minItems: 1
      maxItems: 25
    AuditDetails:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AuditCheckDetails"
    FindingId:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 128
    AuditFindingSeverity:
      type: string
      enum:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW
    NonCompliantResource:
      type: object
      properties:
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        resourceIdentifier:
          $ref: "#/components/schemas/ResourceIdentifier"
        additionalInfo:
          $ref: "#/components/schemas/StringMap"
      description: Information about the resource that was noncompliant with the audit
        check.
    RelatedResources:
      type: array
      items:
        $ref: "#/components/schemas/RelatedResource"
    ReasonForNonCompliance:
      type: string
    ReasonForNonComplianceCode:
      type: string
    AuditFinding:
      type: object
      properties:
        findingId:
          $ref: "#/components/schemas/FindingId"
        taskId:
          $ref: "#/components/schemas/AuditTaskId"
        checkName:
          $ref: "#/components/schemas/AuditCheckName"
        taskStartTime:
          $ref: "#/components/schemas/Timestamp"
        findingTime:
          $ref: "#/components/schemas/Timestamp"
        severity:
          $ref: "#/components/schemas/AuditFindingSeverity"
        nonCompliantResource:
          $ref: "#/components/schemas/NonCompliantResource"
        relatedResources:
          $ref: "#/components/schemas/RelatedResources"
        reasonForNonCompliance:
          $ref: "#/components/schemas/ReasonForNonCompliance"
        reasonForNonComplianceCode:
          $ref: "#/components/schemas/ReasonForNonComplianceCode"
      description: The findings (results) of the audit.
    AuditFindings:
      type: array
      items:
        $ref: "#/components/schemas/AuditFinding"
    AuditFrequency:
      type: string
      enum:
        - DAILY
        - WEEKLY
        - BIWEEKLY
        - MONTHLY
    AuditMitigationActionsTaskId:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 128
    MitigationActionName:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      maxLength: 128
    MitigationActionId:
      type: string
    AuditMitigationActionsExecutionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - CANCELED
        - SKIPPED
        - PENDING
    AuditMitigationActionExecutionMetadata:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/AuditMitigationActionsTaskId"
        findingId:
          $ref: "#/components/schemas/FindingId"
        actionName:
          $ref: "#/components/schemas/MitigationActionName"
        actionId:
          $ref: "#/components/schemas/MitigationActionId"
        status:
          $ref: "#/components/schemas/AuditMitigationActionsExecutionStatus"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        endTime:
          $ref: "#/components/schemas/Timestamp"
        errorCode:
          $ref: "#/components/schemas/ErrorCode"
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: Returned by ListAuditMitigationActionsTask, this object contains
        information that describes a mitigation action that has been started.
    AuditMitigationActionExecutionMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/AuditMitigationActionExecutionMetadata"
    AuditMitigationActionsTaskStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - CANCELED
    AuditMitigationActionsTaskMetadata:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/AuditMitigationActionsTaskId"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        taskStatus:
          $ref: "#/components/schemas/AuditMitigationActionsTaskStatus"
      description: Information about an audit mitigation actions task that is returned by
        <code>ListAuditMitigationActionsTasks</code>.
    AuditMitigationActionsTaskMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/AuditMitigationActionsTaskMetadata"
    TaskStatisticsForAuditCheck:
      type: object
      properties:
        totalFindingsCount:
          $ref: "#/components/schemas/TotalFindingsCount"
        failedFindingsCount:
          $ref: "#/components/schemas/FailedFindingsCount"
        succeededFindingsCount:
          $ref: "#/components/schemas/SucceededFindingsCount"
        skippedFindingsCount:
          $ref: "#/components/schemas/SkippedFindingsCount"
        canceledFindingsCount:
          $ref: "#/components/schemas/CanceledFindingsCount"
      description: Provides summary counts of how many tasks for findings are in a
        particular state. This information is included in the response from
        DescribeAuditMitigationActionsTask.
    AuditMitigationActionsTaskStatistics:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TaskStatisticsForAuditCheck"
    AuditMitigationActionsTaskTarget:
      type: object
      properties:
        auditTaskId:
          $ref: "#/components/schemas/AuditTaskId"
        findingIds:
          $ref: "#/components/schemas/FindingIds"
        auditCheckToReasonCodeFilter:
          $ref: "#/components/schemas/AuditCheckToReasonCodeFilter"
      description: Used in MitigationActionParams, this information identifies the target
        findings to which the mitigation actions are applied. Only one entry
        appears.
    AuditNotificationTargetConfigurations:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AuditNotificationTarget"
    AuditNotificationType:
      type: string
      enum:
        - SNS
    AuditTaskStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - CANCELED
    AuditTaskType:
      type: string
      enum:
        - ON_DEMAND_AUDIT_TASK
        - SCHEDULED_AUDIT_TASK
    AuditTaskMetadata:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/AuditTaskId"
        taskStatus:
          $ref: "#/components/schemas/AuditTaskStatus"
        taskType:
          $ref: "#/components/schemas/AuditTaskType"
      description: The audits that were performed.
    AuditTaskMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/AuditTaskMetadata"
    AuthDecision:
      type: string
      enum:
        - ALLOWED
        - EXPLICIT_DENY
        - IMPLICIT_DENY
    Resources:
      type: array
      items:
        $ref: "#/components/schemas/Resource"
    AuthInfos:
      type: array
      items:
        $ref: "#/components/schemas/AuthInfo"
      minItems: 1
      maxItems: 10
    Denied:
      type: object
      properties:
        implicitDeny:
          $ref: "#/components/schemas/ImplicitDeny"
        explicitDeny:
          $ref: "#/components/schemas/ExplicitDeny"
      description: Contains information that denied the authorization.
    MissingContextValues:
      type: array
      items:
        $ref: "#/components/schemas/MissingContextValue"
    AuthResult:
      type: object
      properties:
        authInfo:
          $ref: "#/components/schemas/AuthInfo"
        allowed:
          $ref: "#/components/schemas/Allowed"
        denied:
          $ref: "#/components/schemas/Denied"
        authDecision:
          $ref: "#/components/schemas/AuthDecision"
        missingContextValues:
          $ref: "#/components/schemas/MissingContextValues"
      description: The authorizer result.
    AuthResults:
      type: array
      items:
        $ref: "#/components/schemas/AuthResult"
    AuthorizerArn:
      type: string
    AuthorizerName:
      type: string
      pattern: "[\\w=,@-]+"
      minLength: 1
      maxLength: 128
    AuthorizerFunctionArn:
      type: string
    TokenKeyName:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 128
    PublicKeyMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/KeyValue"
    AuthorizerStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    DateType:
      type: string
      format: date-time
    AuthorizerDescription:
      type: object
      properties:
        authorizerName:
          $ref: "#/components/schemas/AuthorizerName"
        authorizerArn:
          $ref: "#/components/schemas/AuthorizerArn"
        authorizerFunctionArn:
          $ref: "#/components/schemas/AuthorizerFunctionArn"
        tokenKeyName:
          $ref: "#/components/schemas/TokenKeyName"
        tokenSigningPublicKeys:
          $ref: "#/components/schemas/PublicKeyMap"
        status:
          $ref: "#/components/schemas/AuthorizerStatus"
        creationDate:
          $ref: "#/components/schemas/DateType"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
      description: The authorizer description.
    AuthorizerSummary:
      type: object
      properties:
        authorizerName:
          $ref: "#/components/schemas/AuthorizerName"
        authorizerArn:
          $ref: "#/components/schemas/AuthorizerArn"
      description: The authorizer summary.
    Authorizers:
      type: array
      items:
        $ref: "#/components/schemas/AuthorizerSummary"
    AutoRegistrationStatus:
      type: string
      enum:
        - ENABLE
        - DISABLE
    AwsIotJobArn:
      type: string
    AwsIotJobId:
      type: string
    AwsJobExecutionsRolloutConfig:
      type: object
      properties:
        maximumPerMinute:
          $ref: "#/components/schemas/MaximumPerMinute"
      description: Configuration for the rollout of OTA updates.
    BehaviorName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    BehaviorCriteria:
      type: object
      properties:
        comparisonOperator:
          $ref: "#/components/schemas/ComparisonOperator"
        value:
          $ref: "#/components/schemas/MetricValue"
        durationSeconds:
          $ref: "#/components/schemas/DurationSeconds"
        consecutiveDatapointsToAlarm:
          $ref: "#/components/schemas/ConsecutiveDatapointsToAlarm"
        consecutiveDatapointsToClear:
          $ref: "#/components/schemas/ConsecutiveDatapointsToClear"
        statisticalThreshold:
          $ref: "#/components/schemas/StatisticalThreshold"
      description: The criteria by which the behavior is determined to be normal.
    ComparisonOperator:
      type: string
      enum:
        - less-than
        - less-than-equals
        - greater-than
        - greater-than-equals
        - in-cidr-set
        - not-in-cidr-set
        - in-port-set
        - not-in-port-set
    DurationSeconds:
      type: integer
    ConsecutiveDatapointsToAlarm:
      type: integer
      minimum: 1
      maximum: 10
    ConsecutiveDatapointsToClear:
      type: integer
      minimum: 1
      maximum: 10
    StatisticalThreshold:
      type: object
      properties:
        statistic:
          $ref: "#/components/schemas/EvaluationStatistic"
      description: A statistical ranking (percentile) which indicates a threshold value by
        which a behavior is determined to be in compliance or in violation of
        the behavior.
    Behaviors:
      type: array
      items:
        $ref: "#/components/schemas/Behavior"
      maxItems: 100
    BillingGroupId:
      type: string
      pattern: "[a-zA-Z0-9\\-]+"
      minLength: 1
      maxLength: 128
    CreationDate:
      type: string
      format: date-time
    BillingGroupMetadata:
      type: object
      properties:
        creationDate:
          $ref: "#/components/schemas/CreationDate"
      description: Additional information about the billing group.
    GroupNameAndArn:
      type: object
      properties:
        groupName:
          $ref: "#/components/schemas/ThingGroupName"
        groupArn:
          $ref: "#/components/schemas/ThingGroupArn"
      description: The name and ARN of a group.
    BillingGroupNameAndArnList:
      type: array
      items:
        $ref: "#/components/schemas/GroupNameAndArn"
    BillingGroupProperties:
      type: object
      properties:
        billingGroupDescription:
          $ref: "#/components/schemas/BillingGroupDescription"
      description: The properties of a billing group.
    Boolean:
      type: boolean
    BucketName:
      type: string
    CertificateArn:
      type: string
    CACertificateStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    CACertificate:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        status:
          $ref: "#/components/schemas/CACertificateStatus"
        creationDate:
          $ref: "#/components/schemas/DateType"
      description: A CA certificate.
    CertificatePem:
      type: string
      description: The PEM of a certificate.
      minLength: 1
      maxLength: 65536
    CustomerVersion:
      type: integer
      minimum: 1
    GenerationId:
      type: string
    CertificateValidity:
      type: object
      properties:
        notBefore:
          $ref: "#/components/schemas/DateType"
        notAfter:
          $ref: "#/components/schemas/DateType"
      description: When the certificate is valid.
    CACertificateDescription:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        status:
          $ref: "#/components/schemas/CACertificateStatus"
        certificatePem:
          $ref: "#/components/schemas/CertificatePem"
        ownedBy:
          $ref: "#/components/schemas/AwsAccountId"
        creationDate:
          $ref: "#/components/schemas/DateType"
        autoRegistrationStatus:
          $ref: "#/components/schemas/AutoRegistrationStatus"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
        customerVersion:
          $ref: "#/components/schemas/CustomerVersion"
        generationId:
          $ref: "#/components/schemas/GenerationId"
        validity:
          $ref: "#/components/schemas/CertificateValidity"
      description: Describes a CA certificate.
    CACertificateUpdateAction:
      type: string
      enum:
        - DEACTIVATE
    CACertificates:
      type: array
      items:
        $ref: "#/components/schemas/CACertificate"
    CancelAuditMitigationActionsTaskRequest:
      type: object
      properties: {}
    CancelAuditTaskRequest:
      type: object
      properties: {}
    CancelCertificateTransferRequest:
      type: object
      properties: {}
      description: The input for the CancelCertificateTransfer operation.
    ForceFlag:
      type: boolean
    ExpectedVersion:
      type: integer
    DetailsMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/DetailsValue"
    CancelJobExecutionRequest:
      type: object
      properties:
        expectedVersion:
          $ref: "#/components/schemas/ExpectedVersion"
        statusDetails:
          $ref: "#/components/schemas/DetailsMap"
    ReasonCode:
      type: string
      pattern: "[\\p{Upper}\\p{Digit}_]+"
      maxLength: 128
    CancelJobRequest:
      type: object
      properties:
        reasonCode:
          $ref: "#/components/schemas/ReasonCode"
        comment:
          $ref: "#/components/schemas/Comment"
    CanceledChecksCount:
      type: integer
    CanceledFindingsCount:
      type: integer
    CanceledThings:
      type: integer
    CannedAccessControlList:
      type: string
      enum:
        - private
        - public-read
        - public-read-write
        - aws-exec-read
        - authenticated-read
        - bucket-owner-read
        - bucket-owner-full-control
        - log-delivery-write
    CertificateStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - REVOKED
        - PENDING_TRANSFER
        - REGISTER_INACTIVE
        - PENDING_ACTIVATION
    Certificate:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        status:
          $ref: "#/components/schemas/CertificateStatus"
        creationDate:
          $ref: "#/components/schemas/DateType"
      description: Information about a certificate.
    TransferData:
      type: object
      properties:
        transferMessage:
          $ref: "#/components/schemas/Message"
        rejectReason:
          $ref: "#/components/schemas/Message"
        transferDate:
          $ref: "#/components/schemas/DateType"
        acceptDate:
          $ref: "#/components/schemas/DateType"
        rejectDate:
          $ref: "#/components/schemas/DateType"
      description: Data used to transfer a certificate to an AWS account.
    CertificateDescription:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        caCertificateId:
          $ref: "#/components/schemas/CertificateId"
        status:
          $ref: "#/components/schemas/CertificateStatus"
        certificatePem:
          $ref: "#/components/schemas/CertificatePem"
        ownedBy:
          $ref: "#/components/schemas/AwsAccountId"
        previousOwnedBy:
          $ref: "#/components/schemas/AwsAccountId"
        creationDate:
          $ref: "#/components/schemas/DateType"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
        customerVersion:
          $ref: "#/components/schemas/CustomerVersion"
        transferData:
          $ref: "#/components/schemas/TransferData"
        generationId:
          $ref: "#/components/schemas/GenerationId"
        validity:
          $ref: "#/components/schemas/CertificateValidity"
      description: Describes a certificate.
    CertificateName:
      type: string
    CertificatePathOnDevice:
      type: string
    CertificateSigningRequest:
      type: string
      minLength: 1
    Certificates:
      type: array
      items:
        $ref: "#/components/schemas/Certificate"
    ChannelName:
      type: string
    Cidr:
      type: string
      pattern: "[a-fA-F0-9:\\.\\/]+"
      minLength: 2
      maxLength: 43
    Cidrs:
      type: array
      items:
        $ref: "#/components/schemas/Cidr"
    ClearDefaultAuthorizerRequest:
      type: object
      properties: {}
    ClientRequestToken:
      type: string
      pattern: ^[a-zA-Z0-9-_]+$
      minLength: 1
      maxLength: 64
    StateReason:
      type: string
    StateValue:
      type: string
    String:
      type: string
    Code:
      type: string
    SigningJobId:
      type: string
    StartSigningJobParameter:
      type: object
      properties:
        signingProfileParameter:
          $ref: "#/components/schemas/SigningProfileParameter"
        signingProfileName:
          $ref: "#/components/schemas/SigningProfileName"
        destination:
          $ref: "#/components/schemas/Destination"
      description: Information required to start a signing job.
    CustomCodeSigning:
      type: object
      properties:
        signature:
          $ref: "#/components/schemas/CodeSigningSignature"
        certificateChain:
          $ref: "#/components/schemas/CodeSigningCertificateChain"
        hashAlgorithm:
          $ref: "#/components/schemas/HashAlgorithm"
        signatureAlgorithm:
          $ref: "#/components/schemas/SignatureAlgorithm"
      description: Describes a custom method used to code sign a file.
    CodeSigning:
      type: object
      properties:
        awsSignerJobId:
          $ref: "#/components/schemas/SigningJobId"
        startSigningJobParameter:
          $ref: "#/components/schemas/StartSigningJobParameter"
        customCodeSigning:
          $ref: "#/components/schemas/CustomCodeSigning"
      description: Describes the method to use when code signing a file.
    InlineDocument:
      type: string
    CodeSigningCertificateChain:
      type: object
      properties:
        certificateName:
          $ref: "#/components/schemas/CertificateName"
        inlineDocument:
          $ref: "#/components/schemas/InlineDocument"
      description: Describes the certificate chain being used when code signing a file.
    Signature:
      type: string
    CodeSigningSignature:
      type: object
      properties:
        inlineDocument:
          $ref: "#/components/schemas/Signature"
      description: Describes the signature for a file.
    CompliantChecksCount:
      type: integer
    ConnectivityTimestamp:
      type: integer
    Count:
      type: integer
    CreateAuthorizerRequest:
      type: object
      required:
        - authorizerFunctionArn
        - tokenKeyName
        - tokenSigningPublicKeys
      properties:
        authorizerFunctionArn:
          $ref: "#/components/schemas/AuthorizerFunctionArn"
        tokenKeyName:
          $ref: "#/components/schemas/TokenKeyName"
        tokenSigningPublicKeys:
          $ref: "#/components/schemas/PublicKeyMap"
        status:
          $ref: "#/components/schemas/AuthorizerStatus"
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    CreateBillingGroupRequest:
      type: object
      properties:
        billingGroupProperties:
          $ref: "#/components/schemas/BillingGroupProperties"
        tags:
          $ref: "#/components/schemas/TagList"
    CreateCertificateFromCsrRequest:
      type: object
      required:
        - certificateSigningRequest
      properties:
        certificateSigningRequest:
          $ref: "#/components/schemas/CertificateSigningRequest"
      description: The input for the CreateCertificateFromCsr operation.
    ThingGroupProperties:
      type: object
      properties:
        thingGroupDescription:
          $ref: "#/components/schemas/ThingGroupDescription"
        attributePayload:
          $ref: "#/components/schemas/AttributePayload"
      description: Thing group properties.
    IndexName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    QueryString:
      type: string
      minLength: 1
    QueryVersion:
      type: string
    CreateDynamicThingGroupRequest:
      type: object
      required:
        - queryString
      properties:
        thingGroupProperties:
          $ref: "#/components/schemas/ThingGroupProperties"
        indexName:
          $ref: "#/components/schemas/IndexName"
        queryString:
          $ref: "#/components/schemas/QueryString"
        queryVersion:
          $ref: "#/components/schemas/QueryVersion"
        tags:
          $ref: "#/components/schemas/TagList"
    ThingGroupId:
      type: string
      pattern: "[a-zA-Z0-9\\-]+"
      minLength: 1
      maxLength: 128
    JobDocumentSource:
      type: string
      minLength: 1
      maxLength: 1350
    JobDocument:
      type: string
      maxLength: 32768
    PresignedUrlConfig:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        expiresInSec:
          $ref: "#/components/schemas/ExpiresInSec"
      description: Configuration for pre-signed S3 URLs.
    TargetSelection:
      type: string
      enum:
        - CONTINUOUS
        - SNAPSHOT
    JobExecutionsRolloutConfig:
      type: object
      properties:
        maximumPerMinute:
          $ref: "#/components/schemas/MaxJobExecutionsPerMin"
        exponentialRate:
          $ref: "#/components/schemas/ExponentialRolloutRate"
      description: Allows you to create a staged rollout of a job.
    TimeoutConfig:
      type: object
      properties:
        inProgressTimeoutInMinutes:
          $ref: "#/components/schemas/InProgressTimeoutInMinutes"
      description: Specifies the amount of time each device has to finish its execution of
        the job. A timer is started when the job execution status is set to
        <code>IN_PROGRESS</code>. If the job execution status is not set to
        another terminal state before the timer expires, it will be
        automatically set to <code>TIMED_OUT</code>.
    CreateJobRequest:
      type: object
      required:
        - targets
      properties:
        targets:
          $ref: "#/components/schemas/JobTargets"
        documentSource:
          $ref: "#/components/schemas/JobDocumentSource"
        document:
          $ref: "#/components/schemas/JobDocument"
        description:
          $ref: "#/components/schemas/JobDescription"
        presignedUrlConfig:
          $ref: "#/components/schemas/PresignedUrlConfig"
        targetSelection:
          $ref: "#/components/schemas/TargetSelection"
        jobExecutionsRolloutConfig:
          $ref: "#/components/schemas/JobExecutionsRolloutConfig"
        abortConfig:
          $ref: "#/components/schemas/AbortConfig"
        timeoutConfig:
          $ref: "#/components/schemas/TimeoutConfig"
        tags:
          $ref: "#/components/schemas/TagList"
    CreateKeysAndCertificateRequest:
      type: object
      properties: {}
      description: The input for the CreateKeysAndCertificate operation.
    KeyPair:
      type: object
      properties:
        PublicKey:
          $ref: "#/components/schemas/PublicKey"
        PrivateKey:
          $ref: "#/components/schemas/PrivateKey"
      description: Describes a key pair.
    MitigationActionParams:
      type: object
      properties:
        updateDeviceCertificateParams:
          $ref: "#/components/schemas/UpdateDeviceCertificateParams"
        updateCACertificateParams:
          $ref: "#/components/schemas/UpdateCACertificateParams"
        addThingsToThingGroupParams:
          $ref: "#/components/schemas/AddThingsToThingGroupParams"
        replaceDefaultPolicyVersionParams:
          $ref: "#/components/schemas/ReplaceDefaultPolicyVersionParams"
        enableIoTLoggingParams:
          $ref: "#/components/schemas/EnableIoTLoggingParams"
        publishFindingToSnsParams:
          $ref: "#/components/schemas/PublishFindingToSnsParams"
      description: The set of parameters for this mitigation action. You can specify only
        one type of parameter (in other words, you can apply only one action for
        each defined mitigation action).
    CreateMitigationActionRequest:
      type: object
      required:
        - roleArn
        - actionParams
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        actionParams:
          $ref: "#/components/schemas/MitigationActionParams"
        tags:
          $ref: "#/components/schemas/TagList"
    MitigationActionArn:
      type: string
    OTAUpdateId:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 128
    OTAUpdateDescription:
      type: string
      pattern: "[^\\p{C}]+"
      maxLength: 2028
    Targets:
      type: array
      items:
        $ref: "#/components/schemas/Target"
      minItems: 1
    OTAUpdateFiles:
      type: array
      items:
        $ref: "#/components/schemas/OTAUpdateFile"
      minItems: 1
      maxItems: 50
    CreateOTAUpdateRequest:
      type: object
      required:
        - targets
        - files
        - roleArn
      properties:
        description:
          $ref: "#/components/schemas/OTAUpdateDescription"
        targets:
          $ref: "#/components/schemas/Targets"
        targetSelection:
          $ref: "#/components/schemas/TargetSelection"
        awsJobExecutionsRolloutConfig:
          $ref: "#/components/schemas/AwsJobExecutionsRolloutConfig"
        files:
          $ref: "#/components/schemas/OTAUpdateFiles"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        additionalParameters:
          $ref: "#/components/schemas/AdditionalParameterMap"
        tags:
          $ref: "#/components/schemas/TagList"
    OTAUpdateArn:
      type: string
    OTAUpdateStatus:
      type: string
      enum:
        - CREATE_PENDING
        - CREATE_IN_PROGRESS
        - CREATE_COMPLETE
        - CREATE_FAILED
    PolicyDocument:
      type: string
    CreatePolicyRequest:
      type: object
      required:
        - policyDocument
      properties:
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
      description: The input for the CreatePolicy operation.
    PolicyArn:
      type: string
    PolicyVersionId:
      type: string
      pattern: "[0-9]+"
    SetAsDefault:
      type: boolean
    CreatePolicyVersionRequest:
      type: object
      required:
        - policyDocument
      properties:
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
      description: The input for the CreatePolicyVersion operation.
    IsDefaultVersion:
      type: boolean
    RoleAlias:
      type: string
      pattern: "[\\w=,@-]+"
      minLength: 1
      maxLength: 128
    CredentialDurationSeconds:
      type: integer
      minimum: 900
      maximum: 3600
    CreateRoleAliasRequest:
      type: object
      required:
        - roleArn
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        credentialDurationSeconds:
          $ref: "#/components/schemas/CredentialDurationSeconds"
    RoleAliasArn:
      type: string
    DayOfMonth:
      type: string
      pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
    DayOfWeek:
      type: string
      enum:
        - SUN
        - MON
        - TUE
        - WED
        - THU
        - FRI
        - SAT
    TargetAuditCheckNames:
      type: array
      items:
        $ref: "#/components/schemas/AuditCheckName"
    ScheduledAuditName:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 128
    CreateScheduledAuditRequest:
      type: object
      required:
        - frequency
        - targetCheckNames
      properties:
        frequency:
          $ref: "#/components/schemas/AuditFrequency"
        dayOfMonth:
          $ref: "#/components/schemas/DayOfMonth"
        dayOfWeek:
          $ref: "#/components/schemas/DayOfWeek"
        targetCheckNames:
          $ref: "#/components/schemas/TargetAuditCheckNames"
        tags:
          $ref: "#/components/schemas/TagList"
    ScheduledAuditArn:
      type: string
    SecurityProfileDescription:
      type: string
      pattern: "[\\p{Graph}\\x20]*"
      maxLength: 1000
    CreateSecurityProfileRequest:
      type: object
      properties:
        securityProfileDescription:
          $ref: "#/components/schemas/SecurityProfileDescription"
        behaviors:
          $ref: "#/components/schemas/Behaviors"
        alertTargets:
          $ref: "#/components/schemas/AlertTargets"
        additionalMetricsToRetain:
          $ref: "#/components/schemas/AdditionalMetricsToRetainList"
        tags:
          $ref: "#/components/schemas/TagList"
    SecurityProfileArn:
      type: string
    StreamId:
      type: string
      pattern: "[a-zA-Z0-9_-]+"
      minLength: 1
      maxLength: 128
    StreamDescription:
      type: string
      pattern: "[^\\p{C}]+"
      maxLength: 2028
    StreamFiles:
      type: array
      items:
        $ref: "#/components/schemas/StreamFile"
      minItems: 1
      maxItems: 50
    CreateStreamRequest:
      type: object
      required:
        - files
        - roleArn
      properties:
        description:
          $ref: "#/components/schemas/StreamDescription"
        files:
          $ref: "#/components/schemas/StreamFiles"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        tags:
          $ref: "#/components/schemas/TagList"
    StreamArn:
      type: string
    StreamVersion:
      type: integer
      minimum: 0
      maximum: 65535
    CreateThingGroupRequest:
      type: object
      properties:
        parentGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupProperties:
          $ref: "#/components/schemas/ThingGroupProperties"
        tags:
          $ref: "#/components/schemas/TagList"
    ThingTypeName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    CreateThingRequest:
      type: object
      properties:
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        attributePayload:
          $ref: "#/components/schemas/AttributePayload"
        billingGroupName:
          $ref: "#/components/schemas/BillingGroupName"
      description: The input for the CreateThing operation.
    ThingId:
      type: string
    ThingTypeProperties:
      type: object
      properties:
        thingTypeDescription:
          $ref: "#/components/schemas/ThingTypeDescription"
        searchableAttributes:
          $ref: "#/components/schemas/SearchableAttributes"
      description: "The ThingTypeProperties contains information about the thing type
        including: a thing type description, and a list of searchable thing
        attribute names."
    CreateThingTypeRequest:
      type: object
      properties:
        thingTypeProperties:
          $ref: "#/components/schemas/ThingTypeProperties"
        tags:
          $ref: "#/components/schemas/TagList"
      description: The input for the CreateThingType operation.
    ThingTypeArn:
      type: string
    ThingTypeId:
      type: string
    RuleName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    TopicRulePayload:
      type: object
      required:
        - sql
        - actions
      properties:
        sql:
          $ref: "#/components/schemas/SQL"
        description:
          $ref: "#/components/schemas/Description"
        actions:
          $ref: "#/components/schemas/ActionList"
        ruleDisabled:
          $ref: "#/components/schemas/IsDisabled"
        awsIotSqlVersion:
          $ref: "#/components/schemas/AwsIotSqlVersion"
        errorAction:
          $ref: "#/components/schemas/Action"
      description: Describes a rule.
    CreateTopicRuleRequest:
      type: object
      required:
        - topicRulePayload
      properties:
        topicRulePayload:
          $ref: "#/components/schemas/TopicRulePayload"
      description: The input for the CreateTopicRule operation.
    CreatedAtDate:
      type: string
      format: date-time
    HashAlgorithm:
      type: string
    SignatureAlgorithm:
      type: string
    DeleteScheduledAudits:
      type: boolean
    DeleteAccountAuditConfigurationRequest:
      type: object
      properties: {}
    DeleteAdditionalMetricsToRetain:
      type: boolean
    DeleteAlertTargets:
      type: boolean
    DeleteAuthorizerRequest:
      type: object
      properties: {}
    DeleteBehaviors:
      type: boolean
    OptionalVersion:
      type: integer
    DeleteBillingGroupRequest:
      type: object
      properties: {}
    DeleteCACertificateRequest:
      type: object
      properties: {}
      description: Input for the DeleteCACertificate operation.
    ForceDelete:
      type: boolean
    DeleteCertificateRequest:
      type: object
      properties: {}
      description: The input for the DeleteCertificate operation.
    DeleteDynamicThingGroupRequest:
      type: object
      properties: {}
    ExecutionNumber:
      type: integer
    DeleteJobExecutionRequest:
      type: object
      properties: {}
    DeleteJobRequest:
      type: object
      properties: {}
    DeleteMitigationActionRequest:
      type: object
      properties: {}
    DeleteStream:
      type: boolean
    ForceDeleteAWSJob:
      type: boolean
    DeleteOTAUpdateRequest:
      type: object
      properties: {}
    DeletePolicyRequest:
      type: object
      properties: {}
      description: The input for the DeletePolicy operation.
    DeletePolicyVersionRequest:
      type: object
      properties: {}
      description: The input for the DeletePolicyVersion operation.
    DeleteRegistrationCodeRequest:
      type: object
      properties: {}
      description: The input for the DeleteRegistrationCode operation.
    DeleteRoleAliasRequest:
      type: object
      properties: {}
    DeleteScheduledAuditRequest:
      type: object
      properties: {}
    DeleteSecurityProfileRequest:
      type: object
      properties: {}
    DeleteStreamRequest:
      type: object
      properties: {}
    DeleteThingGroupRequest:
      type: object
      properties: {}
    DeleteThingRequest:
      type: object
      properties: {}
      description: The input for the DeleteThing operation.
    DeleteThingTypeRequest:
      type: object
      properties: {}
      description: The input for the DeleteThingType operation.
    DeleteTopicRuleRequest:
      type: object
      properties: {}
      description: The input for the DeleteTopicRule operation.
    DeleteV2LoggingLevelRequest:
      type: object
      properties: {}
    DeliveryStreamName:
      type: string
    ImplicitDeny:
      type: object
      properties:
        policies:
          $ref: "#/components/schemas/Policies"
      description: Information that implicitly denies authorization. When policy doesn't
        explicitly deny or allow an action on a resource it is considered an
        implicit deny.
    ExplicitDeny:
      type: object
      properties:
        policies:
          $ref: "#/components/schemas/Policies"
      description: Information that explicitly denies authorization.
    UndoDeprecate:
      type: boolean
    DeprecateThingTypeRequest:
      type: object
      properties:
        undoDeprecate:
          $ref: "#/components/schemas/UndoDeprecate"
      description: The input for the DeprecateThingType operation.
    DeprecationDate:
      type: string
      format: date-time
    DescribeAccountAuditConfigurationRequest:
      type: object
      properties: {}
    DescribeAuditFindingRequest:
      type: object
      properties: {}
    DescribeAuditMitigationActionsTaskRequest:
      type: object
      properties: {}
    MitigationActionList:
      type: array
      items:
        $ref: "#/components/schemas/MitigationAction"
    DescribeAuditTaskRequest:
      type: object
      properties: {}
    TaskStatistics:
      type: object
      properties:
        totalChecks:
          $ref: "#/components/schemas/TotalChecksCount"
        inProgressChecks:
          $ref: "#/components/schemas/InProgressChecksCount"
        waitingForDataCollectionChecks:
          $ref: "#/components/schemas/WaitingForDataCollectionChecksCount"
        compliantChecks:
          $ref: "#/components/schemas/CompliantChecksCount"
        nonCompliantChecks:
          $ref: "#/components/schemas/NonCompliantChecksCount"
        failedChecks:
          $ref: "#/components/schemas/FailedChecksCount"
        canceledChecks:
          $ref: "#/components/schemas/CanceledChecksCount"
      description: Statistics for the checks performed during the audit.
    DescribeAuthorizerRequest:
      type: object
      properties: {}
    DescribeBillingGroupRequest:
      type: object
      properties: {}
    Version:
      type: integer
    DescribeCACertificateRequest:
      type: object
      properties: {}
      description: The input for the DescribeCACertificate operation.
    RegistrationConfig:
      type: object
      properties:
        templateBody:
          $ref: "#/components/schemas/TemplateBody"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: The registration configuration.
    DescribeCertificateRequest:
      type: object
      properties: {}
      description: The input for the DescribeCertificate operation.
    DescribeDefaultAuthorizerRequest:
      type: object
      properties: {}
    EndpointType:
      type: string
    DescribeEndpointRequest:
      type: object
      properties: {}
      description: The input for the DescribeEndpoint operation.
    EndpointAddress:
      type: string
    DescribeEventConfigurationsRequest:
      type: object
      properties: {}
    EventConfigurations:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Configuration"
    LastModifiedDate:
      type: string
      format: date-time
    DescribeIndexRequest:
      type: object
      properties: {}
    IndexStatus:
      type: string
      enum:
        - ACTIVE
        - BUILDING
        - REBUILDING
    IndexSchema:
      type: string
    DescribeJobExecutionRequest:
      type: object
      properties: {}
    JobExecution:
      type: object
      properties:
        jobId:
          $ref: "#/components/schemas/JobId"
        status:
          $ref: "#/components/schemas/JobExecutionStatus"
        forceCanceled:
          $ref: "#/components/schemas/Forced"
        statusDetails:
          $ref: "#/components/schemas/JobExecutionStatusDetails"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
        queuedAt:
          $ref: "#/components/schemas/DateType"
        startedAt:
          $ref: "#/components/schemas/DateType"
        lastUpdatedAt:
          $ref: "#/components/schemas/DateType"
        executionNumber:
          $ref: "#/components/schemas/ExecutionNumber"
        versionNumber:
          $ref: "#/components/schemas/VersionNumber"
        approximateSecondsBeforeTimedOut:
          $ref: "#/components/schemas/ApproximateSecondsBeforeTimedOut"
      description: The job execution object represents the execution of a job on a
        particular device.
    DescribeJobRequest:
      type: object
      properties: {}
    Job:
      type: object
      properties:
        jobArn:
          $ref: "#/components/schemas/JobArn"
        jobId:
          $ref: "#/components/schemas/JobId"
        targetSelection:
          $ref: "#/components/schemas/TargetSelection"
        status:
          $ref: "#/components/schemas/JobStatus"
        forceCanceled:
          $ref: "#/components/schemas/Forced"
        reasonCode:
          $ref: "#/components/schemas/ReasonCode"
        comment:
          $ref: "#/components/schemas/Comment"
        targets:
          $ref: "#/components/schemas/JobTargets"
        description:
          $ref: "#/components/schemas/JobDescription"
        presignedUrlConfig:
          $ref: "#/components/schemas/PresignedUrlConfig"
        jobExecutionsRolloutConfig:
          $ref: "#/components/schemas/JobExecutionsRolloutConfig"
        abortConfig:
          $ref: "#/components/schemas/AbortConfig"
        createdAt:
          $ref: "#/components/schemas/DateType"
        lastUpdatedAt:
          $ref: "#/components/schemas/DateType"
        completedAt:
          $ref: "#/components/schemas/DateType"
        jobProcessDetails:
          $ref: "#/components/schemas/JobProcessDetails"
        timeoutConfig:
          $ref: "#/components/schemas/TimeoutConfig"
      description: The <code>Job</code> object contains details about a job.
    DescribeMitigationActionRequest:
      type: object
      properties: {}
    MitigationActionType:
      type: string
      enum:
        - UPDATE_DEVICE_CERTIFICATE
        - UPDATE_CA_CERTIFICATE
        - ADD_THINGS_TO_THING_GROUP
        - REPLACE_DEFAULT_POLICY_VERSION
        - ENABLE_IOT_LOGGING
        - PUBLISH_FINDING_TO_SNS
    DescribeRoleAliasRequest:
      type: object
      properties: {}
    RoleAliasDescription:
      type: object
      properties:
        roleAlias:
          $ref: "#/components/schemas/RoleAlias"
        roleAliasArn:
          $ref: "#/components/schemas/RoleAliasArn"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        owner:
          $ref: "#/components/schemas/AwsAccountId"
        credentialDurationSeconds:
          $ref: "#/components/schemas/CredentialDurationSeconds"
        creationDate:
          $ref: "#/components/schemas/DateType"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
      description: Role alias description.
    DescribeScheduledAuditRequest:
      type: object
      properties: {}
    DescribeSecurityProfileRequest:
      type: object
      properties: {}
    DescribeStreamRequest:
      type: object
      properties: {}
    StreamInfo:
      type: object
      properties:
        streamId:
          $ref: "#/components/schemas/StreamId"
        streamArn:
          $ref: "#/components/schemas/StreamArn"
        streamVersion:
          $ref: "#/components/schemas/StreamVersion"
        description:
          $ref: "#/components/schemas/StreamDescription"
        files:
          $ref: "#/components/schemas/StreamFiles"
        createdAt:
          $ref: "#/components/schemas/DateType"
        lastUpdatedAt:
          $ref: "#/components/schemas/DateType"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Information about a stream.
    DescribeThingGroupRequest:
      type: object
      properties: {}
    ThingGroupMetadata:
      type: object
      properties:
        parentGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        rootToParentThingGroups:
          $ref: "#/components/schemas/ThingGroupNameAndArnList"
        creationDate:
          $ref: "#/components/schemas/CreationDate"
      description: Thing group metadata.
    DynamicGroupStatus:
      type: string
      enum:
        - ACTIVE
        - BUILDING
        - REBUILDING
    TaskId:
      type: string
      maxLength: 40
    DescribeThingRegistrationTaskRequest:
      type: object
      properties: {}
    RegistryS3BucketName:
      type: string
      pattern: "[a-zA-Z0-9._-]+"
      minLength: 3
      maxLength: 256
    RegistryS3KeyName:
      type: string
      pattern: "[a-zA-Z0-9!_.*'()-\\/]+"
      minLength: 1
      maxLength: 1024
    Status:
      type: string
      enum:
        - InProgress
        - Completed
        - Failed
        - Cancelled
        - Cancelling
    Percentage:
      type: integer
      minimum: 0
      maximum: 100
    DescribeThingRequest:
      type: object
      properties: {}
      description: The input for the DescribeThing operation.
    DescribeThingTypeRequest:
      type: object
      properties: {}
      description: The input for the DescribeThingType operation.
    ThingTypeMetadata:
      type: object
      properties:
        deprecationDate:
          $ref: "#/components/schemas/DeprecationDate"
        creationDate:
          $ref: "#/components/schemas/CreationDate"
      description: "The ThingTypeMetadata contains additional information about the thing
        type including: creation date and time, a value indicating whether the
        thing type is deprecated, and a date and time when time was deprecated."
    S3Destination:
      type: object
      properties:
        bucket:
          $ref: "#/components/schemas/S3Bucket"
        prefix:
          $ref: "#/components/schemas/Prefix"
      description: Describes the location of updated firmware in S3.
    Destination:
      type: object
      properties:
        s3Destination:
          $ref: "#/components/schemas/S3Destination"
      description: Describes the location of the updated firmware.
    DetachPolicyRequest:
      type: object
      required:
        - target
      properties:
        target:
          $ref: "#/components/schemas/PolicyTarget"
    DetachPrincipalPolicyRequest:
      type: object
      properties: {}
      description: The input for the DetachPrincipalPolicy operation.
    DetachSecurityProfileRequest:
      type: object
      properties: {}
    DetachThingPrincipalRequest:
      type: object
      properties: {}
      description: The input for the DetachThingPrincipal operation.
    DetailsKey:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    DeviceCertificateUpdateAction:
      type: string
      enum:
        - DEACTIVATE
    DisableAllLogs:
      type: boolean
    DisableTopicRuleRequest:
      type: object
      properties: {}
      description: The input for the DisableTopicRuleRequest operation.
    TableName:
      type: string
    DynamoOperation:
      type: string
    HashKeyField:
      type: string
    HashKeyValue:
      type: string
    DynamoKeyType:
      type: string
      enum:
        - STRING
        - NUMBER
    RangeKeyField:
      type: string
    RangeKeyValue:
      type: string
    PayloadField:
      type: string
    PutItemInput:
      type: object
      required:
        - tableName
      properties:
        tableName:
          $ref: "#/components/schemas/TableName"
      description: The input for the DynamoActionVS action that specifies the DynamoDB
        table to which the message data will be written.
    EffectivePolicy:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyArn:
          $ref: "#/components/schemas/PolicyArn"
        policyDocument:
          $ref: "#/components/schemas/PolicyDocument"
      description: The policy that has the effect on the authorization results.
    EffectivePolicies:
      type: array
      items:
        $ref: "#/components/schemas/EffectivePolicy"
    ElasticsearchEndpoint:
      type: string
      pattern: https?://.*
    ElasticsearchIndex:
      type: string
    ElasticsearchType:
      type: string
    ElasticsearchId:
      type: string
    EnableTopicRuleRequest:
      type: object
      properties: {}
      description: The input for the EnableTopicRuleRequest operation.
    OTAUpdateErrorMessage:
      type: string
    ErrorInfo:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/Code"
        message:
          $ref: "#/components/schemas/OTAUpdateErrorMessage"
      description: Error information.
    EvaluationStatistic:
      type: string
      pattern: (p0|p0\.1|p0\.01|p1|p10|p50|p90|p99|p99\.9|p99\.99|p100)
    EventType:
      type: string
      enum:
        - THING
        - THING_GROUP
        - THING_TYPE
        - THING_GROUP_MEMBERSHIP
        - THING_GROUP_HIERARCHY
        - THING_TYPE_ASSOCIATION
        - JOB
        - JOB_EXECUTION
        - POLICY
        - CERTIFICATE
        - CA_CERTIFICATE
    ExecutionNamePrefix:
      type: string
    RolloutRatePerMinute:
      type: integer
      minimum: 1
      maximum: 1000
    IncrementFactor:
      type: number
      format: double
      minimum: 1
      maximum: 5
    RateIncreaseCriteria:
      type: object
      properties:
        numberOfNotifiedThings:
          $ref: "#/components/schemas/NumberOfThings"
        numberOfSucceededThings:
          $ref: "#/components/schemas/NumberOfThings"
      description: Allows you to define a criteria to initiate the increase in rate of
        rollout for a job.
    FailedChecksCount:
      type: integer
    FailedFindingsCount:
      type: integer
    FailedThings:
      type: integer
    FileId:
      type: integer
      minimum: 0
      maximum: 255
    Stream:
      type: object
      properties:
        streamId:
          $ref: "#/components/schemas/StreamId"
        fileId:
          $ref: "#/components/schemas/FileId"
      description: Describes a group of files that can be streamed.
    S3Location:
      type: object
      properties:
        bucket:
          $ref: "#/components/schemas/S3Bucket"
        key:
          $ref: "#/components/schemas/S3Key"
        version:
          $ref: "#/components/schemas/S3Version"
      description: The S3 location.
    FileLocation:
      type: object
      properties:
        stream:
          $ref: "#/components/schemas/Stream"
        s3Location:
          $ref: "#/components/schemas/S3Location"
      description: The location of the OTA update.
    FileName:
      type: string
    FirehoseSeparator:
      type: string
      pattern: ([\n\t])|(\r\n)|(,)
    Forced:
      type: boolean
    FunctionArn:
      type: string
    GEMaxResults:
      type: integer
      minimum: 1
      maximum: 10000
    GetEffectivePoliciesRequest:
      type: object
      properties:
        principal:
          $ref: "#/components/schemas/Principal"
        cognitoIdentityPoolId:
          $ref: "#/components/schemas/CognitoIdentityPoolId"
    GetIndexingConfigurationRequest:
      type: object
      properties: {}
    ThingIndexingConfiguration:
      type: object
      required:
        - thingIndexingMode
      properties:
        thingIndexingMode:
          $ref: "#/components/schemas/ThingIndexingMode"
        thingConnectivityIndexingMode:
          $ref: "#/components/schemas/ThingConnectivityIndexingMode"
      description: The thing indexing configuration. For more information, see <a
        href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing
        Thing Indexing</a>.
    ThingGroupIndexingConfiguration:
      type: object
      required:
        - thingGroupIndexingMode
      properties:
        thingGroupIndexingMode:
          $ref: "#/components/schemas/ThingGroupIndexingMode"
      description: Thing group indexing configuration.
    GetJobDocumentRequest:
      type: object
      properties: {}
    GetLoggingOptionsRequest:
      type: object
      properties: {}
      description: The input for the GetLoggingOptions operation.
    GetOTAUpdateRequest:
      type: object
      properties: {}
    OTAUpdateInfo:
      type: object
      properties:
        otaUpdateId:
          $ref: "#/components/schemas/OTAUpdateId"
        otaUpdateArn:
          $ref: "#/components/schemas/OTAUpdateArn"
        creationDate:
          $ref: "#/components/schemas/DateType"
        lastModifiedDate:
          $ref: "#/components/schemas/DateType"
        description:
          $ref: "#/components/schemas/OTAUpdateDescription"
        targets:
          $ref: "#/components/schemas/Targets"
        awsJobExecutionsRolloutConfig:
          $ref: "#/components/schemas/AwsJobExecutionsRolloutConfig"
        targetSelection:
          $ref: "#/components/schemas/TargetSelection"
        otaUpdateFiles:
          $ref: "#/components/schemas/OTAUpdateFiles"
        otaUpdateStatus:
          $ref: "#/components/schemas/OTAUpdateStatus"
        awsIotJobId:
          $ref: "#/components/schemas/AwsIotJobId"
        awsIotJobArn:
          $ref: "#/components/schemas/AwsIotJobArn"
        errorInfo:
          $ref: "#/components/schemas/ErrorInfo"
        additionalParameters:
          $ref: "#/components/schemas/AdditionalParameterMap"
      description: Information about an OTA update.
    GetPolicyRequest:
      type: object
      properties: {}
      description: The input for the GetPolicy operation.
    GetPolicyVersionRequest:
      type: object
      properties: {}
      description: The input for the GetPolicyVersion operation.
    GetRegistrationCodeRequest:
      type: object
      properties: {}
      description: The input to the GetRegistrationCode operation.
    RegistrationCode:
      type: string
      pattern: (0x)?[a-fA-F0-9]+
      minLength: 64
      maxLength: 64
    GetStatisticsRequest:
      type: object
      required:
        - queryString
      properties:
        indexName:
          $ref: "#/components/schemas/IndexName"
        queryString:
          $ref: "#/components/schemas/QueryString"
        aggregationField:
          $ref: "#/components/schemas/AggregationField"
        queryVersion:
          $ref: "#/components/schemas/QueryVersion"
    Statistics:
      type: object
      properties:
        count:
          $ref: "#/components/schemas/Count"
      description: A map of key-value pairs for all supported statistics. Currently, only
        count is supported.
    GetTopicRuleRequest:
      type: object
      properties: {}
      description: The input for the GetTopicRule operation.
    RuleArn:
      type: string
    TopicRule:
      type: object
      properties:
        ruleName:
          $ref: "#/components/schemas/RuleName"
        sql:
          $ref: "#/components/schemas/SQL"
        description:
          $ref: "#/components/schemas/Description"
        createdAt:
          $ref: "#/components/schemas/CreatedAtDate"
        actions:
          $ref: "#/components/schemas/ActionList"
        ruleDisabled:
          $ref: "#/components/schemas/IsDisabled"
        awsIotSqlVersion:
          $ref: "#/components/schemas/AwsIotSqlVersion"
        errorAction:
          $ref: "#/components/schemas/Action"
      description: Describes a rule.
    GetV2LoggingOptionsRequest:
      type: object
      properties: {}
    InProgressChecksCount:
      type: integer
    InProgressThings:
      type: integer
    IndexNamesList:
      type: array
      items:
        $ref: "#/components/schemas/IndexName"
    InputName:
      type: string
      minLength: 1
      maxLength: 128
    MessageId:
      type: string
      maxLength: 128
    IsAuthenticated:
      type: boolean
    JobStatus:
      type: string
      enum:
        - IN_PROGRESS
        - CANCELED
        - COMPLETED
        - DELETION_IN_PROGRESS
    JobProcessDetails:
      type: object
      properties:
        processingTargets:
          $ref: "#/components/schemas/ProcessingTargetNameList"
        numberOfCanceledThings:
          $ref: "#/components/schemas/CanceledThings"
        numberOfSucceededThings:
          $ref: "#/components/schemas/SucceededThings"
        numberOfFailedThings:
          $ref: "#/components/schemas/FailedThings"
        numberOfRejectedThings:
          $ref: "#/components/schemas/RejectedThings"
        numberOfQueuedThings:
          $ref: "#/components/schemas/QueuedThings"
        numberOfInProgressThings:
          $ref: "#/components/schemas/InProgressThings"
        numberOfRemovedThings:
          $ref: "#/components/schemas/RemovedThings"
        numberOfTimedOutThings:
          $ref: "#/components/schemas/TimedOutThings"
      description: The job process details.
    JobExecutionStatus:
      type: string
      enum:
        - QUEUED
        - IN_PROGRESS
        - SUCCEEDED
        - FAILED
        - TIMED_OUT
        - REJECTED
        - REMOVED
        - CANCELED
    JobExecutionStatusDetails:
      type: object
      properties:
        detailsMap:
          $ref: "#/components/schemas/DetailsMap"
      description: Details of the job execution status.
    VersionNumber:
      type: integer
    JobExecutionSummary:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/JobExecutionStatus"
        queuedAt:
          $ref: "#/components/schemas/DateType"
        startedAt:
          $ref: "#/components/schemas/DateType"
        lastUpdatedAt:
          $ref: "#/components/schemas/DateType"
        executionNumber:
          $ref: "#/components/schemas/ExecutionNumber"
      description: The job execution summary.
    JobExecutionSummaryForJob:
      type: object
      properties:
        thingArn:
          $ref: "#/components/schemas/ThingArn"
        jobExecutionSummary:
          $ref: "#/components/schemas/JobExecutionSummary"
      description: Contains a summary of information about job executions for a specific
        job.
    JobExecutionSummaryForJobList:
      type: array
      items:
        $ref: "#/components/schemas/JobExecutionSummaryForJob"
    JobExecutionSummaryForThing:
      type: object
      properties:
        jobId:
          $ref: "#/components/schemas/JobId"
        jobExecutionSummary:
          $ref: "#/components/schemas/JobExecutionSummary"
      description: The job execution summary for a thing.
    JobExecutionSummaryForThingList:
      type: array
      items:
        $ref: "#/components/schemas/JobExecutionSummaryForThing"
    ProcessingTargetNameList:
      type: array
      items:
        $ref: "#/components/schemas/ProcessingTargetName"
    SucceededThings:
      type: integer
    RejectedThings:
      type: integer
    QueuedThings:
      type: integer
    RemovedThings:
      type: integer
    TimedOutThings:
      type: integer
    JobSummary:
      type: object
      properties:
        jobArn:
          $ref: "#/components/schemas/JobArn"
        jobId:
          $ref: "#/components/schemas/JobId"
        thingGroupId:
          $ref: "#/components/schemas/ThingGroupId"
        targetSelection:
          $ref: "#/components/schemas/TargetSelection"
        status:
          $ref: "#/components/schemas/JobStatus"
        createdAt:
          $ref: "#/components/schemas/DateType"
        lastUpdatedAt:
          $ref: "#/components/schemas/DateType"
        completedAt:
          $ref: "#/components/schemas/DateType"
      description: The job summary.
    JobSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/JobSummary"
    JsonDocument:
      type: string
    Key:
      type: string
    KeyName:
      type: string
      pattern: "[a-zA-Z0-9:_-]+"
      minLength: 1
      maxLength: 128
    PublicKey:
      type: string
      minLength: 1
    PrivateKey:
      type: string
      minLength: 1
      format: password
    StreamName:
      type: string
    PartitionKey:
      type: string
    LaserMaxResults:
      type: integer
      minimum: 1
      maximum: 250
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 250
    ListActiveViolationsRequest:
      type: object
      properties: {}
    Recursive:
      type: boolean
    Marker:
      type: string
      pattern: "[A-Za-z0-9+/]+={0,2}"
    PageSize:
      type: integer
      minimum: 1
      maximum: 250
    ListAttachedPoliciesRequest:
      type: object
      properties: {}
    ResourceIdentifier:
      type: object
      properties:
        deviceCertificateId:
          $ref: "#/components/schemas/CertificateId"
        caCertificateId:
          $ref: "#/components/schemas/CertificateId"
        cognitoIdentityPoolId:
          $ref: "#/components/schemas/CognitoIdentityPoolId"
        clientId:
          $ref: "#/components/schemas/ClientId"
        policyVersionIdentifier:
          $ref: "#/components/schemas/PolicyVersionIdentifier"
        account:
          $ref: "#/components/schemas/AwsAccountId"
      description: Information that identifies the noncompliant resource.
    ListAuditFindingsRequest:
      type: object
      properties:
        taskId:
          $ref: "#/components/schemas/AuditTaskId"
        checkName:
          $ref: "#/components/schemas/AuditCheckName"
        resourceIdentifier:
          $ref: "#/components/schemas/ResourceIdentifier"
        maxResults:
          $ref: "#/components/schemas/MaxResults"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        startTime:
          $ref: "#/components/schemas/Timestamp"
        endTime:
          $ref: "#/components/schemas/Timestamp"
    ListAuditMitigationActionsExecutionsRequest:
      type: object
      properties: {}
    ListAuditMitigationActionsTasksRequest:
      type: object
      properties: {}
    ListAuditTasksRequest:
      type: object
      properties: {}
    ListAuthorizersRequest:
      type: object
      properties: {}
    RegistryMaxResults:
      type: integer
      minimum: 1
      maximum: 250
    ListBillingGroupsRequest:
      type: object
      properties: {}
    ListCACertificatesRequest:
      type: object
      properties: {}
      description: Input for the ListCACertificates operation.
    ListCertificatesByCARequest:
      type: object
      properties: {}
      description: The input to the ListCertificatesByCA operation.
    ListCertificatesRequest:
      type: object
      properties: {}
      description: The input for the ListCertificates operation.
    QueryMaxResults:
      type: integer
      minimum: 1
      maximum: 500
    ListIndicesRequest:
      type: object
      properties: {}
    ListJobExecutionsForJobRequest:
      type: object
      properties: {}
    ListJobExecutionsForThingRequest:
      type: object
      properties: {}
    ListJobsRequest:
      type: object
      properties: {}
    ListMitigationActionsRequest:
      type: object
      properties: {}
    MitigationActionIdentifierList:
      type: array
      items:
        $ref: "#/components/schemas/MitigationActionIdentifier"
    ListOTAUpdatesRequest:
      type: object
      properties: {}
    OTAUpdatesSummary:
      type: array
      items:
        $ref: "#/components/schemas/OTAUpdateSummary"
    ListOutgoingCertificatesRequest:
      type: object
      properties: {}
      description: The input to the ListOutgoingCertificates operation.
    OutgoingCertificates:
      type: array
      items:
        $ref: "#/components/schemas/OutgoingCertificate"
    ListPoliciesRequest:
      type: object
      properties: {}
      description: The input for the ListPolicies operation.
    ListPolicyPrincipalsRequest:
      type: object
      properties: {}
      description: The input for the ListPolicyPrincipals operation.
    Principals:
      type: array
      items:
        $ref: "#/components/schemas/PrincipalArn"
    ListPolicyVersionsRequest:
      type: object
      properties: {}
      description: The input for the ListPolicyVersions operation.
    PolicyVersions:
      type: array
      items:
        $ref: "#/components/schemas/PolicyVersion"
    ListPrincipalPoliciesRequest:
      type: object
      properties: {}
      description: The input for the ListPrincipalPolicies operation.
    ListPrincipalThingsRequest:
      type: object
      properties: {}
      description: The input for the ListPrincipalThings operation.
    ThingNameList:
      type: array
      items:
        $ref: "#/components/schemas/ThingName"
    ListRoleAliasesRequest:
      type: object
      properties: {}
    RoleAliases:
      type: array
      items:
        $ref: "#/components/schemas/RoleAlias"
    ListScheduledAuditsRequest:
      type: object
      properties: {}
    ScheduledAuditMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/ScheduledAuditMetadata"
    ListSecurityProfilesForTargetRequest:
      type: object
      properties: {}
    SecurityProfileTargetMappings:
      type: array
      items:
        $ref: "#/components/schemas/SecurityProfileTargetMapping"
    ListSecurityProfilesRequest:
      type: object
      properties: {}
    SecurityProfileIdentifiers:
      type: array
      items:
        $ref: "#/components/schemas/SecurityProfileIdentifier"
    ListStreamsRequest:
      type: object
      properties: {}
    StreamsSummary:
      type: array
      items:
        $ref: "#/components/schemas/StreamSummary"
    ResourceArn:
      type: string
    ListTagsForResourceRequest:
      type: object
      properties: {}
    ListTargetsForPolicyRequest:
      type: object
      properties: {}
    PolicyTargets:
      type: array
      items:
        $ref: "#/components/schemas/PolicyTarget"
    ListTargetsForSecurityProfileRequest:
      type: object
      properties: {}
    SecurityProfileTargets:
      type: array
      items:
        $ref: "#/components/schemas/SecurityProfileTarget"
    ListThingGroupsForThingRequest:
      type: object
      properties: {}
    ThingGroupNameAndArnList:
      type: array
      items:
        $ref: "#/components/schemas/GroupNameAndArn"
    RecursiveWithoutDefault:
      type: boolean
    ListThingGroupsRequest:
      type: object
      properties: {}
    ListThingPrincipalsRequest:
      type: object
      properties: {}
      description: The input for the ListThingPrincipal operation.
    ReportType:
      type: string
      enum:
        - ERRORS
        - RESULTS
    ListThingRegistrationTaskReportsRequest:
      type: object
      properties: {}
    S3FileUrlList:
      type: array
      items:
        $ref: "#/components/schemas/S3FileUrl"
    ListThingRegistrationTasksRequest:
      type: object
      properties: {}
    TaskIdList:
      type: array
      items:
        $ref: "#/components/schemas/TaskId"
    ListThingTypesRequest:
      type: object
      properties: {}
      description: The input for the ListThingTypes operation.
    ThingTypeList:
      type: array
      items:
        $ref: "#/components/schemas/ThingTypeDefinition"
    ListThingsInBillingGroupRequest:
      type: object
      properties: {}
    ListThingsInThingGroupRequest:
      type: object
      properties: {}
    ListThingsRequest:
      type: object
      properties: {}
      description: The input for the ListThings operation.
    ThingAttributeList:
      type: array
      items:
        $ref: "#/components/schemas/ThingAttribute"
    Topic:
      type: string
    ListTopicRulesRequest:
      type: object
      properties: {}
      description: The input for the ListTopicRules operation.
    TopicRuleList:
      type: array
      items:
        $ref: "#/components/schemas/TopicRuleListItem"
    SkyfallMaxResults:
      type: integer
      minimum: 1
      maximum: 250
    ListV2LoggingLevelsRequest:
      type: object
      properties: {}
    LogTargetConfigurations:
      type: array
      items:
        $ref: "#/components/schemas/LogTargetConfiguration"
    ListViolationEventsRequest:
      type: object
      properties: {}
    ViolationEvents:
      type: array
      items:
        $ref: "#/components/schemas/ViolationEvent"
    LogTarget:
      type: object
      required:
        - targetType
      properties:
        targetType:
          $ref: "#/components/schemas/LogTargetType"
        targetName:
          $ref: "#/components/schemas/LogTargetName"
      description: A log target.
    LogTargetConfiguration:
      type: object
      properties:
        logTarget:
          $ref: "#/components/schemas/LogTarget"
        logLevel:
          $ref: "#/components/schemas/LogLevel"
      description: The target configuration.
    LoggingOptionsPayload:
      type: object
      required:
        - roleArn
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        logLevel:
          $ref: "#/components/schemas/LogLevel"
      description: Describes the logging options payload.
    Message:
      type: string
      maxLength: 128
    MessageFormat:
      type: string
      enum:
        - RAW
        - JSON
    UnsignedLong:
      type: integer
      minimum: 0
    Ports:
      type: array
      items:
        $ref: "#/components/schemas/Port"
    MissingContextValue:
      type: string
    MitigationAction:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/MitigationActionName"
        id:
          $ref: "#/components/schemas/MitigationActionId"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        actionParams:
          $ref: "#/components/schemas/MitigationActionParams"
      description: Describes which changes should be applied as part of a mitigation action.
    MitigationActionIdentifier:
      type: object
      properties:
        actionName:
          $ref: "#/components/schemas/MitigationActionName"
        actionArn:
          $ref: "#/components/schemas/MitigationActionArn"
        creationDate:
          $ref: "#/components/schemas/Timestamp"
      description: Information that identifies a mitigation action. This information is
        returned by ListMitigationActions.
    NonCompliantChecksCount:
      type: integer
    ResourceType:
      type: string
      enum:
        - DEVICE_CERTIFICATE
        - CA_CERTIFICATE
        - IOT_POLICY
        - COGNITO_IDENTITY_POOL
        - CLIENT_ID
        - ACCOUNT_SETTINGS
    StringMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    NumberOfThings:
      type: integer
      minimum: 1
    OTAUpdateFileVersion:
      type: string
    OTAUpdateSummary:
      type: object
      properties:
        otaUpdateId:
          $ref: "#/components/schemas/OTAUpdateId"
        otaUpdateArn:
          $ref: "#/components/schemas/OTAUpdateArn"
        creationDate:
          $ref: "#/components/schemas/DateType"
      description: An OTA update summary.
    OutgoingCertificate:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        certificateId:
          $ref: "#/components/schemas/CertificateId"
        transferredTo:
          $ref: "#/components/schemas/AwsAccountId"
        transferDate:
          $ref: "#/components/schemas/DateType"
        transferMessage:
          $ref: "#/components/schemas/Message"
        creationDate:
          $ref: "#/components/schemas/DateType"
      description: A certificate that has been transferred but not yet accepted.
    Parameter:
      type: string
    Parameters:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Value"
    Platform:
      type: string
    Policy:
      type: object
      properties:
        policyName:
          $ref: "#/components/schemas/PolicyName"
        policyArn:
          $ref: "#/components/schemas/PolicyArn"
      description: Describes an AWS IoT policy.
    PolicyDocuments:
      type: array
      items:
        $ref: "#/components/schemas/PolicyDocument"
    PolicyNames:
      type: array
      items:
        $ref: "#/components/schemas/PolicyName"
    PolicyTemplateName:
      type: string
      enum:
        - BLANK_POLICY
    PolicyVersion:
      type: object
      properties:
        versionId:
          $ref: "#/components/schemas/PolicyVersionId"
        isDefaultVersion:
          $ref: "#/components/schemas/IsDefaultVersion"
        createDate:
          $ref: "#/components/schemas/DateType"
      description: Describes a policy version.
    Port:
      type: integer
      minimum: 0
      maximum: 65535
    Prefix:
      type: string
    PrincipalArn:
      type: string
    PrincipalId:
      type: string
      pattern: "[a-zA-Z0-9]+"
      minLength: 1
      maxLength: 128
    ProcessingTargetName:
      type: string
    SnsTopicArn:
      type: string
      maxLength: 350
    Qos:
      type: integer
      minimum: 0
      maximum: 1
    QueueUrl:
      type: string
    RegisterCACertificateRequest:
      type: object
      required:
        - caCertificate
        - verificationCertificate
      properties:
        caCertificate:
          $ref: "#/components/schemas/CertificatePem"
        verificationCertificate:
          $ref: "#/components/schemas/CertificatePem"
        registrationConfig:
          $ref: "#/components/schemas/RegistrationConfig"
      description: The input to the RegisterCACertificate operation.
    SetAsActiveFlag:
      type: boolean
    RegisterCertificateRequest:
      type: object
      required:
        - certificatePem
      properties:
        certificatePem:
          $ref: "#/components/schemas/CertificatePem"
        caCertificatePem:
          $ref: "#/components/schemas/CertificatePem"
        status:
          $ref: "#/components/schemas/CertificateStatus"
      description: The input to the RegisterCertificate operation.
    RegisterThingRequest:
      type: object
      required:
        - templateBody
      properties:
        templateBody:
          $ref: "#/components/schemas/TemplateBody"
        parameters:
          $ref: "#/components/schemas/Parameters"
    ResourceArns:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ResourceArn"
    RejectCertificateTransferRequest:
      type: object
      properties:
        rejectReason:
          $ref: "#/components/schemas/Message"
      description: The input for the RejectCertificateTransfer operation.
    RelatedResource:
      type: object
      properties:
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        resourceIdentifier:
          $ref: "#/components/schemas/ResourceIdentifier"
        additionalInfo:
          $ref: "#/components/schemas/StringMap"
      description: Information about a related resource.
    RemoveAutoRegistration:
      type: boolean
    RemoveThingFromBillingGroupRequest:
      type: object
      properties:
        billingGroupName:
          $ref: "#/components/schemas/BillingGroupName"
        billingGroupArn:
          $ref: "#/components/schemas/BillingGroupArn"
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
    RemoveThingFromThingGroupRequest:
      type: object
      properties:
        thingGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupArn:
          $ref: "#/components/schemas/ThingGroupArn"
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
    RemoveThingType:
      type: boolean
    ReplaceTopicRuleRequest:
      type: object
      required:
        - topicRulePayload
      properties:
        topicRulePayload:
          $ref: "#/components/schemas/TopicRulePayload"
      description: The input for the ReplaceTopicRule operation.
    TopicPattern:
      type: string
    Resource:
      type: string
    ResourceLogicalId:
      type: string
    S3Bucket:
      type: string
      minLength: 1
    S3FileUrl:
      type: string
      maxLength: 65535
    S3Key:
      type: string
      minLength: 1
    S3Version:
      type: string
    SalesforceToken:
      type: string
      minLength: 40
    SalesforceEndpoint:
      type: string
      pattern: https://ingestion-[a-zA-Z0-9]{1,12}\.[a-zA-Z0-9]+\.((sfdc-matrix\.net)|(sfdcnow\.com))/streams/\w{1,20}/\w{1,20}/event
      maxLength: 2000
    ScheduledAuditMetadata:
      type: object
      properties:
        scheduledAuditName:
          $ref: "#/components/schemas/ScheduledAuditName"
        scheduledAuditArn:
          $ref: "#/components/schemas/ScheduledAuditArn"
        frequency:
          $ref: "#/components/schemas/AuditFrequency"
        dayOfMonth:
          $ref: "#/components/schemas/DayOfMonth"
        dayOfWeek:
          $ref: "#/components/schemas/DayOfWeek"
      description: Information about the scheduled audit.
    SearchIndexRequest:
      type: object
      required:
        - queryString
      properties:
        indexName:
          $ref: "#/components/schemas/IndexName"
        queryString:
          $ref: "#/components/schemas/QueryString"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        maxResults:
          $ref: "#/components/schemas/QueryMaxResults"
        queryVersion:
          $ref: "#/components/schemas/QueryVersion"
    ThingDocumentList:
      type: array
      items:
        $ref: "#/components/schemas/ThingDocument"
    ThingGroupDocumentList:
      type: array
      items:
        $ref: "#/components/schemas/ThingGroupDocument"
    Seconds:
      type: integer
    SecurityProfileIdentifier:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          $ref: "#/components/schemas/SecurityProfileName"
        arn:
          $ref: "#/components/schemas/SecurityProfileArn"
      description: Identifying information for a Device Defender security profile.
    SecurityProfileTarget:
      type: object
      required:
        - arn
      properties:
        arn:
          $ref: "#/components/schemas/SecurityProfileTargetArn"
      description: A target to which an alert is sent when a security profile behavior is
        violated.
    SecurityProfileTargetMapping:
      type: object
      properties:
        securityProfileIdentifier:
          $ref: "#/components/schemas/SecurityProfileIdentifier"
        target:
          $ref: "#/components/schemas/SecurityProfileTarget"
      description: Information about a security profile and the target associated with it.
    SetDefaultAuthorizerRequest:
      type: object
      required:
        - authorizerName
      properties:
        authorizerName:
          $ref: "#/components/schemas/AuthorizerName"
    SetDefaultPolicyVersionRequest:
      type: object
      properties: {}
      description: The input for the SetDefaultPolicyVersion operation.
    SetLoggingOptionsRequest:
      type: object
      required:
        - loggingOptionsPayload
      properties:
        loggingOptionsPayload:
          $ref: "#/components/schemas/LoggingOptionsPayload"
      description: The input for the SetLoggingOptions operation.
    SetV2LoggingLevelRequest:
      type: object
      required:
        - logTarget
        - logLevel
      properties:
        logTarget:
          $ref: "#/components/schemas/LogTarget"
        logLevel:
          $ref: "#/components/schemas/LogLevel"
    SetV2LoggingOptionsRequest:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/AwsArn"
        defaultLogLevel:
          $ref: "#/components/schemas/LogLevel"
        disableAllLogs:
          $ref: "#/components/schemas/DisableAllLogs"
    SigningProfileName:
      type: string
    SigningProfileParameter:
      type: object
      properties:
        certificateArn:
          $ref: "#/components/schemas/CertificateArn"
        platform:
          $ref: "#/components/schemas/Platform"
        certificatePathOnDevice:
          $ref: "#/components/schemas/CertificatePathOnDevice"
      description: Describes the code-signing profile.
    SkippedFindingsCount:
      type: integer
    UseBase64:
      type: boolean
    StartAuditMitigationActionsTaskRequest:
      type: object
      required:
        - target
        - auditCheckToActionsMapping
        - clientRequestToken
      properties:
        target:
          $ref: "#/components/schemas/AuditMitigationActionsTaskTarget"
        auditCheckToActionsMapping:
          $ref: "#/components/schemas/AuditCheckToActionsMapping"
        clientRequestToken:
          $ref: "#/components/schemas/ClientRequestToken"
    StartOnDemandAuditTaskRequest:
      type: object
      required:
        - targetCheckNames
      properties:
        targetCheckNames:
          $ref: "#/components/schemas/TargetAuditCheckNames"
    StartThingRegistrationTaskRequest:
      type: object
      required:
        - templateBody
        - inputFileBucket
        - inputFileKey
        - roleArn
      properties:
        templateBody:
          $ref: "#/components/schemas/TemplateBody"
        inputFileBucket:
          $ref: "#/components/schemas/RegistryS3BucketName"
        inputFileKey:
          $ref: "#/components/schemas/RegistryS3KeyName"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
    StateMachineName:
      type: string
    StopThingRegistrationTaskRequest:
      type: object
      properties: {}
    StreamSummary:
      type: object
      properties:
        streamId:
          $ref: "#/components/schemas/StreamId"
        streamArn:
          $ref: "#/components/schemas/StreamArn"
        streamVersion:
          $ref: "#/components/schemas/StreamVersion"
        description:
          $ref: "#/components/schemas/StreamDescription"
      description: A summary of a stream.
    SucceededFindingsCount:
      type: integer
    TagValue:
      type: string
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    TagResourceRequest:
      type: object
      required:
        - resourceArn
        - tags
      properties:
        resourceArn:
          $ref: "#/components/schemas/ResourceArn"
        tags:
          $ref: "#/components/schemas/TagList"
    TotalChecksCount:
      type: integer
    WaitingForDataCollectionChecksCount:
      type: integer
    TotalFindingsCount:
      type: integer
    TestAuthorizationRequest:
      type: object
      required:
        - authInfos
      properties:
        principal:
          $ref: "#/components/schemas/Principal"
        cognitoIdentityPoolId:
          $ref: "#/components/schemas/CognitoIdentityPoolId"
        authInfos:
          $ref: "#/components/schemas/AuthInfos"
        policyNamesToAdd:
          $ref: "#/components/schemas/PolicyNames"
        policyNamesToSkip:
          $ref: "#/components/schemas/PolicyNames"
    Token:
      type: string
      minLength: 1
      maxLength: 6144
    TokenSignature:
      type: string
      pattern: "[A-Za-z0-9+/]+={0,2}"
      minLength: 1
      maxLength: 2560
    TestInvokeAuthorizerRequest:
      type: object
      required:
        - token
        - tokenSignature
      properties:
        token:
          $ref: "#/components/schemas/Token"
        tokenSignature:
          $ref: "#/components/schemas/TokenSignature"
    ThingAttribute:
      type: object
      properties:
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        thingArn:
          $ref: "#/components/schemas/ThingArn"
        attributes:
          $ref: "#/components/schemas/Attributes"
        version:
          $ref: "#/components/schemas/Version"
      description: The properties of the thing, including thing name, thing type name, and
        a list of thing attributes.
    ThingConnectivity:
      type: object
      properties:
        connected:
          $ref: "#/components/schemas/Boolean"
        timestamp:
          $ref: "#/components/schemas/ConnectivityTimestamp"
      description: The connectivity status of the thing.
    ThingGroupNameList:
      type: array
      items:
        $ref: "#/components/schemas/ThingGroupName"
    ThingDocument:
      type: object
      properties:
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingId:
          $ref: "#/components/schemas/ThingId"
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        thingGroupNames:
          $ref: "#/components/schemas/ThingGroupNameList"
        attributes:
          $ref: "#/components/schemas/Attributes"
        shadow:
          $ref: "#/components/schemas/JsonDocument"
        connectivity:
          $ref: "#/components/schemas/ThingConnectivity"
      description: The thing search index document.
    ThingGroupDocument:
      type: object
      properties:
        thingGroupName:
          $ref: "#/components/schemas/ThingGroupName"
        thingGroupId:
          $ref: "#/components/schemas/ThingGroupId"
        thingGroupDescription:
          $ref: "#/components/schemas/ThingGroupDescription"
        attributes:
          $ref: "#/components/schemas/Attributes"
        parentGroupNames:
          $ref: "#/components/schemas/ThingGroupNameList"
      description: The thing group search index document.
    ThingGroupList:
      type: array
      items:
        $ref: "#/components/schemas/ThingGroupName"
    ThingTypeDefinition:
      type: object
      properties:
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        thingTypeArn:
          $ref: "#/components/schemas/ThingTypeArn"
        thingTypeProperties:
          $ref: "#/components/schemas/ThingTypeProperties"
        thingTypeMetadata:
          $ref: "#/components/schemas/ThingTypeMetadata"
      description: The definition of the thing type, including thing type name and
        description.
    TopicRuleListItem:
      type: object
      properties:
        ruleArn:
          $ref: "#/components/schemas/RuleArn"
        ruleName:
          $ref: "#/components/schemas/RuleName"
        topicPattern:
          $ref: "#/components/schemas/TopicPattern"
        createdAt:
          $ref: "#/components/schemas/CreatedAtDate"
        ruleDisabled:
          $ref: "#/components/schemas/IsDisabled"
      description: Describes a rule.
    TransferCertificateRequest:
      type: object
      properties:
        transferMessage:
          $ref: "#/components/schemas/Message"
      description: The input for the TransferCertificate operation.
    UntagResourceRequest:
      type: object
      required:
        - resourceArn
        - tagKeys
      properties:
        resourceArn:
          $ref: "#/components/schemas/ResourceArn"
        tagKeys:
          $ref: "#/components/schemas/TagKeyList"
    UpdateAccountAuditConfigurationRequest:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        auditNotificationTargetConfigurations:
          $ref: "#/components/schemas/AuditNotificationTargetConfigurations"
        auditCheckConfigurations:
          $ref: "#/components/schemas/AuditCheckConfigurations"
    UpdateAuthorizerRequest:
      type: object
      properties:
        authorizerFunctionArn:
          $ref: "#/components/schemas/AuthorizerFunctionArn"
        tokenKeyName:
          $ref: "#/components/schemas/TokenKeyName"
        tokenSigningPublicKeys:
          $ref: "#/components/schemas/PublicKeyMap"
        status:
          $ref: "#/components/schemas/AuthorizerStatus"
    UpdateBillingGroupRequest:
      type: object
      required:
        - billingGroupProperties
      properties:
        billingGroupProperties:
          $ref: "#/components/schemas/BillingGroupProperties"
        expectedVersion:
          $ref: "#/components/schemas/OptionalVersion"
    UpdateCACertificateRequest:
      type: object
      properties:
        registrationConfig:
          $ref: "#/components/schemas/RegistrationConfig"
        removeAutoRegistration:
          $ref: "#/components/schemas/RemoveAutoRegistration"
      description: The input to the UpdateCACertificate operation.
    UpdateCertificateRequest:
      type: object
      properties: {}
      description: The input for the UpdateCertificate operation.
    UpdateDynamicThingGroupRequest:
      type: object
      required:
        - thingGroupProperties
      properties:
        thingGroupProperties:
          $ref: "#/components/schemas/ThingGroupProperties"
        expectedVersion:
          $ref: "#/components/schemas/OptionalVersion"
        indexName:
          $ref: "#/components/schemas/IndexName"
        queryString:
          $ref: "#/components/schemas/QueryString"
        queryVersion:
          $ref: "#/components/schemas/QueryVersion"
    UpdateEventConfigurationsRequest:
      type: object
      properties:
        eventConfigurations:
          $ref: "#/components/schemas/EventConfigurations"
    UpdateIndexingConfigurationRequest:
      type: object
      properties:
        thingIndexingConfiguration:
          $ref: "#/components/schemas/ThingIndexingConfiguration"
        thingGroupIndexingConfiguration:
          $ref: "#/components/schemas/ThingGroupIndexingConfiguration"
    UpdateJobRequest:
      type: object
      properties:
        description:
          $ref: "#/components/schemas/JobDescription"
        presignedUrlConfig:
          $ref: "#/components/schemas/PresignedUrlConfig"
        jobExecutionsRolloutConfig:
          $ref: "#/components/schemas/JobExecutionsRolloutConfig"
        abortConfig:
          $ref: "#/components/schemas/AbortConfig"
        timeoutConfig:
          $ref: "#/components/schemas/TimeoutConfig"
    UpdateMitigationActionRequest:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        actionParams:
          $ref: "#/components/schemas/MitigationActionParams"
    UpdateRoleAliasRequest:
      type: object
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        credentialDurationSeconds:
          $ref: "#/components/schemas/CredentialDurationSeconds"
    UpdateScheduledAuditRequest:
      type: object
      properties:
        frequency:
          $ref: "#/components/schemas/AuditFrequency"
        dayOfMonth:
          $ref: "#/components/schemas/DayOfMonth"
        dayOfWeek:
          $ref: "#/components/schemas/DayOfWeek"
        targetCheckNames:
          $ref: "#/components/schemas/TargetAuditCheckNames"
    UpdateSecurityProfileRequest:
      type: object
      properties:
        securityProfileDescription:
          $ref: "#/components/schemas/SecurityProfileDescription"
        behaviors:
          $ref: "#/components/schemas/Behaviors"
        alertTargets:
          $ref: "#/components/schemas/AlertTargets"
        additionalMetricsToRetain:
          $ref: "#/components/schemas/AdditionalMetricsToRetainList"
        deleteBehaviors:
          $ref: "#/components/schemas/DeleteBehaviors"
        deleteAlertTargets:
          $ref: "#/components/schemas/DeleteAlertTargets"
        deleteAdditionalMetricsToRetain:
          $ref: "#/components/schemas/DeleteAdditionalMetricsToRetain"
    UpdateStreamRequest:
      type: object
      properties:
        description:
          $ref: "#/components/schemas/StreamDescription"
        files:
          $ref: "#/components/schemas/StreamFiles"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
    UpdateThingGroupRequest:
      type: object
      required:
        - thingGroupProperties
      properties:
        thingGroupProperties:
          $ref: "#/components/schemas/ThingGroupProperties"
        expectedVersion:
          $ref: "#/components/schemas/OptionalVersion"
    UpdateThingGroupsForThingRequest:
      type: object
      properties:
        thingName:
          $ref: "#/components/schemas/ThingName"
        thingGroupsToAdd:
          $ref: "#/components/schemas/ThingGroupList"
        thingGroupsToRemove:
          $ref: "#/components/schemas/ThingGroupList"
        overrideDynamicGroups:
          $ref: "#/components/schemas/OverrideDynamicGroups"
    UpdateThingRequest:
      type: object
      properties:
        thingTypeName:
          $ref: "#/components/schemas/ThingTypeName"
        attributePayload:
          $ref: "#/components/schemas/AttributePayload"
        expectedVersion:
          $ref: "#/components/schemas/OptionalVersion"
        removeThingType:
          $ref: "#/components/schemas/RemoveThingType"
      description: The input for the UpdateThing operation.
    Valid:
      type: boolean
    ValidateSecurityProfileBehaviorsRequest:
      type: object
      required:
        - behaviors
      properties:
        behaviors:
          $ref: "#/components/schemas/Behaviors"
    ValidationErrors:
      type: array
      items:
        $ref: "#/components/schemas/ValidationError"
    ValidationError:
      type: object
      properties:
        errorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Information about an error found in a behavior specification.
    ViolationEventType:
      type: string
      enum:
        - in-alarm
        - alarm-cleared
        - alarm-invalidated
    ViolationEvent:
      type: object
      properties:
        violationId:
          $ref: "#/components/schemas/ViolationId"
        thingName:
          $ref: "#/components/schemas/DeviceDefenderThingName"
        securityProfileName:
          $ref: "#/components/schemas/SecurityProfileName"
        behavior:
          $ref: "#/components/schemas/Behavior"
        metricValue:
          $ref: "#/components/schemas/MetricValue"
        violationEventType:
          $ref: "#/components/schemas/ViolationEventType"
        violationEventTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about a Device Defender security profile behavior violation.
