openapi: 3.0.0
info:
  version: 2018-08-01
  x-release: v4
  title: AWS RDS DataService
  description: <p><fullname>Amazon RDS Data Service</fullname> <p>Amazon RDS provides an
    HTTP endpoint to run SQL statements on an Amazon Aurora Serverless DB
    cluster. To run these statements, you work with the Data Service API.</p>
    <p>For more information about the Data Service API, see <a
    href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
    the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User
    Guide</i>.</p> <note> <p>If you have questions or comments related to the
    Data API, send email to <a
    href="mailto:Rds-data-api-feedback@amazon.com">Rds-data-api-feedback@amazon.com</a>.</p>
    </note></p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: rds-data
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/rds-data-2018-08-01.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/rds-data/
security:
  - hmac: []
paths:
  /BatchExecute:
    post:
      operationId: BatchExecuteStatement
      description: <p>Runs a batch SQL statement over an array of data.</p> <p>You can run
        bulk update and insert operations for multiple records using a DML
        statement with different parameter sets. Bulk operations can provide a
        significant performance improvement over individual insert and update
        operations.</p> <important> <p>If a call isn't part of a transaction
        because it doesn't include the <code>transactionID</code> parameter,
        changes that result from the call are committed automatically.</p>
        </important>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchExecuteStatementResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: StatementTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementTimeoutException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "484":
          description: ServiceUnavailableError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - secretArn
                - sql
              properties:
                database:
                  description: The name of the database.
                  type: string
                  minLength: 0
                  maxLength: 64
                parameterSets:
                  description: The parameter set for the batch operation.
                  type: array
                  items:
                    $ref: "#/components/schemas/SqlParametersList"
                resourceArn:
                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                schema:
                  description: The name of the database schema.
                  type: string
                  minLength: 0
                  maxLength: 64
                secretArn:
                  description: The name or ARN of the secret that enables access to the DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                sql:
                  description: The SQL statement to run.
                  type: string
                  minLength: 0
                  maxLength: 65536
                transactionId:
                  description: <p>The identifier of a transaction that was started by using
                    the <code>BeginTransaction</code> operation. Specify the
                    transaction ID of the transaction that you want to include
                    the SQL statement in.</p> <p>If the SQL statement is not
                    part of a transaction, don't set this parameter.</p>
                  type: string
                  minLength: 0
                  maxLength: 192
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /BeginTransaction:
    post:
      operationId: BeginTransaction
      description: <p>Starts a SQL transaction.</p> <pre><code> &lt;important&gt;
        &lt;p&gt;A transaction can run for a maximum of 24 hours. A transaction
        is terminated and rolled back automatically after 24 hours.&lt;/p&gt;
        &lt;p&gt;A transaction times out if no calls use its transaction ID in
        three minutes. If a transaction times out before it's committed, it's
        rolled back automatically.&lt;/p&gt; &lt;p&gt;DDL statements inside a
        transaction cause an implicit commit. We recommend that you run each DDL
        statement in a separate &lt;code&gt;ExecuteStatement&lt;/code&gt; call
        with &lt;code&gt;continueAfterTimeout&lt;/code&gt; enabled.&lt;/p&gt;
        &lt;/important&gt; </code></pre>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeginTransactionResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: StatementTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementTimeoutException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "484":
          description: ServiceUnavailableError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - secretArn
              properties:
                database:
                  description: The name of the database.
                  type: string
                  minLength: 0
                  maxLength: 64
                resourceArn:
                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                schema:
                  description: The name of the database schema.
                  type: string
                  minLength: 0
                  maxLength: 64
                secretArn:
                  description: The name or ARN of the secret that enables access to the DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CommitTransaction:
    post:
      operationId: CommitTransaction
      description: Ends a SQL transaction started with the <code>BeginTransaction</code>
        operation and commits the changes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommitTransactionResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: ServiceUnavailableError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
        "484":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - secretArn
                - transactionId
              properties:
                resourceArn:
                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                secretArn:
                  description: The name or ARN of the secret that enables access to the DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                transactionId:
                  description: The identifier of the transaction to end and commit.
                  type: string
                  minLength: 0
                  maxLength: 192
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ExecuteSql:
    post:
      deprecated: true
      operationId: ExecuteSql
      description: <p>Runs one or more SQL statements.</p> <important> <p>This operation is
        deprecated. Use the <code>BatchExecuteStatement</code> or
        <code>ExecuteStatement</code> operation.</p> </important>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteSqlResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: ServiceUnavailableError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - awsSecretStoreArn
                - dbClusterOrInstanceArn
                - sqlStatements
              properties:
                awsSecretStoreArn:
                  description: The Amazon Resource Name (ARN) of the secret that enables
                    access to the DB cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                database:
                  description: The name of the database.
                  type: string
                  minLength: 0
                  maxLength: 64
                dbClusterOrInstanceArn:
                  description: The ARN of the Aurora Serverless DB cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                schema:
                  description: The name of the database schema.
                  type: string
                  minLength: 0
                  maxLength: 64
                sqlStatements:
                  description: <p>One or more SQL statements to run on the DB cluster.</p>
                    <p>You can separate SQL statements from each other with a
                    semicolon (;). Any valid SQL statement is permitted,
                    including data definition, data manipulation, and commit
                    statements. </p>
                  type: string
                  minLength: 0
                  maxLength: 65536
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /Execute:
    post:
      operationId: ExecuteStatement
      description: <p>Runs a SQL statement against a database.</p> <important> <p>If a call
        isn't part of a transaction because it doesn't include the
        <code>transactionID</code> parameter, changes that result from the call
        are committed automatically.</p> </important> <p>The response size limit
        is 1 MB or 1,000 records. If the call returns more than 1 MB of response
        data or over 1,000 records, the call is terminated.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteStatementResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: StatementTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementTimeoutException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "484":
          description: ServiceUnavailableError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - secretArn
                - sql
              properties:
                continueAfterTimeout:
                  description: <p>A value that indicates whether to continue running the
                    statement after the call times out. By default, the
                    statement stops running when the call times out.</p>
                    <important> <p>For DDL statements, we recommend continuing
                    to run the statement after the call times out. When a DDL
                    statement terminates before it is finished running, it can
                    result in errors and possibly corrupted data structures.</p>
                    </important>
                  type: boolean
                database:
                  description: The name of the database.
                  type: string
                  minLength: 0
                  maxLength: 64
                includeResultMetadata:
                  description: A value that indicates whether to include metadata in the
                    results.
                  type: boolean
                parameters:
                  description: The parameters for the SQL statement.
                  type: array
                  items:
                    $ref: "#/components/schemas/SqlParameter"
                resourceArn:
                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                resultSetOptions:
                  description: Options that control how the result set is returned.
                  type: object
                  properties:
                    decimalReturnType:
                      $ref: "#/components/schemas/DecimalReturnType"
                schema:
                  description: The name of the database schema.
                  type: string
                  minLength: 0
                  maxLength: 64
                secretArn:
                  description: The name or ARN of the secret that enables access to the DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                sql:
                  description: The SQL statement to run.
                  type: string
                  minLength: 0
                  maxLength: 65536
                transactionId:
                  description: <p>The identifier of a transaction that was started by using
                    the <code>BeginTransaction</code> operation. Specify the
                    transaction ID of the transaction that you want to include
                    the SQL statement in.</p> <p>If the SQL statement is not
                    part of a transaction, don't set this parameter.</p>
                  type: string
                  minLength: 0
                  maxLength: 192
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /RollbackTransaction:
    post:
      operationId: RollbackTransaction
      description: Performs a rollback of a transaction. Rolling back a transaction cancels
        its changes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollbackTransactionResponse"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: ServiceUnavailableError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableError"
        "484":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceArn
                - secretArn
                - transactionId
              properties:
                resourceArn:
                  description: The Amazon Resource Name (ARN) of the Aurora Serverless DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                secretArn:
                  description: The name or ARN of the secret that enables access to the DB
                    cluster.
                  type: string
                  minLength: 11
                  maxLength: 100
                transactionId:
                  description: The identifier of the transaction to roll back.
                  type: string
                  minLength: 0
                  maxLength: 192
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://rds-data.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS RDS DataService multi-region endpoint
  - url: https://rds-data.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS RDS DataService multi-region endpoint
  - url: http://rds-data.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS RDS DataService endpoint for China (Beijing) and China (Ningxia)
  - url: https://rds-data.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS RDS DataService endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchExecuteStatementResponse:
      type: object
      properties:
        updateResults:
          $ref: "#/components/schemas/UpdateResults"
      description: The response elements represent the output of a SQL statement over an
        array of data.
    SqlParametersList:
      type: array
      items:
        $ref: "#/components/schemas/SqlParameter"
    BadRequestException: {}
    StatementTimeoutException: {}
    InternalServerErrorException: {}
    ForbiddenException: {}
    ServiceUnavailableError: {}
    BeginTransactionResponse:
      type: object
      properties:
        transactionId:
          $ref: "#/components/schemas/Id"
      description: The response elements represent the output of a request to start a SQL
        transaction.
    CommitTransactionResponse:
      type: object
      properties:
        transactionStatus:
          $ref: "#/components/schemas/TransactionStatus"
      description: The response elements represent the output of a commit transaction
        request.
    NotFoundException: {}
    ExecuteSqlResponse:
      type: object
      properties:
        sqlStatementResults:
          $ref: "#/components/schemas/SqlStatementResults"
      description: The response elements represent the output of a request to run one or
        more SQL statements.
    ExecuteStatementResponse:
      type: object
      properties:
        columnMetadata:
          $ref: "#/components/schemas/Metadata"
        generatedFields:
          $ref: "#/components/schemas/FieldList"
        numberOfRecordsUpdated:
          $ref: "#/components/schemas/RecordsUpdated"
        records:
          $ref: "#/components/schemas/SqlRecords"
      description: The response elements represent the output of a request to run a SQL
        statement against a database.
    SqlParameter:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ParameterName"
        value:
          $ref: "#/components/schemas/Field"
      description: A parameter used in a SQL statement.
    DecimalReturnType:
      type: string
      enum:
        - DOUBLE_OR_LONG
        - STRING
    RollbackTransactionResponse:
      type: object
      properties:
        transactionStatus:
          $ref: "#/components/schemas/TransactionStatus"
      description: The response elements represent the output of a request to perform a
        rollback of a transaction.
    Arn:
      type: string
      minLength: 11
      maxLength: 100
    ArrayValue:
      type: object
      properties:
        arrayValues:
          $ref: "#/components/schemas/ArrayOfArray"
        booleanValues:
          $ref: "#/components/schemas/BooleanArray"
        doubleValues:
          $ref: "#/components/schemas/DoubleArray"
        longValues:
          $ref: "#/components/schemas/LongArray"
        stringValues:
          $ref: "#/components/schemas/StringArray"
      description: Contains an array.
    ArrayOfArray:
      type: array
      description: <p>An array of arrays.</p> <note> <p>Some array entries can be null.</p>
        </note>
      items:
        $ref: "#/components/schemas/ArrayValue"
    BooleanArray:
      type: array
      description: <p>An array of Boolean values.</p> <note> <p>Some array entries can be
        null.</p> </note>
      items:
        $ref: "#/components/schemas/BoxedBoolean"
    DoubleArray:
      type: array
      description: <p>An array of floating point numbers.</p> <note> <p>Some array entries
        can be null.</p> </note>
      items:
        $ref: "#/components/schemas/BoxedDouble"
    LongArray:
      type: array
      description: <p>An array of integers.</p> <note> <p>Some array entries can be
        null.</p> </note>
      items:
        $ref: "#/components/schemas/BoxedLong"
    StringArray:
      type: array
      description: <p>An array of strings.</p> <note> <p>Some array entries can be
        null.</p> </note>
      items:
        $ref: "#/components/schemas/String"
    Value:
      type: object
      properties:
        arrayValues:
          $ref: "#/components/schemas/ArrayValueList"
        bigIntValue:
          $ref: "#/components/schemas/BoxedLong"
        bitValue:
          $ref: "#/components/schemas/BoxedBoolean"
        blobValue:
          $ref: "#/components/schemas/Blob"
        doubleValue:
          $ref: "#/components/schemas/BoxedDouble"
        intValue:
          $ref: "#/components/schemas/BoxedInteger"
        isNull:
          $ref: "#/components/schemas/BoxedBoolean"
        realValue:
          $ref: "#/components/schemas/BoxedFloat"
        stringValue:
          $ref: "#/components/schemas/String"
        structValue:
          $ref: "#/components/schemas/StructValue"
      description: <p>Contains the value of a column.</p> <pre><code> &lt;important&gt;
        &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt;
        </code></pre>
    ArrayValueList:
      type: array
      items:
        $ref: "#/components/schemas/Value"
    DbName:
      type: string
      minLength: 0
      maxLength: 64
    SqlParameterSets:
      type: array
      items:
        $ref: "#/components/schemas/SqlParametersList"
    SqlStatement:
      type: string
      minLength: 0
      maxLength: 65536
    Id:
      type: string
      minLength: 0
      maxLength: 192
    BatchExecuteStatementRequest:
      type: object
      required:
        - resourceArn
        - secretArn
        - sql
      properties:
        database:
          $ref: "#/components/schemas/DbName"
        parameterSets:
          $ref: "#/components/schemas/SqlParameterSets"
        resourceArn:
          $ref: "#/components/schemas/Arn"
        schema:
          $ref: "#/components/schemas/DbName"
        secretArn:
          $ref: "#/components/schemas/Arn"
        sql:
          $ref: "#/components/schemas/SqlStatement"
        transactionId:
          $ref: "#/components/schemas/Id"
      description: The request parameters represent the input of a SQL statement over an
        array of data.
    UpdateResults:
      type: array
      items:
        $ref: "#/components/schemas/UpdateResult"
    BeginTransactionRequest:
      type: object
      required:
        - resourceArn
        - secretArn
      properties:
        database:
          $ref: "#/components/schemas/DbName"
        resourceArn:
          $ref: "#/components/schemas/Arn"
        schema:
          $ref: "#/components/schemas/DbName"
        secretArn:
          $ref: "#/components/schemas/Arn"
      description: The request parameters represent the input of a request to start a SQL
        transaction.
    Blob:
      type: string
    Boolean:
      type: boolean
    BoxedBoolean:
      type: boolean
    BoxedDouble:
      type: number
      format: double
    BoxedFloat:
      type: number
      format: float
    BoxedInteger:
      type: integer
    BoxedLong:
      type: integer
    Integer:
      type: integer
    String:
      type: string
    ColumnMetadata:
      type: object
      properties:
        arrayBaseColumnType:
          $ref: "#/components/schemas/Integer"
        isAutoIncrement:
          $ref: "#/components/schemas/Boolean"
        isCaseSensitive:
          $ref: "#/components/schemas/Boolean"
        isCurrency:
          $ref: "#/components/schemas/Boolean"
        isSigned:
          $ref: "#/components/schemas/Boolean"
        label:
          $ref: "#/components/schemas/String"
        name:
          $ref: "#/components/schemas/String"
        nullable:
          $ref: "#/components/schemas/Integer"
        precision:
          $ref: "#/components/schemas/Integer"
        scale:
          $ref: "#/components/schemas/Integer"
        schemaName:
          $ref: "#/components/schemas/String"
        tableName:
          $ref: "#/components/schemas/String"
        type:
          $ref: "#/components/schemas/Integer"
        typeName:
          $ref: "#/components/schemas/String"
      description: Contains the metadata for a column.
    CommitTransactionRequest:
      type: object
      required:
        - resourceArn
        - secretArn
        - transactionId
      properties:
        resourceArn:
          $ref: "#/components/schemas/Arn"
        secretArn:
          $ref: "#/components/schemas/Arn"
        transactionId:
          $ref: "#/components/schemas/Id"
      description: The request parameters represent the input of a commit transaction
        request.
    TransactionStatus:
      type: string
      minLength: 0
      maxLength: 128
    ExecuteSqlRequest:
      type: object
      required:
        - awsSecretStoreArn
        - dbClusterOrInstanceArn
        - sqlStatements
      properties:
        awsSecretStoreArn:
          $ref: "#/components/schemas/Arn"
        database:
          $ref: "#/components/schemas/DbName"
        dbClusterOrInstanceArn:
          $ref: "#/components/schemas/Arn"
        schema:
          $ref: "#/components/schemas/DbName"
        sqlStatements:
          $ref: "#/components/schemas/SqlStatement"
      description: The request parameters represent the input of a request to run one or
        more SQL statements.
    SqlStatementResults:
      type: array
      items:
        $ref: "#/components/schemas/SqlStatementResult"
    ResultSetOptions:
      type: object
      properties:
        decimalReturnType:
          $ref: "#/components/schemas/DecimalReturnType"
      description: Options that control how the result set is returned.
    ExecuteStatementRequest:
      type: object
      required:
        - resourceArn
        - secretArn
        - sql
      properties:
        continueAfterTimeout:
          $ref: "#/components/schemas/Boolean"
        database:
          $ref: "#/components/schemas/DbName"
        includeResultMetadata:
          $ref: "#/components/schemas/Boolean"
        parameters:
          $ref: "#/components/schemas/SqlParametersList"
        resourceArn:
          $ref: "#/components/schemas/Arn"
        resultSetOptions:
          $ref: "#/components/schemas/ResultSetOptions"
        schema:
          $ref: "#/components/schemas/DbName"
        secretArn:
          $ref: "#/components/schemas/Arn"
        sql:
          $ref: "#/components/schemas/SqlStatement"
        transactionId:
          $ref: "#/components/schemas/Id"
      description: The request parameters represent the input of a request to run a SQL
        statement against a database.
    Metadata:
      type: array
      items:
        $ref: "#/components/schemas/ColumnMetadata"
    FieldList:
      type: array
      items:
        $ref: "#/components/schemas/Field"
    RecordsUpdated:
      type: integer
    SqlRecords:
      type: array
      items:
        $ref: "#/components/schemas/FieldList"
    Field:
      type: object
      properties:
        arrayValue:
          $ref: "#/components/schemas/ArrayValue"
        blobValue:
          $ref: "#/components/schemas/Blob"
        booleanValue:
          $ref: "#/components/schemas/BoxedBoolean"
        doubleValue:
          $ref: "#/components/schemas/BoxedDouble"
        isNull:
          $ref: "#/components/schemas/BoxedBoolean"
        longValue:
          $ref: "#/components/schemas/BoxedLong"
        stringValue:
          $ref: "#/components/schemas/String"
      description: Contains a value.
    Long:
      type: integer
    ParameterName:
      type: string
    Row:
      type: array
      items:
        $ref: "#/components/schemas/Value"
    Record:
      type: object
      properties:
        values:
          $ref: "#/components/schemas/Row"
      description: A record returned by a call.
    Records:
      type: array
      items:
        $ref: "#/components/schemas/Record"
    ResultSetMetadata:
      type: object
      properties:
        columnCount:
          $ref: "#/components/schemas/Long"
        columnMetadata:
          $ref: "#/components/schemas/Metadata"
      description: The metadata of the result set returned by a SQL statement.
    ResultFrame:
      type: object
      properties:
        records:
          $ref: "#/components/schemas/Records"
        resultSetMetadata:
          $ref: "#/components/schemas/ResultSetMetadata"
      description: The result set returned by a SQL statement.
    RollbackTransactionRequest:
      type: object
      required:
        - resourceArn
        - secretArn
        - transactionId
      properties:
        resourceArn:
          $ref: "#/components/schemas/Arn"
        secretArn:
          $ref: "#/components/schemas/Arn"
        transactionId:
          $ref: "#/components/schemas/Id"
      description: The request parameters represent the input of a request to perform a
        rollback of a transaction.
    SqlStatementResult:
      type: object
      properties:
        numberOfRecordsUpdated:
          $ref: "#/components/schemas/RecordsUpdated"
        resultFrame:
          $ref: "#/components/schemas/ResultFrame"
      description: <p>The result of a SQL statement.</p> <pre><code> &lt;important&gt;
        &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt;
        </code></pre>
    StructValue:
      type: object
      properties:
        attributes:
          $ref: "#/components/schemas/ArrayValueList"
      description: A structure value returned by a call.
    UpdateResult:
      type: object
      properties:
        generatedFields:
          $ref: "#/components/schemas/FieldList"
      description: The response elements represent the results of an update.
