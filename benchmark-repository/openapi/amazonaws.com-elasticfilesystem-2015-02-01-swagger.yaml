openapi: 3.0.0
info:
  version: 2015-02-01
  x-release: v4
  title: Amazon Elastic File System
  description: <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File
    System (Amazon EFS) provides simple, scalable file storage for use with
    Amazon EC2 instances in the AWS Cloud. With Amazon EFS, storage capacity is
    elastic, growing and shrinking automatically as you add and remove files, so
    your applications have the storage they need, when they need it. For more
    information, see the <a
    href="https://docs.aws.amazon.com/efs/latest/ug/api-reference.html">User
    Guide</a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: elasticfilesystem
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/elasticfilesystem-2015-02-01.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/elasticfilesystem/
security:
  - hmac: []
paths:
  /2015-02-01/file-systems:
    post:
      operationId: CreateFileSystem
      description: "<p>Creates a new, empty file system. The operation requires a creation
        token in the request that Amazon EFS uses to ensure idempotent creation
        (calling the operation with same creation token has no effect). If a
        file system does not currently exist that is owned by the caller's AWS
        account with the specified creation token, this operation does the
        following:</p> <ul> <li> <p>Creates a new, empty file system. The file
        system will have an Amazon EFS assigned ID, and an initial lifecycle
        state <code>creating</code>.</p> </li> <li> <p>Returns with the
        description of the created file system.</p> </li> </ul> <p>Otherwise,
        this operation returns a <code>FileSystemAlreadyExists</code> error with
        the ID of the existing file system.</p> <note> <p>For basic use cases,
        you can use a randomly generated UUID for the creation token.</p>
        </note> <p> The idempotent operation allows you to retry a
        <code>CreateFileSystem</code> call without risk of creating an extra
        file system. This can happen when an initial call fails in a way that
        leaves it uncertain whether or not a file system was actually created.
        An example might be that a transport level timeout occurred or your
        connection was reset. As long as you use the same creation token, if the
        initial call had succeeded in creating a file system, the client can
        learn of its existence from the <code>FileSystemAlreadyExists</code>
        error.</p> <note> <p>The <code>CreateFileSystem</code> call returns
        while the file system's lifecycle state is still <code>creating</code>.
        You can check the file system creation status by calling the
        <a>DescribeFileSystems</a> operation, which among other things returns
        the file system state.</p> </note> <p>This operation also takes an
        optional <code>PerformanceMode</code> parameter that you choose for your
        file system. We recommend <code>generalPurpose</code> performance mode
        for most file systems. File systems using the <code>maxIO</code>
        performance mode can scale to higher levels of aggregate throughput and
        operations per second with a tradeoff of slightly higher latencies for
        most file operations. The performance mode can't be changed after the
        file system has been created. For more information, see <a
        href=\"https://docs.aws.amazon.com/efs/latest/ug/performance.html#perfo\
        rmancemodes.html\">Amazon EFS: Performance Modes</a>.</p> <p>After the
        file system is fully created, Amazon EFS sets its lifecycle state to
        <code>available</code>, at which point you can create one or more mount
        targets for the file system in your VPC. For more information, see
        <a>CreateMountTarget</a>. You mount your Amazon EFS file system on an
        EC2 instances in your VPC by using the mount target. For more
        information, see <a
        href=\"https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html\">Am\
        azon EFS: How it Works</a>. </p> <p> This operation requires permissions
        for the <code>elasticfilesystem:CreateFileSystem</code> action. </p>"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemDescription"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemAlreadyExists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemAlreadyExists"
        "483":
          description: FileSystemLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemLimitExceeded"
        "484":
          description: InsufficientThroughputCapacity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsufficientThroughputCapacity"
        "485":
          description: ThroughputLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputLimitExceeded"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - CreationToken
              properties:
                CreationToken:
                  description: A string of up to 64 ASCII characters. Amazon EFS uses this
                    to ensure idempotent creation.
                  type: string
                  minLength: 1
                  maxLength: 64
                PerformanceMode:
                  description: The performance mode of the file system. We recommend
                    <code>generalPurpose</code> performance mode for most file
                    systems. File systems using the <code>maxIO</code>
                    performance mode can scale to higher levels of aggregate
                    throughput and operations per second with a tradeoff of
                    slightly higher latencies for most file operations. The
                    performance mode can't be changed after the file system has
                    been created.
                  type: string
                  enum:
                    - generalPurpose
                    - maxIO
                Encrypted:
                  description: "A Boolean value that, if true, creates an encrypted file
                    system. When creating an encrypted file system, you have the
                    option of specifying <a>CreateFileSystemRequest$KmsKeyId</a>
                    for an existing AWS Key Management Service (AWS KMS)
                    customer master key (CMK). If you don't specify a CMK, then
                    the default CMK for Amazon EFS,
                    <code>/aws/elasticfilesystem</code>, is used to protect the
                    encrypted file system. "
                  type: boolean
                KmsKeyId:
                  description: <p>The ID of the AWS KMS CMK to be used to protect the
                    encrypted file system. This parameter is only required if
                    you want to use a nondefault CMK. If this parameter is not
                    specified, the default CMK for Amazon EFS is used. This ID
                    can be in one of the following formats:</p> <ul> <li> <p>Key
                    ID - A unique identifier of the key, for example
                    <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>
                    <li> <p>ARN - An Amazon Resource Name (ARN) for the key, for
                    example
                    <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
                    </li> <li> <p>Key alias - A previously created display name
                    for a key, for example <code>alias/projectKey1</code>.</p>
                    </li> <li> <p>Key alias ARN - An ARN for a key alias, for
                    example
                    <code>arn:aws:kms:us-west-2:444455556666:alias/projectKey1</code>.</p>
                    </li> </ul> <p>If <code>KmsKeyId</code> is specified, the
                    <a>CreateFileSystemRequest$Encrypted</a> parameter must be
                    set to true.</p>
                  type: string
                  minLength: 1
                  maxLength: 2048
                ThroughputMode:
                  description: "The throughput mode for the file system to be created.
                    There are two throughput modes to choose from for your file
                    system: <code>bursting</code> and <code>provisioned</code>.
                    If you set <code>ThroughputMode</code> to
                    <code>provisioned</code>, you must also set a value for
                    <code>ProvisionedThroughPutInMibps</code>. You can decrease
                    your file system's throughput in Provisioned Throughput mode
                    or change between the throughput modes as long as it’s been
                    more than 24 hours since the last decrease or throughput
                    mode change. For more, see <a
                    href=\"https://docs.aws.amazon.com/efs/latest/ug/performanc\
                    e.html#provisioned-throughput\">Specifying Throughput with
                    Provisioned Mode</a> in the <i>Amazon EFS User Guide.</i> "
                  type: string
                  enum:
                    - bursting
                    - provisioned
                ProvisionedThroughputInMibps:
                  description: "The throughput, measured in MiB/s, that you want to
                    provision for a file system that you're creating. Valid
                    values are 1-1024. Required if <code>ThroughputMode</code>
                    is set to <code>provisioned</code>. The upper limit for
                    throughput is 1024 MiB/s. You can get this limit increased
                    by contacting AWS Support. For more information, see <a
                    href=\"https://docs.aws.amazon.com/efs/latest/ug/limits.htm\
                    l#soft-limits\">Amazon EFS Limits That You Can Increase</a>
                    in the <i>Amazon EFS User Guide.</i> "
                  type: number
                  format: double
                  minimum: 1
                Tags:
                  description: A value that specifies to create one or more tags associated
                    with the file system. Each tag is a user-defined key-value
                    pair. Name your file system on creation by including a
                    <code>"Key":"Name","Value":"{value}"</code> key-value pair.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeFileSystems
      description: <p>Returns the description of a specific Amazon EFS file system if
        either the file system <code>CreationToken</code> or the
        <code>FileSystemId</code> is provided. Otherwise, it returns
        descriptions of all file systems owned by the caller's AWS account in
        the AWS Region of the endpoint that you're calling.</p> <p>When
        retrieving all file system descriptions, you can optionally specify the
        <code>MaxItems</code> parameter to limit the number of descriptions in a
        response. Currently, this number is automatically set to 10. If more
        file system descriptions remain, Amazon EFS returns a
        <code>NextMarker</code>, an opaque token, in the response. In this case,
        you should send a subsequent request with the <code>Marker</code>
        request parameter set to the value of <code>NextMarker</code>. </p>
        <p>To retrieve a list of your file system descriptions, this operation
        is used in an iterative process, where <code>DescribeFileSystems</code>
        is called first without the <code>Marker</code> and then the operation
        continues to call it with the <code>Marker</code> parameter set to the
        value of the <code>NextMarker</code> from the previous response until
        the response has no <code>NextMarker</code>. </p> <p> The order of file
        systems returned in the response of one <code>DescribeFileSystems</code>
        call and the order of file systems returned across the responses of a
        multi-call iteration is unspecified. </p> <p> This operation requires
        permissions for the <code>elasticfilesystem:DescribeFileSystems</code>
        action. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeFileSystemsResponse"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
      parameters:
        - name: MaxItems
          in: query
          required: false
          description: "(Optional) Specifies the maximum number of file systems to return
            in the response (integer). Currently, this number is automatically
            set to 10, and other values are ignored. The response is paginated
            at 10 per page if you have more than 10 file systems. "
          schema:
            type: integer
            minimum: 1
        - name: Marker
          in: query
          required: false
          description: "(Optional) Opaque pagination token returned from a previous
            <code>DescribeFileSystems</code> operation (String). If present,
            specifies to continue the list from where the returning call had
            left off. "
          schema:
            type: string
        - name: CreationToken
          in: query
          required: false
          description: (Optional) Restricts the list to the file system with this creation
            token (String). You specify a creation token when you create an
            Amazon EFS file system.
          schema:
            type: string
            minLength: 1
            maxLength: 64
        - name: FileSystemId
          in: query
          required: false
          description: (Optional) ID of the file system whose description you want to
            retrieve (String).
          schema:
            type: string
  /2015-02-01/mount-targets:
    post:
      operationId: CreateMountTarget
      description: "<p>Creates a mount target for a file system. You can then mount the
        file system on EC2 instances by using the mount target.</p> <p>You can
        create one mount target in each Availability Zone in your VPC. All EC2
        instances in a VPC within a given Availability Zone share a single mount
        target for a given file system. If you have multiple subnets in an
        Availability Zone, you create a mount target in one of the subnets. EC2
        instances do not need to be in the same subnet as the mount target in
        order to access their file system. For more information, see <a
        href=\"https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html\">Am\
        azon EFS: How it Works</a>. </p> <p>In the request, you also specify a
        file system ID for which you are creating the mount target and the file
        system's lifecycle state must be <code>available</code>. For more
        information, see <a>DescribeFileSystems</a>.</p> <p>In the request, you
        also provide a subnet ID, which determines the following:</p> <ul> <li>
        <p>VPC in which Amazon EFS creates the mount target</p> </li> <li>
        <p>Availability Zone in which Amazon EFS creates the mount target</p>
        </li> <li> <p>IP address range from which Amazon EFS selects the IP
        address of the mount target (if you don't specify an IP address in the
        request)</p> </li> </ul> <p>After creating the mount target, Amazon EFS
        returns a response that includes, a <code>MountTargetId</code> and an
        <code>IpAddress</code>. You use this IP address when mounting the file
        system in an EC2 instance. You can also use the mount target's DNS name
        when mounting the file system. The EC2 instance on which you mount the
        file system by using the mount target can resolve the mount target's DNS
        name to its IP address. For more information, see <a
        href=\"https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html#how-\
        it-works-implementation\">How it Works: Implementation Overview</a>.
        </p> <p>Note that you can create mount targets for a file system in only
        one VPC, and there can be only one mount target per Availability Zone.
        That is, if the file system already has one or more mount targets
        created for it, the subnet specified in the request to add another mount
        target must meet the following requirements:</p> <ul> <li> <p>Must
        belong to the same VPC as the subnets of the existing mount targets</p>
        </li> <li> <p>Must not be in the same Availability Zone as any of the
        subnets of the existing mount targets</p> </li> </ul> <p>If the request
        satisfies the requirements, Amazon EFS does the following:</p> <ul> <li>
        <p>Creates a new mount target in the specified subnet.</p> </li> <li>
        <p>Also creates a new network interface in the subnet as follows:</p>
        <ul> <li> <p>If the request provides an <code>IpAddress</code>, Amazon
        EFS assigns that IP address to the network interface. Otherwise, Amazon
        EFS assigns a free address in the subnet (in the same way that the
        Amazon EC2 <code>CreateNetworkInterface</code> call does when a request
        does not specify a primary private IP address).</p> </li> <li> <p>If the
        request provides <code>SecurityGroups</code>, this network interface is
        associated with those security groups. Otherwise, it belongs to the
        default security group for the subnet's VPC.</p> </li> <li> <p>Assigns
        the description <code>Mount target <i>fsmt-id</i> for file system
        <i>fs-id</i> </code> where <code> <i>fsmt-id</i> </code> is the mount
        target ID, and <code> <i>fs-id</i> </code> is the
        <code>FileSystemId</code>.</p> </li> <li> <p>Sets the
        <code>requesterManaged</code> property of the network interface to
        <code>true</code>, and the <code>requesterId</code> value to
        <code>EFS</code>.</p> </li> </ul> <p>Each Amazon EFS mount target has
        one corresponding requester-managed EC2 network interface. After the
        network interface is created, Amazon EFS sets the
        <code>NetworkInterfaceId</code> field in the mount target's description
        to the network interface ID, and the <code>IpAddress</code> field to its
        address. If network interface creation fails, the entire
        <code>CreateMountTarget</code> operation fails.</p> </li> </ul> <note>
        <p>The <code>CreateMountTarget</code> call returns only after creating
        the network interface, but while the mount target state is still
        <code>creating</code>, you can check the mount target creation status by
        calling the <a>DescribeMountTargets</a> operation, which among other
        things returns the mount target state.</p> </note> <p>We recommend that
        you create a mount target in each of the Availability Zones. There are
        cost considerations for using a file system in an Availability Zone
        through a mount target created in another Availability Zone. For more
        information, see <a href=\"http://aws.amazon.com/efs/\">Amazon EFS</a>.
        In addition, by always using a mount target local to the instance's
        Availability Zone, you eliminate a partial failure scenario. If the
        Availability Zone in which your mount target is created goes down, then
        you can't access your file system through that mount target. </p>
        <p>This operation requires permissions for the following action on the
        file system:</p> <ul> <li> <p>
        <code>elasticfilesystem:CreateMountTarget</code> </p> </li> </ul>
        <p>This operation also requires permissions for the following Amazon EC2
        actions:</p> <ul> <li> <p> <code>ec2:DescribeSubnets</code> </p> </li>
        <li> <p> <code>ec2:DescribeNetworkInterfaces</code> </p> </li> <li> <p>
        <code>ec2:CreateNetworkInterface</code> </p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MountTargetDescription"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
        "483":
          description: IncorrectFileSystemLifeCycleState
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncorrectFileSystemLifeCycleState"
        "484":
          description: MountTargetConflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MountTargetConflict"
        "485":
          description: SubnetNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubnetNotFound"
        "486":
          description: NoFreeAddressesInSubnet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoFreeAddressesInSubnet"
        "487":
          description: IpAddressInUse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IpAddressInUse"
        "488":
          description: NetworkInterfaceLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkInterfaceLimitExceeded"
        "489":
          description: SecurityGroupLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupLimitExceeded"
        "490":
          description: SecurityGroupNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupNotFound"
        "491":
          description: UnsupportedAvailabilityZone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedAvailabilityZone"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - FileSystemId
                - SubnetId
              properties:
                FileSystemId:
                  description: The ID of the file system for which to create the mount
                    target.
                  type: string
                SubnetId:
                  description: The ID of the subnet to add the mount target in.
                  type: string
                IpAddress:
                  description: Valid IPv4 address within the address range of the specified
                    subnet.
                  type: string
                SecurityGroups:
                  description: Up to five VPC security group IDs, of the form
                    <code>sg-xxxxxxxx</code>. These must be for the same VPC as
                    subnet specified.
                  type: array
                  items:
                    $ref: "#/components/schemas/SecurityGroup"
                  maxItems: 5
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeMountTargets
      description: <p>Returns the descriptions of all the current mount targets, or a
        specific mount target, for a file system. When requesting all of the
        current mount targets, the order of mount targets returned in the
        response is unspecified.</p> <p>This operation requires permissions for
        the <code>elasticfilesystem:DescribeMountTargets</code> action, on
        either the file system ID that you specify in <code>FileSystemId</code>,
        or on the file system of the mount target that you specify in
        <code>MountTargetId</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeMountTargetsResponse"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
        "483":
          description: MountTargetNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MountTargetNotFound"
      parameters:
        - name: MaxItems
          in: query
          required: false
          description: (Optional) Maximum number of mount targets to return in the
            response. Currently, this number is automatically set to 10, and
            other values are ignored. The response is paginated at 10 per page
            if you have more than 10 mount targets.
          schema:
            type: integer
            minimum: 1
        - name: Marker
          in: query
          required: false
          description: (Optional) Opaque pagination token returned from a previous
            <code>DescribeMountTargets</code> operation (String). If present, it
            specifies to continue the list from where the previous returning
            call left off.
          schema:
            type: string
        - name: FileSystemId
          in: query
          required: false
          description: (Optional) ID of the file system whose mount targets you want to
            list (String). It must be included in your request if
            <code>MountTargetId</code> is not included.
          schema:
            type: string
        - name: MountTargetId
          in: query
          required: false
          description: (Optional) ID of the mount target that you want to have described
            (String). It must be included in your request if
            <code>FileSystemId</code> is not included.
          schema:
            type: string
  "/2015-02-01/create-tags/{FileSystemId}":
    post:
      operationId: CreateTags
      description: <p>Creates or overwrites tags associated with a file system. Each tag is
        a key-value pair. If a tag key specified in the request already exists
        on the file system, this operation overwrites its value with the value
        provided in the request. If you add the <code>Name</code> tag to your
        file system, Amazon EFS returns it in the response to the
        <a>DescribeFileSystems</a> operation. </p> <p>This operation requires
        permission for the <code>elasticfilesystem:CreateTags</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
      parameters:
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system whose tags you want to modify (String).
            This operation modifies the tags only, not the file system.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - Tags
              properties:
                Tags:
                  description: "An array of <code>Tag</code> objects to add. Each
                    <code>Tag</code> object is a key-value pair. "
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-02-01/file-systems/{FileSystemId}":
    delete:
      operationId: DeleteFileSystem
      description: <p>Deletes a file system, permanently severing access to its contents.
        Upon return, the file system no longer exists and you can't access any
        contents of the deleted file system.</p> <p> You can't delete a file
        system that is in use. That is, if the file system has any mount
        targets, you must first delete them. For more information, see
        <a>DescribeMountTargets</a> and <a>DeleteMountTarget</a>. </p> <note>
        <p>The <code>DeleteFileSystem</code> call returns while the file system
        state is still <code>deleting</code>. You can check the file system
        deletion status by calling the <a>DescribeFileSystems</a> operation,
        which returns a list of file systems in your account. If you pass file
        system ID or creation token for the deleted file system, the
        <a>DescribeFileSystems</a> returns a <code>404 FileSystemNotFound</code>
        error.</p> </note> <p>This operation requires permissions for the
        <code>elasticfilesystem:DeleteFileSystem</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
        "483":
          description: FileSystemInUse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemInUse"
      parameters:
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system you want to delete.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: UpdateFileSystem
      description: Updates the throughput mode or the amount of provisioned throughput of
        an existing file system.
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemDescription"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
        "482":
          description: IncorrectFileSystemLifeCycleState
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncorrectFileSystemLifeCycleState"
        "483":
          description: InsufficientThroughputCapacity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsufficientThroughputCapacity"
        "484":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "485":
          description: ThroughputLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThroughputLimitExceeded"
        "486":
          description: TooManyRequests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequests"
      parameters:
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system that you want to update.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ThroughputMode:
                  description: (Optional) The throughput mode that you want your file
                    system to use. If you're not updating your throughput mode,
                    you don't need to provide this value in your request. If you
                    are changing the <code>ThroughputMode</code> to
                    <code>provisioned</code>, you must also set a value for
                    <code>ProvisionedThroughputInMibps</code>.
                  type: string
                  enum:
                    - bursting
                    - provisioned
                ProvisionedThroughputInMibps:
                  description: "(Optional) The amount of throughput, in MiB/s, that you
                    want to provision for your file system. Valid values are
                    1-1024. Required if <code>ThroughputMode</code> is changed
                    to <code>provisioned</code> on update. If you're not
                    updating the amount of provisioned throughput for your file
                    system, you don't need to provide this value in your
                    request. "
                  type: number
                  format: double
                  minimum: 1
        required: true
  "/2015-02-01/mount-targets/{MountTargetId}":
    delete:
      operationId: DeleteMountTarget
      description: <p>Deletes the specified mount target.</p> <p>This operation forcibly
        breaks any mounts of the file system by using the mount target that is
        being deleted, which might disrupt instances or applications using those
        mounts. To avoid applications getting cut off abruptly, you might
        consider unmounting any mounts of the mount target, if feasible. The
        operation also deletes the associated network interface. Uncommitted
        writes might be lost, but breaking a mount target using this operation
        does not corrupt the file system itself. The file system you created
        remains. You can mount an EC2 instance in your VPC by using another
        mount target.</p> <p>This operation requires permissions for the
        following action on the file system:</p> <ul> <li> <p>
        <code>elasticfilesystem:DeleteMountTarget</code> </p> </li> </ul> <note>
        <p>The <code>DeleteMountTarget</code> call returns while the mount
        target state is still <code>deleting</code>. You can check the mount
        target deletion by calling the <a>DescribeMountTargets</a> operation,
        which returns a list of mount target descriptions for the given file
        system. </p> </note> <p>The operation also requires permissions for the
        following Amazon EC2 action on the mount target's network interface:</p>
        <ul> <li> <p> <code>ec2:DeleteNetworkInterface</code> </p> </li> </ul>
      responses:
        "204":
          description: Success
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: DependencyTimeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DependencyTimeout"
        "483":
          description: MountTargetNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MountTargetNotFound"
      parameters:
        - name: MountTargetId
          in: path
          required: true
          description: The ID of the mount target to delete (String).
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-02-01/delete-tags/{FileSystemId}":
    post:
      operationId: DeleteTags
      description: <p>Deletes the specified tags from a file system. If the
        <code>DeleteTags</code> request includes a tag key that doesn't exist,
        Amazon EFS ignores it and doesn't cause an error. For more information
        about tags and related restrictions, see <a
        href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Tag
        Restrictions</a> in the <i>AWS Billing and Cost Management User
        Guide</i>.</p> <p>This operation requires permissions for the
        <code>elasticfilesystem:DeleteTags</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
      parameters:
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system whose tags you want to delete (String).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - TagKeys
              properties:
                TagKeys:
                  description: A list of tag keys to delete.
                  type: array
                  items:
                    $ref: "#/components/schemas/TagKey"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-02-01/file-systems/{FileSystemId}/lifecycle-configuration":
    get:
      operationId: DescribeLifecycleConfiguration
      description: <p>Returns the current <code>LifecycleConfiguration</code> object for
        the specified Amazon EFS file system. EFS lifecycle management uses the
        <code>LifecycleConfiguration</code> object to identify which files to
        move to the EFS Infrequent Access (IA) storage class. For a file system
        without a <code>LifecycleConfiguration</code> object, the call returns
        an empty array in the response.</p> <p>This operation requires
        permissions for the
        <code>elasticfilesystem:DescribeLifecycleConfiguration</code>
        operation.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecycleConfigurationDescription"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "481":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
      parameters:
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system whose <code>LifecycleConfiguration</code>
            object you want to retrieve (String).
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: PutLifecycleConfiguration
      description: "<p>Enables lifecycle management by creating a new
        <code>LifecycleConfiguration</code> object. A
        <code>LifecycleConfiguration</code> object defines when files in an
        Amazon EFS file system are automatically transitioned to the lower-cost
        EFS Infrequent Access (IA) storage class. A
        <code>LifecycleConfiguration</code> applies to all files in a file
        system.</p> <p>Each Amazon EFS file system supports one lifecycle
        configuration, which applies to all files in the file system. If a
        <code>LifecycleConfiguration</code> object already exists for the
        specified file system, a <code>PutLifecycleConfiguration</code> call
        modifies the existing configuration. A
        <code>PutLifecycleConfiguration</code> call with an empty
        <code>LifecyclePolicies</code> array in the request body deletes any
        existing <code>LifecycleConfiguration</code> and disables lifecycle
        management.</p> <p>In the request, specify the following: </p> <ul> <li>
        <p>The ID for the file system for which you are enabling, disabling, or
        modifying lifecycle management.</p> </li> <li> <p>A
        <code>LifecyclePolicies</code> array of <code>LifecyclePolicy</code>
        objects that define when files are moved to the IA storage class. The
        array can contain only one <code>LifecyclePolicy</code> item.</p> </li>
        </ul> <p>This operation requires permissions for the
        <code>elasticfilesystem:PutLifecycleConfiguration</code> operation.</p>
        <p>To apply a <code>LifecycleConfiguration</code> object to an encrypted
        file system, you need the same AWS Key Management Service (AWS KMS)
        permissions as when you created the encrypted file system. </p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecycleConfigurationDescription"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
        "483":
          description: IncorrectFileSystemLifeCycleState
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncorrectFileSystemLifeCycleState"
      parameters:
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system for which you are creating the
            <code>LifecycleConfiguration</code> object (String).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - LifecyclePolicies
              properties:
                LifecyclePolicies:
                  description: An array of <code>LifecyclePolicy</code> objects that define
                    the file system's <code>LifecycleConfiguration</code>
                    object. A <code>LifecycleConfiguration</code> object tells
                    lifecycle management when to transition files from the
                    Standard storage class to the Infrequent Access storage
                    class.
                  type: array
                  items:
                    $ref: "#/components/schemas/LifecyclePolicy"
        required: true
  "/2015-02-01/mount-targets/{MountTargetId}/security-groups":
    get:
      operationId: DescribeMountTargetSecurityGroups
      description: <p>Returns the security groups currently in effect for a mount target.
        This operation requires that the network interface of the mount target
        has been created and the lifecycle state of the mount target is not
        <code>deleted</code>.</p> <p>This operation requires permissions for the
        following actions:</p> <ul> <li> <p>
        <code>elasticfilesystem:DescribeMountTargetSecurityGroups</code> action
        on the mount target's file system. </p> </li> <li> <p>
        <code>ec2:DescribeNetworkInterfaceAttribute</code> action on the mount
        target's network interface. </p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeMountTargetSecurityGroupsRespon\
                  se"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: MountTargetNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MountTargetNotFound"
        "483":
          description: IncorrectMountTargetState
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncorrectMountTargetState"
      parameters:
        - name: MountTargetId
          in: path
          required: true
          description: The ID of the mount target whose security groups you want to
            retrieve.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: ModifyMountTargetSecurityGroups
      description: <p>Modifies the set of security groups in effect for a mount target.</p>
        <p>When you create a mount target, Amazon EFS also creates a new network
        interface. For more information, see <a>CreateMountTarget</a>. This
        operation replaces the security groups in effect for the network
        interface associated with a mount target, with the
        <code>SecurityGroups</code> provided in the request. This operation
        requires that the network interface of the mount target has been created
        and the lifecycle state of the mount target is not <code>deleted</code>.
        </p> <p>The operation requires permissions for the following
        actions:</p> <ul> <li> <p>
        <code>elasticfilesystem:ModifyMountTargetSecurityGroups</code> action on
        the mount target's file system. </p> </li> <li> <p>
        <code>ec2:ModifyNetworkInterfaceAttribute</code> action on the mount
        target's network interface. </p> </li> </ul>
      responses:
        "204":
          description: Success
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: MountTargetNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MountTargetNotFound"
        "483":
          description: IncorrectMountTargetState
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncorrectMountTargetState"
        "484":
          description: SecurityGroupLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupLimitExceeded"
        "485":
          description: SecurityGroupNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupNotFound"
      parameters:
        - name: MountTargetId
          in: path
          required: true
          description: The ID of the mount target whose security groups you want to modify.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                SecurityGroups:
                  description: An array of up to five VPC security group IDs.
                  type: array
                  items:
                    $ref: "#/components/schemas/SecurityGroup"
                  maxItems: 5
        required: true
  "/2015-02-01/tags/{FileSystemId}/":
    get:
      operationId: DescribeTags
      description: <p>Returns the tags associated with a file system. The order of tags
        returned in the response of one <code>DescribeTags</code> call and the
        order of tags returned across the responses of a multiple-call iteration
        (when using pagination) is unspecified. </p> <p> This operation requires
        permissions for the <code>elasticfilesystem:DescribeTags</code> action.
        </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTagsResponse"
        "480":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: FileSystemNotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSystemNotFound"
      parameters:
        - name: MaxItems
          in: query
          required: false
          description: (Optional) The maximum number of file system tags to return in the
            response. Currently, this number is automatically set to 10, and
            other values are ignored. The response is paginated at 10 per page
            if you have more than 10 tags.
          schema:
            type: integer
            minimum: 1
        - name: Marker
          in: query
          required: false
          description: (Optional) An opaque pagination token returned from a previous
            <code>DescribeTags</code> operation (String). If present, it
            specifies to continue the list from where the previous call left
            off.
          schema:
            type: string
        - name: FileSystemId
          in: path
          required: true
          description: The ID of the file system whose tag set you want to retrieve.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://elasticfilesystem.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The EFS multi-region endpoint
  - url: https://elasticfilesystem.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The EFS multi-region endpoint
  - url: http://elasticfilesystem.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The EFS endpoint for China (Beijing) and China (Ningxia)
  - url: https://elasticfilesystem.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The EFS endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    FileSystemDescription:
      type: object
      required:
        - OwnerId
        - CreationToken
        - FileSystemId
        - CreationTime
        - LifeCycleState
        - NumberOfMountTargets
        - SizeInBytes
        - PerformanceMode
        - Tags
      example:
        CreationTime: "1481841524.0"
        CreationToken: tokenstring
        FileSystemId: fs-01234567
        LifeCycleState: creating
        NumberOfMountTargets: 0
        OwnerId: 12345678912
        PerformanceMode: generalPurpose
        SizeInBytes:
          Value: 0
        Tags:
          - Key: Name
            Value: MyFileSystem
      properties:
        OwnerId:
          $ref: "#/components/schemas/AwsAccountId"
        CreationToken:
          $ref: "#/components/schemas/CreationToken"
        FileSystemId:
          $ref: "#/components/schemas/FileSystemId"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LifeCycleState:
          $ref: "#/components/schemas/LifeCycleState"
        Name:
          $ref: "#/components/schemas/TagValue"
        NumberOfMountTargets:
          $ref: "#/components/schemas/MountTargetCount"
        SizeInBytes:
          $ref: "#/components/schemas/FileSystemSize"
        PerformanceMode:
          $ref: "#/components/schemas/PerformanceMode"
        Encrypted:
          $ref: "#/components/schemas/Encrypted"
        KmsKeyId:
          $ref: "#/components/schemas/KmsKeyId"
        ThroughputMode:
          $ref: "#/components/schemas/ThroughputMode"
        ProvisionedThroughputInMibps:
          $ref: "#/components/schemas/ProvisionedThroughputInMibps"
        Tags:
          $ref: "#/components/schemas/Tags"
      description: A description of the file system.
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: "A tag is a key-value pair. Allowed characters are letters, white space,
        and numbers that can be represented in UTF-8, and the following
        characters:<code> + - = . _ : /</code> "
    BadRequest: {}
    InternalServerError: {}
    FileSystemAlreadyExists: {}
    FileSystemLimitExceeded: {}
    InsufficientThroughputCapacity: {}
    ThroughputLimitExceeded: {}
    MountTargetDescription:
      type: object
      required:
        - MountTargetId
        - FileSystemId
        - SubnetId
        - LifeCycleState
      example:
        FileSystemId: fs-01234567
        IpAddress: 192.0.0.2
        LifeCycleState: creating
        MountTargetId: fsmt-12340abc
        NetworkInterfaceId: eni-cedf6789
        OwnerId: 12345678912
        SubnetId: subnet-1234abcd
      properties:
        OwnerId:
          $ref: "#/components/schemas/AwsAccountId"
        MountTargetId:
          $ref: "#/components/schemas/MountTargetId"
        FileSystemId:
          $ref: "#/components/schemas/FileSystemId"
        SubnetId:
          $ref: "#/components/schemas/SubnetId"
        LifeCycleState:
          $ref: "#/components/schemas/LifeCycleState"
        IpAddress:
          $ref: "#/components/schemas/IpAddress"
        NetworkInterfaceId:
          $ref: "#/components/schemas/NetworkInterfaceId"
      description: Provides a description of a mount target.
    SecurityGroup:
      type: string
    FileSystemNotFound: {}
    IncorrectFileSystemLifeCycleState: {}
    MountTargetConflict: {}
    SubnetNotFound: {}
    NoFreeAddressesInSubnet: {}
    IpAddressInUse: {}
    NetworkInterfaceLimitExceeded: {}
    SecurityGroupLimitExceeded: {}
    SecurityGroupNotFound: {}
    UnsupportedAvailabilityZone: {}
    FileSystemInUse: {}
    DependencyTimeout: {}
    MountTargetNotFound: {}
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    DescribeFileSystemsResponse:
      type: object
      example:
        FileSystems:
          - CreationTime: "1481841524.0"
            CreationToken: tokenstring
            FileSystemId: fs-01234567
            LifeCycleState: available
            Name: MyFileSystem
            NumberOfMountTargets: 1
            OwnerId: 12345678912
            PerformanceMode: generalPurpose
            SizeInBytes:
              Value: 6144
            Tags:
              - Key: Name
                Value: MyFileSystem
      properties:
        Marker:
          $ref: "#/components/schemas/Marker"
        FileSystems:
          $ref: "#/components/schemas/FileSystemDescriptions"
        NextMarker:
          $ref: "#/components/schemas/Marker"
    LifecycleConfigurationDescription:
      type: object
      example:
        LifecyclePolicies:
          - TransitionToIA: AFTER_30_DAYS
      properties:
        LifecyclePolicies:
          $ref: "#/components/schemas/LifecyclePolicies"
    DescribeMountTargetSecurityGroupsResponse:
      type: object
      required:
        - SecurityGroups
      example:
        SecurityGroups:
          - sg-fghi4567
      properties:
        SecurityGroups:
          $ref: "#/components/schemas/SecurityGroups"
    IncorrectMountTargetState: {}
    DescribeMountTargetsResponse:
      type: object
      example:
        MountTargets:
          - FileSystemId: fs-01234567
            IpAddress: 192.0.0.2
            LifeCycleState: available
            MountTargetId: fsmt-12340abc
            NetworkInterfaceId: eni-cedf6789
            OwnerId: 12345678912
            SubnetId: subnet-1234abcd
      properties:
        Marker:
          $ref: "#/components/schemas/Marker"
        MountTargets:
          $ref: "#/components/schemas/MountTargetDescriptions"
        NextMarker:
          $ref: "#/components/schemas/Marker"
      description: <p/>
    DescribeTagsResponse:
      type: object
      required:
        - Tags
      example:
        Tags:
          - Key: Name
            Value: MyFileSystem
      properties:
        Marker:
          $ref: "#/components/schemas/Marker"
        Tags:
          $ref: "#/components/schemas/Tags"
        NextMarker:
          $ref: "#/components/schemas/Marker"
      description: <p/>
    LifecyclePolicy:
      type: object
      properties:
        TransitionToIA:
          $ref: "#/components/schemas/TransitionToIARules"
      description: Describes a policy used by EFS lifecycle management to transition files
        to the Infrequent Access (IA) storage class.
    TooManyRequests: {}
    AwsAccountId:
      type: string
    CreationToken:
      type: string
      minLength: 1
      maxLength: 64
    PerformanceMode:
      type: string
      enum:
        - generalPurpose
        - maxIO
    Encrypted:
      type: boolean
    KmsKeyId:
      type: string
      minLength: 1
      maxLength: 2048
    ThroughputMode:
      type: string
      enum:
        - bursting
        - provisioned
    ProvisionedThroughputInMibps:
      type: number
      format: double
      minimum: 1
    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    CreateFileSystemRequest:
      type: object
      required:
        - CreationToken
      properties:
        CreationToken:
          $ref: "#/components/schemas/CreationToken"
        PerformanceMode:
          $ref: "#/components/schemas/PerformanceMode"
        Encrypted:
          $ref: "#/components/schemas/Encrypted"
        KmsKeyId:
          $ref: "#/components/schemas/KmsKeyId"
        ThroughputMode:
          $ref: "#/components/schemas/ThroughputMode"
        ProvisionedThroughputInMibps:
          $ref: "#/components/schemas/ProvisionedThroughputInMibps"
        Tags:
          $ref: "#/components/schemas/Tags"
    FileSystemId:
      type: string
    SubnetId:
      type: string
    IpAddress:
      type: string
    SecurityGroups:
      type: array
      items:
        $ref: "#/components/schemas/SecurityGroup"
      maxItems: 5
    CreateMountTargetRequest:
      type: object
      required:
        - FileSystemId
        - SubnetId
      properties:
        FileSystemId:
          $ref: "#/components/schemas/FileSystemId"
        SubnetId:
          $ref: "#/components/schemas/SubnetId"
        IpAddress:
          $ref: "#/components/schemas/IpAddress"
        SecurityGroups:
          $ref: "#/components/schemas/SecurityGroups"
      description: <p/>
    CreateTagsRequest:
      type: object
      required:
        - Tags
      properties:
        Tags:
          $ref: "#/components/schemas/Tags"
      description: <p/>
    DeleteFileSystemRequest:
      type: object
      properties: {}
      description: <p/>
    MountTargetId:
      type: string
    DeleteMountTargetRequest:
      type: object
      properties: {}
      description: <p/>
    TagKeys:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    DeleteTagsRequest:
      type: object
      required:
        - TagKeys
      properties:
        TagKeys:
          $ref: "#/components/schemas/TagKeys"
      description: <p/>
    MaxItems:
      type: integer
      minimum: 1
    Marker:
      type: string
    DescribeFileSystemsRequest:
      type: object
      properties: {}
      description: <p/>
    FileSystemDescriptions:
      type: array
      items:
        $ref: "#/components/schemas/FileSystemDescription"
    DescribeLifecycleConfigurationRequest:
      type: object
      properties: {}
    DescribeMountTargetSecurityGroupsRequest:
      type: object
      properties: {}
      description: <p/>
    DescribeMountTargetsRequest:
      type: object
      properties: {}
      description: <p/>
    MountTargetDescriptions:
      type: array
      items:
        $ref: "#/components/schemas/MountTargetDescription"
    DescribeTagsRequest:
      type: object
      properties: {}
      description: <p/>
    Timestamp:
      type: string
      format: date-time
    LifeCycleState:
      type: string
      enum:
        - creating
        - available
        - updating
        - deleting
        - deleted
    TagValue:
      type: string
      maxLength: 256
    MountTargetCount:
      type: integer
      minimum: 0
    FileSystemSize:
      type: object
      required:
        - Value
      properties:
        Value:
          $ref: "#/components/schemas/FileSystemSizeValue"
        Timestamp:
          $ref: "#/components/schemas/Timestamp"
        ValueInIA:
          $ref: "#/components/schemas/FileSystemNullableSizeValue"
        ValueInStandard:
          $ref: "#/components/schemas/FileSystemNullableSizeValue"
      description: The latest known metered size (in bytes) of data stored in the file
        system, in its <code>Value</code> field, and the time at which that size
        was determined in its <code>Timestamp</code> field. The value doesn't
        represent the size of a consistent snapshot of the file system, but it
        is eventually consistent when there are no writes to the file system.
        That is, the value represents the actual size only if the file system is
        not modified for a period longer than a couple of hours. Otherwise, the
        value is not necessarily the exact size the file system was at any
        instant in time.
    FileSystemNullableSizeValue:
      type: integer
      minimum: 0
    FileSystemSizeValue:
      type: integer
      minimum: 0
    LifecyclePolicies:
      type: array
      items:
        $ref: "#/components/schemas/LifecyclePolicy"
    TransitionToIARules:
      type: string
      enum:
        - AFTER_14_DAYS
        - AFTER_30_DAYS
        - AFTER_60_DAYS
        - AFTER_90_DAYS
    ModifyMountTargetSecurityGroupsRequest:
      type: object
      properties:
        SecurityGroups:
          $ref: "#/components/schemas/SecurityGroups"
      description: <p/>
    NetworkInterfaceId:
      type: string
    PutLifecycleConfigurationRequest:
      type: object
      required:
        - LifecyclePolicies
      properties:
        LifecyclePolicies:
          $ref: "#/components/schemas/LifecyclePolicies"
    UpdateFileSystemRequest:
      type: object
      properties:
        ThroughputMode:
          $ref: "#/components/schemas/ThroughputMode"
        ProvisionedThroughputInMibps:
          $ref: "#/components/schemas/ProvisionedThroughputInMibps"
