openapi: 3.0.0
info:
  version: 2017-09-01
  x-release: v4
  title: AWS Elemental MediaStore
  description: "An AWS Elemental MediaStore container is a namespace that holds folders and
    objects. You use a container endpoint to create, read, and delete objects. "
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: mediastore
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-2017-09-01.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/mediastore/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=MediaStore_20170901.CreateContainer:
    post:
      operationId: CreateContainer
      description: Creates a storage container to hold objects. A container is similar to a
        bucket in the Amazon S3 service.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateContainerOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.CreateContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContainerInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.DeleteContainer:
    post:
      operationId: DeleteContainer
      description: "Deletes the specified container. Before you make a
        <code>DeleteContainer</code> request, delete any objects in the
        container or in any folders in the container. You can delete only empty
        containers. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteContainerOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteContainerInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.DeleteContainerPolicy:
    post:
      operationId: DeleteContainerPolicy
      description: Deletes the access policy that is associated with the specified
        container.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteContainerPolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyNotFoundException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteContainerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteContainerPolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.DeleteCorsPolicy:
    post:
      operationId: DeleteCorsPolicy
      description: <p>Deletes the cross-origin resource sharing (CORS) configuration
        information that is set for the container.</p> <p>To use this operation,
        you must have permission to perform the
        <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has
        this permission by default and can grant this permission to others.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCorsPolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: CorsPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorsPolicyNotFoundException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteCorsPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCorsPolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.DeleteLifecyclePolicy:
    post:
      operationId: DeleteLifecyclePolicy
      description: Removes an object lifecycle policy from a container. It takes up to 20
        minutes for the change to take effect.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteLifecyclePolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyNotFoundException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DeleteLifecyclePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteLifecyclePolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.DescribeContainer:
    post:
      operationId: DescribeContainer
      description: Retrieves the properties of the requested container. This request is
        commonly used to retrieve the endpoint of a container. An endpoint is a
        value assigned by the service when a new container is created. A
        container's endpoint does not change after it has been assigned. The
        <code>DescribeContainer</code> request returns a single
        <code>Container</code> object based on <code>ContainerName</code>. To
        return all <code>Container</code> objects that are associated with a
        specified AWS account, use <a>ListContainers</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeContainerOutput"
        "480":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.DescribeContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeContainerInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.GetContainerPolicy:
    post:
      operationId: GetContainerPolicy
      description: Retrieves the access policy for the specified container. For information
        about the data that is included in an access policy, see the <a
        href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access
        Management User Guide</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetContainerPolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyNotFoundException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetContainerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetContainerPolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.GetCorsPolicy:
    post:
      operationId: GetCorsPolicy
      description: <p>Returns the cross-origin resource sharing (CORS) configuration
        information that is set for the container.</p> <p>To use this operation,
        you must have permission to perform the
        <code>MediaStore:GetCorsPolicy</code> action. By default, the container
        owner has this permission and can grant it to others.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCorsPolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: CorsPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorsPolicyNotFoundException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetCorsPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCorsPolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.GetLifecyclePolicy:
    post:
      operationId: GetLifecyclePolicy
      description: Retrieves the object lifecycle policy that is assigned to a container.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLifecyclePolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: PolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyNotFoundException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.GetLifecyclePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLifecyclePolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.ListContainers:
    post:
      operationId: ListContainers
      description: <p>Lists the properties of all containers in AWS Elemental MediaStore.
        </p> <p>You can query to receive all the containers in one response. Or
        you can include the <code>MaxResults</code> parameter to receive a
        limited number of containers in each response. In this case, the
        response includes a token. To get the next set of containers, send the
        command again, this time with the <code>NextToken</code> parameter (with
        the returned token as its value). The next set of responses appears,
        with a token if there are still more containers to receive. </p> <p>See
        also <a>DescribeContainer</a>, which gets the properties of one
        container. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListContainersOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.ListContainers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListContainersInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: "Returns a list of the tags assigned to the specified container. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.PutContainerPolicy:
    post:
      operationId: PutContainerPolicy
      description: <p>Creates an access policy for the specified container to restrict the
        users and clients that can access it. For information about the data
        that is included in an access policy, see the <a
        href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access
        Management User Guide</a>.</p> <p>For this release of the REST API, you
        can create only one policy for a container. If you enter
        <code>PutContainerPolicy</code> twice, the second command modifies the
        existing policy. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutContainerPolicyOutput"
        "480":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "481":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutContainerPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutContainerPolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.PutCorsPolicy:
    post:
      operationId: PutCorsPolicy
      description: <p>Sets the cross-origin resource sharing (CORS) configuration on a
        container so that the container can service cross-origin requests. For
        example, you might want to enable a request whose origin is
        http://www.example.com to access your AWS Elemental MediaStore container
        at my.example.container.com by using the browser's XMLHttpRequest
        capability.</p> <p>To enable CORS on a container, you attach a CORS
        policy to the container. In the CORS policy, you configure rules that
        identify origins and the HTTP methods that can be executed on your
        container. The policy can contain up to 398,000 characters. You can add
        up to 100 rules to a CORS policy. If more than one rule applies, the
        service uses the first applicable rule listed.</p> <p>To learn more
        about CORS, see <a
        href="https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html">Cross-Origin
        Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutCorsPolicyOutput"
        "480":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "481":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutCorsPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutCorsPolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.PutLifecyclePolicy:
    post:
      operationId: PutLifecyclePolicy
      description: <p>Writes an object lifecycle policy to a container. If the container
        already has an object lifecycle policy, the service replaces the
        existing policy with the new policy. It takes up to 20 minutes for the
        change to take effect.</p> <p>For information about how to construct an
        object lifecycle policy, see <a
        href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html">Components
        of an Object Lifecycle Policy</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutLifecyclePolicyOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.PutLifecyclePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutLifecyclePolicyInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.StartAccessLogging:
    post:
      operationId: StartAccessLogging
      description: Starts access logging on the specified container. When you enable access
        logging on a container, MediaStore delivers access logs for objects
        stored in that container to Amazon CloudWatch Logs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartAccessLoggingOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.StartAccessLogging
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartAccessLoggingInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.StopAccessLogging:
    post:
      operationId: StopAccessLogging
      description: Stops access logging on the specified container. When you stop access
        logging on a container, MediaStore stops sending access logs to Amazon
        CloudWatch Logs. These access logs are not saved and are not
        retrievable.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopAccessLoggingOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.StopAccessLogging
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopAccessLoggingInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.TagResource:
    post:
      operationId: TagResource
      description: Adds tags to the specified AWS Elemental MediaStore container. Tags are
        key:value pairs that you can associate with AWS resources. For example,
        the tag key might be "customer" and the tag value might be "companyA."
        You can specify one or more tags to add to each container. You can add
        up to 50 tags to each container. For more information about tagging,
        including naming and usage conventions, see <a
        href="https://aws.amazon.com/documentation/mediastore/tagging">Tagging
        Resources in MediaStore</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=MediaStore_20170901.UntagResource:
    post:
      operationId: UntagResource
      description: "Removes tags from the specified container. You can specify one or more
        tags to remove. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceOutput"
        "480":
          description: ContainerInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInUseException"
        "481":
          description: ContainerNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - MediaStore_20170901.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://mediastore.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The MediaStore multi-region endpoint
  - url: https://mediastore.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The MediaStore multi-region endpoint
  - url: http://mediastore.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
  - url: https://mediastore.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateContainerOutput:
      type: object
      required:
        - Container
      properties:
        Container:
          $ref: "#/components/schemas/Container"
    CreateContainerInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
        Tags:
          $ref: "#/components/schemas/TagList"
    ContainerInUseException: {}
    LimitExceededException: {}
    InternalServerError: {}
    DeleteContainerOutput:
      type: object
      properties: {}
    DeleteContainerInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    ContainerNotFoundException: {}
    DeleteContainerPolicyOutput:
      type: object
      properties: {}
    DeleteContainerPolicyInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    PolicyNotFoundException: {}
    DeleteCorsPolicyOutput:
      type: object
      properties: {}
    DeleteCorsPolicyInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    CorsPolicyNotFoundException: {}
    DeleteLifecyclePolicyOutput:
      type: object
      properties: {}
    DeleteLifecyclePolicyInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    DescribeContainerOutput:
      type: object
      properties:
        Container:
          $ref: "#/components/schemas/Container"
    DescribeContainerInput:
      type: object
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    GetContainerPolicyOutput:
      type: object
      required:
        - Policy
      properties:
        Policy:
          $ref: "#/components/schemas/ContainerPolicy"
    GetContainerPolicyInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    GetCorsPolicyOutput:
      type: object
      required:
        - CorsPolicy
      properties:
        CorsPolicy:
          $ref: "#/components/schemas/CorsPolicy"
    GetCorsPolicyInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    GetLifecyclePolicyOutput:
      type: object
      required:
        - LifecyclePolicy
      properties:
        LifecyclePolicy:
          $ref: "#/components/schemas/LifecyclePolicy"
    GetLifecyclePolicyInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    ListContainersOutput:
      type: object
      required:
        - Containers
      properties:
        Containers:
          $ref: "#/components/schemas/ContainerList"
        NextToken:
          $ref: "#/components/schemas/PaginationToken"
    ListContainersInput:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/PaginationToken"
        MaxResults:
          $ref: "#/components/schemas/ContainerListLimit"
    ListTagsForResourceOutput:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
    ListTagsForResourceInput:
      type: object
      required:
        - Resource
      properties:
        Resource:
          $ref: "#/components/schemas/ContainerARN"
    PutContainerPolicyOutput:
      type: object
      properties: {}
    PutContainerPolicyInput:
      type: object
      required:
        - ContainerName
        - Policy
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
        Policy:
          $ref: "#/components/schemas/ContainerPolicy"
    PutCorsPolicyOutput:
      type: object
      properties: {}
    PutCorsPolicyInput:
      type: object
      required:
        - ContainerName
        - CorsPolicy
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
        CorsPolicy:
          $ref: "#/components/schemas/CorsPolicy"
    PutLifecyclePolicyOutput:
      type: object
      properties: {}
    PutLifecyclePolicyInput:
      type: object
      required:
        - ContainerName
        - LifecyclePolicy
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
        LifecyclePolicy:
          $ref: "#/components/schemas/LifecyclePolicy"
    StartAccessLoggingOutput:
      type: object
      properties: {}
    StartAccessLoggingInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    StopAccessLoggingOutput:
      type: object
      properties: {}
    StopAccessLoggingInput:
      type: object
      required:
        - ContainerName
      properties:
        ContainerName:
          $ref: "#/components/schemas/ContainerName"
    TagResourceOutput:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - Resource
        - Tags
      properties:
        Resource:
          $ref: "#/components/schemas/ContainerARN"
        Tags:
          $ref: "#/components/schemas/TagList"
    UntagResourceOutput:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - Resource
        - TagKeys
      properties:
        Resource:
          $ref: "#/components/schemas/ContainerARN"
        TagKeys:
          $ref: "#/components/schemas/TagKeyList"
    Header:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      minLength: 1
      maxLength: 8192
    AllowedHeaders:
      type: array
      items:
        $ref: "#/components/schemas/Header"
      minItems: 0
      maxItems: 100
    MethodName:
      type: string
      enum:
        - PUT
        - GET
        - DELETE
        - HEAD
    AllowedMethods:
      type: array
      items:
        $ref: "#/components/schemas/MethodName"
      minItems: 1
      maxItems: 4
    Origin:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      minLength: 1
      maxLength: 2048
    AllowedOrigins:
      type: array
      items:
        $ref: "#/components/schemas/Origin"
      minItems: 1
      maxItems: 100
    Endpoint:
      type: string
      minLength: 1
      maxLength: 255
    TimeStamp:
      type: string
      format: date-time
    ContainerARN:
      type: string
      pattern: arn:aws:mediastore:[a-z]+-[a-z]+-\d:\d{12}:container/[\w-]{1,255}
      minLength: 1
      maxLength: 1024
    ContainerName:
      type: string
      pattern: "[\\w-]+"
      minLength: 1
      maxLength: 255
    ContainerStatus:
      type: string
      enum:
        - ACTIVE
        - CREATING
        - DELETING
      minLength: 1
      maxLength: 16
    ContainerAccessLoggingEnabled:
      type: boolean
    Container:
      type: object
      properties:
        Endpoint:
          $ref: "#/components/schemas/Endpoint"
        CreationTime:
          $ref: "#/components/schemas/TimeStamp"
        ARN:
          $ref: "#/components/schemas/ContainerARN"
        Name:
          $ref: "#/components/schemas/ContainerName"
        Status:
          $ref: "#/components/schemas/ContainerStatus"
        AccessLoggingEnabled:
          $ref: "#/components/schemas/ContainerAccessLoggingEnabled"
      description: This section describes operations that you can perform on an AWS
        Elemental MediaStore container.
    ContainerList:
      type: array
      items:
        $ref: "#/components/schemas/Container"
    ContainerListLimit:
      type: integer
      minimum: 1
      maximum: 100
    ContainerPolicy:
      type: string
      pattern: "[\\x00-\\x7F]+"
      minLength: 1
      maxLength: 8192
    CorsRule:
      type: object
      required:
        - AllowedOrigins
        - AllowedHeaders
      properties:
        AllowedOrigins:
          $ref: "#/components/schemas/AllowedOrigins"
        AllowedMethods:
          $ref: "#/components/schemas/AllowedMethods"
        AllowedHeaders:
          $ref: "#/components/schemas/AllowedHeaders"
        MaxAgeSeconds:
          $ref: "#/components/schemas/MaxAgeSeconds"
        ExposeHeaders:
          $ref: "#/components/schemas/ExposeHeaders"
      description: A rule for a CORS policy. You can add up to 100 rules to a CORS policy.
        If more than one rule applies, the service uses the first applicable
        rule listed.
    CorsPolicy:
      type: array
      description: "The CORS policy of the container. "
      items:
        $ref: "#/components/schemas/CorsRule"
      minItems: 1
      maxItems: 100
    MaxAgeSeconds:
      type: integer
      minimum: 0
      maximum: 2147483647
    ExposeHeaders:
      type: array
      items:
        $ref: "#/components/schemas/Header"
      minItems: 0
      maxItems: 100
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    LifecyclePolicy:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      minLength: 0
      maxLength: 8192
    PaginationToken:
      type: string
      pattern: "[0-9A-Za-z=/+]+"
      minLength: 1
      maxLength: 1024
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: A collection of tags associated with a container. Each tag consists of a
        key:value pair, which can be anything you define. Typically, the tag key
        represents a category (such as "environment") and the tag value
        represents a specific value within that category (such as "test,"
        "development," or "production"). You can add up to 50 tags to each
        container. For more information about tagging, including naming and
        usage conventions, see <a
        href="https://aws.amazon.com/documentation/mediastore/tagging">Tagging
        Resources in MediaStore</a>.
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
