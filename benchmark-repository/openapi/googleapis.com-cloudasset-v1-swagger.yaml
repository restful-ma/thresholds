openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: The cloud asset API manages the history and inventory of cloud resources.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Cloud Asset
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://cloudasset.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: cloudasset
externalDocs:
  url: https://cloud.google.com/resource-manager/docs/cloud-asset-inventory/quickstart-cloud-asset-inventory
tags:
  - name: operations
  - name: v1
paths:
  "/v1/{name}":
    get:
      description: >-
        Gets the latest state of a long-running operation.  Clients can use this

        method to poll the operation result at intervals as recommended by the API

        service.
      operationId: cloudasset.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - operations
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{parent}:batchGetAssetsHistory":
    get:
      description: >-
        Batch gets the update history of assets that overlap a time window.

        For RESOURCE content, this API outputs history with asset in both

        non-delete or deleted status.

        For IAM_POLICY content, this API outputs history when the asset and its

        attached IAM POLICY both exist. This can create gaps in the output history.

        If a specified asset does not exist, this API returns an INVALID_ARGUMENT

        error.
      operationId: cloudasset.batchGetAssetsHistory
      parameters:
        - description: >-
            A list of the full names of the assets. For example:

            `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.

            See [Resource

            Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)

            and [Resource Name

            Format](https://cloud.google.com/resource-manager/docs/cloud-asset-inventory/resource-name-format)

            for more info.


            The request becomes a no-op if the asset name list is empty, and the max

            size of the asset name list is 100 in one request.
          in: query
          name: assetNames
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: Required. The content type.
          in: query
          name: contentType
          schema:
            type: string
            enum:
              - CONTENT_TYPE_UNSPECIFIED
              - RESOURCE
              - IAM_POLICY
              - ORG_POLICY
              - ACCESS_POLICY
        - description: >-
            Required. The relative name of the root asset. It can only be an

            organization number (such as "organizations/123"), a project ID (such as

            "projects/my-project-id")", or a project number (such as "projects/12345").
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            End time of the time window (inclusive).
            Current timestamp if not specified.
          in: query
          name: readTimeWindow.endTime
          schema:
            type: string
        - description: Start time of the time window (exclusive).
          in: query
          name: readTimeWindow.startTime
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BatchGetAssetsHistoryResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - v1
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{parent}:exportAssets":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: |-
        Exports assets with time and resource types to a given Cloud Storage
        location. The output format is newline-delimited JSON.
        This API implements the google.longrunning.Operation API allowing you
        to keep track of the export.
      operationId: cloudasset.exportAssets
      parameters:
        - description: >-
            Required. The relative name of the root asset. This can only be an

            organization number (such as "organizations/123"), a project ID (such as

            "projects/my-project-id"), or a project number (such as "projects/12345"),

            or a folder number (such as "folders/123").
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportAssetsRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - v1
servers:
  - url: https://cloudasset.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
  schemas:
    Asset:
      description: |-
        Cloud asset. This includes all Google Cloud Platform resources,
        Cloud IAM policies, and other non-GCP assets.
      properties:
        accessLevel:
          $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1AccessLev\
            el"
        accessPolicy:
          $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1AccessPol\
            icy"
        ancestors:
          description: >-
            Asset's ancestry path in Cloud Resource Manager (CRM) hierarchy,

            represented as a list of relative resource names. Ancestry path starts with

            the closest CRM ancestor and ends at root. If the asset is a CRM

            project/folder/organization, this starts from the asset itself.


            Example: ["projects/123456789", "folders/5432", "organizations/1234"]
          items:
            type: string
          type: array
        assetType:
          description: 'Type of the asset. Example: "compute.googleapis.com/Disk".'
          type: string
        iamPolicy:
          $ref: "#/components/schemas/Policy"
        name:
          description: >-
            The full name of the asset. For example:

            `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.

            See [Resource

            Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)

            for more information.
          type: string
        orgPolicy:
          description: >-
            Representation of the Cloud Organization Policy set on an asset. For
            each

            asset, there could be multiple Organization policies with different

            constraints.
          items:
            $ref: "#/components/schemas/GoogleCloudOrgpolicyV1Policy"
          type: array
        resource:
          $ref: "#/components/schemas/Resource"
        servicePerimeter:
          $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1ServicePe\
            rimeter"
      type: object
    AuditConfig:
      description: >-
        Specifies the audit configuration for a service.

        The configuration determines which permission types are logged, and what

        identities, if any, are exempted from logging.

        An AuditConfig must have one or more AuditLogConfigs.


        If there are AuditConfigs for both `allServices` and a specific service,

        the union of the two AuditConfigs is used for that service: the log_types

        specified in each AuditConfig are enabled, and the exempted_members in each

        AuditLogConfig are exempted.


        Example Policy with multiple AuditConfigs:

            {
              "audit_configs": [
                {
                  "service": "allServices"
                  "audit_log_configs": [
                    {
                      "log_type": "DATA_READ",
                      "exempted_members": [
                        "user:jose@example.com"
                      ]
                    },
                    {
                      "log_type": "DATA_WRITE",
                    },
                    {
                      "log_type": "ADMIN_READ",
                    }
                  ]
                },
                {
                  "service": "sampleservice.googleapis.com"
                  "audit_log_configs": [
                    {
                      "log_type": "DATA_READ",
                    },
                    {
                      "log_type": "DATA_WRITE",
                      "exempted_members": [
                        "user:aliya@example.com"
                      ]
                    }
                  ]
                }
              ]
            }

        For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ

        logging. It also exempts jose@example.com from DATA_READ logging, and

        aliya@example.com from DATA_WRITE logging.
      properties:
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          items:
            $ref: "#/components/schemas/AuditLogConfig"
          type: array
        service:
          description: |-
            Specifies a service that will be enabled for audit logging.
            For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
          type: string
      type: object
    AuditLogConfig:
      description: |-
        Provides the configuration for logging a type of permissions.
        Example:

            {
              "audit_log_configs": [
                {
                  "log_type": "DATA_READ",
                  "exempted_members": [
                    "user:jose@example.com"
                  ]
                },
                {
                  "log_type": "DATA_WRITE",
                }
              ]
            }

        This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      properties:
        exemptedMembers:
          description: |-
            Specifies the identities that do not cause logging for this type of
            permission.
            Follows the same format of Binding.members.
          items:
            type: string
          type: array
        logType:
          description: The log type that this config enables.
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          type: string
      type: object
    BatchGetAssetsHistoryResponse:
      description: Batch get assets history response.
      properties:
        assets:
          description: A list of assets with valid time windows.
          items:
            $ref: "#/components/schemas/TemporalAsset"
          type: array
      type: object
    BigQueryDestination:
      description: A BigQuery destination.
      properties:
        dataset:
          description: >-
            Required. The BigQuery dataset in format

            "projects/projectId/datasets/datasetId", to which the snapshot result

            should be exported. If this dataset does not exist, the export call returns

            an error.
          type: string
        force:
          description: >-
            If the destination table already exists and this flag is `TRUE`, the

            table will be overwritten by the contents of assets snapshot. If the flag

            is not set and the destination table already exists, the export call

            returns an error.
          type: boolean
        table:
          description: >-
            Required. The BigQuery table to which the snapshot result should be

            written. If this table does not exist, a new table with the given name

            will be created.
          type: string
      type: object
    Binding:
      description: Associates `members` with a `role`.
      properties:
        condition:
          $ref: "#/components/schemas/Expr"
        members:
          description: >+
            Specifies the identities requesting access for a Cloud Platform
            resource.

            `members` can have the following values:


            * `allUsers`: A special identifier that represents anyone who is
               on the internet; with or without a Google account.

            * `allAuthenticatedUsers`: A special identifier that represents anyone
               who is authenticated with a Google account or a service account.

            * `user:{emailid}`: An email address that represents a specific Google
               account. For example, `alice@example.com` .


            * `serviceAccount:{emailid}`: An email address that represents a service
               account. For example, `my-other-app@appspot.gserviceaccount.com`.

            * `group:{emailid}`: An email address that represents a Google group.
               For example, `admins@example.com`.


            * `domain:{domain}`: The G Suite domain (primary) that represents all the
               users of that domain. For example, `google.com` or `example.com`.

          items:
            type: string
          type: array
        role:
          description: |-
            Role that is assigned to `members`.
            For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
      type: object
    ExportAssetsRequest:
      description: Export asset request.
      properties:
        assetTypes:
          description: >-
            A list of asset types of which to take a snapshot for. For example:

            "compute.googleapis.com/Disk". If specified, only matching assets will be

            returned. See [Introduction to Cloud Asset

            Inventory](https://cloud.google.com/resource-manager/docs/cloud-asset-inventory/overview)

            for all supported asset types.
          items:
            type: string
          type: array
        contentType:
          description: >-
            Asset content type. If not specified, no content but the asset name
            will be

            returned.
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - RESOURCE
            - IAM_POLICY
            - ORG_POLICY
            - ACCESS_POLICY
          type: string
        outputConfig:
          $ref: "#/components/schemas/OutputConfig"
        readTime:
          description: >-
            Timestamp to take an asset snapshot. This can only be set to a
            timestamp

            between 2018-10-02 UTC (inclusive) and the current time. If not specified,

            the current time will be used. Due to delays in resource data collection

            and indexing, there is a volatile window during which running the same

            query may get different results.
          format: google-datetime
          type: string
      type: object
    Expr:
      description: |-
        Represents an expression text. Example:

            title: "User account presence"
            description: "Determines whether the request has a user account"
            expression: "size(request.user) > 0"
      properties:
        description:
          description: >-
            An optional description of the expression. This is a longer text
            which

            describes the expression, e.g. when hovered over it in a UI.
          type: string
        expression:
          description: |-
            Textual representation of an expression in
            Common Expression Language syntax.

            The application context of the containing message determines which
            well-known feature set of CEL is supported.
          type: string
        location:
          description: >-
            An optional string indicating the location of the expression for
            error

            reporting, e.g. a file name and a position in the file.
          type: string
        title:
          description: |-
            An optional title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
      type: object
    GcsDestination:
      description: A Cloud Storage location.
      properties:
        uri:
          description: >-
            The uri of the Cloud Storage object. It's the same uri that is used
            by

            gsutil. For example: "gs://bucket_name/object_name". See [Viewing and

            Editing Object

            Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)

            for more information.
          type: string
        uriPrefix:
          description: >-
            The uri prefix of all generated Cloud Storage objects. For example:

            "gs://bucket_name/object_name_prefix". Each object uri is in format:

            "gs://bucket_name/object_name_prefix/<asset type>/<shard number> and only

            contains assets for that type. <shard number> starts from 0. For example:

            "gs://bucket_name/object_name_prefix/compute.googleapis.com/Disk/0" is

            the first shard of output objects containing all

            compute.googleapis.com/Disk assets. An INVALID_ARGUMENT error will be

            returned if file with the same name "gs://bucket_name/object_name_prefix"

            already exists.
          type: string
      type: object
    GoogleCloudOrgpolicyV1BooleanPolicy:
      description: >-
        Used in `policy_type` to specify how `boolean_policy` will behave at
        this

        resource.
      properties:
        enforced:
          description: >-
            If `true`, then the `Policy` is enforced. If `false`, then any

            configuration is acceptable.


            Suppose you have a `Constraint`

            `constraints/compute.disableSerialPortAccess` with `constraint_default`

            set to `ALLOW`. A `Policy` for that `Constraint` exhibits the following

            behavior:
              - If the `Policy` at this resource has enforced set to `false`, serial
                port connection attempts will be allowed.
              - If the `Policy` at this resource has enforced set to `true`, serial
                port connection attempts will be refused.
              - If the `Policy` at this resource is `RestoreDefault`, serial port
                connection attempts will be allowed.
              - If no `Policy` is set at this resource or anywhere higher in the
                resource hierarchy, serial port connection attempts will be allowed.
              - If no `Policy` is set at this resource, but one exists higher in the
                resource hierarchy, the behavior is as if the`Policy` were set at
                this resource.

            The following examples demonstrate the different possible layerings:


            Example 1 (nearest `Constraint` wins):
              `organizations/foo` has a `Policy` with:
                {enforced: false}
              `projects/bar` has no `Policy` set.
            The constraint at `projects/bar` and `organizations/foo` will not be

            enforced.


            Example 2 (enforcement gets replaced):
              `organizations/foo` has a `Policy` with:
                {enforced: false}
              `projects/bar` has a `Policy` with:
                {enforced: true}
            The constraint at `organizations/foo` is not enforced.

            The constraint at `projects/bar` is enforced.


            Example 3 (RestoreDefault):
              `organizations/foo` has a `Policy` with:
                {enforced: true}
              `projects/bar` has a `Policy` with:
                {RestoreDefault: {}}
            The constraint at `organizations/foo` is enforced.

            The constraint at `projects/bar` is not enforced, because

            `constraint_default` for the `Constraint` is `ALLOW`.
          type: boolean
      type: object
    GoogleCloudOrgpolicyV1ListPolicy:
      description: >-
        Used in `policy_type` to specify how `list_policy` behaves at this

        resource.


        `ListPolicy` can define specific values and subtrees of Cloud Resource

        Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that

        are allowed or denied by setting the `allowed_values` and `denied_values`

        fields. This is achieved by using the `under:` and optional `is:` prefixes.

        The `under:` prefix is used to denote resource subtree values.

        The `is:` prefix is used to denote specific values, and is required only

        if the value contains a ":". Values prefixed with "is:" are treated the

        same as values with no prefix.

        Ancestry subtrees must be in one of the following formats:
            - “projects/<project-id>”, e.g. “projects/tokyo-rain-123”
            - “folders/<folder-id>”, e.g. “folders/1234”
            - “organizations/<organization-id>”, e.g. “organizations/1234”
        The `supports_under` field of the associated `Constraint`  defines whether

        ancestry prefixes can be used. You can set `allowed_values` and

        `denied_values` in the same `Policy` if `all_values` is

        `ALL_VALUES_UNSPECIFIED`. `ALLOW` or `DENY` are used to allow or deny all

        values. If `all_values` is set to either `ALLOW` or `DENY`,

        `allowed_values` and `denied_values` must be unset.
      properties:
        allValues:
          description: The policy all_values state.
          enum:
            - ALL_VALUES_UNSPECIFIED
            - ALLOW
            - DENY
          type: string
        allowedValues:
          description: >-
            List of values allowed  at this resource. Can only be set if
            `all_values`

            is set to `ALL_VALUES_UNSPECIFIED`.
          items:
            type: string
          type: array
        deniedValues:
          description: >-
            List of values denied at this resource. Can only be set if
            `all_values`

            is set to `ALL_VALUES_UNSPECIFIED`.
          items:
            type: string
          type: array
        inheritFromParent:
          description: >-
            Determines the inheritance behavior for this `Policy`.


            By default, a `ListPolicy` set at a resource supercedes any `Policy` set

            anywhere up the resource hierarchy. However, if `inherit_from_parent` is

            set to `true`, then the values from the effective `Policy` of the parent

            resource are inherited, meaning the values set in this `Policy` are

            added to the values inherited up the hierarchy.


            Setting `Policy` hierarchies that inherit both allowed values and denied

            values isn't recommended in most circumstances to keep the configuration

            simple and understandable. However, it is possible to set a `Policy` with

            `allowed_values` set that inherits a `Policy` with `denied_values` set.

            In this case, the values that are allowed must be in `allowed_values` and

            not present in `denied_values`.


            For example, suppose you have a `Constraint`

            `constraints/serviceuser.services`, which has a `constraint_type` of

            `list_constraint`, and with `constraint_default` set to `ALLOW`.

            Suppose that at the Organization level, a `Policy` is applied that

            restricts the allowed API activations to {`E1`, `E2`}. Then, if a

            `Policy` is applied to a project below the Organization that has

            `inherit_from_parent` set to `false` and field all_values set to DENY,

            then an attempt to activate any API will be denied.


            The following examples demonstrate different possible layerings for

            `projects/bar` parented by `organizations/foo`:


            Example 1 (no inherited values):
              `organizations/foo` has a `Policy` with values:
                {allowed_values: “E1” allowed_values:”E2”}
              `projects/bar` has `inherit_from_parent` `false` and values:
                {allowed_values: "E3" allowed_values: "E4"}
            The accepted values at `organizations/foo` are `E1`, `E2`.

            The accepted values at `projects/bar` are `E3`, and `E4`.


            Example 2 (inherited values):
              `organizations/foo` has a `Policy` with values:
                {allowed_values: “E1” allowed_values:”E2”}
              `projects/bar` has a `Policy` with values:
                {value: “E3” value: ”E4” inherit_from_parent: true}
            The accepted values at `organizations/foo` are `E1`, `E2`.

            The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`.


            Example 3 (inheriting both allowed and denied values):
              `organizations/foo` has a `Policy` with values:
                {allowed_values: "E1" allowed_values: "E2"}
              `projects/bar` has a `Policy` with:
                {denied_values: "E1"}
            The accepted values at `organizations/foo` are `E1`, `E2`.

            The value accepted at `projects/bar` is `E2`.


            Example 4 (RestoreDefault):
              `organizations/foo` has a `Policy` with values:
                {allowed_values: “E1” allowed_values:”E2”}
              `projects/bar` has a `Policy` with values:
                {RestoreDefault: {}}
            The accepted values at `organizations/foo` are `E1`, `E2`.

            The accepted values at `projects/bar` are either all or none depending on

            the value of `constraint_default` (if `ALLOW`, all; if

            `DENY`, none).


            Example 5 (no policy inherits parent policy):
              `organizations/foo` has no `Policy` set.
              `projects/bar` has no `Policy` set.
            The accepted values at both levels are either all or none depending on

            the value of `constraint_default` (if `ALLOW`, all; if

            `DENY`, none).


            Example 6 (ListConstraint allowing all):
              `organizations/foo` has a `Policy` with values:
                {allowed_values: “E1” allowed_values: ”E2”}
              `projects/bar` has a `Policy` with:
                {all: ALLOW}
            The accepted values at `organizations/foo` are `E1`, E2`.

            Any value is accepted at `projects/bar`.


            Example 7 (ListConstraint allowing none):
              `organizations/foo` has a `Policy` with values:
                {allowed_values: “E1” allowed_values: ”E2”}
              `projects/bar` has a `Policy` with:
                {all: DENY}
            The accepted values at `organizations/foo` are `E1`, E2`.

            No value is accepted at `projects/bar`.


            Example 10 (allowed and denied subtrees of Resource Manager hierarchy):

            Given the following resource hierarchy
              O1->{F1, F2}; F1->{P1}; F2->{P2, P3},
              `organizations/foo` has a `Policy` with values:
                {allowed_values: "under:organizations/O1"}
              `projects/bar` has a `Policy` with:
                {allowed_values: "under:projects/P3"}
                {denied_values: "under:folders/F2"}
            The accepted values at `organizations/foo` are `organizations/O1`,
              `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`,
              `projects/P3`.
            The accepted values at `projects/bar` are `organizations/O1`,
              `folders/F1`, `projects/P1`.
          type: boolean
        suggestedValue:
          description: >-
            Optional. The Google Cloud Console will try to default to a
            configuration

            that matches the value specified in this `Policy`. If `suggested_value`

            is not set, it will inherit the value specified higher in the hierarchy,

            unless `inherit_from_parent` is `false`.
          type: string
      type: object
    GoogleCloudOrgpolicyV1Policy:
      description: >-
        Defines a Cloud Organization `Policy` which is used to specify
        `Constraints`

        for configurations of Cloud Platform resources.
      properties:
        booleanPolicy:
          $ref: "#/components/schemas/GoogleCloudOrgpolicyV1BooleanPolicy"
        constraint:
          description: >-
            The name of the `Constraint` the `Policy` is configuring, for
            example,

            `constraints/serviceuser.services`.


            Immutable after creation.
          type: string
        etag:
          description: >-
            An opaque tag indicating the current version of the `Policy`, used
            for

            concurrency control.


            When the `Policy` is returned from either a `GetPolicy` or a

            `ListOrgPolicy` request, this `etag` indicates the version of the current

            `Policy` to use when executing a read-modify-write loop.


            When the `Policy` is returned from a `GetEffectivePolicy` request, the

            `etag` will be unset.


            When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value

            that was returned from a `GetOrgPolicy` request as part of a

            read-modify-write loop for concurrency control. Not setting the `etag`in a

            `SetOrgPolicy` request will result in an unconditional write of the

            `Policy`.
          format: byte
          type: string
        listPolicy:
          $ref: "#/components/schemas/GoogleCloudOrgpolicyV1ListPolicy"
        restoreDefault:
          $ref: "#/components/schemas/GoogleCloudOrgpolicyV1RestoreDefault"
        updateTime:
          description: >-
            The time stamp the `Policy` was previously updated. This is set by
            the

            server, not specified by the caller, and represents the last time a call to

            `SetOrgPolicy` was made for that `Policy`. Any value set by the client will

            be ignored.
          format: google-datetime
          type: string
        version:
          description: Version of the `Policy`. Default version is 0;
          format: int32
          type: integer
      type: object
    GoogleCloudOrgpolicyV1RestoreDefault:
      description: >-
        Ignores policies set above this resource and restores the

        `constraint_default` enforcement behavior of the specific `Constraint` at

        this resource.


        Suppose that `constraint_default` is set to `ALLOW` for the

        `Constraint` `constraints/serviceuser.services`. Suppose that organization

        foo.com sets a `Policy` at their Organization resource node that restricts

        the allowed service activations to deny all service activations. They

        could then set a `Policy` with the `policy_type` `restore_default` on

        several experimental projects, restoring the `constraint_default`

        enforcement of the `Constraint` for only those projects, allowing those

        projects to have all services activated.
      properties: {}
      type: object
    GoogleIdentityAccesscontextmanagerV1AccessLevel:
      description: >-
        An `AccessLevel` is a label that can be applied to requests to GCP
        services,

        along with a list of requirements necessary for the label to be applied.
      properties:
        basic:
          $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1BasicLevel"
        createTime:
          description: Output only. Time the `AccessLevel` was created in UTC.
          format: google-datetime
          type: string
        description:
          description: Description of the `AccessLevel` and its use. Does not affect
            behavior.
          type: string
        name:
          description: >-
            Required. Resource name for the Access Level. The `short_name`
            component

            must begin with a letter and only include alphanumeric and '_'. Format:

            `accessPolicies/{policy_id}/accessLevels/{short_name}`
          type: string
        title:
          description: Human readable title. Must be unique within the Policy.
          type: string
        updateTime:
          description: Output only. Time the `AccessLevel` was updated in UTC.
          format: google-datetime
          type: string
      type: object
    GoogleIdentityAccesscontextmanagerV1AccessPolicy:
      description: >-
        `AccessPolicy` is a container for `AccessLevels` (which define the
        necessary

        attributes to use GCP services) and `ServicePerimeters` (which define regions

        of services able to freely pass data within a perimeter). An access policy is

        globally visible within an organization, and the restrictions it specifies

        apply to all projects within an organization.
      properties:
        createTime:
          description: Output only. Time the `AccessPolicy` was created in UTC.
          format: google-datetime
          type: string
        name:
          description: |-
            Output only. Resource name of the `AccessPolicy`. Format:
            `accessPolicies/{policy_id}`
          type: string
        parent:
          description: |-
            Required. The parent of this `AccessPolicy` in the Cloud Resource
            Hierarchy. Currently immutable once created. Format:
            `organizations/{organization_id}`
          type: string
        title:
          description: Required. Human readable title. Does not affect behavior.
          type: string
        updateTime:
          description: Output only. Time the `AccessPolicy` was updated in UTC.
          format: google-datetime
          type: string
      type: object
    GoogleIdentityAccesscontextmanagerV1BasicLevel:
      description: "`BasicLevel` is an `AccessLevel` using a set of recommended features."
      properties:
        combiningFunction:
          description: >-
            How the `conditions` list should be combined to determine if a
            request is

            granted this `AccessLevel`. If AND is used, each `Condition` in

            `conditions` must be satisfied for the `AccessLevel` to be applied. If OR

            is used, at least one `Condition` in `conditions` must be satisfied for the

            `AccessLevel` to be applied. Default behavior is AND.
          enum:
            - AND
            - OR
          type: string
        conditions:
          description: Required. A list of requirements for the `AccessLevel` to be granted.
          items:
            $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1Conditi\
              on"
          type: array
      type: object
    GoogleIdentityAccesscontextmanagerV1Condition:
      description: >-
        A condition necessary for an `AccessLevel` to be granted. The Condition
        is an

        AND over its fields. So a Condition is true if: 1) the request IP is from one

        of the listed subnetworks AND 2) the originating device complies with the

        listed device policy AND 3) all listed access levels are granted AND 4) the

        request was sent at a time allowed by the DateTimeRestriction.
      properties:
        devicePolicy:
          $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1DevicePol\
            icy"
        ipSubnetworks:
          description: >-
            CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note
            that for

            a CIDR IP address block, the specified IP address portion must be properly

            truncated (i.e. all the host bits must be zero) or the input is considered

            malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is

            not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas

            "2001:db8::1/32" is not. The originating IP of a request must be in one of

            the listed subnets in order for this Condition to be true. If empty, all IP

            addresses are allowed.
          items:
            type: string
          type: array
        members:
          description: |-
            The request must be made by one of the provided user or service
            accounts. Groups are not supported.
            Syntax:
            `user:{emailid}`
            `serviceAccount:{emailid}`
            If not specified, a request may come from any user.
          items:
            type: string
          type: array
        negate:
          description: >-
            Whether to negate the Condition. If true, the Condition becomes a
            NAND over

            its non-empty fields, each field must be false for the Condition overall to

            be satisfied. Defaults to false.
          type: boolean
        regions:
          description: >-
            The request must originate from one of the provided
            countries/regions.

            Must be valid ISO 3166-1 alpha-2 codes.
          items:
            type: string
          type: array
        requiredAccessLevels:
          description: >-
            A list of other access levels defined in the same `Policy`,
            referenced by

            resource name. Referencing an `AccessLevel` which does not exist is an

            error. All access levels listed must be granted for the Condition

            to be true. Example:

            "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
          items:
            type: string
          type: array
      type: object
    GoogleIdentityAccesscontextmanagerV1DevicePolicy:
      description: >-
        `DevicePolicy` specifies device specific restrictions necessary to
        acquire a

        given access level. A `DevicePolicy` specifies requirements for requests from

        devices to be granted access levels, it does not do any enforcement on the

        device. `DevicePolicy` acts as an AND over all specified fields, and each

        repeated field is an OR over its elements. Any unset fields are ignored. For

        example, if the proto is { os_type : DESKTOP_WINDOWS, os_type :

        DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be

        true for requests originating from encrypted Linux desktops and encrypted

        Windows desktops.
      properties:
        allowedDeviceManagementLevels:
          description: >-
            Allowed device management levels, an empty list allows all
            management

            levels.
          items:
            enum:
              - MANAGEMENT_UNSPECIFIED
              - NONE
              - BASIC
              - COMPLETE
            type: string
          type: array
        allowedEncryptionStatuses:
          description: Allowed encryptions statuses, an empty list allows all statuses.
          items:
            enum:
              - ENCRYPTION_UNSPECIFIED
              - ENCRYPTION_UNSUPPORTED
              - UNENCRYPTED
              - ENCRYPTED
            type: string
          type: array
        osConstraints:
          description: Allowed OS versions, an empty list allows all types and all versions.
          items:
            $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1OsConst\
              raint"
          type: array
        requireAdminApproval:
          description: Whether the device needs to be approved by the customer admin.
          type: boolean
        requireCorpOwned:
          description: Whether the device needs to be corp owned.
          type: boolean
        requireScreenlock:
          description: >-
            Whether or not screenlock is required for the DevicePolicy to be
            true.

            Defaults to `false`.
          type: boolean
      type: object
    GoogleIdentityAccesscontextmanagerV1OsConstraint:
      description: A restriction on the OS type and version of devices making requests.
      properties:
        minimumVersion:
          description: |-
            The minimum allowed OS version. If not set, any version of this OS
            satisfies the constraint. Format: `"major.minor.patch"`.
            Examples: `"10.5.301"`, `"9.2.1"`.
          type: string
        osType:
          description: Required. The allowed OS type.
          enum:
            - OS_UNSPECIFIED
            - DESKTOP_MAC
            - DESKTOP_WINDOWS
            - DESKTOP_LINUX
            - DESKTOP_CHROME_OS
          type: string
        requireVerifiedChromeOs:
          description: >-
            Only allows requests from devices with a verified Chrome OS.

            Verifications includes requirements that the device is enterprise-managed,

            conformant to Dasher domain policies, and the caller has permission to call

            the API targeted by the request.
          type: boolean
      type: object
    GoogleIdentityAccesscontextmanagerV1ServicePerimeter:
      description: >-
        `ServicePerimeter` describes a set of GCP resources which can freely
        import

        and export data amongst themselves, but not export outside of the

        `ServicePerimeter`. If a request with a source within this `ServicePerimeter`

        has a target outside of the `ServicePerimeter`, the request will be blocked.

        Otherwise the request is allowed. There are two types of Service Perimeter -

        Regular and Bridge. Regular Service Perimeters cannot overlap, a single GCP

        project can only belong to a single regular Service Perimeter. Service

        Perimeter Bridges can contain only GCP projects as members, a single GCP

        project may belong to multiple Service Perimeter Bridges.
      properties:
        createTime:
          description: Output only. Time the `ServicePerimeter` was created in UTC.
          format: google-datetime
          type: string
        description:
          description: |-
            Description of the `ServicePerimeter` and its use. Does not affect
            behavior.
          type: string
        name:
          description: >-
            Required. Resource name for the ServicePerimeter.  The `short_name`

            component must begin with a letter and only include alphanumeric and '_'.

            Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
          type: string
        perimeterType:
          description: >-
            Perimeter type indicator. A single project is

            allowed to be a member of single regular perimeter, but multiple service

            perimeter bridges. A project cannot be a included in a perimeter bridge

            without being included in regular perimeter. For perimeter bridges,

            the restricted service list as well as access level lists must be

            empty.
          enum:
            - PERIMETER_TYPE_REGULAR
            - PERIMETER_TYPE_BRIDGE
          type: string
        status:
          $ref: "#/components/schemas/GoogleIdentityAccesscontextmanagerV1ServicePe\
            rimeterConfig"
        title:
          description: Human readable title. Must be unique within the Policy.
          type: string
        updateTime:
          description: Output only. Time the `ServicePerimeter` was updated in UTC.
          format: google-datetime
          type: string
      type: object
    GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig:
      description: |-
        `ServicePerimeterConfig` specifies a set of GCP resources that describe
        specific Service Perimeter configuration.
      properties:
        accessLevels:
          description: >-
            A list of `AccessLevel` resource names that allow resources within
            the

            `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed

            must be in the same policy as this `ServicePerimeter`. Referencing a

            nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are

            listed, resources within the perimeter can only be accessed via GCP calls

            with request origins within the perimeter. Example:

            `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`.

            For Service Perimeter Bridge, must be empty.
          items:
            type: string
          type: array
        resources:
          description: >-
            A list of GCP resources that are inside of the service perimeter.

            Currently only projects are allowed. Format: `projects/{project_number}`
          items:
            type: string
          type: array
        restrictedServices:
          description: >-
            GCP services that are subject to the Service Perimeter restrictions.
            For

            example, if `storage.googleapis.com` is specified, access to the storage

            buckets inside the perimeter must meet the perimeter's access restrictions.
          items:
            type: string
          type: array
      type: object
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a

        network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress.

            If `true`, the operation is completed, and either `error` or `response` is

            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation.  It
            typically

            contains progress information and common metadata such as create time.

            Some services might not provide such metadata.  Any method that returns a

            long-running operation should document the metadata type, if any.
          type: object
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that

            originally returns it. If you use the default HTTP mapping, the

            `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The normal response of the operation in case of success.  If the
            original

            method returns no data on success, such as `Delete`, the response is

            `google.protobuf.Empty`.  If the original method is standard

            `Get`/`Create`/`Update`, the response should be the resource.  For other

            methods, the response should have the type `XxxResponse`, where `Xxx`

            is the original method name.  For example, if the original method name

            is `TakeSnapshot()`, the inferred response type is

            `TakeSnapshotResponse`.
          type: object
      type: object
    OutputConfig:
      description: Output configuration for export assets destination.
      properties:
        bigqueryDestination:
          $ref: "#/components/schemas/BigQueryDestination"
        gcsDestination:
          $ref: "#/components/schemas/GcsDestination"
      type: object
    Policy:
      description: >-
        Defines an Identity and Access Management (IAM) policy. It is used to

        specify access control policies for Cloud Platform resources.



        A `Policy` is a collection of `bindings`. A `binding` binds one or more

        `members` to a single `role`. Members can be user accounts, service accounts,

        Google groups, and domains (such as G Suite). A `role` is a named list of

        permissions (defined by IAM or configured by users). A `binding` can

        optionally specify a `condition`, which is a logic expression that further

        constrains the role binding based on attributes about the request and/or

        target resource.


        **JSON Example**

            {
              "bindings": [
                {
                  "role": "role/resourcemanager.organizationAdmin",
                  "members": [
                    "user:mike@example.com",
                    "group:admins@example.com",
                    "domain:google.com",
                    "serviceAccount:my-project-id@appspot.gserviceaccount.com"
                  ]
                },
                {
                  "role": "roles/resourcemanager.organizationViewer",
                  "members": ["user:eve@example.com"],
                  "condition": {
                    "title": "expirable access",
                    "description": "Does not grant access after Sep 2020",
                    "expression": "request.time <
                    timestamp('2020-10-01T00:00:00.000Z')",
                  }
                }
              ]
            }

        **YAML Example**

            bindings:
            - members:
              - user:mike@example.com
              - group:admins@example.com
              - domain:google.com
              - serviceAccount:my-project-id@appspot.gserviceaccount.com
              role: roles/resourcemanager.organizationAdmin
            - members:
              - user:eve@example.com
              role: roles/resourcemanager.organizationViewer
              condition:
                title: expirable access
                description: Does not grant access after Sep 2020
                expression: request.time < timestamp('2020-10-01T00:00:00.000Z')

        For a description of IAM and its features, see the

        [IAM developer's guide](https://cloud.google.com/iam/docs).
      properties:
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          items:
            $ref: "#/components/schemas/AuditConfig"
          type: array
        bindings:
          description: |-
            Associates a list of `members` to a `role`. Optionally may specify a
            `condition` that determines when binding is in effect.
            `bindings` with no members will result in an error.
          items:
            $ref: "#/components/schemas/Binding"
          type: array
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help

            prevent simultaneous updates of a policy from overwriting each other.

            It is strongly suggested that systems make use of the `etag` in the

            read-modify-write cycle to perform policy updates in order to avoid race

            conditions: An `etag` is returned in the response to `getIamPolicy`, and

            systems are expected to put that etag in the request to `setIamPolicy` to

            ensure that their change will be applied to the same version of the policy.


            If no `etag` is provided in the call to `setIamPolicy`, then the existing

            policy is overwritten. Due to blind-set semantics of an etag-less policy,

            'setIamPolicy' will not fail even if either of incoming or stored policy

            does not meet the version requirements.
          format: byte
          type: string
        version:
          description: >-
            Specifies the format of the policy.


            Valid values are 0, 1, and 3. Requests specifying an invalid value will be

            rejected.


            Operations affecting conditional bindings must specify version 3. This can

            be either setting a conditional policy, modifying a conditional binding,

            or removing a conditional binding from the stored conditional policy.

            Operations on non-conditional policies may specify any valid value or

            leave the field unset.


            If no etag is provided in the call to `setIamPolicy`, any version

            compliance checks on the incoming and/or stored policy is skipped.
          format: int32
          type: integer
      type: object
    Resource:
      description: Representation of a cloud resource.
      properties:
        data:
          additionalProperties:
            description: Properties of the object.
          description: >-
            The content of the resource, in which some sensitive fields are
            scrubbed

            away and may not be present.
          type: object
        discoveryDocumentUri:
          description: >-
            The URL of the discovery document containing the resource's JSON
            schema.

            For example:

            `"https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"`.

            It will be left unspecified for resources without a discovery-based API,

            such as Cloud Bigtable.
          type: string
        discoveryName:
          description: >-
            The JSON schema name listed in the discovery document.

            Example: "Project". It will be left unspecified for resources (such as

            Cloud Bigtable) without a discovery-based API.
          type: string
        parent:
          description: >-
            The full name of the immediate parent of this resource. See

            [Resource

            Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)

            for more information.


            For GCP assets, it is the parent resource defined in the [Cloud IAM policy

            hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).

            For example:

            `"//cloudresourcemanager.googleapis.com/projects/my_project_123"`.


            For third-party assets, it is up to the users to define.
          type: string
        resourceUrl:
          description: >-
            The REST URL for accessing the resource. An HTTP GET operation using
            this

            URL returns the resource itself.

            Example:

            `https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123`.

            It will be left unspecified for resources without a REST API.
          type: string
        version:
          description: 'The API version. Example: "v1".'
          type: string
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    TemporalAsset:
      description: >-
        Temporal asset. In addition to the asset, the temporal asset includes
        the

        status of the asset and valid from and to time of it.
      properties:
        asset:
          $ref: "#/components/schemas/Asset"
        deleted:
          description: If the asset is deleted or not.
          type: boolean
        window:
          $ref: "#/components/schemas/TimeWindow"
      type: object
    TimeWindow:
      description: A time window of (start_time, end_time].
      properties:
        endTime:
          description: |-
            End time of the time window (inclusive).
            Current timestamp if not specified.
          format: google-datetime
          type: string
        startTime:
          description: Start time of the time window (exclusive).
          format: google-datetime
          type: string
      type: object
