openapi: 3.0.0
info:
  version: 2014-11-13
  x-release: v4
  title: Amazon EC2 Container Service
  description: <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic
    Container Service (Amazon ECS) is a highly scalable, fast, container
    management service that makes it easy to run, stop, and manage Docker
    containers on a cluster. You can host your cluster on a serverless
    infrastructure that is managed by Amazon ECS by launching your services or
    tasks using the Fargate launch type. For more control, you can host your
    tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) instances
    that you manage by using the EC2 launch type. For more information about
    launch types, see <a
    href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon
    ECS Launch Types</a>.</p> <p>Amazon ECS lets you launch and stop
    container-based applications with simple API calls, allows you to get the
    state of your cluster from a centralized service, and gives you access to
    many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS to schedule
    the placement of containers across your cluster based on your resource
    needs, isolation policies, and availability requirements. Amazon ECS
    eliminates the need for you to operate your own cluster management and
    configuration management systems or worry about scaling your management
    infrastructure.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: ecs
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecs-2014-11-13.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/ecs/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateCluster:
    post:
      operationId: CreateCluster
      description: <p>Creates a new Amazon ECS cluster. By default, your account receives a
        <code>default</code> cluster when you launch your first container
        instance. However, you can create your own cluster with a unique name
        with the <code>CreateCluster</code> action.</p> <note> <p>When you call
        the <a>CreateCluster</a> API operation, Amazon ECS attempts to create
        the service-linked role for your account so that required resources in
        other AWS services can be managed on your behalf. However, if the IAM
        user that makes the call does not have permissions to create the
        service-linked role, it is not created. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Using
        Service-Linked Roles for Amazon ECS</a> in the <i>Amazon Elastic
        Container Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateClusterResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.CreateCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClusterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateService:
    post:
      operationId: CreateService
      description: <p>Runs and maintains a desired number of tasks from a specified task
        definition. If the number of tasks running in a service drops below the
        <code>desiredCount</code>, Amazon ECS runs another copy of the task in
        the specified cluster. To update an existing service, see
        <a>UpdateService</a>.</p> <p>In addition to maintaining the desired
        count of tasks in your service, you can optionally run your service
        behind one or more load balancers. The load balancers distribute traffic
        across the tasks that are associated with the service. For more
        information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html">Service
        Load Balancing</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p> <p>Tasks for services that <i>do not</i> use a load
        balancer are considered healthy if they're in the <code>RUNNING</code>
        state. Tasks for services that <i>do</i> use a load balancer are
        considered healthy if they're in the <code>RUNNING</code> state and the
        container instance that they're hosted on is reported as healthy by the
        load balancer.</p> <p>There are two service scheduler strategies
        available:</p> <ul> <li> <p> <code>REPLICA</code> - The replica
        scheduling strategy places and maintains the desired number of tasks
        across your cluster. By default, the service scheduler spreads tasks
        across Availability Zones. You can use task placement strategies and
        constraints to customize task placement decisions. For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Service
        Scheduler Concepts</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> </li> <li> <p> <code>DAEMON</code> - The daemon
        scheduling strategy deploys exactly one task on each active container
        instance that meets all of the task placement constraints that you
        specify in your cluster. When using this strategy, you don't need to
        specify a desired number of tasks, a task placement strategy, or use
        Service Auto Scaling policies. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Service
        Scheduler Concepts</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> </li> </ul> <p>You can optionally specify a
        deployment configuration for your service. The deployment is triggered
        by changing properties, such as the task definition or the desired count
        of a service, with an <a>UpdateService</a> operation. The default value
        for a replica service for <code>minimumHealthyPercent</code> is 100%.
        The default value for a daemon service for
        <code>minimumHealthyPercent</code> is 0%.</p> <p>If a service is using
        the <code>ECS</code> deployment controller, the minimum healthy percent
        represents a lower limit on the number of tasks in a service that must
        remain in the <code>RUNNING</code> state during a deployment, as a
        percentage of the desired number of tasks (rounded up to the nearest
        integer), and while any container instances are in the
        <code>DRAINING</code> state if the service contains tasks using the EC2
        launch type. This parameter enables you to deploy without using
        additional cluster capacity. For example, if your service has a desired
        number of four tasks and a minimum healthy percent of 50%, the scheduler
        might stop two existing tasks to free up cluster capacity before
        starting two new tasks. Tasks for services that <i>do not</i> use a load
        balancer are considered healthy if they're in the <code>RUNNING</code>
        state. Tasks for services that <i>do</i> use a load balancer are
        considered healthy if they're in the <code>RUNNING</code> state and
        they're reported as healthy by the load balancer. The default value for
        minimum healthy percent is 100%.</p> <p>If a service is using the
        <code>ECS</code> deployment controller, the <b>maximum percent</b>
        parameter represents an upper limit on the number of tasks in a service
        that are allowed in the <code>RUNNING</code> or <code>PENDING</code>
        state during a deployment, as a percentage of the desired number of
        tasks (rounded down to the nearest integer), and while any container
        instances are in the <code>DRAINING</code> state if the service contains
        tasks using the EC2 launch type. This parameter enables you to define
        the deployment batch size. For example, if your service has a desired
        number of four tasks and a maximum percent value of 200%, the scheduler
        may start four new tasks before stopping the four older tasks (provided
        that the cluster resources required to do this are available). The
        default value for maximum percent is 200%.</p> <p>If a service is using
        either the <code>CODE_DEPLOY</code> or <code>EXTERNAL</code> deployment
        controller types and tasks that use the EC2 launch type, the <b>minimum
        healthy percent</b> and <b>maximum percent</b> values are used only to
        define the lower and upper limit on the number of the tasks in the
        service that remain in the <code>RUNNING</code> state while the
        container instances are in the <code>DRAINING</code> state. If the tasks
        in the service use the Fargate launch type, the minimum healthy percent
        and maximum percent values aren't used, although they're currently
        visible when describing your service.</p> <p>When creating a service
        that uses the <code>EXTERNAL</code> deployment controller, you can
        specify only parameters that aren't controlled at the task set level.
        The only required parameter is the service name. You control your
        services using the <a>CreateTaskSet</a> operation. For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> <p>When the service scheduler launches new
        tasks, it determines task placement in your cluster using the following
        logic:</p> <ul> <li> <p>Determine which of the container instances in
        your cluster can support your service's task definition (for example,
        they have the required CPU, memory, ports, and container instance
        attributes).</p> </li> <li> <p>By default, the service scheduler
        attempts to balance tasks across Availability Zones in this manner
        (although you can choose a different placement strategy) with the
        <code>placementStrategy</code> parameter):</p> <ul> <li> <p>Sort the
        valid container instances, giving priority to instances that have the
        fewest number of running tasks for this service in their respective
        Availability Zone. For example, if zone A has one running service task
        and zones B and C each have zero, valid container instances in either
        zone B or C are considered optimal for placement.</p> </li> <li>
        <p>Place the new service task on a valid container instance in an
        optimal Availability Zone (based on the previous steps), favoring
        container instances with the fewest number of running tasks for this
        service.</p> </li> </ul> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateServiceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: PlatformUnknownException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformUnknownException"
        "486":
          description: PlatformTaskDefinitionIncompatibilityException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformTaskDefinitionIncompatibilityEx\
                  ception"
        "487":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.CreateService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateTaskSet:
    post:
      operationId: CreateTaskSet
      description: Create a task set in the specified cluster and service. This is used
        when a service uses the <code>EXTERNAL</code> deployment controller
        type. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTaskSetResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: PlatformUnknownException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformUnknownException"
        "486":
          description: PlatformTaskDefinitionIncompatibilityException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformTaskDefinitionIncompatibilityEx\
                  ception"
        "487":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "488":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
        "489":
          description: ServiceNotActiveException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotActiveException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.CreateTaskSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskSetRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteAccountSetting:
    post:
      operationId: DeleteAccountSetting
      description: Disables an account setting for a specified IAM user, IAM role, or the
        root user for an account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAccountSettingResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeleteAccountSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteAccountSettingRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteAttributes:
    post:
      operationId: DeleteAttributes
      description: Deletes one or more custom attributes from an Amazon ECS resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAttributesResponse"
        "480":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "481":
          description: TargetNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetNotFoundException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeleteAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteCluster:
    post:
      operationId: DeleteCluster
      description: Deletes the specified cluster. You must deregister all container
        instances from this cluster before you may delete it. You can list the
        container instances in a cluster with <a>ListContainerInstances</a> and
        deregister them with <a>DeregisterContainerInstance</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteClusterResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: ClusterContainsContainerInstancesException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterContainsContainerInstancesExcept\
                  ion"
        "485":
          description: ClusterContainsServicesException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterContainsServicesException"
        "486":
          description: ClusterContainsTasksException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterContainsTasksException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeleteCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteClusterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteService:
    post:
      operationId: DeleteService
      description: <p>Deletes a specified service within a cluster. You can delete a
        service if you have no running tasks in it and the desired task count is
        zero. If the service is actively maintaining tasks, you cannot delete
        it, and you must update the service to a desired task count of zero. For
        more information, see <a>UpdateService</a>.</p> <note> <p>When you
        delete a service, if there are still running tasks that require cleanup,
        the service status moves from <code>ACTIVE</code> to
        <code>DRAINING</code>, and the service is no longer visible in the
        console or in the <a>ListServices</a> API operation. After all tasks
        have transitioned to either <code>STOPPING</code> or
        <code>STOPPED</code> status, the service status moves from
        <code>DRAINING</code> to <code>INACTIVE</code>. Services in the
        <code>DRAINING</code> or <code>INACTIVE</code> status can still be
        viewed with the <a>DescribeServices</a> API operation. However, in the
        future, <code>INACTIVE</code> services may be cleaned up and purged from
        Amazon ECS record keeping, and <a>DescribeServices</a> calls on those
        services return a <code>ServiceNotFoundException</code> error.</p>
        </note> <important> <p>If you attempt to create a new service with the
        same name as an existing service in either <code>ACTIVE</code> or
        <code>DRAINING</code> status, you receive an error.</p> </important>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteServiceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeleteService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteServiceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteTaskSet:
    post:
      operationId: DeleteTaskSet
      description: Deletes a specified task set within a service. This is used when a
        service uses the <code>EXTERNAL</code> deployment controller type. For
        more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTaskSetResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "486":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
        "487":
          description: ServiceNotActiveException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotActiveException"
        "488":
          description: TaskSetNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskSetNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeleteTaskSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTaskSetRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeregisterContainerInstance:
    post:
      operationId: DeregisterContainerInstance
      description: <p>Deregisters an Amazon ECS container instance from the specified
        cluster. This instance is no longer available to run tasks.</p> <p>If
        you intend to use the container instance for some other purpose after
        deregistration, you should stop all of the tasks running on the
        container instance before deregistration. That prevents any orphaned
        tasks from consuming resources.</p> <p>Deregistering a container
        instance removes the instance from a cluster, but it does not terminate
        the EC2 instance. If you are finished using the instance, be sure to
        terminate it in the Amazon EC2 console to stop billing.</p> <note> <p>If
        you terminate a running container instance, Amazon ECS automatically
        deregisters the instance from your cluster (stopped container instances
        or instances with disconnected agents are not automatically deregistered
        when terminated).</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeregisterContainerInstanceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeregisterContainerInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeregisterContainerInstanceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeregisterTaskDefinition:
    post:
      operationId: DeregisterTaskDefinition
      description: <p>Deregisters the specified task definition by family and revision.
        Upon deregistration, the task definition is marked as
        <code>INACTIVE</code>. Existing tasks and services that reference an
        <code>INACTIVE</code> task definition continue to run without
        disruption. Existing services that reference an <code>INACTIVE</code>
        task definition can still scale up or down by modifying the service's
        desired count.</p> <p>You cannot use an <code>INACTIVE</code> task
        definition to run new tasks or create new services, and you cannot
        update an existing service to reference an <code>INACTIVE</code> task
        definition. However, there may be up to a 10-minute window following
        deregistration where these restrictions have not yet taken effect.</p>
        <note> <p>At this time, <code>INACTIVE</code> task definitions remain
        discoverable in your account indefinitely. However, this behavior is
        subject to change in the future, so you should not rely on
        <code>INACTIVE</code> task definitions persisting beyond the lifecycle
        of any associated tasks and services.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeregisterTaskDefinitionResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DeregisterTaskDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeregisterTaskDefinitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeClusters:
    post:
      operationId: DescribeClusters
      description: Describes one or more of your clusters.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeClustersResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DescribeClusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeClustersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeContainerInstances:
    post:
      operationId: DescribeContainerInstances
      description: Describes Amazon Elastic Container Service container instances. Returns
        metadata about registered and remaining resources on each container
        instance requested.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeContainerInstancesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DescribeContainerInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeContainerInstancesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeServices:
    post:
      operationId: DescribeServices
      description: Describes the specified services running in your cluster.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeServicesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DescribeServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeServicesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTaskDefinition:
    post:
      operationId: DescribeTaskDefinition
      description: <p>Describes a task definition. You can specify a <code>family</code>
        and <code>revision</code> to find information about a specific task
        definition, or you can simply specify the family to find the latest
        <code>ACTIVE</code> revision in that family.</p> <note> <p>You can only
        describe <code>INACTIVE</code> task definitions while an active task or
        service references them.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTaskDefinitionResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DescribeTaskDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeTaskDefinitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTaskSets:
    post:
      operationId: DescribeTaskSets
      description: Describes the task sets in the specified cluster and service. This is
        used when a service uses the <code>EXTERNAL</code> deployment controller
        type. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTaskSetsResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "486":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
        "487":
          description: ServiceNotActiveException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotActiveException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DescribeTaskSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeTaskSetsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTasks:
    post:
      operationId: DescribeTasks
      description: Describes a specified task or tasks.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTasksResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DescribeTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeTasksRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DiscoverPollEndpoint:
    post:
      operationId: DiscoverPollEndpoint
      description: <note> <p>This action is only used by the Amazon ECS agent, and it is
        not intended for use outside of the agent.</p> </note> <p>Returns an
        endpoint for the Amazon ECS agent to poll for updates.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscoverPollEndpointResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.DiscoverPollEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscoverPollEndpointRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListAccountSettings:
    post:
      operationId: ListAccountSettings
      description: Lists the account settings for a specified principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountSettingsResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListAccountSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListAccountSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListAttributes:
    post:
      operationId: ListAttributes
      description: "Lists the attributes for Amazon ECS resources within a specified target
        type and cluster. When you specify a target type and cluster,
        <code>ListAttributes</code> returns a list of attribute objects, one for
        each attribute on each resource. You can filter the list of results to a
        single attribute name to only return results that have that name. You
        can also filter the results by attribute name and value, for example, to
        see which container instances in a cluster are running a Linux AMI
        (<code>ecs.os-type=linux</code>). "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAttributesResponse"
        "480":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListClusters:
    post:
      operationId: ListClusters
      description: Returns a list of existing clusters.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListClustersResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListClusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListClustersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListContainerInstances:
    post:
      operationId: ListContainerInstances
      description: Returns a list of container instances in a specified cluster. You can
        filter the results of a <code>ListContainerInstances</code> operation
        with cluster query language statements inside the <code>filter</code>
        parameter. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html">Cluster
        Query Language</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListContainerInstancesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListContainerInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListContainerInstancesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListServices:
    post:
      operationId: ListServices
      description: Lists the services that are running in a specified cluster.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListServicesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListServicesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: List the tags for an Amazon ECS resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTaskDefinitionFamilies:
    post:
      operationId: ListTaskDefinitionFamilies
      description: <p>Returns a list of task definition families that are registered to
        your account (which may include task definition families that no longer
        have any <code>ACTIVE</code> task definition revisions).</p> <p>You can
        filter out task definition families that do not contain any
        <code>ACTIVE</code> task definition revisions by setting the
        <code>status</code> parameter to <code>ACTIVE</code>. You can also
        filter the results with the <code>familyPrefix</code> parameter.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTaskDefinitionFamiliesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListTaskDefinitionFamilies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTaskDefinitionFamiliesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTaskDefinitions:
    post:
      operationId: ListTaskDefinitions
      description: Returns a list of task definitions that are registered to your account.
        You can filter the results by family name with the
        <code>familyPrefix</code> parameter or by status with the
        <code>status</code> parameter.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTaskDefinitionsResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListTaskDefinitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTaskDefinitionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTasks:
    post:
      operationId: ListTasks
      description: <p>Returns a list of tasks for a specified cluster. You can filter the
        results by family name, by a particular container instance, or by the
        desired status of the task with the <code>family</code>,
        <code>containerInstance</code>, and <code>desiredStatus</code>
        parameters.</p> <p>Recently stopped tasks might appear in the returned
        results. Currently, stopped tasks appear in the returned results for at
        least one hour. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTasksResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.ListTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTasksRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAccountSetting:
    post:
      operationId: PutAccountSetting
      description: <p>Modifies an account setting. Account settings are set on a per-Region
        basis.</p> <p>If you change the account setting for the root user, the
        default settings for all of the IAM users and roles for which no
        individual account setting has been specified are reset. For more
        information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html">Account
        Settings</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p> <p>When <code>serviceLongArnFormat</code>,
        <code>taskLongArnFormat</code>, or
        <code>containerInstanceLongArnFormat</code> are specified, the Amazon
        Resource Name (ARN) and resource ID format of the resource type for a
        specified IAM user, IAM role, or the root user for an account is
        affected. The opt-in and opt-out account setting must be set for each
        Amazon ECS resource separately. The ARN and resource ID format of a
        resource will be defined by the opt-in status of the IAM user or role
        that created the resource. You must enable this setting to use Amazon
        ECS features such as resource tagging.</p> <p>When
        <code>awsvpcTrunking</code> is specified, the elastic network interface
        (ENI) limit for any new container instances that support the feature is
        changed. If <code>awsvpcTrunking</code> is enabled, any new container
        instances that support the feature are launched have the increased ENI
        limits available to them. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html">Elastic
        Network Interface Trunking</a> in the <i>Amazon Elastic Container
        Service Developer Guide</i>.</p> <p>When <code>containerInsights</code>
        is specified, the default setting indicating whether CloudWatch
        Container Insights is enabled for your clusters is changed. If
        <code>containerInsights</code> is enabled, any new clusters that are
        created will have Container Insights enabled unless you disable it
        during cluster creation. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html">CloudWatch
        Container Insights</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutAccountSettingResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.PutAccountSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutAccountSettingRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAccountSettingDefault:
    post:
      operationId: PutAccountSettingDefault
      description: Modifies an account setting for all IAM users on an account for whom no
        individual account setting has been specified. Account settings are set
        on a per-Region basis.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutAccountSettingDefaultResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.PutAccountSettingDefault
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutAccountSettingDefaultRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAttributes:
    post:
      operationId: PutAttributes
      description: Create or update an attribute on an Amazon ECS resource. If the
        attribute does not exist, it is created. If the attribute exists, its
        value is replaced with the specified value. To delete an attribute, use
        <a>DeleteAttributes</a>. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes">Attributes</a>
        in the <i>Amazon Elastic Container Service Developer Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutAttributesResponse"
        "480":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "481":
          description: TargetNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetNotFoundException"
        "482":
          description: AttributeLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeLimitExceededException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.PutAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutAttributesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterContainerInstance:
    post:
      operationId: RegisterContainerInstance
      description: <note> <p>This action is only used by the Amazon ECS agent, and it is
        not intended for use outside of the agent.</p> </note> <p>Registers an
        EC2 instance into the specified cluster. This instance becomes available
        to place containers on.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterContainerInstanceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.RegisterContainerInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterContainerInstanceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterTaskDefinition:
    post:
      operationId: RegisterTaskDefinition
      description: <p>Registers a new task definition from the supplied <code>family</code>
        and <code>containerDefinitions</code>. Optionally, you can add data
        volumes to your containers with the <code>volumes</code> parameter. For
        more information about task definition parameters and defaults, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html">Amazon
        ECS Task Definitions</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> <p>You can specify an IAM role for your task
        with the <code>taskRoleArn</code> parameter. When you specify an IAM
        role for a task, its containers can then use the latest versions of the
        AWS CLI or SDKs to make API requests to the AWS services that are
        specified in the IAM policy associated with the role. For more
        information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM
        Roles for Tasks</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p> <p>You can specify a Docker networking mode for the
        containers in your task definition with the <code>networkMode</code>
        parameter. The available network modes correspond to those described in
        <a
        href="https://docs.docker.com/engine/reference/run/#/network-settings">Network
        settings</a> in the Docker run reference. If you specify the
        <code>awsvpc</code> network mode, the task is allocated an elastic
        network interface, and you must specify a <a>NetworkConfiguration</a>
        when you create a service or run a task with the task definition. For
        more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task
        Networking</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterTaskDefinitionResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.RegisterTaskDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterTaskDefinitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RunTask:
    post:
      operationId: RunTask
      description: <p>Starts a new task using the specified task definition.</p> <p>You can
        allow Amazon ECS to place tasks for you, or you can customize how Amazon
        ECS places tasks using placement constraints and placement strategies.
        For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html">Scheduling
        Tasks</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p> <p>Alternatively, you can use <a>StartTask</a> to use
        your own scheduler or place tasks manually on specific container
        instances.</p> <p>The Amazon ECS API follows an eventual consistency
        model, due to the distributed nature of the system supporting the API.
        This means that the result of an API command you run that affects your
        Amazon ECS resources might not be immediately visible to all subsequent
        commands you run. Keep this in mind when you carry out an API command
        that immediately follows a previous API command.</p> <p>To manage
        eventual consistency, you can do the following:</p> <ul> <li> <p>Confirm
        the state of the resource before you run a command to modify it. Run the
        DescribeTasks command using an exponential backoff algorithm to ensure
        that you allow enough time for the previous command to propagate through
        the system. To do this, run the DescribeTasks command repeatedly,
        starting with a couple of seconds of wait time and increasing gradually
        up to five minutes of wait time.</p> </li> <li> <p>Add wait time between
        subsequent commands, even if the DescribeTasks command returns an
        accurate response. Apply an exponential backoff algorithm starting with
        a couple of seconds of wait time, and increase gradually up to about
        five minutes of wait time.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunTaskResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: PlatformUnknownException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformUnknownException"
        "486":
          description: PlatformTaskDefinitionIncompatibilityException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformTaskDefinitionIncompatibilityEx\
                  ception"
        "487":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "488":
          description: BlockedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.RunTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunTaskRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.StartTask:
    post:
      operationId: StartTask
      description: <p>Starts a new task from the specified task definition on the specified
        container instance or instances.</p> <p>Alternatively, you can use
        <a>RunTask</a> to place tasks for you. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html">Scheduling
        Tasks</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartTaskResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.StartTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartTaskRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.StopTask:
    post:
      operationId: StopTask
      description: <p>Stops a running task. Any tags associated with the task will be
        deleted.</p> <p>When <a>StopTask</a> is called on a task, the equivalent
        of <code>docker stop</code> is issued to the containers running in the
        task. This results in a <code>SIGTERM</code> value and a default
        30-second timeout, after which the <code>SIGKILL</code> value is sent
        and the containers are forcibly stopped. If the container handles the
        <code>SIGTERM</code> value gracefully and exits within 30 seconds from
        receiving it, no <code>SIGKILL</code> value is sent.</p> <note> <p>The
        default 30-second timeout can be configured on the Amazon ECS container
        agent with the <code>ECS_CONTAINER_STOP_TIMEOUT</code> variable. For
        more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html">Amazon
        ECS Container Agent Configuration</a> in the <i>Amazon Elastic Container
        Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopTaskResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.StopTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopTaskRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitAttachmentStateChanges:
    post:
      operationId: SubmitAttachmentStateChanges
      description: <note> <p>This action is only used by the Amazon ECS agent, and it is
        not intended for use outside of the agent.</p> </note> <p>Sent to
        acknowledge that an attachment changed states.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitAttachmentStateChangesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.SubmitAttachmentStateChanges
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitAttachmentStateChangesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange:
    post:
      operationId: SubmitContainerStateChange
      description: <note> <p>This action is only used by the Amazon ECS agent, and it is
        not intended for use outside of the agent.</p> </note> <p>Sent to
        acknowledge that a container changed states.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitContainerStateChangeResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitContainerStateChangeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitTaskStateChange:
    post:
      operationId: SubmitTaskStateChange
      description: <note> <p>This action is only used by the Amazon ECS agent, and it is
        not intended for use outside of the agent.</p> </note> <p>Sent to
        acknowledge that a task changed states.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitTaskStateChangeResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.SubmitTaskStateChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitTaskStateChangeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.TagResource:
    post:
      operationId: TagResource
      description: Associates the specified tags to a resource with the specified
        <code>resourceArn</code>. If existing tags on a resource are not
        specified in the request parameters, they are not changed. When a
        resource is deleted, the tags associated with that resource are deleted
        as well.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UntagResource:
    post:
      operationId: UntagResource
      description: Deletes specified tags from a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateClusterSettings:
    post:
      operationId: UpdateClusterSettings
      description: Modifies the settings to use for a cluster.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateClusterSettingsResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "483":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UpdateClusterSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClusterSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerAgent:
    post:
      operationId: UpdateContainerAgent
      description: <p>Updates the Amazon ECS container agent on a specified container
        instance. Updating the Amazon ECS container agent does not interrupt
        running tasks or services on the container instance. The process for
        updating the agent differs depending on whether your container instance
        was launched with the Amazon ECS-optimized AMI or another operating
        system.</p> <p> <code>UpdateContainerAgent</code> requires the Amazon
        ECS-optimized AMI or Amazon Linux with the <code>ecs-init</code> service
        installed and running. For help updating the Amazon ECS container agent
        on other operating systems, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent">Manually
        Updating the Amazon ECS Container Agent</a> in the <i>Amazon Elastic
        Container Service Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateContainerAgentResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UpdateInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateInProgressException"
        "485":
          description: NoUpdateAvailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoUpdateAvailableException"
        "486":
          description: MissingVersionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingVersionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UpdateContainerAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContainerAgentRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerInstancesState:
    post:
      operationId: UpdateContainerInstancesState
      description: <p>Modifies the status of an Amazon ECS container instance.</p> <p>Once
        a container instance has reached an <code>ACTIVE</code> state, you can
        change the status of a container instance to <code>DRAINING</code> to
        manually remove an instance from a cluster, for example to perform
        system updates, update the Docker daemon, or scale down the cluster
        size.</p> <important> <p>A container instance cannot be changed to
        <code>DRAINING</code> until it has reached an <code>ACTIVE</code>
        status. If the instance is in any other status, an error will be
        received.</p> </important> <p>When you set a container instance to
        <code>DRAINING</code>, Amazon ECS prevents new tasks from being
        scheduled for placement on the container instance and replacement
        service tasks are started on other container instances in the cluster if
        the resources are available. Service tasks on the container instance
        that are in the <code>PENDING</code> state are stopped immediately.</p>
        <p>Service tasks on the container instance that are in the
        <code>RUNNING</code> state are stopped and replaced according to the
        service's deployment configuration parameters,
        <code>minimumHealthyPercent</code> and <code>maximumPercent</code>. You
        can change the deployment configuration of your service using
        <a>UpdateService</a>.</p> <ul> <li> <p>If
        <code>minimumHealthyPercent</code> is below 100%, the scheduler can
        ignore <code>desiredCount</code> temporarily during task replacement.
        For example, <code>desiredCount</code> is four tasks, a minimum of 50%
        allows the scheduler to stop two existing tasks before starting two new
        tasks. If the minimum is 100%, the service scheduler can't remove
        existing tasks until the replacement tasks are considered healthy. Tasks
        for services that do not use a load balancer are considered healthy if
        they are in the <code>RUNNING</code> state. Tasks for services that use
        a load balancer are considered healthy if they are in the
        <code>RUNNING</code> state and the container instance they are hosted on
        is reported as healthy by the load balancer.</p> </li> <li> <p>The
        <code>maximumPercent</code> parameter represents an upper limit on the
        number of running tasks during task replacement, which enables you to
        define the replacement batch size. For example, if
        <code>desiredCount</code> is four tasks, a maximum of 200% starts four
        new tasks before stopping the four tasks to be drained, provided that
        the cluster resources required to do this are available. If the maximum
        is 100%, then replacement tasks can't start until the draining tasks
        have stopped.</p> </li> </ul> <p>Any <code>PENDING</code> or
        <code>RUNNING</code> tasks that do not belong to a service are not
        affected. You must wait for them to finish or stop them manually.</p>
        <p>A container instance has completed draining when it has no more
        <code>RUNNING</code> tasks. You can verify this using
        <a>ListTasks</a>.</p> <p>When a container instance has been drained, you
        can set a container instance to <code>ACTIVE</code> status and once it
        has reached that status the Amazon ECS scheduler can begin scheduling
        tasks on the instance again.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateContainerInstancesStateResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UpdateContainerInstancesState
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContainerInstancesStateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateService:
    post:
      operationId: UpdateService
      description: "<p>Modifies the parameters of a service.</p> <p>For services using the
        rolling update (<code>ECS</code>) deployment controller, the desired
        count, deployment configuration, network configuration, or task
        definition used can be updated.</p> <p>For services using the blue/green
        (<code>CODE_DEPLOY</code>) deployment controller, only the desired
        count, deployment configuration, and health check grace period can be
        updated using this API. If the network configuration, platform version,
        or task definition need to be updated, a new AWS CodeDeploy deployment
        should be created. For more information, see <a
        href=\"https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_C\
        reateDeployment.html\">CreateDeployment</a> in the <i>AWS CodeDeploy API
        Reference</i>.</p> <p>For services using an external deployment
        controller, you can update only the desired count and health check grace
        period using this API. If the launch type, load balancer, network
        configuration, platform version, or task definition need to be updated,
        you should create a new task set. For more information, see
        <a>CreateTaskSet</a>.</p> <p>You can add to or subtract from the number
        of instantiations of a task definition in a service by specifying the
        cluster that the service is running in and a new
        <code>desiredCount</code> parameter.</p> <p>If you have updated the
        Docker image of your application, you can create a new task definition
        with that image and deploy it to your service. The service scheduler
        uses the minimum healthy percent and maximum percent parameters (in the
        service's deployment configuration) to determine the deployment
        strategy.</p> <note> <p>If your updated Docker image uses the same tag
        as what is in the existing task definition for your service (for
        example, <code>my_image:latest</code>), you do not need to create a new
        revision of your task definition. You can update the service using the
        <code>forceNewDeployment</code> option. The new tasks launched by the
        deployment pull the current image/tag combination from your repository
        when they start.</p> </note> <p>You can also update the deployment
        configuration of a service. When a deployment is triggered by updating
        the task definition of a service, the service scheduler uses the
        deployment configuration parameters, <code>minimumHealthyPercent</code>
        and <code>maximumPercent</code>, to determine the deployment
        strategy.</p> <ul> <li> <p>If <code>minimumHealthyPercent</code> is
        below 100%, the scheduler can ignore <code>desiredCount</code>
        temporarily during a deployment. For example, if
        <code>desiredCount</code> is four tasks, a minimum of 50% allows the
        scheduler to stop two existing tasks before starting two new tasks.
        Tasks for services that do not use a load balancer are considered
        healthy if they are in the <code>RUNNING</code> state. Tasks for
        services that use a load balancer are considered healthy if they are in
        the <code>RUNNING</code> state and the container instance they are
        hosted on is reported as healthy by the load balancer.</p> </li> <li>
        <p>The <code>maximumPercent</code> parameter represents an upper limit
        on the number of running tasks during a deployment, which enables you to
        define the deployment batch size. For example, if
        <code>desiredCount</code> is four tasks, a maximum of 200% starts four
        new tasks before stopping the four older tasks (provided that the
        cluster resources required to do this are available).</p> </li> </ul>
        <p>When <a>UpdateService</a> stops a task during a deployment, the
        equivalent of <code>docker stop</code> is issued to the containers
        running in the task. This results in a <code>SIGTERM</code> and a
        30-second timeout, after which <code>SIGKILL</code> is sent and the
        containers are forcibly stopped. If the container handles the
        <code>SIGTERM</code> gracefully and exits within 30 seconds from
        receiving it, no <code>SIGKILL</code> is sent.</p> <p>When the service
        scheduler launches new tasks, it determines task placement in your
        cluster with the following logic:</p> <ul> <li> <p>Determine which of
        the container instances in your cluster can support your service's task
        definition (for example, they have the required CPU, memory, ports, and
        container instance attributes).</p> </li> <li> <p>By default, the
        service scheduler attempts to balance tasks across Availability Zones in
        this manner (although you can choose a different placement
        strategy):</p> <ul> <li> <p>Sort the valid container instances by the
        fewest number of running tasks for this service in the same Availability
        Zone as the instance. For example, if zone A has one running service
        task and zones B and C each have zero, valid container instances in
        either zone B or C are considered optimal for placement.</p> </li> <li>
        <p>Place the new service task on a valid container instance in an
        optimal Availability Zone (based on the previous steps), favoring
        container instances with the fewest number of running tasks for this
        service.</p> </li> </ul> </li> </ul> <p>When the service scheduler stops
        running tasks, it attempts to maintain balance across the Availability
        Zones in your cluster using the following logic: </p> <ul> <li> <p>Sort
        the container instances by the largest number of running tasks for this
        service in the same Availability Zone as the instance. For example, if
        zone A has one running service task and zones B and C each have two,
        container instances in either zone B or C are considered optimal for
        termination.</p> </li> <li> <p>Stop the task on a container instance in
        an optimal Availability Zone (based on the previous steps), favoring
        container instances with the largest number of running tasks for this
        service.</p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateServiceResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
        "485":
          description: ServiceNotActiveException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotActiveException"
        "486":
          description: PlatformUnknownException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformUnknownException"
        "487":
          description: PlatformTaskDefinitionIncompatibilityException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformTaskDefinitionIncompatibilityEx\
                  ception"
        "488":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UpdateService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServiceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateServicePrimaryTaskSet:
    post:
      operationId: UpdateServicePrimaryTaskSet
      description: Modifies which task set in a service is the primary task set. Any
        parameters that are updated on the primary task set in a service will
        transition to the service. This is used when a service uses the
        <code>EXTERNAL</code> deployment controller type. For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateServicePrimaryTaskSetResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "486":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
        "487":
          description: ServiceNotActiveException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotActiveException"
        "488":
          description: TaskSetNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskSetNotFoundException"
        "489":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UpdateServicePrimaryTaskSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServicePrimaryTaskSetRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateTaskSet:
    post:
      operationId: UpdateTaskSet
      description: Modifies a task set. This is used when a service uses the
        <code>EXTERNAL</code> deployment controller type. For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTaskSetResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: ClusterNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterNotFoundException"
        "484":
          description: UnsupportedFeatureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedFeatureException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "486":
          description: ServiceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotFoundException"
        "487":
          description: ServiceNotActiveException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNotActiveException"
        "488":
          description: TaskSetNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskSetNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerServiceV20141113.UpdateTaskSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskSetRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://ecs.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon ECS multi-region endpoint
  - url: https://ecs.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon ECS multi-region endpoint
  - url: http://ecs.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon ECS endpoint for China (Beijing) and China (Ningxia)
  - url: https://ecs.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon ECS endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateClusterResponse:
      type: object
      example:
        cluster:
          activeServicesCount: 0
          clusterArn: arn:aws:ecs:us-east-1:012345678910:cluster/my_cluster
          clusterName: my_cluster
          pendingTasksCount: 0
          registeredContainerInstancesCount: 0
          runningTasksCount: 0
          status: ACTIVE
      properties:
        cluster:
          $ref: "#/components/schemas/Cluster"
    CreateClusterRequest:
      type: object
      properties:
        clusterName:
          $ref: "#/components/schemas/String"
        tags:
          $ref: "#/components/schemas/Tags"
        settings:
          $ref: "#/components/schemas/ClusterSettings"
    ServerException: {}
    ClientException: {}
    InvalidParameterException: {}
    CreateServiceResponse:
      type: object
      example:
        service:
          clusterArn: arn:aws:ecs:us-east-1:012345678910:cluster/default
          createdAt: 2016-08-29T16:02:54.884Z
          deploymentConfiguration:
            maximumPercent: 200
            minimumHealthyPercent: 100
          deployments:
            - createdAt: 2016-08-29T16:02:54.884Z
              desiredCount: 10
              id: ecs-svc/9223370564343000923
              pendingCount: 0
              runningCount: 0
              status: PRIMARY
              taskDefinition: arn:aws:ecs:us-east-1:012345678910:task-definition/console-sample-app-static:6
              updatedAt: 2016-08-29T16:02:54.884Z
          desiredCount: 10
          events: []
          loadBalancers:
            - containerName: simple-app
              containerPort: 80
              loadBalancerName: EC2Contai-EcsElast-15DCDAURT3ZO2
          pendingCount: 0
          roleArn: arn:aws:iam::012345678910:role/ecsServiceRole
          runningCount: 0
          serviceArn: arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service-elb
          serviceName: ecs-simple-service-elb
          status: ACTIVE
          taskDefinition: arn:aws:ecs:us-east-1:012345678910:task-definition/console-sample-app-static:6
      properties:
        service:
          $ref: "#/components/schemas/Service"
    CreateServiceRequest:
      type: object
      required:
        - serviceName
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        serviceName:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        loadBalancers:
          $ref: "#/components/schemas/LoadBalancers"
        serviceRegistries:
          $ref: "#/components/schemas/ServiceRegistries"
        desiredCount:
          $ref: "#/components/schemas/BoxedInteger"
        clientToken:
          $ref: "#/components/schemas/String"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        role:
          $ref: "#/components/schemas/String"
        deploymentConfiguration:
          $ref: "#/components/schemas/DeploymentConfiguration"
        placementConstraints:
          $ref: "#/components/schemas/PlacementConstraints"
        placementStrategy:
          $ref: "#/components/schemas/PlacementStrategies"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        healthCheckGracePeriodSeconds:
          $ref: "#/components/schemas/BoxedInteger"
        schedulingStrategy:
          $ref: "#/components/schemas/SchedulingStrategy"
        deploymentController:
          $ref: "#/components/schemas/DeploymentController"
        tags:
          $ref: "#/components/schemas/Tags"
        enableECSManagedTags:
          $ref: "#/components/schemas/Boolean"
        propagateTags:
          $ref: "#/components/schemas/PropagateTags"
    ClusterNotFoundException: {}
    UnsupportedFeatureException: {}
    PlatformUnknownException: {}
    PlatformTaskDefinitionIncompatibilityException: {}
    AccessDeniedException: {}
    CreateTaskSetResponse:
      type: object
      properties:
        taskSet:
          $ref: "#/components/schemas/TaskSet"
    CreateTaskSetRequest:
      type: object
      required:
        - service
        - cluster
        - taskDefinition
      properties:
        service:
          $ref: "#/components/schemas/String"
        cluster:
          $ref: "#/components/schemas/String"
        externalId:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        loadBalancers:
          $ref: "#/components/schemas/LoadBalancers"
        serviceRegistries:
          $ref: "#/components/schemas/ServiceRegistries"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        scale:
          $ref: "#/components/schemas/Scale"
        clientToken:
          $ref: "#/components/schemas/String"
    ServiceNotFoundException: {}
    ServiceNotActiveException: {}
    DeleteAccountSettingResponse:
      type: object
      example:
        setting:
          name: containerInstanceLongArnFormat
          value: enabled
          principalArn: arn:aws:iam::<aws_account_id>:user/principalName
      properties:
        setting:
          $ref: "#/components/schemas/Setting"
    DeleteAccountSettingRequest:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/SettingName"
        principalArn:
          $ref: "#/components/schemas/String"
    DeleteAttributesResponse:
      type: object
      properties:
        attributes:
          $ref: "#/components/schemas/Attributes"
    DeleteAttributesRequest:
      type: object
      required:
        - attributes
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        attributes:
          $ref: "#/components/schemas/Attributes"
    TargetNotFoundException: {}
    DeleteClusterResponse:
      type: object
      example:
        cluster:
          activeServicesCount: 0
          clusterArn: arn:aws:ecs:us-east-1:012345678910:cluster/my_cluster
          clusterName: my_cluster
          pendingTasksCount: 0
          registeredContainerInstancesCount: 0
          runningTasksCount: 0
          status: INACTIVE
      properties:
        cluster:
          $ref: "#/components/schemas/Cluster"
    DeleteClusterRequest:
      type: object
      required:
        - cluster
      properties:
        cluster:
          $ref: "#/components/schemas/String"
    ClusterContainsContainerInstancesException: {}
    ClusterContainsServicesException: {}
    ClusterContainsTasksException: {}
    DeleteServiceResponse:
      type: object
      example: {}
      properties:
        service:
          $ref: "#/components/schemas/Service"
    DeleteServiceRequest:
      type: object
      required:
        - service
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        service:
          $ref: "#/components/schemas/String"
        force:
          $ref: "#/components/schemas/BoxedBoolean"
    DeleteTaskSetResponse:
      type: object
      properties:
        taskSet:
          $ref: "#/components/schemas/TaskSet"
    DeleteTaskSetRequest:
      type: object
      required:
        - cluster
        - service
        - taskSet
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        service:
          $ref: "#/components/schemas/String"
        taskSet:
          $ref: "#/components/schemas/String"
        force:
          $ref: "#/components/schemas/BoxedBoolean"
    TaskSetNotFoundException: {}
    DeregisterContainerInstanceResponse:
      type: object
      example: {}
      properties:
        containerInstance:
          $ref: "#/components/schemas/ContainerInstance"
    DeregisterContainerInstanceRequest:
      type: object
      required:
        - containerInstance
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        containerInstance:
          $ref: "#/components/schemas/String"
        force:
          $ref: "#/components/schemas/BoxedBoolean"
    DeregisterTaskDefinitionResponse:
      type: object
      properties:
        taskDefinition:
          $ref: "#/components/schemas/TaskDefinition"
    DeregisterTaskDefinitionRequest:
      type: object
      required:
        - taskDefinition
      properties:
        taskDefinition:
          $ref: "#/components/schemas/String"
    DescribeClustersResponse:
      type: object
      example:
        clusters:
          - clusterArn: arn:aws:ecs:us-east-1:aws_account_id:cluster/default
            clusterName: default
            status: ACTIVE
        failures: []
      properties:
        clusters:
          $ref: "#/components/schemas/Clusters"
        failures:
          $ref: "#/components/schemas/Failures"
    DescribeClustersRequest:
      type: object
      properties:
        clusters:
          $ref: "#/components/schemas/StringList"
        include:
          $ref: "#/components/schemas/ClusterFieldList"
    DescribeContainerInstancesResponse:
      type: object
      example:
        containerInstances:
          - agentConnected: true
            containerInstanceArn: arn:aws:ecs:us-east-1:012345678910:container-instance/f2756532-8f13-4d53-87c9-aed50dc94cd7
            ec2InstanceId: i-807f3249
            pendingTasksCount: 0
            registeredResources:
              - name: CPU
                type: INTEGER
                doubleValue: 0
                integerValue: 2048
                longValue: 0
              - name: MEMORY
                type: INTEGER
                doubleValue: 0
                integerValue: 3768
                longValue: 0
              - name: PORTS
                type: STRINGSET
                doubleValue: 0
                integerValue: 0
                longValue: 0
                stringSetValue:
                  - "2376"
                  - "22"
                  - "51678"
                  - "2375"
            remainingResources:
              - name: CPU
                type: INTEGER
                doubleValue: 0
                integerValue: 1948
                longValue: 0
              - name: MEMORY
                type: INTEGER
                doubleValue: 0
                integerValue: 3668
                longValue: 0
              - name: PORTS
                type: STRINGSET
                doubleValue: 0
                integerValue: 0
                longValue: 0
                stringSetValue:
                  - "2376"
                  - "22"
                  - "80"
                  - "51678"
                  - "2375"
            runningTasksCount: 1
            status: ACTIVE
        failures: []
      properties:
        containerInstances:
          $ref: "#/components/schemas/ContainerInstances"
        failures:
          $ref: "#/components/schemas/Failures"
    DescribeContainerInstancesRequest:
      type: object
      required:
        - containerInstances
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        containerInstances:
          $ref: "#/components/schemas/StringList"
        include:
          $ref: "#/components/schemas/ContainerInstanceFieldList"
    DescribeServicesResponse:
      type: object
      example:
        failures: []
        services:
          - clusterArn: arn:aws:ecs:us-east-1:012345678910:cluster/default
            createdAt: 2016-08-29T16:25:52.130Z
            deploymentConfiguration:
              maximumPercent: 200
              minimumHealthyPercent: 100
            deployments:
              - createdAt: 2016-08-29T16:25:52.130Z
                desiredCount: 1
                id: ecs-svc/9223370564341623665
                pendingCount: 0
                runningCount: 0
                status: PRIMARY
                taskDefinition: arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6
                updatedAt: 2016-08-29T16:25:52.130Z
            desiredCount: 1
            events:
              - createdAt: 2016-08-29T16:25:58.520Z
                id: 38c285e5-d335-4b68-8b15-e46dedc8e88d
                message: (service ecs-simple-service) was unable to place a task
                  because no container instance met all of its requirements. The
                  closest matching (container-instance
                  3f4de1c5-ffdd-4954-af7e-75b4be0c8841) is already using a port
                  required by your task. For more information, see the
                  Troubleshooting section of the Amazon ECS Developer Guide.
            loadBalancers: []
            pendingCount: 0
            runningCount: 0
            serviceArn: arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service
            serviceName: ecs-simple-service
            status: ACTIVE
            taskDefinition: arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6
      properties:
        services:
          $ref: "#/components/schemas/Services"
        failures:
          $ref: "#/components/schemas/Failures"
    DescribeServicesRequest:
      type: object
      required:
        - services
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        services:
          $ref: "#/components/schemas/StringList"
        include:
          $ref: "#/components/schemas/ServiceFieldList"
    DescribeTaskDefinitionResponse:
      type: object
      example:
        taskDefinition:
          containerDefinitions:
            - name: wordpress
              cpu: 10
              environment: []
              essential: true
              image: wordpress
              links:
                - mysql
              memory: 500
              mountPoints: []
              portMappings:
                - containerPort: 80
                  hostPort: 80
              volumesFrom: []
            - name: mysql
              cpu: 10
              environment:
                - name: MYSQL_ROOT_PASSWORD
                  value: password
              essential: true
              image: mysql
              memory: 500
              mountPoints: []
              portMappings: []
              volumesFrom: []
          family: hello_world
          revision: 8
          taskDefinitionArn: arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/hello_world:8
          volumes: []
      properties:
        taskDefinition:
          $ref: "#/components/schemas/TaskDefinition"
        tags:
          $ref: "#/components/schemas/Tags"
    DescribeTaskDefinitionRequest:
      type: object
      required:
        - taskDefinition
      properties:
        taskDefinition:
          $ref: "#/components/schemas/String"
        include:
          $ref: "#/components/schemas/TaskDefinitionFieldList"
    DescribeTaskSetsResponse:
      type: object
      properties:
        taskSets:
          $ref: "#/components/schemas/TaskSets"
        failures:
          $ref: "#/components/schemas/Failures"
    DescribeTaskSetsRequest:
      type: object
      required:
        - cluster
        - service
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        service:
          $ref: "#/components/schemas/String"
        taskSets:
          $ref: "#/components/schemas/StringList"
    DescribeTasksResponse:
      type: object
      example:
        failures: []
        tasks:
          - clusterArn: arn:aws:ecs:<region>:<aws_account_id>:cluster/default
            containerInstanceArn: arn:aws:ecs:<region>:<aws_account_id>:container-instance/18f9eda5-27d7-4c19-b133-45adc516e8fb
            containers:
              - name: ecs-demo
                containerArn: arn:aws:ecs:<region>:<aws_account_id>:container/7c01765b-c588-45b3-8290-4ba38bd6c5a6
                lastStatus: RUNNING
                networkBindings:
                  - bindIP: 0.0.0.0
                    containerPort: 80
                    hostPort: 80
                taskArn: arn:aws:ecs:<region>:<aws_account_id>:task/c5cba4eb-5dad-405e-96db-71ef8eefe6a8
            desiredStatus: RUNNING
            lastStatus: RUNNING
            overrides:
              containerOverrides:
                - name: ecs-demo
            startedBy: ecs-svc/9223370608528463088
            taskArn: arn:aws:ecs:<region>:<aws_account_id>:task/c5cba4eb-5dad-405e-96db-71ef8eefe6a8
            taskDefinitionArn: arn:aws:ecs:<region>:<aws_account_id>:task-definition/amazon-ecs-sample:1
      properties:
        tasks:
          $ref: "#/components/schemas/Tasks"
        failures:
          $ref: "#/components/schemas/Failures"
    DescribeTasksRequest:
      type: object
      required:
        - tasks
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        tasks:
          $ref: "#/components/schemas/StringList"
        include:
          $ref: "#/components/schemas/TaskFieldList"
    DiscoverPollEndpointResponse:
      type: object
      properties:
        endpoint:
          $ref: "#/components/schemas/String"
        telemetryEndpoint:
          $ref: "#/components/schemas/String"
    DiscoverPollEndpointRequest:
      type: object
      properties:
        containerInstance:
          $ref: "#/components/schemas/String"
        cluster:
          $ref: "#/components/schemas/String"
    ListAccountSettingsResponse:
      type: object
      example:
        settings:
          - name: containerInstanceLongArnFormat
            value: disabled
            principalArn: arn:aws:iam::<aws_account_id>:user/principalName
          - name: serviceLongArnFormat
            value: enabled
            principalArn: arn:aws:iam::<aws_account_id>:user/principalName
          - name: taskLongArnFormat
            value: disabled
            principalArn: arn:aws:iam::<aws_account_id>:user/principalName
      properties:
        settings:
          $ref: "#/components/schemas/Settings"
        nextToken:
          $ref: "#/components/schemas/String"
    ListAccountSettingsRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/SettingName"
        value:
          $ref: "#/components/schemas/String"
        principalArn:
          $ref: "#/components/schemas/String"
        effectiveSettings:
          $ref: "#/components/schemas/Boolean"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/Integer"
    ListAttributesResponse:
      type: object
      properties:
        attributes:
          $ref: "#/components/schemas/Attributes"
        nextToken:
          $ref: "#/components/schemas/String"
    ListAttributesRequest:
      type: object
      required:
        - targetType
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        targetType:
          $ref: "#/components/schemas/TargetType"
        attributeName:
          $ref: "#/components/schemas/String"
        attributeValue:
          $ref: "#/components/schemas/String"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
    ListClustersResponse:
      type: object
      example:
        clusterArns:
          - arn:aws:ecs:us-east-1:<aws_account_id>:cluster/test
          - arn:aws:ecs:us-east-1:<aws_account_id>:cluster/default
      properties:
        clusterArns:
          $ref: "#/components/schemas/StringList"
        nextToken:
          $ref: "#/components/schemas/String"
    ListClustersRequest:
      type: object
      properties:
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
    ListContainerInstancesResponse:
      type: object
      example:
        containerInstanceArns:
          - arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/f6bbb147-5370-4ace-8c73-c7181ded911f
          - arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/ffe3d344-77e2-476c-a4d0-bf560ad50acb
      properties:
        containerInstanceArns:
          $ref: "#/components/schemas/StringList"
        nextToken:
          $ref: "#/components/schemas/String"
    ListContainerInstancesRequest:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        filter:
          $ref: "#/components/schemas/String"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
        status:
          $ref: "#/components/schemas/ContainerInstanceStatus"
    ListServicesResponse:
      type: object
      example:
        serviceArns:
          - arn:aws:ecs:us-east-1:012345678910:service/my-http-service
      properties:
        serviceArns:
          $ref: "#/components/schemas/StringList"
        nextToken:
          $ref: "#/components/schemas/String"
    ListServicesRequest:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        schedulingStrategy:
          $ref: "#/components/schemas/SchedulingStrategy"
    ListTagsForResourceResponse:
      type: object
      example:
        tags:
          - key: team
            value: dev
      properties:
        tags:
          $ref: "#/components/schemas/Tags"
    ListTagsForResourceRequest:
      type: object
      required:
        - resourceArn
      properties:
        resourceArn:
          $ref: "#/components/schemas/String"
    ListTaskDefinitionFamiliesResponse:
      type: object
      example:
        families:
          - hpcc
          - hpcc-c4-8xlarge
      properties:
        families:
          $ref: "#/components/schemas/StringList"
        nextToken:
          $ref: "#/components/schemas/String"
    ListTaskDefinitionFamiliesRequest:
      type: object
      properties:
        familyPrefix:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/TaskDefinitionFamilyStatus"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
    ListTaskDefinitionsResponse:
      type: object
      example:
        taskDefinitionArns:
          - arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:3
          - arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:4
          - arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:5
          - arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:6
      properties:
        taskDefinitionArns:
          $ref: "#/components/schemas/StringList"
        nextToken:
          $ref: "#/components/schemas/String"
    ListTaskDefinitionsRequest:
      type: object
      properties:
        familyPrefix:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/TaskDefinitionStatus"
        sort:
          $ref: "#/components/schemas/SortOrder"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
    ListTasksResponse:
      type: object
      example:
        taskArns:
          - arn:aws:ecs:us-east-1:012345678910:task/0cc43cdb-3bee-4407-9c26-c0e6ea5bee84
      properties:
        taskArns:
          $ref: "#/components/schemas/StringList"
        nextToken:
          $ref: "#/components/schemas/String"
    ListTasksRequest:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        containerInstance:
          $ref: "#/components/schemas/String"
        family:
          $ref: "#/components/schemas/String"
        nextToken:
          $ref: "#/components/schemas/String"
        maxResults:
          $ref: "#/components/schemas/BoxedInteger"
        startedBy:
          $ref: "#/components/schemas/String"
        serviceName:
          $ref: "#/components/schemas/String"
        desiredStatus:
          $ref: "#/components/schemas/DesiredStatus"
        launchType:
          $ref: "#/components/schemas/LaunchType"
    PutAccountSettingResponse:
      type: object
      example:
        setting:
          name: containerInstanceLongArnFormat
          value: enabled
          principalArn: arn:aws:iam::<aws_account_id>:user/principalName
      properties:
        setting:
          $ref: "#/components/schemas/Setting"
    PutAccountSettingRequest:
      type: object
      required:
        - name
        - value
      properties:
        name:
          $ref: "#/components/schemas/SettingName"
        value:
          $ref: "#/components/schemas/String"
        principalArn:
          $ref: "#/components/schemas/String"
    PutAccountSettingDefaultResponse:
      type: object
      example:
        setting:
          name: serviceLongArnFormat
          value: enabled
          principalArn: arn:aws:iam::<aws_account_id>:root
      properties:
        setting:
          $ref: "#/components/schemas/Setting"
    PutAccountSettingDefaultRequest:
      type: object
      required:
        - name
        - value
      properties:
        name:
          $ref: "#/components/schemas/SettingName"
        value:
          $ref: "#/components/schemas/String"
    PutAttributesResponse:
      type: object
      properties:
        attributes:
          $ref: "#/components/schemas/Attributes"
    PutAttributesRequest:
      type: object
      required:
        - attributes
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        attributes:
          $ref: "#/components/schemas/Attributes"
    AttributeLimitExceededException: {}
    RegisterContainerInstanceResponse:
      type: object
      properties:
        containerInstance:
          $ref: "#/components/schemas/ContainerInstance"
    RegisterContainerInstanceRequest:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        instanceIdentityDocument:
          $ref: "#/components/schemas/String"
        instanceIdentityDocumentSignature:
          $ref: "#/components/schemas/String"
        totalResources:
          $ref: "#/components/schemas/Resources"
        versionInfo:
          $ref: "#/components/schemas/VersionInfo"
        containerInstanceArn:
          $ref: "#/components/schemas/String"
        attributes:
          $ref: "#/components/schemas/Attributes"
        platformDevices:
          $ref: "#/components/schemas/PlatformDevices"
        tags:
          $ref: "#/components/schemas/Tags"
    RegisterTaskDefinitionResponse:
      type: object
      example:
        taskDefinition:
          containerDefinitions:
            - name: sleep
              command:
                - sleep
                - "360"
              cpu: 10
              environment: []
              essential: true
              image: busybox
              memory: 10
              mountPoints: []
              portMappings: []
              volumesFrom: []
          family: sleep360
          revision: 1
          taskDefinitionArn: arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:19
          volumes: []
      properties:
        taskDefinition:
          $ref: "#/components/schemas/TaskDefinition"
        tags:
          $ref: "#/components/schemas/Tags"
    RegisterTaskDefinitionRequest:
      type: object
      required:
        - family
        - containerDefinitions
      properties:
        family:
          $ref: "#/components/schemas/String"
        taskRoleArn:
          $ref: "#/components/schemas/String"
        executionRoleArn:
          $ref: "#/components/schemas/String"
        networkMode:
          $ref: "#/components/schemas/NetworkMode"
        containerDefinitions:
          $ref: "#/components/schemas/ContainerDefinitions"
        volumes:
          $ref: "#/components/schemas/VolumeList"
        placementConstraints:
          $ref: "#/components/schemas/TaskDefinitionPlacementConstraints"
        requiresCompatibilities:
          $ref: "#/components/schemas/CompatibilityList"
        cpu:
          $ref: "#/components/schemas/String"
        memory:
          $ref: "#/components/schemas/String"
        tags:
          $ref: "#/components/schemas/Tags"
        pidMode:
          $ref: "#/components/schemas/PidMode"
        ipcMode:
          $ref: "#/components/schemas/IpcMode"
        proxyConfiguration:
          $ref: "#/components/schemas/ProxyConfiguration"
        inferenceAccelerators:
          $ref: "#/components/schemas/InferenceAccelerators"
    RunTaskResponse:
      type: object
      example:
        tasks:
          - containerInstanceArn: arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/ffe3d344-77e2-476c-a4d0-bf560ad50acb
            containers:
              - name: sleep
                containerArn: arn:aws:ecs:us-east-1:<aws_account_id>:container/58591c8e-be29-4ddf-95aa-ee459d4c59fd
                lastStatus: PENDING
                taskArn: arn:aws:ecs:us-east-1:<aws_account_id>:task/a9f21ea7-c9f5-44b1-b8e6-b31f50ed33c0
            desiredStatus: RUNNING
            lastStatus: PENDING
            overrides:
              containerOverrides:
                - name: sleep
            taskArn: arn:aws:ecs:us-east-1:<aws_account_id>:task/a9f21ea7-c9f5-44b1-b8e6-b31f50ed33c0
            taskDefinitionArn: arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:1
      properties:
        tasks:
          $ref: "#/components/schemas/Tasks"
        failures:
          $ref: "#/components/schemas/Failures"
    RunTaskRequest:
      type: object
      required:
        - taskDefinition
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        overrides:
          $ref: "#/components/schemas/TaskOverride"
        count:
          $ref: "#/components/schemas/BoxedInteger"
        startedBy:
          $ref: "#/components/schemas/String"
        group:
          $ref: "#/components/schemas/String"
        placementConstraints:
          $ref: "#/components/schemas/PlacementConstraints"
        placementStrategy:
          $ref: "#/components/schemas/PlacementStrategies"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        tags:
          $ref: "#/components/schemas/Tags"
        enableECSManagedTags:
          $ref: "#/components/schemas/Boolean"
        propagateTags:
          $ref: "#/components/schemas/PropagateTags"
    BlockedException: {}
    StartTaskResponse:
      type: object
      properties:
        tasks:
          $ref: "#/components/schemas/Tasks"
        failures:
          $ref: "#/components/schemas/Failures"
    StartTaskRequest:
      type: object
      required:
        - taskDefinition
        - containerInstances
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        overrides:
          $ref: "#/components/schemas/TaskOverride"
        containerInstances:
          $ref: "#/components/schemas/StringList"
        startedBy:
          $ref: "#/components/schemas/String"
        group:
          $ref: "#/components/schemas/String"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        tags:
          $ref: "#/components/schemas/Tags"
        enableECSManagedTags:
          $ref: "#/components/schemas/Boolean"
        propagateTags:
          $ref: "#/components/schemas/PropagateTags"
    StopTaskResponse:
      type: object
      properties:
        task:
          $ref: "#/components/schemas/Task"
    StopTaskRequest:
      type: object
      required:
        - task
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        task:
          $ref: "#/components/schemas/String"
        reason:
          $ref: "#/components/schemas/String"
    SubmitAttachmentStateChangesResponse:
      type: object
      properties:
        acknowledgment:
          $ref: "#/components/schemas/String"
    SubmitAttachmentStateChangesRequest:
      type: object
      required:
        - attachments
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        attachments:
          $ref: "#/components/schemas/AttachmentStateChanges"
    SubmitContainerStateChangeResponse:
      type: object
      properties:
        acknowledgment:
          $ref: "#/components/schemas/String"
    SubmitContainerStateChangeRequest:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        task:
          $ref: "#/components/schemas/String"
        containerName:
          $ref: "#/components/schemas/String"
        runtimeId:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
        exitCode:
          $ref: "#/components/schemas/BoxedInteger"
        reason:
          $ref: "#/components/schemas/String"
        networkBindings:
          $ref: "#/components/schemas/NetworkBindings"
    SubmitTaskStateChangeResponse:
      type: object
      properties:
        acknowledgment:
          $ref: "#/components/schemas/String"
    SubmitTaskStateChangeRequest:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        task:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
        reason:
          $ref: "#/components/schemas/String"
        containers:
          $ref: "#/components/schemas/ContainerStateChanges"
        attachments:
          $ref: "#/components/schemas/AttachmentStateChanges"
        pullStartedAt:
          $ref: "#/components/schemas/Timestamp"
        pullStoppedAt:
          $ref: "#/components/schemas/Timestamp"
        executionStoppedAt:
          $ref: "#/components/schemas/Timestamp"
    TagResourceResponse:
      type: object
      example: {}
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - resourceArn
        - tags
      properties:
        resourceArn:
          $ref: "#/components/schemas/String"
        tags:
          $ref: "#/components/schemas/Tags"
    ResourceNotFoundException: {}
    UntagResourceResponse:
      type: object
      example: {}
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - resourceArn
        - tagKeys
      properties:
        resourceArn:
          $ref: "#/components/schemas/String"
        tagKeys:
          $ref: "#/components/schemas/TagKeys"
    UpdateClusterSettingsResponse:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/Cluster"
    UpdateClusterSettingsRequest:
      type: object
      required:
        - cluster
        - settings
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        settings:
          $ref: "#/components/schemas/ClusterSettings"
    UpdateContainerAgentResponse:
      type: object
      properties:
        containerInstance:
          $ref: "#/components/schemas/ContainerInstance"
    UpdateContainerAgentRequest:
      type: object
      required:
        - containerInstance
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        containerInstance:
          $ref: "#/components/schemas/String"
    UpdateInProgressException: {}
    NoUpdateAvailableException: {}
    MissingVersionException: {}
    UpdateContainerInstancesStateResponse:
      type: object
      properties:
        containerInstances:
          $ref: "#/components/schemas/ContainerInstances"
        failures:
          $ref: "#/components/schemas/Failures"
    UpdateContainerInstancesStateRequest:
      type: object
      required:
        - containerInstances
        - status
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        containerInstances:
          $ref: "#/components/schemas/StringList"
        status:
          $ref: "#/components/schemas/ContainerInstanceStatus"
    UpdateServiceResponse:
      type: object
      example: {}
      properties:
        service:
          $ref: "#/components/schemas/Service"
    UpdateServiceRequest:
      type: object
      required:
        - service
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        service:
          $ref: "#/components/schemas/String"
        desiredCount:
          $ref: "#/components/schemas/BoxedInteger"
        taskDefinition:
          $ref: "#/components/schemas/String"
        deploymentConfiguration:
          $ref: "#/components/schemas/DeploymentConfiguration"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        platformVersion:
          $ref: "#/components/schemas/String"
        forceNewDeployment:
          $ref: "#/components/schemas/Boolean"
        healthCheckGracePeriodSeconds:
          $ref: "#/components/schemas/BoxedInteger"
    UpdateServicePrimaryTaskSetResponse:
      type: object
      properties:
        taskSet:
          $ref: "#/components/schemas/TaskSet"
    UpdateServicePrimaryTaskSetRequest:
      type: object
      required:
        - cluster
        - service
        - primaryTaskSet
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        service:
          $ref: "#/components/schemas/String"
        primaryTaskSet:
          $ref: "#/components/schemas/String"
    UpdateTaskSetResponse:
      type: object
      properties:
        taskSet:
          $ref: "#/components/schemas/TaskSet"
    UpdateTaskSetRequest:
      type: object
      required:
        - cluster
        - service
        - taskSet
        - scale
      properties:
        cluster:
          $ref: "#/components/schemas/String"
        service:
          $ref: "#/components/schemas/String"
        taskSet:
          $ref: "#/components/schemas/String"
        scale:
          $ref: "#/components/schemas/Scale"
    AgentUpdateStatus:
      type: string
      enum:
        - PENDING
        - STAGING
        - STAGED
        - UPDATING
        - UPDATED
        - FAILED
    AssignPublicIp:
      type: string
      enum:
        - ENABLED
        - DISABLED
    String:
      type: string
    AttachmentDetails:
      type: array
      items:
        $ref: "#/components/schemas/KeyValuePair"
    Attachment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/String"
        type:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
        details:
          $ref: "#/components/schemas/AttachmentDetails"
      description: An object representing a container instance or task attachment.
    KeyValuePair:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/String"
        value:
          $ref: "#/components/schemas/String"
      description: A key-value pair object.
    AttachmentStateChange:
      type: object
      required:
        - attachmentArn
        - status
      properties:
        attachmentArn:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
      description: An object representing a change in state for a task attachment.
    AttachmentStateChanges:
      type: array
      items:
        $ref: "#/components/schemas/AttachmentStateChange"
    Attachments:
      type: array
      items:
        $ref: "#/components/schemas/Attachment"
    TargetType:
      type: string
      enum:
        - container-instance
    Attribute:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/String"
        value:
          $ref: "#/components/schemas/String"
        targetType:
          $ref: "#/components/schemas/TargetType"
        targetId:
          $ref: "#/components/schemas/String"
      description: An attribute is a name-value pair associated with an Amazon ECS object.
        Attributes enable you to extend the Amazon ECS data model by adding
        custom metadata to your resources. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes">Attributes</a>
        in the <i>Amazon Elastic Container Service Developer Guide</i>.
    Attributes:
      type: array
      items:
        $ref: "#/components/schemas/Attribute"
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    AwsVpcConfiguration:
      type: object
      required:
        - subnets
      properties:
        subnets:
          $ref: "#/components/schemas/StringList"
        securityGroups:
          $ref: "#/components/schemas/StringList"
        assignPublicIp:
          $ref: "#/components/schemas/AssignPublicIp"
      description: An object representing the networking details for a task or service.
    Boolean:
      type: boolean
    BoxedBoolean:
      type: boolean
    BoxedInteger:
      type: integer
    Integer:
      type: integer
    Statistics:
      type: array
      items:
        $ref: "#/components/schemas/KeyValuePair"
    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 0
      maxItems: 50
    ClusterSettings:
      type: array
      items:
        $ref: "#/components/schemas/ClusterSetting"
    Cluster:
      type: object
      properties:
        clusterArn:
          $ref: "#/components/schemas/String"
        clusterName:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
        registeredContainerInstancesCount:
          $ref: "#/components/schemas/Integer"
        runningTasksCount:
          $ref: "#/components/schemas/Integer"
        pendingTasksCount:
          $ref: "#/components/schemas/Integer"
        activeServicesCount:
          $ref: "#/components/schemas/Integer"
        statistics:
          $ref: "#/components/schemas/Statistics"
        tags:
          $ref: "#/components/schemas/Tags"
        settings:
          $ref: "#/components/schemas/ClusterSettings"
      description: A regional grouping of one or more container instances on which you can
        run task requests. Each account receives a default cluster the first
        time you use the Amazon ECS service, but you may also create other
        clusters. Clusters may contain more than one instance type
        simultaneously.
    ClusterField:
      type: string
      enum:
        - STATISTICS
        - TAGS
    ClusterFieldList:
      type: array
      items:
        $ref: "#/components/schemas/ClusterField"
    ClusterSettingName:
      type: string
      enum:
        - containerInsights
    ClusterSetting:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ClusterSettingName"
        value:
          $ref: "#/components/schemas/String"
      description: The settings to use when creating a cluster. This parameter is used to
        enable CloudWatch Container Insights for a cluster.
    Clusters:
      type: array
      items:
        $ref: "#/components/schemas/Cluster"
    Compatibility:
      type: string
      enum:
        - EC2
        - FARGATE
    CompatibilityList:
      type: array
      items:
        $ref: "#/components/schemas/Compatibility"
    Connectivity:
      type: string
      enum:
        - CONNECTED
        - DISCONNECTED
    NetworkBindings:
      type: array
      items:
        $ref: "#/components/schemas/NetworkBinding"
    NetworkInterfaces:
      type: array
      items:
        $ref: "#/components/schemas/NetworkInterface"
    HealthStatus:
      type: string
      enum:
        - HEALTHY
        - UNHEALTHY
        - UNKNOWN
    GpuIds:
      type: array
      items:
        $ref: "#/components/schemas/String"
    Container:
      type: object
      properties:
        containerArn:
          $ref: "#/components/schemas/String"
        taskArn:
          $ref: "#/components/schemas/String"
        name:
          $ref: "#/components/schemas/String"
        image:
          $ref: "#/components/schemas/String"
        imageDigest:
          $ref: "#/components/schemas/String"
        runtimeId:
          $ref: "#/components/schemas/String"
        lastStatus:
          $ref: "#/components/schemas/String"
        exitCode:
          $ref: "#/components/schemas/BoxedInteger"
        reason:
          $ref: "#/components/schemas/String"
        networkBindings:
          $ref: "#/components/schemas/NetworkBindings"
        networkInterfaces:
          $ref: "#/components/schemas/NetworkInterfaces"
        healthStatus:
          $ref: "#/components/schemas/HealthStatus"
        cpu:
          $ref: "#/components/schemas/String"
        memory:
          $ref: "#/components/schemas/String"
        memoryReservation:
          $ref: "#/components/schemas/String"
        gpuIds:
          $ref: "#/components/schemas/GpuIds"
      description: A Docker container that is part of a task.
    ContainerCondition:
      type: string
      enum:
        - START
        - COMPLETE
        - SUCCESS
        - HEALTHY
    RepositoryCredentials:
      type: object
      required:
        - credentialsParameter
      properties:
        credentialsParameter:
          $ref: "#/components/schemas/String"
      description: The repository credentials for private registry authentication.
    PortMappingList:
      type: array
      items:
        $ref: "#/components/schemas/PortMapping"
    EnvironmentVariables:
      type: array
      items:
        $ref: "#/components/schemas/KeyValuePair"
    MountPointList:
      type: array
      items:
        $ref: "#/components/schemas/MountPoint"
    VolumeFromList:
      type: array
      items:
        $ref: "#/components/schemas/VolumeFrom"
    LinuxParameters:
      type: object
      properties:
        capabilities:
          $ref: "#/components/schemas/KernelCapabilities"
        devices:
          $ref: "#/components/schemas/DevicesList"
        initProcessEnabled:
          $ref: "#/components/schemas/BoxedBoolean"
        sharedMemorySize:
          $ref: "#/components/schemas/BoxedInteger"
        tmpfs:
          $ref: "#/components/schemas/TmpfsList"
        maxSwap:
          $ref: "#/components/schemas/BoxedInteger"
        swappiness:
          $ref: "#/components/schemas/BoxedInteger"
      description: Linux-specific options that are applied to the container, such as Linux
        <a>KernelCapabilities</a>.
    SecretList:
      type: array
      items:
        $ref: "#/components/schemas/Secret"
    ContainerDependencies:
      type: array
      items:
        $ref: "#/components/schemas/ContainerDependency"
    HostEntryList:
      type: array
      items:
        $ref: "#/components/schemas/HostEntry"
    DockerLabelsMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    UlimitList:
      type: array
      items:
        $ref: "#/components/schemas/Ulimit"
    LogConfiguration:
      type: object
      required:
        - logDriver
      properties:
        logDriver:
          $ref: "#/components/schemas/LogDriver"
        options:
          $ref: "#/components/schemas/LogConfigurationOptionsMap"
        secretOptions:
          $ref: "#/components/schemas/SecretList"
      description: Log configuration options to send to a custom log driver for the
        container.
    HealthCheck:
      type: object
      required:
        - command
      properties:
        command:
          $ref: "#/components/schemas/StringList"
        interval:
          $ref: "#/components/schemas/BoxedInteger"
        timeout:
          $ref: "#/components/schemas/BoxedInteger"
        retries:
          $ref: "#/components/schemas/BoxedInteger"
        startPeriod:
          $ref: "#/components/schemas/BoxedInteger"
      description: <p>An object representing a container health check. Health check
        parameters that are specified in a container definition override any
        Docker health checks that exist in the container image (such as those
        specified in a parent image or from the image's Dockerfile).</p> <p>The
        following are notes about container health check support:</p> <ul> <li>
        <p>Container health checks require version 1.17.0 or greater of the
        Amazon ECS container agent. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html">Updating
        the Amazon ECS Container Agent</a>.</p> </li> <li> <p>Container health
        checks are supported for Fargate tasks if you are using platform version
        1.1.0 or greater. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS
        Fargate Platform Versions</a>.</p> </li> <li> <p>Container health checks
        are not supported for tasks that are part of a service that is
        configured to use a Classic Load Balancer.</p> </li> </ul>
    SystemControls:
      type: array
      items:
        $ref: "#/components/schemas/SystemControl"
    ResourceRequirements:
      type: array
      items:
        $ref: "#/components/schemas/ResourceRequirement"
    FirelensConfiguration:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/FirelensConfigurationType"
        options:
          $ref: "#/components/schemas/FirelensConfigurationOptionsMap"
      description: The FireLens configuration for the container. This is used to specify
        and configure a log router for container logs. For more information, see
        <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html">Custom
        Log Routing</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.
    ContainerDefinition:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/String"
        image:
          $ref: "#/components/schemas/String"
        repositoryCredentials:
          $ref: "#/components/schemas/RepositoryCredentials"
        cpu:
          $ref: "#/components/schemas/Integer"
        memory:
          $ref: "#/components/schemas/BoxedInteger"
        memoryReservation:
          $ref: "#/components/schemas/BoxedInteger"
        links:
          $ref: "#/components/schemas/StringList"
        portMappings:
          $ref: "#/components/schemas/PortMappingList"
        essential:
          $ref: "#/components/schemas/BoxedBoolean"
        entryPoint:
          $ref: "#/components/schemas/StringList"
        command:
          $ref: "#/components/schemas/StringList"
        environment:
          $ref: "#/components/schemas/EnvironmentVariables"
        mountPoints:
          $ref: "#/components/schemas/MountPointList"
        volumesFrom:
          $ref: "#/components/schemas/VolumeFromList"
        linuxParameters:
          $ref: "#/components/schemas/LinuxParameters"
        secrets:
          $ref: "#/components/schemas/SecretList"
        dependsOn:
          $ref: "#/components/schemas/ContainerDependencies"
        startTimeout:
          $ref: "#/components/schemas/BoxedInteger"
        stopTimeout:
          $ref: "#/components/schemas/BoxedInteger"
        hostname:
          $ref: "#/components/schemas/String"
        user:
          $ref: "#/components/schemas/String"
        workingDirectory:
          $ref: "#/components/schemas/String"
        disableNetworking:
          $ref: "#/components/schemas/BoxedBoolean"
        privileged:
          $ref: "#/components/schemas/BoxedBoolean"
        readonlyRootFilesystem:
          $ref: "#/components/schemas/BoxedBoolean"
        dnsServers:
          $ref: "#/components/schemas/StringList"
        dnsSearchDomains:
          $ref: "#/components/schemas/StringList"
        extraHosts:
          $ref: "#/components/schemas/HostEntryList"
        dockerSecurityOptions:
          $ref: "#/components/schemas/StringList"
        interactive:
          $ref: "#/components/schemas/BoxedBoolean"
        pseudoTerminal:
          $ref: "#/components/schemas/BoxedBoolean"
        dockerLabels:
          $ref: "#/components/schemas/DockerLabelsMap"
        ulimits:
          $ref: "#/components/schemas/UlimitList"
        logConfiguration:
          $ref: "#/components/schemas/LogConfiguration"
        healthCheck:
          $ref: "#/components/schemas/HealthCheck"
        systemControls:
          $ref: "#/components/schemas/SystemControls"
        resourceRequirements:
          $ref: "#/components/schemas/ResourceRequirements"
        firelensConfiguration:
          $ref: "#/components/schemas/FirelensConfiguration"
      description: Container definitions are used in task definitions to describe the
        different containers that are launched as part of a task.
    ContainerDefinitions:
      type: array
      items:
        $ref: "#/components/schemas/ContainerDefinition"
    ContainerDependency:
      type: object
      required:
        - containerName
        - condition
      properties:
        containerName:
          $ref: "#/components/schemas/String"
        condition:
          $ref: "#/components/schemas/ContainerCondition"
      description: <p>The dependencies defined for container startup and shutdown. A
        container can contain multiple dependencies. When a dependency is
        defined for container startup, for container shutdown it is
        reversed.</p> <p>Your Amazon ECS container instances require at least
        version 1.26.0 of the container agent to enable container dependencies.
        However, we recommend using the latest container agent version. For
        information about checking your agent version and updating to the latest
        version, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html">Updating
        the Amazon ECS Container Agent</a> in the <i>Amazon Elastic Container
        Service Developer Guide</i>. If you are using an Amazon ECS-optimized
        Linux AMI, your instance needs at least version 1.26.0-1 of the
        <code>ecs-init</code> package. If your container instances are launched
        from version <code>20190301</code> or later, then they contain the
        required versions of the container agent and <code>ecs-init</code>. For
        more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">Amazon
        ECS-optimized Linux AMI</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> <note> <p>If you are using tasks that use the
        Fargate launch type, container dependency parameters are not
        supported.</p> </note>
    Long:
      type: integer
    VersionInfo:
      type: object
      properties:
        agentVersion:
          $ref: "#/components/schemas/String"
        agentHash:
          $ref: "#/components/schemas/String"
        dockerVersion:
          $ref: "#/components/schemas/String"
      description: The Docker and Amazon ECS container agent version information about a
        container instance.
    Resources:
      type: array
      items:
        $ref: "#/components/schemas/Resource"
    Timestamp:
      type: string
      format: date-time
    ContainerInstance:
      type: object
      properties:
        containerInstanceArn:
          $ref: "#/components/schemas/String"
        ec2InstanceId:
          $ref: "#/components/schemas/String"
        version:
          $ref: "#/components/schemas/Long"
        versionInfo:
          $ref: "#/components/schemas/VersionInfo"
        remainingResources:
          $ref: "#/components/schemas/Resources"
        registeredResources:
          $ref: "#/components/schemas/Resources"
        status:
          $ref: "#/components/schemas/String"
        statusReason:
          $ref: "#/components/schemas/String"
        agentConnected:
          $ref: "#/components/schemas/Boolean"
        runningTasksCount:
          $ref: "#/components/schemas/Integer"
        pendingTasksCount:
          $ref: "#/components/schemas/Integer"
        agentUpdateStatus:
          $ref: "#/components/schemas/AgentUpdateStatus"
        attributes:
          $ref: "#/components/schemas/Attributes"
        registeredAt:
          $ref: "#/components/schemas/Timestamp"
        attachments:
          $ref: "#/components/schemas/Attachments"
        tags:
          $ref: "#/components/schemas/Tags"
      description: An EC2 instance that is running the Amazon ECS agent and has been
        registered with a cluster.
    ContainerInstanceField:
      type: string
      enum:
        - TAGS
    ContainerInstanceFieldList:
      type: array
      items:
        $ref: "#/components/schemas/ContainerInstanceField"
    ContainerInstanceStatus:
      type: string
      enum:
        - ACTIVE
        - DRAINING
        - REGISTERING
        - DEREGISTERING
        - REGISTRATION_FAILED
    ContainerInstances:
      type: array
      items:
        $ref: "#/components/schemas/ContainerInstance"
    ContainerOverride:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/String"
        command:
          $ref: "#/components/schemas/StringList"
        environment:
          $ref: "#/components/schemas/EnvironmentVariables"
        cpu:
          $ref: "#/components/schemas/BoxedInteger"
        memory:
          $ref: "#/components/schemas/BoxedInteger"
        memoryReservation:
          $ref: "#/components/schemas/BoxedInteger"
        resourceRequirements:
          $ref: "#/components/schemas/ResourceRequirements"
      description: 'The overrides that should be sent to a container. An empty container
        override can be passed in. An example of an empty container override
        would be <code>{"containerOverrides": [ ] }</code>. If a non-empty
        container override is specified, the <code>name</code> parameter must be
        included.'
    ContainerOverrides:
      type: array
      items:
        $ref: "#/components/schemas/ContainerOverride"
    ContainerStateChange:
      type: object
      properties:
        containerName:
          $ref: "#/components/schemas/String"
        imageDigest:
          $ref: "#/components/schemas/String"
        runtimeId:
          $ref: "#/components/schemas/String"
        exitCode:
          $ref: "#/components/schemas/BoxedInteger"
        networkBindings:
          $ref: "#/components/schemas/NetworkBindings"
        reason:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
      description: An object representing a change in state for a container.
    ContainerStateChanges:
      type: array
      items:
        $ref: "#/components/schemas/ContainerStateChange"
    Containers:
      type: array
      items:
        $ref: "#/components/schemas/Container"
    LoadBalancers:
      type: array
      items:
        $ref: "#/components/schemas/LoadBalancer"
    ServiceRegistries:
      type: array
      items:
        $ref: "#/components/schemas/ServiceRegistry"
    LaunchType:
      type: string
      enum:
        - EC2
        - FARGATE
    DeploymentConfiguration:
      type: object
      properties:
        maximumPercent:
          $ref: "#/components/schemas/BoxedInteger"
        minimumHealthyPercent:
          $ref: "#/components/schemas/BoxedInteger"
      description: Optional deployment parameters that control how many tasks run during a
        deployment and the ordering of stopping and starting tasks.
    PlacementConstraints:
      type: array
      items:
        $ref: "#/components/schemas/PlacementConstraint"
    PlacementStrategies:
      type: array
      items:
        $ref: "#/components/schemas/PlacementStrategy"
    NetworkConfiguration:
      type: object
      properties:
        awsvpcConfiguration:
          $ref: "#/components/schemas/AwsVpcConfiguration"
      description: An object representing the network configuration for a task or service.
    SchedulingStrategy:
      type: string
      enum:
        - REPLICA
        - DAEMON
    DeploymentController:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/DeploymentControllerType"
      description: The deployment controller to use for the service. For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon
        ECS Deployment Types</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
    PropagateTags:
      type: string
      enum:
        - TASK_DEFINITION
        - SERVICE
    Service:
      type: object
      properties:
        serviceArn:
          $ref: "#/components/schemas/String"
        serviceName:
          $ref: "#/components/schemas/String"
        clusterArn:
          $ref: "#/components/schemas/String"
        loadBalancers:
          $ref: "#/components/schemas/LoadBalancers"
        serviceRegistries:
          $ref: "#/components/schemas/ServiceRegistries"
        status:
          $ref: "#/components/schemas/String"
        desiredCount:
          $ref: "#/components/schemas/Integer"
        runningCount:
          $ref: "#/components/schemas/Integer"
        pendingCount:
          $ref: "#/components/schemas/Integer"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        deploymentConfiguration:
          $ref: "#/components/schemas/DeploymentConfiguration"
        taskSets:
          $ref: "#/components/schemas/TaskSets"
        deployments:
          $ref: "#/components/schemas/Deployments"
        roleArn:
          $ref: "#/components/schemas/String"
        events:
          $ref: "#/components/schemas/ServiceEvents"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        placementConstraints:
          $ref: "#/components/schemas/PlacementConstraints"
        placementStrategy:
          $ref: "#/components/schemas/PlacementStrategies"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        healthCheckGracePeriodSeconds:
          $ref: "#/components/schemas/BoxedInteger"
        schedulingStrategy:
          $ref: "#/components/schemas/SchedulingStrategy"
        deploymentController:
          $ref: "#/components/schemas/DeploymentController"
        tags:
          $ref: "#/components/schemas/Tags"
        createdBy:
          $ref: "#/components/schemas/String"
        enableECSManagedTags:
          $ref: "#/components/schemas/Boolean"
        propagateTags:
          $ref: "#/components/schemas/PropagateTags"
      description: Details on a service within a cluster
    Scale:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Double"
        unit:
          $ref: "#/components/schemas/ScaleUnit"
      description: A floating-point percentage of the desired number of tasks to place and
        keep running in the task set.
    TaskSet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/String"
        taskSetArn:
          $ref: "#/components/schemas/String"
        serviceArn:
          $ref: "#/components/schemas/String"
        clusterArn:
          $ref: "#/components/schemas/String"
        startedBy:
          $ref: "#/components/schemas/String"
        externalId:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        computedDesiredCount:
          $ref: "#/components/schemas/Integer"
        pendingCount:
          $ref: "#/components/schemas/Integer"
        runningCount:
          $ref: "#/components/schemas/Integer"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        loadBalancers:
          $ref: "#/components/schemas/LoadBalancers"
        serviceRegistries:
          $ref: "#/components/schemas/ServiceRegistries"
        scale:
          $ref: "#/components/schemas/Scale"
        stabilityStatus:
          $ref: "#/components/schemas/StabilityStatus"
        stabilityStatusAt:
          $ref: "#/components/schemas/Timestamp"
      description: Information about a set of Amazon ECS tasks in either an AWS CodeDeploy
        or an <code>EXTERNAL</code> deployment. An Amazon ECS task set includes
        details such as the desired number of tasks, how many tasks are running,
        and whether the task set serves production traffic.
    SettingName:
      type: string
      enum:
        - serviceLongArnFormat
        - taskLongArnFormat
        - containerInstanceLongArnFormat
        - awsvpcTrunking
        - containerInsights
    Setting:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/SettingName"
        value:
          $ref: "#/components/schemas/String"
        principalArn:
          $ref: "#/components/schemas/String"
      description: The current account setting for a resource.
    Deployment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/String"
        status:
          $ref: "#/components/schemas/String"
        taskDefinition:
          $ref: "#/components/schemas/String"
        desiredCount:
          $ref: "#/components/schemas/Integer"
        pendingCount:
          $ref: "#/components/schemas/Integer"
        runningCount:
          $ref: "#/components/schemas/Integer"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
      description: The details of an Amazon ECS service deployment. This is used only when
        a service uses the <code>ECS</code> deployment controller type.
    DeploymentControllerType:
      type: string
      enum:
        - ECS
        - CODE_DEPLOY
        - EXTERNAL
    Deployments:
      type: array
      items:
        $ref: "#/components/schemas/Deployment"
    TaskDefinition:
      type: object
      properties:
        taskDefinitionArn:
          $ref: "#/components/schemas/String"
        containerDefinitions:
          $ref: "#/components/schemas/ContainerDefinitions"
        family:
          $ref: "#/components/schemas/String"
        taskRoleArn:
          $ref: "#/components/schemas/String"
        executionRoleArn:
          $ref: "#/components/schemas/String"
        networkMode:
          $ref: "#/components/schemas/NetworkMode"
        revision:
          $ref: "#/components/schemas/Integer"
        volumes:
          $ref: "#/components/schemas/VolumeList"
        status:
          $ref: "#/components/schemas/TaskDefinitionStatus"
        requiresAttributes:
          $ref: "#/components/schemas/RequiresAttributes"
        placementConstraints:
          $ref: "#/components/schemas/TaskDefinitionPlacementConstraints"
        compatibilities:
          $ref: "#/components/schemas/CompatibilityList"
        requiresCompatibilities:
          $ref: "#/components/schemas/CompatibilityList"
        cpu:
          $ref: "#/components/schemas/String"
        memory:
          $ref: "#/components/schemas/String"
        pidMode:
          $ref: "#/components/schemas/PidMode"
        ipcMode:
          $ref: "#/components/schemas/IpcMode"
        proxyConfiguration:
          $ref: "#/components/schemas/ProxyConfiguration"
      description: The details of a task definition which describes the container and
        volume definitions of an Amazon Elastic Container Service task. You can
        specify which Docker images to use, the required resources, and other
        configurations related to launching the task definition through an
        Amazon ECS service or task.
    Failures:
      type: array
      items:
        $ref: "#/components/schemas/Failure"
    ServiceFieldList:
      type: array
      items:
        $ref: "#/components/schemas/ServiceField"
    Services:
      type: array
      items:
        $ref: "#/components/schemas/Service"
    TaskDefinitionFieldList:
      type: array
      items:
        $ref: "#/components/schemas/TaskDefinitionField"
    TaskSets:
      type: array
      items:
        $ref: "#/components/schemas/TaskSet"
    TaskFieldList:
      type: array
      items:
        $ref: "#/components/schemas/TaskField"
    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"
    DesiredStatus:
      type: string
      enum:
        - RUNNING
        - PENDING
        - STOPPED
    DeviceCgroupPermissions:
      type: array
      items:
        $ref: "#/components/schemas/DeviceCgroupPermission"
    Device:
      type: object
      required:
        - hostPath
      properties:
        hostPath:
          $ref: "#/components/schemas/String"
        containerPath:
          $ref: "#/components/schemas/String"
        permissions:
          $ref: "#/components/schemas/DeviceCgroupPermissions"
      description: An object representing a container instance host device.
    DeviceCgroupPermission:
      type: string
      enum:
        - read
        - write
        - mknod
    DevicesList:
      type: array
      items:
        $ref: "#/components/schemas/Device"
    Scope:
      type: string
      enum:
        - task
        - shared
    StringMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    DockerVolumeConfiguration:
      type: object
      properties:
        scope:
          $ref: "#/components/schemas/Scope"
        autoprovision:
          $ref: "#/components/schemas/BoxedBoolean"
        driver:
          $ref: "#/components/schemas/String"
        driverOpts:
          $ref: "#/components/schemas/StringMap"
        labels:
          $ref: "#/components/schemas/StringMap"
      description: This parameter is specified when you are using Docker volumes. Docker
        volumes are only supported when you are using the EC2 launch type.
        Windows containers only support the use of the <code>local</code>
        driver. To use bind mounts, specify a <code>host</code> instead.
    Double:
      type: number
      format: double
    Failure:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/String"
        reason:
          $ref: "#/components/schemas/String"
      description: A failed resource.
    FirelensConfigurationType:
      type: string
      enum:
        - fluentd
        - fluentbit
    FirelensConfigurationOptionsMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    HostEntry:
      type: object
      required:
        - hostname
        - ipAddress
      properties:
        hostname:
          $ref: "#/components/schemas/String"
        ipAddress:
          $ref: "#/components/schemas/String"
      description: "Hostnames and IP address entries that are added to the
        <code>/etc/hosts</code> file of a container via the
        <code>extraHosts</code> parameter of its <a>ContainerDefinition</a>. "
    HostVolumeProperties:
      type: object
      properties:
        sourcePath:
          $ref: "#/components/schemas/String"
      description: Details on a container instance bind mount host volume.
    InferenceAccelerator:
      type: object
      required:
        - deviceName
        - deviceType
      properties:
        deviceName:
          $ref: "#/components/schemas/String"
        deviceType:
          $ref: "#/components/schemas/String"
      description: Details on a Elastic Inference accelerator. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html">Working
        with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon Elastic
        Container Service Developer Guide</i>.
    InferenceAcceleratorOverride:
      type: object
      properties:
        deviceName:
          $ref: "#/components/schemas/String"
        deviceType:
          $ref: "#/components/schemas/String"
      description: Details on an Elastic Inference accelerator task override. This
        parameter is used to override the Elastic Inference accelerator
        specified in the task definition. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html">Working
        with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon Elastic
        Container Service Developer Guide</i>.
    InferenceAcceleratorOverrides:
      type: array
      items:
        $ref: "#/components/schemas/InferenceAcceleratorOverride"
    InferenceAccelerators:
      type: array
      items:
        $ref: "#/components/schemas/InferenceAccelerator"
    IpcMode:
      type: string
      enum:
        - host
        - task
        - none
    KernelCapabilities:
      type: object
      properties:
        add:
          $ref: "#/components/schemas/StringList"
        drop:
          $ref: "#/components/schemas/StringList"
      description: The Linux capabilities for the container that are added to or dropped
        from the default configuration provided by Docker. For more information
        on the default capabilities and the non-default available capabilities,
        see <a
        href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities">Runtime
        privilege and Linux capabilities</a> in the <i>Docker run reference</i>.
        For more detailed information on these Linux capabilities, see the <a
        href="http://man7.org/linux/man-pages/man7/capabilities.7.html">capabilities(7)</a>
        Linux manual page.
    TmpfsList:
      type: array
      items:
        $ref: "#/components/schemas/Tmpfs"
    Settings:
      type: array
      items:
        $ref: "#/components/schemas/Setting"
    TaskDefinitionFamilyStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - ALL
    TaskDefinitionStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    SortOrder:
      type: string
      enum:
        - ASC
        - DESC
    LoadBalancer:
      type: object
      properties:
        targetGroupArn:
          $ref: "#/components/schemas/String"
        loadBalancerName:
          $ref: "#/components/schemas/String"
        containerName:
          $ref: "#/components/schemas/String"
        containerPort:
          $ref: "#/components/schemas/BoxedInteger"
      description: Details on the load balancer or load balancers to use with a service or
        task set.
    LogDriver:
      type: string
      enum:
        - json-file
        - syslog
        - journald
        - gelf
        - fluentd
        - awslogs
        - splunk
        - awsfirelens
    LogConfigurationOptionsMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    MountPoint:
      type: object
      properties:
        sourceVolume:
          $ref: "#/components/schemas/String"
        containerPath:
          $ref: "#/components/schemas/String"
        readOnly:
          $ref: "#/components/schemas/BoxedBoolean"
      description: Details on a volume mount point that is used in a container definition.
    TransportProtocol:
      type: string
      enum:
        - tcp
        - udp
    NetworkBinding:
      type: object
      properties:
        bindIP:
          $ref: "#/components/schemas/String"
        containerPort:
          $ref: "#/components/schemas/BoxedInteger"
        hostPort:
          $ref: "#/components/schemas/BoxedInteger"
        protocol:
          $ref: "#/components/schemas/TransportProtocol"
      description: Details on the network bindings between a container and its host
        container instance. After a task reaches the <code>RUNNING</code>
        status, manual and automatic host and container port assignments are
        visible in the <code>networkBindings</code> section of
        <a>DescribeTasks</a> API responses.
    NetworkInterface:
      type: object
      properties:
        attachmentId:
          $ref: "#/components/schemas/String"
        privateIpv4Address:
          $ref: "#/components/schemas/String"
        ipv6Address:
          $ref: "#/components/schemas/String"
      description: An object representing the elastic network interface for tasks that use
        the <code>awsvpc</code> network mode.
    NetworkMode:
      type: string
      enum:
        - bridge
        - host
        - awsvpc
        - none
    PidMode:
      type: string
      enum:
        - host
        - task
    PlacementConstraintType:
      type: string
      enum:
        - distinctInstance
        - memberOf
    PlacementConstraint:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/PlacementConstraintType"
        expression:
          $ref: "#/components/schemas/String"
      description: <p>An object representing a constraint on task placement. For more
        information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html">Task
        Placement Constraints</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> <note> <p>If you are using the Fargate launch
        type, task placement constraints are not supported.</p> </note>
    PlacementStrategy:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/PlacementStrategyType"
        field:
          $ref: "#/components/schemas/String"
      description: The task placement strategy for a task or service. For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html">Task
        Placement Strategies</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.
    PlacementStrategyType:
      type: string
      enum:
        - random
        - spread
        - binpack
    PlatformDeviceType:
      type: string
      enum:
        - GPU
    PlatformDevice:
      type: object
      required:
        - id
        - type
      properties:
        id:
          $ref: "#/components/schemas/String"
        type:
          $ref: "#/components/schemas/PlatformDeviceType"
      description: The devices that are available on the container instance. The only
        supported device type is a GPU.
    PlatformDevices:
      type: array
      items:
        $ref: "#/components/schemas/PlatformDevice"
    PortMapping:
      type: object
      properties:
        containerPort:
          $ref: "#/components/schemas/BoxedInteger"
        hostPort:
          $ref: "#/components/schemas/BoxedInteger"
        protocol:
          $ref: "#/components/schemas/TransportProtocol"
      description: <p>Port mappings allow containers to access ports on the host container
        instance to send or receive traffic. Port mappings are specified as part
        of the container definition.</p> <p>If you are using containers in a
        task with the <code>awsvpc</code> or <code>host</code> network mode,
        exposed ports should be specified using <code>containerPort</code>. The
        <code>hostPort</code> can be left blank or it must be the same value as
        the <code>containerPort</code>.</p> <p>After a task reaches the
        <code>RUNNING</code> status, manual and automatic host and container
        port assignments are visible in the <code>networkBindings</code> section
        of <a>DescribeTasks</a> API responses.</p>
    ProxyConfigurationType:
      type: string
      enum:
        - APPMESH
    ProxyConfigurationProperties:
      type: array
      items:
        $ref: "#/components/schemas/KeyValuePair"
    ProxyConfiguration:
      type: object
      required:
        - containerName
      properties:
        type:
          $ref: "#/components/schemas/ProxyConfigurationType"
        containerName:
          $ref: "#/components/schemas/String"
        properties:
          $ref: "#/components/schemas/ProxyConfigurationProperties"
      description: <p>The configuration details for the App Mesh proxy.</p> <p>For tasks
        using the EC2 launch type, the container instances require at least
        version 1.26.0 of the container agent and at least version 1.26.0-1 of
        the <code>ecs-init</code> package to enable a proxy configuration. If
        your container instances are launched from the Amazon ECS-optimized AMI
        version <code>20190301</code> or later, then they contain the required
        versions of the container agent and <code>ecs-init</code>. For more
        information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html">Amazon
        ECS-optimized Linux AMI</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> <p>For tasks using the Fargate launch type, the
        task or service requires platform version 1.3.0 or later.</p>
    VolumeList:
      type: array
      items:
        $ref: "#/components/schemas/Volume"
    TaskDefinitionPlacementConstraints:
      type: array
      items:
        $ref: "#/components/schemas/TaskDefinitionPlacementConstraint"
    RequiresAttributes:
      type: array
      items:
        $ref: "#/components/schemas/Attribute"
    Resource:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/String"
        type:
          $ref: "#/components/schemas/String"
        doubleValue:
          $ref: "#/components/schemas/Double"
        longValue:
          $ref: "#/components/schemas/Long"
        integerValue:
          $ref: "#/components/schemas/Integer"
        stringSetValue:
          $ref: "#/components/schemas/StringList"
      description: Describes the resources available for a container instance.
    ResourceType:
      type: string
      enum:
        - GPU
        - InferenceAccelerator
    ResourceRequirement:
      type: object
      required:
        - value
        - type
      properties:
        value:
          $ref: "#/components/schemas/String"
        type:
          $ref: "#/components/schemas/ResourceType"
      description: 'The type and amount of a resource to assign to a container. The
        supported resource types are GPUs and Elastic Inference accelerators.
        For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html">Working
        with GPUs on Amazon ECS</a> or <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html">Working
        with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon Elastic
        Container Service Developer Guide</i> '
    TaskOverride:
      type: object
      properties:
        containerOverrides:
          $ref: "#/components/schemas/ContainerOverrides"
        inferenceAcceleratorOverrides:
          $ref: "#/components/schemas/InferenceAcceleratorOverrides"
        taskRoleArn:
          $ref: "#/components/schemas/String"
        executionRoleArn:
          $ref: "#/components/schemas/String"
      description: The overrides associated with a task.
    ScaleUnit:
      type: string
      enum:
        - PERCENT
    Secret:
      type: object
      required:
        - name
        - valueFrom
      properties:
        name:
          $ref: "#/components/schemas/String"
        valueFrom:
          $ref: "#/components/schemas/String"
      description: <p>An object representing the secret to expose to your container.
        Secrets can be exposed to a container in the following ways:</p> <ul>
        <li> <p>To inject sensitive data into your containers as environment
        variables, use the <code>secrets</code> container definition
        parameter.</p> </li> <li> <p>To reference sensitive information in the
        log configuration of a container, use the <code>secretOptions</code>
        container definition parameter.</p> </li> </ul> <p>For more information,
        see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html">Specifying
        Sensitive Data</a> in the <i>Amazon Elastic Container Service Developer
        Guide</i>.</p>
    ServiceEvents:
      type: array
      items:
        $ref: "#/components/schemas/ServiceEvent"
    ServiceEvent:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/String"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        message:
          $ref: "#/components/schemas/String"
      description: Details on an event associated with a service.
    ServiceField:
      type: string
      enum:
        - TAGS
    ServiceRegistry:
      type: object
      properties:
        registryArn:
          $ref: "#/components/schemas/String"
        port:
          $ref: "#/components/schemas/BoxedInteger"
        containerName:
          $ref: "#/components/schemas/String"
        containerPort:
          $ref: "#/components/schemas/BoxedInteger"
      description: Details of the service registry.
    StabilityStatus:
      type: string
      enum:
        - STEADY_STATE
        - STABILIZING
    Task:
      type: object
      properties:
        taskArn:
          $ref: "#/components/schemas/String"
        clusterArn:
          $ref: "#/components/schemas/String"
        taskDefinitionArn:
          $ref: "#/components/schemas/String"
        containerInstanceArn:
          $ref: "#/components/schemas/String"
        overrides:
          $ref: "#/components/schemas/TaskOverride"
        lastStatus:
          $ref: "#/components/schemas/String"
        desiredStatus:
          $ref: "#/components/schemas/String"
        cpu:
          $ref: "#/components/schemas/String"
        memory:
          $ref: "#/components/schemas/String"
        containers:
          $ref: "#/components/schemas/Containers"
        startedBy:
          $ref: "#/components/schemas/String"
        version:
          $ref: "#/components/schemas/Long"
        stoppedReason:
          $ref: "#/components/schemas/String"
        stopCode:
          $ref: "#/components/schemas/TaskStopCode"
        connectivity:
          $ref: "#/components/schemas/Connectivity"
        connectivityAt:
          $ref: "#/components/schemas/Timestamp"
        pullStartedAt:
          $ref: "#/components/schemas/Timestamp"
        pullStoppedAt:
          $ref: "#/components/schemas/Timestamp"
        executionStoppedAt:
          $ref: "#/components/schemas/Timestamp"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        startedAt:
          $ref: "#/components/schemas/Timestamp"
        stoppingAt:
          $ref: "#/components/schemas/Timestamp"
        stoppedAt:
          $ref: "#/components/schemas/Timestamp"
        group:
          $ref: "#/components/schemas/String"
        launchType:
          $ref: "#/components/schemas/LaunchType"
        platformVersion:
          $ref: "#/components/schemas/String"
        attachments:
          $ref: "#/components/schemas/Attachments"
        healthStatus:
          $ref: "#/components/schemas/HealthStatus"
        tags:
          $ref: "#/components/schemas/Tags"
        inferenceAccelerators:
          $ref: "#/components/schemas/InferenceAccelerators"
      description: Details on a task in a cluster.
    SystemControl:
      type: object
      properties:
        namespace:
          $ref: "#/components/schemas/String"
        value:
          $ref: "#/components/schemas/String"
      description: <p>A list of namespaced kernel parameters to set in the container. This
        parameter maps to <code>Sysctls</code> in the <a
        href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create
        a container</a> section of the <a
        href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a>
        and the <code>--sysctl</code> option to <a
        href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
        <p>It is not recommended that you specify network-related
        <code>systemControls</code> parameters for multiple containers in a
        single task that also uses either the <code>awsvpc</code> or
        <code>host</code> network mode for the following reasons:</p> <ul> <li>
        <p>For tasks that use the <code>awsvpc</code> network mode, if you set
        <code>systemControls</code> for any container, it applies to all
        containers in the task. If you set different <code>systemControls</code>
        for multiple containers in a single task, the container that is started
        last determines which <code>systemControls</code> take effect.</p> </li>
        <li> <p>For tasks that use the <code>host</code> network mode, the
        <code>systemControls</code> parameter applies to the container
        instance's kernel parameter as well as that of all containers of any
        tasks running on that container instance.</p> </li> </ul>
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      properties:
        key:
          $ref: "#/components/schemas/TagKey"
        value:
          $ref: "#/components/schemas/TagValue"
      description: "<p>The metadata that you apply to a resource to help you categorize and
        organize them. Each tag consists of a key and an optional value, both of
        which you define.</p> <p>The following basic restrictions apply to
        tags:</p> <ul> <li> <p>Maximum number of tags per resource - 50</p>
        </li> <li> <p>For each resource, each tag key must be unique, and each
        tag key can have only one value.</p> </li> <li> <p>Maximum key length -
        128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length -
        256 Unicode characters in UTF-8</p> </li> <li> <p>If your tagging schema
        is used across multiple services and resources, remember that other
        services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and
        the following characters: + - = . _ : / @.</p> </li> <li> <p>Tag keys
        and values are case-sensitive.</p> </li> <li> <p>Do not use
        <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
        combination of such as a prefix for either keys or values as it is
        reserved for AWS use. You cannot edit or delete tag keys or values with
        this prefix. Tags with this prefix do not count against your tags per
        resource limit.</p> </li> </ul>"
    TagKeys:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    TaskStopCode:
      type: string
      enum:
        - TaskFailedToStart
        - EssentialContainerExited
        - UserInitiated
    TaskDefinitionField:
      type: string
      enum:
        - TAGS
    TaskDefinitionPlacementConstraintType:
      type: string
      enum:
        - memberOf
    TaskDefinitionPlacementConstraint:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/TaskDefinitionPlacementConstraintType"
        expression:
          $ref: "#/components/schemas/String"
      description: <p>An object representing a constraint on task placement in the task
        definition. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html">Task
        Placement Constraints</a> in the <i>Amazon Elastic Container Service
        Developer Guide</i>.</p> <note> <p>If you are using the Fargate launch
        type, task placement constraints are not supported.</p> </note>
    TaskField:
      type: string
      enum:
        - TAGS
    Tmpfs:
      type: object
      required:
        - containerPath
        - size
      properties:
        containerPath:
          $ref: "#/components/schemas/String"
        size:
          $ref: "#/components/schemas/Integer"
        mountOptions:
          $ref: "#/components/schemas/StringList"
      description: The container path, mount options, and size of the tmpfs mount.
    UlimitName:
      type: string
      enum:
        - core
        - cpu
        - data
        - fsize
        - locks
        - memlock
        - msgqueue
        - nice
        - nofile
        - nproc
        - rss
        - rtprio
        - rttime
        - sigpending
        - stack
    Ulimit:
      type: object
      required:
        - name
        - softLimit
        - hardLimit
      properties:
        name:
          $ref: "#/components/schemas/UlimitName"
        softLimit:
          $ref: "#/components/schemas/Integer"
        hardLimit:
          $ref: "#/components/schemas/Integer"
      description: The <code>ulimit</code> settings to pass to the container.
    Volume:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/String"
        host:
          $ref: "#/components/schemas/HostVolumeProperties"
        dockerVolumeConfiguration:
          $ref: "#/components/schemas/DockerVolumeConfiguration"
      description: A data volume used in a task definition. For tasks that use a Docker
        volume, specify a <code>DockerVolumeConfiguration</code>. For tasks that
        use a bind mount host volume, specify a <code>host</code> and optional
        <code>sourcePath</code>. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html">Using
        Data Volumes in Tasks</a>.
    VolumeFrom:
      type: object
      properties:
        sourceContainer:
          $ref: "#/components/schemas/String"
        readOnly:
          $ref: "#/components/schemas/BoxedBoolean"
      description: Details on a data volume from another container in the same task
        definition.
