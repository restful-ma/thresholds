openapi: 3.0.0
info:
  title: ServiceFabricClient
  version: 1.0.0
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/servicefabric/data-plane/Microsoft.ServiceFabric/stable/1.0.0/servicefabric.json
      version: "2.0"
  x-preferred: false
  x-providerName: azure.com
  x-serviceName: servicefabric
  x-tags:
    - Azure
    - Microsoft
paths:
  /$/GetClusterHealth:
    get:
      description: Get cluster healths
      operationId: ClusterHealths_Get
      parameters:
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - description: The filter of the nodes health state
          in: query
          name: NodesHealthStateFilter
          required: false
          schema:
            type: string
        - description: The filter of the applications health state
          in: query
          name: ApplicationsHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The cluster health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/GetClusterManifest:
    get:
      description: Get cluster manifests
      operationId: ClusterManifests_Get
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The cluster manifest
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/GetLoadInformation:
    get:
      description: Get cluster load informations
      operationId: ClusterLoadInformations_Get
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The load information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterLoadInformation"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/GetUpgradeProgress:
    get:
      description: Get upgrade progresses
      operationId: UpgradeProgresses_Get
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The upgrade progress
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterUpgradeProgress"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/MoveToNextUpgradeDomain:
    post:
      description: Resume cluster upgrades
      operationId: ClusterUpgrades_Resume
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResumeClusterUpgrade"
        description: The upgrade of the cluster
        required: true
      responses:
        "200":
          description: The cluster upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/Provision:
    post:
      description: Register cluster packages
      operationId: ClusterPackages_Register
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterClusterPackage"
        description: The package of the register cluster
        required: true
      responses:
        "200":
          description: The cluster upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/ReportClusterHealth:
    post:
      description: Report cluster healths
      operationId: ClusterHealths_Send
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterHealthReport"
        description: The report of the cluster health
        required: true
      responses:
        "200":
          description: The cluster health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/RollbackUpgrade:
    post:
      description: Rollback cluster upgrades
      operationId: ClusterUpgrades_Rollback
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The cluster upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/Unprovision:
    post:
      description: Unregister cluster packages
      operationId: ClusterPackages_Unregister
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnregisterClusterPackage"
        description: The package of the unregister cluster
        required: true
      responses:
        "200":
          description: The cluster upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/UpdateUpgrade:
    post:
      description: Update cluster upgrades
      operationId: ClusterUpgrades_Update
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClusterUpgrade"
        description: The description of the update cluster upgrade
        required: true
      responses:
        "200":
          description: The cluster upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /$/Upgrade:
    post:
      description: Start cluster upgrades
      operationId: ClusterUpgrades_Start
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartClusterUpgrade"
        description: The description of the start cluster upgrade
        required: true
      responses:
        "200":
          description: The cluster upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /ApplicationTypes:
    get:
      description: List application types
      operationId: ApplicationTypes_List
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application type
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApplicationType"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /ApplicationTypes/$/Provision:
    post:
      description: Register application types
      operationId: ApplicationTypes_Register
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterApplicationType"
        description: The type of the register application
        required: true
      responses:
        "200":
          description: The application type
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/ApplicationTypes/{applicationTypeName}":
    get:
      description: Get application types
      operationId: ApplicationTypes_Get
      parameters:
        - description: The name of the application type
          in: path
          name: applicationTypeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application type
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApplicationType"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest":
    get:
      description: Get application manifests
      operationId: ApplicationManifests_Get
      parameters:
        - description: The name of the application type
          in: path
          name: applicationTypeName
          required: true
          schema:
            type: string
        - description: The version of the application type
          in: query
          name: ApplicationTypeVersion
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application manifest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationManifest"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest":
    get:
      description: Get service manifests
      operationId: ServiceManifests_Get
      parameters:
        - description: The name of the application type
          in: path
          name: applicationTypeName
          required: true
          schema:
            type: string
        - description: The version of the application type
          in: query
          name: ApplicationTypeVersion
          required: true
          schema:
            type: string
        - description: The name of the service manifest
          in: query
          name: ServiceManifestName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service manifest
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceManifest"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes":
    get:
      description: Get service types
      operationId: ServiceTypes_Get
      parameters:
        - description: The name of the application type
          in: path
          name: applicationTypeName
          required: true
          schema:
            type: string
        - description: The version of the application type
          in: query
          name: ApplicationTypeVersion
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service type
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ServiceType"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/ApplicationTypes/{applicationTypeName}/$/Unprovision":
    post:
      description: Unregister application types
      operationId: ApplicationTypes_Unregister
      parameters:
        - description: The name of the application type
          in: path
          name: applicationTypeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnregisterApplicationType"
        description: The type of the unregister application
        required: true
      responses:
        "200":
          description: The application type
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /Applications:
    get:
      description: List applications
      operationId: Applications_List
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
        - description: The token of the continuation
          in: query
          name: continuation-token
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The application list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationList"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /Applications/$/Create:
    post:
      description: Create applications
      operationId: Applications_Create
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationDescription"
        description: The description of the application
        required: true
      responses:
        "200":
          description: The application description
          content:
            application/json:
              schema:
                type: string
        "201":
          description: The application description
          content:
            application/json:
              schema:
                type: string
        "202":
          description: The application description
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}":
    get:
      description: Get applications
      operationId: Applications_Get
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/Delete":
    post:
      description: Remove applications
      operationId: Applications_Remove
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The force remove flag to skip services check
          in: query
          name: ForceRemove
          required: false
          schema:
            type: boolean
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetHealth":
    get:
      description: Get application healths
      operationId: ApplicationHealths_Get
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - description: The filter of the deployed application health state
          in: query
          name: DeployedApplicationsHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServiceGroups/$/CreateServiceGroupFromTemplate":
    post:
      description: Create service group from templates
      operationId: ServiceGroupFromTemplates_Create
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        $ref: "#/components/requestBodies/ServiceDescriptionTemplate"
      responses:
        "200":
          description: The service group description template
          content:
            application/json:
              schema:
                type: string
        "201":
          description: The service group description template
          content:
            application/json:
              schema:
                type: string
        "202":
          description: The service group description template
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServiceGroups/{serviceName}/$/Delete":
    post:
      description: Remove service groups
      operationId: ServiceGroups_Remove
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices":
    get:
      description: List services
      operationId: Services_List
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceList"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/$/Create":
    post:
      description: Create services
      operationId: Services_Create
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceDescription"
        description: The description of the service
        required: true
      responses:
        "200":
          description: The service description
          content:
            application/json:
              schema:
                type: string
        "201":
          description: The service description
          content:
            application/json:
              schema:
                type: string
        "202":
          description: The service description
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/$/CreateFromTemplate":
    post:
      description: Create service from templates
      operationId: ServiceFromTemplates_Create
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        $ref: "#/components/requestBodies/ServiceDescriptionTemplate"
      responses:
        "200":
          description: The service description template
          content:
            application/json:
              schema:
                type: string
        "201":
          description: The service description template
          content:
            application/json:
              schema:
                type: string
        "202":
          description: The service description template
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/$/CreateServiceGroup":
    post:
      description: Create service groups
      operationId: ServiceGroups_Create
      parameters:
        - description: The name of the service group
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceGroupDescription"
        description: The description of the service group
        required: true
      responses:
        "200":
          description: The service description
          content:
            application/json:
              schema:
                type: string
        "201":
          description: The service description
          content:
            application/json:
              schema:
                type: string
        "202":
          description: The service description
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/{serviceName}":
    get:
      description: Get services
      operationId: Services_Get
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupDescription":
    get:
      description: Get service group descriptions
      operationId: ServiceGroupDescriptions_Get
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service group description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupDescription"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupMembers":
    get:
      description: Get service group members
      operationId: ServiceGroupMembers_Get
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service group description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupMember"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetServices/{serviceName}/$/UpdateServiceGroup":
    post:
      description: Update service groups
      operationId: ServiceGroups_Update
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServiceGroupDescription"
        description: The description of the service group update
        required: true
      responses:
        "200":
          description: The service group update description
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/GetUpgradeProgress":
    get:
      description: Get application upgrades
      operationId: ApplicationUpgrades_Get
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application upgrade
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationUpgrade"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/MoveNextUpgradeDomain":
    post:
      description: Resume application upgrades
      operationId: ApplicationUpgrades_Resume
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResumeApplicationUpgrade"
        description: The upgrade of the resume application
        required: true
      responses:
        "200":
          description: The resume application upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/ReportHealth":
    post:
      description: Send application health
      operationId: ApplicationHealths_Send
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationHealthReport"
        description: The report of the application health
        required: true
      responses:
        "200":
          description: The application health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/RollbackUpgrade":
    post:
      description: Start application upgrade rollbacks
      operationId: ApplicationUpgradeRollbacks_Start
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The application upgrade rollback
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/UpdateUpgrade":
    post:
      description: Update application upgrades
      operationId: ApplicationUpgrades_Update
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApplicationUpgrade"
        description: The description of the update application upgrade
        required: true
      responses:
        "200":
          description: The update application upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Applications/{applicationName}/$/Upgrade":
    post:
      description: Start application upgrades
      operationId: ApplicationUpgrades_Start
      parameters:
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartApplicationUpgrade"
        description: The description of the start application upgrade
        required: true
      responses:
        "200":
          description: The start application upgrade
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /Nodes:
    get:
      description: List nodes
      operationId: Nodes_List
      parameters:
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
        - description: The token of the continuation
          in: query
          name: continuation-token
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The node list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeList"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}":
    get:
      description: Get nodes
      operationId: Nodes_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/Activate":
    post:
      description: Enable nodes
      operationId: Nodes_Enable
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The node
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/Deactivate":
    post:
      description: Disable nodes
      operationId: Nodes_Disable
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisableNode"
        description: The node
        required: true
      responses:
        "200":
          description: The node
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications":
    get:
      description: List deployed applications
      operationId: DeployedApplications_List
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed application list
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeployedApplication"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}":
    get:
      description: Get deployed applications
      operationId: DeployedApplications_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedApplication"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetCodePackages":
    get:
      description: Get deployed code packages
      operationId: DeployedCodePackages_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed code package
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeployedCodePackage"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetHealth":
    get:
      description: Get deployed application healths
      operationId: DeployedApplicationHealths_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - description: The filter of the deployed service packages health state
          in: query
          name: DeployedServicePackagesHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed application health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedApplicationHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetReplicas":
    get:
      description: Get deployed replicas
      operationId: DeployedReplicas_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed replica
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeployedReplica"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages":
    get:
      description: Get deployed service packages
      operationId: DeployedServicePackages_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed service package
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeployedServicePackage"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{serviceManifestName}/$/ReportHealth":
    post:
      description: Send deployed service package health
      operationId: DeployedServicePackageHealths_Send
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service manifest
          in: path
          name: serviceManifestName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeployedServiceHealthReport"
        description: The report of the deployed service package health
        required: true
      responses:
        "200":
          description: The deployed service package health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{servicePackageName}/$/GetHealth":
    get:
      description: Get deployed service package healths
      operationId: DeployedServicePackageHealths_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The name of the service package
          in: path
          name: servicePackageName
          required: true
          schema:
            type: string
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed service package health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServicePackageHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServiceTypes":
    get:
      description: Get deployed service types
      operationId: DeployedServiceTypes_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed service type
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeployedServiceType"
                type: array
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/ReportHealth":
    post:
      description: Send deployed application health
      operationId: DeployedApplicationHealths_Send
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the application
          in: path
          name: applicationName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeployedApplicationHealthReport"
        description: The report of the deployed application health
        required: true
      responses:
        "200":
          description: The deployed application health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetHealth":
    get:
      description: Get node healths
      operationId: NodeHealths_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The node health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetLoadInformation":
    get:
      description: Get node load informations
      operationId: NodeLoadInformations_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The node load information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLoadInformation"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/GetPartitions/{partitionName}/$/GetReplicas/{replicaId}/$/GetDetail":
    get:
      description: Get deployed replica details
      operationId: DeployedReplicaDetails_Get
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: The name of the partition
          in: path
          name: partitionName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The id of the replica
          in: path
          name: replicaId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The deployed replica detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedReplicaDetail"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/RemoveNodeState":
    post:
      description: Remove node states
      operationId: NodeStates_Remove
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The node state
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Nodes/{nodeName}/$/ReportHealth":
    post:
      description: Send node health
      operationId: NodeHealths_Send
      parameters:
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeHealthReport"
        description: The report of the node health
        required: true
      responses:
        "200":
          description: The node health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetHealth":
    get:
      description: Get partition healths
      operationId: PartitionHealths_Get
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - description: The filter of the replicas health state
          in: query
          name: ReplicasHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The partition health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetLoadInformation":
    get:
      description: Get partition load informations
      operationId: PartitionLoadInformations_Get
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The partition load information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionLoadInformation"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetReplicas":
    get:
      description: List replicas
      operationId: Replicas_List
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The replica list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaList"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}":
    get:
      description: Get replicas
      operationId: Replicas_Get
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - description: The id of the replica
          in: path
          name: replicaId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The replica
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Replica"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth":
    get:
      description: Get replica healths
      operationId: ReplicaHealths_Get
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - description: The id of the replica
          in: path
          name: replicaId
          required: true
          schema:
            type: string
        - description: The filter of the events health state
          in: query
          name: EventsHealthStateFilter
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The replica health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetLoadInformation":
    get:
      description: Get replica load informations
      operationId: ReplicaLoadInformations_Get
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - description: The id of the replica
          in: path
          name: replicaId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The replica load information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaLoadInformation"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth":
    post:
      description: Send replica healths
      operationId: ReplicaHealths_Send
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - description: The id of the replica
          in: path
          name: replicaId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplicaHealthReport"
        description: The report of the replica health
        required: true
      responses:
        "200":
          description: The replica health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/Recover":
    post:
      description: Repair partitions
      operationId: Partitions_Repair
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The repair partition
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/ReportHealth":
    post:
      description: Send partition health
      operationId: PartitionHealths_Send
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartitionHealthReport"
        description: The report of the partition health
        required: true
      responses:
        "200":
          description: The partition health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Partitions/{partitionId}/$/ResetLoad":
    post:
      description: Reset partition loads
      operationId: PartitionLoads_Reset
      parameters:
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The reset partition load
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/Delete":
    post:
      description: Remove services
      operationId: Services_Remove
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/GetDescription":
    get:
      description: Get service descriptions
      operationId: ServiceDescriptions_Get
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceDescription"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/GetHealth":
    get:
      description: Get service healths
      operationId: ServiceHealths_Get
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The service health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceHealth"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/GetPartitions":
    get:
      description: List partitions
      operationId: Partitions_List
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The partitions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionList"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/GetPartitions/$/Recover":
    post:
      description: Repair partition lists
      operationId: PartitionLists_Repair
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The repair partition
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/GetPartitions/{partitionId}":
    get:
      description: Get partitions
      operationId: Partitions_Get
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The id of the partition
          in: path
          name: partitionId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The partitions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partition"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/ReportHealth":
    post:
      description: Send service healths
      operationId: ServiceHealths_Send
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceHealthReport"
        description: The report of the service health
        required: true
      responses:
        "200":
          description: The service health
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/ResolvePartition":
    get:
      description: Resolve services
      operationId: Services_Resolve
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - description: The type of the partition key
          in: query
          name: PartitionKeyType
          required: false
          schema:
            type: integer
        - description: The value of the partition key
          in: query
          name: PartitionKeyValue
          required: false
          schema:
            type: string
        - description: The version of the previous rsp
          in: query
          name: PreviousRspVersion
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      responses:
        "200":
          description: The partition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolvedServicePartition"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  "/Services/{serviceName}/$/Update":
    post:
      description: Update services
      operationId: Services_Update
      parameters:
        - description: The name of the service
          in: path
          name: serviceName
          required: true
          x-ms-skip-url-encoding: true
          schema:
            type: string
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/api-version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServiceDescription"
        description: The description of the service update
        required: true
      responses:
        "200":
          description: The service update description
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
servers:
  - url: https://azure.local:19080
components:
  parameters:
    api-version:
      description: The version of the api
      in: query
      name: api-version
      required: true
      schema:
        type: string
    timeout:
      description: The timeout in seconds
      in: query
      name: timeout
      required: false
      x-ms-parameter-location: client
      schema:
        type: integer
  requestBodies:
    ServiceDescriptionTemplate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServiceDescriptionTemplate"
      description: The template of the service description
      required: true
  schemas:
    Application:
      description: The application
      properties:
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          type: string
        Name:
          type: string
        Parameters:
          items:
            description: The parameters
            properties:
              Key:
                type: string
              Value:
                type: string
            type: object
          type: array
        Status:
          type: string
        TypeName:
          type: string
        TypeVersion:
          type: string
      type: object
    ApplicationDescription:
      description: The description of the application
      properties:
        Name:
          type: string
        ParameterList:
          items:
            description: The list of the parameter
            properties:
              Key:
                type: string
              Value:
                type: string
            type: object
          type: array
        TypeName:
          type: string
        TypeVersion:
          type: string
      type: object
    ApplicationHealth:
      description: The health of the application
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        DeployedApplicationHealthStates:
          items:
            description: The states of the deployed application health
            properties:
              AggregatedHealthState:
                $ref: "#/components/schemas/HealthState"
              ApplicationName:
                type: string
              NodeName:
                type: string
            type: object
          type: array
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        Name:
          type: string
        ServiceHealthStates:
          items:
            description: The states of the service health
            properties:
              AggregatedHealthState:
                $ref: "#/components/schemas/HealthState"
              ServiceName:
                type: string
            type: object
          type: array
        UnhealthyEvaluations:
          type: string
      type: object
    ApplicationHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the application health
      properties:
        ServiceName:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Application
    ApplicationHealthPolicy:
      description: The policy of the application health
      properties:
        ConsiderWarningAsError:
          type: boolean
        DefaultServiceTypeHealthPolicy:
          description: The policy of the default service type health
          properties:
            MaxPercentUnhealthyPartitionsPerService:
              type: integer
            MaxPercentUnhealthyReplicasPerPartition:
              type: integer
            MaxPercentUnhealthyServices:
              type: integer
          type: object
        MaxPercentUnhealthyDeployedApplications:
          type: integer
      type: object
    ApplicationHealthPolicyMap:
      description: The application health policy of the cluster
      properties:
        ConsiderWarningAsError:
          description: The boolean of the consider warning as error
          type: boolean
        DefaultServiceTypeHealthPolicy:
          description: The policy of the default service type health
          type: integer
        MaxPercentUnhealthyDeployedApplications:
          description: The max percent of the unhealthy deployed applications
          type: integer
        MaxPercentUnhealthyPartitionsPerService:
          description: The max percent unhealthy partitions per service
          type: integer
        MaxPercentUnhealthyReplicasPerPartition:
          description: The max percent unhealthy replicas per partition
          type: integer
        MaxPercentUnhealthyServices:
          description: The policy of the default service type health
          type: integer
      type: object
    ApplicationHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the application health
      type: object
    ApplicationList:
      description: The list of the application
      properties:
        ContinuationToken:
          type: string
        Items:
          items:
            $ref: "#/components/schemas/Application"
          type: array
      type: object
    ApplicationManifest:
      description: The manifest of the application
      properties:
        Manifest:
          type: string
      type: object
    ApplicationType:
      description: The type of the application
      properties:
        DefaultParameterList:
          items:
            description: The list of the default parameter
            properties:
              Key:
                type: string
              Value:
                type: string
            type: object
          type: array
        Name:
          type: string
        Version:
          type: string
      type: object
    ApplicationTypeHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the application type health
      properties:
        ApplicationTypeName:
          type: string
        MaxPercentUnhealthyApplications:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: ApplicationType
    ApplicationUpgrade:
      description: The upgrade of the application
      properties:
        CurrentUpgradeDomainProgress:
          description: The progress of the current upgrade domain
          properties:
            DomainName:
              type: string
            NodeUpgradeProgressList:
              type: string
          type: object
        DeployedApplicationHealthStates:
          description: The states of the deployed application health
          properties:
            DomainName:
              type: string
            NodeUpgradeProgressList:
              type: string
          type: object
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        FailureTimestampUtc:
          type: string
        Name:
          type: string
        NextUpgradeDomain:
          type: string
        RollingUpgradeMode:
          $ref: "#/components/schemas/RollingUpgradeMode"
        StartTimestampUtc:
          type: string
        TargetApplicationTypeVersion:
          type: string
        TypeName:
          type: string
        UnhealthyEvaluations:
          type: string
        UpgradeDomainDurationInMilliseconds:
          type: string
        UpgradeDomains:
          type: string
        UpgradeDurationInMilliseconds:
          type: string
        UpgradeState:
          $ref: "#/components/schemas/UpgradeState"
      type: object
    ApplicationsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the applications health
      properties:
        MaxPercentUnhealthyApplications:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Applications
    ClusterHealth:
      description: The health of the cluster
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        ApplicationHealthState:
          items:
            description: The state of the application health
            properties:
              AggregatedHealthState:
                $ref: "#/components/schemas/HealthState"
              Name:
                type: string
            type: object
          type: array
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        NodeHealthStates:
          items:
            description: The states of tehe node health
            properties:
              AggregatedHealthState:
                $ref: "#/components/schemas/HealthState"
              Id:
                description: The id
                properties:
                  Id:
                    type: string
                type: object
              Name:
                type: string
            type: object
          type: array
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
    ClusterHealthPolicy:
      description: The policy of the cluster health
      properties:
        FailureAction:
          description: The action of the failure
          type: string
        ForceRestart:
          description: The flag of the force restart
          type: boolean
        HealthCheckRetryTimeoutInMilliseconds:
          description: The milliseconds of the health check retry timeout
          type: string
        HealthCheckStableDurationInMilliseconds:
          description: The milliseconds of the health check stable duration
          type: string
        HealthCheckWaitDurationInMilliseconds:
          description: The milliseconds of the health check wait duration
          type: string
        RollingUpgradeMode:
          $ref: "#/components/schemas/RollingUpgradeMode"
        UpgradeDomainTimeoutInMilliseconds:
          description: The milliseconds of the upgrade domain timeout
          type: string
        UpgradeReplicaSetCheckTimeoutInSeconds:
          description: The seconds of the upgrade replica set check timeout
          type: integer
        UpgradeTimeoutInMilliseconds:
          description: The milliseconds of the upgrade timeout
          type: string
      type: object
    ClusterHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the cluster health
      type: object
    ClusterLoadInformation:
      description: The information of the cluster load
      properties:
        LastBalancingEndTimeUtc:
          type: string
        LastBalancingStartTimeUtc:
          type: string
        LoadMetricInformation:
          items:
            $ref: "#/components/schemas/LoadMetricInformation"
          type: array
      type: object
    ClusterUpgradeHealthPolicy:
      description: The upgrade health policy of the cluster
      properties:
        MaxPercentDeltaUnhealthyNodes:
          description: The max percent of the delta unhealthy nodes, values are [0-100]
          type: integer
        MaxPercentUpgradeDomainDeltaUnhealthyNodes:
          description: The max percent of the upgrade domain delta unhealthy nodes, values
            are [0-100]
          type: integer
      type: object
    ClusterUpgradeProgress:
      description: The progress of the cluster upgrade
      properties:
        CodeVersion:
          type: string
        ConfigVersion:
          type: string
        CurrentUpgradeDomainProgress:
          description: The progress of the current upgrade domain
          properties:
            DomainName:
              type: string
            NodeUpgradeProgressList:
              type: string
          type: object
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        FailureTimestampUtc:
          type: string
        NextUpgradeDomain:
          type: string
        RollingUpgradeMode:
          $ref: "#/components/schemas/RollingUpgradeMode"
        StartTimestampUtc:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
        UpgradeDomainDurationInMilliseconds:
          type: string
        UpgradeDomainProgressAtFailure:
          description: The failure of the upgrade domain progress at
          properties:
            DomainName:
              type: string
            NodeUpgradeProgressList:
              type: string
          type: object
        UpgradeDomains:
          items:
            type: string
          type: array
        UpgradeDurationInMilliseconds:
          type: string
        UpgradeState:
          $ref: "#/components/schemas/UpgradeState"
      type: object
    CodePackageEntryPointStatistics:
      description: The statistics of the code package entry point
      properties:
        ActivationCount:
          type: integer
        ActivationFailureCount:
          type: integer
        ContinuousActivationFailureCount:
          type: integer
        ContinuousExitFailureCount:
          type: integer
        ExitCount:
          type: integer
        ExitFailureCount:
          type: integer
        LastActivationTime:
          type: string
        LastExitCode:
          type: integer
        LastExitTime:
          type: string
        LastSuccessfulActivationTime:
          type: string
        LastSuccessfulExitTime:
          type: string
      type: object
    CreateServiceDescription:
      description: The description of the create service
      discriminator:
        propertyName: ServiceKind
      properties:
        ApplicationName:
          type: string
        CorrelationScheme:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        Flags:
          type: integer
        PartitionDescription:
          $ref: "#/components/schemas/PartitionDescription"
        PlacementConstraints:
          type: string
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceLoadMetrics:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceName:
          type: string
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceTypeName:
          type: string
      required:
        - ServiceKind
      type: object
    CreateServiceGroupDescription:
      description: The description of the create service group
      discriminator:
        propertyName: ServiceKind
      properties:
        ApplicationName:
          type: string
        CorrelationScheme:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        Flags:
          type: integer
        PartitionDescription:
          $ref: "#/components/schemas/PartitionDescription"
        PlacementConstraints:
          type: string
        ServiceGroupMemberDescription:
          items:
            $ref: "#/components/schemas/ServiceGroupMemberDescription"
          type: array
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceLoadMetrics:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceName:
          type: string
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceTypeName:
          type: string
      required:
        - ServiceKind
      type: object
    DefaultMoveCost:
      enum:
        - Zero
        - Low
        - Medium
        - High
      type: string
    DeltaNodesCheckHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the delta nodes check health
      properties:
        BaselineErrorCount:
          type: integer
        BaselineTotalCount:
          type: integer
        MaxPercentDeltaUnhealthyNodes:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: DeltaNodesCheck
    DeployedApplication:
      description: The application of the deployed
      properties:
        Id:
          type: string
        LogDirectory:
          type: string
        Name:
          type: string
        Status:
          type: string
        TempDirectory:
          type: string
        TypeName:
          type: string
        WorkDirectory:
          type: string
      type: object
    DeployedApplicationHealth:
      description: The health of the deployed application
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        DeployedServicePackageHealthStates:
          $ref: "#/components/schemas/DeployedServicePackageHealthState"
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        Name:
          type: string
        NodeName:
          type: string
        UnhealthyEvaluations:
          type: string
      type: object
    DeployedApplicationHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the deployed application health
      properties:
        ApplicationName:
          type: string
        NodeName:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: DeployedApplication
    DeployedApplicationHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the deployed application health
      type: object
    DeployedApplicationsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the deployed applications health
      properties:
        MaxPercentUnhealthyDeployedApplications:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: DeployedApplications
    DeployedCodePackage:
      description: The package of the deployed code
      properties:
        HasSetupEntryPoint:
          type: boolean
        MainEntryPoint:
          $ref: "#/components/schemas/EntryPoint"
        Name:
          type: string
        RunFrequencyInterval:
          type: string
        ServiceManifestName:
          type: string
        SetupEntryPoint:
          $ref: "#/components/schemas/EntryPoint"
        Status:
          type: string
        Version:
          type: string
      type: object
    DeployedReplica:
      description: The replica of the deployed
      properties:
        Address:
          type: string
        CodePackageName:
          type: string
        InstanceId:
          type: string
        PartitionId:
          type: string
        ReplicaId:
          type: string
        ReplicaRole:
          $ref: "#/components/schemas/ReplicaRole"
        ReplicaStatus:
          $ref: "#/components/schemas/ReplicaStatus"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceManifestName:
          type: string
        ServiceManifestVersion:
          type: string
        ServiceName:
          type: string
        ServiceTypeName:
          type: string
      type: object
    DeployedReplicaDetail:
      description: The detail of the deployed replica
      properties:
        CurrentReplicatorOperation:
          type: integer
        CurrentServiceOperation:
          type: integer
        CurrentServiceOperationStartTimeUtc:
          type: string
        InstanceId:
          type: string
        PartitionId:
          type: string
        ReadStatus:
          type: integer
        ReplicaId:
          type: string
        ReplicatorStatus:
          description: The status of the replicator
          properties:
            Kind:
              type: integer
            ReplicationQueueStatus:
              description: The status of the replication queue
              properties:
                CommittedSequenceNumber:
                  type: string
                CompletedSequenceNumber:
                  type: string
                FirstSequenceNumber:
                  type: string
                LastSequenceNumber:
                  type: string
                QueueMemorySize:
                  type: string
                QueueUtilizationPercentage:
                  type: string
              type: object
          type: object
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceName:
          type: string
        WriteStatus:
          type: integer
      type: object
    DeployedServiceHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the deployed service package health
      type: object
    DeployedServicePackage:
      description: The package of the deployed service
      properties:
        Name:
          type: string
        Status:
          type: string
        Version:
          type: string
      type: object
    DeployedServicePackageHealth:
      description: The health of the deployed service package
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        ApplicationName:
          type: string
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        NodeName:
          type: string
        ServiceManifestName:
          type: string
      type: object
    DeployedServicePackageHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the deployed service package health
      properties:
        ApplicationName:
          type: string
        NodeName:
          type: string
        ServiceManifestName:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: DeployedServicePackage
    DeployedServicePackageHealthState:
      description: The state of the deployed service package health
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        ApplicationName:
          type: string
        NodeName:
          type: string
        ServiceManifestName:
          type: string
      type: object
    DeployedServicePackagesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the deployed service packages health
      properties:
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: DeployedServicePackages
    DeployedServiceType:
      description: The type of the deploye service
      properties:
        CodePackageName:
          type: string
        ServiceManifestName:
          type: string
        ServiceTypeName:
          type: string
        Status:
          type: string
      type: object
    DisableNode:
      description: The node
      properties:
        DeactivationIntent:
          enum:
            - Pause
            - Restart
            - RemoveData
            - RemoveNode
          type: string
      type: object
    EntryPoint:
      description: The point of the entry
      properties:
        CodePackageEntryPointStatistics:
          $ref: "#/components/schemas/CodePackageEntryPointStatistics"
        EntryPointLocation:
          type: integer
        NextActivationTime:
          type: integer
        ProcessId:
          type: integer
        RunAsUserName:
          type: integer
        Status:
          type: string
      type: object
    ErrorModel:
      description: The model of the error
      properties:
        Error:
          description: The error
          properties:
            Code:
              type: string
            Message:
              type: string
          type: object
      type: object
    EventHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the event health
      properties:
        ConsiderWarningAsError:
          type: boolean
        UnhealthyEvent:
          $ref: "#/components/schemas/HealthEvent"
      type: object
      x-ms-discriminator-value: Event
    FailureAction:
      enum:
        - Invalid
        - Rollback
        - Manual
      type: string
    FailureReason:
      enum:
        - Invalid
        - Interrupted
        - HealthCheck
        - UpgradeDomainTimeout
        - OverallUpgradeTimeout
      type: string
    HealthEvaluation:
      description: The evauation of the health
      discriminator:
        propertyName: Kind
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        Description:
          type: string
        Kind:
          enum:
            - Invalid
            - Event
            - Replicas
            - Partitions
            - DeployedServicePackages
            - DeployedApplications
            - Services
            - Nodes
            - Applications
            - SystemApplication
            - UpgradeDomainDeployedApplications
            - UpgradeDomainNodes
            - Node
            - Replica
            - Partition
            - Service
            - DeployedServicePackage
            - DeployedApplication
            - Application
            - DeltaNodesCheck
            - UpgradeDomainDeltaNodesCheck
            - ApplicationTypeApplications
          type: string
      required:
        - Kind
      type: object
    HealthEvent:
      description: The event of the health
      properties:
        Description:
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        IsExpired:
          type: boolean
        LastErrorTransitionAt:
          type: string
        LastModifiedUtcTimestamp:
          type: string
        LastOkTransitionAt:
          type: string
        LastWarningTransitionAt:
          type: string
        Property:
          type: string
        RemoveWhenExpired:
          type: boolean
        SequenceNumber:
          type: string
        SourceId:
          type: string
        SourceUtcTimestamp:
          type: string
        TimeToLiveInMilliSeconds:
          type: string
      type: object
    HealthReport:
      description: The report of the health
      properties:
        Description:
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Property:
          type: string
        RemoveWhenExpired:
          type: boolean
        SequenceNumber:
          type: string
        SourceId:
          type: string
        TimeToLiveInMilliSeconds:
          type: string
      type: object
    HealthState:
      enum:
        - Invalid
        - Ok
        - Warning
        - Error
        - Unknown
      type: string
    LoadMetricInformation:
      description: The information of the load metric
      properties:
        Action:
          type: string
        ActivityThreshold:
          type: integer
        BalancingThreshold:
          type: integer
        BufferedCapacity:
          type: string
        ClusterCapacity:
          type: string
        ClusterLoad:
          type: string
        DeviationAfter:
          type: integer
        DeviationBefore:
          type: integer
        IsBalancedAfter:
          type: boolean
        IsBalancedBefore:
          type: boolean
        IsClusterCapacityViolation:
          type: boolean
        MaxNodeLoadId:
          description: The id of the max node load
          properties:
            Id:
              type: string
          type: object
        MaxNodeLoadValue:
          type: string
        MinNodeLoadId:
          description: The id of the min node
          properties:
            Id:
              type: string
          type: object
        MinNodeLoadValue:
          type: string
        Name:
          type: string
        NodeBufferPercentage:
          type: integer
        RemainingBufferedCapacity:
          type: string
        RemainingUnbufferedCapacity:
          type: string
      type: object
    MonitoringPolicy:
      description: The policy of the monitoring
      properties:
        FailureAction:
          type: string
        HealthCheckRetryTimeoutInMilliseconds:
          type: string
        HealthCheckStableDurationInMilliseconds:
          type: string
        HealthCheckWaitDurationInMilliseconds:
          type: string
        UpgradeDomainTimeoutInMilliseconds:
          type: string
        UpgradeTimeoutInMilliseconds:
          type: string
      type: object
    Node:
      description: The node
      properties:
        CodeVersion:
          type: string
        ConfigVersion:
          type: string
        FaultDomain:
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          description: The id
          properties:
            Id:
              type: string
          type: object
        InstanceId:
          type: string
        IpAddressOrFQDN:
          type: string
        IsSeedNode:
          type: boolean
        Name:
          type: string
        NodeDeactivationInfo:
          description: The info of the deactivation info
          properties:
            NodeDeactivationIntent:
              enum:
                - Invalid
                - Pause
                - Restart
                - RemoveData
              type: string
            NodeDeactivationStatus:
              enum:
                - Invalid
                - SafetyCheckInProgress
                - SafetyCheckComplete
                - Completed
              type: string
          type: object
        NodeStatus:
          enum:
            - Invalid
            - Up
            - Down
            - Enabling
            - Disabling
            - Disabled
            - Unknown
            - Removed
          type: string
        NodeUpTimeInSeconds:
          type: string
        Type:
          type: string
        UpgradeDomain:
          type: string
      type: object
    NodeHealth:
      description: The health of the node
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        Name:
          type: string
      type: object
    NodeHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the node health
      properties:
        NodeName:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Node
    NodeHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the node health
      type: object
    NodeList:
      description: The list of the node
      properties:
        ContinuationToken:
          type: string
        Items:
          items:
            $ref: "#/components/schemas/Node"
          type: array
      type: object
    NodeLoadInformation:
      description: The information of the node load
      properties:
        NodeLoadMetricInformation:
          $ref: "#/components/schemas/NodeLoadMetricInformation"
        NodeName:
          type: string
      type: object
    NodeLoadMetricInformation:
      description: The information of the node load metric
      properties:
        IsCapacityViolation:
          type: boolean
        Name:
          type: string
        NodeBufferedCapacity:
          type: string
        NodeCapacity:
          type: string
        NodeLoad:
          type: string
        NodeRemainingBufferedCapacity:
          type: string
        NodeRemainingCapacity:
          type: string
      type: object
    NodesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the nodes health
      properties:
        MaxPercentUnhealthyNodes:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Nodes
    Partition:
      description: The partition
      properties:
        CurrentConfigurationEpoch:
          description: The epoch of the current configuration
          properties:
            ConfigurationVersion:
              type: string
            DataLossVersion:
              type: string
          type: object
        HealthState:
          $ref: "#/components/schemas/HealthState"
        InstanceCount:
          type: integer
        MinReplicaSetSize:
          type: integer
        PartitionInformation:
          $ref: "#/components/schemas/PartitionInformation"
        PartitionStatus:
          enum:
            - Invalid
            - Ready
            - NotReady
            - InQuorumLoss
            - Reconfiguring
            - Deleting
          type: string
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        TargetReplicaSetSize:
          type: integer
      type: object
    PartitionDescription:
      description: The description of the partition
      properties:
        Count:
          type: integer
        HighKey:
          type: string
        LowKey:
          type: string
        Names:
          items:
            type: string
          type: array
        PartitionScheme:
          $ref: "#/components/schemas/PartitionScheme"
      type: object
    PartitionHealth:
      description: The health of the partition
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        PartitionId:
          type: string
        ReplicaHealthStates:
          items:
            description: The states of the replica health
            properties:
              AggregatedHealthState:
                $ref: "#/components/schemas/HealthState"
              HealthEvents:
                type: integer
              PartitionId:
                type: string
              ReplicaId:
                type: string
            type: object
          type: array
      type: object
    PartitionHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the partition health
      properties:
        PartitionId:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Partition
    PartitionHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the partition health
      type: object
    PartitionInformation:
      description: The information of the partition
      properties:
        HighKey:
          type: string
        Id:
          type: string
        LowKey:
          type: string
        Name:
          items:
            type: string
          type: array
        ServicePartitionKind:
          enum:
            - Invalid
            - Singleton
            - Int64Range
            - Named
          type: string
      type: object
    PartitionList:
      description: The list of the partition
      properties:
        ContinuationToken:
          type: string
        Items:
          items:
            $ref: "#/components/schemas/Partition"
          type: array
      type: object
    PartitionLoadInformation:
      description: The information of the partition load
      properties:
        PartitionId:
          type: string
        PrimaryLoadMetricReports:
          items:
            type: string
          type: array
        SecondaryLoadMetricReports:
          items:
            type: string
          type: array
      type: object
    PartitionScheme:
      enum:
        - Invalid
        - Singleton
        - UniformInt64
        - Named
      type: string
    PartitionsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the partitions health
      properties:
        MaxPercentUnhealthyPartitionsPerService:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Partitions
    RegisterApplicationType:
      description: The type of the register application
      properties:
        ApplicationTypeBuildPath:
          type: string
      type: object
    RegisterClusterPackage:
      description: The package of the register cluster
      properties:
        ClusterManifestFilePath:
          description: The relative path of the cluster manifest file
          type: string
        CodeFilePath:
          description: The path of the code file
          type: string
      type: object
    Replica:
      description: The replica
      properties:
        Address:
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        InstanceId:
          type: string
        LastInBuildDurationInSeconds:
          type: string
        NodeName:
          type: string
        ReplicaId:
          type: string
        ReplicaRole:
          $ref: "#/components/schemas/ReplicaRole"
        ReplicaStatus:
          $ref: "#/components/schemas/ReplicaStatus"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      type: object
    ReplicaHealth:
      description: The health of the replica
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        PartitionId:
          type: string
        ReplicaId:
          type: string
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      type: object
    ReplicaHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the replica health
      properties:
        PartitionId:
          type: string
        ReplicaOrInstanceId:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Replica
    ReplicaHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the replica health
      type: object
    ReplicaList:
      description: The list of the replica
      properties:
        ContinuationToken:
          type: string
        Items:
          items:
            $ref: "#/components/schemas/Replica"
          type: array
      type: object
    ReplicaLoadInformation:
      description: The information of the replica load
      properties:
        PartitionId:
          type: string
        ReplicaOrInstanceId:
          type: string
        ReportedLoad:
          items:
            type: string
          type: array
      type: object
    ReplicaRole:
      enum:
        - Invalid
        - None
        - Primary
        - IdleSecondary
        - ActiveSecondary
      type: string
    ReplicaStatus:
      enum:
        - Invalid
        - InBuild
        - Standby
        - Ready
        - Down
        - Dropped
      type: string
    ReplicasHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the replicas health
      properties:
        MaxPercentUnhealthyPartitionsPerService:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Replicas
    ResolvedServicePartition:
      description: The partition of the resolved service
      properties:
        Endpoints:
          items:
            description: The endpoints
            properties:
              Address:
                type: string
              Kind:
                type: integer
            type: object
          type: array
        Name:
          type: string
        PartitionInformation:
          $ref: "#/components/schemas/PartitionInformation"
        Version:
          type: string
      type: object
    ResumeApplicationUpgrade:
      description: The upgrade of the resume application
      properties:
        UpgradeDomainName:
          type: string
      type: object
    ResumeClusterUpgrade:
      description: The upgrade of the resume cluster
      properties:
        UpgradeDomain:
          type: string
      type: object
    RollingUpgradeMode:
      enum:
        - Invalid
        - UnmonitoredAuto
        - UnmonitoredManual
        - Monitored
      type: string
    Service:
      description: The service
      properties:
        HasPersistedState:
          type: boolean
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          type: string
        IsServiceGroup:
          type: boolean
        ManifestVersion:
          type: string
        Name:
          type: string
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceStatus:
          enum:
            - Invalid
            - Active
            - Upgrading
            - Deleting
            - Creating
            - Faile
          type: string
        TypeName:
          type: string
      type: object
    ServiceCorrelationDescription:
      description: The description of the service correlation
      properties:
        ServiceCorrelationScheme:
          enum:
            - Invalid
            - Affinity
            - AlignedAffinity
            - NonAlignedAffinity
          type: string
        ServiceName:
          type: string
      type: object
    ServiceDescription:
      description: The description of the service
      discriminator:
        propertyName: ServiceKind
      properties:
        ApplicationName:
          type: string
        CorrelationScheme:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        Flags:
          type: integer
        PartitionDescription:
          $ref: "#/components/schemas/PartitionDescription"
        PlacementConstraints:
          type: string
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceLoadMetrics:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceName:
          type: string
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceTypeName:
          type: string
      required:
        - ServiceKind
      type: object
    ServiceDescriptionTemplate:
      description: The template of the service description
      properties:
        ServiceName:
          type: string
        ServiceTypeName:
          type: string
      type: object
    ServiceGroupDescription:
      description: The description of the service group
      discriminator:
        propertyName: ServiceKind
      properties:
        ApplicationName:
          type: string
        CorrelationScheme:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        Flags:
          type: integer
        PartitionDescription:
          $ref: "#/components/schemas/PartitionDescription"
        PlacementConstraints:
          type: string
        ServiceGroupMemberDescription:
          items:
            $ref: "#/components/schemas/ServiceGroupMemberDescription"
          type: array
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceLoadMetrics:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceName:
          type: string
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServiceCorrelationDescription"
        ServiceTypeName:
          type: string
      required:
        - ServiceKind
      type: object
    ServiceGroupMember:
      description: The member of the service group
      properties:
        Name:
          type: string
        ServiceGroupMemberDescription:
          items:
            $ref: "#/components/schemas/ServiceGroupMemberDescription"
          type: array
      type: object
    ServiceGroupMemberDescription:
      description: The description of the service group member
      properties:
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceName:
          type: string
        ServiceTypeName:
          type: string
      type: object
    ServiceHealth:
      description: The health of the service
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        HealthEvents:
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        Name:
          type: string
        PartitionHealthStates:
          items:
            description: The states of the partition health
            properties:
              AggregatedHealthState:
                $ref: "#/components/schemas/HealthState"
              PartitionId:
                type: string
            type: object
          type: array
      type: object
    ServiceHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the service health
      properties:
        ServiceName:
          type: string
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Service
    ServiceHealthReport:
      allOf:
        - $ref: "#/components/schemas/HealthReport"
      description: The report of the service health
      type: object
    ServiceKind:
      enum:
        - Invalid
        - Stateless
        - Stateful
      type: string
    ServiceList:
      description: The list of the service
      properties:
        ContinuationToken:
          type: string
        Items:
          items:
            $ref: "#/components/schemas/Service"
          type: array
      type: object
    ServiceLoadMetricDescription:
      description: The description of the service load metric
      properties:
        Name:
          type: string
        PrimaryDefaultLoad:
          type: integer
        SecondaryDefaultLoad:
          type: integer
        ServiceLoadMetricWeight:
          enum:
            - Zero
            - Low
            - Medium
            - High
          type: string
      type: object
    ServiceManifest:
      description: The manifest of the service
      properties:
        Manifest:
          type: string
      type: object
    ServicePlacementPolicyDescription:
      description: The description of the service placement policy
      properties:
        Type:
          type: string
      type: object
    ServiceType:
      description: The type of the service
      properties:
        IsServiceGroup:
          type: boolean
        ServiceManifestName:
          type: string
        ServiceManifestVersion:
          type: string
        ServiceTypeDescription:
          description: The description of the service type
          properties:
            HasPersistedState:
              type: boolean
            IsStateful:
              type: boolean
            PlacementConstraints:
              type: string
            ServiceTypeName:
              type: string
          type: object
      type: object
    ServicesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the services health
      properties:
        MaxPercentUnhealthyServices:
          type: integer
        ServiceTypeName:
          type: string
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: Services
    StartApplicationUpgrade:
      description: The description of the start application upgrade
      properties:
        ApplicationHealthPolicy:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
        ForceRestart:
          type: boolean
        MonitoringPolicy:
          $ref: "#/components/schemas/MonitoringPolicy"
        Name:
          type: string
        Parameters:
          items:
            description: The parameters
            properties:
              Key:
                type: string
              Value:
                type: string
            type: object
          type: array
        RollingUpgradeMode:
          $ref: "#/components/schemas/RollingUpgradeMode"
        TargetApplicationTypeVersion:
          type: string
        UpgradeKind:
          enum:
            - Invalid
            - Rolling
          type: string
        UpgradeReplicaSetCheckTimeoutInSeconds:
          type: integer
      type: object
    StartClusterUpgrade:
      description: The description of the start cluster upgrade
      properties:
        ApplicationHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationHealthPolicyMap"
        ClusterUpgradeHealthPolicy:
          $ref: "#/components/schemas/ClusterUpgradeHealthPolicy"
        CodeVersion:
          description: The version of the code
          type: string
        ConfigVersion:
          description: The version of the config
          type: string
        EnableDeltaHealthEvaluation:
          description: The evaluation of the enable delta health
          type: boolean
        ForceRestart:
          description: The flag of the force restart
          type: boolean
        MonitoringPolicy:
          description: The policy of the monitoring
          type: object
        RollingUpgradeMode:
          $ref: "#/components/schemas/RollingUpgradeMode"
        UpgradeKind:
          description: The kind of the upgrade
          type: string
        UpgradeReplicaSetCheckTimeoutInSeconds:
          description: The seconds of the upgrade replica set check timeout
          type: integer
      type: object
    StatefulCreateServiceDescription:
      allOf:
        - $ref: "#/components/schemas/CreateServiceDescription"
      description: The description of the stateful create service
      properties:
        DefaultMoveCost:
          $ref: "#/components/schemas/DefaultMoveCost"
        HasPersistedState:
          type: boolean
        IsDefaultMoveCostSpecified:
          type: boolean
        MinReplicaSetSize:
          type: integer
        QuorumLossWaitDurationSeconds:
          type: integer
        ReplicaRestartWaitDurationSeconds:
          type: integer
        StandByReplicaKeepDurationSeconds:
          type: integer
        TargetReplicaSetSize:
          type: integer
      type: object
      x-ms-discriminator-value: Stateful
    StatefulCreateServiceGroupDescription:
      allOf:
        - $ref: "#/components/schemas/CreateServiceGroupDescription"
      description: The description of the stateful create service group
      properties:
        DefaultMoveCost:
          $ref: "#/components/schemas/DefaultMoveCost"
        HasPersistedState:
          type: boolean
        IsDefaultMoveCostSpecified:
          type: boolean
        MinReplicaSetSize:
          type: integer
        QuorumLossWaitDurationSeconds:
          type: integer
        ReplicaRestartWaitDurationSeconds:
          type: integer
        StandByReplicaKeepDurationSeconds:
          type: integer
        TargetReplicaSetSize:
          type: integer
      type: object
      x-ms-discriminator-value: Stateful
    StatefulServiceDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceDescription"
      description: The description of the stateful service
      properties:
        DefaultMoveCost:
          $ref: "#/components/schemas/DefaultMoveCost"
        HasPersistedState:
          type: boolean
        IsDefaultMoveCostSpecified:
          type: boolean
        MinReplicaSetSize:
          type: integer
        QuorumLossWaitDurationSeconds:
          type: integer
        ReplicaRestartWaitDurationSeconds:
          type: integer
        StandByReplicaKeepDurationSeconds:
          type: integer
        TargetReplicaSetSize:
          type: integer
      type: object
      x-ms-discriminator-value: Stateful
    StatefulServiceGroupDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceGroupDescription"
      description: The description of the stateful service group
      properties:
        DefaultMoveCost:
          $ref: "#/components/schemas/DefaultMoveCost"
        HasPersistedState:
          type: boolean
        IsDefaultMoveCostSpecified:
          type: boolean
        MinReplicaSetSize:
          type: integer
        QuorumLossWaitDurationSeconds:
          type: integer
        ReplicaRestartWaitDurationSeconds:
          type: integer
        StandByReplicaKeepDurationSeconds:
          type: integer
        TargetReplicaSetSize:
          type: integer
      type: object
      x-ms-discriminator-value: Stateful
    StatefulUpdateServiceDescription:
      allOf:
        - $ref: "#/components/schemas/UpdateServiceDescription"
      description: The description of the stateful update service
      properties:
        MinReplicaSetSize:
          type: integer
        QuorumLossWaitDurationInMilliseconds:
          type: integer
        ReplicaRestartWaitDurationInMilliseconds:
          type: integer
        StandByReplicaKeepDurationInMilliseconds:
          type: integer
        TargetReplicaSetSize:
          type: integer
      type: object
      x-ms-discriminator-value: Stateful
    StatefulUpdateServiceGroupDescription:
      allOf:
        - $ref: "#/components/schemas/UpdateServiceGroupDescription"
      description: The description of the stateful update service group
      properties:
        MinReplicaSetSize:
          type: integer
        QuorumLossWaitDurationInMilliseconds:
          type: integer
        ReplicaRestartWaitDurationInMilliseconds:
          type: integer
        StandByReplicaKeepDurationInMilliseconds:
          type: integer
        TargetReplicaSetSize:
          type: integer
      type: object
      x-ms-discriminator-value: Stateful
    StatelessCreateServiceDescription:
      allOf:
        - $ref: "#/components/schemas/CreateServiceDescription"
      description: The description of the stateless create service
      properties:
        InstanceCount:
          type: integer
      type: object
      x-ms-discriminator-value: Stateless
    StatelessCreateServiceGroupDescription:
      allOf:
        - $ref: "#/components/schemas/CreateServiceGroupDescription"
      description: The description of the stateless create service group
      properties:
        InstanceCount:
          type: integer
      type: object
      x-ms-discriminator-value: Stateless
    StatelessServiceDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceDescription"
      description: The description of the stateless service
      properties:
        InstanceCount:
          type: integer
      type: object
      x-ms-discriminator-value: Stateless
    StatelessServiceGroupDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceGroupDescription"
      description: The description of the stateless service group
      properties:
        InstanceCount:
          type: integer
      type: object
      x-ms-discriminator-value: Stateless
    StatelessUpdateServiceDescription:
      allOf:
        - $ref: "#/components/schemas/UpdateServiceDescription"
      description: The description of the stateless update service
      properties:
        InstanceCount:
          type: integer
      type: object
      x-ms-discriminator-value: Stateless
    StatelessUpdateServiceGroupDescription:
      allOf:
        - $ref: "#/components/schemas/UpdateServiceGroupDescription"
      description: The description of the stateless update service group
      properties:
        InstanceCount:
          type: integer
      type: object
      x-ms-discriminator-value: Stateless
    SystemApplicationHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the system application health
      properties:
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
      type: object
      x-ms-discriminator-value: SystemApplication
    UnhealthyEvaluation:
      description: The evaluation of the unhealthy
      properties:
        HealthEvaluation:
          $ref: "#/components/schemas/HealthEvaluation"
      type: object
    UnregisterApplicationType:
      description: The type of the unregister application
      properties:
        ApplicationTypeVersion:
          type: string
      type: object
    UnregisterClusterPackage:
      description: The package of the unregister cluster
      properties:
        CodeVersion:
          description: The version of the code
          type: string
        ConfigVersion:
          description: The version of the config
          type: string
      type: object
    UpdateApplicationUpgrade:
      description: The description of the update application upgrade
      properties:
        ApplicationHealthPolicy:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
        Name:
          type: string
        UpdateDescription:
          $ref: "#/components/schemas/UpdateDescription"
        UpgradeKind:
          type: string
      type: object
    UpdateClusterUpgrade:
      description: The description of the update cluster upgrade
      properties:
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
        EnableDeltaHealthEvaluations:
          description: The evaluations of the enable delta health
          type: boolean
        UpdateDescription:
          $ref: "#/components/schemas/UpdateDescription"
        UpgradeKind:
          description: The kind of the upgrade
          type: string
      type: object
    UpdateDescription:
      description: The description of the update
      properties:
        FailureAction:
          description: The action of the failure
          type: string
        ForceRestart:
          description: The flag of the force restart
          type: boolean
        HealthCheckRetryTimeoutInMilliseconds:
          description: The milliseconds of the health check retry timeout
          type: string
        HealthCheckStableDurationInMilliseconds:
          description: The seconds of the health check stable duration
          type: string
        HealthCheckWaitDurationInMilliseconds:
          description: The seconds of the health check wait duration
          type: string
        RollingUpgradeMode:
          $ref: "#/components/schemas/RollingUpgradeMode"
        UpgradeDomainTimeoutInMilliseconds:
          description: The milliseconds of the upgrade domain timeout
          type: string
        UpgradeReplicaSetCheckTimeoutInSeconds:
          description: The seconds of the upgrade replica set check timeout
          type: integer
        UpgradeTimeoutInMilliseconds:
          description: The milliseconds of the upgrade timeout
          type: string
      type: object
    UpdateServiceDescription:
      description: The description of the update service
      discriminator:
        propertyName: ServiceKind
      properties:
        Flags:
          type: integer
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      required:
        - ServiceKind
      type: object
    UpdateServiceGroupDescription:
      description: The description of the update service group
      discriminator:
        propertyName: ServiceKind
      properties:
        Flags:
          type: integer
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      required:
        - ServiceKind
      type: object
    UpgradeDomainDeltaNodesCheckHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the upgrade domain delta nodes check health
      properties:
        BaselineErrorCount:
          type: integer
        BaselineTotalCount:
          type: integer
        MaxPercentUpgradeDomainDeltaUnhealthyNodes:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
        UpgradeDomainName:
          type: string
      type: object
      x-ms-discriminator-value: UpgradeDomainDeltaNodesCheck
    UpgradeDomainDeployedApplicationsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the upgrade domain deployed applications health
      properties:
        MaxPercentUnhealthyDeployedApplications:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
        UpgradeDomainName:
          type: string
      type: object
      x-ms-discriminator-value: UpgradeDomainDeployedApplications
    UpgradeDomainNodesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: The evaluation of the upgrade domain nodes health
      properties:
        MaxPercentUnhealthyNodes:
          type: integer
        TotalCount:
          type: integer
        UnhealthyEvaluations:
          items:
            $ref: "#/components/schemas/UnhealthyEvaluation"
          type: array
        UpgradeDomainName:
          type: string
      type: object
      x-ms-discriminator-value: UpgradeDomainNodes
    UpgradeState:
      enum:
        - Invalid
        - RollingBackInProgress
        - RollingBackCompleted
        - RollingForwardPending
        - RollingForwardInProgress
        - RollingForwardCompleted
      type: string
