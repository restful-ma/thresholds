openapi: 3.0.0
info:
  version: 2015-09-21
  x-release: v4
  title: Amazon EC2 Container Registry
  description: <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic
    Container Registry (Amazon ECR) is a managed Docker registry service.
    Customers can use the familiar Docker CLI to push, pull, and manage images.
    Amazon ECR provides a secure, scalable, and reliable registry. Amazon ECR
    supports private Docker repositories with resource-based permissions using
    IAM so that specific users or Amazon EC2 instances can access repositories
    and images. Developers can use the Docker CLI to author and manage
    images.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: ecr
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-2015-09-21.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/ecr/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability:
    post:
      operationId: BatchCheckLayerAvailability
      description: <p>Check the availability of multiple image layers in a specified
        registry and repository.</p> <note> <p>This operation is used by the
        Amazon ECR proxy, and it is not intended for general use by customers
        for pulling and pushing images. In most cases, you should use the
        <code>docker</code> CLI to pull, tag, and push images.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchCheckLayerAvailabilityResponse"
        "480":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchCheckLayerAvailabilityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage:
    post:
      operationId: BatchDeleteImage
      description: <p>Deletes a list of specified images within a specified repository.
        Images are specified with either <code>imageTag</code> or
        <code>imageDigest</code>.</p> <p>You can remove a tag from an image by
        specifying the image's tag in your request. When you remove the last tag
        from an image, the image is deleted from your repository.</p> <p>You can
        completely delete an image (and all of its tags) by specifying the
        image's digest in your request.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchDeleteImageResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchDeleteImageRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage:
    post:
      operationId: BatchGetImage
      description: Gets detailed information for specified images within a specified
        repository. Images are specified with either <code>imageTag</code> or
        <code>imageDigest</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetImageResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.BatchGetImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetImageRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload:
    post:
      operationId: CompleteLayerUpload
      description: <p>Informs Amazon ECR that the image layer upload has completed for a
        specified registry, repository name, and upload ID. You can optionally
        provide a <code>sha256</code> digest of the image layer for data
        validation purposes.</p> <note> <p>This operation is used by the Amazon
        ECR proxy, and it is not intended for general use by customers for
        pulling and pushing images. In most cases, you should use the
        <code>docker</code> CLI to pull, tag, and push images.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompleteLayerUploadResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: UploadNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadNotFoundException"
        "484":
          description: InvalidLayerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLayerException"
        "485":
          description: LayerPartTooSmallException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayerPartTooSmallException"
        "486":
          description: LayerAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayerAlreadyExistsException"
        "487":
          description: EmptyUploadException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyUploadException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteLayerUploadRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository:
    post:
      operationId: CreateRepository
      description: Creates an image repository.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRepositoryResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidTagParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagParameterException"
        "483":
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTagsException"
        "484":
          description: RepositoryAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryAlreadyExistsException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.CreateRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepositoryRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy:
    post:
      operationId: DeleteLifecyclePolicy
      description: Deletes the specified lifecycle policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteLifecyclePolicyResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: LifecyclePolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecyclePolicyNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteLifecyclePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository:
    post:
      operationId: DeleteRepository
      description: Deletes an existing image repository. If a repository contains images,
        you must use the <code>force</code> option to delete it.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRepositoryResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: RepositoryNotEmptyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotEmptyException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRepositoryRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy:
    post:
      operationId: DeleteRepositoryPolicy
      description: Deletes the repository policy from a specified repository.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRepositoryPolicyResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: RepositoryPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryPolicyNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRepositoryPolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages:
    post:
      operationId: DescribeImages
      description: <p>Returns metadata about the images in a repository, including image
        size, image tags, and creation date.</p> <note> <p>Beginning with Docker
        version 1.9, the Docker client compresses image layers before pushing
        them to a V2 Docker registry. The output of the <code>docker
        images</code> command shows the uncompressed image size, so it may
        return a larger image size than the image sizes returned by
        <a>DescribeImages</a>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeImagesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: ImageNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageNotFoundException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DescribeImages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeImagesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories:
    post:
      operationId: DescribeRepositories
      description: Describes image repositories in a registry.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeRepositoriesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.DescribeRepositories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeRepositoriesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken:
    post:
      operationId: GetAuthorizationToken
      description: <p>Retrieves a token that is valid for a specified registry for 12
        hours. This command allows you to use the <code>docker</code> CLI to
        push and pull images with Amazon ECR. If you do not specify a registry,
        the default registry is assumed.</p> <p>The
        <code>authorizationToken</code> returned for each registry specified is
        a base64 encoded string that can be decoded and used in a <code>docker
        login</code> command to authenticate to a registry. The AWS CLI offers
        an <code>aws ecr get-login</code> command that simplifies the login
        process.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizationTokenResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAuthorizationTokenRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer:
    post:
      operationId: GetDownloadUrlForLayer
      description: <p>Retrieves the pre-signed Amazon S3 download URL corresponding to an
        image layer. You can only get URLs for image layers that are referenced
        in an image.</p> <note> <p>This operation is used by the Amazon ECR
        proxy, and it is not intended for general use by customers for pulling
        and pushing images. In most cases, you should use the
        <code>docker</code> CLI to pull, tag, and push images.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDownloadUrlForLayerResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: LayersNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayersNotFoundException"
        "483":
          description: LayerInaccessibleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayerInaccessibleException"
        "484":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDownloadUrlForLayerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy:
    post:
      operationId: GetLifecyclePolicy
      description: Retrieves the specified lifecycle policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLifecyclePolicyResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: LifecyclePolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecyclePolicyNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLifecyclePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview:
    post:
      operationId: GetLifecyclePolicyPreview
      description: Retrieves the results of the specified lifecycle policy preview request.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLifecyclePolicyPreviewResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: LifecyclePolicyPreviewNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecyclePolicyPreviewNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetLifecyclePolicyPreviewRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy:
    post:
      operationId: GetRepositoryPolicy
      description: Retrieves the repository policy for a specified repository.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRepositoryPolicyResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: RepositoryPolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryPolicyNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRepositoryPolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload:
    post:
      operationId: InitiateLayerUpload
      description: <p>Notify Amazon ECR that you intend to upload an image layer.</p>
        <note> <p>This operation is used by the Amazon ECR proxy, and it is not
        intended for general use by customers for pulling and pushing images. In
        most cases, you should use the <code>docker</code> CLI to pull, tag, and
        push images.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateLayerUploadResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateLayerUploadRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages:
    post:
      operationId: ListImages
      description: <p>Lists all the image IDs for a given repository.</p> <p>You can filter
        images based on whether or not they are tagged by setting the
        <code>tagStatus</code> parameter to <code>TAGGED</code> or
        <code>UNTAGGED</code>. For example, you can filter your results to
        return only <code>UNTAGGED</code> images and then pipe that result to a
        <a>BatchDeleteImage</a> operation to delete them. Or, you can filter
        your results to return only <code>TAGGED</code> images to list all of
        the tags in your repository.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImagesResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: maxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: nextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.ListImages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListImagesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: List the tags for an Amazon ECR resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "482":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage:
    post:
      operationId: PutImage
      description: <p>Creates or updates the image manifest and tags associated with an
        image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and
        it is not intended for general use by customers for pulling and pushing
        images. In most cases, you should use the <code>docker</code> CLI to
        pull, tag, and push images.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutImageResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: ImageAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageAlreadyExistsException"
        "484":
          description: LayersNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayersNotFoundException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "486":
          description: ImageTagAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageTagAlreadyExistsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutImageRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability:
    post:
      operationId: PutImageTagMutability
      description: Updates the image tag mutability settings for a repository.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutImageTagMutabilityResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutImageTagMutabilityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy:
    post:
      operationId: PutLifecyclePolicy
      description: Creates or updates a lifecycle policy. For information about lifecycle
        policy syntax, see <a
        href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle
        Policy Template</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutLifecyclePolicyResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutLifecyclePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy:
    post:
      operationId: SetRepositoryPolicy
      description: Applies a repository policy on a specified repository to control access
        permissions. For more information, see <a
        href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicies.html">Amazon
        ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry
        User Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetRepositoryPolicyResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetRepositoryPolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview:
    post:
      operationId: StartLifecyclePolicyPreview
      description: Starts a preview of the specified lifecycle policy. This allows you to
        see the results before creating the lifecycle policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartLifecyclePolicyPreviewResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "483":
          description: LifecyclePolicyNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecyclePolicyNotFoundException"
        "484":
          description: LifecyclePolicyPreviewInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecyclePolicyPreviewInProgressExcepti\
                  on"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartLifecyclePolicyPreviewRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource:
    post:
      operationId: TagResource
      description: Adds specified tags to a resource with the specified ARN. Existing tags
        on a resource are not changed if they are not specified in the request
        parameters.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidTagParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagParameterException"
        "482":
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTagsException"
        "483":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "484":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource:
    post:
      operationId: UntagResource
      description: Deletes specified tags from a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidTagParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagParameterException"
        "482":
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTagsException"
        "483":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "484":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart:
    post:
      operationId: UploadLayerPart
      description: <p>Uploads an image layer part to Amazon ECR.</p> <note> <p>This
        operation is used by the Amazon ECR proxy, and it is not intended for
        general use by customers for pulling and pushing images. In most cases,
        you should use the <code>docker</code> CLI to pull, tag, and push
        images.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadLayerPartResponse"
        "480":
          description: ServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidLayerPartException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidLayerPartException"
        "483":
          description: RepositoryNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepositoryNotFoundException"
        "484":
          description: UploadNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadNotFoundException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonEC2ContainerRegistry_V20150921.UploadLayerPart
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadLayerPartRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://api.ecr.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon ECR multi-region endpoint
  - url: https://api.ecr.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon ECR multi-region endpoint
  - url: http://api.ecr.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)
  - url: https://api.ecr.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchCheckLayerAvailabilityResponse:
      type: object
      properties:
        layers:
          $ref: "#/components/schemas/LayerList"
        failures:
          $ref: "#/components/schemas/LayerFailureList"
    BatchCheckLayerAvailabilityRequest:
      type: object
      required:
        - repositoryName
        - layerDigests
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        layerDigests:
          $ref: "#/components/schemas/BatchedOperationLayerDigestList"
    RepositoryNotFoundException: {}
    InvalidParameterException: {}
    ServerException: {}
    BatchDeleteImageResponse:
      type: object
      example:
        failures: []
        imageIds:
          - imageDigest: sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f
            imageTag: precise
      properties:
        imageIds:
          $ref: "#/components/schemas/ImageIdentifierList"
        failures:
          $ref: "#/components/schemas/ImageFailureList"
    BatchDeleteImageRequest:
      type: object
      required:
        - repositoryName
        - imageIds
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageIds:
          $ref: "#/components/schemas/ImageIdentifierList"
      description: Deletes specified images within a specified repository. Images are
        specified with either the <code>imageTag</code> or
        <code>imageDigest</code>.
    BatchGetImageResponse:
      type: object
      example:
        failures: []
        images:
          - imageId:
              imageDigest: sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a
              imageTag: precise
            imageManifest: |-
              {
               "schemaVersion": 1,
               "name": "ubuntu",
               "tag": "precise",
              ...
            registryId: "244698725403"
            repositoryName: ubuntu
      properties:
        images:
          $ref: "#/components/schemas/ImageList"
        failures:
          $ref: "#/components/schemas/ImageFailureList"
    BatchGetImageRequest:
      type: object
      required:
        - repositoryName
        - imageIds
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageIds:
          $ref: "#/components/schemas/ImageIdentifierList"
        acceptedMediaTypes:
          $ref: "#/components/schemas/MediaTypeList"
    CompleteLayerUploadResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        uploadId:
          $ref: "#/components/schemas/UploadId"
        layerDigest:
          $ref: "#/components/schemas/LayerDigest"
    CompleteLayerUploadRequest:
      type: object
      required:
        - repositoryName
        - uploadId
        - layerDigests
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        uploadId:
          $ref: "#/components/schemas/UploadId"
        layerDigests:
          $ref: "#/components/schemas/LayerDigestList"
    UploadNotFoundException: {}
    InvalidLayerException: {}
    LayerPartTooSmallException: {}
    LayerAlreadyExistsException: {}
    EmptyUploadException: {}
    CreateRepositoryResponse:
      type: object
      example:
        repository:
          registryId: 12345678901
          repositoryArn: arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app
          repositoryName: project-a/nginx-web-app
      properties:
        repository:
          $ref: "#/components/schemas/Repository"
    CreateRepositoryRequest:
      type: object
      required:
        - repositoryName
      properties:
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        tags:
          $ref: "#/components/schemas/TagList"
        imageTagMutability:
          $ref: "#/components/schemas/ImageTagMutability"
    InvalidTagParameterException: {}
    TooManyTagsException: {}
    RepositoryAlreadyExistsException: {}
    LimitExceededException: {}
    DeleteLifecyclePolicyResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
        lastEvaluatedAt:
          $ref: "#/components/schemas/EvaluationTimestamp"
    DeleteLifecyclePolicyRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
    LifecyclePolicyNotFoundException: {}
    DeleteRepositoryResponse:
      type: object
      example:
        repository:
          registryId: 12345678901
          repositoryArn: arn:aws:ecr:us-west-2:012345678901:repository/ubuntu
          repositoryName: ubuntu
      properties:
        repository:
          $ref: "#/components/schemas/Repository"
    DeleteRepositoryRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        force:
          $ref: "#/components/schemas/ForceFlag"
    RepositoryNotEmptyException: {}
    DeleteRepositoryPolicyResponse:
      type: object
      example:
        policyText: "{ ... }"
        registryId: 12345678901
        repositoryName: ubuntu
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        policyText:
          $ref: "#/components/schemas/RepositoryPolicyText"
    DeleteRepositoryPolicyRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
    RepositoryPolicyNotFoundException: {}
    DescribeImagesResponse:
      type: object
      properties:
        imageDetails:
          $ref: "#/components/schemas/ImageDetailList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeImagesRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageIds:
          $ref: "#/components/schemas/ImageIdentifierList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        maxResults:
          $ref: "#/components/schemas/MaxResults"
        filter:
          $ref: "#/components/schemas/DescribeImagesFilter"
    ImageNotFoundException: {}
    DescribeRepositoriesResponse:
      type: object
      example:
        repositories:
          - registryId: 12345678910
            repositoryArn: arn:aws:ecr:us-west-2:012345678910:repository/ubuntu
            repositoryName: ubuntu
          - registryId: 12345678910
            repositoryArn: arn:aws:ecr:us-west-2:012345678910:repository/test
            repositoryName: test
      properties:
        repositories:
          $ref: "#/components/schemas/RepositoryList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    DescribeRepositoriesRequest:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryNames:
          $ref: "#/components/schemas/RepositoryNameList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        maxResults:
          $ref: "#/components/schemas/MaxResults"
    GetAuthorizationTokenResponse:
      type: object
      example:
        authorizationData:
          - authorizationToken: QVdTOkN...
            expiresAt: "1470951892432"
            proxyEndpoint: https://012345678901.dkr.ecr.us-west-2.amazonaws.com
      properties:
        authorizationData:
          $ref: "#/components/schemas/AuthorizationDataList"
    GetAuthorizationTokenRequest:
      type: object
      properties:
        registryIds:
          $ref: "#/components/schemas/GetAuthorizationTokenRegistryIdList"
    GetDownloadUrlForLayerResponse:
      type: object
      properties:
        downloadUrl:
          $ref: "#/components/schemas/Url"
        layerDigest:
          $ref: "#/components/schemas/LayerDigest"
    GetDownloadUrlForLayerRequest:
      type: object
      required:
        - repositoryName
        - layerDigest
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        layerDigest:
          $ref: "#/components/schemas/LayerDigest"
    LayersNotFoundException: {}
    LayerInaccessibleException: {}
    GetLifecyclePolicyResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
        lastEvaluatedAt:
          $ref: "#/components/schemas/EvaluationTimestamp"
    GetLifecyclePolicyRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
    GetLifecyclePolicyPreviewResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
        status:
          $ref: "#/components/schemas/LifecyclePolicyPreviewStatus"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        previewResults:
          $ref: "#/components/schemas/LifecyclePolicyPreviewResultList"
        summary:
          $ref: "#/components/schemas/LifecyclePolicyPreviewSummary"
    GetLifecyclePolicyPreviewRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageIds:
          $ref: "#/components/schemas/ImageIdentifierList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        maxResults:
          $ref: "#/components/schemas/LifecyclePreviewMaxResults"
        filter:
          $ref: "#/components/schemas/LifecyclePolicyPreviewFilter"
    LifecyclePolicyPreviewNotFoundException: {}
    GetRepositoryPolicyResponse:
      type: object
      example:
        policyText: >-
          {
            "Version" : "2008-10-17",
            "Statement" : [ {
              "Sid" : "new statement",
              "Effect" : "Allow",
              "Principal" : {
               "AWS" : "arn:aws:iam::012345678901:role/CodeDeployDemo"
              },
          "Action" : [ "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability" ]
           } ]
          }
        registryId: 12345678901
        repositoryName: ubuntu
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        policyText:
          $ref: "#/components/schemas/RepositoryPolicyText"
    GetRepositoryPolicyRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
    InitiateLayerUploadResponse:
      type: object
      properties:
        uploadId:
          $ref: "#/components/schemas/UploadId"
        partSize:
          $ref: "#/components/schemas/PartSize"
    InitiateLayerUploadRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
    ListImagesResponse:
      type: object
      example:
        imageIds:
          - imageDigest: sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a
            imageTag: precise
      properties:
        imageIds:
          $ref: "#/components/schemas/ImageIdentifierList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListImagesRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        nextToken:
          $ref: "#/components/schemas/NextToken"
        maxResults:
          $ref: "#/components/schemas/MaxResults"
        filter:
          $ref: "#/components/schemas/ListImagesFilter"
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: "#/components/schemas/TagList"
    ListTagsForResourceRequest:
      type: object
      required:
        - resourceArn
      properties:
        resourceArn:
          $ref: "#/components/schemas/Arn"
    PutImageResponse:
      type: object
      properties:
        image:
          $ref: "#/components/schemas/Image"
    PutImageRequest:
      type: object
      required:
        - repositoryName
        - imageManifest
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageManifest:
          $ref: "#/components/schemas/ImageManifest"
        imageTag:
          $ref: "#/components/schemas/ImageTag"
    ImageAlreadyExistsException: {}
    ImageTagAlreadyExistsException: {}
    PutImageTagMutabilityResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageTagMutability:
          $ref: "#/components/schemas/ImageTagMutability"
    PutImageTagMutabilityRequest:
      type: object
      required:
        - repositoryName
        - imageTagMutability
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageTagMutability:
          $ref: "#/components/schemas/ImageTagMutability"
    PutLifecyclePolicyResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
    PutLifecyclePolicyRequest:
      type: object
      required:
        - repositoryName
        - lifecyclePolicyText
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
    SetRepositoryPolicyResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        policyText:
          $ref: "#/components/schemas/RepositoryPolicyText"
    SetRepositoryPolicyRequest:
      type: object
      required:
        - repositoryName
        - policyText
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        policyText:
          $ref: "#/components/schemas/RepositoryPolicyText"
        force:
          $ref: "#/components/schemas/ForceFlag"
    StartLifecyclePolicyPreviewResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
        status:
          $ref: "#/components/schemas/LifecyclePolicyPreviewStatus"
    StartLifecyclePolicyPreviewRequest:
      type: object
      required:
        - repositoryName
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        lifecyclePolicyText:
          $ref: "#/components/schemas/LifecyclePolicyText"
    LifecyclePolicyPreviewInProgressException: {}
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - resourceArn
        - tags
      properties:
        resourceArn:
          $ref: "#/components/schemas/Arn"
        tags:
          $ref: "#/components/schemas/TagList"
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - resourceArn
        - tagKeys
      properties:
        resourceArn:
          $ref: "#/components/schemas/Arn"
        tagKeys:
          $ref: "#/components/schemas/TagKeyList"
    UploadLayerPartResponse:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        uploadId:
          $ref: "#/components/schemas/UploadId"
        lastByteReceived:
          $ref: "#/components/schemas/PartSize"
    UploadLayerPartRequest:
      type: object
      required:
        - repositoryName
        - uploadId
        - partFirstByte
        - partLastByte
        - layerPartBlob
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        uploadId:
          $ref: "#/components/schemas/UploadId"
        partFirstByte:
          $ref: "#/components/schemas/PartSize"
        partLastByte:
          $ref: "#/components/schemas/PartSize"
        layerPartBlob:
          $ref: "#/components/schemas/LayerPartBlob"
    InvalidLayerPartException: {}
    Arn:
      type: string
    Base64:
      type: string
      pattern: ^\S+$
    ExpirationTimestamp:
      type: string
      format: date-time
    ProxyEndpoint:
      type: string
    AuthorizationData:
      type: object
      properties:
        authorizationToken:
          $ref: "#/components/schemas/Base64"
        expiresAt:
          $ref: "#/components/schemas/ExpirationTimestamp"
        proxyEndpoint:
          $ref: "#/components/schemas/ProxyEndpoint"
      description: An object representing authorization data for an Amazon ECR registry.
    AuthorizationDataList:
      type: array
      items:
        $ref: "#/components/schemas/AuthorizationData"
    RegistryId:
      type: string
      pattern: "[0-9]{12}"
    RepositoryName:
      type: string
      pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
      minLength: 2
      maxLength: 256
    BatchedOperationLayerDigestList:
      type: array
      items:
        $ref: "#/components/schemas/BatchedOperationLayerDigest"
      minItems: 1
      maxItems: 100
    LayerList:
      type: array
      items:
        $ref: "#/components/schemas/Layer"
    LayerFailureList:
      type: array
      items:
        $ref: "#/components/schemas/LayerFailure"
    ImageIdentifierList:
      type: array
      items:
        $ref: "#/components/schemas/ImageIdentifier"
      minItems: 1
      maxItems: 100
    ImageFailureList:
      type: array
      items:
        $ref: "#/components/schemas/ImageFailure"
    MediaTypeList:
      type: array
      items:
        $ref: "#/components/schemas/MediaType"
      minItems: 1
      maxItems: 100
    ImageList:
      type: array
      items:
        $ref: "#/components/schemas/Image"
    BatchedOperationLayerDigest:
      type: string
      minLength: 0
      maxLength: 1000
    UploadId:
      type: string
      pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F\
        ]{12}"
    LayerDigestList:
      type: array
      items:
        $ref: "#/components/schemas/LayerDigest"
      minItems: 1
      maxItems: 100
    LayerDigest:
      type: string
      pattern: "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+"
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    ImageTagMutability:
      type: string
      enum:
        - MUTABLE
        - IMMUTABLE
    Repository:
      type: object
      properties:
        repositoryArn:
          $ref: "#/components/schemas/Arn"
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        repositoryUri:
          $ref: "#/components/schemas/Url"
        createdAt:
          $ref: "#/components/schemas/CreationTimestamp"
        imageTagMutability:
          $ref: "#/components/schemas/ImageTagMutability"
      description: An object representing a repository.
    CreationTimestamp:
      type: string
      format: date-time
    LifecyclePolicyText:
      type: string
      minLength: 100
      maxLength: 30720
    EvaluationTimestamp:
      type: string
      format: date-time
    RepositoryPolicyText:
      type: string
      minLength: 0
      maxLength: 10240
    ForceFlag:
      type: boolean
    TagStatus:
      type: string
      enum:
        - TAGGED
        - UNTAGGED
        - ANY
    DescribeImagesFilter:
      type: object
      properties:
        tagStatus:
          $ref: "#/components/schemas/TagStatus"
      description: An object representing a filter on a <a>DescribeImages</a> operation.
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ImageDetailList:
      type: array
      items:
        $ref: "#/components/schemas/ImageDetail"
    RepositoryNameList:
      type: array
      items:
        $ref: "#/components/schemas/RepositoryName"
      minItems: 1
      maxItems: 100
    RepositoryList:
      type: array
      items:
        $ref: "#/components/schemas/Repository"
    GetAuthorizationTokenRegistryIdList:
      type: array
      items:
        $ref: "#/components/schemas/RegistryId"
      minItems: 1
      maxItems: 10
    Url:
      type: string
    LifecyclePreviewMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    LifecyclePolicyPreviewFilter:
      type: object
      properties:
        tagStatus:
          $ref: "#/components/schemas/TagStatus"
      description: The filter for the lifecycle policy preview.
    LifecyclePolicyPreviewStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETE
        - EXPIRED
        - FAILED
    LifecyclePolicyPreviewResultList:
      type: array
      items:
        $ref: "#/components/schemas/LifecyclePolicyPreviewResult"
    LifecyclePolicyPreviewSummary:
      type: object
      properties:
        expiringImageTotalCount:
          $ref: "#/components/schemas/ImageCount"
      description: The summary of the lifecycle policy preview request.
    ImageIdentifier:
      type: object
      properties:
        imageDigest:
          $ref: "#/components/schemas/ImageDigest"
        imageTag:
          $ref: "#/components/schemas/ImageTag"
      description: An object with identifying information for an Amazon ECR image.
    ImageManifest:
      type: string
    Image:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageId:
          $ref: "#/components/schemas/ImageIdentifier"
        imageManifest:
          $ref: "#/components/schemas/ImageManifest"
      description: An object representing an Amazon ECR image.
    ImageActionType:
      type: string
      enum:
        - EXPIRE
    ImageCount:
      type: integer
      minimum: 0
    ImageDigest:
      type: string
    ImageTagList:
      type: array
      items:
        $ref: "#/components/schemas/ImageTag"
    ImageSizeInBytes:
      type: integer
    PushTimestamp:
      type: string
      format: date-time
    ImageDetail:
      type: object
      properties:
        registryId:
          $ref: "#/components/schemas/RegistryId"
        repositoryName:
          $ref: "#/components/schemas/RepositoryName"
        imageDigest:
          $ref: "#/components/schemas/ImageDigest"
        imageTags:
          $ref: "#/components/schemas/ImageTagList"
        imageSizeInBytes:
          $ref: "#/components/schemas/ImageSizeInBytes"
        imagePushedAt:
          $ref: "#/components/schemas/PushTimestamp"
      description: An object that describes an image returned by a <a>DescribeImages</a>
        operation.
    ImageFailureCode:
      type: string
      enum:
        - InvalidImageDigest
        - InvalidImageTag
        - ImageTagDoesNotMatchDigest
        - ImageNotFound
        - MissingDigestAndTag
    ImageFailureReason:
      type: string
    ImageFailure:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/ImageIdentifier"
        failureCode:
          $ref: "#/components/schemas/ImageFailureCode"
        failureReason:
          $ref: "#/components/schemas/ImageFailureReason"
      description: An object representing an Amazon ECR image failure.
    ImageTag:
      type: string
      minLength: 1
      maxLength: 300
    PartSize:
      type: integer
      minimum: 0
    LayerAvailability:
      type: string
      enum:
        - AVAILABLE
        - UNAVAILABLE
    LayerSizeInBytes:
      type: integer
    MediaType:
      type: string
    Layer:
      type: object
      properties:
        layerDigest:
          $ref: "#/components/schemas/LayerDigest"
        layerAvailability:
          $ref: "#/components/schemas/LayerAvailability"
        layerSize:
          $ref: "#/components/schemas/LayerSizeInBytes"
        mediaType:
          $ref: "#/components/schemas/MediaType"
      description: An object representing an Amazon ECR image layer.
    LayerFailureCode:
      type: string
      enum:
        - InvalidLayerDigest
        - MissingLayerDigest
    LayerFailureReason:
      type: string
    LayerFailure:
      type: object
      properties:
        layerDigest:
          $ref: "#/components/schemas/BatchedOperationLayerDigest"
        failureCode:
          $ref: "#/components/schemas/LayerFailureCode"
        failureReason:
          $ref: "#/components/schemas/LayerFailureReason"
      description: An object representing an Amazon ECR image layer failure.
    LayerPartBlob:
      type: string
    LifecyclePolicyRuleAction:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ImageActionType"
      description: The type of action to be taken.
    LifecyclePolicyRulePriority:
      type: integer
      minimum: 1
    LifecyclePolicyPreviewResult:
      type: object
      properties:
        imageTags:
          $ref: "#/components/schemas/ImageTagList"
        imageDigest:
          $ref: "#/components/schemas/ImageDigest"
        imagePushedAt:
          $ref: "#/components/schemas/PushTimestamp"
        action:
          $ref: "#/components/schemas/LifecyclePolicyRuleAction"
        appliedRulePriority:
          $ref: "#/components/schemas/LifecyclePolicyRulePriority"
      description: The result of the lifecycle policy preview.
    ListImagesFilter:
      type: object
      properties:
        tagStatus:
          $ref: "#/components/schemas/TagStatus"
      description: An object representing a filter on a <a>ListImages</a> operation.
    TagKey:
      type: string
    TagValue:
      type: string
    Tag:
      type: object
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: The metadata that you apply to a resource to help you categorize and
        organize them. Each tag consists of a key and an optional value, both of
        which you define. Tag keys can have a maximum character length of 128
        characters, and tag values can have a maximum length of 256 characters.
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
