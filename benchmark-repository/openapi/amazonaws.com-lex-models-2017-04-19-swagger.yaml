openapi: 3.0.0
info:
  version: 2017-04-19
  x-release: v4
  title: Amazon Lex Model Building Service
  description: <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS
    service for building conversational voice and text interfaces. Use these
    actions to create, update, and delete conversational bots for new and
    existing client applications. </p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: lex-models
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lex-models-2017-04-19.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lex/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  "/bots/{name}/versions":
    post:
      operationId: CreateBotVersion
      description: <p>Creates a new version of the bot based on the <code>$LATEST</code>
        version. If the <code>$LATEST</code> version of this resource hasn't
        changed since you created the last version, Amazon Lex doesn't create a
        new version. It returns the last created version.</p> <note> <p>You can
        update only the <code>$LATEST</code> version of the bot. You can't
        update the numbered versions that you create with the
        <code>CreateBotVersion</code> operation.</p> </note> <p> When you create
        the first version of a bot, Amazon Lex sets the version to 1. Subsequent
        versions increment by 1. For more information, see
        <a>versioning-intro</a>. </p> <p> This operation requires permission for
        the <code>lex:CreateBotVersion</code> action. </p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBotVersionResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the bot that you want to create a new version of. The
            name is case sensitive. "
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                checksum:
                  description: Identifies a specific revision of the <code>$LATEST</code>
                    version of the bot. If you specify a checksum and the
                    <code>$LATEST</code> version of the bot has a different
                    checksum, a <code>PreconditionFailedException</code>
                    exception is returned and Amazon Lex doesn't publish a new
                    version. If you don't specify a checksum, Amazon Lex
                    publishes the <code>$LATEST</code> version.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/intents/{name}/versions":
    post:
      operationId: CreateIntentVersion
      description: <p>Creates a new version of an intent based on the <code>$LATEST</code>
        version of the intent. If the <code>$LATEST</code> version of this
        intent hasn't changed since you last updated it, Amazon Lex doesn't
        create a new version. It returns the last version you created.</p>
        <note> <p>You can update only the <code>$LATEST</code> version of the
        intent. You can't update the numbered versions that you create with the
        <code>CreateIntentVersion</code> operation.</p> </note> <p> When you
        create a version of an intent, Amazon Lex sets the version to 1.
        Subsequent versions increment by 1. For more information, see
        <a>versioning-intro</a>. </p> <p>This operation requires permissions to
        perform the <code>lex:CreateIntentVersion</code> action. </p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntentVersionResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the intent that you want to create a new version of.
            The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                checksum:
                  description: Checksum of the <code>$LATEST</code> version of the intent
                    that should be used to create the new version. If you
                    specify a checksum and the <code>$LATEST</code> version of
                    the intent has a different checksum, Amazon Lex returns a
                    <code>PreconditionFailedException</code> exception and
                    doesn't publish a new version. If you don't specify a
                    checksum, Amazon Lex publishes the <code>$LATEST</code>
                    version.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/slottypes/{name}/versions":
    post:
      operationId: CreateSlotTypeVersion
      description: <p>Creates a new version of a slot type based on the
        <code>$LATEST</code> version of the specified slot type. If the
        <code>$LATEST</code> version of this resource has not changed since the
        last version that you created, Amazon Lex doesn't create a new version.
        It returns the last version that you created. </p> <note> <p>You can
        update only the <code>$LATEST</code> version of a slot type. You can't
        update the numbered versions that you create with the
        <code>CreateSlotTypeVersion</code> operation.</p> </note> <p>When you
        create a version of a slot type, Amazon Lex sets the version to 1.
        Subsequent versions increment by 1. For more information, see
        <a>versioning-intro</a>. </p> <p>This operation requires permissions for
        the <code>lex:CreateSlotTypeVersion</code> action.</p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSlotTypeVersionResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the slot type that you want to create a new version
            for. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                checksum:
                  description: Checksum for the <code>$LATEST</code> version of the slot
                    type that you want to publish. If you specify a checksum and
                    the <code>$LATEST</code> version of the slot type has a
                    different checksum, Amazon Lex returns a
                    <code>PreconditionFailedException</code> exception and
                    doesn't publish the new version. If you don't specify a
                    checksum, Amazon Lex publishes the <code>$LATEST</code>
                    version.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{name}":
    delete:
      operationId: DeleteBot
      description: <p>Deletes all versions of the bot, including the <code>$LATEST</code>
        version. To delete a specific version of the bot, use the
        <a>DeleteBotVersion</a> operation.</p> <p>If a bot has an alias, you
        can't delete it. Instead, the <code>DeleteBot</code> operation returns a
        <code>ResourceInUseException</code> exception that includes a reference
        to the alias that refers to the bot. To remove the reference to the bot,
        delete the alias. If you get the same exception again, delete the
        referring alias until the <code>DeleteBot</code> operation is
        successful.</p> <p>This operation requires permissions for the
        <code>lex:DeleteBot</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the bot. The name is case sensitive. "
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{botName}/aliases/{name}":
    delete:
      operationId: DeleteBotAlias
      description: <p>Deletes an alias for the specified bot. </p> <p>You can't delete an
        alias that is used in the association between a bot and a messaging
        channel. If an alias is used in a channel association, the
        <code>DeleteBot</code> operation returns a
        <code>ResourceInUseException</code> exception that includes a reference
        to the channel association that refers to the bot. You can remove the
        reference to the alias by deleting the channel association. If you get
        the same exception again, delete the referring association until the
        <code>DeleteBotAlias</code> operation is successful.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the alias to delete. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: botName
          in: path
          required: true
          description: The name of the bot that the alias points to.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetBotAlias
      description: <p>Returns information about an Amazon Lex bot alias. For more
        information about aliases, see <a>versioning-aliases</a>.</p> <p>This
        operation requires permissions for the <code>lex:GetBotAlias</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotAliasResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the bot alias. The name is case sensitive.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: botName
          in: path
          required: true
          description: The name of the bot.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
    put:
      operationId: PutBotAlias
      description: <p>Creates an alias for the specified version of the bot or replaces an
        alias for the specified bot. To change the version of the bot that the
        alias points to, replace the alias. For more information about aliases,
        see <a>versioning-aliases</a>.</p> <p>This operation requires
        permissions for the <code>lex:PutBotAlias</code> action. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutBotAliasResponse"
        "480":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the alias. The name is <i>not</i> case sensitive.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: botName
          in: path
          required: true
          description: The name of the bot.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - botVersion
              properties:
                description:
                  description: A description of the alias.
                  type: string
                  minLength: 0
                  maxLength: 200
                botVersion:
                  description: The version of the bot.
                  type: string
                  pattern: \$LATEST|[0-9]+
                  minLength: 1
                  maxLength: 64
                checksum:
                  description: <p>Identifies a specific revision of the
                    <code>$LATEST</code> version.</p> <p>When you create a new
                    bot alias, leave the <code>checksum</code> field blank. If
                    you specify a checksum you get a
                    <code>BadRequestException</code> exception.</p> <p>When you
                    want to update a bot alias, set the <code>checksum</code>
                    field to the checksum of the most recent revision of the
                    <code>$LATEST</code> version. If you don't specify the
                    <code> checksum</code> field, or if the checksum does not
                    match the <code>$LATEST</code> version, you get a
                    <code>PreconditionFailedException</code> exception.</p>
                  type: string
        required: true
  "/bots/{botName}/aliases/{aliasName}/channels/{name}":
    delete:
      operationId: DeleteBotChannelAssociation
      description: <p>Deletes the association between an Amazon Lex bot and a messaging
        platform.</p> <p>This operation requires permission for the
        <code>lex:DeleteBotChannelAssociation</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the association. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: botName
          in: path
          required: true
          description: The name of the Amazon Lex bot.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: aliasName
          in: path
          required: true
          description: An alias that points to the specific version of the Amazon Lex bot
            to which this association is being made.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetBotChannelAssociation
      description: <p>Returns information about the association between an Amazon Lex bot
        and a messaging platform.</p> <p>This operation requires permissions for
        the <code>lex:GetBotChannelAssociation</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotChannelAssociationResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the association between the bot and the channel. The
            name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: botName
          in: path
          required: true
          description: The name of the Amazon Lex bot.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: aliasName
          in: path
          required: true
          description: An alias pointing to the specific version of the Amazon Lex bot to
            which this association is being made.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
  "/bots/{name}/versions/{version}":
    delete:
      operationId: DeleteBotVersion
      description: <p>Deletes a specific version of a bot. To delete all versions of a bot,
        use the <a>DeleteBot</a> operation. </p> <p>This operation requires
        permissions for the <code>lex:DeleteBotVersion</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the bot.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: version
          in: path
          required: true
          description: The version of the bot to delete. You cannot delete the
            <code>$LATEST</code> version of the bot. To delete the
            <code>$LATEST</code> version, use the <a>DeleteBot</a> operation.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[0-9]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/intents/{name}":
    delete:
      operationId: DeleteIntent
      description: <p>Deletes all versions of the intent, including the
        <code>$LATEST</code> version. To delete a specific version of the
        intent, use the <a>DeleteIntentVersion</a> operation.</p> <p> You can
        delete a version of an intent only if it is not referenced. To delete an
        intent that is referred to in one or more bots (see
        <a>how-it-works</a>), you must remove those references first. </p>
        <note> <p> If you get the <code>ResourceInUseException</code> exception,
        it provides an example reference that shows where the intent is
        referenced. To remove the reference to the intent, either update the bot
        or delete it. If you get the same exception when you attempt to delete
        the intent again, repeat until the intent has no references and the call
        to <code>DeleteIntent</code> is successful. </p> </note> <p> This
        operation requires permission for the <code>lex:DeleteIntent</code>
        action. </p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the intent. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/intents/{name}/versions/{version}":
    delete:
      operationId: DeleteIntentVersion
      description: <p>Deletes a specific version of an intent. To delete all versions of a
        intent, use the <a>DeleteIntent</a> operation. </p> <p>This operation
        requires permissions for the <code>lex:DeleteIntentVersion</code>
        action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the intent.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: version
          in: path
          required: true
          description: The version of the intent to delete. You cannot delete the
            <code>$LATEST</code> version of the intent. To delete the
            <code>$LATEST</code> version, use the <a>DeleteIntent</a> operation.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[0-9]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntent
      description: <p> Returns information about an intent. In addition to the intent name,
        you must specify the intent version. </p> <p> This operation requires
        permissions to perform the <code>lex:GetIntent</code> action. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntentResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the intent. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: version
          in: path
          required: true
          description: The version of the intent.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: \$LATEST|[0-9]+
  "/slottypes/{name}":
    delete:
      operationId: DeleteSlotType
      description: <p>Deletes all versions of the slot type, including the
        <code>$LATEST</code> version. To delete a specific version of the slot
        type, use the <a>DeleteSlotTypeVersion</a> operation.</p> <p> You can
        delete a version of a slot type only if it is not referenced. To delete
        a slot type that is referred to in one or more intents, you must remove
        those references first. </p> <note> <p> If you get the
        <code>ResourceInUseException</code> exception, the exception provides an
        example reference that shows the intent where the slot type is
        referenced. To remove the reference to the slot type, either update the
        intent or delete it. If you get the same exception when you attempt to
        delete the slot type again, repeat until the slot type has no references
        and the <code>DeleteSlotType</code> call is successful. </p> </note>
        <p>This operation requires permission for the
        <code>lex:DeleteSlotType</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the slot type. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/slottypes/{name}/version/{version}":
    delete:
      operationId: DeleteSlotTypeVersion
      description: <p>Deletes a specific version of a slot type. To delete all versions of
        a slot type, use the <a>DeleteSlotType</a> operation. </p> <p>This
        operation requires permissions for the
        <code>lex:DeleteSlotTypeVersion</code> action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the slot type.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: version
          in: path
          required: true
          description: The version of the slot type to delete. You cannot delete the
            <code>$LATEST</code> version of the slot type. To delete the
            <code>$LATEST</code> version, use the <a>DeleteSlotType</a>
            operation.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[0-9]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{botName}/utterances/{userId}":
    delete:
      operationId: DeleteUtterances
      description: <p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances
        that users send to your bot. Utterances are stored for 15 days for use
        with the <a>GetUtterancesView</a> operation, and then stored
        indefinitely for use in improving the ability of your bot to respond to
        user input.</p> <p>Use the <code>DeleteStoredUtterances</code> operation
        to manually delete stored utterances for a specific user.</p> <p>This
        operation requires permissions for the <code>lex:DeleteUtterances</code>
        action.</p>
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the bot that stored the utterances.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: userId
          in: path
          required: true
          description: ' The unique identifier for the user that made the utterances. This
            is the user ID that was sent in the <a
            href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a>
            or <a
            href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a>
            operation request that contained the utterance.'
          schema:
            type: string
            minLength: 2
            maxLength: 100
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{name}/versions/{versionoralias}":
    get:
      operationId: GetBot
      description: <p>Returns metadata information for a specific bot. You must provide the
        bot name and the bot version or alias. </p> <p> This operation requires
        permissions for the <code>lex:GetBot</code> action. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the bot. The name is case sensitive. "
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: versionoralias
          in: path
          required: true
          description: The version or alias of the bot.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{botName}/aliases/":
    get:
      operationId: GetBotAliases
      description: <p>Returns a list of aliases for a specified Amazon Lex bot.</p> <p>This
        operation requires permissions for the <code>lex:GetBotAliases</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotAliasesResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the bot.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: nextToken
          in: query
          required: false
          description: "A pagination token for fetching the next page of aliases. If the
            response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of aliases, specify
            the pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: "The maximum number of aliases to return in the response. The
            default is 50. . "
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nameContains
          in: query
          required: false
          description: Substring to match in bot alias names. An alias will be returned if
            any part of its name matches the substring. For example, "xyz"
            matches both "xyzabc" and "abcxyz."
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{botName}/aliases/{aliasName}/channels/":
    get:
      operationId: GetBotChannelAssociations
      description: <p> Returns a list of all of the channels associated with the specified
        bot. </p> <p>The <code>GetBotChannelAssociations</code> operation
        requires permissions for the <code>lex:GetBotChannelAssociations</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotChannelAssociationsResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the Amazon Lex bot in the association.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: aliasName
          in: path
          required: true
          description: An alias pointing to the specific version of the Amazon Lex bot to
            which this association is being made.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^(-|^([A-Za-z]_?)+$)$
        - name: nextToken
          in: query
          required: false
          description: "A pagination token for fetching the next page of associations. If
            the response to this call is truncated, Amazon Lex returns a
            pagination token in the response. To fetch the next page of
            associations, specify the pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: "The maximum number of associations to return in the response. The
            default is 50. "
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nameContains
          in: query
          required: false
          description: Substring to match in channel association names. An association will
            be returned if any part of its name matches the substring. For
            example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot
            channel associations, use a hyphen ("-") as the
            <code>nameContains</code> parameter.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{name}/versions/":
    get:
      operationId: GetBotVersions
      description: <p>Gets information about all of the versions of a bot.</p> <p>The
        <code>GetBotVersions</code> operation returns a <code>BotMetadata</code>
        object for each version of a bot. For example, if a bot has three
        numbered versions, the <code>GetBotVersions</code> operation returns
        four <code>BotMetadata</code> objects in the response, one for each
        numbered version and one for the <code>$LATEST</code> version. </p>
        <p>The <code>GetBotVersions</code> operation always returns at least one
        version, the <code>$LATEST</code> version.</p> <p>This operation
        requires permissions for the <code>lex:GetBotVersions</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotVersionsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the bot for which versions should be returned.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: nextToken
          in: query
          required: false
          description: "A pagination token for fetching the next page of bot versions. If
            the response to this call is truncated, Amazon Lex returns a
            pagination token in the response. To fetch the next page of
            versions, specify the pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of bot versions to return in the response. The
            default is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /bots/:
    get:
      operationId: GetBots
      description: "<p>Returns bot information as follows: </p> <ul> <li> <p>If you provide
        the <code>nameContains</code> field, the response includes information
        for the <code>$LATEST</code> version of all bots whose name contains the
        specified string.</p> </li> <li> <p>If you don't specify the
        <code>nameContains</code> field, the operation returns information about
        the <code>$LATEST</code> version of all of your bots.</p> </li> </ul>
        <p>This operation requires permission for the <code>lex:GetBots</code>
        action.</p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBotsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: "A pagination token that fetches the next page of bots. If the
            response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of bots, specify the
            pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of bots to return in the response that the
            request will return. The default is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nameContains
          in: query
          required: false
          description: Substring to match in bot names. A bot will be returned if any part
            of its name matches the substring. For example, "xyz" matches both
            "xyzabc" and "abcxyz."
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/builtins/intents/{signature}":
    get:
      operationId: GetBuiltinIntent
      description: <p>Returns information about a built-in intent.</p> <p>This operation
        requires permission for the <code>lex:GetBuiltinIntent</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBuiltinIntentResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: signature
          in: path
          required: true
          description: The unique identifier for a built-in intent. To find the signature
            for an intent, see <a
            href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard
            Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /builtins/intents/:
    get:
      operationId: GetBuiltinIntents
      description: <p>Gets a list of built-in intents that meet the specified criteria.</p>
        <p>This operation requires permission for the
        <code>lex:GetBuiltinIntents</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBuiltinIntentsResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: locale
          in: query
          required: false
          description: A list of locales that the intent supports.
          schema:
            type: string
            enum:
              - en-US
              - en-GB
              - de-DE
        - name: signatureContains
          in: query
          required: false
          description: Substring to match in built-in intent signatures. An intent will be
            returned if any part of its signature matches the substring. For
            example, "xyz" matches both "xyzabc" and "abcxyz." To find the
            signature for an intent, see <a
            href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard
            Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: A pagination token that fetches the next page of intents. If this
            API call is truncated, Amazon Lex returns a pagination token in the
            response. To fetch the next page of intents, use the pagination
            token in the next request.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of intents to return in the response. The default
            is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /builtins/slottypes/:
    get:
      operationId: GetBuiltinSlotTypes
      description: <p>Gets a list of built-in slot types that meet the specified
        criteria.</p> <p>For a list of built-in slot types, see <a
        href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot
        Type Reference</a> in the <i>Alexa Skills Kit</i>.</p> <p>This operation
        requires permission for the <code>lex:GetBuiltInSlotTypes</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBuiltinSlotTypesResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: locale
          in: query
          required: false
          description: A list of locales that the slot type supports.
          schema:
            type: string
            enum:
              - en-US
              - en-GB
              - de-DE
        - name: signatureContains
          in: query
          required: false
          description: Substring to match in built-in slot type signatures. A slot type
            will be returned if any part of its signature matches the substring.
            For example, "xyz" matches both "xyzabc" and "abcxyz."
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: A pagination token that fetches the next page of slot types. If the
            response to this API call is truncated, Amazon Lex returns a
            pagination token in the response. To fetch the next page of slot
            types, specify the pagination token in the next request.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of slot types to return in the response. The
            default is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /exports/#name&version&resourceType&exportType:
    get:
      operationId: GetExport
      description: "Exports the contents of a Amazon Lex resource in a specified format. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetExportResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: query
          required: true
          description: The name of the bot to export.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: "[a-zA-Z_]+"
        - name: version
          in: query
          required: true
          description: The version of the bot to export.
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: "[0-9]+"
        - name: resourceType
          in: query
          required: true
          description: "The type of resource to export. "
          schema:
            type: string
            enum:
              - BOT
              - INTENT
              - SLOT_TYPE
        - name: exportType
          in: query
          required: true
          description: The format of the exported data.
          schema:
            type: string
            enum:
              - ALEXA_SKILLS_KIT
              - LEX
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/imports/{importId}":
    get:
      operationId: GetImport
      description: Gets information about an import job started with the
        <code>StartImport</code> operation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImportResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: importId
          in: path
          required: true
          description: The identifier of the import job information to return.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/intents/{name}/versions/":
    get:
      operationId: GetIntentVersions
      description: <p>Gets information about all of the versions of an intent.</p> <p>The
        <code>GetIntentVersions</code> operation returns an
        <code>IntentMetadata</code> object for each version of an intent. For
        example, if an intent has three numbered versions, the
        <code>GetIntentVersions</code> operation returns four
        <code>IntentMetadata</code> objects in the response, one for each
        numbered version and one for the <code>$LATEST</code> version. </p>
        <p>The <code>GetIntentVersions</code> operation always returns at least
        one version, the <code>$LATEST</code> version.</p> <p>This operation
        requires permissions for the <code>lex:GetIntentVersions</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntentVersionsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the intent for which versions should be returned.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: nextToken
          in: query
          required: false
          description: "A pagination token for fetching the next page of intent versions.
            If the response to this call is truncated, Amazon Lex returns a
            pagination token in the response. To fetch the next page of
            versions, specify the pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of intent versions to return in the response. The
            default is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /intents/:
    get:
      operationId: GetIntents
      description: "<p>Returns intent information as follows: </p> <ul> <li> <p>If you
        specify the <code>nameContains</code> field, returns the
        <code>$LATEST</code> version of all intents that contain the specified
        string.</p> </li> <li> <p> If you don't specify the
        <code>nameContains</code> field, returns information about the
        <code>$LATEST</code> version of all intents. </p> </li> </ul> <p> The
        operation requires permission for the <code>lex:GetIntents</code>
        action. </p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntentsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: "A pagination token that fetches the next page of intents. If the
            response to this API call is truncated, Amazon Lex returns a
            pagination token in the response. To fetch the next page of intents,
            specify the pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of intents to return in the response. The default
            is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nameContains
          in: query
          required: false
          description: Substring to match in intent names. An intent will be returned if
            any part of its name matches the substring. For example, "xyz"
            matches both "xyzabc" and "abcxyz."
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/slottypes/{name}/versions/{version}":
    get:
      operationId: GetSlotType
      description: <p>Returns information about a specific version of a slot type. In
        addition to specifying the slot type name, you must specify the slot
        type version.</p> <p>This operation requires permissions for the
        <code>lex:GetSlotType</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSlotTypeResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the slot type. The name is case sensitive. "
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: version
          in: path
          required: true
          description: "The version of the slot type. "
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: \$LATEST|[0-9]+
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/slottypes/{name}/versions/":
    get:
      operationId: GetSlotTypeVersions
      description: <p>Gets information about all versions of a slot type.</p> <p>The
        <code>GetSlotTypeVersions</code> operation returns a
        <code>SlotTypeMetadata</code> object for each version of a slot type.
        For example, if a slot type has three numbered versions, the
        <code>GetSlotTypeVersions</code> operation returns four
        <code>SlotTypeMetadata</code> objects in the response, one for each
        numbered version and one for the <code>$LATEST</code> version. </p>
        <p>The <code>GetSlotTypeVersions</code> operation always returns at
        least one version, the <code>$LATEST</code> version.</p> <p>This
        operation requires permissions for the
        <code>lex:GetSlotTypeVersions</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSlotTypeVersionsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the slot type for which versions should be returned.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
        - name: nextToken
          in: query
          required: false
          description: "A pagination token for fetching the next page of slot type
            versions. If the response to this call is truncated, Amazon Lex
            returns a pagination token in the response. To fetch the next page
            of versions, specify the pagination token in the next request. "
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of slot type versions to return in the response.
            The default is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /slottypes/:
    get:
      operationId: GetSlotTypes
      description: "<p>Returns slot type information as follows: </p> <ul> <li> <p>If you
        specify the <code>nameContains</code> field, returns the
        <code>$LATEST</code> version of all slot types that contain the
        specified string.</p> </li> <li> <p> If you don't specify the
        <code>nameContains</code> field, returns information about the
        <code>$LATEST</code> version of all slot types. </p> </li> </ul> <p> The
        operation requires permission for the <code>lex:GetSlotTypes</code>
        action. </p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSlotTypesResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: A pagination token that fetches the next page of slot types. If the
            response to this API call is truncated, Amazon Lex returns a
            pagination token in the response. To fetch next page of slot types,
            specify the pagination token in the next request.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of slot types to return in the response. The
            default is 10.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nameContains
          in: query
          required: false
          description: Substring to match in slot type names. A slot type will be returned
            if any part of its name matches the substring. For example, "xyz"
            matches both "xyzabc" and "abcxyz."
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{botname}/utterances#view=aggregation&bot_versions&status_type":
    get:
      operationId: GetUtterancesView
      description: <p>Use the <code>GetUtterancesView</code> operation to get information
        about the utterances that your users have made to your bot. You can use
        this list to tune the utterances that your bot responds to.</p> <p>For
        example, say that you have created a bot to order flowers. After your
        users have used your bot for a while, use the
        <code>GetUtterancesView</code> operation to see the requests that they
        have made and whether they have been successful. You might find that the
        utterance "I want flowers" is not being recognized. You could add this
        utterance to the <code>OrderFlowers</code> intent so that your bot
        recognizes that utterance.</p> <p>After you publish a new version of a
        bot, you can get information about the old version and the new so that
        you can compare the performance across the two versions. </p> <note>
        <p>Utterance statistics are generated once a day. Data is available for
        the last 15 days. You can request information for up to 5 versions in
        each request. The response contains information about a maximum of 100
        utterances for each version.</p> </note> <p>This operation requires
        permissions for the <code>lex:GetUtterancesView</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUtterancesViewResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: botname
          in: path
          required: true
          description: The name of the bot for which utterance information should be
            returned.
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
        - name: bot_versions
          in: query
          required: true
          description: An array of bot versions for which utterance information should be
            returned. The limit is 5 versions per request.
          schema:
            type: array
            items:
              type: string
        - name: status_type
          in: query
          required: true
          description: To return utterances that were recognized and handled,
            use<code>Detected</code>. To return utterances that were not
            recognized, use <code>Missed</code>.
          schema:
            type: string
            enum:
              - Detected
              - Missed
        - name: view
          in: query
          required: true
          schema:
            type: string
            enum:
              - aggregation
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bots/{name}/versions/$LATEST":
    put:
      operationId: PutBot
      description: <p>Creates an Amazon Lex conversational bot or replaces an existing bot.
        When you create or update a bot you are only required to specify a name,
        a locale, and whether the bot is directed toward children under age 13.
        You can use this to add intents later, or to remove intents from an
        existing bot. When you create a bot with the minimum information, the
        bot is created or updated but Amazon Lex returns the <code/> response
        <code>FAILED</code>. You can build the bot after you add one or more
        intents. For more information about Amazon Lex bots, see
        <a>how-it-works</a>. </p> <p>If you specify the name of an existing bot,
        the fields in the request replace the existing values in the
        <code>$LATEST</code> version of the bot. Amazon Lex removes any fields
        that you don't provide values for in the request, except for the
        <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields,
        which are set to their default values. If you don't specify values for
        required fields, Amazon Lex throws an exception.</p> <p>This operation
        requires permissions for the <code>lex:PutBot</code> action. For more
        information, see <a>auth-and-access-control</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutBotResponse"
        "480":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the bot. The name is <i>not</i> case sensitive. "
          schema:
            type: string
            minLength: 2
            maxLength: 50
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - clarificationPrompt
                - abortStatement
                - locale
                - childDirected
              properties:
                description:
                  description: A description of the bot.
                  type: string
                  minLength: 0
                  maxLength: 200
                intents:
                  description: An array of <code>Intent</code> objects. Each intent
                    represents a command that a user can express. For example, a
                    pizza ordering bot might support an OrderPizza intent. For
                    more information, see <a>how-it-works</a>.
                  type: array
                  items:
                    $ref: "#/components/schemas/Intent"
                clarificationPrompt:
                  description: Obtains information from the user. To define a prompt,
                    provide one or more messages and specify the number of
                    attempts to get information from the user. If you provide
                    more than one message, Amazon Lex chooses one of the
                    messages to use to prompt the user. For more information,
                    see <a>how-it-works</a>.
                  type: object
                  properties:
                    messages:
                      $ref: "#/components/schemas/MessageList"
                    maxAttempts:
                      $ref: "#/components/schemas/PromptMaxAttempts"
                    responseCard:
                      $ref: "#/components/schemas/ResponseCard"
                abortStatement:
                  description: "A collection of messages that convey information to the
                    user. At runtime, Amazon Lex selects the message to convey.
                    "
                  type: object
                  properties:
                    messages:
                      $ref: "#/components/schemas/MessageList"
                    responseCard:
                      $ref: "#/components/schemas/ResponseCard"
                idleSessionTTLInSeconds:
                  description: <p>The maximum time in seconds that Amazon Lex retains the
                    data gathered in a conversation.</p> <p>A user interaction
                    session remains active for the amount of time specified. If
                    no conversation occurs during this time, the session expires
                    and Amazon Lex deletes any data provided before the
                    timeout.</p> <p>For example, suppose that a user chooses the
                    OrderPizza intent, but gets sidetracked halfway through
                    placing an order. If the user doesn't complete the order
                    within the specified time, Amazon Lex discards the slot
                    information that it gathered, and the user must start
                    over.</p> <p>If you don't include the
                    <code>idleSessionTTLInSeconds</code> element in a
                    <code>PutBot</code> operation request, Amazon Lex uses the
                    default value. This is also true if the request replaces an
                    existing bot.</p> <p>The default is 300 seconds (5
                    minutes).</p>
                  type: integer
                  minimum: 60
                  maximum: 86400
                voiceId:
                  description: The Amazon Polly voice ID that you want Amazon Lex to use
                    for voice interactions with the user. The locale configured
                    for the voice must match the locale of the bot. For more
                    information, see <a
                    href="http://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available
                    Voices</a> in the <i>Amazon Polly Developer Guide</i>.
                  type: string
                checksum:
                  description: <p>Identifies a specific revision of the
                    <code>$LATEST</code> version.</p> <p>When you create a new
                    bot, leave the <code>checksum</code> field blank. If you
                    specify a checksum you get a
                    <code>BadRequestException</code> exception.</p> <p>When you
                    want to update a bot, set the <code>checksum</code> field to
                    the checksum of the most recent revision of the
                    <code>$LATEST</code> version. If you don't specify the
                    <code> checksum</code> field, or if the checksum does not
                    match the <code>$LATEST</code> version, you get a
                    <code>PreconditionFailedException</code> exception.</p>
                  type: string
                processBehavior:
                  description: <p>If you set the <code>processBehavior</code> element to
                    <code>BUILD</code>, Amazon Lex builds the bot so that it can
                    be run. If you set the element to <code>SAVE</code> Amazon
                    Lex saves the bot, but doesn't build it. </p> <p>If you
                    don't specify this value, the default value is
                    <code>BUILD</code>.</p>
                  type: string
                  enum:
                    - SAVE
                    - BUILD
                locale:
                  description: <p> Specifies the target locale for the bot. Any intent used
                    in the bot must be compatible with the locale of the bot.
                    </p> <p>The default is <code>en-US</code>.</p>
                  type: string
                  enum:
                    - en-US
                    - en-GB
                    - de-DE
                childDirected:
                  description: <p>For each Amazon Lex bot created with the Amazon Lex Model
                    Building Service, you must specify whether your use of
                    Amazon Lex is related to a website, program, or other
                    application that is directed or targeted, in whole or in
                    part, to children under age 13 and subject to the Children's
                    Online Privacy Protection Act (COPPA) by specifying
                    <code>true</code> or <code>false</code> in the
                    <code>childDirected</code> field. By specifying
                    <code>true</code> in the <code>childDirected</code> field,
                    you confirm that your use of Amazon Lex <b>is</b> related to
                    a website, program, or other application that is directed or
                    targeted, in whole or in part, to children under age 13 and
                    subject to COPPA. By specifying <code>false</code> in the
                    <code>childDirected</code> field, you confirm that your use
                    of Amazon Lex <b>is not</b> related to a website, program,
                    or other application that is directed or targeted, in whole
                    or in part, to children under age 13 and subject to COPPA.
                    You may not specify a default value for the
                    <code>childDirected</code> field that does not accurately
                    reflect whether your use of Amazon Lex is related to a
                    website, program, or other application that is directed or
                    targeted, in whole or in part, to children under age 13 and
                    subject to COPPA.</p> <p>If your use of Amazon Lex relates
                    to a website, program, or other application that is directed
                    in whole or in part, to children under age 13, you must
                    obtain any required verifiable parental consent under COPPA.
                    For information regarding the use of Amazon Lex in
                    connection with websites, programs, or other applications
                    that are directed or targeted, in whole or in part, to
                    children under age 13, see the <a
                    href="https://aws.amazon.com/lex/faqs#data-security">Amazon
                    Lex FAQ.</a> </p>
                  type: boolean
                createVersion:
                  description: ""
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/intents/{name}/versions/$LATEST":
    put:
      operationId: PutIntent
      description: <p>Creates an intent or replaces an existing intent.</p> <p>To define
        the interaction between the user and your bot, you use one or more
        intents. For a pizza ordering bot, for example, you would create an
        <code>OrderPizza</code> intent. </p> <p>To create an intent or replace
        an existing intent, you must provide the following:</p> <ul> <li>
        <p>Intent name. For example, <code>OrderPizza</code>.</p> </li> <li>
        <p>Sample utterances. For example, "Can I order a pizza, please." and "I
        want to order a pizza."</p> </li> <li> <p>Information to be gathered.
        You specify slot types for the information that your bot will request
        from the user. You can specify standard slot types, such as a date or a
        time, or custom slot types such as the size and crust of a pizza.</p>
        </li> <li> <p>How the intent will be fulfilled. You can provide a Lambda
        function or configure the intent to return the intent information to the
        client application. If you use a Lambda function, when all of the intent
        information is available, Amazon Lex invokes your Lambda function. If
        you configure your intent to return the intent information to the client
        application. </p> </li> </ul> <p>You can specify other optional
        information in the request, such as:</p> <ul> <li> <p>A confirmation
        prompt to ask the user to confirm an intent. For example, "Shall I order
        your pizza?"</p> </li> <li> <p>A conclusion statement to send to the
        user after the intent has been fulfilled. For example, "I placed your
        pizza order."</p> </li> <li> <p>A follow-up prompt that asks the user
        for additional activity. For example, asking "Do you want to order a
        drink with your pizza?"</p> </li> </ul> <p>If you specify an existing
        intent name to update the intent, Amazon Lex replaces the values in the
        <code>$LATEST</code> version of the intent with the values in the
        request. Amazon Lex removes fields that you don't provide in the
        request. If you don't specify the required fields, Amazon Lex throws an
        exception. When you update the <code>$LATEST</code> version of an
        intent, the <code>status</code> field of any bot that uses the
        <code>$LATEST</code> version of the intent is set to
        <code>NOT_BUILT</code>.</p> <p>For more information, see
        <a>how-it-works</a>.</p> <p>This operation requires permissions for the
        <code>lex:PutIntent</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutIntentResponse"
        "480":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: <p>The name of the intent. The name is <i>not</i> case sensitive.
            </p> <p>The name can't match a built-in intent name, or a built-in
            intent name with "AMAZON." removed. For example, because there is a
            built-in intent called <code>AMAZON.HelpIntent</code>, you can't
            create a custom intent called <code>HelpIntent</code>.</p> <p>For a
            list of built-in intents, see <a
            href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard
            Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - confirmationPrompt
                - rejectionStatement
                - followUpPrompt
                - conclusionStatement
                - dialogCodeHook
                - fulfillmentActivity
              properties:
                description:
                  description: A description of the intent.
                  type: string
                  minLength: 0
                  maxLength: 200
                slots:
                  description: "An array of intent slots. At runtime, Amazon Lex elicits
                    required slot values from the user using prompts defined in
                    the slots. For more information, see <a>how-it-works</a>. "
                  type: array
                  items:
                    $ref: "#/components/schemas/Slot"
                  minItems: 0
                  maxItems: 100
                sampleUtterances:
                  description: <p>An array of utterances (strings) that a user might say to
                    signal the intent. For example, "I want {PizzaSize} pizza",
                    "Order {Quantity} {PizzaSize} pizzas". </p> <p>In each
                    utterance, a slot name is enclosed in curly braces. </p>
                  type: array
                  items:
                    $ref: "#/components/schemas/Utterance"
                  minItems: 0
                  maxItems: 1500
                confirmationPrompt:
                  description: Obtains information from the user. To define a prompt,
                    provide one or more messages and specify the number of
                    attempts to get information from the user. If you provide
                    more than one message, Amazon Lex chooses one of the
                    messages to use to prompt the user. For more information,
                    see <a>how-it-works</a>.
                  type: object
                  properties:
                    messages:
                      $ref: "#/components/schemas/MessageList"
                    maxAttempts:
                      $ref: "#/components/schemas/PromptMaxAttempts"
                    responseCard:
                      $ref: "#/components/schemas/ResponseCard"
                rejectionStatement:
                  description: "A collection of messages that convey information to the
                    user. At runtime, Amazon Lex selects the message to convey.
                    "
                  type: object
                  properties:
                    messages:
                      $ref: "#/components/schemas/MessageList"
                    responseCard:
                      $ref: "#/components/schemas/ResponseCard"
                followUpPrompt:
                  description: A prompt for additional activity after an intent is
                    fulfilled. For example, after the <code>OrderPizza</code>
                    intent is fulfilled, you might prompt the user to find out
                    whether the user wants to order drinks.
                  type: object
                  properties:
                    prompt:
                      $ref: "#/components/schemas/Prompt"
                    rejectionStatement:
                      $ref: "#/components/schemas/Statement"
                conclusionStatement:
                  description: "A collection of messages that convey information to the
                    user. At runtime, Amazon Lex selects the message to convey.
                    "
                  type: object
                  properties:
                    messages:
                      $ref: "#/components/schemas/MessageList"
                    responseCard:
                      $ref: "#/components/schemas/ResponseCard"
                dialogCodeHook:
                  description: Specifies a Lambda function that verifies requests to a bot
                    or fulfills the user's request to a bot..
                  type: object
                  properties:
                    uri:
                      $ref: "#/components/schemas/LambdaARN"
                    messageVersion:
                      $ref: "#/components/schemas/MessageVersion"
                fulfillmentActivity:
                  description: <p> Describes how the intent is fulfilled after the user
                    provides all of the information required for the intent. You
                    can provide a Lambda function to process the intent, or you
                    can return the intent information to the client application.
                    We recommend that you use a Lambda function so that the
                    relevant logic lives in the Cloud and limit the client-side
                    code primarily to presentation. If you need to update the
                    logic, you only update the Lambda function; you don't need
                    to upgrade your client application. </p> <p>Consider the
                    following examples:</p> <ul> <li> <p>In a pizza ordering
                    application, after the user provides all of the information
                    for placing an order, you use a Lambda function to place an
                    order with a pizzeria. </p> </li> <li> <p>In a gaming
                    application, when a user says "pick up a rock," this
                    information must go back to the client application so that
                    it can perform the operation and update the graphics. In
                    this case, you want Amazon Lex to return the intent data to
                    the client. </p> </li> </ul>
                  type: object
                  properties:
                    type:
                      $ref: "#/components/schemas/FulfillmentActivityType"
                    codeHook:
                      $ref: "#/components/schemas/CodeHook"
                parentIntentSignature:
                  description: A unique identifier for the built-in intent to base this
                    intent on. To find the signature for an intent, see <a
                    href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard
                    Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
                  type: string
                checksum:
                  description: <p>Identifies a specific revision of the
                    <code>$LATEST</code> version.</p> <p>When you create a new
                    intent, leave the <code>checksum</code> field blank. If you
                    specify a checksum you get a
                    <code>BadRequestException</code> exception.</p> <p>When you
                    want to update a intent, set the <code>checksum</code> field
                    to the checksum of the most recent revision of the
                    <code>$LATEST</code> version. If you don't specify the
                    <code> checksum</code> field, or if the checksum does not
                    match the <code>$LATEST</code> version, you get a
                    <code>PreconditionFailedException</code> exception.</p>
                  type: string
                createVersion:
                  description: ""
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/slottypes/{name}/versions/$LATEST":
    put:
      operationId: PutSlotType
      description: <p>Creates a custom slot type or replaces an existing custom slot
        type.</p> <p>To create a custom slot type, specify a name for the slot
        type and a set of enumeration values, which are the values that a slot
        of this type can assume. For more information, see
        <a>how-it-works</a>.</p> <p>If you specify the name of an existing slot
        type, the fields in the request replace the existing values in the
        <code>$LATEST</code> version of the slot type. Amazon Lex removes the
        fields that you don't provide in the request. If you don't specify
        required fields, Amazon Lex throws an exception. When you update the
        <code>$LATEST</code> version of a slot type, if a bot uses the
        <code>$LATEST</code> version of an intent that contains the slot type,
        the bot's <code>status</code> field is set to
        <code>NOT_BUILT</code>.</p> <p>This operation requires permissions for
        the <code>lex:PutSlotType</code> action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutSlotTypeResponse"
        "480":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: name
          in: path
          required: true
          description: <p>The name of the slot type. The name is <i>not</i> case sensitive.
            </p> <p>The name can't match a built-in slot type name, or a
            built-in slot type name with "AMAZON." removed. For example, because
            there is a built-in slot type called <code>AMAZON.DATE</code>, you
            can't create a custom slot type called <code>DATE</code>.</p> <p>For
            a list of built-in slot types, see <a
            href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot
            Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ^([A-Za-z]_?)+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A description of the slot type.
                  type: string
                  minLength: 0
                  maxLength: 200
                enumerationValues:
                  description: <p>A list of <code>EnumerationValue</code> objects that
                    defines the values that the slot type can take. Each value
                    can have a list of <code>synonyms</code>, which are
                    additional values that help train the machine learning model
                    about the values that it resolves for a slot. </p> <p>When
                    Amazon Lex resolves a slot value, it generates a resolution
                    list that contains up to five possible values for the slot.
                    If you are using a Lambda function, this resolution list is
                    passed to the function. If you are not using a Lambda
                    function you can choose to return the value that the user
                    entered or the first value in the resolution list as the
                    slot value. The <code>valueSelectionStrategy</code> field
                    indicates the option to use. </p>
                  type: array
                  items:
                    $ref: "#/components/schemas/EnumerationValue"
                  minItems: 1
                  maxItems: 10000
                checksum:
                  description: <p>Identifies a specific revision of the
                    <code>$LATEST</code> version.</p> <p>When you create a new
                    slot type, leave the <code>checksum</code> field blank. If
                    you specify a checksum you get a
                    <code>BadRequestException</code> exception.</p> <p>When you
                    want to update a slot type, set the <code>checksum</code>
                    field to the checksum of the most recent revision of the
                    <code>$LATEST</code> version. If you don't specify the
                    <code> checksum</code> field, or if the checksum does not
                    match the <code>$LATEST</code> version, you get a
                    <code>PreconditionFailedException</code> exception.</p>
                  type: string
                valueSelectionStrategy:
                  description: <p>Determines the slot resolution strategy that Amazon Lex
                    uses to return slot type values. The field can be set to one
                    of the following values:</p> <ul> <li> <p>
                    <code>ORIGINAL_VALUE</code> - Returns the value entered by
                    the user, if the user value is similar to the slot
                    value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If
                    there is a resolution list for the slot, return the first
                    value in the resolution list as the slot type value. If
                    there is no resolution list, null is returned.</p> </li>
                    </ul> <p>If you don't specify the
                    <code>valueSelectionStrategy</code>, the default is
                    <code>ORIGINAL_VALUE</code>.</p>
                  type: string
                  enum:
                    - ORIGINAL_VALUE
                    - TOP_RESOLUTION
                createVersion:
                  description: ""
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /imports/:
    post:
      operationId: StartImport
      description: Starts a job to import a resource to Amazon Lex.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartImportResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - payload
                - resourceType
                - mergeStrategy
              properties:
                payload:
                  description: A zip archive in binary format. The archive should contain
                    one file, a JSON file containing the resource to import. The
                    resource should match the type specified in the
                    <code>resourceType</code> field.
                  type: string
                resourceType:
                  description: <p>Specifies the type of resource to export. Each resource
                    also exports any resources that it depends on. </p> <ul>
                    <li> <p>A bot exports dependent intents.</p> </li> <li>
                    <p>An intent exports dependent slot types.</p> </li> </ul>
                  type: string
                  enum:
                    - BOT
                    - INTENT
                    - SLOT_TYPE
                mergeStrategy:
                  description: <p>Specifies the action that the <code>StartImport</code>
                    operation should take when there is an existing resource
                    with the same name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The
                    import operation is stopped on the first conflict between a
                    resource in the import file and an existing resource. The
                    name of the resource causing the conflict is in the
                    <code>failureReason</code> field of the response to the
                    <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST -
                    The import operation proceeds even if there is a conflict
                    with an existing resource. The $LASTEST version of the
                    existing resource is overwritten with the data from the
                    import file.</p> </li> </ul>
                  type: string
                  enum:
                    - OVERWRITE_LATEST
                    - FAIL_ON_CONFLICT
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://models.lex.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Lex Model Building Service multi-region endpoint
  - url: https://models.lex.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Lex Model Building Service multi-region endpoint
  - url: http://models.lex.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Lex Model Building Service endpoint for China (Beijing) and
      China (Ningxia)
  - url: https://models.lex.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Lex Model Building Service endpoint for China (Beijing) and
      China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateBotVersionResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/BotName"
        description:
          $ref: "#/components/schemas/Description"
        intents:
          $ref: "#/components/schemas/IntentList"
        clarificationPrompt:
          $ref: "#/components/schemas/Prompt"
        abortStatement:
          $ref: "#/components/schemas/Statement"
        status:
          $ref: "#/components/schemas/Status"
        failureReason:
          $ref: "#/components/schemas/String"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        idleSessionTTLInSeconds:
          $ref: "#/components/schemas/SessionTTL"
        voiceId:
          $ref: "#/components/schemas/String"
        checksum:
          $ref: "#/components/schemas/String"
        version:
          $ref: "#/components/schemas/Version"
        locale:
          $ref: "#/components/schemas/Locale"
        childDirected:
          $ref: "#/components/schemas/Boolean"
    NotFoundException: {}
    ConflictException: {}
    LimitExceededException: {}
    InternalFailureException: {}
    BadRequestException: {}
    PreconditionFailedException: {}
    CreateIntentVersionResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/IntentName"
        description:
          $ref: "#/components/schemas/Description"
        slots:
          $ref: "#/components/schemas/SlotList"
        sampleUtterances:
          $ref: "#/components/schemas/IntentUtteranceList"
        confirmationPrompt:
          $ref: "#/components/schemas/Prompt"
        rejectionStatement:
          $ref: "#/components/schemas/Statement"
        followUpPrompt:
          $ref: "#/components/schemas/FollowUpPrompt"
        conclusionStatement:
          $ref: "#/components/schemas/Statement"
        dialogCodeHook:
          $ref: "#/components/schemas/CodeHook"
        fulfillmentActivity:
          $ref: "#/components/schemas/FulfillmentActivity"
        parentIntentSignature:
          $ref: "#/components/schemas/BuiltinIntentSignature"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
    CreateSlotTypeVersionResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/SlotTypeName"
        description:
          $ref: "#/components/schemas/Description"
        enumerationValues:
          $ref: "#/components/schemas/EnumerationValues"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
        valueSelectionStrategy:
          $ref: "#/components/schemas/SlotValueSelectionStrategy"
    ResourceInUseException: {}
    GetBotResponse:
      type: object
      example:
        version: $LATEST
        name: DocOrderPizzaBot
        abortStatement:
          messages:
            - content: I don't understand. Can you try again?
              contentType: PlainText
            - content: I'm sorry, I don't understand.
              contentType: PlainText
        checksum: 20172ee3-fa06-49b2-bbc5-667c090303e9
        childDirected: true
        clarificationPrompt:
          maxAttempts: 1
          messages:
            - content: I'm sorry, I didn't hear that. Can you repeate what you just
                said?
              contentType: PlainText
            - content: Can you say that again?
              contentType: PlainText
        createdDate: 1494360160.133
        description: Orders a pizza from a local pizzeria.
        idleSessionTTLInSeconds: 300
        intents:
          - intentName: DocOrderPizza
            intentVersion: $LATEST
        lastUpdatedDate: 1494360160.133
        locale: en-US
        status: NOT_BUILT
      properties:
        name:
          $ref: "#/components/schemas/BotName"
        description:
          $ref: "#/components/schemas/Description"
        intents:
          $ref: "#/components/schemas/IntentList"
        clarificationPrompt:
          $ref: "#/components/schemas/Prompt"
        abortStatement:
          $ref: "#/components/schemas/Statement"
        status:
          $ref: "#/components/schemas/Status"
        failureReason:
          $ref: "#/components/schemas/String"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        idleSessionTTLInSeconds:
          $ref: "#/components/schemas/SessionTTL"
        voiceId:
          $ref: "#/components/schemas/String"
        checksum:
          $ref: "#/components/schemas/String"
        version:
          $ref: "#/components/schemas/Version"
        locale:
          $ref: "#/components/schemas/Locale"
        childDirected:
          $ref: "#/components/schemas/Boolean"
    GetBotAliasResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/AliasName"
        description:
          $ref: "#/components/schemas/Description"
        botVersion:
          $ref: "#/components/schemas/Version"
        botName:
          $ref: "#/components/schemas/BotName"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        checksum:
          $ref: "#/components/schemas/String"
    GetBotAliasesResponse:
      type: object
      properties:
        BotAliases:
          $ref: "#/components/schemas/BotAliasMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetBotChannelAssociationResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/BotChannelName"
        description:
          $ref: "#/components/schemas/Description"
        botAlias:
          $ref: "#/components/schemas/AliasName"
        botName:
          $ref: "#/components/schemas/BotName"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        type:
          $ref: "#/components/schemas/ChannelType"
        botConfiguration:
          $ref: "#/components/schemas/ChannelConfigurationMap"
        status:
          $ref: "#/components/schemas/ChannelStatus"
        failureReason:
          $ref: "#/components/schemas/String"
    GetBotChannelAssociationsResponse:
      type: object
      properties:
        botChannelAssociations:
          $ref: "#/components/schemas/BotChannelAssociationList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetBotVersionsResponse:
      type: object
      properties:
        bots:
          $ref: "#/components/schemas/BotMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetBotsResponse:
      type: object
      example:
        bots:
          - version: $LATEST
            name: DocOrderPizzaBot
            createdDate: 1494360160.133
            description: Orders a pizza from a local pizzeria.
            lastUpdatedDate: 1494360160.133
            status: NOT_BUILT
      properties:
        bots:
          $ref: "#/components/schemas/BotMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetBuiltinIntentResponse:
      type: object
      properties:
        signature:
          $ref: "#/components/schemas/BuiltinIntentSignature"
        supportedLocales:
          $ref: "#/components/schemas/LocaleList"
        slots:
          $ref: "#/components/schemas/BuiltinIntentSlotList"
    GetBuiltinIntentsResponse:
      type: object
      properties:
        intents:
          $ref: "#/components/schemas/BuiltinIntentMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetBuiltinSlotTypesResponse:
      type: object
      properties:
        slotTypes:
          $ref: "#/components/schemas/BuiltinSlotTypeMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetExportResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        version:
          $ref: "#/components/schemas/NumericalVersion"
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        exportType:
          $ref: "#/components/schemas/ExportType"
        exportStatus:
          $ref: "#/components/schemas/ExportStatus"
        failureReason:
          $ref: "#/components/schemas/String"
        url:
          $ref: "#/components/schemas/String"
    GetImportResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        mergeStrategy:
          $ref: "#/components/schemas/MergeStrategy"
        importId:
          $ref: "#/components/schemas/String"
        importStatus:
          $ref: "#/components/schemas/ImportStatus"
        failureReason:
          $ref: "#/components/schemas/StringList"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
    GetIntentResponse:
      type: object
      example:
        version: $LATEST
        name: DocOrderPizza
        checksum: ca9bc13d-afc8-4706-bbaf-091f7a5935d6
        conclusionStatement:
          messages:
            - content: All right, I ordered  you a {Crust} crust {Type} pizza with
                {Sauce} sauce.
              contentType: PlainText
            - content: OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on the
                way.
              contentType: PlainText
          responseCard: foo
        confirmationPrompt:
          maxAttempts: 1
          messages:
            - content: Should I order  your {Crust} crust {Type} pizza with {Sauce}
                sauce?
              contentType: PlainText
        createdDate: 1494359783.453
        description: Order a pizza from a local pizzeria.
        fulfillmentActivity:
          type: ReturnIntent
        lastUpdatedDate: 1494359783.453
        rejectionStatement:
          messages:
            - content: Ok, I'll cancel your order.
              contentType: PlainText
            - content: I cancelled your order.
              contentType: PlainText
        sampleUtterances:
          - Order me a pizza.
          - Order me a {Type} pizza.
          - I want a {Crust} crust {Type} pizza
          - I want a {Crust} crust {Type} pizza with {Sauce} sauce.
        slots:
          - name: Type
            description: The type of pizza to order.
            priority: 1
            sampleUtterances:
              - Get me a {Type} pizza.
              - A {Type} pizza please.
              - I'd like a {Type} pizza.
            slotConstraint: Required
            slotType: DocPizzaType
            slotTypeVersion: $LATEST
            valueElicitationPrompt:
              maxAttempts: 1
              messages:
                - content: What type of pizza would you like?
                  contentType: PlainText
                - content: Vegie or cheese pizza?
                  contentType: PlainText
                - content: I can get you a vegie or a cheese pizza.
                  contentType: PlainText
          - name: Crust
            description: The type of pizza crust to order.
            priority: 2
            sampleUtterances:
              - Make it a {Crust} crust.
              - I'd like a {Crust} crust.
            slotConstraint: Required
            slotType: DocPizzaCrustType
            slotTypeVersion: $LATEST
            valueElicitationPrompt:
              maxAttempts: 1
              messages:
                - content: What type of crust would you like?
                  contentType: PlainText
                - content: Thick or thin crust?
                  contentType: PlainText
          - name: Sauce
            description: The type of sauce to use on the pizza.
            priority: 3
            sampleUtterances:
              - Make it {Sauce} sauce.
              - I'd like {Sauce} sauce.
            slotConstraint: Required
            slotType: DocPizzaSauceType
            slotTypeVersion: $LATEST
            valueElicitationPrompt:
              maxAttempts: 1
              messages:
                - content: White or red sauce?
                  contentType: PlainText
                - content: Garlic or tomato sauce?
                  contentType: PlainText
      properties:
        name:
          $ref: "#/components/schemas/IntentName"
        description:
          $ref: "#/components/schemas/Description"
        slots:
          $ref: "#/components/schemas/SlotList"
        sampleUtterances:
          $ref: "#/components/schemas/IntentUtteranceList"
        confirmationPrompt:
          $ref: "#/components/schemas/Prompt"
        rejectionStatement:
          $ref: "#/components/schemas/Statement"
        followUpPrompt:
          $ref: "#/components/schemas/FollowUpPrompt"
        conclusionStatement:
          $ref: "#/components/schemas/Statement"
        dialogCodeHook:
          $ref: "#/components/schemas/CodeHook"
        fulfillmentActivity:
          $ref: "#/components/schemas/FulfillmentActivity"
        parentIntentSignature:
          $ref: "#/components/schemas/BuiltinIntentSignature"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
    GetIntentVersionsResponse:
      type: object
      properties:
        intents:
          $ref: "#/components/schemas/IntentMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetIntentsResponse:
      type: object
      example:
        intents:
          - version: $LATEST
            name: DocOrderPizza
            createdDate: 1494359783.453
            description: Order a pizza from a local pizzeria.
            lastUpdatedDate: 1494359783.453
      properties:
        intents:
          $ref: "#/components/schemas/IntentMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetSlotTypeResponse:
      type: object
      example:
        version: $LATEST
        name: DocPizzaCrustType
        checksum: 210b3d5a-90a3-4b22-ac7e-f50c2c71095f
        createdDate: 1494359274.403
        description: Available crust types
        enumerationValues:
          - value: thick
          - value: thin
        lastUpdatedDate: 1494359274.403
      properties:
        name:
          $ref: "#/components/schemas/SlotTypeName"
        description:
          $ref: "#/components/schemas/Description"
        enumerationValues:
          $ref: "#/components/schemas/EnumerationValues"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
        valueSelectionStrategy:
          $ref: "#/components/schemas/SlotValueSelectionStrategy"
    GetSlotTypeVersionsResponse:
      type: object
      properties:
        slotTypes:
          $ref: "#/components/schemas/SlotTypeMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetSlotTypesResponse:
      type: object
      example:
        slotTypes:
          - version: $LATEST
            name: DocPizzaCrustType
            createdDate: 1494359274.403
            description: Available crust types
            lastUpdatedDate: 1494359274.403
          - version: $LATEST
            name: DocPizzaSauceType
            createdDate: 1494356442.23
            description: Available pizza sauces
            lastUpdatedDate: 1494356442.23
          - version: $LATEST
            name: DocPizzaType
            createdDate: 1494359198.656
            description: Available pizzas
            lastUpdatedDate: 1494359198.656
      properties:
        slotTypes:
          $ref: "#/components/schemas/SlotTypeMetadataList"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    GetUtterancesViewResponse:
      type: object
      properties:
        botName:
          $ref: "#/components/schemas/BotName"
        utterances:
          $ref: "#/components/schemas/ListsOfUtterances"
    Version:
      type: string
      pattern: \$LATEST|[0-9]+
      minLength: 1
      maxLength: 64
    PutBotResponse:
      type: object
      example:
        version: $LATEST
        name: DocOrderPizzaBot
        abortStatement:
          messages:
            - content: I don't understand. Can you try again?
              contentType: PlainText
            - content: I'm sorry, I don't understand.
              contentType: PlainText
        checksum: 20172ee3-fa06-49b2-bbc5-667c090303e9
        childDirected: true
        clarificationPrompt:
          maxAttempts: 1
          messages:
            - content: I'm sorry, I didn't hear that. Can you repeate what you just
                said?
              contentType: PlainText
            - content: Can you say that again?
              contentType: PlainText
        createdDate: 1494360160.133
        description: Orders a pizza from a local pizzeria.
        idleSessionTTLInSeconds: 300
        intents:
          - intentName: DocOrderPizza
            intentVersion: $LATEST
        lastUpdatedDate: 1494360160.133
        locale: en-US
        status: NOT_BUILT
      properties:
        name:
          $ref: "#/components/schemas/BotName"
        description:
          $ref: "#/components/schemas/Description"
        intents:
          $ref: "#/components/schemas/IntentList"
        clarificationPrompt:
          $ref: "#/components/schemas/Prompt"
        abortStatement:
          $ref: "#/components/schemas/Statement"
        status:
          $ref: "#/components/schemas/Status"
        failureReason:
          $ref: "#/components/schemas/String"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        idleSessionTTLInSeconds:
          $ref: "#/components/schemas/SessionTTL"
        voiceId:
          $ref: "#/components/schemas/String"
        checksum:
          $ref: "#/components/schemas/String"
        version:
          $ref: "#/components/schemas/Version"
        locale:
          $ref: "#/components/schemas/Locale"
        childDirected:
          $ref: "#/components/schemas/Boolean"
        createVersion:
          $ref: "#/components/schemas/Boolean"
    Intent:
      type: object
      required:
        - intentName
        - intentVersion
      properties:
        intentName:
          $ref: "#/components/schemas/IntentName"
        intentVersion:
          $ref: "#/components/schemas/Version"
      description: Identifies the specific version of an intent.
    MessageList:
      type: array
      items:
        $ref: "#/components/schemas/Message"
      minItems: 1
      maxItems: 15
    PromptMaxAttempts:
      type: integer
      minimum: 1
      maximum: 5
    ResponseCard:
      type: string
      minLength: 1
      maxLength: 50000
    PutBotAliasResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/AliasName"
        description:
          $ref: "#/components/schemas/Description"
        botVersion:
          $ref: "#/components/schemas/Version"
        botName:
          $ref: "#/components/schemas/BotName"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        checksum:
          $ref: "#/components/schemas/String"
    PutIntentResponse:
      type: object
      example:
        version: $LATEST
        name: DocOrderPizza
        checksum: ca9bc13d-afc8-4706-bbaf-091f7a5935d6
        conclusionStatement:
          messages:
            - content: All right, I ordered  you a {Crust} crust {Type} pizza with
                {Sauce} sauce.
              contentType: PlainText
            - content: OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on the
                way.
              contentType: PlainText
          responseCard: foo
        confirmationPrompt:
          maxAttempts: 1
          messages:
            - content: Should I order  your {Crust} crust {Type} pizza with {Sauce}
                sauce?
              contentType: PlainText
        createdDate: 1494359783.453
        description: Order a pizza from a local pizzeria.
        fulfillmentActivity:
          type: ReturnIntent
        lastUpdatedDate: 1494359783.453
        rejectionStatement:
          messages:
            - content: Ok, I'll cancel your order.
              contentType: PlainText
            - content: I cancelled your order.
              contentType: PlainText
        sampleUtterances:
          - Order me a pizza.
          - Order me a {Type} pizza.
          - I want a {Crust} crust {Type} pizza
          - I want a {Crust} crust {Type} pizza with {Sauce} sauce.
        slots:
          - name: Sauce
            description: The type of sauce to use on the pizza.
            priority: 3
            sampleUtterances:
              - Make it {Sauce} sauce.
              - I'd like {Sauce} sauce.
            slotConstraint: Required
            slotType: DocPizzaSauceType
            slotTypeVersion: $LATEST
            valueElicitationPrompt:
              maxAttempts: 1
              messages:
                - content: White or red sauce?
                  contentType: PlainText
                - content: Garlic or tomato sauce?
                  contentType: PlainText
          - name: Type
            description: The type of pizza to order.
            priority: 1
            sampleUtterances:
              - Get me a {Type} pizza.
              - A {Type} pizza please.
              - I'd like a {Type} pizza.
            slotConstraint: Required
            slotType: DocPizzaType
            slotTypeVersion: $LATEST
            valueElicitationPrompt:
              maxAttempts: 1
              messages:
                - content: What type of pizza would you like?
                  contentType: PlainText
                - content: Vegie or cheese pizza?
                  contentType: PlainText
                - content: I can get you a vegie or a cheese pizza.
                  contentType: PlainText
          - name: Crust
            description: The type of pizza crust to order.
            priority: 2
            sampleUtterances:
              - Make it a {Crust} crust.
              - I'd like a {Crust} crust.
            slotConstraint: Required
            slotType: DocPizzaCrustType
            slotTypeVersion: $LATEST
            valueElicitationPrompt:
              maxAttempts: 1
              messages:
                - content: What type of crust would you like?
                  contentType: PlainText
                - content: Thick or thin crust?
                  contentType: PlainText
      properties:
        name:
          $ref: "#/components/schemas/IntentName"
        description:
          $ref: "#/components/schemas/Description"
        slots:
          $ref: "#/components/schemas/SlotList"
        sampleUtterances:
          $ref: "#/components/schemas/IntentUtteranceList"
        confirmationPrompt:
          $ref: "#/components/schemas/Prompt"
        rejectionStatement:
          $ref: "#/components/schemas/Statement"
        followUpPrompt:
          $ref: "#/components/schemas/FollowUpPrompt"
        conclusionStatement:
          $ref: "#/components/schemas/Statement"
        dialogCodeHook:
          $ref: "#/components/schemas/CodeHook"
        fulfillmentActivity:
          $ref: "#/components/schemas/FulfillmentActivity"
        parentIntentSignature:
          $ref: "#/components/schemas/BuiltinIntentSignature"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
        createVersion:
          $ref: "#/components/schemas/Boolean"
    Slot:
      type: object
      required:
        - name
        - slotConstraint
      properties:
        name:
          $ref: "#/components/schemas/SlotName"
        description:
          $ref: "#/components/schemas/Description"
        slotConstraint:
          $ref: "#/components/schemas/SlotConstraint"
        slotType:
          $ref: "#/components/schemas/CustomOrBuiltinSlotTypeName"
        slotTypeVersion:
          $ref: "#/components/schemas/Version"
        valueElicitationPrompt:
          $ref: "#/components/schemas/Prompt"
        priority:
          $ref: "#/components/schemas/Priority"
        sampleUtterances:
          $ref: "#/components/schemas/SlotUtteranceList"
        responseCard:
          $ref: "#/components/schemas/ResponseCard"
      description: Identifies the version of a specific slot.
    Utterance:
      type: string
      minLength: 1
      maxLength: 200
    Prompt:
      type: object
      required:
        - messages
        - maxAttempts
      properties:
        messages:
          $ref: "#/components/schemas/MessageList"
        maxAttempts:
          $ref: "#/components/schemas/PromptMaxAttempts"
        responseCard:
          $ref: "#/components/schemas/ResponseCard"
      description: Obtains information from the user. To define a prompt, provide one or
        more messages and specify the number of attempts to get information from
        the user. If you provide more than one message, Amazon Lex chooses one
        of the messages to use to prompt the user. For more information, see
        <a>how-it-works</a>.
    Statement:
      type: object
      required:
        - messages
      properties:
        messages:
          $ref: "#/components/schemas/MessageList"
        responseCard:
          $ref: "#/components/schemas/ResponseCard"
      description: "A collection of messages that convey information to the user. At
        runtime, Amazon Lex selects the message to convey. "
    LambdaARN:
      type: string
      pattern: arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?
      minLength: 20
      maxLength: 2048
    MessageVersion:
      type: string
      minLength: 1
      maxLength: 5
    FulfillmentActivityType:
      type: string
      enum:
        - ReturnIntent
        - CodeHook
    CodeHook:
      type: object
      required:
        - uri
        - messageVersion
      properties:
        uri:
          $ref: "#/components/schemas/LambdaARN"
        messageVersion:
          $ref: "#/components/schemas/MessageVersion"
      description: Specifies a Lambda function that verifies requests to a bot or fulfills
        the user's request to a bot..
    PutSlotTypeResponse:
      type: object
      example:
        version: $LATEST
        name: DocPizzaSauceType
        checksum: cfd00ed1-775d-4357-947c-aca7e73b44ba
        createdDate: 1494356442.23
        description: Available pizza sauces
        enumerationValues:
          - value: red
          - value: white
        lastUpdatedDate: 1494356442.23
      properties:
        name:
          $ref: "#/components/schemas/SlotTypeName"
        description:
          $ref: "#/components/schemas/Description"
        enumerationValues:
          $ref: "#/components/schemas/EnumerationValues"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
        valueSelectionStrategy:
          $ref: "#/components/schemas/SlotValueSelectionStrategy"
        createVersion:
          $ref: "#/components/schemas/Boolean"
    EnumerationValue:
      type: object
      required:
        - value
      properties:
        value:
          $ref: "#/components/schemas/Value"
        synonyms:
          $ref: "#/components/schemas/SynonymList"
      description: <p>Each slot type can have a set of values. Each enumeration value
        represents a value the slot type can take. </p> <p>For example, a pizza
        ordering bot could have a slot type that specifies the type of crust
        that the pizza should have. The slot type could include the values </p>
        <ul> <li> <p>thick</p> </li> <li> <p>thin</p> </li> <li> <p>stuffed</p>
        </li> </ul>
    StartImportResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        mergeStrategy:
          $ref: "#/components/schemas/MergeStrategy"
        importId:
          $ref: "#/components/schemas/String"
        importStatus:
          $ref: "#/components/schemas/ImportStatus"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
    AliasName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    AliasNameOrListAll:
      type: string
      pattern: ^(-|^([A-Za-z]_?)+$)$
      minLength: 1
      maxLength: 100
    Blob:
      type: string
    Boolean:
      type: boolean
    Description:
      type: string
      minLength: 0
      maxLength: 200
    BotName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 2
      maxLength: 50
    Timestamp:
      type: string
      format: date-time
    String:
      type: string
    BotAliasMetadata:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/AliasName"
        description:
          $ref: "#/components/schemas/Description"
        botVersion:
          $ref: "#/components/schemas/Version"
        botName:
          $ref: "#/components/schemas/BotName"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        checksum:
          $ref: "#/components/schemas/String"
      description: Provides information about a bot alias.
    BotAliasMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/BotAliasMetadata"
    BotChannelName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    ChannelType:
      type: string
      enum:
        - Facebook
        - Slack
        - Twilio-Sms
        - Kik
    ChannelConfigurationMap:
      type: object
      minProperties: 1
      maxProperties: 10
      additionalProperties:
        $ref: "#/components/schemas/String"
    ChannelStatus:
      type: string
      enum:
        - IN_PROGRESS
        - CREATED
        - FAILED
    BotChannelAssociation:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/BotChannelName"
        description:
          $ref: "#/components/schemas/Description"
        botAlias:
          $ref: "#/components/schemas/AliasName"
        botName:
          $ref: "#/components/schemas/BotName"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        type:
          $ref: "#/components/schemas/ChannelType"
        botConfiguration:
          $ref: "#/components/schemas/ChannelConfigurationMap"
        status:
          $ref: "#/components/schemas/ChannelStatus"
        failureReason:
          $ref: "#/components/schemas/String"
      description: Represents an association between an Amazon Lex bot and an external
        messaging platform.
    BotChannelAssociationList:
      type: array
      items:
        $ref: "#/components/schemas/BotChannelAssociation"
    Status:
      type: string
      enum:
        - BUILDING
        - READY
        - READY_BASIC_TESTING
        - FAILED
        - NOT_BUILT
    BotMetadata:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/BotName"
        description:
          $ref: "#/components/schemas/Description"
        status:
          $ref: "#/components/schemas/Status"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
      description: Provides information about a bot. .
    BotMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/BotMetadata"
    BotVersions:
      type: array
      items:
        $ref: "#/components/schemas/Version"
      minItems: 1
      maxItems: 5
    BuiltinIntentSignature:
      type: string
    LocaleList:
      type: array
      items:
        $ref: "#/components/schemas/Locale"
    BuiltinIntentMetadata:
      type: object
      properties:
        signature:
          $ref: "#/components/schemas/BuiltinIntentSignature"
        supportedLocales:
          $ref: "#/components/schemas/LocaleList"
      description: Provides metadata for a built-in intent.
    BuiltinIntentMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/BuiltinIntentMetadata"
    BuiltinIntentSlot:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/String"
      description: Provides information about a slot used in a built-in intent.
    BuiltinIntentSlotList:
      type: array
      items:
        $ref: "#/components/schemas/BuiltinIntentSlot"
    BuiltinSlotTypeSignature:
      type: string
    BuiltinSlotTypeMetadata:
      type: object
      properties:
        signature:
          $ref: "#/components/schemas/BuiltinSlotTypeSignature"
        supportedLocales:
          $ref: "#/components/schemas/LocaleList"
      description: Provides information about a built in slot type.
    BuiltinSlotTypeMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/BuiltinSlotTypeMetadata"
    ContentString:
      type: string
      minLength: 1
      maxLength: 1000
    ContentType:
      type: string
      enum:
        - PlainText
        - SSML
        - CustomPayload
    Count:
      type: integer
    CreateBotVersionRequest:
      type: object
      properties:
        checksum:
          $ref: "#/components/schemas/String"
    IntentList:
      type: array
      items:
        $ref: "#/components/schemas/Intent"
    SessionTTL:
      type: integer
      minimum: 60
      maximum: 86400
    Locale:
      type: string
      enum:
        - en-US
        - en-GB
        - de-DE
    IntentName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    CreateIntentVersionRequest:
      type: object
      properties:
        checksum:
          $ref: "#/components/schemas/String"
    SlotList:
      type: array
      items:
        $ref: "#/components/schemas/Slot"
      minItems: 0
      maxItems: 100
    IntentUtteranceList:
      type: array
      items:
        $ref: "#/components/schemas/Utterance"
      minItems: 0
      maxItems: 1500
    FollowUpPrompt:
      type: object
      required:
        - prompt
        - rejectionStatement
      properties:
        prompt:
          $ref: "#/components/schemas/Prompt"
        rejectionStatement:
          $ref: "#/components/schemas/Statement"
      description: A prompt for additional activity after an intent is fulfilled. For
        example, after the <code>OrderPizza</code> intent is fulfilled, you
        might prompt the user to find out whether the user wants to order
        drinks.
    FulfillmentActivity:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/FulfillmentActivityType"
        codeHook:
          $ref: "#/components/schemas/CodeHook"
      description: <p> Describes how the intent is fulfilled after the user provides all of
        the information required for the intent. You can provide a Lambda
        function to process the intent, or you can return the intent information
        to the client application. We recommend that you use a Lambda function
        so that the relevant logic lives in the Cloud and limit the client-side
        code primarily to presentation. If you need to update the logic, you
        only update the Lambda function; you don't need to upgrade your client
        application. </p> <p>Consider the following examples:</p> <ul> <li>
        <p>In a pizza ordering application, after the user provides all of the
        information for placing an order, you use a Lambda function to place an
        order with a pizzeria. </p> </li> <li> <p>In a gaming application, when
        a user says "pick up a rock," this information must go back to the
        client application so that it can perform the operation and update the
        graphics. In this case, you want Amazon Lex to return the intent data to
        the client. </p> </li> </ul>
    SlotTypeName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    CreateSlotTypeVersionRequest:
      type: object
      properties:
        checksum:
          $ref: "#/components/schemas/String"
    EnumerationValues:
      type: array
      items:
        $ref: "#/components/schemas/EnumerationValue"
      minItems: 1
      maxItems: 10000
    SlotValueSelectionStrategy:
      type: string
      enum:
        - ORIGINAL_VALUE
        - TOP_RESOLUTION
    CustomOrBuiltinSlotTypeName:
      type: string
      pattern: ^((AMAZON\.)_?|[A-Za-z]_?)+
      minLength: 1
      maxLength: 100
    DeleteBotAliasRequest:
      type: object
      properties: {}
    DeleteBotChannelAssociationRequest:
      type: object
      properties: {}
    DeleteBotRequest:
      type: object
      properties: {}
    NumericalVersion:
      type: string
      pattern: "[0-9]+"
      minLength: 1
      maxLength: 64
    DeleteBotVersionRequest:
      type: object
      properties: {}
    DeleteIntentRequest:
      type: object
      properties: {}
    DeleteIntentVersionRequest:
      type: object
      properties: {}
    DeleteSlotTypeRequest:
      type: object
      properties: {}
    DeleteSlotTypeVersionRequest:
      type: object
      properties: {}
    UserId:
      type: string
      minLength: 2
      maxLength: 100
    DeleteUtterancesRequest:
      type: object
      properties: {}
    Value:
      type: string
      minLength: 1
      maxLength: 140
    SynonymList:
      type: array
      items:
        $ref: "#/components/schemas/Value"
    ExportStatus:
      type: string
      enum:
        - IN_PROGRESS
        - READY
        - FAILED
    ExportType:
      type: string
      enum:
        - ALEXA_SKILLS_KIT
        - LEX
    GetBotAliasRequest:
      type: object
      properties: {}
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 50
    GetBotAliasesRequest:
      type: object
      properties: {}
    GetBotChannelAssociationRequest:
      type: object
      properties: {}
    GetBotChannelAssociationsRequest:
      type: object
      properties: {}
    GetBotRequest:
      type: object
      properties: {}
    GetBotVersionsRequest:
      type: object
      properties: {}
    GetBotsRequest:
      type: object
      properties: {}
    GetBuiltinIntentRequest:
      type: object
      properties: {}
    GetBuiltinIntentsRequest:
      type: object
      properties: {}
    GetBuiltinSlotTypesRequest:
      type: object
      properties: {}
    Name:
      type: string
      pattern: "[a-zA-Z_]+"
      minLength: 1
      maxLength: 100
    ResourceType:
      type: string
      enum:
        - BOT
        - INTENT
        - SLOT_TYPE
    GetExportRequest:
      type: object
      properties: {}
    GetImportRequest:
      type: object
      properties: {}
    MergeStrategy:
      type: string
      enum:
        - OVERWRITE_LATEST
        - FAIL_ON_CONFLICT
    ImportStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETE
        - FAILED
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    GetIntentRequest:
      type: object
      properties: {}
    GetIntentVersionsRequest:
      type: object
      properties: {}
    IntentMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/IntentMetadata"
    GetIntentsRequest:
      type: object
      properties: {}
    GetSlotTypeRequest:
      type: object
      properties: {}
    GetSlotTypeVersionsRequest:
      type: object
      properties: {}
    SlotTypeMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/SlotTypeMetadata"
    GetSlotTypesRequest:
      type: object
      properties: {}
    StatusType:
      type: string
      enum:
        - Detected
        - Missed
    GetUtterancesViewRequest:
      type: object
      properties: {}
    ListsOfUtterances:
      type: array
      items:
        $ref: "#/components/schemas/UtteranceList"
    GroupNumber:
      type: integer
      minimum: 1
      maximum: 5
    IntentMetadata:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/IntentName"
        description:
          $ref: "#/components/schemas/Description"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
      description: Provides information about an intent.
    UtteranceData:
      type: object
      properties:
        utteranceString:
          $ref: "#/components/schemas/UtteranceString"
        count:
          $ref: "#/components/schemas/Count"
        distinctUsers:
          $ref: "#/components/schemas/Count"
        firstUtteredDate:
          $ref: "#/components/schemas/Timestamp"
        lastUtteredDate:
          $ref: "#/components/schemas/Timestamp"
      description: "Provides information about a single utterance that was made to your
        bot. "
    ListOfUtterance:
      type: array
      items:
        $ref: "#/components/schemas/UtteranceData"
    UtteranceList:
      type: object
      properties:
        botVersion:
          $ref: "#/components/schemas/Version"
        utterances:
          $ref: "#/components/schemas/ListOfUtterance"
      description: Provides a list of utterances that have been made to a specific version
        of your bot. The list contains a maximum of 100 utterances.
    Message:
      type: object
      required:
        - contentType
        - content
      properties:
        contentType:
          $ref: "#/components/schemas/ContentType"
        content:
          $ref: "#/components/schemas/ContentString"
        groupNumber:
          $ref: "#/components/schemas/GroupNumber"
      description: The message object that provides the message text and its type.
    Priority:
      type: integer
      minimum: 0
      maximum: 100
    ProcessBehavior:
      type: string
      enum:
        - SAVE
        - BUILD
    PutBotAliasRequest:
      type: object
      required:
        - botVersion
      properties:
        description:
          $ref: "#/components/schemas/Description"
        botVersion:
          $ref: "#/components/schemas/Version"
        checksum:
          $ref: "#/components/schemas/String"
    PutBotRequest:
      type: object
      required:
        - locale
        - childDirected
      properties:
        description:
          $ref: "#/components/schemas/Description"
        intents:
          $ref: "#/components/schemas/IntentList"
        clarificationPrompt:
          $ref: "#/components/schemas/Prompt"
        abortStatement:
          $ref: "#/components/schemas/Statement"
        idleSessionTTLInSeconds:
          $ref: "#/components/schemas/SessionTTL"
        voiceId:
          $ref: "#/components/schemas/String"
        checksum:
          $ref: "#/components/schemas/String"
        processBehavior:
          $ref: "#/components/schemas/ProcessBehavior"
        locale:
          $ref: "#/components/schemas/Locale"
        childDirected:
          $ref: "#/components/schemas/Boolean"
        createVersion:
          $ref: "#/components/schemas/Boolean"
    PutIntentRequest:
      type: object
      properties:
        description:
          $ref: "#/components/schemas/Description"
        slots:
          $ref: "#/components/schemas/SlotList"
        sampleUtterances:
          $ref: "#/components/schemas/IntentUtteranceList"
        confirmationPrompt:
          $ref: "#/components/schemas/Prompt"
        rejectionStatement:
          $ref: "#/components/schemas/Statement"
        followUpPrompt:
          $ref: "#/components/schemas/FollowUpPrompt"
        conclusionStatement:
          $ref: "#/components/schemas/Statement"
        dialogCodeHook:
          $ref: "#/components/schemas/CodeHook"
        fulfillmentActivity:
          $ref: "#/components/schemas/FulfillmentActivity"
        parentIntentSignature:
          $ref: "#/components/schemas/BuiltinIntentSignature"
        checksum:
          $ref: "#/components/schemas/String"
        createVersion:
          $ref: "#/components/schemas/Boolean"
    PutSlotTypeRequest:
      type: object
      properties:
        description:
          $ref: "#/components/schemas/Description"
        enumerationValues:
          $ref: "#/components/schemas/EnumerationValues"
        checksum:
          $ref: "#/components/schemas/String"
        valueSelectionStrategy:
          $ref: "#/components/schemas/SlotValueSelectionStrategy"
        createVersion:
          $ref: "#/components/schemas/Boolean"
    SlotName:
      type: string
      pattern: ^([A-Za-z](-|_|.)?)+$
      minLength: 1
      maxLength: 100
    SlotConstraint:
      type: string
      enum:
        - Required
        - Optional
    SlotUtteranceList:
      type: array
      items:
        $ref: "#/components/schemas/Utterance"
      minItems: 0
      maxItems: 10
    SlotTypeMetadata:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/SlotTypeName"
        description:
          $ref: "#/components/schemas/Description"
        lastUpdatedDate:
          $ref: "#/components/schemas/Timestamp"
        createdDate:
          $ref: "#/components/schemas/Timestamp"
        version:
          $ref: "#/components/schemas/Version"
      description: Provides information about a slot type..
    StartImportRequest:
      type: object
      required:
        - payload
        - resourceType
        - mergeStrategy
      properties:
        payload:
          $ref: "#/components/schemas/Blob"
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        mergeStrategy:
          $ref: "#/components/schemas/MergeStrategy"
    UtteranceString:
      type: string
      minLength: 1
      maxLength: 2000
