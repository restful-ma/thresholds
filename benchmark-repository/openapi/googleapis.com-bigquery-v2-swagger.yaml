openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: A data platform for customers to create, manage, share and query data.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: BigQuery
  version: v2
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - search
  x-logo:
    url: https://cloud.google.com/_static/images/new-gcp-logo.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://www.googleapis.com/discovery/v1/apis/bigquery/v2/rest
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: bigquery
externalDocs:
  url: https://cloud.google.com/bigquery/
tags:
  - name: datasets
  - name: jobs
  - name: models
  - name: projects
  - name: routines
  - name: tabledata
  - name: tables
paths:
  /projects:
    get:
      description: Lists all projects to which you have been granted any project role.
      operationId: bigquery.projects.list
      parameters:
        - description: Maximum number of results to return
          in: query
          name: maxResults
          schema:
            type: integer
        - description: Page token, returned by a previous call, to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectList"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
  "/projects/{projectId}/datasets":
    get:
      description: Lists all datasets in the specified project to which you have been
        granted the READER dataset role.
      operationId: bigquery.datasets.list
      parameters:
        - description: Whether to list all datasets, including hidden ones
          in: query
          name: all
          schema:
            type: boolean
        - description: 'An expression for filtering the results of the request by label.
            The syntax is "labels.<name>[:<value>]". Multiple filters can be
            ANDed together by connecting with a space. Example:
            "labels.department:receiving labels.active". See Filtering datasets
            using labels for details.'
          in: query
          name: filter
          schema:
            type: string
        - description: The maximum number of results to return
          in: query
          name: maxResults
          schema:
            type: integer
        - description: Page token, returned by a previous call, to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
        - description: Project ID of the datasets to be listed
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/DatasetList"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - datasets
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Creates a new empty dataset.
      operationId: bigquery.datasets.insert
      parameters:
        - description: Project ID of the new dataset
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Dataset"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Dataset"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - datasets
  "/projects/{projectId}/datasets/{datasetId}":
    delete:
      description: Deletes the dataset specified by the datasetId value. Before you can
        delete a dataset, you must delete all its tables, either manually or by
        specifying deleteContents. Immediately after deletion, you can create
        another dataset with the same name.
      operationId: bigquery.datasets.delete
      parameters:
        - description: Dataset ID of dataset being deleted
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: If True, delete all the tables in the dataset. If False and the
            dataset contains tables, the request will fail. Default is False
          in: query
          name: deleteContents
          schema:
            type: boolean
        - description: Project ID of the dataset being deleted
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - datasets
    get:
      description: Returns the dataset specified by datasetID.
      operationId: bigquery.datasets.get
      parameters:
        - description: Dataset ID of the requested dataset
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the requested dataset
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Dataset"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - datasets
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    patch:
      description: Updates information in an existing dataset. The update method replaces
        the entire dataset resource, whereas the patch method only replaces
        fields that are provided in the submitted dataset resource. This method
        supports patch semantics.
      operationId: bigquery.datasets.patch
      parameters:
        - description: Dataset ID of the dataset being updated
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the dataset being updated
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Dataset"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Dataset"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - datasets
    put:
      description: Updates information in an existing dataset. The update method replaces
        the entire dataset resource, whereas the patch method only replaces
        fields that are provided in the submitted dataset resource.
      operationId: bigquery.datasets.update
      parameters:
        - description: Dataset ID of the dataset being updated
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the dataset being updated
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Dataset"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Dataset"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - datasets
  "/projects/{projectId}/datasets/{datasetId}/models":
    get:
      description: |-
        Lists all models in the specified dataset. Requires the READER dataset
        role.
      operationId: bigquery.models.list
      parameters:
        - description: Required. Dataset ID of the models to list.
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            The maximum number of results to return in a single response page.
            Leverage the page tokens to iterate through the entire collection.
          in: query
          name: maxResults
          schema:
            type: integer
        - description: |-
            Page token, returned by a previous call to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
        - description: Required. Project ID of the models to list.
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListModelsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - models
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
  "/projects/{projectId}/datasets/{datasetId}/models/{modelId}":
    delete:
      description: Deletes the model specified by modelId from the dataset.
      operationId: bigquery.models.delete
      parameters:
        - description: Required. Dataset ID of the model to delete.
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Model ID of the model to delete.
          in: path
          name: modelId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Project ID of the model to delete.
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - models
    get:
      description: Gets the specified model resource by model ID.
      operationId: bigquery.models.get
      parameters:
        - description: Required. Dataset ID of the requested model.
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Model ID of the requested model.
          in: path
          name: modelId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Project ID of the requested model.
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Model"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - models
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    patch:
      description: Patch specific fields in the specified model.
      operationId: bigquery.models.patch
      parameters:
        - description: Required. Dataset ID of the model to patch.
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Model ID of the model to patch.
          in: path
          name: modelId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Project ID of the model to patch.
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Model"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - models
  "/projects/{projectId}/datasets/{datasetId}/routines":
    get:
      description: |-
        Lists all routines in the specified dataset. Requires the READER dataset
        role.
      operationId: bigquery.routines.list
      parameters:
        - description: Required. Dataset ID of the routines to list
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            The maximum number of results to return in a single response page.
            Leverage the page tokens to iterate through the entire collection.
          in: query
          name: maxResults
          schema:
            type: integer
        - description: |-
            Page token, returned by a previous call, to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
        - description: Required. Project ID of the routines to list
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListRoutinesResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - routines
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Creates a new routine in the dataset.
      operationId: bigquery.routines.insert
      parameters:
        - description: Required. Dataset ID of the new routine
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Project ID of the new routine
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Routine"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Routine"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - routines
  "/projects/{projectId}/datasets/{datasetId}/routines/{routineId}":
    delete:
      description: Deletes the routine specified by routineId from the dataset.
      operationId: bigquery.routines.delete
      parameters:
        - description: Required. Dataset ID of the routine to delete
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Project ID of the routine to delete
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Routine ID of the routine to delete
          in: path
          name: routineId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - routines
    get:
      description: Gets the specified routine resource by routine ID.
      operationId: bigquery.routines.get
      parameters:
        - description: Required. Dataset ID of the requested routine
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: >-
            If set, only the Routine fields in the field mask are returned in
            the

            response. If unset, all Routine fields are returned.
          in: query
          name: fieldMask
          schema:
            type: string
        - description: Required. Project ID of the requested routine
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Routine ID of the requested routine
          in: path
          name: routineId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Routine"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - routines
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    put:
      description: >-
        Updates information in an existing routine. The update method replaces
        the

        entire Routine resource.
      operationId: bigquery.routines.update
      parameters:
        - description: Required. Dataset ID of the routine to update
          in: path
          name: datasetId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Project ID of the routine to update
          in: path
          name: projectId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Required. Routine ID of the routine to update
          in: path
          name: routineId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Routine"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Routine"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - routines
  "/projects/{projectId}/datasets/{datasetId}/tables":
    get:
      description: Lists all tables in the specified dataset. Requires the READER dataset
        role.
      operationId: bigquery.tables.list
      parameters:
        - description: Dataset ID of the tables to list
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Maximum number of results to return
          in: query
          name: maxResults
          schema:
            type: integer
        - description: Page token, returned by a previous call, to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
        - description: Project ID of the tables to list
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TableList"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - tables
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Creates a new, empty table in the dataset.
      operationId: bigquery.tables.insert
      parameters:
        - description: Dataset ID of the new table
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the new table
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Table"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Table"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - tables
  "/projects/{projectId}/datasets/{datasetId}/tables/{tableId}":
    delete:
      description: Deletes the table specified by tableId from the dataset. If the table
        contains data, all the data will be deleted.
      operationId: bigquery.tables.delete
      parameters:
        - description: Dataset ID of the table to delete
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the table to delete
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Table ID of the table to delete
          in: path
          name: tableId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - tables
    get:
      description: Gets the specified table resource by table ID. This method does not
        return the data in the table, it only returns the table resource, which
        describes the structure of this table.
      operationId: bigquery.tables.get
      parameters:
        - description: Dataset ID of the requested table
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the requested table
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: List of fields to return (comma-separated). If unspecified, all
            fields are returned
          in: query
          name: selectedFields
          schema:
            type: string
        - description: Table ID of the requested table
          in: path
          name: tableId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Table"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - tables
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    patch:
      description: Updates information in an existing table. The update method replaces the
        entire table resource, whereas the patch method only replaces fields
        that are provided in the submitted table resource. This method supports
        patch semantics.
      operationId: bigquery.tables.patch
      parameters:
        - description: Dataset ID of the table to update
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the table to update
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Table ID of the table to update
          in: path
          name: tableId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Table"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Table"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - tables
    put:
      description: Updates information in an existing table. The update method replaces the
        entire table resource, whereas the patch method only replaces fields
        that are provided in the submitted table resource.
      operationId: bigquery.tables.update
      parameters:
        - description: Dataset ID of the table to update
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the table to update
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Table ID of the table to update
          in: path
          name: tableId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Table"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Table"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - tables
  "/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data":
    get:
      description: Retrieves table data from a specified set of rows. Requires the READER
        dataset role.
      operationId: bigquery.tabledata.list
      parameters:
        - description: Dataset ID of the table to read
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Maximum number of results to return
          in: query
          name: maxResults
          schema:
            type: integer
        - description: Page token, returned by a previous call, identifying the result set
          in: query
          name: pageToken
          schema:
            type: string
        - description: Project ID of the table to read
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: List of fields to return (comma-separated). If unspecified, all
            fields are returned
          in: query
          name: selectedFields
          schema:
            type: string
        - description: Zero-based index of the starting row to read
          in: query
          name: startIndex
          schema:
            type: string
        - description: Table ID of the table to read
          in: path
          name: tableId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TableDataList"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - tabledata
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
  "/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll":
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Streams data into BigQuery one record at a time without needing to run a
        load job. Requires the WRITER dataset role.
      operationId: bigquery.tabledata.insertAll
      parameters:
        - description: Dataset ID of the destination table.
          in: path
          name: datasetId
          required: true
          schema:
            type: string
        - description: Project ID of the destination table.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Table ID of the destination table.
          in: path
          name: tableId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableDataInsertAllRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TableDataInsertAllResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.insertdata
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.insertdata
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - tabledata
  "/projects/{projectId}/jobs":
    get:
      description: Lists all jobs that you started in the specified project. Job
        information is available for a six month period after creation. The job
        list is sorted in reverse chronological order, by job creation time.
        Requires the Can View project role, or the Is Owner project role if you
        set the allUsers property.
      operationId: bigquery.jobs.list
      parameters:
        - description: Whether to display jobs owned by all users in the project. Default
            false
          in: query
          name: allUsers
          schema:
            type: boolean
        - description: Max value for job creation time, in milliseconds since the POSIX
            epoch. If set, only jobs created before or at this timestamp are
            returned
          in: query
          name: maxCreationTime
          schema:
            type: string
        - description: Maximum number of results to return
          in: query
          name: maxResults
          schema:
            type: integer
        - description: Min value for job creation time, in milliseconds since the POSIX
            epoch. If set, only jobs created after or at this timestamp are
            returned
          in: query
          name: minCreationTime
          schema:
            type: string
        - description: Page token, returned by a previous call, to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
        - description: If set, retrieves only jobs whose parent is this job. Otherwise,
            retrieves only jobs which have no parent
          in: query
          name: parentJobId
          schema:
            type: string
        - description: Project ID of the jobs to list
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Restrict information returned to a set of selected fields
          in: query
          name: projection
          schema:
            type: string
            enum:
              - full
              - minimal
        - description: Filter for job state
          in: query
          name: stateFilter
          explode: true
          schema:
            type: array
            items:
              enum:
                - done
                - pending
                - running
              type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/JobList"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - jobs
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Starts a new asynchronous job. Requires the Can View project role.
      operationId: bigquery.jobs.insert
      parameters:
        - description: Project ID of the project that will be billed for the job
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/Job"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Job"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/devstorage.full_control
          Oauth2c:
            - https://www.googleapis.com/auth/devstorage.full_control
        - Oauth2:
            - https://www.googleapis.com/auth/devstorage.read_only
          Oauth2c:
            - https://www.googleapis.com/auth/devstorage.read_only
        - Oauth2:
            - https://www.googleapis.com/auth/devstorage.read_write
          Oauth2c:
            - https://www.googleapis.com/auth/devstorage.read_write
      tags:
        - jobs
  "/projects/{projectId}/jobs/{jobId}":
    get:
      description: Returns information about a specific job. Job information is available
        for a six month period after creation. Requires that you're the person
        who ran the job, or have the Is Owner project role.
      operationId: bigquery.jobs.get
      parameters:
        - description: "[Required] Job ID of the requested job"
          in: path
          name: jobId
          required: true
          schema:
            type: string
        - description: The geographic location of the job. Required except for US and EU.
            See details at
            https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
          in: query
          name: location
          schema:
            type: string
        - description: "[Required] Project ID of the requested job"
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Job"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - jobs
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
  "/projects/{projectId}/jobs/{jobId}/cancel":
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Requests that a job be cancelled. This call will return immediately, and
        the client will need to poll for the job status to see if the cancel
        completed successfully. Cancelled jobs may still incur costs.
      operationId: bigquery.jobs.cancel
      parameters:
        - description: "[Required] Job ID of the job to cancel"
          in: path
          name: jobId
          required: true
          schema:
            type: string
        - description: The geographic location of the job. Required except for US and EU.
            See details at
            https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
          in: query
          name: location
          schema:
            type: string
        - description: "[Required] Project ID of the job to cancel"
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/JobCancelResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - jobs
  "/projects/{projectId}/queries":
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Runs a BigQuery SQL query synchronously and returns query results if the
        query completes within a specified timeout.
      operationId: bigquery.jobs.query
      parameters:
        - description: Project ID of the project billed for the query
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/QueryResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - jobs
  "/projects/{projectId}/queries/{jobId}":
    get:
      description: Retrieves the results of a query job.
      operationId: bigquery.jobs.getQueryResults
      parameters:
        - description: "[Required] Job ID of the query job"
          in: path
          name: jobId
          required: true
          schema:
            type: string
        - description: The geographic location where the job should run. Required except
            for US and EU. See details at
            https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
          in: query
          name: location
          schema:
            type: string
        - description: Maximum number of results to read
          in: query
          name: maxResults
          schema:
            type: integer
        - description: Page token, returned by a previous call, to request the next page of
            results
          in: query
          name: pageToken
          schema:
            type: string
        - description: "[Required] Project ID of the query job"
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: Zero-based index of the starting row
          in: query
          name: startIndex
          schema:
            type: string
        - description: How long to wait for the query to complete, in milliseconds, before
            returning. Default is 10 seconds. If the timeout passes before the
            job completes, the 'jobComplete' field in the response will be false
          in: query
          name: timeoutMs
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GetQueryResultsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - jobs
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
  "/projects/{projectId}/serviceAccount":
    get:
      description: Returns the email address of the service account for your project used
        for interactions with Google Cloud KMS.
      operationId: bigquery.projects.getServiceAccount
      parameters:
        - description: Project ID for which the service account is requested.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GetServiceAccountResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
servers:
  - url: https://bigquery.googleapis.com/bigquery/v2
components:
  parameters:
    alt:
      description: Data format for the response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
        default: json
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: An opaque string that represents a user for quota purposes. Must not
        exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    userIp:
      description: Deprecated. Please use quotaUser instead.
      in: query
      name: userIp
      schema:
        type: string
  requestBodies:
    Table:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Table"
    Routine:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Routine"
    Dataset:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Dataset"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/bigquery: View and manage your data in Google BigQuery
            https://www.googleapis.com/auth/bigquery.insertdata: Insert data into Google BigQuery
            https://www.googleapis.com/auth/bigquery.readonly: View your data in Google BigQuery
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
            https://www.googleapis.com/auth/cloud-platform.read-only: View your data across Google Cloud Platform services
            https://www.googleapis.com/auth/devstorage.full_control: Manage your data and permissions in Google Cloud Storage
            https://www.googleapis.com/auth/devstorage.read_only: View your data in Google Cloud Storage
            https://www.googleapis.com/auth/devstorage.read_write: Manage your data in Google Cloud Storage
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/bigquery: View and manage your data in Google BigQuery
            https://www.googleapis.com/auth/bigquery.insertdata: Insert data into Google BigQuery
            https://www.googleapis.com/auth/bigquery.readonly: View your data in Google BigQuery
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
            https://www.googleapis.com/auth/cloud-platform.read-only: View your data across Google Cloud Platform services
            https://www.googleapis.com/auth/devstorage.full_control: Manage your data and permissions in Google Cloud Storage
            https://www.googleapis.com/auth/devstorage.read_only: View your data in Google Cloud Storage
            https://www.googleapis.com/auth/devstorage.read_write: Manage your data in Google Cloud Storage
  schemas:
    AggregateClassificationMetrics:
      description: |-
        Aggregate metrics for classification/classifier models. For multi-class
        models, the metrics are either macro-averaged or micro-averaged. When
        macro-averaged, the metrics are calculated for each label and then an
        unweighted average is taken of those values. When micro-averaged, the
        metric is calculated globally by counting the total number of correctly
        predicted rows.
      properties:
        accuracy:
          description: |-
            Accuracy is the fraction of predictions given the correct label. For
            multiclass this is a micro-averaged metric.
          format: double
          type: number
        f1Score:
          description: |-
            The F1 score is an average of recall and precision. For multiclass
            this is a macro-averaged metric.
          format: double
          type: number
        logLoss:
          description: Logarithmic Loss. For multiclass this is a macro-averaged metric.
          format: double
          type: number
        precision:
          description: |-
            Precision is the fraction of actual positive predictions that had
            positive actual labels. For multiclass this is a macro-averaged
            metric treating each class as a binary classifier.
          format: double
          type: number
        recall:
          description: |-
            Recall is the fraction of actual positive labels that were given a
            positive prediction. For multiclass this is a macro-averaged metric.
          format: double
          type: number
        rocAuc:
          description: |-
            Area Under a ROC Curve. For multiclass this is a macro-averaged
            metric.
          format: double
          type: number
        threshold:
          description: |-
            Threshold at which the metrics are computed. For binary
            classification models this is the positive class threshold.
            For multi-class classfication models this is the confidence
            threshold.
          format: double
          type: number
      type: object
    Argument:
      description: Input/output argument of a function or a stored procedure.
      properties:
        argumentKind:
          description: Optional. Defaults to FIXED_TYPE.
          enum:
            - ARGUMENT_KIND_UNSPECIFIED
            - FIXED_TYPE
            - ANY_TYPE
          type: string
        dataType:
          $ref: "#/components/schemas/StandardSqlDataType"
        mode:
          description: |-
            Optional. Specifies whether the argument is input or output.
            Can be set for procedures only.
          enum:
            - MODE_UNSPECIFIED
            - IN
            - OUT
            - INOUT
          type: string
        name:
          description: Optional. The name of this argument. Can be absent for function
            return argument.
          type: string
      type: object
    ArimaCoefficients:
      description: Arima coefficients.
      properties:
        autoRegressiveCoefficients:
          description: Auto-regressive coefficients, an array of double.
          items:
            format: double
            type: number
          type: array
        interceptCoefficient:
          description: Intercept coefficient, just a double not an array.
          format: double
          type: number
        movingAverageCoefficients:
          description: Moving-average coefficients, an array of double.
          items:
            format: double
            type: number
          type: array
      type: object
    ArimaFittingMetrics:
      description: ARIMA model fitting metrics.
      properties:
        aic:
          description: AIC
          format: double
          type: number
        logLikelihood:
          description: log-likelihood
          format: double
          type: number
        variance:
          description: variance.
          format: double
          type: number
      type: object
    ArimaModelInfo:
      description: Arima model information.
      properties:
        arimaCoefficients:
          $ref: "#/components/schemas/ArimaCoefficients"
        arimaFittingMetrics:
          $ref: "#/components/schemas/ArimaFittingMetrics"
        nonSeasonalOrder:
          $ref: "#/components/schemas/ArimaOrder"
      type: object
    ArimaOrder:
      description: Arima order, can be used for both non-seasonal and seasonal parts.
      properties:
        d:
          description: Order of the differencing part.
          format: int64
          type: string
        p:
          description: Order of the autoregressive part.
          format: int64
          type: string
        q:
          description: Order of the moving-average part.
          format: int64
          type: string
      type: object
    ArimaResult:
      description: |-
        (Auto-)arima fitting result. Wrap everything in ArimaResult for easier
        refactoring if we want to use model-specific iteration results.
      properties:
        arimaModelInfo:
          description: |-
            This message is repeated because there are multiple arima models
            fitted in auto-arima. For non-auto-arima model, its size is one.
          items:
            $ref: "#/components/schemas/ArimaModelInfo"
          type: array
        seasonalPeriods:
          description: >-
            Seasonal periods. Repeated because multiple periods are supported
            for

            one time series.
          items:
            enum:
              - SEASONAL_PERIOD_TYPE_UNSPECIFIED
              - NO_SEASONALITY
              - DAILY
              - WEEKLY
              - MONTHLY
              - QUARTERLY
              - YEARLY
            type: string
          type: array
      type: object
    BigQueryModelTraining:
      properties:
        currentIteration:
          description: "[Output-only, Beta] Index of current ML training iteration. Updated
            during create model query job to show job progress."
          format: int32
          type: integer
        expectedTotalIterations:
          description: "[Output-only, Beta] Expected number of iterations for the create
            model query job specified as num_iterations in the input query. The
            actual total number of iterations may be less than this number due
            to early stop."
          format: int64
          type: string
      type: object
    BigtableColumn:
      properties:
        encoding:
          description: "[Optional] The encoding of the values when the type is not STRING.
            Acceptable encoding values are: TEXT - indicates values are
            alphanumeric text strings. BINARY - indicates values are encoded
            using HBase Bytes.toBytes family of functions. 'encoding' can also
            be set at the column family level. However, the setting at this
            level takes precedence if 'encoding' is set at both levels."
          type: string
        fieldName:
          description: "[Optional] If the qualifier is not a valid BigQuery field
            identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid
            identifier must be provided as the column field name and is used as
            field name in queries."
          type: string
        onlyReadLatest:
          description: "[Optional] If this is set, only the latest version of value in this
            column are exposed. 'onlyReadLatest' can also be set at the column
            family level. However, the setting at this level takes precedence if
            'onlyReadLatest' is set at both levels."
          type: boolean
        qualifierEncoded:
          description: "[Required] Qualifier of the column. Columns in the parent column
            family that has this exact qualifier are exposed as . field. If the
            qualifier is valid UTF-8 string, it can be specified in the
            qualifier_string field. Otherwise, a base-64 encoded value must be
            set to qualifier_encoded. The column field name is the same as the
            column qualifier. However, if the qualifier is not a valid BigQuery
            field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid
            identifier must be provided as field_name."
          format: byte
          type: string
        qualifierString:
          type: string
        type:
          description: "[Optional] The type to convert the value in cells of this column.
            The values are expected to be encoded using HBase Bytes.toBytes
            function when using the BINARY encoding value. Following BigQuery
            types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT
            BOOLEAN Default type is BYTES. 'type' can also be set at the column
            family level. However, the setting at this level takes precedence if
            'type' is set at both levels."
          type: string
      type: object
    BigtableColumnFamily:
      properties:
        columns:
          description: "[Optional] Lists of columns that should be exposed as individual
            fields as opposed to a list of (column name, value) pairs. All
            columns whose qualifier matches a qualifier in this list can be
            accessed as .. Other columns can be accessed as a list through
            .Column field."
          items:
            $ref: "#/components/schemas/BigtableColumn"
          type: array
        encoding:
          description: "[Optional] The encoding of the values when the type is not STRING.
            Acceptable encoding values are: TEXT - indicates values are
            alphanumeric text strings. BINARY - indicates values are encoded
            using HBase Bytes.toBytes family of functions. This can be
            overridden for a specific column by listing that column in 'columns'
            and specifying an encoding for it."
          type: string
        familyId:
          description: Identifier of the column family.
          type: string
        onlyReadLatest:
          description: "[Optional] If this is set only the latest version of value are
            exposed for all columns in this column family. This can be
            overridden for a specific column by listing that column in 'columns'
            and specifying a different setting for that column."
          type: boolean
        type:
          description: "[Optional] The type to convert the value in cells of this column
            family. The values are expected to be encoded using HBase
            Bytes.toBytes function when using the BINARY encoding value.
            Following BigQuery types are allowed (case-sensitive) - BYTES STRING
            INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden
            for a specific column by listing that column in 'columns' and
            specifying a type for it."
          type: string
      type: object
    BigtableOptions:
      properties:
        columnFamilies:
          description: "[Optional] List of column families to expose in the table schema
            along with their types. This list restricts the column families that
            can be referenced in queries and specifies their value types. You
            can use this list to do type conversions - see the 'type' field for
            more details. If you leave this list empty, all column families are
            present in the table schema and their values are read as BYTES.
            During a query only the column families referenced in that query are
            read from Bigtable."
          items:
            $ref: "#/components/schemas/BigtableColumnFamily"
          type: array
        ignoreUnspecifiedColumnFamilies:
          description: "[Optional] If field is true, then the column families that are not
            specified in columnFamilies list are not exposed in the table
            schema. Otherwise, they are read with BYTES type values. The default
            value is false."
          type: boolean
        readRowkeyAsString:
          description: "[Optional] If field is true, then the rowkey column families will
            be read and converted to string. Otherwise they are read with BYTES
            type values and users need to manually cast them with CAST if
            necessary. The default value is false."
          type: boolean
      type: object
    BinaryClassificationMetrics:
      description: Evaluation metrics for binary classification/classifier models.
      properties:
        aggregateClassificationMetrics:
          $ref: "#/components/schemas/AggregateClassificationMetrics"
        binaryConfusionMatrixList:
          description: Binary confusion matrix at multiple thresholds.
          items:
            $ref: "#/components/schemas/BinaryConfusionMatrix"
          type: array
        negativeLabel:
          description: Label representing the negative class.
          type: string
        positiveLabel:
          description: Label representing the positive class.
          type: string
      type: object
    BinaryConfusionMatrix:
      description: Confusion matrix for binary classification models.
      properties:
        accuracy:
          description: The fraction of predictions given the correct label.
          format: double
          type: number
        f1Score:
          description: The equally weighted average of recall and precision.
          format: double
          type: number
        falseNegatives:
          description: Number of false samples predicted as false.
          format: int64
          type: string
        falsePositives:
          description: Number of false samples predicted as true.
          format: int64
          type: string
        positiveClassThreshold:
          description: Threshold value used when computing each of the following metric.
          format: double
          type: number
        precision:
          description: |-
            The fraction of actual positive predictions that had positive actual
            labels.
          format: double
          type: number
        recall:
          description: |-
            The fraction of actual positive labels that were given a positive
            prediction.
          format: double
          type: number
        trueNegatives:
          description: Number of true samples predicted as false.
          format: int64
          type: string
        truePositives:
          description: Number of true samples predicted as true.
          format: int64
          type: string
      type: object
    BqmlIterationResult:
      properties:
        durationMs:
          description: "[Output-only, Beta] Time taken to run the training iteration in
            milliseconds."
          format: int64
          type: string
        evalLoss:
          description: "[Output-only, Beta] Eval loss computed on the eval data at the end
            of the iteration. The eval loss is used for early stopping to avoid
            overfitting. No eval loss if eval_split_method option is specified
            as no_split or auto_split with input data size less than 500 rows."
          format: double
          type: number
        index:
          description: "[Output-only, Beta] Index of the ML training iteration, starting
            from zero for each training run."
          format: int32
          type: integer
        learnRate:
          description: "[Output-only, Beta] Learning rate used for this iteration, it
            varies for different training iterations if learn_rate_strategy
            option is not constant."
          format: double
          type: number
        trainingLoss:
          description: "[Output-only, Beta] Training loss computed on the training data at
            the end of the iteration. The training loss function is defined by
            model type."
          format: double
          type: number
      type: object
    BqmlTrainingRun:
      properties:
        iterationResults:
          description: "[Output-only, Beta] List of each iteration results."
          items:
            $ref: "#/components/schemas/BqmlIterationResult"
          type: array
        startTime:
          description: "[Output-only, Beta] Training run start time in milliseconds since
            the epoch."
          format: date-time
          type: string
        state:
          description: "[Output-only, Beta] Different state applicable for a training run.
            IN PROGRESS: Training run is in progress. FAILED: Training run ended
            due to a non-retryable failure. SUCCEEDED: Training run successfully
            completed. CANCELLED: Training run cancelled by the user."
          type: string
        trainingOptions:
          description: "[Output-only, Beta] Training options used by this training run.
            These options are mutable for subsequent training runs. Default
            values are explicitly stored for options not specified in the input
            query of the first training run. For subsequent training runs, any
            option not explicitly specified in the input query will be copied
            from the previous training run."
          properties:
            earlyStop:
              type: boolean
            l1Reg:
              format: double
              type: number
            l2Reg:
              format: double
              type: number
            learnRate:
              format: double
              type: number
            learnRateStrategy:
              type: string
            lineSearchInitLearnRate:
              format: double
              type: number
            maxIteration:
              format: int64
              type: string
            minRelProgress:
              format: double
              type: number
            warmStart:
              type: boolean
          type: object
      type: object
    CategoricalValue:
      description: Representative value of a categorical feature.
      properties:
        categoryCounts:
          description: |-
            Counts of all categories for the categorical feature. If there are
            more than ten categories, we return top ten (by count) and return
            one more CategoryCount with category "_OTHER_" and count as
            aggregate counts of remaining categories.
          items:
            $ref: "#/components/schemas/CategoryCount"
          type: array
      type: object
    CategoryCount:
      description: Represents the count of a single category within the cluster.
      properties:
        category:
          description: The name of category.
          type: string
        count:
          description: |-
            The count of training samples matching the category within the
            cluster.
          format: int64
          type: string
      type: object
    Cluster:
      description: Message containing the information about one cluster.
      properties:
        centroidId:
          description: Centroid id.
          format: int64
          type: string
        count:
          description: Count of training data rows that were assigned to this cluster.
          format: int64
          type: string
        featureValues:
          description: Values of highly variant features for this cluster.
          items:
            $ref: "#/components/schemas/FeatureValue"
          type: array
      type: object
    ClusterInfo:
      description: Information about a single cluster for clustering model.
      properties:
        centroidId:
          description: Centroid id.
          format: int64
          type: string
        clusterRadius:
          description: |-
            Cluster radius, the average distance from centroid
            to each point assigned to the cluster.
          format: double
          type: number
        clusterSize:
          description: Cluster size, the total number of points assigned to the cluster.
          format: int64
          type: string
      type: object
    Clustering:
      properties:
        fields:
          description: "[Repeated] One or more fields on which data should be clustered.
            Only top-level, non-repeated, simple-type fields are supported. When
            you cluster a table using multiple columns, the order of columns you
            specify is important. The order of the specified columns determines
            the sort order of the data."
          items:
            type: string
          type: array
      type: object
    ClusteringMetrics:
      description: Evaluation metrics for clustering models.
      properties:
        clusters:
          description: "[Beta] Information for all clusters."
          items:
            $ref: "#/components/schemas/Cluster"
          type: array
        daviesBouldinIndex:
          description: Davies-Bouldin index.
          format: double
          type: number
        meanSquaredDistance:
          description: Mean of squared distances between each sample to its cluster
            centroid.
          format: double
          type: number
      type: object
    ConfusionMatrix:
      description: Confusion matrix for multi-class classification models.
      properties:
        confidenceThreshold:
          description: |-
            Confidence threshold used when computing the entries of the
            confusion matrix.
          format: double
          type: number
        rows:
          description: One row per actual label.
          items:
            $ref: "#/components/schemas/Row"
          type: array
      type: object
    CsvOptions:
      properties:
        allowJaggedRows:
          description: "[Optional] Indicates if BigQuery should accept rows that are
            missing trailing optional columns. If true, BigQuery treats missing
            trailing columns as null values. If false, records with missing
            trailing columns are treated as bad records, and if there are too
            many bad records, an invalid error is returned in the job result.
            The default value is false."
          type: boolean
        allowQuotedNewlines:
          description: "[Optional] Indicates if BigQuery should allow quoted data sections
            that contain newline characters in a CSV file. The default value is
            false."
          type: boolean
        encoding:
          description: "[Optional] The character encoding of the data. The supported values
            are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery
            decodes the data after the raw, binary data has been split using the
            values of the quote and fieldDelimiter properties."
          type: string
        fieldDelimiter:
          description: "[Optional] The separator for fields in a CSV file. BigQuery
            converts the string to ISO-8859-1 encoding, and then uses the first
            byte of the encoded string to split the data in its raw, binary
            state. BigQuery also supports the escape sequence \"\\t\" to specify
            a tab separator. The default value is a comma (',')."
          type: string
        quote:
          default: '"'
          description: "[Optional] The value that is used to quote data sections in a CSV
            file. BigQuery converts the string to ISO-8859-1 encoding, and then
            uses the first byte of the encoded string to split the data in its
            raw, binary state. The default value is a double-quote ('\"'). If
            your data does not contain quoted sections, set the property value
            to an empty string. If your data contains quoted newline characters,
            you must also set the allowQuotedNewlines property to true."
          pattern: .?
          type: string
        skipLeadingRows:
          description: "[Optional] The number of rows at the top of a CSV file that
            BigQuery will skip when reading the data. The default value is 0.
            This property is useful if you have header rows in the file that
            should be skipped."
          format: int64
          type: string
      type: object
    Dataset:
      properties:
        access:
          description: "[Optional] An array of objects that define dataset access for one
            or more entities. You can set this property when inserting or
            updating a dataset in order to control who is allowed to access the
            data. If unspecified at dataset creation time, BigQuery adds default
            dataset access for the following entities: access.specialGroup:
            projectReaders; access.role: READER; access.specialGroup:
            projectWriters; access.role: WRITER; access.specialGroup:
            projectOwners; access.role: OWNER; access.userByEmail: [dataset
            creator email]; access.role: OWNER;"
          items:
            properties:
              domain:
                description: '[Pick one] A domain to grant access to. Any users signed in
                  with the domain specified will be granted the specified
                  access. Example: "example.com". Maps to IAM policy member
                  "domain:DOMAIN".'
                type: string
              groupByEmail:
                description: '[Pick one] An email address of a Google Group to grant access
                  to. Maps to IAM policy member "group:GROUP".'
                type: string
              iamMember:
                description: "[Pick one] Some other type of member that appears in the IAM
                  Policy but isn't a user, group, domain, or special group."
                type: string
              role:
                description: '[Required] An IAM role ID that should be granted to the user,
                  group, or domain specified in this access entry. The following
                  legacy mappings will be applied:
                  OWNER  roles/bigquery.dataOwner
                  WRITER  roles/bigquery.dataEditor
                  READER  roles/bigquery.dataViewer This field will accept any
                  of the above formats, but will return only the legacy format.
                  For example, if you set this field to
                  "roles/bigquery.dataOwner", it will be returned back as
                  "OWNER".'
                type: string
              specialGroup:
                description: "[Pick one] A special group to grant access to. Possible
                  values include: projectOwners: Owners of the enclosing
                  project. projectReaders: Readers of the enclosing project.
                  projectWriters: Writers of the enclosing project.
                  allAuthenticatedUsers: All authenticated BigQuery users. Maps
                  to similarly-named IAM members."
                type: string
              userByEmail:
                description: '[Pick one] An email address of a user to grant access to. For
                  example: fred@example.com. Maps to IAM policy member
                  "user:EMAIL" or "serviceAccount:EMAIL".'
                type: string
              view:
                $ref: "#/components/schemas/TableReference"
            type: object
          type: array
        creationTime:
          description: "[Output-only] The time when this dataset was created, in
            milliseconds since the epoch."
          format: int64
          type: string
        datasetReference:
          $ref: "#/components/schemas/DatasetReference"
        defaultEncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        defaultPartitionExpirationMs:
          description: "[Optional] The default partition expiration for all partitioned
            tables in the dataset, in milliseconds. Once this property is set,
            all newly-created partitioned tables in the dataset will have an
            expirationMs property in the timePartitioning settings set to this
            value, and changing the value will only affect new tables, not
            existing ones. The storage in a partition will have an expiration
            time of its partition time plus this value. Setting this property
            overrides the use of defaultTableExpirationMs for partitioned
            tables: only one of defaultTableExpirationMs and
            defaultPartitionExpirationMs will be used for any new partitioned
            table. If you provide an explicit timePartitioning.expirationMs when
            creating or updating a partitioned table, that value takes
            precedence over the default partition expiration time indicated by
            this property."
          format: int64
          type: string
        defaultTableExpirationMs:
          description: "[Optional] The default lifetime of all tables in the dataset, in
            milliseconds. The minimum value is 3600000 milliseconds (one hour).
            Once this property is set, all newly-created tables in the dataset
            will have an expirationTime property set to the creation time plus
            the value in this property, and changing the value will only affect
            new tables, not existing ones. When the expirationTime for a given
            table is reached, that table will be deleted automatically. If a
            table's expirationTime is modified or removed before the table
            expires, or if you provide an explicit expirationTime when creating
            a table, that value takes precedence over the default expiration
            time indicated by this property."
          format: int64
          type: string
        description:
          description: "[Optional] A user-friendly description of the dataset."
          type: string
        etag:
          description: "[Output-only] A hash of the resource."
          type: string
        friendlyName:
          description: "[Optional] A descriptive name for the dataset."
          type: string
        id:
          description: "[Output-only] The fully-qualified unique name of the dataset in the
            format projectId:datasetId. The dataset name without the project
            name is given in the datasetId field. When creating a new dataset,
            leave this field blank, and instead specify the datasetId field."
          type: string
        kind:
          default: bigquery#dataset
          description: "[Output-only] The resource type."
          type: string
        labels:
          additionalProperties:
            type: string
          description: The labels associated with this dataset. You can use these to
            organize and group your datasets. You can set this property when
            inserting or updating a dataset. See Creating and Updating Dataset
            Labels for more information.
          type: object
        lastModifiedTime:
          description: "[Output-only] The date when this dataset or any of its tables was
            last modified, in milliseconds since the epoch."
          format: int64
          type: string
        location:
          description: The geographic location where the dataset should reside. The default
            value is US. See details at
            https://cloud.google.com/bigquery/docs/locations.
          type: string
        selfLink:
          description: "[Output-only] A URL that can be used to access the resource again.
            You can use this URL in Get or Update requests to the resource."
          type: string
      type: object
    DatasetList:
      properties:
        datasets:
          description: "An array of the dataset resources in the project. Each resource
            contains basic information. For full information about a particular
            dataset resource, use the Datasets: get method. This property is
            omitted when there are no datasets in the project."
          items:
            properties:
              datasetReference:
                $ref: "#/components/schemas/DatasetReference"
              friendlyName:
                description: A descriptive name for the dataset, if one exists.
                type: string
              id:
                description: The fully-qualified, unique, opaque ID of the dataset.
                type: string
              kind:
                default: bigquery#dataset
                description: The resource type. This property always returns the value
                  "bigquery#dataset".
                type: string
              labels:
                additionalProperties:
                  type: string
                description: The labels associated with this dataset. You can use these to
                  organize and group your datasets.
                type: object
              location:
                description: The geographic location where the data resides.
                type: string
            type: object
          type: array
        etag:
          description: A hash value of the results page. You can use this property to
            determine if the page has changed since the last request.
          type: string
        kind:
          default: bigquery#datasetList
          description: The list type. This property always returns the value
            "bigquery#datasetList".
          type: string
        nextPageToken:
          description: A token that can be used to request the next results page. This
            property is omitted on the final results page.
          type: string
      type: object
    DatasetReference:
      properties:
        datasetId:
          description: "[Required] A unique ID for this dataset, without the project name.
            The ID must contain only letters (a-z, A-Z), numbers (0-9), or
            underscores (_). The maximum length is 1,024 characters."
          type: string
        projectId:
          description: "[Optional] The ID of the project containing this dataset."
          type: string
      type: object
    DestinationTableProperties:
      properties:
        description:
          description: "[Optional] The description for the destination table. This will
            only be used if the destination table is newly created. If the table
            already exists and a value different than the current description is
            provided, the job will fail."
          type: string
        friendlyName:
          description: "[Optional] The friendly name for the destination table. This will
            only be used if the destination table is newly created. If the table
            already exists and a value different than the current friendly name
            is provided, the job will fail."
          type: string
        labels:
          additionalProperties:
            type: string
          description: "[Optional] The labels associated with this table. You can use these
            to organize and group your tables. This will only be used if the
            destination table is newly created. If the table already exists and
            labels are different than the current labels are provided, the job
            will fail."
          type: object
      type: object
    EncryptionConfiguration:
      properties:
        kmsKeyName:
          description: "[Optional] Describes the Cloud KMS encryption key that will be used
            to protect destination BigQuery table. The BigQuery Service Account
            associated with your project requires access to this encryption
            key."
          type: string
      type: object
    Entry:
      description: A single entry in the confusion matrix.
      properties:
        itemCount:
          description: Number of items being predicted as this label.
          format: int64
          type: string
        predictedLabel:
          description: |-
            The predicted label. For confidence_threshold > 0, we will
            also add an entry indicating the number of items under the
            confidence threshold.
          type: string
      type: object
    ErrorProto:
      properties:
        debugInfo:
          description: Debugging information. This property is internal to Google and
            should not be used.
          type: string
        location:
          description: Specifies where the error occurred, if present.
          type: string
        message:
          description: A human-readable description of the error.
          type: string
        reason:
          description: A short error code that summarizes the error.
          type: string
      type: object
    EvaluationMetrics:
      description: |-
        Evaluation metrics of a model. These are either computed on all training
        data or just the eval data based on whether eval data was used during
        training. These are not present for imported models.
      properties:
        binaryClassificationMetrics:
          $ref: "#/components/schemas/BinaryClassificationMetrics"
        clusteringMetrics:
          $ref: "#/components/schemas/ClusteringMetrics"
        multiClassClassificationMetrics:
          $ref: "#/components/schemas/MultiClassClassificationMetrics"
        regressionMetrics:
          $ref: "#/components/schemas/RegressionMetrics"
      type: object
    ExplainQueryStage:
      properties:
        completedParallelInputs:
          description: Number of parallel input segments completed.
          format: int64
          type: string
        computeMsAvg:
          description: Milliseconds the average shard spent on CPU-bound tasks.
          format: int64
          type: string
        computeMsMax:
          description: Milliseconds the slowest shard spent on CPU-bound tasks.
          format: int64
          type: string
        computeRatioAvg:
          description: Relative amount of time the average shard spent on CPU-bound tasks.
          format: double
          type: number
        computeRatioMax:
          description: Relative amount of time the slowest shard spent on CPU-bound tasks.
          format: double
          type: number
        endMs:
          description: Stage end time represented as milliseconds since epoch.
          format: int64
          type: string
        id:
          description: Unique ID for stage within plan.
          format: int64
          type: string
        inputStages:
          description: IDs for stages that are inputs to this stage.
          items:
            format: int64
            type: string
          type: array
        name:
          description: Human-readable name for stage.
          type: string
        parallelInputs:
          description: Number of parallel input segments to be processed.
          format: int64
          type: string
        readMsAvg:
          description: Milliseconds the average shard spent reading input.
          format: int64
          type: string
        readMsMax:
          description: Milliseconds the slowest shard spent reading input.
          format: int64
          type: string
        readRatioAvg:
          description: Relative amount of time the average shard spent reading input.
          format: double
          type: number
        readRatioMax:
          description: Relative amount of time the slowest shard spent reading input.
          format: double
          type: number
        recordsRead:
          description: Number of records read into the stage.
          format: int64
          type: string
        recordsWritten:
          description: Number of records written by the stage.
          format: int64
          type: string
        shuffleOutputBytes:
          description: Total number of bytes written to shuffle.
          format: int64
          type: string
        shuffleOutputBytesSpilled:
          description: Total number of bytes written to shuffle and spilled to disk.
          format: int64
          type: string
        startMs:
          description: Stage start time represented as milliseconds since epoch.
          format: int64
          type: string
        status:
          description: Current status for the stage.
          type: string
        steps:
          description: List of operations within the stage in dependency order
            (approximately chronological).
          items:
            $ref: "#/components/schemas/ExplainQueryStep"
          type: array
        waitMsAvg:
          description: Milliseconds the average shard spent waiting to be scheduled.
          format: int64
          type: string
        waitMsMax:
          description: Milliseconds the slowest shard spent waiting to be scheduled.
          format: int64
          type: string
        waitRatioAvg:
          description: Relative amount of time the average shard spent waiting to be
            scheduled.
          format: double
          type: number
        waitRatioMax:
          description: Relative amount of time the slowest shard spent waiting to be
            scheduled.
          format: double
          type: number
        writeMsAvg:
          description: Milliseconds the average shard spent on writing output.
          format: int64
          type: string
        writeMsMax:
          description: Milliseconds the slowest shard spent on writing output.
          format: int64
          type: string
        writeRatioAvg:
          description: Relative amount of time the average shard spent on writing output.
          format: double
          type: number
        writeRatioMax:
          description: Relative amount of time the slowest shard spent on writing output.
          format: double
          type: number
      type: object
    ExplainQueryStep:
      properties:
        kind:
          description: Machine-readable operation type.
          type: string
        substeps:
          description: Human-readable stage descriptions.
          items:
            type: string
          type: array
      type: object
    ExternalDataConfiguration:
      properties:
        autodetect:
          description: Try to detect schema and format options automatically. Any option
            specified explicitly will be honored.
          type: boolean
        bigtableOptions:
          $ref: "#/components/schemas/BigtableOptions"
        compression:
          description: "[Optional] The compression type of the data source. Possible values
            include GZIP and NONE. The default value is NONE. This setting is
            ignored for Google Cloud Bigtable, Google Cloud Datastore backups
            and Avro formats."
          type: string
        csvOptions:
          $ref: "#/components/schemas/CsvOptions"
        googleSheetsOptions:
          $ref: "#/components/schemas/GoogleSheetsOptions"
        hivePartitioningMode:
          description: "[Optional, Trusted Tester] If hive partitioning is enabled, which
            mode to use. Two modes are supported: - AUTO: automatically infer
            partition key name(s) and type(s). - STRINGS: automatic infer
            partition key name(s). All types are strings. Not all storage
            formats support hive partitioning -- requesting hive partitioning on
            an unsupported format will lead to an error. Note: this setting is
            in the process of being deprecated in favor of
            hivePartitioningOptions."
          type: string
        hivePartitioningOptions:
          $ref: "#/components/schemas/HivePartitioningOptions"
        ignoreUnknownValues:
          description: "[Optional] Indicates if BigQuery should allow extra values that are
            not represented in the table schema. If true, the extra values are
            ignored. If false, records with extra columns are treated as bad
            records, and if there are too many bad records, an invalid error is
            returned in the job result. The default value is false. The
            sourceFormat property determines what BigQuery treats as an extra
            value: CSV: Trailing columns JSON: Named values that don't match any
            column names Google Cloud Bigtable: This setting is ignored. Google
            Cloud Datastore backups: This setting is ignored. Avro: This setting
            is ignored."
          type: boolean
        maxBadRecords:
          description: "[Optional] The maximum number of bad records that BigQuery can
            ignore when reading data. If the number of bad records exceeds this
            value, an invalid error is returned in the job result. This is only
            valid for CSV, JSON, and Google Sheets. The default value is 0,
            which requires that all records are valid. This setting is ignored
            for Google Cloud Bigtable, Google Cloud Datastore backups and Avro
            formats."
          format: int32
          type: integer
        schema:
          $ref: "#/components/schemas/TableSchema"
        sourceFormat:
          description: '[Required] The data format. For CSV files, specify "CSV". For
            Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON,
            specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO".
            For Google Cloud Datastore backups, specify "DATASTORE_BACKUP".
            [Beta] For Google Cloud Bigtable, specify "BIGTABLE".'
          type: string
        sourceUris:
          description: "[Required] The fully-qualified URIs that point to your data in
            Google Cloud. For Google Cloud Storage URIs: Each URI can contain
            one '*' wildcard character and it must come after the 'bucket' name.
            Size limits related to load jobs apply to external data sources. For
            Google Cloud Bigtable URIs: Exactly one URI can be specified and it
            has be a fully specified and valid HTTPS URL for a Google Cloud
            Bigtable table. For Google Cloud Datastore backups, exactly one URI
            can be specified. Also, the '*' wildcard character is not allowed."
          items:
            type: string
          type: array
      type: object
    FeatureValue:
      description: Representative value of a single feature within the cluster.
      properties:
        categoricalValue:
          $ref: "#/components/schemas/CategoricalValue"
        featureColumn:
          description: The feature column name.
          type: string
        numericalValue:
          description: |-
            The numerical feature value. This is the centroid value for this
            feature.
          format: double
          type: number
      type: object
    GetQueryResultsResponse:
      properties:
        cacheHit:
          description: Whether the query result was fetched from the query cache.
          type: boolean
        errors:
          description: "[Output-only] The first errors or warnings encountered during the
            running of the job. The final message includes the number of errors
            that caused the process to stop. Errors here do not necessarily mean
            that the job has completed or was unsuccessful."
          items:
            $ref: "#/components/schemas/ErrorProto"
          type: array
        etag:
          description: A hash of this response.
          type: string
        jobComplete:
          description: Whether the query has completed or not. If rows or totalRows are
            present, this will always be true. If this is false, totalRows will
            not be available.
          type: boolean
        jobReference:
          $ref: "#/components/schemas/JobReference"
        kind:
          default: bigquery#getQueryResultsResponse
          description: The resource type of the response.
          type: string
        numDmlAffectedRows:
          description: "[Output-only] The number of rows affected by a DML statement.
            Present only for DML statements INSERT, UPDATE or DELETE."
          format: int64
          type: string
        pageToken:
          description: A token used for paging results.
          type: string
        rows:
          description: An object with as many results as can be contained within the
            maximum permitted reply size. To get any additional rows, you can
            call GetQueryResults and specify the jobReference returned above.
            Present only when the query completes successfully.
          items:
            $ref: "#/components/schemas/TableRow"
          type: array
        schema:
          $ref: "#/components/schemas/TableSchema"
        totalBytesProcessed:
          description: The total number of bytes processed for this query.
          format: int64
          type: string
        totalRows:
          description: The total number of rows in the complete query result set, which can
            be more than the number of rows in this single page of results.
            Present only when the query completes successfully.
          format: uint64
          type: string
      type: object
    GetServiceAccountResponse:
      properties:
        email:
          description: The service account email address.
          type: string
        kind:
          default: bigquery#getServiceAccountResponse
          description: The resource type of the response.
          type: string
      type: object
    GoogleSheetsOptions:
      properties:
        range:
          description: "[Optional] Range of a sheet to query from. Only used when
            non-empty. Typical format:
            sheet_name!top_left_cell_id:bottom_right_cell_id For example:
            sheet1!A1:B20"
          type: string
        skipLeadingRows:
          description: "[Optional] The number of rows at the top of a sheet that BigQuery
            will skip when reading the data. The default value is 0. This
            property is useful if you have header rows that should be skipped.
            When autodetect is on, behavior is the following: * skipLeadingRows
            unspecified - Autodetect tries to detect headers in the first row.
            If they are not detected, the row is read as data. Otherwise data is
            read starting from the second row. * skipLeadingRows is 0 -
            Instructs autodetect that there are no headers and data should be
            read starting from the first row. * skipLeadingRows = N > 0 -
            Autodetect skips N-1 rows and tries to detect headers in row N. If
            headers are not detected, row N is just skipped. Otherwise row N is
            used to extract column names for the detected schema."
          format: int64
          type: string
      type: object
    HivePartitioningOptions:
      properties:
        mode:
          description: "[Optional, Trusted Tester] When set, what mode of hive partitioning
            to use when reading data. Two modes are supported. (1) AUTO:
            automatically infer partition key name(s) and type(s). (2) STRINGS:
            automatically infer partition key name(s). All types are interpreted
            as strings. Not all storage formats support hive partitioning.
            Requesting hive partitioning on an unsupported format will lead to
            an error. Currently supported types include: AVRO, CSV, JSON, ORC
            and Parquet."
          type: string
        sourceUriPrefix:
          description: "[Optional, Trusted Tester] When hive partition detection is
            requested, a common prefix for all source uris should be supplied.
            The prefix must end immediately before the partition key encoding
            begins. For example, consider files following this data layout.
            gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro
            gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro
            When hive partitioning is requested with either AUTO or STRINGS
            detection, the common prefix can be either of
            gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing
            slash does not matter)."
          type: string
      type: object
    IterationResult:
      description: Information about a single iteration of the training run.
      properties:
        arimaResult:
          $ref: "#/components/schemas/ArimaResult"
        clusterInfos:
          description: Information about top clusters for clustering models.
          items:
            $ref: "#/components/schemas/ClusterInfo"
          type: array
        durationMs:
          description: Time taken to run the iteration in milliseconds.
          format: int64
          type: string
        evalLoss:
          description: Loss computed on the eval data at the end of iteration.
          format: double
          type: number
        index:
          description: Index of the iteration, 0 based.
          format: int32
          type: integer
        learnRate:
          description: Learn rate used for this iteration.
          format: double
          type: number
        trainingLoss:
          description: Loss computed on the training data at the end of iteration.
          format: double
          type: number
      type: object
    Job:
      properties:
        configuration:
          $ref: "#/components/schemas/JobConfiguration"
        etag:
          description: "[Output-only] A hash of this resource."
          type: string
        id:
          description: "[Output-only] Opaque ID field of the job"
          type: string
        jobReference:
          $ref: "#/components/schemas/JobReference"
        kind:
          default: bigquery#job
          description: "[Output-only] The type of the resource."
          type: string
        selfLink:
          description: "[Output-only] A URL that can be used to access this resource again."
          type: string
        statistics:
          $ref: "#/components/schemas/JobStatistics"
        status:
          $ref: "#/components/schemas/JobStatus"
        user_email:
          description: "[Output-only] Email address of the user who ran the job."
          type: string
      type: object
    JobCancelResponse:
      properties:
        job:
          $ref: "#/components/schemas/Job"
        kind:
          default: bigquery#jobCancelResponse
          description: The resource type of the response.
          type: string
      type: object
    JobConfiguration:
      properties:
        copy:
          $ref: "#/components/schemas/JobConfigurationTableCopy"
        dryRun:
          description: "[Optional] If set, don't actually run this job. A valid query will
            return a mostly empty response with some processing statistics,
            while an invalid query will return the same error it would if it
            wasn't a dry run. Behavior of non-query jobs is undefined."
          type: boolean
        extract:
          $ref: "#/components/schemas/JobConfigurationExtract"
        jobTimeoutMs:
          description: "[Optional] Job timeout in milliseconds. If this time limit is
            exceeded, BigQuery may attempt to terminate the job."
          format: int64
          type: string
        jobType:
          description: "[Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT,
            COPY or UNKNOWN."
          type: string
        labels:
          additionalProperties:
            type: string
          description: The labels associated with this job. You can use these to organize
            and group your jobs. Label keys and values can be no longer than 63
            characters, can only contain lowercase letters, numeric characters,
            underscores and dashes. International characters are allowed. Label
            values are optional. Label keys must start with a letter and each
            label in the list must have a different key.
          type: object
        load:
          $ref: "#/components/schemas/JobConfigurationLoad"
        query:
          $ref: "#/components/schemas/JobConfigurationQuery"
      type: object
    JobConfigurationExtract:
      properties:
        compression:
          description: "[Optional] The compression type to use for exported files. Possible
            values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is
            NONE. DEFLATE and SNAPPY are only supported for Avro."
          type: string
        destinationFormat:
          description: "[Optional] The exported file format. Possible values include CSV,
            NEWLINE_DELIMITED_JSON and AVRO. The default value is CSV. Tables
            with nested or repeated fields cannot be exported as CSV."
          type: string
        destinationUri:
          description: "[Pick one] DEPRECATED: Use destinationUris instead, passing only
            one URI as necessary. The fully-qualified Google Cloud Storage URI
            where the extracted table should be written."
          type: string
        destinationUris:
          description: "[Pick one] A list of fully-qualified Google Cloud Storage URIs
            where the extracted table should be written."
          items:
            type: string
          type: array
        fieldDelimiter:
          description: "[Optional] Delimiter to use between fields in the exported data.
            Default is ','"
          type: string
        printHeader:
          default: true
          description: "[Optional] Whether to print out a header row in the results.
            Default is true."
          type: boolean
        sourceModel:
          $ref: "#/components/schemas/ModelReference"
        sourceTable:
          $ref: "#/components/schemas/TableReference"
        useAvroLogicalTypes:
          description: '[Optional] If destinationFormat is set to "AVRO", this flag
            indicates whether to enable extracting applicable column types (such
            as TIMESTAMP) to their corresponding AVRO logical types
            (timestamp-micros), instead of only using their raw types
            (avro-long).'
          type: boolean
      type: object
    JobConfigurationLoad:
      properties:
        allowJaggedRows:
          description: "[Optional] Accept rows that are missing trailing optional columns.
            The missing values are treated as nulls. If false, records with
            missing trailing columns are treated as bad records, and if there
            are too many bad records, an invalid error is returned in the job
            result. The default value is false. Only applicable to CSV, ignored
            for other formats."
          type: boolean
        allowQuotedNewlines:
          description: Indicates if BigQuery should allow quoted data sections that contain
            newline characters in a CSV file. The default value is false.
          type: boolean
        autodetect:
          description: "[Optional] Indicates if we should automatically infer the options
            and schema for CSV and JSON sources."
          type: boolean
        clustering:
          $ref: "#/components/schemas/Clustering"
        createDisposition:
          description: "[Optional] Specifies whether the job is allowed to create new
            tables. The following values are supported: CREATE_IF_NEEDED: If the
            table does not exist, BigQuery creates the table. CREATE_NEVER: The
            table must already exist. If it does not, a 'notFound' error is
            returned in the job result. The default value is CREATE_IF_NEEDED.
            Creation, truncation and append actions occur as one atomic update
            upon job completion."
          type: string
        destinationEncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        destinationTable:
          $ref: "#/components/schemas/TableReference"
        destinationTableProperties:
          $ref: "#/components/schemas/DestinationTableProperties"
        encoding:
          description: "[Optional] The character encoding of the data. The supported values
            are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery
            decodes the data after the raw, binary data has been split using the
            values of the quote and fieldDelimiter properties."
          type: string
        fieldDelimiter:
          description: "[Optional] The separator for fields in a CSV file. The separator
            can be any ISO-8859-1 single-byte character. To use a character in
            the range 128-255, you must encode the character as UTF8. BigQuery
            converts the string to ISO-8859-1 encoding, and then uses the first
            byte of the encoded string to split the data in its raw, binary
            state. BigQuery also supports the escape sequence \"\\t\" to specify
            a tab separator. The default value is a comma (',')."
          type: string
        hivePartitioningMode:
          description: "[Optional, Trusted Tester] If hive partitioning is enabled, which
            mode to use. Two modes are supported: - AUTO: automatically infer
            partition key name(s) and type(s). - STRINGS: automatic infer
            partition key name(s). All types are strings. Not all storage
            formats support hive partitioning -- requesting hive partitioning on
            an unsupported format will lead to an error."
          type: string
        hivePartitioningOptions:
          $ref: "#/components/schemas/HivePartitioningOptions"
        ignoreUnknownValues:
          description: "[Optional] Indicates if BigQuery should allow extra values that are
            not represented in the table schema. If true, the extra values are
            ignored. If false, records with extra columns are treated as bad
            records, and if there are too many bad records, an invalid error is
            returned in the job result. The default value is false. The
            sourceFormat property determines what BigQuery treats as an extra
            value: CSV: Trailing columns JSON: Named values that don't match any
            column names"
          type: boolean
        maxBadRecords:
          description: "[Optional] The maximum number of bad records that BigQuery can
            ignore when running the job. If the number of bad records exceeds
            this value, an invalid error is returned in the job result. This is
            only valid for CSV and JSON. The default value is 0, which requires
            that all records are valid."
          format: int32
          type: integer
        nullMarker:
          description: '[Optional] Specifies a string that represents a null value in a CSV
            file. For example, if you specify "\N", BigQuery interprets "\N" as
            a null value when loading a CSV file. The default value is the empty
            string. If you set this property to a custom value, BigQuery throws
            an error if an empty string is present for all data types except for
            STRING and BYTE. For STRING and BYTE columns, BigQuery interprets
            the empty string as an empty value.'
          type: string
        projectionFields:
          description: If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity
            properties to load into BigQuery from a Cloud Datastore backup.
            Property names are case sensitive and must be top-level properties.
            If no properties are specified, BigQuery loads all properties. If
            any named property isn't found in the Cloud Datastore backup, an
            invalid error is returned in the job result.
          items:
            type: string
          type: array
        quote:
          default: '"'
          description: "[Optional] The value that is used to quote data sections in a CSV
            file. BigQuery converts the string to ISO-8859-1 encoding, and then
            uses the first byte of the encoded string to split the data in its
            raw, binary state. The default value is a double-quote ('\"'). If
            your data does not contain quoted sections, set the property value
            to an empty string. If your data contains quoted newline characters,
            you must also set the allowQuotedNewlines property to true."
          pattern: .?
          type: string
        rangePartitioning:
          $ref: "#/components/schemas/RangePartitioning"
        schema:
          $ref: "#/components/schemas/TableSchema"
        schemaInline:
          description: '[Deprecated] The inline schema. For CSV schemas, specify as
            "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING,
            bar:INTEGER, baz:FLOAT".'
          type: string
        schemaInlineFormat:
          description: "[Deprecated] The format of the schemaInline property."
          type: string
        schemaUpdateOptions:
          description: "Allows the schema of the destination table to be updated as a side
            effect of the load job if a schema is autodetected or supplied in
            the job configuration. Schema update options are supported in two
            cases: when writeDisposition is WRITE_APPEND; when writeDisposition
            is WRITE_TRUNCATE and the destination table is a partition of a
            table, specified by partition decorators. For normal tables,
            WRITE_TRUNCATE will always overwrite the schema. One or more of the
            following values are specified: ALLOW_FIELD_ADDITION: allow adding a
            nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing
            a required field in the original schema to nullable."
          items:
            type: string
          type: array
        skipLeadingRows:
          description: "[Optional] The number of rows at the top of a CSV file that
            BigQuery will skip when loading the data. The default value is 0.
            This property is useful if you have header rows in the file that
            should be skipped."
          format: int32
          type: integer
        sourceFormat:
          description: '[Optional] The format of the data files. For CSV files, specify
            "CSV". For datastore backups, specify "DATASTORE_BACKUP". For
            newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro,
            specify "AVRO". For parquet, specify "PARQUET". For orc, specify
            "ORC". The default value is CSV.'
          type: string
        sourceUris:
          description: "[Required] The fully-qualified URIs that point to your data in
            Google Cloud. For Google Cloud Storage URIs: Each URI can contain
            one '*' wildcard character and it must come after the 'bucket' name.
            Size limits related to load jobs apply to external data sources. For
            Google Cloud Bigtable URIs: Exactly one URI can be specified and it
            has be a fully specified and valid HTTPS URL for a Google Cloud
            Bigtable table. For Google Cloud Datastore backups: Exactly one URI
            can be specified. Also, the '*' wildcard character is not allowed."
          items:
            type: string
          type: array
        timePartitioning:
          $ref: "#/components/schemas/TimePartitioning"
        useAvroLogicalTypes:
          description: '[Optional] If sourceFormat is set to "AVRO", indicates whether to
            enable interpreting logical types into their corresponding types
            (ie. TIMESTAMP), instead of only using their raw types (ie.
            INTEGER).'
          type: boolean
        writeDisposition:
          description: "[Optional] Specifies the action that occurs if the destination
            table already exists. The following values are supported:
            WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the
            table data. WRITE_APPEND: If the table already exists, BigQuery
            appends the data to the table. WRITE_EMPTY: If the table already
            exists and contains data, a 'duplicate' error is returned in the job
            result. The default value is WRITE_APPEND. Each action is atomic and
            only occurs if BigQuery is able to complete the job successfully.
            Creation, truncation and append actions occur as one atomic update
            upon job completion."
          type: string
      type: object
    JobConfigurationQuery:
      properties:
        allowLargeResults:
          default: false
          description: "[Optional] If true and query uses legacy SQL dialect, allows the
            query to produce arbitrarily large result tables at a slight cost in
            performance. Requires destinationTable to be set. For standard SQL
            queries, this flag is ignored and large results are always allowed.
            However, you must still set destinationTable when result size
            exceeds the allowed maximum response size."
          type: boolean
        clustering:
          $ref: "#/components/schemas/Clustering"
        createDisposition:
          description: "[Optional] Specifies whether the job is allowed to create new
            tables. The following values are supported: CREATE_IF_NEEDED: If the
            table does not exist, BigQuery creates the table. CREATE_NEVER: The
            table must already exist. If it does not, a 'notFound' error is
            returned in the job result. The default value is CREATE_IF_NEEDED.
            Creation, truncation and append actions occur as one atomic update
            upon job completion."
          type: string
        defaultDataset:
          $ref: "#/components/schemas/DatasetReference"
        destinationEncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        destinationTable:
          $ref: "#/components/schemas/TableReference"
        flattenResults:
          default: true
          description: "[Optional] If true and query uses legacy SQL dialect, flattens all
            nested and repeated fields in the query results. allowLargeResults
            must be true if this is set to false. For standard SQL queries, this
            flag is ignored and results are never flattened."
          type: boolean
        maximumBillingTier:
          default: 1
          description: "[Optional] Limits the billing tier for this job. Queries that have
            resource usage beyond this tier will fail (without incurring a
            charge). If unspecified, this will be set to your project default."
          format: int32
          type: integer
        maximumBytesBilled:
          description: "[Optional] Limits the bytes billed for this job. Queries that will
            have bytes billed beyond this limit will fail (without incurring a
            charge). If unspecified, this will be set to your project default."
          format: int64
          type: string
        parameterMode:
          description: Standard SQL only. Set to POSITIONAL to use positional (?) query
            parameters or to NAMED to use named (@myparam) query parameters in
            this query.
          type: string
        preserveNulls:
          description: "[Deprecated] This property is deprecated."
          type: boolean
        priority:
          description: "[Optional] Specifies a priority for the query. Possible values
            include INTERACTIVE and BATCH. The default value is INTERACTIVE."
          type: string
        query:
          description: "[Required] SQL query text to execute. The useLegacySql field can be
            used to indicate whether the query uses legacy SQL or standard SQL."
          type: string
        queryParameters:
          description: Query parameters for standard SQL queries.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        rangePartitioning:
          $ref: "#/components/schemas/RangePartitioning"
        schemaUpdateOptions:
          description: "Allows the schema of the destination table to be updated as a side
            effect of the query job. Schema update options are supported in two
            cases: when writeDisposition is WRITE_APPEND; when writeDisposition
            is WRITE_TRUNCATE and the destination table is a partition of a
            table, specified by partition decorators. For normal tables,
            WRITE_TRUNCATE will always overwrite the schema. One or more of the
            following values are specified: ALLOW_FIELD_ADDITION: allow adding a
            nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing
            a required field in the original schema to nullable."
          items:
            type: string
          type: array
        tableDefinitions:
          additionalProperties:
            $ref: "#/components/schemas/ExternalDataConfiguration"
          description: "[Optional] If querying an external data source outside of BigQuery,
            describes the data format, location and other properties of the data
            source. By defining these properties, the data source can then be
            queried as if it were a standard BigQuery table."
          type: object
        timePartitioning:
          $ref: "#/components/schemas/TimePartitioning"
        useLegacySql:
          default: true
          description: "Specifies whether to use BigQuery's legacy SQL dialect for this
            query. The default value is true. If set to false, the query will
            use BigQuery's standard SQL:
            https://cloud.google.com/bigquery/sql-reference/ When useLegacySql
            is set to false, the value of flattenResults is ignored; query will
            be run as if flattenResults is false."
          type: boolean
        useQueryCache:
          default: true
          description: "[Optional] Whether to look for the result in the query cache. The
            query cache is a best-effort cache that will be flushed whenever
            tables in the query are modified. Moreover, the query cache is only
            available when a query does not have a destination table specified.
            The default value is true."
          type: boolean
        userDefinedFunctionResources:
          description: Describes user-defined function resources used in the query.
          items:
            $ref: "#/components/schemas/UserDefinedFunctionResource"
          type: array
        writeDisposition:
          description: "[Optional] Specifies the action that occurs if the destination
            table already exists. The following values are supported:
            WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the
            table data and uses the schema from the query result. WRITE_APPEND:
            If the table already exists, BigQuery appends the data to the table.
            WRITE_EMPTY: If the table already exists and contains data, a
            'duplicate' error is returned in the job result. The default value
            is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is
            able to complete the job successfully. Creation, truncation and
            append actions occur as one atomic update upon job completion."
          type: string
      type: object
    JobConfigurationTableCopy:
      properties:
        createDisposition:
          description: "[Optional] Specifies whether the job is allowed to create new
            tables. The following values are supported: CREATE_IF_NEEDED: If the
            table does not exist, BigQuery creates the table. CREATE_NEVER: The
            table must already exist. If it does not, a 'notFound' error is
            returned in the job result. The default value is CREATE_IF_NEEDED.
            Creation, truncation and append actions occur as one atomic update
            upon job completion."
          type: string
        destinationEncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        destinationTable:
          $ref: "#/components/schemas/TableReference"
        sourceTable:
          $ref: "#/components/schemas/TableReference"
        sourceTables:
          description: "[Pick one] Source tables to copy."
          items:
            $ref: "#/components/schemas/TableReference"
          type: array
        writeDisposition:
          description: "[Optional] Specifies the action that occurs if the destination
            table already exists. The following values are supported:
            WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the
            table data. WRITE_APPEND: If the table already exists, BigQuery
            appends the data to the table. WRITE_EMPTY: If the table already
            exists and contains data, a 'duplicate' error is returned in the job
            result. The default value is WRITE_EMPTY. Each action is atomic and
            only occurs if BigQuery is able to complete the job successfully.
            Creation, truncation and append actions occur as one atomic update
            upon job completion."
          type: string
      type: object
    JobList:
      properties:
        etag:
          description: A hash of this page of results.
          type: string
        jobs:
          description: List of jobs that were requested.
          items:
            properties:
              configuration:
                $ref: "#/components/schemas/JobConfiguration"
              errorResult:
                $ref: "#/components/schemas/ErrorProto"
              id:
                description: Unique opaque ID of the job.
                type: string
              jobReference:
                $ref: "#/components/schemas/JobReference"
              kind:
                default: bigquery#job
                description: The resource type.
                type: string
              state:
                description: Running state of the job. When the state is DONE, errorResult
                  can be checked to determine whether the job succeeded or
                  failed.
                type: string
              statistics:
                $ref: "#/components/schemas/JobStatistics"
              status:
                $ref: "#/components/schemas/JobStatus"
              user_email:
                description: "[Full-projection-only] Email address of the user who ran the
                  job."
                type: string
            type: object
          type: array
        kind:
          default: bigquery#jobList
          description: The resource type of the response.
          type: string
        nextPageToken:
          description: A token to request the next page of results.
          type: string
      type: object
    JobReference:
      properties:
        jobId:
          description: "[Required] The ID of the job. The ID must contain only letters
            (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The
            maximum length is 1,024 characters."
          type: string
        location:
          description: The geographic location of the job. See details at
            https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
          type: string
        projectId:
          description: "[Required] The ID of the project containing this job."
          type: string
      type: object
    JobStatistics:
      properties:
        completionRatio:
          description: "[TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD
            and EXTRACT jobs."
          format: double
          type: number
        creationTime:
          description: "[Output-only] Creation time of this job, in milliseconds since the
            epoch. This field will be present on all jobs."
          format: int64
          type: string
        endTime:
          description: "[Output-only] End time of this job, in milliseconds since the
            epoch. This field will be present whenever a job is in the DONE
            state."
          format: int64
          type: string
        extract:
          $ref: "#/components/schemas/JobStatistics4"
        load:
          $ref: "#/components/schemas/JobStatistics3"
        numChildJobs:
          description: "[Output-only] Number of child jobs executed."
          format: int64
          type: string
        parentJobId:
          description: "[Output-only] If this is a child job, the id of the parent."
          type: string
        query:
          $ref: "#/components/schemas/JobStatistics2"
        quotaDeferments:
          description: "[Output-only] Quotas which delayed this job's start time."
          items:
            type: string
          type: array
        reservationUsage:
          description: "[Output-only] Job resource usage breakdown by reservation."
          items:
            properties:
              name:
                description: '[Output-only] Reservation name or "unreserved" for on-demand
                  resources usage.'
                type: string
              slotMs:
                description: "[Output-only] Slot-milliseconds the job spent in the given
                  reservation."
                format: int64
                type: string
            type: object
          type: array
        reservation_id:
          description: "[Output-only] Name of the primary reservation assigned to this job.
            Note that this could be different than reservations reported in the
            reservation usage field if parent reservations were used to execute
            this job."
          type: string
        scriptStatistics:
          $ref: "#/components/schemas/ScriptStatistics"
        startTime:
          description: "[Output-only] Start time of this job, in milliseconds since the
            epoch. This field will be present when the job transitions from the
            PENDING state to either RUNNING or DONE."
          format: int64
          type: string
        totalBytesProcessed:
          description: "[Output-only] [Deprecated] Use the bytes processed in the query
            statistics instead."
          format: int64
          type: string
        totalSlotMs:
          description: "[Output-only] Slot-milliseconds for the job."
          format: int64
          type: string
      type: object
    JobStatistics2:
      properties:
        billingTier:
          description: "[Output-only] Billing tier for the job."
          format: int32
          type: integer
        cacheHit:
          description: "[Output-only] Whether the query result was fetched from the query
            cache."
          type: boolean
        ddlOperationPerformed:
          description: 'The DDL operation performed, possibly dependent on the
            pre-existence of the DDL target. Possible values (new values might
            be added in the future): "CREATE": The query created the DDL target.
            "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT
            EXISTS while the table already exists, or the query is DROP TABLE IF
            EXISTS while the table does not exist. "REPLACE": The query replaced
            the DDL target. Example case: the query is CREATE OR REPLACE TABLE,
            and the table already exists. "DROP": The query deleted the DDL
            target.'
          type: string
        ddlTargetRoutine:
          $ref: "#/components/schemas/RoutineReference"
        ddlTargetTable:
          $ref: "#/components/schemas/TableReference"
        estimatedBytesProcessed:
          description: "[Output-only] The original estimate of bytes processed for the job."
          format: int64
          type: string
        modelTraining:
          $ref: "#/components/schemas/BigQueryModelTraining"
        modelTrainingCurrentIteration:
          description: "[Output-only, Beta] Deprecated; do not use."
          format: int32
          type: integer
        modelTrainingExpectedTotalIteration:
          description: "[Output-only, Beta] Deprecated; do not use."
          format: int64
          type: string
        numDmlAffectedRows:
          description: "[Output-only] The number of rows affected by a DML statement.
            Present only for DML statements INSERT, UPDATE or DELETE."
          format: int64
          type: string
        queryPlan:
          description: "[Output-only] Describes execution plan for the query."
          items:
            $ref: "#/components/schemas/ExplainQueryStage"
          type: array
        referencedRoutines:
          description: "[Output-only] Referenced routines (persistent user-defined
            functions and stored procedures) for the job."
          items:
            $ref: "#/components/schemas/RoutineReference"
          type: array
        referencedTables:
          description: "[Output-only] Referenced tables for the job. Queries that reference
            more than 50 tables will not have a complete list."
          items:
            $ref: "#/components/schemas/TableReference"
          type: array
        reservationUsage:
          description: "[Output-only] Job resource usage breakdown by reservation."
          items:
            properties:
              name:
                description: '[Output-only] Reservation name or "unreserved" for on-demand
                  resources usage.'
                type: string
              slotMs:
                description: "[Output-only] Slot-milliseconds the job spent in the given
                  reservation."
                format: int64
                type: string
            type: object
          type: array
        schema:
          $ref: "#/components/schemas/TableSchema"
        statementType:
          description: 'The type of query statement, if valid. Possible values (new values
            might be added in the future): "SELECT": SELECT query. "INSERT":
            INSERT query; see
            https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
            "UPDATE": UPDATE query; see
            https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
            "DELETE": DELETE query; see
            https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
            "MERGE": MERGE query; see
            https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language.
            "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query.
            "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR
            REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE
            PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without
            AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ...
            AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS
            SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query.
            "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE
            query. "DROP_VIEW": DROP VIEW query.'
          type: string
        timeline:
          description: "[Output-only] [Beta] Describes a timeline of job execution."
          items:
            $ref: "#/components/schemas/QueryTimelineSample"
          type: array
        totalBytesBilled:
          description: "[Output-only] Total bytes billed for the job."
          format: int64
          type: string
        totalBytesProcessed:
          description: "[Output-only] Total bytes processed for the job."
          format: int64
          type: string
        totalBytesProcessedAccuracy:
          description: "[Output-only] For dry-run jobs, totalBytesProcessed is an estimate
            and this field specifies the accuracy of the estimate. Possible
            values can be: UNKNOWN: accuracy of the estimate is unknown.
            PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound
            of what the query would cost. UPPER_BOUND: estimate is upper bound
            of what the query would cost."
          type: string
        totalPartitionsProcessed:
          description: "[Output-only] Total number of partitions processed from all
            partitioned tables referenced in the job."
          format: int64
          type: string
        totalSlotMs:
          description: "[Output-only] Slot-milliseconds for the job."
          format: int64
          type: string
        undeclaredQueryParameters:
          description: "Standard SQL only: list of undeclared query parameters detected
            during a dry run validation."
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
      type: object
    JobStatistics3:
      properties:
        badRecords:
          description: "[Output-only] The number of bad records encountered. Note that if
            the job has failed because of more bad records encountered than the
            maximum allowed in the load job configuration, then this number can
            be less than the total number of bad records present in the input
            data."
          format: int64
          type: string
        inputFileBytes:
          description: "[Output-only] Number of bytes of source data in a load job."
          format: int64
          type: string
        inputFiles:
          description: "[Output-only] Number of source files in a load job."
          format: int64
          type: string
        outputBytes:
          description: "[Output-only] Size of the loaded data in bytes. Note that while a
            load job is in the running state, this value may change."
          format: int64
          type: string
        outputRows:
          description: "[Output-only] Number of rows imported in a load job. Note that
            while an import job is in the running state, this value may change."
          format: int64
          type: string
      type: object
    JobStatistics4:
      properties:
        destinationUriFileCounts:
          description: "[Output-only] Number of files per destination URI or URI pattern
            specified in the extract configuration. These values will be in the
            same order as the URIs specified in the 'destinationUris' field."
          items:
            format: int64
            type: string
          type: array
        inputBytes:
          description: "[Output-only] Number of user bytes extracted into the result. This
            is the byte count as computed by BigQuery for billing purposes."
          format: int64
          type: string
      type: object
    JobStatus:
      properties:
        errorResult:
          $ref: "#/components/schemas/ErrorProto"
        errors:
          description: "[Output-only] The first errors encountered during the running of
            the job. The final message includes the number of errors that caused
            the process to stop. Errors here do not necessarily mean that the
            job has completed or was unsuccessful."
          items:
            $ref: "#/components/schemas/ErrorProto"
          type: array
        state:
          description: "[Output-only] Running state of the job."
          type: string
      type: object
    JsonObject:
      additionalProperties:
        $ref: "#/components/schemas/JsonValue"
      description: Represents a single JSON object.
      type: object
    JsonValue: {}
    ListModelsResponse:
      properties:
        models:
          description: >-
            Models in the requested dataset. Only the following fields are
            populated:

            model_reference, model_type, creation_time, last_modified_time and

            labels.
          items:
            $ref: "#/components/schemas/Model"
          type: array
        nextPageToken:
          description: A token to request the next page of results.
          type: string
      type: object
    ListRoutinesResponse:
      properties:
        nextPageToken:
          description: A token to request the next page of results.
          type: string
        routines:
          description: >-
            Routines in the requested dataset. Only the following fields are
            populated:

            etag, project_id, dataset_id, routine_id, routine_type, creation_time,

            last_modified_time, language.
          items:
            $ref: "#/components/schemas/Routine"
          type: array
      type: object
    LocationMetadata:
      description: |-
        BigQuery-specific metadata about a location. This will be set on
        google.cloud.location.Location.metadata in Cloud Location API
        responses.
      properties:
        legacyLocationId:
          description: >-
            The legacy BigQuery location ID, e.g. “EU” for the “europe”
            location.

            This is for any API consumers that need the legacy “US” and “EU” locations.
          type: string
      type: object
    MaterializedViewDefinition:
      properties:
        lastRefreshTime:
          description: "[Output-only] [TrustedTester] The time when this materialized view
            was last modified, in milliseconds since the epoch."
          format: int64
          type: string
        query:
          description: "[Required] A query whose result is persisted."
          type: string
      type: object
    Model:
      properties:
        creationTime:
          description: Output only. The time when this model was created, in millisecs
            since the epoch.
          format: int64
          type: string
        description:
          description: Optional. A user-friendly description of this model.
          type: string
        encryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        etag:
          description: Output only. A hash of this resource.
          type: string
        expirationTime:
          description: >-
            Optional. The time when this model expires, in milliseconds since
            the epoch.

            If not present, the model will persist indefinitely. Expired models

            will be deleted and their storage reclaimed.  The defaultTableExpirationMs

            property of the encapsulating dataset can be used to set a default

            expirationTime on newly created models.
          format: int64
          type: string
        featureColumns:
          description: Output only. Input feature columns that were used to train this
            model.
          items:
            $ref: "#/components/schemas/StandardSqlField"
          type: array
        friendlyName:
          description: Optional. A descriptive name for this model.
          type: string
        labelColumns:
          description: >-
            Output only. Label columns that were used to train this model.

            The output of the model will have a "predicted_" prefix to these columns.
          items:
            $ref: "#/components/schemas/StandardSqlField"
          type: array
        labels:
          additionalProperties:
            type: string
          description: >-
            The labels associated with this model. You can use these to organize

            and group your models. Label keys and values can be no longer

            than 63 characters, can only contain lowercase letters, numeric

            characters, underscores and dashes. International characters are allowed.

            Label values are optional. Label keys must start with a letter and each

            label in the list must have a different key.
          type: object
        lastModifiedTime:
          description: Output only. The time when this model was last modified, in
            millisecs since the epoch.
          format: int64
          type: string
        location:
          description: >-
            Output only. The geographic location where the model resides. This
            value

            is inherited from the dataset.
          type: string
        modelReference:
          $ref: "#/components/schemas/ModelReference"
        modelType:
          description: Output only. Type of the model resource.
          enum:
            - MODEL_TYPE_UNSPECIFIED
            - LINEAR_REGRESSION
            - LOGISTIC_REGRESSION
            - KMEANS
            - TENSORFLOW
          type: string
        trainingRuns:
          description: Output only. Information for all training runs in increasing order
            of start_time.
          items:
            $ref: "#/components/schemas/TrainingRun"
          type: array
      type: object
    ModelDefinition:
      properties:
        modelOptions:
          description: "[Output-only, Beta] Model options used for the first training run.
            These options are immutable for subsequent training runs. Default
            values are used for any options not specified in the input query."
          properties:
            labels:
              items:
                type: string
              type: array
            lossType:
              type: string
            modelType:
              type: string
          type: object
        trainingRuns:
          description: "[Output-only, Beta] Information about ml training runs, each
            training run comprises of multiple iterations and there may be
            multiple training runs for the model if warm start is used or if a
            user decides to continue a previously cancelled query."
          items:
            $ref: "#/components/schemas/BqmlTrainingRun"
          type: array
      type: object
    ModelReference:
      properties:
        datasetId:
          description: "[Required] The ID of the dataset containing this model."
          type: string
        modelId:
          description: "[Required] The ID of the model. The ID must contain only letters
            (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is
            1,024 characters."
          type: string
        projectId:
          description: "[Required] The ID of the project containing this model."
          type: string
      type: object
    MultiClassClassificationMetrics:
      description: Evaluation metrics for multi-class classification/classifier models.
      properties:
        aggregateClassificationMetrics:
          $ref: "#/components/schemas/AggregateClassificationMetrics"
        confusionMatrixList:
          description: Confusion matrix at different thresholds.
          items:
            $ref: "#/components/schemas/ConfusionMatrix"
          type: array
      type: object
    ProjectList:
      properties:
        etag:
          description: A hash of the page of results
          type: string
        kind:
          default: bigquery#projectList
          description: The type of list.
          type: string
        nextPageToken:
          description: A token to request the next page of results.
          type: string
        projects:
          description: Projects to which you have at least READ access.
          items:
            properties:
              friendlyName:
                description: A descriptive name for this project.
                type: string
              id:
                description: An opaque ID of this project.
                type: string
              kind:
                default: bigquery#project
                description: The resource type.
                type: string
              numericId:
                description: The numeric ID of this project.
                format: uint64
                type: string
              projectReference:
                $ref: "#/components/schemas/ProjectReference"
            type: object
          type: array
        totalItems:
          description: The total number of projects in the list.
          format: int32
          type: integer
      type: object
    ProjectReference:
      properties:
        projectId:
          description: "[Required] ID of the project. Can be either the numeric ID or the
            assigned ID of the project."
          type: string
      type: object
    QueryParameter:
      properties:
        name:
          description: "[Optional] If unset, this is a positional parameter. Otherwise,
            should be unique within a query."
          type: string
        parameterType:
          $ref: "#/components/schemas/QueryParameterType"
        parameterValue:
          $ref: "#/components/schemas/QueryParameterValue"
      type: object
    QueryParameterType:
      properties:
        arrayType:
          $ref: "#/components/schemas/QueryParameterType"
        structTypes:
          description: "[Optional] The types of the fields of this struct, in order, if
            this is a struct."
          items:
            properties:
              description:
                description: "[Optional] Human-oriented description of the field."
                type: string
              name:
                description: "[Optional] The name of this field."
                type: string
              type:
                $ref: "#/components/schemas/QueryParameterType"
            type: object
          type: array
        type:
          description: "[Required] The top level type of this field."
          type: string
      type: object
    QueryParameterValue:
      properties:
        arrayValues:
          description: "[Optional] The array values, if this is an array type."
          items:
            $ref: "#/components/schemas/QueryParameterValue"
          type: array
        structValues:
          additionalProperties:
            $ref: "#/components/schemas/QueryParameterValue"
          description: "[Optional] The struct field values, in order of the struct type's
            declaration."
          type: object
        value:
          description: "[Optional] The value of this value, if a simple scalar type."
          type: string
      type: object
    QueryRequest:
      properties:
        defaultDataset:
          $ref: "#/components/schemas/DatasetReference"
        dryRun:
          description: "[Optional] If set to true, BigQuery doesn't run the job. Instead,
            if the query is valid, BigQuery returns statistics about the job
            such as how many bytes would be processed. If the query is invalid,
            an error returns. The default value is false."
          type: boolean
        kind:
          default: bigquery#queryRequest
          description: The resource type of the request.
          type: string
        location:
          description: The geographic location where the job should run. See details at
            https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
          type: string
        maxResults:
          description: "[Optional] The maximum number of rows of data to return per page of
            results. Setting this flag to a small value such as 1000 and then
            paging through results might improve reliability when the query
            result set is large. In addition to this limit, responses are also
            limited to 10 MB. By default, there is no maximum row count, and
            only the byte limit applies."
          format: uint32
          type: integer
        parameterMode:
          description: Standard SQL only. Set to POSITIONAL to use positional (?) query
            parameters or to NAMED to use named (@myparam) query parameters in
            this query.
          type: string
        preserveNulls:
          description: "[Deprecated] This property is deprecated."
          type: boolean
        query:
          description: '[Required] A query string, following the BigQuery query syntax, of
            the query to execute. Example: "SELECT count(f1) FROM
            [myProjectId:myDatasetId.myTableId]".'
          type: string
        queryParameters:
          description: Query parameters for Standard SQL queries.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        timeoutMs:
          description: "[Optional] How long to wait for the query to complete, in
            milliseconds, before the request times out and returns. Note that
            this is only a timeout for the request, not the query. If the query
            takes longer to run than the timeout value, the call returns without
            any results and with the 'jobComplete' flag set to false. You can
            call GetQueryResults() to wait for the query to complete and read
            the results. The default value is 10000 milliseconds (10 seconds)."
          format: uint32
          type: integer
        useLegacySql:
          default: true
          description: "Specifies whether to use BigQuery's legacy SQL dialect for this
            query. The default value is true. If set to false, the query will
            use BigQuery's standard SQL:
            https://cloud.google.com/bigquery/sql-reference/ When useLegacySql
            is set to false, the value of flattenResults is ignored; query will
            be run as if flattenResults is false."
          type: boolean
        useQueryCache:
          default: true
          description: "[Optional] Whether to look for the result in the query cache. The
            query cache is a best-effort cache that will be flushed whenever
            tables in the query are modified. The default value is true."
          type: boolean
      type: object
    QueryResponse:
      properties:
        cacheHit:
          description: Whether the query result was fetched from the query cache.
          type: boolean
        errors:
          description: "[Output-only] The first errors or warnings encountered during the
            running of the job. The final message includes the number of errors
            that caused the process to stop. Errors here do not necessarily mean
            that the job has completed or was unsuccessful."
          items:
            $ref: "#/components/schemas/ErrorProto"
          type: array
        jobComplete:
          description: Whether the query has completed or not. If rows or totalRows are
            present, this will always be true. If this is false, totalRows will
            not be available.
          type: boolean
        jobReference:
          $ref: "#/components/schemas/JobReference"
        kind:
          default: bigquery#queryResponse
          description: The resource type.
          type: string
        numDmlAffectedRows:
          description: "[Output-only] The number of rows affected by a DML statement.
            Present only for DML statements INSERT, UPDATE or DELETE."
          format: int64
          type: string
        pageToken:
          description: A token used for paging results.
          type: string
        rows:
          description: An object with as many results as can be contained within the
            maximum permitted reply size. To get any additional rows, you can
            call GetQueryResults and specify the jobReference returned above.
          items:
            $ref: "#/components/schemas/TableRow"
          type: array
        schema:
          $ref: "#/components/schemas/TableSchema"
        totalBytesProcessed:
          description: The total number of bytes processed for this query. If this query
            was a dry run, this is the number of bytes that would be processed
            if the query were run.
          format: int64
          type: string
        totalRows:
          description: The total number of rows in the complete query result set, which can
            be more than the number of rows in this single page of results.
          format: uint64
          type: string
      type: object
    QueryTimelineSample:
      properties:
        activeUnits:
          description: Total number of units currently being processed by workers. This
            does not correspond directly to slot usage. This is the largest
            value observed since the last sample.
          format: int64
          type: string
        completedUnits:
          description: Total parallel units of work completed by this query.
          format: int64
          type: string
        elapsedMs:
          description: Milliseconds elapsed since the start of query execution.
          format: int64
          type: string
        pendingUnits:
          description: Total parallel units of work remaining for the active stages.
          format: int64
          type: string
        totalSlotMs:
          description: Cumulative slot-ms consumed by the query.
          format: int64
          type: string
      type: object
    RangePartitioning:
      properties:
        field:
          description: "[TrustedTester] [Required] The table is partitioned by this field.
            The field must be a top-level NULLABLE/REQUIRED field. The only
            supported type is INTEGER/INT64."
          type: string
        range:
          description: "[TrustedTester] [Required] Defines the ranges for range
            partitioning."
          properties:
            end:
              description: "[TrustedTester] [Required] The end of range partitioning,
                exclusive."
              format: int64
              type: string
            interval:
              description: "[TrustedTester] [Required] The width of each interval."
              format: int64
              type: string
            start:
              description: "[TrustedTester] [Required] The start of range partitioning,
                inclusive."
              format: int64
              type: string
          type: object
      type: object
    RegressionMetrics:
      description: |-
        Evaluation metrics for regression and explicit feedback type matrix
        factorization models.
      properties:
        meanAbsoluteError:
          description: Mean absolute error.
          format: double
          type: number
        meanSquaredError:
          description: Mean squared error.
          format: double
          type: number
        meanSquaredLogError:
          description: Mean squared log error.
          format: double
          type: number
        medianAbsoluteError:
          description: Median absolute error.
          format: double
          type: number
        rSquared:
          description: R^2 score.
          format: double
          type: number
      type: object
    Routine:
      description: A user-defined function or a stored procedure.
      properties:
        arguments:
          description: Optional.
          items:
            $ref: "#/components/schemas/Argument"
          type: array
        creationTime:
          description: >-
            Output only. The time when this routine was created, in milliseconds
            since

            the epoch.
          format: int64
          type: string
        definitionBody:
          description: >-
            Required. The body of the routine.


            For functions, this is the expression in the AS clause.


            If language=SQL, it is the substring inside (but excluding) the

            parentheses. For example, for the function created with the following

            statement:


            `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))`


            The definition_body is `concat(x, "\n", y)` (\n is not replaced with

            linebreak).


            If language=JAVASCRIPT, it is the evaluated string in the AS clause.

            For example, for the function created with the following statement:


            `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'`


            The definition_body is


            `return "\n";\n`


            Note that both \n are replaced with linebreaks.
          type: string
        description:
          description: Optional. [Experimental] The description of the routine if defined.
          type: string
        etag:
          description: Output only. A hash of this resource.
          type: string
        importedLibraries:
          description: >-
            Optional. If language = "JAVASCRIPT", this field stores the path of
            the

            imported JAVASCRIPT libraries.
          items:
            type: string
          type: array
        language:
          description: Optional. Defaults to "SQL".
          enum:
            - LANGUAGE_UNSPECIFIED
            - SQL
            - JAVASCRIPT
          type: string
        lastModifiedTime:
          description: >-
            Output only. The time when this routine was last modified, in
            milliseconds

            since the epoch.
          format: int64
          type: string
        returnType:
          $ref: "#/components/schemas/StandardSqlDataType"
        routineReference:
          $ref: "#/components/schemas/RoutineReference"
        routineType:
          description: Required. The type of routine.
          enum:
            - ROUTINE_TYPE_UNSPECIFIED
            - SCALAR_FUNCTION
            - PROCEDURE
          type: string
      type: object
    RoutineReference:
      properties:
        datasetId:
          description: "[Required] The ID of the dataset containing this routine."
          type: string
        projectId:
          description: "[Required] The ID of the project containing this routine."
          type: string
        routineId:
          description: "[Required] The ID of the routine. The ID must contain only letters
            (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is
            256 characters."
          type: string
      type: object
    Row:
      description: A single row in the confusion matrix.
      properties:
        actualLabel:
          description: The original label of this row.
          type: string
        entries:
          description: Info describing predicted label distribution.
          items:
            $ref: "#/components/schemas/Entry"
          type: array
      type: object
    ScriptStackFrame:
      properties:
        endColumn:
          description: "[Output-only] One-based end column."
          format: int32
          type: integer
        endLine:
          description: "[Output-only] One-based end line."
          format: int32
          type: integer
        procedureId:
          description: "[Output-only] Name of the active procedure, empty if in a top-level
            script."
          type: string
        startColumn:
          description: "[Output-only] One-based start column."
          format: int32
          type: integer
        startLine:
          description: "[Output-only] One-based start line."
          format: int32
          type: integer
        text:
          description: "[Output-only] Text of the current statement/expression."
          type: string
      type: object
    ScriptStatistics:
      properties:
        evaluationKind:
          description: "[Output-only] Whether this child job was a statement or expression."
          type: string
        stackFrames:
          description: Stack trace showing the line/column/procedure name of each frame on
            the stack at the point where the current evaluation happened. The
            leaf frame is first, the primary script is last. Never empty.
          items:
            $ref: "#/components/schemas/ScriptStackFrame"
          type: array
      type: object
    StandardSqlDataType:
      description: |-
        The type of a variable, e.g., a function argument.
        Examples:
        INT64: {type_kind="INT64"}
        ARRAY<STRING>: {type_kind="ARRAY", array_element_type="STRING"}
        STRUCT<x STRING, y ARRAY<DATE>>:
          {type_kind="STRUCT",
           struct_type={fields=[
             {name="x", type={type_kind="STRING"}},
             {name="y", type={type_kind="ARRAY", array_element_type="DATE"}}
           ]}}
      properties:
        arrayElementType:
          $ref: "#/components/schemas/StandardSqlDataType"
        structType:
          $ref: "#/components/schemas/StandardSqlStructType"
        typeKind:
          description: |-
            Required. The top level type of this field.
            Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
          enum:
            - TYPE_KIND_UNSPECIFIED
            - INT64
            - BOOL
            - FLOAT64
            - STRING
            - BYTES
            - TIMESTAMP
            - DATE
            - TIME
            - DATETIME
            - GEOGRAPHY
            - NUMERIC
            - ARRAY
            - STRUCT
          type: string
      type: object
    StandardSqlField:
      description: A field or a column.
      properties:
        name:
          description: Optional. The name of this field. Can be absent for struct fields.
          type: string
        type:
          $ref: "#/components/schemas/StandardSqlDataType"
      type: object
    StandardSqlStructType:
      properties:
        fields:
          items:
            $ref: "#/components/schemas/StandardSqlField"
          type: array
      type: object
    Streamingbuffer:
      properties:
        estimatedBytes:
          description: "[Output-only] A lower-bound estimate of the number of bytes
            currently in the streaming buffer."
          format: uint64
          type: string
        estimatedRows:
          description: "[Output-only] A lower-bound estimate of the number of rows
            currently in the streaming buffer."
          format: uint64
          type: string
        oldestEntryTime:
          description: "[Output-only] Contains the timestamp of the oldest entry in the
            streaming buffer, in milliseconds since the epoch, if the streaming
            buffer is available."
          format: uint64
          type: string
      type: object
    Table:
      properties:
        clustering:
          $ref: "#/components/schemas/Clustering"
        creationTime:
          description: "[Output-only] The time when this table was created, in milliseconds
            since the epoch."
          format: int64
          type: string
        description:
          description: "[Optional] A user-friendly description of this table."
          type: string
        encryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        etag:
          description: "[Output-only] A hash of the table metadata. Used to ensure there
            were no concurrent modifications to the resource when attempting an
            update. Not guaranteed to change when the table contents or the
            fields numRows, numBytes, numLongTermBytes or lastModifiedTime
            change."
          type: string
        expirationTime:
          description: "[Optional] The time when this table expires, in milliseconds since
            the epoch. If not present, the table will persist indefinitely.
            Expired tables will be deleted and their storage reclaimed. The
            defaultTableExpirationMs property of the encapsulating dataset can
            be used to set a default expirationTime on newly created tables."
          format: int64
          type: string
        externalDataConfiguration:
          $ref: "#/components/schemas/ExternalDataConfiguration"
        friendlyName:
          description: "[Optional] A descriptive name for this table."
          type: string
        id:
          description: "[Output-only] An opaque ID uniquely identifying the table."
          type: string
        kind:
          default: bigquery#table
          description: "[Output-only] The type of the resource."
          type: string
        labels:
          additionalProperties:
            type: string
          description: The labels associated with this table. You can use these to organize
            and group your tables. Label keys and values can be no longer than
            63 characters, can only contain lowercase letters, numeric
            characters, underscores and dashes. International characters are
            allowed. Label values are optional. Label keys must start with a
            letter and each label in the list must have a different key.
          type: object
        lastModifiedTime:
          description: "[Output-only] The time when this table was last modified, in
            milliseconds since the epoch."
          format: uint64
          type: string
        location:
          description: "[Output-only] The geographic location where the table resides. This
            value is inherited from the dataset."
          type: string
        materializedView:
          $ref: "#/components/schemas/MaterializedViewDefinition"
        model:
          $ref: "#/components/schemas/ModelDefinition"
        numBytes:
          description: "[Output-only] The size of this table in bytes, excluding any data
            in the streaming buffer."
          format: int64
          type: string
        numLongTermBytes:
          description: '[Output-only] The number of bytes in the table that are considered
            "long-term storage".'
          format: int64
          type: string
        numPhysicalBytes:
          description: "[Output-only] [TrustedTester] The physical size of this table in
            bytes, excluding any data in the streaming buffer. This includes
            compression and storage used for time travel."
          format: int64
          type: string
        numRows:
          description: "[Output-only] The number of rows of data in this table, excluding
            any data in the streaming buffer."
          format: uint64
          type: string
        rangePartitioning:
          $ref: "#/components/schemas/RangePartitioning"
        requirePartitionFilter:
          default: false
          description: "[Beta] [Optional] If set to true, queries over this table require a
            partition filter that can be used for partition elimination to be
            specified."
          type: boolean
        schema:
          $ref: "#/components/schemas/TableSchema"
        selfLink:
          description: "[Output-only] A URL that can be used to access this resource again."
          type: string
        streamingBuffer:
          $ref: "#/components/schemas/Streamingbuffer"
        tableReference:
          $ref: "#/components/schemas/TableReference"
        timePartitioning:
          $ref: "#/components/schemas/TimePartitioning"
        type:
          description: "[Output-only] Describes the table type. The following values are
            supported: TABLE: A normal BigQuery table. VIEW: A virtual table
            defined by a SQL query. [TrustedTester] MATERIALIZED_VIEW: SQL query
            whose result is persisted. EXTERNAL: A table that references data
            stored in an external storage system, such as Google Cloud Storage.
            The default value is TABLE."
          type: string
        view:
          $ref: "#/components/schemas/ViewDefinition"
      type: object
    TableCell:
      properties:
        v: {}
      type: object
    TableDataInsertAllRequest:
      properties:
        ignoreUnknownValues:
          description: "[Optional] Accept rows that contain values that do not match the
            schema. The unknown values are ignored. Default is false, which
            treats unknown values as errors."
          type: boolean
        kind:
          default: bigquery#tableDataInsertAllRequest
          description: The resource type of the response.
          type: string
        rows:
          description: The rows to insert.
          items:
            properties:
              insertId:
                description: "[Optional] A unique ID for each row. BigQuery uses this
                  property to detect duplicate insertion requests on a
                  best-effort basis."
                type: string
              json:
                $ref: "#/components/schemas/JsonObject"
            type: object
          type: array
        skipInvalidRows:
          description: "[Optional] Insert all valid rows of a request, even if invalid rows
            exist. The default value is false, which causes the entire request
            to fail if any invalid rows exist."
          type: boolean
        templateSuffix:
          description: If specified, treats the destination table as a base template, and
            inserts the rows into an instance table named
            "{destination}{templateSuffix}". BigQuery will manage creation of
            the instance table, using the schema of the base template table. See
            https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables
            for considerations when working with templates tables.
          type: string
      type: object
    TableDataInsertAllResponse:
      properties:
        insertErrors:
          description: An array of errors for rows that were not inserted.
          items:
            properties:
              errors:
                description: Error information for the row indicated by the index property.
                items:
                  $ref: "#/components/schemas/ErrorProto"
                type: array
              index:
                description: The index of the row that error applies to.
                format: uint32
                type: integer
            type: object
          type: array
        kind:
          default: bigquery#tableDataInsertAllResponse
          description: The resource type of the response.
          type: string
      type: object
    TableDataList:
      properties:
        etag:
          description: A hash of this page of results.
          type: string
        kind:
          default: bigquery#tableDataList
          description: The resource type of the response.
          type: string
        pageToken:
          description: A token used for paging results. Providing this token instead of the
            startIndex parameter can help you retrieve stable results when an
            underlying table is changing.
          type: string
        rows:
          description: Rows of results.
          items:
            $ref: "#/components/schemas/TableRow"
          type: array
        totalRows:
          description: The total number of rows in the complete table.
          format: int64
          type: string
      type: object
    TableFieldSchema:
      properties:
        categories:
          description: "[Optional] The categories attached to this field, used for
            field-level access control."
          properties:
            names:
              description: A list of category resource names. For example,
                "projects/1/taxonomies/2/categories/3". At most 5 categories are
                allowed.
              items:
                type: string
              type: array
          type: object
        description:
          description: "[Optional] The field description. The maximum length is 1,024
            characters."
          type: string
        fields:
          description: "[Optional] Describes the nested schema fields if the type property
            is set to RECORD."
          items:
            $ref: "#/components/schemas/TableFieldSchema"
          type: array
        mode:
          description: "[Optional] The field mode. Possible values include NULLABLE,
            REQUIRED and REPEATED. The default value is NULLABLE."
          type: string
        name:
          description: "[Required] The field name. The name must contain only letters (a-z,
            A-Z), numbers (0-9), or underscores (_), and must start with a
            letter or underscore. The maximum length is 128 characters."
          type: string
        type:
          description: "[Required] The field data type. Possible values include STRING,
            BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as
            FLOAT), BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME,
            DATETIME, RECORD (where RECORD indicates that the field contains a
            nested schema) or STRUCT (same as RECORD)."
          type: string
      type: object
    TableList:
      properties:
        etag:
          description: A hash of this page of results.
          type: string
        kind:
          default: bigquery#tableList
          description: The type of list.
          type: string
        nextPageToken:
          description: A token to request the next page of results.
          type: string
        tables:
          description: Tables in the requested dataset.
          items:
            properties:
              clustering:
                $ref: "#/components/schemas/Clustering"
              creationTime:
                description: The time when this table was created, in milliseconds since
                  the epoch.
                format: int64
                type: string
              expirationTime:
                description: "[Optional] The time when this table expires, in milliseconds
                  since the epoch. If not present, the table will persist
                  indefinitely. Expired tables will be deleted and their storage
                  reclaimed."
                format: int64
                type: string
              friendlyName:
                description: The user-friendly name for this table.
                type: string
              id:
                description: An opaque ID of the table
                type: string
              kind:
                default: bigquery#table
                description: The resource type.
                type: string
              labels:
                additionalProperties:
                  type: string
                description: The labels associated with this table. You can use these to
                  organize and group your tables.
                type: object
              tableReference:
                $ref: "#/components/schemas/TableReference"
              timePartitioning:
                $ref: "#/components/schemas/TimePartitioning"
              type:
                description: "The type of table. Possible values are: TABLE, VIEW."
                type: string
              view:
                description: Additional details for a view.
                properties:
                  useLegacySql:
                    description: True if view is defined in legacy SQL dialect, false if in
                      standard SQL.
                    type: boolean
                type: object
            type: object
          type: array
        totalItems:
          description: The total number of tables in the dataset.
          format: int32
          type: integer
      type: object
    TableReference:
      properties:
        datasetId:
          description: "[Required] The ID of the dataset containing this table."
          type: string
        projectId:
          description: "[Required] The ID of the project containing this table."
          type: string
        tableId:
          description: "[Required] The ID of the table. The ID must contain only letters
            (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is
            1,024 characters."
          type: string
      type: object
    TableRow:
      properties:
        f:
          description: Represents a single row in the result set, consisting of one or more
            fields.
          items:
            $ref: "#/components/schemas/TableCell"
          type: array
      type: object
    TableSchema:
      properties:
        fields:
          description: Describes the fields in a table.
          items:
            $ref: "#/components/schemas/TableFieldSchema"
          type: array
      type: object
    TimePartitioning:
      properties:
        expirationMs:
          description: "[Optional] Number of milliseconds for which to keep the storage for
            partitions in the table. The storage in a partition will have an
            expiration time of its partition time plus this value."
          format: int64
          type: string
        field:
          description: "[Beta] [Optional] If not set, the table is partitioned by pseudo
            column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or
            '_PARTITIONDATE' as DATE type. If field is specified, the table is
            instead partitioned by this field. The field must be a top-level
            TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED."
          type: string
        requirePartitionFilter:
          type: boolean
        type:
          description: "[Required] The only type supported is DAY, which will generate one
            partition per day."
          type: string
      type: object
    TrainingOptions:
      properties:
        dataSplitColumn:
          description: >-
            The column to split data with. This column won't be used as a

            feature.

            1. When data_split_method is CUSTOM, the corresponding column should

            be boolean. The rows with true value tag are eval data, and the false

            are training data.

            2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION

            rows (from smallest to largest) in the corresponding column are used

            as training data, and the rest are eval data. It respects the order

            in Orderable data types:

            https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
          type: string
        dataSplitEvalFraction:
          description: |-
            The fraction of evaluation data over the whole input data. The rest
            of data will be used as training data. The format should be double.
            Accurate to two decimal places.
            Default value is 0.2.
          format: double
          type: number
        dataSplitMethod:
          description: The data split type for training and evaluation, e.g. RANDOM.
          enum:
            - DATA_SPLIT_METHOD_UNSPECIFIED
            - RANDOM
            - CUSTOM
            - SEQUENTIAL
            - NO_SPLIT
            - AUTO_SPLIT
          type: string
        distanceType:
          description: Distance type for clustering models.
          enum:
            - DISTANCE_TYPE_UNSPECIFIED
            - EUCLIDEAN
            - COSINE
          type: string
        earlyStop:
          description: >-
            Whether to stop early when the loss doesn't improve significantly

            any more (compared to min_relative_progress). Used only for iterative

            training algorithms.
          type: boolean
        initialLearnRate:
          description: |-
            Specifies the initial learning rate for the line search learn rate
            strategy.
          format: double
          type: number
        inputLabelColumns:
          description: Name of input label columns in training data.
          items:
            type: string
          type: array
        kmeansInitializationColumn:
          description: >-
            The column used to provide the initial centroids for kmeans
            algorithm

            when kmeans_initialization_method is CUSTOM.
          type: string
        kmeansInitializationMethod:
          description: The method used to initialize the centroids for kmeans algorithm.
          enum:
            - KMEANS_INITIALIZATION_METHOD_UNSPECIFIED
            - RANDOM
            - CUSTOM
          type: string
        l1Regularization:
          description: L1 regularization coefficient.
          format: double
          type: number
        l2Regularization:
          description: L2 regularization coefficient.
          format: double
          type: number
        labelClassWeights:
          additionalProperties:
            format: double
            type: number
          description: |-
            Weights associated with each label class, for rebalancing the
            training data. Only applicable for classification models.
          type: object
        learnRate:
          description: Learning rate in training. Used only for iterative training
            algorithms.
          format: double
          type: number
        learnRateStrategy:
          description: The strategy to determine learn rate for the current iteration.
          enum:
            - LEARN_RATE_STRATEGY_UNSPECIFIED
            - LINE_SEARCH
            - CONSTANT
          type: string
        lossType:
          description: Type of loss function used during training run.
          enum:
            - LOSS_TYPE_UNSPECIFIED
            - MEAN_SQUARED_LOSS
            - MEAN_LOG_LOSS
          type: string
        maxIterations:
          description: >-
            The maximum number of iterations in training. Used only for
            iterative

            training algorithms.
          format: int64
          type: string
        minRelativeProgress:
          description: |-
            When early_stop is true, stops training when accuracy improvement is
            less than 'min_relative_progress'. Used only for iterative training
            algorithms.
          format: double
          type: number
        modelUri:
          description: >-
            [Beta] Google Cloud Storage URI from which the model was imported.
            Only

            applicable for imported models.
          type: string
        numClusters:
          description: Number of clusters for clustering models.
          format: int64
          type: string
        optimizationStrategy:
          description: Optimization strategy for training linear regression models.
          enum:
            - OPTIMIZATION_STRATEGY_UNSPECIFIED
            - BATCH_GRADIENT_DESCENT
            - NORMAL_EQUATION
          type: string
        warmStart:
          description: Whether to train a model from the last checkpoint.
          type: boolean
      type: object
    TrainingRun:
      description: Information about a single training query run for the model.
      properties:
        evaluationMetrics:
          $ref: "#/components/schemas/EvaluationMetrics"
        results:
          description: Output of each iteration run, results.size() <= max_iterations.
          items:
            $ref: "#/components/schemas/IterationResult"
          type: array
        startTime:
          description: The start time of this training run.
          format: google-datetime
          type: string
        trainingOptions:
          $ref: "#/components/schemas/TrainingOptions"
      type: object
    UserDefinedFunctionResource:
      properties:
        inlineCode:
          description: "[Pick one] An inline resource that contains code for a user-defined
            function (UDF). Providing a inline code resource is equivalent to
            providing a URI for a file containing the same code."
          type: string
        resourceUri:
          description: "[Pick one] A code resource to load from a Google Cloud Storage URI
            (gs://bucket/path)."
          type: string
      type: object
    ViewDefinition:
      properties:
        query:
          description: "[Required] A query that BigQuery executes when the view is
            referenced."
          type: string
        useLegacySql:
          description: "Specifies whether to use BigQuery's legacy SQL for this view. The
            default value is true. If set to false, the view will use BigQuery's
            standard SQL: https://cloud.google.com/bigquery/sql-reference/
            Queries and views that reference this view must use the same flag
            value."
          type: boolean
        userDefinedFunctionResources:
          description: Describes user-defined function resources used in the query.
          items:
            $ref: "#/components/schemas/UserDefinedFunctionResource"
          type: array
      type: object
