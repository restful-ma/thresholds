openapi: 3.0.0
info:
  contact:
    x-twitter: giteaio
  description: This documentation describes the Gitea API.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Gitea API.
  version: 1.1.1
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://twitter.com/giteaio/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://try.gitea.io/swagger.v1.json
      version: "2.0"
  x-providerName: gitea.io
security:
  - BasicAuth: []
  - Token: []
  - AccessToken: []
  - AuthorizationHeaderToken: []
  - SudoParam: []
  - SudoHeader: []
paths:
  /admin/orgs:
    get:
      operationId: adminGetAllOrgs
      parameters:
        - description: page number of results to return (1-based)
          in: query
          name: page
          schema:
            type: integer
        - description: page size of results, maximum page size is 50
          in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
        "403":
          $ref: "#/components/responses/forbidden"
      summary: List all organizations
      tags:
        - admin
  /admin/users:
    get:
      operationId: adminGetAllUsers
      responses:
        "200":
          $ref: "#/components/responses/UserList"
        "403":
          $ref: "#/components/responses/forbidden"
      summary: List all users
      tags:
        - admin
    post:
      operationId: adminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserOption"
      responses:
        "201":
          $ref: "#/components/responses/User"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create a user
      tags:
        - admin
  "/admin/users/{username}":
    delete:
      operationId: adminDeleteUser
      parameters:
        - description: username of user to delete
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Delete a user
      tags:
        - admin
    patch:
      operationId: adminEditUser
      parameters:
        - description: username of user to edit
          in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUserOption"
      responses:
        "200":
          $ref: "#/components/responses/User"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Edit an existing user
      tags:
        - admin
  "/admin/users/{username}/keys":
    post:
      operationId: adminCreatePublicKey
      parameters:
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/PublicKey"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Add a public key on behalf of a user
      tags:
        - admin
  "/admin/users/{username}/keys/{id}":
    delete:
      operationId: adminDeleteUserPublicKey
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
        - description: id of the key to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Delete a user's public key
      tags:
        - admin
  "/admin/users/{username}/orgs":
    post:
      operationId: adminCreateOrg
      parameters:
        - description: username of the user that will own the created organization
          in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateOrgOption"
      responses:
        "201":
          $ref: "#/components/responses/Organization"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create an organization
      tags:
        - admin
  "/admin/users/{username}/repos":
    post:
      operationId: adminCreateRepo
      parameters:
        - description: username of the user. This user will own the created repository
          in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepoOption"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create a repository on behalf a user
      tags:
        - admin
  /markdown:
    post:
      operationId: renderMarkdown
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkdownOption"
      responses:
        "200":
          $ref: "#/components/responses/MarkdownRender"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Render a markdown document as HTML
      tags:
        - miscellaneous
  /markdown/raw:
    post:
      operationId: renderMarkdownRaw
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Request body to render
        required: true
      responses:
        "200":
          $ref: "#/components/responses/MarkdownRender"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Render raw markdown as HTML
      tags:
        - miscellaneous
  "/org/{org}/repos":
    post:
      operationId: createOrgRepo
      parameters:
        - description: name of organization
          in: path
          name: org
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create a repository in an organization
      tags:
        - organization
  /orgs:
    post:
      operationId: orgCreate
      requestBody:
        $ref: "#/components/requestBodies/CreateOrgOption"
      responses:
        "201":
          $ref: "#/components/responses/Organization"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create an organization
      tags:
        - organization
  "/orgs/{org}":
    delete:
      operationId: orgDelete
      parameters:
        - description: organization that is to be deleted
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete an organization
      tags:
        - organization
    get:
      operationId: orgGet
      parameters:
        - description: name of the organization to get
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Organization"
      summary: Get an organization
      tags:
        - organization
    patch:
      operationId: orgEdit
      parameters:
        - description: name of the organization to edit
          in: path
          name: org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditOrgOption"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/Organization"
      summary: Edit an organization
      tags:
        - organization
  "/orgs/{org}/hooks":
    get:
      operationId: orgListHooks
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/HookList"
      summary: List an organization's webhooks
      tags:
        - organization
  "/orgs/{org}/hooks/":
    post:
      operationId: orgCreateHook
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHookOption"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Hook"
      summary: Create a hook
      tags:
        - organization
  "/orgs/{org}/hooks/{id}":
    delete:
      operationId: orgDeleteHook
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: id of the hook to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a hook
      tags:
        - organization
    get:
      operationId: orgGetHook
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: id of the hook to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Hook"
      summary: Get a hook
      tags:
        - organization
    patch:
      operationId: orgEditHook
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: id of the hook to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditHookOption"
      responses:
        "200":
          $ref: "#/components/responses/Hook"
      summary: Update a hook
      tags:
        - organization
  "/orgs/{org}/members":
    get:
      operationId: orgListMembers
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List an organization's members
      tags:
        - organization
  "/orgs/{org}/members/{username}":
    delete:
      operationId: orgDeleteMember
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          description: member removed
      summary: Remove a member from an organization
      tags:
        - organization
    get:
      operationId: orgIsMember
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          description: user is a member
        "404":
          description: user is not a member
      summary: Check if a user is a member of an organization
      tags:
        - organization
  "/orgs/{org}/public_members":
    get:
      operationId: orgListPublicMembers
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List an organization's public members
      tags:
        - organization
  "/orgs/{org}/public_members/{username}":
    delete:
      operationId: orgConcealMember
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Conceal a user's membership
      tags:
        - organization
    get:
      operationId: orgIsPublicMember
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          description: user is a public member
        "404":
          description: user is not a public member
      summary: Check if a user is a public member of an organization
      tags:
        - organization
    put:
      operationId: orgPublicizeMember
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          description: membership publicized
      summary: Publicize a user's membership
      tags:
        - organization
  "/orgs/{org}/repos":
    get:
      operationId: orgListRepos
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List an organization's repos
      tags:
        - organization
  "/orgs/{org}/teams":
    get:
      operationId: orgListTeams
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TeamList"
      summary: List an organization's teams
      tags:
        - organization
    post:
      operationId: orgCreateTeam
      parameters:
        - description: name of the organization
          in: path
          name: org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamOption"
      responses:
        "201":
          $ref: "#/components/responses/Team"
      summary: Create a team
      tags:
        - organization
  /repos/migrate:
    post:
      operationId: repoMigrate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrateRepoForm"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
      summary: Migrate a remote git repository
      tags:
        - repository
  /repos/search:
    get:
      operationId: repoSearch
      parameters:
        - description: keyword
          in: query
          name: q
          schema:
            type: string
        - description: Limit search to repositories with keyword as topic
          in: query
          name: topic
          schema:
            type: boolean
        - description: include search of keyword within repository description
          in: query
          name: includeDesc
          schema:
            type: boolean
        - description: search only for repos that the user with the given id owns or
            contributes to
          in: query
          name: uid
          schema:
            type: integer
            format: int64
        - description: search only for repos that the user with the given id has starred
          in: query
          name: starredBy
          schema:
            type: integer
            format: int64
        - description: include private repositories this user has access to (defaults to
            true)
          in: query
          name: private
          schema:
            type: boolean
        - description: page number of results to return (1-based)
          in: query
          name: page
          schema:
            type: integer
        - description: page size of results, maximum page size is 50
          in: query
          name: limit
          schema:
            type: integer
        - description: type of repository to search for. Supported values are "fork",
            "source", "mirror" and "collaborative"
          in: query
          name: mode
          schema:
            type: string
        - description: if `uid` is given, search only for repos that the user owns
          in: query
          name: exclusive
          schema:
            type: boolean
        - description: sort repos by attribute. Supported values are "alpha", "created",
            "updated", "size", and "id". Default is "alpha"
          in: query
          name: sort
          schema:
            type: string
        - description: sort order, either "asc" (ascending) or "desc" (descending). Default
            is "asc", ignored if "sort" is not specified.
          in: query
          name: order
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/SearchResults"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Search for repositories
      tags:
        - repository
  "/repos/{owner}/{repo}":
    delete:
      operationId: repoDelete
      parameters:
        - description: owner of the repo to delete
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo to delete
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
      summary: Delete a repository
      tags:
        - repository
    get:
      operationId: repoGet
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Repository"
      summary: Get a repository
      tags:
        - repository
    patch:
      operationId: repoEdit
      parameters:
        - description: owner of the repo to edit
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo to edit
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditRepoOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/EditRepoOption"
        description: Properties of a repo that you can edit
      responses:
        "200":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Edit a repository's properties. Only fields that are set will be changed.
      tags:
        - repository
  "/repos/{owner}/{repo}/archive/{archive}":
    get:
      operationId: repoGetArchive
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: archive to download, consisting of a git reference and archive
          in: path
          name: archive
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
      summary: Get an archive of a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/branches":
    get:
      operationId: repoListBranches
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/BranchList"
      summary: List a repository's branches
      tags:
        - repository
  "/repos/{owner}/{repo}/branches/{branch}":
    get:
      operationId: repoGetBranch
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: branch to get
          in: path
          name: branch
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Branch"
      summary: Retrieve a specific branch from a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/collaborators":
    get:
      operationId: repoListCollaborators
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List a repository's collaborators
      tags:
        - repository
  "/repos/{owner}/{repo}/collaborators/{collaborator}":
    delete:
      operationId: repoDeleteCollaborator
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: username of the collaborator to delete
          in: path
          name: collaborator
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a collaborator from a repository
      tags:
        - repository
    get:
      operationId: repoCheckCollaborator
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: username of the collaborator
          in: path
          name: collaborator
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/empty"
      summary: Check if a user is a collaborator of a repository
      tags:
        - repository
    put:
      operationId: repoAddCollaborator
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: username of the collaborator to add
          in: path
          name: collaborator
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCollaboratorOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/AddCollaboratorOption"
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Add a collaborator to a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/commits":
    get:
      operationId: repoGetAllCommits
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: SHA or branch to start listing commits from (usually 'master')
          in: query
          name: sha
          schema:
            type: string
        - description: page number of requested commits
          in: query
          name: page
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CommitList"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/EmptyRepository"
      summary: Get a list of all commits from a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/commits/{ref}/statuses":
    get:
      operationId: repoGetCombinedStatusByRef
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: name of branch/tag/commit
          in: path
          name: ref
          required: true
          schema:
            type: string
        - description: page number of results
          in: query
          name: page
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/Status"
      summary: Get a commit's combined status, by branch/tag/commit reference
      tags:
        - repository
  "/repos/{owner}/{repo}/contents":
    get:
      operationId: repoGetContentsList
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: The name of the commit/branch/tag. Default the repository’s default
            branch (usually master)
          in: query
          name: ref
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ContentsListResponse"
      summary: Gets the metadata of all the entries of the root dir
      tags:
        - repository
  "/repos/{owner}/{repo}/contents/{filepath}":
    delete:
      operationId: repoDeleteFile
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: path of the file to delete
          in: path
          name: filepath
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteFileOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/FileDeleteResponse"
      summary: Delete a file in a repository
      tags:
        - repository
    get:
      operationId: repoGetContents
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: path of the dir, file, symlink or submodule in the repo
          in: path
          name: filepath
          required: true
          schema:
            type: string
        - description: The name of the commit/branch/tag. Default the repository’s default
            branch (usually master)
          in: query
          name: ref
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ContentsResponse"
      summary: Gets the metadata and contents (if a file) of an entry in a repository,
        or a list of entries if a dir
      tags:
        - repository
    post:
      operationId: repoCreateFile
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: path of the file to create
          in: path
          name: filepath
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFileOptions"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/FileResponse"
      summary: Create a file in a repository
      tags:
        - repository
    put:
      operationId: repoUpdateFile
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: path of the file to update
          in: path
          name: filepath
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFileOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/FileResponse"
      summary: Update a file in a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/editorconfig/{filepath}":
    get:
      operationId: repoGetEditorConfig
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: filepath of file to get
          in: path
          name: filepath
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
      summary: Get the EditorConfig definitions of a file in a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/forks":
    get:
      operationId: listForks
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List a repository's forks
      tags:
        - repository
    post:
      operationId: createFork
      parameters:
        - description: owner of the repo to fork
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo to fork
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateForkOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateForkOption"
      responses:
        "202":
          $ref: "#/components/responses/Repository"
      summary: Fork a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/git/blobs/{sha}":
    get:
      operationId: GetBlob
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: sha of the commit
          in: path
          name: sha
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GitBlobResponse"
      summary: Gets the blob of a repository.
      tags:
        - repository
  "/repos/{owner}/{repo}/git/commits/{sha}":
    get:
      operationId: repoGetSingleCommit
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: the commit hash
          in: path
          name: sha
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Commit"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get a single commit from a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/git/refs":
    get:
      operationId: repoListAllGitRefs
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ReferenceList"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get specified ref or filtered repository's refs
      tags:
        - repository
  "/repos/{owner}/{repo}/git/refs/{ref}":
    get:
      operationId: repoListGitRefs
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: part or full name of the ref
          in: path
          name: ref
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ReferenceList"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get specified ref or filtered repository's refs
      tags:
        - repository
  "/repos/{owner}/{repo}/git/tags/{sha}":
    get:
      operationId: GetTag
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: sha of the tag. The Git tags API only supports annotated tag
            objects, not lightweight tags.
          in: path
          name: sha
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/AnnotatedTag"
      summary: Gets the tag object of an annotated tag (not lightweight tags)
      tags:
        - repository
  "/repos/{owner}/{repo}/git/trees/{sha}":
    get:
      operationId: GetTree
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: sha of the commit
          in: path
          name: sha
          required: true
          schema:
            type: string
        - description: show all directories and files
          in: query
          name: recursive
          schema:
            type: boolean
        - description: page number; the 'truncated' field in the response will be true if
            there are still more items after this page, false if the last page
          in: query
          name: page
          schema:
            type: integer
        - description: number of items per page; default is 1000 or what is set in app.ini
            as DEFAULT_GIT_TREES_PER_PAGE
          in: query
          name: per_page
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/GitTreeResponse"
      summary: Gets the tree of a repository.
      tags:
        - repository
  "/repos/{owner}/{repo}/hooks":
    get:
      operationId: repoListHooks
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/HookList"
      summary: List the hooks in a repository
      tags:
        - repository
    post:
      operationId: repoCreateHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHookOption"
      responses:
        "201":
          $ref: "#/components/responses/Hook"
      summary: Create a hook
      tags:
        - repository
  "/repos/{owner}/{repo}/hooks/git":
    get:
      operationId: repoListGitHooks
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GitHookList"
      summary: List the Git hooks in a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/hooks/git/{id}":
    delete:
      operationId: repoDeleteGitHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the hook to get
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Delete a Git hook in a repository
      tags:
        - repository
    get:
      operationId: repoGetGitHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the hook to get
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GitHook"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get a Git hook
      tags:
        - repository
    patch:
      operationId: repoEditGitHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the hook to get
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditGitHookOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/EditGitHookOption"
      responses:
        "200":
          $ref: "#/components/responses/GitHook"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Edit a Git hook in a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/hooks/{id}":
    delete:
      operationId: repoDeleteHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the hook to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Delete a hook in a repository
      tags:
        - repository
    get:
      operationId: repoGetHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the hook to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Hook"
      summary: Get a hook
      tags:
        - repository
    patch:
      operationId: repoEditHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the hook
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditHookOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/EditHookOption"
      responses:
        "200":
          $ref: "#/components/responses/Hook"
      summary: Edit a hook in a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/hooks/{id}/tests":
    post:
      operationId: repoTestHook
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the hook to test
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Test a push webhook
      tags:
        - repository
  "/repos/{owner}/{repo}/issues":
    get:
      operationId: issueListIssues
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: whether issue is open or closed
          in: query
          name: state
          schema:
            type: string
        - description: comma separated list of labels. Fetch only issues that have any of
            this labels. Non existent labels are discarded
          in: query
          name: labels
          schema:
            type: string
        - description: page number of requested issues
          in: query
          name: page
          schema:
            type: integer
        - description: search string
          in: query
          name: q
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/IssueList"
      summary: List a repository's issues
      tags:
        - issue
    post:
      operationId: issueCreateIssue
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueOption"
      responses:
        "201":
          $ref: "#/components/responses/Issue"
      summary: Create an issue. If using deadline only the date will be taken into
        account, and time of day ignored.
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/comments":
    get:
      operationId: issueGetRepoComments
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: if provided, only comments updated since the provided time are
            returned.
          in: query
          name: since
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/CommentList"
      summary: List all comments in a repository
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/comments/{id}":
    delete:
      operationId: issueDeleteComment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of comment to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a comment
      tags:
        - issue
    patch:
      operationId: issueEditComment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the comment to edit
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditIssueCommentOption"
      responses:
        "200":
          $ref: "#/components/responses/Comment"
      summary: Edit a comment
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{id}/times":
    get:
      operationId: issueTrackedTimes
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
      summary: List an issue's tracked times
      tags:
        - issue
    post:
      operationId: issueAddTime
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue to add tracked time to
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTimeOption"
      responses:
        "200":
          $ref: "#/components/responses/TrackedTime"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/error"
      summary: Add a tracked time to a issue
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}":
    get:
      operationId: issueGetIssue
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue to get
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Issue"
      summary: Get an issue
      tags:
        - issue
    patch:
      operationId: issueEditIssue
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue to edit
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditIssueOption"
      responses:
        "201":
          $ref: "#/components/responses/Issue"
      summary: Edit an issue. If using deadline only the date will be taken into
        account, and time of day ignored.
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/comments":
    get:
      operationId: issueGetComments
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
        - description: if provided, only comments updated since the specified time are
            returned.
          in: query
          name: since
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/CommentList"
      summary: List all comments on an issue
      tags:
        - issue
    post:
      operationId: issueCreateComment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueCommentOption"
      responses:
        "201":
          $ref: "#/components/responses/Comment"
      summary: Add a comment to an issue
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/comments/{id}":
    delete:
      deprecated: true
      operationId: issueDeleteCommentDeprecated
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: this parameter is ignored
          in: path
          name: index
          required: true
          schema:
            type: integer
        - description: id of comment to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a comment
      tags:
        - issue
    patch:
      deprecated: true
      operationId: issueEditCommentDeprecated
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: this parameter is ignored
          in: path
          name: index
          required: true
          schema:
            type: integer
        - description: id of the comment to edit
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditIssueCommentOption"
      responses:
        "200":
          $ref: "#/components/responses/Comment"
      summary: Edit a comment
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/deadline":
    post:
      operationId: issueEditIssueDeadline
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue to create or update a deadline on
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditDeadlineOption"
      responses:
        "201":
          $ref: "#/components/responses/IssueDeadline"
        "403":
          description: Not repo writer
        "404":
          description: Issue not found
      summary: Set an issue deadline. If set to null, the deadline is deleted. If using
        deadline only the date will be taken into account, and time of day
        ignored.
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/labels":
    delete:
      operationId: issueClearLabels
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Remove all labels from an issue
      tags:
        - issue
    get:
      operationId: issueGetLabels
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get an issue's labels
      tags:
        - issue
    post:
      operationId: issueAddLabel
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/IssueLabelsOption"
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
      summary: Add a label to an issue
      tags:
        - issue
    put:
      operationId: issueReplaceLabels
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/IssueLabelsOption"
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
      summary: Replace an issue's labels
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/labels/{id}":
    delete:
      operationId: issueRemoveLabel
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the label to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Remove a label from an issue
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/stopwatch/start":
    post:
      operationId: issueStartStopWatch
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue to create the stopwatch on
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          $ref: "#/components/responses/empty"
        "403":
          description: Not repo writer, user does not have rights to toggle stopwatch
        "404":
          description: Issue not found
        "409":
          description: Cannot start a stopwatch again if it already exists
      summary: Start stopwatch on an issue.
      tags:
        - issue
  "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop":
    post:
      operationId: issueStopWatch
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the issue to stop the stopwatch on
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          $ref: "#/components/responses/empty"
        "403":
          description: Not repo writer, user does not have rights to toggle stopwatch
        "404":
          description: Issue not found
        "409":
          description: Cannot stop a non existent stopwatch
      summary: Stop an issue's existing stopwatch.
      tags:
        - issue
  "/repos/{owner}/{repo}/keys":
    get:
      operationId: repoListKeys
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: the key_id to search for
          in: query
          name: key_id
          schema:
            type: integer
        - description: fingerprint of the key
          in: query
          name: fingerprint
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/DeployKeyList"
      summary: List a repository's keys
      tags:
        - repository
    post:
      operationId: repoCreateKey
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/DeployKey"
      summary: Add a key to a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/keys/{id}":
    delete:
      operationId: repoDeleteKey
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the key to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a key from a repository
      tags:
        - repository
    get:
      operationId: repoGetKey
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the key to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/DeployKey"
      summary: Get a repository's key by id
      tags:
        - repository
  "/repos/{owner}/{repo}/labels":
    get:
      operationId: issueListLabels
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
      summary: Get all of a repository's labels
      tags:
        - issue
    post:
      operationId: issueCreateLabel
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLabelOption"
      responses:
        "201":
          $ref: "#/components/responses/Label"
      summary: Create a label
      tags:
        - issue
  "/repos/{owner}/{repo}/labels/{id}":
    delete:
      operationId: issueDeleteLabel
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the label to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a label
      tags:
        - issue
    get:
      operationId: issueGetLabel
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the label to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Label"
      summary: Get a single label
      tags:
        - issue
    patch:
      operationId: issueEditLabel
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the label to edit
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditLabelOption"
      responses:
        "200":
          $ref: "#/components/responses/Label"
      summary: Update a label
      tags:
        - issue
  "/repos/{owner}/{repo}/milestones":
    get:
      operationId: issueGetMilestonesList
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: Milestone state, Recognised values are open, closed and all.
            Defaults to "open"
          in: query
          name: state
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/MilestoneList"
      summary: Get all of a repository's opened milestones
      tags:
        - issue
    post:
      operationId: issueCreateMilestone
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMilestoneOption"
      responses:
        "201":
          $ref: "#/components/responses/Milestone"
      summary: Create a milestone
      tags:
        - issue
  "/repos/{owner}/{repo}/milestones/{id}":
    delete:
      operationId: issueDeleteMilestone
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the milestone to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a milestone
      tags:
        - issue
    get:
      operationId: issueGetMilestone
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the milestone
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Milestone"
      summary: Get a milestone
      tags:
        - issue
    patch:
      operationId: issueEditMilestone
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the milestone
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditMilestoneOption"
      responses:
        "200":
          $ref: "#/components/responses/Milestone"
      summary: Update a milestone
      tags:
        - issue
  "/repos/{owner}/{repo}/mirror-sync":
    post:
      operationId: repoMirrorSync
      parameters:
        - description: owner of the repo to sync
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo to sync
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/empty"
      summary: Sync a mirrored repository
      tags:
        - repository
  "/repos/{owner}/{repo}/pulls":
    get:
      operationId: repoListPullRequests
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: Page number
          in: query
          name: page
          schema:
            type: integer
        - description: "State of pull request: open or closed (optional)"
          in: query
          name: state
          schema:
            type: string
            enum:
              - closed
              - open
              - all
        - description: Type of sort
          in: query
          name: sort
          schema:
            type: string
            enum:
              - oldest
              - recentupdate
              - leastupdate
              - mostcomment
              - leastcomment
              - priority
        - description: ID of the milestone
          in: query
          name: milestone
          schema:
            type: integer
            format: int64
        - description: Label IDs
          in: query
          name: labels
          explode: true
          schema:
            type: array
            items:
              format: int64
              type: integer
      responses:
        "200":
          $ref: "#/components/responses/PullRequestList"
      summary: List a repo's pull requests
      tags:
        - repository
    post:
      operationId: repoCreatePullRequest
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePullRequestOption"
      responses:
        "201":
          $ref: "#/components/responses/PullRequest"
      summary: Create a pull request
      tags:
        - repository
  "/repos/{owner}/{repo}/pulls/{index}":
    get:
      operationId: repoGetPullRequest
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the pull request to get
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PullRequest"
      summary: Get a pull request
      tags:
        - repository
    patch:
      operationId: repoEditPullRequest
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the pull request to edit
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditPullRequestOption"
      responses:
        "201":
          $ref: "#/components/responses/PullRequest"
      summary: Update a pull request
      tags:
        - repository
  "/repos/{owner}/{repo}/pulls/{index}/merge":
    get:
      operationId: repoPullRequestIsMerged
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the pull request
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: pull request has been merged
        "404":
          description: pull request has not been merged
      summary: Check if a pull request has been merged
      tags:
        - repository
    post:
      operationId: repoMergePullRequest
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: index of the pull request to merge
          in: path
          name: index
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergePullRequestOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/MergePullRequestOption"
      responses:
        "200":
          $ref: "#/components/responses/empty"
        "405":
          $ref: "#/components/responses/empty"
      summary: Merge a pull request
      tags:
        - repository
  "/repos/{owner}/{repo}/raw/{filepath}":
    get:
      operationId: repoGetRawFile
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: filepath of the file to get
          in: path
          name: filepath
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
      summary: Get a file from a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/releases":
    get:
      operationId: repoListReleases
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: page wants to load
          in: query
          name: page
          schema:
            type: integer
        - description: items count every page wants to load
          in: query
          name: per_page
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/ReleaseList"
      summary: List a repo's releases
      tags:
        - repository
    post:
      operationId: repoCreateRelease
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReleaseOption"
      responses:
        "201":
          $ref: "#/components/responses/Release"
      summary: Create a release
      tags:
        - repository
  "/repos/{owner}/{repo}/releases/{id}":
    delete:
      operationId: repoDeleteRelease
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a release
      tags:
        - repository
    get:
      operationId: repoGetRelease
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Release"
      summary: Get a release
      tags:
        - repository
    patch:
      operationId: repoEditRelease
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release to edit
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditReleaseOption"
      responses:
        "200":
          $ref: "#/components/responses/Release"
      summary: Update a release
      tags:
        - repository
  "/repos/{owner}/{repo}/releases/{id}/assets":
    get:
      operationId: repoListReleaseAttachments
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/AttachmentList"
      summary: List release's attachments
      tags:
        - repository
    post:
      operationId: repoCreateReleaseAttachment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: name of the attachment
          in: query
          name: name
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  description: attachment to upload
                  type: string
                  format: binary
              required:
                - attachment
      responses:
        "201":
          $ref: "#/components/responses/Attachment"
      summary: Create a release attachment
      tags:
        - repository
  "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}":
    delete:
      operationId: repoDeleteReleaseAttachment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the attachment to delete
          in: path
          name: attachment_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a release attachment
      tags:
        - repository
    get:
      operationId: repoGetReleaseAttachment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the attachment to get
          in: path
          name: attachment_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Attachment"
      summary: Get a release attachment
      tags:
        - repository
    patch:
      operationId: repoEditReleaseAttachment
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: id of the release
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the attachment to edit
          in: path
          name: attachment_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditAttachmentOptions"
      responses:
        "201":
          $ref: "#/components/responses/Attachment"
      summary: Edit a release attachment
      tags:
        - repository
  "/repos/{owner}/{repo}/stargazers":
    get:
      operationId: repoListStargazers
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List a repo's stargazers
      tags:
        - repository
  "/repos/{owner}/{repo}/statuses/{sha}":
    get:
      operationId: repoListStatuses
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: sha of the commit
          in: path
          name: sha
          required: true
          schema:
            type: string
        - description: page number of results
          in: query
          name: page
          schema:
            type: integer
        - description: type of sort
          in: query
          name: sort
          schema:
            type: string
            enum:
              - oldest
              - recentupdate
              - leastupdate
              - leastindex
              - highestindex
        - description: type of state
          in: query
          name: state
          schema:
            type: string
            enum:
              - pending
              - success
              - error
              - failure
              - warning
      responses:
        "200":
          $ref: "#/components/responses/StatusList"
      summary: Get a commit's statuses
      tags:
        - repository
    post:
      operationId: repoCreateStatus
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: sha of the commit
          in: path
          name: sha
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStatusOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateStatusOption"
      responses:
        "200":
          $ref: "#/components/responses/StatusList"
      summary: Create a commit status
      tags:
        - repository
  "/repos/{owner}/{repo}/subscribers":
    get:
      operationId: repoListSubscribers
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List a repo's watchers
      tags:
        - repository
  "/repos/{owner}/{repo}/subscription":
    delete:
      operationId: userCurrentDeleteSubscription
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Unwatch a repo
      tags:
        - repository
    get:
      operationId: userCurrentCheckSubscription
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/WatchInfo"
      summary: Check if the current user is watching a repo
      tags:
        - repository
    put:
      operationId: userCurrentPutSubscription
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/WatchInfo"
      summary: Watch a repo
      tags:
        - repository
  "/repos/{owner}/{repo}/tags":
    get:
      operationId: repoListTags
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TagList"
      summary: List a repository's tags
      tags:
        - repository
  "/repos/{owner}/{repo}/times":
    get:
      operationId: repoTrackedTimes
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
      summary: List a repo's tracked times
      tags:
        - repository
  "/repos/{owner}/{repo}/times/{user}":
    get:
      operationId: userTrackedTimes
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: username of user
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
      summary: List a user's tracked times in a repo
      tags:
        - user
  "/repos/{owner}/{repo}/topics":
    get:
      operationId: repoListTopics
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TopicNames"
      summary: Get list of topics that a repository has
      tags:
        - repository
    put:
      operationId: repoUpdateTopics
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepoTopicOptions"
          text/plain:
            schema:
              $ref: "#/components/schemas/RepoTopicOptions"
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Replace list of topics for a repository
      tags:
        - repository
  "/repos/{owner}/{repo}/topics/{topic}":
    delete:
      operationId: repoDeleteTopic
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: name of the topic to delete
          in: path
          name: topic
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete a topic from a repository
      tags:
        - repository
    put:
      operationId: repoAddTopíc
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
        - description: name of the topic to add
          in: path
          name: topic
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Add a topic to a repository
      tags:
        - repository
  "/repositories/{id}":
    get:
      operationId: repoGetByID
      parameters:
        - description: id of the repo to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Repository"
      summary: Get a repository by id
      tags:
        - repository
  "/teams/{id}":
    delete:
      operationId: orgDeleteTeam
      parameters:
        - description: id of the team to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: team deleted
      summary: Delete a team
      tags:
        - organization
    get:
      operationId: orgGetTeam
      parameters:
        - description: id of the team to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Team"
      summary: Get a team
      tags:
        - organization
    patch:
      operationId: orgEditTeam
      parameters:
        - description: id of the team to edit
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditTeamOption"
      responses:
        "200":
          $ref: "#/components/responses/Team"
      summary: Edit a team
      tags:
        - organization
  "/teams/{id}/members":
    get:
      operationId: orgListTeamMembers
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List a team's members
      tags:
        - organization
  "/teams/{id}/members/{username}":
    delete:
      operationId: orgRemoveTeamMember
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: username of the user to remove
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Remove a team member
      tags:
        - organization
    get:
      operationId: orgListTeamMember
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: username of the member to list
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/User"
      summary: List a particular member of team
      tags:
        - organization
    put:
      operationId: orgAddTeamMember
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: username of the user to add
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Add a team member
      tags:
        - organization
  "/teams/{id}/repos":
    get:
      operationId: orgListTeamRepos
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List a team's repos
      tags:
        - organization
  "/teams/{id}/repos/{org}/{repo}":
    delete:
      description: This does not delete the repository, it only removes the repository from
        the team.
      operationId: orgRemoveTeamRepository
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: organization that owns the repo to remove
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: name of the repo to remove
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Remove a repository from a team
      tags:
        - organization
    put:
      operationId: orgAddTeamRepository
      parameters:
        - description: id of the team
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - description: organization that owns the repo to add
          in: path
          name: org
          required: true
          schema:
            type: string
        - description: name of the repo to add
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Add a repository to a team
      tags:
        - organization
  /topics/search:
    get:
      operationId: topicSearch
      parameters:
        - description: keywords to search
          in: query
          name: q
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TopicListResponse"
      summary: search topics via keyword
      tags:
        - repository
  /user:
    get:
      operationId: userGetCurrent
      responses:
        "200":
          $ref: "#/components/responses/User"
      summary: Get the authenticated user
      tags:
        - user
  /user/emails:
    delete:
      operationId: userDeleteEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteEmailOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/DeleteEmailOption"
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Delete email addresses
      tags:
        - user
    get:
      operationId: userListEmails
      responses:
        "200":
          $ref: "#/components/responses/EmailList"
      summary: List the authenticated user's email addresses
      tags:
        - user
    post:
      operationId: userAddEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEmailOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateEmailOption"
      responses:
        "201":
          $ref: "#/components/responses/EmailList"
      summary: Add email addresses
      tags:
        - user
  /user/followers:
    get:
      operationId: userCurrentListFollowers
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List the authenticated user's followers
      tags:
        - user
  /user/following:
    get:
      operationId: userCurrentListFollowing
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List the users that the authenticated user is following
      tags:
        - user
  "/user/following/{username}":
    delete:
      operationId: userCurrentDeleteFollow
      parameters:
        - description: username of user to unfollow
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Unfollow a user
      tags:
        - user
    get:
      operationId: userCurrentCheckFollowing
      parameters:
        - description: username of followed user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Check whether a user is followed by the authenticated user
      tags:
        - user
    put:
      operationId: userCurrentPutFollow
      parameters:
        - description: username of user to follow
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Follow a user
      tags:
        - user
  /user/gpg_keys:
    get:
      operationId: userCurrentListGPGKeys
      responses:
        "200":
          $ref: "#/components/responses/GPGKeyList"
      summary: List the authenticated user's GPG keys
      tags:
        - user
    post:
      operationId: userCurrentPostGPGKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGPGKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/GPGKey"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create a GPG key
      tags:
        - user
  "/user/gpg_keys/{id}":
    delete:
      operationId: userCurrentDeleteGPGKey
      parameters:
        - description: id of key to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
      summary: Remove a GPG key
      tags:
        - user
    get:
      operationId: userCurrentGetGPGKey
      parameters:
        - description: id of key to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/GPGKey"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get a GPG key
      tags:
        - user
  /user/keys:
    get:
      operationId: userCurrentListKeys
      parameters:
        - description: fingerprint of the key
          in: query
          name: fingerprint
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PublicKeyList"
      summary: List the authenticated user's public keys
      tags:
        - user
    post:
      operationId: userCurrentPostKey
      requestBody:
        $ref: "#/components/requestBodies/CreateKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/PublicKey"
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create a public key
      tags:
        - user
  "/user/keys/{id}":
    delete:
      operationId: userCurrentDeleteKey
      parameters:
        - description: id of key to delete
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Delete a public key
      tags:
        - user
    get:
      operationId: userCurrentGetKey
      parameters:
        - description: id of key to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PublicKey"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get a public key
      tags:
        - user
  /user/orgs:
    get:
      operationId: orgListCurrentUserOrgs
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
      summary: List the current user's organizations
      tags:
        - organization
  /user/repos:
    get:
      operationId: userCurrentListRepos
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List the repos that the authenticated user owns or has access to
      tags:
        - user
    post:
      operationId: createCurrentUserRepo
      requestBody:
        $ref: "#/components/requestBodies/CreateRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "409":
          description: The repository with the same name already exists.
        "422":
          $ref: "#/components/responses/validationError"
      summary: Create a repository
      tags:
        - repository
        - user
  /user/starred:
    get:
      operationId: userCurrentListStarred
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: The repos that the authenticated user has starred
      tags:
        - user
  "/user/starred/{owner}/{repo}":
    delete:
      operationId: userCurrentDeleteStar
      parameters:
        - description: owner of the repo to unstar
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo to unstar
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Unstar the given repo
      tags:
        - user
    get:
      operationId: userCurrentCheckStarring
      parameters:
        - description: owner of the repo
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Whether the authenticated is starring the repo
      tags:
        - user
    put:
      operationId: userCurrentPutStar
      parameters:
        - description: owner of the repo to star
          in: path
          name: owner
          required: true
          schema:
            type: string
        - description: name of the repo to star
          in: path
          name: repo
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: Star the given repo
      tags:
        - user
  /user/subscriptions:
    get:
      operationId: userCurrentListSubscriptions
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List repositories watched by the authenticated user
      tags:
        - user
  /user/teams:
    get:
      operationId: userListTeams
      responses:
        "200":
          $ref: "#/components/responses/TeamList"
      summary: List all the teams a user belongs to
      tags:
        - user
  /user/times:
    get:
      operationId: userCurrentTrackedTimes
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
      summary: List the current user's tracked times
      tags:
        - user
  /users/search:
    get:
      operationId: userSearch
      parameters:
        - description: keyword
          in: query
          name: q
          schema:
            type: string
        - description: ID of the user to search for
          in: query
          name: uid
          schema:
            type: integer
            format: int64
        - description: maximum number of users to return
          in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          description: SearchResults of a successful search
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/User"
                    type: array
                  ok:
                    type: boolean
                type: object
      summary: Search for users
      tags:
        - user
  "/users/{follower}/following/{followee}":
    get:
      operationId: userCheckFollowing
      parameters:
        - description: username of following user
          in: path
          name: follower
          required: true
          schema:
            type: string
        - description: username of followed user
          in: path
          name: followee
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Check if one user is following another user
      tags:
        - user
  "/users/{username}":
    get:
      operationId: userGet
      parameters:
        - description: username of user to get
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/User"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get a user
      tags:
        - user
  "/users/{username}/followers":
    get:
      operationId: userListFollowers
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List the given user's followers
      tags:
        - user
  "/users/{username}/following":
    get:
      operationId: userListFollowing
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
      summary: List the users that the given user is following
      tags:
        - user
  "/users/{username}/gpg_keys":
    get:
      operationId: userListGPGKeys
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GPGKeyList"
      summary: List the given user's GPG keys
      tags:
        - user
  "/users/{username}/heatmap":
    get:
      operationId: userGetHeatmapData
      parameters:
        - description: username of user to get
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserHeatmapData"
        "404":
          $ref: "#/components/responses/notFound"
      summary: Get a user's heatmap
      tags:
        - user
  "/users/{username}/keys":
    get:
      operationId: userListKeys
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
        - description: fingerprint of the key
          in: query
          name: fingerprint
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PublicKeyList"
      summary: List the given user's public keys
      tags:
        - user
  "/users/{username}/orgs":
    get:
      operationId: orgListUserOrgs
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
      summary: List a user's organizations
      tags:
        - organization
  "/users/{username}/repos":
    get:
      operationId: userListRepos
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List the repos owned by the given user
      tags:
        - user
  "/users/{username}/starred":
    get:
      operationId: userListStarred
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: The repos that the given user has starred
      tags:
        - user
  "/users/{username}/subscriptions":
    get:
      operationId: userListSubscriptions
      parameters:
        - description: username of the user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
      summary: List the repositories watched by a user
      tags:
        - user
  "/users/{username}/tokens":
    get:
      operationId: userGetTokens
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/AccessTokenList"
      summary: List the authenticated user's access tokens
      tags:
        - user
    post:
      operationId: userCreateToken
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          x-go-name: Name
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              required:
                - name
              type: object
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
      summary: Create an access token
      tags:
        - user
  "/users/{username}/tokens/{token}":
    delete:
      operationId: userDeleteAccessToken
      parameters:
        - description: username of user
          in: path
          name: username
          required: true
          schema:
            type: string
        - description: token to be deleted
          in: path
          name: token
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
      summary: delete an access token
      tags:
        - user
  /version:
    get:
      operationId: getVersion
      responses:
        "200":
          $ref: "#/components/responses/ServerVersion"
      summary: Returns the version of the Gitea application
      tags:
        - miscellaneous
servers:
  - url: http://try.gitea.io/api/v1
  - url: https://try.gitea.io/api/v1
components:
  responses:
    AccessToken:
      description: AccessToken represents an API access token.
      headers:
        id:
          schema:
            type: integer
            format: int64
        name:
          schema:
            type: string
        sha1:
          schema:
            type: string
        token_last_eight:
          schema:
            type: string
    AccessTokenList:
      description: AccessTokenList represents a list of API access token.
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/AccessToken"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/AccessToken"
            type: array
    AnnotatedTag:
      description: AnnotatedTag
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnnotatedTag"
        text/html:
          schema:
            $ref: "#/components/schemas/AnnotatedTag"
    Attachment:
      description: Attachment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attachment"
        text/html:
          schema:
            $ref: "#/components/schemas/Attachment"
    AttachmentList:
      description: AttachmentList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Attachment"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Attachment"
            type: array
    Branch:
      description: Branch
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Branch"
        text/html:
          schema:
            $ref: "#/components/schemas/Branch"
    BranchList:
      description: BranchList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Branch"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Branch"
            type: array
    Comment:
      description: Comment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"
        text/html:
          schema:
            $ref: "#/components/schemas/Comment"
    CommentList:
      description: CommentList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Comment"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Comment"
            type: array
    Commit:
      description: Commit
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Commit"
        text/html:
          schema:
            $ref: "#/components/schemas/Commit"
    CommitList:
      description: CommitList
      headers:
        X-HasMore:
          description: True if there is another page
          schema:
            type: boolean
        X-Page:
          description: The current page
          schema:
            type: integer
            format: int64
        X-PageCount:
          description: Total number of pages
          schema:
            type: integer
            format: int64
        X-PerPage:
          description: Commits per page
          schema:
            type: integer
            format: int64
        X-Total:
          description: Total commit count
          schema:
            type: integer
            format: int64
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Commit"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Commit"
            type: array
    ContentsListResponse:
      description: ContentsListResponse
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/ContentsResponse"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/ContentsResponse"
            type: array
    ContentsResponse:
      description: ContentsResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContentsResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/ContentsResponse"
    DeployKey:
      description: DeployKey
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeployKey"
        text/html:
          schema:
            $ref: "#/components/schemas/DeployKey"
    DeployKeyList:
      description: DeployKeyList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/DeployKey"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/DeployKey"
            type: array
    EmailList:
      description: EmailList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Email"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Email"
            type: array
    EmptyRepository:
      description: EmptyRepository
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
        text/html:
          schema:
            $ref: "#/components/schemas/APIError"
    FileDeleteResponse:
      description: FileDeleteResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileDeleteResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/FileDeleteResponse"
    FileResponse:
      description: FileResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/FileResponse"
    GPGKey:
      description: GPGKey
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GPGKey"
        text/html:
          schema:
            $ref: "#/components/schemas/GPGKey"
    GPGKeyList:
      description: GPGKeyList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/GPGKey"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/GPGKey"
            type: array
    GitBlobResponse:
      description: GitBlobResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GitBlobResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/GitBlobResponse"
    GitHook:
      description: GitHook
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GitHook"
        text/html:
          schema:
            $ref: "#/components/schemas/GitHook"
    GitHookList:
      description: GitHookList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/GitHook"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/GitHook"
            type: array
    GitTreeResponse:
      description: GitTreeResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GitTreeResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/GitTreeResponse"
    Hook:
      description: Hook
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Hook"
        text/html:
          schema:
            $ref: "#/components/schemas/Hook"
    HookList:
      description: HookList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Hook"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Hook"
            type: array
    Issue:
      description: Issue
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Issue"
        text/html:
          schema:
            $ref: "#/components/schemas/Issue"
    IssueDeadline:
      description: IssueDeadline
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IssueDeadline"
        text/html:
          schema:
            $ref: "#/components/schemas/IssueDeadline"
    IssueList:
      description: IssueList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Issue"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Issue"
            type: array
    Label:
      description: Label
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Label"
        text/html:
          schema:
            $ref: "#/components/schemas/Label"
    LabelList:
      description: LabelList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Label"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Label"
            type: array
    MarkdownRender:
      description: MarkdownRender is a rendered markdown document
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    Milestone:
      description: Milestone
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Milestone"
        text/html:
          schema:
            $ref: "#/components/schemas/Milestone"
    MilestoneList:
      description: MilestoneList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Milestone"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Milestone"
            type: array
    Organization:
      description: Organization
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Organization"
        text/html:
          schema:
            $ref: "#/components/schemas/Organization"
    OrganizationList:
      description: OrganizationList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Organization"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Organization"
            type: array
    PublicKey:
      description: PublicKey
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublicKey"
        text/html:
          schema:
            $ref: "#/components/schemas/PublicKey"
    PublicKeyList:
      description: PublicKeyList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/PublicKey"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/PublicKey"
            type: array
    PullRequest:
      description: PullRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PullRequest"
        text/html:
          schema:
            $ref: "#/components/schemas/PullRequest"
    PullRequestList:
      description: PullRequestList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/PullRequest"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/PullRequest"
            type: array
    Reference:
      description: Reference
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Reference"
        text/html:
          schema:
            $ref: "#/components/schemas/Reference"
    ReferenceList:
      description: ReferenceList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Reference"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Reference"
            type: array
    Release:
      description: Release
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Release"
        text/html:
          schema:
            $ref: "#/components/schemas/Release"
    ReleaseList:
      description: ReleaseList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Release"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Release"
            type: array
    Repository:
      description: Repository
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Repository"
        text/html:
          schema:
            $ref: "#/components/schemas/Repository"
    RepositoryList:
      description: RepositoryList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Repository"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Repository"
            type: array
    SearchResults:
      description: SearchResults
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchResults"
        text/html:
          schema:
            $ref: "#/components/schemas/SearchResults"
    ServerVersion:
      description: ServerVersion
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerVersion"
        text/html:
          schema:
            $ref: "#/components/schemas/ServerVersion"
    Status:
      description: Status
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Status"
        text/html:
          schema:
            $ref: "#/components/schemas/Status"
    StatusList:
      description: StatusList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Status"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Status"
            type: array
    Tag:
      description: Tag
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
        text/html:
          schema:
            $ref: "#/components/schemas/Tag"
    TagList:
      description: TagList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Tag"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Tag"
            type: array
    Team:
      description: Team
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"
        text/html:
          schema:
            $ref: "#/components/schemas/Team"
    TeamList:
      description: TeamList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/Team"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/Team"
            type: array
    TopicListResponse:
      description: TopicListResponse
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/TopicResponse"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/TopicResponse"
            type: array
    TopicNames:
      description: TopicNames
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TopicName"
        text/html:
          schema:
            $ref: "#/components/schemas/TopicName"
    TrackedTime:
      description: TrackedTime
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TrackedTime"
        text/html:
          schema:
            $ref: "#/components/schemas/TrackedTime"
    TrackedTimeList:
      description: TrackedTimeList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/TrackedTime"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/TrackedTime"
            type: array
    User:
      description: User
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
        text/html:
          schema:
            $ref: "#/components/schemas/User"
    UserHeatmapData:
      description: UserHeatmapData
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/UserHeatmapData"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/UserHeatmapData"
            type: array
    UserList:
      description: UserList
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/User"
            type: array
        text/html:
          schema:
            items:
              $ref: "#/components/schemas/User"
            type: array
    WatchInfo:
      description: WatchInfo
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WatchInfo"
        text/html:
          schema:
            $ref: "#/components/schemas/WatchInfo"
    empty:
      description: APIEmpty is an empty response
    error:
      description: APIError is error format response
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    forbidden:
      description: APIForbiddenError is a forbidden error response
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    notFound:
      description: APINotFound is a not found empty response
    parameterBodies:
      description: parameterBodies
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RepoTopicOptions"
        text/html:
          schema:
            $ref: "#/components/schemas/RepoTopicOptions"
    redirect:
      description: APIRedirect is a redirect response
    validationError:
      description: APIValidationError is error format response related to input validation
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
  requestBodies:
    CreateKeyOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateKeyOption"
    CreateOrgOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateOrgOption"
      required: true
    IssueLabelsOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IssueLabelsOption"
    CreateRepoOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateRepoOption"
    EditIssueCommentOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EditIssueCommentOption"
  securitySchemes:
    AccessToken:
      in: query
      name: access_token
      type: apiKey
    AuthorizationHeaderToken:
      description: API tokens must be prepended with "token" followed by a space.
      in: header
      name: Authorization
      type: apiKey
    BasicAuth:
      type: http
      scheme: basic
    SudoHeader:
      description: Sudo API request as the user provided as the key. Admin privileges are
        required.
      in: header
      name: Sudo
      type: apiKey
    SudoParam:
      description: Sudo API request as the user provided as the key. Admin privileges are
        required.
      in: query
      name: sudo
      type: apiKey
    Token:
      in: query
      name: token
      type: apiKey
  schemas:
    APIError:
      description: APIError is an api error with a message
      properties:
        message:
          type: string
          x-go-name: Message
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AccessToken:
      properties:
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        sha1:
          type: string
          x-go-name: Token
        token_last_eight:
          type: string
          x-go-name: TokenLastEight
      title: AccessToken represents an API access token.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AddCollaboratorOption:
      description: AddCollaboratorOption options when adding a user as a collaborator of a
        repository
      properties:
        permission:
          type: string
          x-go-name: Permission
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AddTimeOption:
      description: AddTimeOption options for adding time to an issue
      properties:
        time:
          description: time in seconds
          format: int64
          type: integer
          x-go-name: Time
      required:
        - time
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AnnotatedTag:
      description: AnnotatedTag represents an annotated tag
      properties:
        message:
          type: string
          x-go-name: Message
        object:
          $ref: "#/components/schemas/AnnotatedTagObject"
        sha:
          type: string
          x-go-name: SHA
        tag:
          type: string
          x-go-name: Tag
        tagger:
          $ref: "#/components/schemas/CommitUser"
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AnnotatedTagObject:
      description: AnnotatedTagObject contains meta information of the tag object
      properties:
        sha:
          type: string
          x-go-name: SHA
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Attachment:
      description: Attachment a generic attachment
      properties:
        browser_download_url:
          type: string
          x-go-name: DownloadURL
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        download_count:
          format: int64
          type: integer
          x-go-name: DownloadCount
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        size:
          format: int64
          type: integer
          x-go-name: Size
        uuid:
          type: string
          x-go-name: UUID
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Branch:
      description: Branch represents a repository branch
      properties:
        commit:
          $ref: "#/components/schemas/PayloadCommit"
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Comment:
      description: Comment represents a comment on a commit or issue
      properties:
        body:
          type: string
          x-go-name: Body
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        issue_url:
          type: string
          x-go-name: IssueURL
        original_author:
          type: string
          x-go-name: OriginalAuthor
        original_author_id:
          format: int64
          type: integer
          x-go-name: OriginalAuthorID
        pull_request_url:
          type: string
          x-go-name: PRURL
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        user:
          $ref: "#/components/schemas/User"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Commit:
      properties:
        author:
          $ref: "#/components/schemas/User"
        commit:
          $ref: "#/components/schemas/RepoCommit"
        committer:
          $ref: "#/components/schemas/User"
        html_url:
          type: string
          x-go-name: HTMLURL
        parents:
          items:
            $ref: "#/components/schemas/CommitMeta"
          type: array
          x-go-name: Parents
        sha:
          type: string
          x-go-name: SHA
        url:
          type: string
          x-go-name: URL
      title: Commit contains information generated from a Git commit.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitMeta:
      properties:
        sha:
          type: string
          x-go-name: SHA
        url:
          type: string
          x-go-name: URL
      title: CommitMeta contains meta information of a commit in terms of API.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitUser:
      properties:
        date:
          type: string
          x-go-name: Date
        email:
          format: email
          type: string
          x-go-name: Email
        name:
          type: string
          x-go-name: Name
      title: CommitUser contains information of a user in the context of a commit.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ContentsResponse:
      description: ContentsResponse contains information about a repo's entry's (dir, file,
        symlink, submodule) metadata and content
      properties:
        _links:
          $ref: "#/components/schemas/FileLinksResponse"
        content:
          description: "`content` is populated when `type` is `file`, otherwise null"
          type: string
          x-go-name: Content
        download_url:
          type: string
          x-go-name: DownloadURL
        encoding:
          description: "`encoding` is populated when `type` is `file`, otherwise null"
          type: string
          x-go-name: Encoding
        git_url:
          type: string
          x-go-name: GitURL
        html_url:
          type: string
          x-go-name: HTMLURL
        name:
          type: string
          x-go-name: Name
        path:
          type: string
          x-go-name: Path
        sha:
          type: string
          x-go-name: SHA
        size:
          format: int64
          type: integer
          x-go-name: Size
        submodule_git_url:
          description: "`submodule_git_url` is populated when `type` is `submodule`,
            otherwise null"
          type: string
          x-go-name: SubmoduleGitURL
        target:
          description: "`target` is populated when `type` is `symlink`, otherwise null"
          type: string
          x-go-name: Target
        type:
          description: "`type` will be `file`, `dir`, `symlink`, or `submodule`"
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateEmailOption:
      description: CreateEmailOption options when creating email addresses
      properties:
        emails:
          description: email addresses to add
          items:
            type: string
          type: array
          x-go-name: Emails
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateFileOptions:
      description: >-
        CreateFileOptions options for creating files

        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      properties:
        author:
          $ref: "#/components/schemas/Identity"
        branch:
          description: branch (optional) to base this file from. if not given, the default
            branch is used
          type: string
          x-go-name: BranchName
        committer:
          $ref: "#/components/schemas/Identity"
        content:
          description: content must be base64 encoded
          type: string
          x-go-name: Content
        message:
          description: message (optional) for the commit of this file. if not supplied, a
            default message will be used
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch` before
            creating the file
          type: string
          x-go-name: NewBranchName
      required:
        - content
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateForkOption:
      description: CreateForkOption options for creating a fork
      properties:
        organization:
          description: organization name, if forking into an organization
          type: string
          x-go-name: Organization
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateGPGKeyOption:
      description: CreateGPGKeyOption options create user GPG key
      properties:
        armored_public_key:
          description: An armored GPG key to add
          type: string
          uniqueItems: true
          x-go-name: ArmoredKey
      required:
        - armored_public_key
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateHookOption:
      description: CreateHookOption options when create a hook
      properties:
        active:
          default: false
          type: boolean
          x-go-name: Active
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          additionalProperties:
            type: string
          type: object
          x-go-name: Config
        events:
          items:
            type: string
          type: array
          x-go-name: Events
        type:
          enum:
            - gitea
            - gogs
            - slack
            - discord
          type: string
          x-go-name: Type
      required:
        - type
        - config
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateIssueCommentOption:
      description: CreateIssueCommentOption options for creating a comment on an issue
      properties:
        body:
          type: string
          x-go-name: Body
      required:
        - body
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateIssueOption:
      description: CreateIssueOption options to create one issue
      properties:
        assignee:
          description: username of assignee
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        closed:
          type: boolean
          x-go-name: Closed
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        labels:
          description: list of label ids
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
        milestone:
          description: milestone id
          format: int64
          type: integer
          x-go-name: Milestone
        title:
          type: string
          x-go-name: Title
      required:
        - title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateKeyOption:
      description: CreateKeyOption options when creating a key
      properties:
        key:
          description: An armored SSH key to add
          type: string
          uniqueItems: true
          x-go-name: Key
        read_only:
          description: Describe if the key has only read access or read/write
          type: boolean
          x-go-name: ReadOnly
        title:
          description: Title of the key to add
          type: string
          uniqueItems: true
          x-go-name: Title
      required:
        - title
        - key
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateLabelOption:
      description: CreateLabelOption options for creating a label
      properties:
        color:
          example: "#00aabb"
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        name:
          type: string
          x-go-name: Name
      required:
        - name
        - color
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateMilestoneOption:
      description: CreateMilestoneOption options for creating a milestone
      properties:
        description:
          type: string
          x-go-name: Description
        due_on:
          format: date-time
          type: string
          x-go-name: Deadline
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateOrgOption:
      description: CreateOrgOption options for creating an organization
      properties:
        description:
          type: string
          x-go-name: Description
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        username:
          type: string
          x-go-name: UserName
        visibility:
          description: possible values are `public` (default), `limited` or `private`
          enum:
            - public
            - limited
            - private
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      required:
        - username
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullRequestOption:
      description: CreatePullRequestOption options when creating a pull request
      properties:
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        base:
          type: string
          x-go-name: Base
        body:
          type: string
          x-go-name: Body
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        head:
          type: string
          x-go-name: Head
        labels:
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
        milestone:
          format: int64
          type: integer
          x-go-name: Milestone
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateReleaseOption:
      description: CreateReleaseOption options when creating a release
      properties:
        body:
          type: string
          x-go-name: Note
        draft:
          type: boolean
          x-go-name: IsDraft
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        tag_name:
          type: string
          x-go-name: TagName
        target_commitish:
          type: string
          x-go-name: Target
      required:
        - tag_name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateRepoOption:
      description: CreateRepoOption options when creating repository
      properties:
        auto_init:
          description: Whether the repository should be auto-intialized?
          type: boolean
          x-go-name: AutoInit
        description:
          description: Description of the repository to create
          type: string
          x-go-name: Description
        gitignores:
          description: Gitignores to use
          type: string
          x-go-name: Gitignores
        issue_labels:
          description: Issue Label set to use
          type: string
          x-go-name: IssueLabels
        license:
          description: License to use
          type: string
          x-go-name: License
        name:
          description: Name of the repository to create
          type: string
          uniqueItems: true
          x-go-name: Name
        private:
          description: Whether the repository is private
          type: boolean
          x-go-name: Private
        readme:
          description: Readme of the repository to create
          type: string
          x-go-name: Readme
      required:
        - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateStatusOption:
      description: CreateStatusOption holds the information needed to create a new Status
        for a Commit
      properties:
        context:
          type: string
          x-go-name: Context
        description:
          type: string
          x-go-name: Description
        state:
          $ref: "#/components/schemas/StatusState"
        target_url:
          type: string
          x-go-name: TargetURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateTeamOption:
      description: CreateTeamOption options for creating a team
      properties:
        description:
          type: string
          x-go-name: Description
        name:
          type: string
          x-go-name: Name
        permission:
          enum:
            - read
            - write
            - admin
          type: string
          x-go-name: Permission
        units:
          example:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.ext_wiki
          items:
            type: string
          type: array
          x-go-name: Units
      required:
        - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateUserOption:
      description: CreateUserOption create user options
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        login_name:
          type: string
          x-go-name: LoginName
        must_change_password:
          type: boolean
          x-go-name: MustChangePassword
        password:
          type: string
          x-go-name: Password
        send_notify:
          type: boolean
          x-go-name: SendNotify
        source_id:
          format: int64
          type: integer
          x-go-name: SourceID
        username:
          type: string
          x-go-name: Username
      required:
        - username
        - email
        - password
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DeleteEmailOption:
      description: DeleteEmailOption options when deleting email addresses
      properties:
        emails:
          description: email addresses to delete
          items:
            type: string
          type: array
          x-go-name: Emails
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DeleteFileOptions:
      description: >-
        DeleteFileOptions options for deleting files (used for other File
        structs below)

        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      properties:
        author:
          $ref: "#/components/schemas/Identity"
        branch:
          description: branch (optional) to base this file from. if not given, the default
            branch is used
          type: string
          x-go-name: BranchName
        committer:
          $ref: "#/components/schemas/Identity"
        message:
          description: message (optional) for the commit of this file. if not supplied, a
            default message will be used
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch` before
            creating the file
          type: string
          x-go-name: NewBranchName
        sha:
          description: sha is the SHA for the file that already exists
          type: string
          x-go-name: SHA
      required:
        - sha
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DeployKey:
      description: DeployKey a deploy key
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        fingerprint:
          type: string
          x-go-name: Fingerprint
        id:
          format: int64
          type: integer
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        key_id:
          format: int64
          type: integer
          x-go-name: KeyID
        read_only:
          type: boolean
          x-go-name: ReadOnly
        repository:
          $ref: "#/components/schemas/Repository"
        title:
          type: string
          x-go-name: Title
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditAttachmentOptions:
      description: EditAttachmentOptions options for editing attachments
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditDeadlineOption:
      description: EditDeadlineOption options for creating a deadline
      properties:
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
      required:
        - due_date
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditGitHookOption:
      description: EditGitHookOption options when modifying one Git hook
      properties:
        content:
          type: string
          x-go-name: Content
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditHookOption:
      description: EditHookOption options when modify one hook
      properties:
        active:
          type: boolean
          x-go-name: Active
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          additionalProperties:
            type: string
          type: object
          x-go-name: Config
        events:
          items:
            type: string
          type: array
          x-go-name: Events
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditIssueCommentOption:
      description: EditIssueCommentOption options for editing a comment
      properties:
        body:
          type: string
          x-go-name: Body
      required:
        - body
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditIssueOption:
      description: EditIssueOption options for editing an issue
      properties:
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        milestone:
          format: int64
          type: integer
          x-go-name: Milestone
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditLabelOption:
      description: EditLabelOption options for editing a label
      properties:
        color:
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditMilestoneOption:
      description: EditMilestoneOption options for editing a milestone
      properties:
        description:
          type: string
          x-go-name: Description
        due_on:
          format: date-time
          type: string
          x-go-name: Deadline
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditOrgOption:
      description: EditOrgOption options for editing an organization
      properties:
        description:
          type: string
          x-go-name: Description
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        visibility:
          description: possible values are `public`, `limited` or `private`
          enum:
            - public
            - limited
            - private
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditPullRequestOption:
      description: EditPullRequestOption options when modify pull request
      properties:
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        labels:
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
        milestone:
          format: int64
          type: integer
          x-go-name: Milestone
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditReleaseOption:
      description: EditReleaseOption options when editing a release
      properties:
        body:
          type: string
          x-go-name: Note
        draft:
          type: boolean
          x-go-name: IsDraft
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        tag_name:
          type: string
          x-go-name: TagName
        target_commitish:
          type: string
          x-go-name: Target
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditRepoOption:
      description: EditRepoOption options when editing a repository's properties
      properties:
        allow_merge_commits:
          description: either `true` to allow merging pull requests with a merge commit, or
            `false` to prevent merging pull requests with merge commits.
            `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowMerge
        allow_rebase:
          description: either `true` to allow rebase-merging pull requests, or `false` to
            prevent rebase-merging. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowRebase
        allow_rebase_explicit:
          description: either `true` to allow rebase with explicit merge commits (--no-ff),
            or `false` to prevent rebase with explicit merge commits.
            `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowRebaseMerge
        allow_squash_merge:
          description: either `true` to allow squash-merging pull requests, or `false` to
            prevent squash-merging. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowSquash
        archived:
          description: set to `true` to archive this repository.
          type: boolean
          x-go-name: Archived
        default_branch:
          description: sets the default branch for this repository.
          type: string
          x-go-name: DefaultBranch
        description:
          description: a short description of the repository.
          type: string
          x-go-name: Description
        has_issues:
          description: either `true` to enable issues for this repository or `false` to
            disable them.
          type: boolean
          x-go-name: HasIssues
        has_pull_requests:
          description: either `true` to allow pull requests, or `false` to prevent pull
            request.
          type: boolean
          x-go-name: HasPullRequests
        has_wiki:
          description: either `true` to enable the wiki for this repository or `false` to
            disable it.
          type: boolean
          x-go-name: HasWiki
        ignore_whitespace_conflicts:
          description: either `true` to ignore whitespace for conflicts, or `false` to not
            ignore whitespace. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: IgnoreWhitespaceConflicts
        name:
          description: name of the repository
          type: string
          uniqueItems: true
          x-go-name: Name
        private:
          description: >-
            either `true` to make the repository private or `false` to make it
            public.

            Note: you will get a 422 error if the organization restricts changing repository visibility to organization

            owners and a non-owner tries to change the value of private.
          type: boolean
          x-go-name: Private
        website:
          description: a URL with more information about the repository.
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditTeamOption:
      description: EditTeamOption options for editing a team
      properties:
        description:
          type: string
          x-go-name: Description
        name:
          type: string
          x-go-name: Name
        permission:
          enum:
            - read
            - write
            - admin
          type: string
          x-go-name: Permission
        units:
          example:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.ext_wiki
          items:
            type: string
          type: array
          x-go-name: Units
      required:
        - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditUserOption:
      description: EditUserOption edit user options
      properties:
        active:
          type: boolean
          x-go-name: Active
        admin:
          type: boolean
          x-go-name: Admin
        allow_create_organization:
          type: boolean
          x-go-name: AllowCreateOrganization
        allow_git_hook:
          type: boolean
          x-go-name: AllowGitHook
        allow_import_local:
          type: boolean
          x-go-name: AllowImportLocal
        email:
          format: email
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        login_name:
          type: string
          x-go-name: LoginName
        max_repo_creation:
          format: int64
          type: integer
          x-go-name: MaxRepoCreation
        must_change_password:
          type: boolean
          x-go-name: MustChangePassword
        password:
          type: string
          x-go-name: Password
        prohibit_login:
          type: boolean
          x-go-name: ProhibitLogin
        source_id:
          format: int64
          type: integer
          x-go-name: SourceID
        website:
          type: string
          x-go-name: Website
      required:
        - email
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Email:
      description: Email an email address belonging to a user
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        primary:
          type: boolean
          x-go-name: Primary
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileCommitResponse:
      properties:
        author:
          $ref: "#/components/schemas/CommitUser"
        committer:
          $ref: "#/components/schemas/CommitUser"
        html_url:
          type: string
          x-go-name: HTMLURL
        message:
          type: string
          x-go-name: Message
        parents:
          items:
            $ref: "#/components/schemas/CommitMeta"
          type: array
          x-go-name: Parents
        sha:
          type: string
          x-go-name: SHA
        tree:
          $ref: "#/components/schemas/CommitMeta"
        url:
          type: string
          x-go-name: URL
      title: FileCommitResponse contains information generated from a Git commit for
        a repo's file.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileDeleteResponse:
      description: FileDeleteResponse contains information about a repo's file that was
        deleted
      properties:
        commit:
          $ref: "#/components/schemas/FileCommitResponse"
        content:
          type: object
          x-go-name: Content
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileLinksResponse:
      description: FileLinksResponse contains the links for a repo's file
      properties:
        git:
          type: string
          x-go-name: GitURL
        html:
          type: string
          x-go-name: HTMLURL
        self:
          type: string
          x-go-name: Self
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileResponse:
      description: FileResponse contains information about a repo's file
      properties:
        commit:
          $ref: "#/components/schemas/FileCommitResponse"
        content:
          $ref: "#/components/schemas/ContentsResponse"
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GPGKey:
      description: GPGKey a user GPG key to sign commit and tag in repository
      properties:
        can_certify:
          type: boolean
          x-go-name: CanCertify
        can_encrypt_comms:
          type: boolean
          x-go-name: CanEncryptComms
        can_encrypt_storage:
          type: boolean
          x-go-name: CanEncryptStorage
        can_sign:
          type: boolean
          x-go-name: CanSign
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        emails:
          items:
            $ref: "#/components/schemas/GPGKeyEmail"
          type: array
          x-go-name: Emails
        expires_at:
          format: date-time
          type: string
          x-go-name: Expires
        id:
          format: int64
          type: integer
          x-go-name: ID
        key_id:
          type: string
          x-go-name: KeyID
        primary_key_id:
          type: string
          x-go-name: PrimaryKeyID
        public_key:
          type: string
          x-go-name: PublicKey
        subkeys:
          items:
            $ref: "#/components/schemas/GPGKey"
          type: array
          x-go-name: SubsKey
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GPGKeyEmail:
      description: GPGKeyEmail an email attached to a GPGKey
      properties:
        email:
          type: string
          x-go-name: Email
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitBlobResponse:
      description: GitBlobResponse represents a git blob
      properties:
        content:
          type: string
          x-go-name: Content
        encoding:
          type: string
          x-go-name: Encoding
        sha:
          type: string
          x-go-name: SHA
        size:
          format: int64
          type: integer
          x-go-name: Size
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitEntry:
      description: GitEntry represents a git tree
      properties:
        mode:
          type: string
          x-go-name: Mode
        path:
          type: string
          x-go-name: Path
        sha:
          type: string
          x-go-name: SHA
        size:
          format: int64
          type: integer
          x-go-name: Size
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitHook:
      description: GitHook represents a Git repository hook
      properties:
        content:
          type: string
          x-go-name: Content
        is_active:
          type: boolean
          x-go-name: IsActive
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitObject:
      properties:
        sha:
          type: string
          x-go-name: SHA
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      title: GitObject represents a Git object.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitTreeResponse:
      description: GitTreeResponse returns a git tree
      properties:
        page:
          format: int64
          type: integer
          x-go-name: Page
        sha:
          type: string
          x-go-name: SHA
        total_count:
          format: int64
          type: integer
          x-go-name: TotalCount
        tree:
          items:
            $ref: "#/components/schemas/GitEntry"
          type: array
          x-go-name: Entries
        truncated:
          type: boolean
          x-go-name: Truncated
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Hook:
      description: Hook a hook is a web hook when one repository changed
      properties:
        active:
          type: boolean
          x-go-name: Active
        config:
          additionalProperties:
            type: string
          type: object
          x-go-name: Config
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        events:
          items:
            type: string
          type: array
          x-go-name: Events
        id:
          format: int64
          type: integer
          x-go-name: ID
        type:
          type: string
          x-go-name: Type
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Identity:
      description: Identity for a person's identity like an author or committer
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Issue:
      description: Issue represents an issue in a repository
      properties:
        assignee:
          $ref: "#/components/schemas/User"
        assignees:
          items:
            $ref: "#/components/schemas/User"
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        closed_at:
          format: date-time
          type: string
          x-go-name: Closed
        comments:
          format: int64
          type: integer
          x-go-name: Comments
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        id:
          format: int64
          type: integer
          x-go-name: ID
        labels:
          items:
            $ref: "#/components/schemas/Label"
          type: array
          x-go-name: Labels
        milestone:
          $ref: "#/components/schemas/Milestone"
        number:
          format: int64
          type: integer
          x-go-name: Index
        original_author:
          type: string
          x-go-name: OriginalAuthor
        original_author_id:
          format: int64
          type: integer
          x-go-name: OriginalAuthorID
        pull_request:
          $ref: "#/components/schemas/PullRequestMeta"
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        user:
          $ref: "#/components/schemas/User"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueDeadline:
      description: IssueDeadline represents an issue deadline
      properties:
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueLabelsOption:
      description: IssueLabelsOption a collection of labels
      properties:
        labels:
          description: list of label IDs
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Label:
      description: Label a label to an issue or a pr
      properties:
        color:
          example: 00aabb
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    MarkdownOption:
      description: MarkdownOption markdown options
      properties:
        Context:
          description: |-
            Context to render

            in: body
          type: string
        Mode:
          description: |-
            Mode to render

            in: body
          type: string
        Text:
          description: |-
            Text markdown to render

            in: body
          type: string
        Wiki:
          description: |-
            Is it a wiki page ?

            in: body
          type: boolean
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    MergePullRequestOption:
      description: MergePullRequestForm form for merging Pull Request
      properties:
        Do:
          enum:
            - merge
            - rebase
            - rebase-merge
            - squash
          type: string
        MergeMessageField:
          type: string
        MergeTitleField:
          type: string
      required:
        - Do
      type: object
      x-go-name: MergePullRequestForm
      x-go-package: code.gitea.io/gitea/modules/auth
    MigrateRepoForm:
      description: MigrateRepoForm form for migrating repository
      properties:
        auth_password:
          type: string
          x-go-name: AuthPassword
        auth_username:
          type: string
          x-go-name: AuthUsername
        clone_addr:
          type: string
          x-go-name: CloneAddr
        description:
          type: string
          x-go-name: Description
        issues:
          type: boolean
          x-go-name: Issues
        labels:
          type: boolean
          x-go-name: Labels
        milestones:
          type: boolean
          x-go-name: Milestones
        mirror:
          type: boolean
          x-go-name: Mirror
        private:
          type: boolean
          x-go-name: Private
        pull_requests:
          type: boolean
          x-go-name: PullRequests
        releases:
          type: boolean
          x-go-name: Releases
        repo_name:
          type: string
          x-go-name: RepoName
        uid:
          format: int64
          type: integer
          x-go-name: UID
        wiki:
          type: boolean
          x-go-name: Wiki
      required:
        - clone_addr
        - uid
        - repo_name
      type: object
      x-go-package: code.gitea.io/gitea/modules/auth
    Milestone:
      description: Milestone milestone is a collection of issues on one repository
      properties:
        closed_at:
          format: date-time
          type: string
          x-go-name: Closed
        closed_issues:
          format: int64
          type: integer
          x-go-name: ClosedIssues
        description:
          type: string
          x-go-name: Description
        due_on:
          format: date-time
          type: string
          x-go-name: Deadline
        id:
          format: int64
          type: integer
          x-go-name: ID
        open_issues:
          format: int64
          type: integer
          x-go-name: OpenIssues
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Organization:
      description: Organization represents an organization
      properties:
        avatar_url:
          type: string
          x-go-name: AvatarURL
        description:
          type: string
          x-go-name: Description
        full_name:
          type: string
          x-go-name: FullName
        id:
          format: int64
          type: integer
          x-go-name: ID
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        username:
          type: string
          x-go-name: UserName
        visibility:
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PRBranchInfo:
      description: PRBranchInfo information about a branch
      properties:
        label:
          type: string
          x-go-name: Name
        ref:
          type: string
          x-go-name: Ref
        repo:
          $ref: "#/components/schemas/Repository"
        repo_id:
          format: int64
          type: integer
          x-go-name: RepoID
        sha:
          type: string
          x-go-name: Sha
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadCommit:
      description: PayloadCommit represents a commit
      properties:
        added:
          items:
            type: string
          type: array
          x-go-name: Added
        author:
          $ref: "#/components/schemas/PayloadUser"
        committer:
          $ref: "#/components/schemas/PayloadUser"
        id:
          description: sha1 hash of the commit
          type: string
          x-go-name: ID
        message:
          type: string
          x-go-name: Message
        modified:
          items:
            type: string
          type: array
          x-go-name: Modified
        removed:
          items:
            type: string
          type: array
          x-go-name: Removed
        timestamp:
          format: date-time
          type: string
          x-go-name: Timestamp
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadCommitVerification:
      description: PayloadCommitVerification represents the GPG verification of a commit
      properties:
        payload:
          type: string
          x-go-name: Payload
        reason:
          type: string
          x-go-name: Reason
        signature:
          type: string
          x-go-name: Signature
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadUser:
      description: PayloadUser represents the author or committer of a commit
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        name:
          description: Full name of the commit author
          type: string
          x-go-name: Name
        username:
          type: string
          x-go-name: UserName
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Permission:
      description: Permission represents a set of permissions
      properties:
        admin:
          type: boolean
          x-go-name: Admin
        pull:
          type: boolean
          x-go-name: Pull
        push:
          type: boolean
          x-go-name: Push
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PublicKey:
      description: PublicKey publickey is a user key to push code to repository
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        fingerprint:
          type: string
          x-go-name: Fingerprint
        id:
          format: int64
          type: integer
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        key_type:
          type: string
          x-go-name: KeyType
        read_only:
          type: boolean
          x-go-name: ReadOnly
        title:
          type: string
          x-go-name: Title
        url:
          type: string
          x-go-name: URL
        user:
          $ref: "#/components/schemas/User"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullRequest:
      description: PullRequest represents a pull request
      properties:
        assignee:
          $ref: "#/components/schemas/User"
        assignees:
          items:
            $ref: "#/components/schemas/User"
          type: array
          x-go-name: Assignees
        base:
          $ref: "#/components/schemas/PRBranchInfo"
        body:
          type: string
          x-go-name: Body
        closed_at:
          format: date-time
          type: string
          x-go-name: Closed
        comments:
          format: int64
          type: integer
          x-go-name: Comments
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        diff_url:
          type: string
          x-go-name: DiffURL
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        head:
          $ref: "#/components/schemas/PRBranchInfo"
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        labels:
          items:
            $ref: "#/components/schemas/Label"
          type: array
          x-go-name: Labels
        merge_base:
          type: string
          x-go-name: MergeBase
        merge_commit_sha:
          type: string
          x-go-name: MergedCommitID
        mergeable:
          type: boolean
          x-go-name: Mergeable
        merged:
          type: boolean
          x-go-name: HasMerged
        merged_at:
          format: date-time
          type: string
          x-go-name: Merged
        merged_by:
          $ref: "#/components/schemas/User"
        milestone:
          $ref: "#/components/schemas/Milestone"
        number:
          format: int64
          type: integer
          x-go-name: Index
        patch_url:
          type: string
          x-go-name: PatchURL
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        user:
          $ref: "#/components/schemas/User"
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullRequestMeta:
      description: PullRequestMeta PR info if an issue is a PR
      properties:
        merged:
          type: boolean
          x-go-name: HasMerged
        merged_at:
          format: date-time
          type: string
          x-go-name: Merged
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Reference:
      properties:
        object:
          $ref: "#/components/schemas/GitObject"
        ref:
          type: string
          x-go-name: Ref
        url:
          type: string
          x-go-name: URL
      title: Reference represents a Git reference.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Release:
      description: Release represents a repository release
      properties:
        assets:
          items:
            $ref: "#/components/schemas/Attachment"
          type: array
          x-go-name: Attachments
        author:
          $ref: "#/components/schemas/User"
        body:
          type: string
          x-go-name: Note
        created_at:
          format: date-time
          type: string
          x-go-name: CreatedAt
        draft:
          type: boolean
          x-go-name: IsDraft
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        published_at:
          format: date-time
          type: string
          x-go-name: PublishedAt
        tag_name:
          type: string
          x-go-name: TagName
        tarball_url:
          type: string
          x-go-name: TarURL
        target_commitish:
          type: string
          x-go-name: Target
        url:
          type: string
          x-go-name: URL
        zipball_url:
          type: string
          x-go-name: ZipURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoCommit:
      properties:
        author:
          $ref: "#/components/schemas/CommitUser"
        committer:
          $ref: "#/components/schemas/CommitUser"
        message:
          type: string
          x-go-name: Message
        tree:
          $ref: "#/components/schemas/CommitMeta"
        url:
          type: string
          x-go-name: URL
      title: RepoCommit contains information of a commit in the context of a
        repository.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoTopicOptions:
      description: RepoTopicOptions a collection of repo topic names
      properties:
        topics:
          description: list of topic names
          items:
            type: string
          type: array
          x-go-name: Topics
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Repository:
      description: Repository represents a repository
      properties:
        allow_merge_commits:
          type: boolean
          x-go-name: AllowMerge
        allow_rebase:
          type: boolean
          x-go-name: AllowRebase
        allow_rebase_explicit:
          type: boolean
          x-go-name: AllowRebaseMerge
        allow_squash_merge:
          type: boolean
          x-go-name: AllowSquash
        archived:
          type: boolean
          x-go-name: Archived
        avatar_url:
          type: string
          x-go-name: AvatarURL
        clone_url:
          type: string
          x-go-name: CloneURL
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        default_branch:
          type: string
          x-go-name: DefaultBranch
        description:
          type: string
          x-go-name: Description
        empty:
          type: boolean
          x-go-name: Empty
        fork:
          type: boolean
          x-go-name: Fork
        forks_count:
          format: int64
          type: integer
          x-go-name: Forks
        full_name:
          type: string
          x-go-name: FullName
        has_issues:
          type: boolean
          x-go-name: HasIssues
        has_pull_requests:
          type: boolean
          x-go-name: HasPullRequests
        has_wiki:
          type: boolean
          x-go-name: HasWiki
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        ignore_whitespace_conflicts:
          type: boolean
          x-go-name: IgnoreWhitespaceConflicts
        mirror:
          type: boolean
          x-go-name: Mirror
        name:
          type: string
          x-go-name: Name
        open_issues_count:
          format: int64
          type: integer
          x-go-name: OpenIssues
        original_url:
          type: string
          x-go-name: OriginalURL
        owner:
          $ref: "#/components/schemas/User"
        parent:
          $ref: "#/components/schemas/Repository"
        permissions:
          $ref: "#/components/schemas/Permission"
        private:
          type: boolean
          x-go-name: Private
        size:
          format: int64
          type: integer
          x-go-name: Size
        ssh_url:
          type: string
          x-go-name: SSHURL
        stars_count:
          format: int64
          type: integer
          x-go-name: Stars
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        watchers_count:
          format: int64
          type: integer
          x-go-name: Watchers
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    SearchResults:
      description: SearchResults results of a successful search
      properties:
        data:
          items:
            $ref: "#/components/schemas/Repository"
          type: array
          x-go-name: Data
        ok:
          type: boolean
          x-go-name: OK
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ServerVersion:
      description: ServerVersion wraps the version of the server
      properties:
        version:
          type: string
          x-go-name: Version
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    StateType:
      description: StateType issue state type
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    Status:
      description: Status holds a single Status of a single Commit
      properties:
        context:
          type: string
          x-go-name: Context
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        creator:
          $ref: "#/components/schemas/User"
        description:
          type: string
          x-go-name: Description
        id:
          format: int64
          type: integer
          x-go-name: ID
        status:
          $ref: "#/components/schemas/StatusState"
        target_url:
          type: string
          x-go-name: TargetURL
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    StatusState:
      description: |-
        StatusState holds the state of a Status
        It can be "pending", "success", "error", "failure", and "warning"
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    Tag:
      description: Tag represents a repository tag
      properties:
        commit:
          $ref: "#/components/schemas/CommitMeta"
        id:
          type: string
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        tarball_url:
          type: string
          x-go-name: TarballURL
        zipball_url:
          type: string
          x-go-name: ZipballURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Team:
      description: Team represents a team in an organization
      properties:
        description:
          type: string
          x-go-name: Description
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        organization:
          $ref: "#/components/schemas/Organization"
        permission:
          enum:
            - none
            - read
            - write
            - admin
            - owner
          type: string
          x-go-name: Permission
        units:
          example:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.ext_wiki
          items:
            type: string
          type: array
          x-go-name: Units
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TimeStamp:
      description: TimeStamp defines a timestamp
      format: int64
      type: integer
      x-go-package: code.gitea.io/gitea/modules/timeutil
    TopicName:
      description: TopicName a list of repo topic names
      properties:
        topics:
          items:
            type: string
          type: array
          x-go-name: TopicNames
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TopicResponse:
      description: TopicResponse for returning topics
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        id:
          format: int64
          type: integer
          x-go-name: ID
        repo_count:
          format: int64
          type: integer
          x-go-name: RepoCount
        topic_name:
          type: string
          x-go-name: Name
        updated:
          format: date-time
          type: string
          x-go-name: Updated
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TrackedTime:
      description: TrackedTime worked time for an issue / pr
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        id:
          format: int64
          type: integer
          x-go-name: ID
        issue_id:
          format: int64
          type: integer
          x-go-name: IssueID
        time:
          description: Time in seconds
          format: int64
          type: integer
          x-go-name: Time
        user_id:
          format: int64
          type: integer
          x-go-name: UserID
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UpdateFileOptions:
      description: >-
        UpdateFileOptions options for updating files

        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      properties:
        author:
          $ref: "#/components/schemas/Identity"
        branch:
          description: branch (optional) to base this file from. if not given, the default
            branch is used
          type: string
          x-go-name: BranchName
        committer:
          $ref: "#/components/schemas/Identity"
        content:
          description: content must be base64 encoded
          type: string
          x-go-name: Content
        from_path:
          description: from_path (optional) is the path of the original file which will be
            moved/renamed to the path in the URL
          type: string
          x-go-name: FromPath
        message:
          description: message (optional) for the commit of this file. if not supplied, a
            default message will be used
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch` before
            creating the file
          type: string
          x-go-name: NewBranchName
        sha:
          description: sha is the SHA for the file that already exists
          type: string
          x-go-name: SHA
      required:
        - sha
        - content
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    User:
      description: User represents a user
      properties:
        avatar_url:
          description: URL to the user's avatar
          type: string
          x-go-name: AvatarURL
        created:
          format: date-time
          type: string
          x-go-name: Created
        email:
          format: email
          type: string
          x-go-name: Email
        full_name:
          description: the user's full name
          type: string
          x-go-name: FullName
        id:
          description: the user's id
          format: int64
          type: integer
          x-go-name: ID
        is_admin:
          description: Is the user an administrator
          type: boolean
          x-go-name: IsAdmin
        language:
          description: User locale
          type: string
          x-go-name: Language
        last_login:
          format: date-time
          type: string
          x-go-name: LastLogin
        login:
          description: the user's username
          type: string
          x-go-name: UserName
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UserHeatmapData:
      description: UserHeatmapData represents the data needed to create a heatmap
      properties:
        contributions:
          format: int64
          type: integer
          x-go-name: Contributions
        timestamp:
          $ref: "#/components/schemas/TimeStamp"
      type: object
      x-go-package: code.gitea.io/gitea/models
    WatchInfo:
      description: WatchInfo represents an API watch status of one repository
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: CreatedAt
        ignored:
          type: boolean
          x-go-name: Ignored
        reason:
          type: object
          x-go-name: Reason
        repository_url:
          type: string
          x-go-name: RepositoryURL
        subscribed:
          type: boolean
          x-go-name: Subscribed
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
