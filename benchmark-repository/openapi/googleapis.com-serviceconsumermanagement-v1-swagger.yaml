openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: Manages the service consumers of a Service Infrastructure service.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Service Consumer Management
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://serviceconsumermanagement.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: serviceconsumermanagement
externalDocs:
  url: https://cloud.google.com/service-consumer-management/docs/overview
tags:
  - name: operations
  - name: services
paths:
  "/v1/{name}":
    delete:
      description: >-
        Delete a tenancy unit. Before you delete the tenancy unit, there should
        be

        no tenant resources in it that aren't in a DELETED state.

        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.delete
      parameters:
        - description: Name of the tenancy unit to be deleted.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
    get:
      description: >-
        Gets the latest state of a long-running operation.  Clients can use this

        method to poll the operation result at intervals as recommended by the API

        service.
      operationId: serviceconsumermanagement.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - operations
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{name}:applyProjectConfig":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Apply a configuration to an existing tenant project.

        This project must exist in an active state and have the original owner

        account. The caller must have permission to add a project to the given

        tenancy unit. The configuration is applied, but any existing settings on

        the project aren't modified.

        Specified policy bindings are applied. Existing bindings aren't modified.

        Specified services are activated. No service is deactivated.

        If specified, new billing configuration is applied.

        Omit a billing configuration to keep the existing one.

        A service account in the project is created if previously non existed.

        Specified labels will be appended to tenant project, note that the value of

        existing label key will be updated if the same label key is requested.

        The specified folder is ignored, as moving a tenant project to a different

        folder isn't supported.

        The operation fails if any of the steps fail, but no rollback of already

        applied configuration changes is attempted.

        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.applyProjectConfig
      parameters:
        - description: >-
            Name of the tenancy unit.

            Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyTenantProjectConfigRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{name}:attachProject":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: |-
        Attach an existing project to the tenancy unit as a new tenant
        resource. The project could either be the tenant project reserved by
        calling `AddTenantProject` under a tenancy unit of a service producer's
        project of a managed service, or from a separate project.
        The caller is checked against a set of permissions as if calling
        `AddTenantProject` on the same service consumer.
        To trigger the attachment, the targeted tenant project must be in a
        folder. Make sure the ServiceConsumerManagement service account is
        the owner of that project. These two requirements are already met
        if the project is reserved by calling `AddTenantProject`.
        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.attachProject
      parameters:
        - description: >-
            Name of the tenancy unit that the project will be attached to.

            Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachTenantProjectRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{name}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation.  The
        server

        makes a best effort to cancel the operation, but success is not

        guaranteed.  If the server doesn't support this method, it returns

        `google.rpc.Code.UNIMPLEMENTED`.  Clients can use

        Operations.GetOperation or

        other methods to check whether the cancellation succeeded or whether the

        operation completed despite cancellation. On successful cancellation,

        the operation is not deleted; instead, it becomes an operation with

        an Operation.error value with a google.rpc.Status.code of 1,

        corresponding to `Code.CANCELLED`.
      operationId: serviceconsumermanagement.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - operations
  "/v1/{name}:deleteProject":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Deletes the specified project resource identified by a tenant resource
        tag.

        The mothod removes a project lien with a 'TenantManager' origin if that was

        added. It will then attempt to delete the project. If that operation fails,

        this method also fails.

        After the project has been deleted, the tenant resource state is set to

        DELETED.  To permanently remove resource metadata, call the

        `RemoveTenantProject` method.

        New resources with the same tag can't be added if there are existing

        resources in a DELETED state.

        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.deleteProject
      parameters:
        - description: >-
            Name of the tenancy unit.

            Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTenantProjectRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{name}:removeProject":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Removes the specified project resource identified by a tenant resource
        tag.

        The method removes the project lien with 'TenantManager' origin if that

        was added. It then attempts to delete the project. If that operation

        fails, this method also fails.

        Calls to remove already removed or non-existent tenant project succeed.

        After the project has been deleted, or if was already in a DELETED state,

        resource metadata is permanently removed from the tenancy unit.

        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.removeProject
      parameters:
        - description: >-
            Name of the tenancy unit.

            Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveTenantProjectRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{name}:undeleteProject":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Attempts to undelete a previously deleted tenant project. The project
        must

        be in a DELETED state.

        There are no guarantees that an undeleted project will be in

        a fully restored and functional state. Call the `ApplyTenantProjectConfig`

        method to update its configuration and then validate all managed service

        resources.

        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.undeleteProject
      parameters:
        - description: >-
            Name of the tenancy unit.

            Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UndeleteTenantProjectRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{parent}/tenancyUnits":
    get:
      description: >-
        Find the tenancy unit for a managed service and service consumer.

        This method shouldn't be used in a service producer's runtime path, for

        example to find the tenant project number when creating VMs. Service

        producers must persist the tenant project's information after the project

        is created.
      operationId: serviceconsumermanagement.services.tenancyUnits.list
      parameters:
        - description: Filter expression over tenancy resources field. Optional.
          in: query
          name: filter
          schema:
            type: string
        - description: The maximum number of results returned by this request.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: >-
            The continuation token, which is used to page through large result
            sets.

            To get the next page of results, set this parameter to the value of

            `nextPageToken` from the previous response.
          in: query
          name: pageToken
          schema:
            type: string
        - description: >-
            Managed service and service consumer. Required.

            services/{service}/{collection id}/{resource id}

            {collection id} is the cloud resource collection type representing the

            service consumer, for example 'projects', or 'organizations'.

            {resource id} is the consumer numeric id, such as project number: '123456'.

            {service} the name of a service, such as 'service.googleapis.com'.
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListTenancyUnitsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Creates a tenancy unit with no tenant resources.

        If tenancy unit already exists, it will be returned,

        however, in this case, returned TenancyUnit does not have tenant_resources

        field set and ListTenancyUnit has to be used to get a complete

        TenancyUnit with all fields populated.
      operationId: serviceconsumermanagement.services.tenancyUnits.create
      parameters:
        - description: >-
            services/{service}/{collection id}/{resource id}

            {collection id} is the cloud resource collection type representing the

            service consumer, for example 'projects', or 'organizations'.

            {resource id} is the consumer numeric id, such as project number: '123456'.

            {service} the name of a managed service, such as 'service.googleapis.com'.

            Enables service binding using the new tenancy unit.
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTenancyUnitRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TenancyUnit"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{parent}:addProject":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Add a new tenant project to the tenancy unit.

        There can be a maximum of 512 tenant projects in a tenancy unit.

        If there are previously failed `AddTenantProject` calls, you might need to

        call `RemoveTenantProject` first to resolve them before you can make

        another call to `AddTenantProject` with the same tag.

        Operation<response: Empty>.
      operationId: serviceconsumermanagement.services.tenancyUnits.addProject
      parameters:
        - description: >-
            Name of the tenancy unit.

            Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTenantProjectRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
  "/v1/{parent}:search":
    get:
      description: Search tenancy units for a managed service.
      operationId: serviceconsumermanagement.services.search
      parameters:
        - description: >-
            The maximum number of results returned by this request. Currently,
            the

            default maximum is set to 1000. If `page_size` isn't provided or the size

            provided is a number larger than 1000, it's automatically set to 1000.


            Optional.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: >-
            The continuation token, which is used to page through large result
            sets.

            To get the next page of results, set this parameter to the value of

            `nextPageToken` from the previous response.


            Optional.
          in: query
          name: pageToken
          schema:
            type: string
        - description: >-
            Service for which search is performed.

            services/{service}

            {service} the name of a service, for example 'service.googleapis.com'.
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: >-
            Set a query `{expression}` for querying tenancy units. Your
            `{expression}`

            must be in the format: `field_name=literal_string`. The `field_name` is the

            name of the field you want to compare. Supported fields are

            `tenant_resources.tag` and `tenant_resources.resource`.


            For example, to search tenancy units that contain at least one tenant

            resource with a given tag 'xyz', use the query `tenant_resources.tag=xyz`.

            To search tenancy units that contain at least one tenant resource with

            a given resource name 'projects/123456', use the query

            `tenant_resources.resource=projects/123456`.


            Multiple expressions can be joined with `AND`s. Tenancy units must match

            all expressions to be included in the result set. For example,

            `tenant_resources.tag=xyz AND tenant_resources.resource=projects/123456`


            Optional.
          in: query
          name: query
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/SearchTenancyUnitsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - services
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
servers:
  - url: https://serviceconsumermanagement.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
  schemas:
    AddTenantProjectRequest:
      description: >-
        Request to add a newly created and configured tenant project to a
        tenancy

        unit.
      properties:
        projectConfig:
          $ref: "#/components/schemas/TenantProjectConfig"
        tag:
          description: Tag of the added project. Must be less than 128 characters. Required.
          type: string
      type: object
    Api:
      description: >-
        Api is a light-weight descriptor for an API Interface.


        Interfaces are also described as "protocol buffer services" in some contexts,

        such as by the "service" keyword in a .proto file, but they are different

        from API Services, which represent a concrete implementation of an interface

        as opposed to simply a description of methods and bindings. They are also

        sometimes simply referred to as "APIs" in other contexts, such as the name of

        this message itself. See https://cloud.google.com/apis/design/glossary for

        detailed terminology.
      properties:
        methods:
          description: The methods of this interface, in unspecified order.
          items:
            $ref: "#/components/schemas/Method"
          type: array
        mixins:
          description: Included interfaces. See Mixin.
          items:
            $ref: "#/components/schemas/Mixin"
          type: array
        name:
          description: |-
            The fully qualified name of this interface, including package name
            followed by the interface's simple name.
          type: string
        options:
          description: Any metadata attached to the interface.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        sourceContext:
          $ref: "#/components/schemas/SourceContext"
        syntax:
          description: The source syntax of the service.
          enum:
            - SYNTAX_PROTO2
            - SYNTAX_PROTO3
          type: string
        version:
          description: >
            A version string for this interface. If specified, must have the
            form

            `major-version.minor-version`, as in `1.10`. If the minor version is

            omitted, it defaults to zero. If the entire version field is empty, the

            major version is derived from the package name, as outlined below. If the

            field is not empty, the version in the package name will be verified to be

            consistent with what is provided here.


            The versioning schema uses [semantic

            versioning](http://semver.org) where the major version number

            indicates a breaking change and the minor version an additive,

            non-breaking change. Both version numbers are signals to users

            what to expect from different versions, and should be carefully

            chosen based on the product plan.


            The major version is also reflected in the package name of the

            interface, which must end in `v<major-version>`, as in

            `google.feature.v1`. For major versions 0 and 1, the suffix can

            be omitted. Zero major versions must only be used for

            experimental, non-GA interfaces.
          type: string
      type: object
    ApplyTenantProjectConfigRequest:
      description: Request to apply configuration to an existing tenant project.
      properties:
        projectConfig:
          $ref: "#/components/schemas/TenantProjectConfig"
        tag:
          description: Tag of the project. Must be less than 128 characters. Required.
          type: string
      type: object
    AttachTenantProjectRequest:
      description: >-
        Request to attach an existing project to the tenancy unit as a new
        tenant

        resource.
      properties:
        externalResource:
          description: |-
            When attaching an external project, this is in the format of
            `projects/{project_number}`.
          type: string
        reservedResource:
          description: >-
            When attaching a reserved project already in tenancy units, this is
            the

            tag of a tenant resource under the tenancy unit for the managed service's

            service producer project. The reserved tenant resource must be in an

            active state.
          type: string
        tag:
          description: |-
            Tag of the tenant resource after attachment.
            Must be less than 128 characters. Required.
          type: string
      type: object
    AuthProvider:
      description: |-
        Configuration for an authentication provider, including support for
        [JSON Web Token
        (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
      properties:
        audiences:
          description: >-
            The list of JWT

            [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).

            that are allowed to access. A JWT containing any of these audiences will

            be accepted. When this setting is absent, only JWTs with audience

            "https://Service_name/API_name"

            will be accepted. For example, if no audiences are in the setting,

            LibraryService API will only accept JWTs with the following audience

            "https://library-example.googleapis.com/google.example.library.v1.LibraryService".


            Example:

                audiences: bookstore_android.apps.googleusercontent.com,
                           bookstore_web.apps.googleusercontent.com
          type: string
        authorizationUrl:
          description: |-
            Redirect URL if JWT token is required but not present or is expired.
            Implement authorizationUrl of securityDefinitions in OpenAPI spec.
          type: string
        id:
          description: >-
            The unique identifier of the auth provider. It will be referred to
            by

            `AuthRequirement.provider_id`.


            Example: "bookstore_auth".
          type: string
        issuer:
          description: >-
            Identifies the principal that issued the JWT. See

            https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1

            Usually a URL or an email address.


            Example: https://securetoken.google.com

            Example: 1234567-compute@developer.gserviceaccount.com
          type: string
        jwksUri:
          description: >-
            URL of the provider's public key set to validate signature of the
            JWT. See

            [OpenID

            Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).

            Optional if the key set document:
             - can be retrieved from
               [OpenID
               Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html of
               the issuer.
             - can be inferred from the email domain of the issuer (e.g. a Google
             service account).

            Example: https://www.googleapis.com/oauth2/v1/certs
          type: string
      type: object
    AuthRequirement:
      description: |-
        User-defined authentication requirements, including support for
        [JSON Web Token
        (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
      properties:
        audiences:
          description: >-
            NOTE: This will be deprecated soon, once AuthProvider.audiences is

            implemented and accepted in all the runtime components.


            The list of JWT

            [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).

            that are allowed to access. A JWT containing any of these audiences will

            be accepted. When this setting is absent, only JWTs with audience

            "https://Service_name/API_name"

            will be accepted. For example, if no audiences are in the setting,

            LibraryService API will only accept JWTs with the following audience

            "https://library-example.googleapis.com/google.example.library.v1.LibraryService".


            Example:

                audiences: bookstore_android.apps.googleusercontent.com,
                           bookstore_web.apps.googleusercontent.com
          type: string
        providerId:
          description: |-
            id from authentication provider.

            Example:

                provider_id: bookstore_auth
          type: string
      type: object
    Authentication:
      description: |-
        `Authentication` defines the authentication configuration for an API.

        Example for an API targeted for external use:

            name: calendar.googleapis.com
            authentication:
              providers:
              - id: google_calendar_auth
                jwks_uri: https://www.googleapis.com/oauth2/v1/certs
                issuer: https://securetoken.google.com
              rules:
              - selector: "*"
                requirements:
                  provider_id: google_calendar_auth
      properties:
        providers:
          description: Defines a set of authentication providers that a service supports.
          items:
            $ref: "#/components/schemas/AuthProvider"
          type: array
        rules:
          description: >-
            A list of authentication rules that apply to individual API methods.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/AuthenticationRule"
          type: array
      type: object
    AuthenticationRule:
      description: >-
        Authentication rules for the service.


        By default, if a method has any authentication requirements, every request

        must include a valid credential matching one of the requirements.

        It's an error to include more than one kind of credential in a single

        request.


        If a method doesn't have any auth requirements, request credentials will be

        ignored.
      properties:
        allowWithoutCredential:
          description: If true, the service accepts API keys without any other credential.
          type: boolean
        oauth:
          $ref: "#/components/schemas/OAuthRequirements"
        requirements:
          description: Requirements for additional authentication providers.
          items:
            $ref: "#/components/schemas/AuthRequirement"
          type: array
        selector:
          description: |-
            Selects the methods to which this rule applies.

            Refer to selector for syntax details.
          type: string
      type: object
    Backend:
      description: "`Backend` defines the backend configuration for a service."
      properties:
        rules:
          description: >-
            A list of API backend rules that apply to individual API methods.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/BackendRule"
          type: array
      type: object
    BackendRule:
      description: A backend rule provides configuration for an individual API element.
      properties:
        address:
          description: The address of the API backend.
          type: string
        deadline:
          description: >-
            The number of seconds to wait for a response from a request.  The
            default

            deadline for gRPC is infinite (no deadline) and HTTP requests is 5 seconds.
          format: double
          type: number
        jwtAudience:
          description: The JWT audience is used when generating a JWT id token for the
            backend.
          type: string
        minDeadline:
          description: >-
            Minimum deadline in seconds needed for this method. Calls having
            deadline

            value lower than this will be rejected.
          format: double
          type: number
        operationDeadline:
          description: |-
            The number of seconds to wait for the completion of a long running
            operation. The default is no deadline.
          format: double
          type: number
        pathTranslation:
          enum:
            - PATH_TRANSLATION_UNSPECIFIED
            - CONSTANT_ADDRESS
            - APPEND_PATH_TO_ADDRESS
          type: string
        selector:
          description: |-
            Selects the methods to which this rule applies.

            Refer to selector for syntax details.
          type: string
      type: object
    Billing:
      description: >-
        Billing related configuration of the service.


        The following example shows how to configure monitored resources and metrics

        for billing:

            monitored_resources:
            - type: library.googleapis.com/branch
              labels:
              - key: /city
                description: The city where the library branch is located in.
              - key: /name
                description: The name of the branch.
            metrics:
            - name: library.googleapis.com/book/borrowed_count
              metric_kind: DELTA
              value_type: INT64
            billing:
              consumer_destinations:
              - monitored_resource: library.googleapis.com/branch
                metrics:
                - library.googleapis.com/book/borrowed_count
      properties:
        consumerDestinations:
          description: >-
            Billing configurations for sending metrics to the consumer project.

            There can be multiple consumer destinations per service, each one must have

            a different monitored resource type. A metric can be used in at most

            one consumer destination.
          items:
            $ref: "#/components/schemas/BillingDestination"
          type: array
      type: object
    BillingConfig:
      description: Describes the billing configuration for a new tenant project.
      properties:
        billingAccount:
          description: |-
            Name of the billing account.
            For example `billingAccounts/012345-567890-ABCDEF`.
          type: string
      type: object
    BillingDestination:
      description: |-
        Configuration of a specific billing destination (Currently only support
        bill against consumer project).
      properties:
        metrics:
          description: |-
            Names of the metrics to report to this billing destination.
            Each name must be defined in Service.metrics section.
          items:
            type: string
          type: array
        monitoredResource:
          description: |-
            The monitored resource type. The type must be defined in
            Service.monitored_resources section.
          type: string
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    Context:
      description: >-
        `Context` defines which contexts an API requests.


        Example:

            context:
              rules:
              - selector: "*"
                requested:
                - google.rpc.context.ProjectContext
                - google.rpc.context.OriginContext

        The above specifies that all methods in the API request

        `google.rpc.context.ProjectContext` and

        `google.rpc.context.OriginContext`.


        Available context types are defined in package

        `google.rpc.context`.


        This also provides mechanism to whitelist any protobuf message extension that

        can be sent in grpc metadata using “x-goog-ext-<extension_id>-bin” and

        “x-goog-ext-<extension_id>-jspb” format. For example, list any service

        specific protobuf types that can appear in grpc metadata as follows in your

        yaml file:


        Example:

            context:
              rules:
               - selector: "google.example.library.v1.LibraryService.CreateBook"
                 allowed_request_extensions:
                 - google.foo.v1.NewExtension
                 allowed_response_extensions:
                 - google.foo.v1.NewExtension

        You can also specify extension ID instead of fully qualified extension name

        here.
      properties:
        rules:
          description: >-
            A list of RPC context rules that apply to individual API methods.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/ContextRule"
          type: array
      type: object
    ContextRule:
      description: >-
        A context rule provides information about the context for an individual
        API

        element.
      properties:
        allowedRequestExtensions:
          description: >-
            A list of full type names or extension IDs of extensions allowed in
            grpc

            side channel from client to backend.
          items:
            type: string
          type: array
        allowedResponseExtensions:
          description: >-
            A list of full type names or extension IDs of extensions allowed in
            grpc

            side channel from backend to client.
          items:
            type: string
          type: array
        provided:
          description: A list of full type names of provided contexts.
          items:
            type: string
          type: array
        requested:
          description: A list of full type names of requested contexts.
          items:
            type: string
          type: array
        selector:
          description: |-
            Selects the methods to which this rule applies.

            Refer to selector for syntax details.
          type: string
      type: object
    Control:
      description: |-
        Selects and configures the service controller used by the service.  The
        service controller handles features like abuse, quota, billing, logging,
        monitoring, etc.
      properties:
        environment:
          description: |-
            The service control environment to use. If empty, no control plane
            feature (like quota and billing) will be enabled.
          type: string
      type: object
    CreateTenancyUnitRequest:
      description: Request to create a tenancy unit for a service consumer of a managed
        service.
      properties:
        tenancyUnitId:
          description: >-
            Optional service producer-provided identifier of the tenancy unit.

            Must be no longer than 40 characters and preferably URI friendly.

            If it isn't provided, a UID for the tenancy unit is automatically

            generated. The identifier must be unique across a managed service.

            If the tenancy unit already exists for the managed service and service

            consumer pair, calling `CreateTenancyUnit` returns the existing tenancy

            unit if the provided identifier is identical or empty, otherwise the call

            fails.
          type: string
      type: object
    CustomError:
      description: |-
        Customize service error responses.  For example, list any service
        specific protobuf types that can appear in error detail lists of
        error responses.

        Example:

            custom_error:
              types:
              - google.foo.v1.CustomError
              - google.foo.v1.AnotherError
      properties:
        rules:
          description: >-
            The list of custom error rules that apply to individual API
            messages.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/CustomErrorRule"
          type: array
        types:
          description: The list of custom error detail types, e.g.
            'google.foo.v1.CustomError'.
          items:
            type: string
          type: array
      type: object
    CustomErrorRule:
      description: A custom error rule.
      properties:
        isErrorType:
          description: >-
            Mark this message as possible payload in error response.  Otherwise,

            objects of this type will be filtered when they appear in error payload.
          type: boolean
        selector:
          description: |-
            Selects messages to which this rule applies.

            Refer to selector for syntax details.
          type: string
      type: object
    CustomHttpPattern:
      description: A custom pattern is used for defining custom HTTP verb.
      properties:
        kind:
          description: The name of this custom HTTP verb.
          type: string
        path:
          description: The path matched by this custom verb.
          type: string
      type: object
    DeleteTenantProjectRequest:
      description: Request message to delete tenant project resource from the tenancy unit.
      properties:
        tag:
          description: Tag of the resource within the tenancy unit.
          type: string
      type: object
    Documentation:
      description: >-
        `Documentation` provides the information for describing a service.


        Example:

        <pre><code>documentation:
          summary: >
            The Google Calendar API gives access
            to most calendar features.
          pages:
          - name: Overview
            content: &#40;== include google/foo/overview.md ==&#41;
          - name: Tutorial
            content: &#40;== include google/foo/tutorial.md ==&#41;
            subpages;
            - name: Java
              content: &#40;== include google/foo/tutorial_java.md ==&#41;
          rules:
          - selector: google.calendar.Calendar.Get
            description: >
              ...
          - selector: google.calendar.Calendar.Put
            description: >
              ...
        </code></pre>

        Documentation is provided in markdown syntax. In addition to

        standard markdown features, definition lists, tables and fenced

        code blocks are supported. Section headers can be provided and are

        interpreted relative to the section nesting of the context where

        a documentation fragment is embedded.


        Documentation from the IDL is merged with documentation defined

        via the config at normalization time, where documentation provided

        by config rules overrides IDL provided.


        A number of constructs specific to the API platform are supported

        in documentation text.


        In order to reference a proto element, the following

        notation can be used:

        <pre><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>

        To override the display text used for the link, this can be used:

        <pre><code>&#91;display text]&#91;fully.qualified.proto.name]</code></pre>

        Text can be excluded from doc using the following notation:

        <pre><code>&#40;-- internal comment --&#41;</code></pre>


        A few directives are available in documentation. Note that

        directives must appear on a single line to be properly

        identified. The `include` directive includes a markdown file from

        an external source:

        <pre><code>&#40;== include path/to/file ==&#41;</code></pre>

        The `resource_for` directive marks a message to be the resource of

        a collection in REST view. If it is not specified, tools attempt

        to infer the resource from the operations in a collection:

        <pre><code>&#40;== resource_for v1.shelves.books ==&#41;</code></pre>

        The directive `suppress_warning` does not directly affect documentation

        and is documented together with service config validation.
      properties:
        documentationRootUrl:
          description: The URL to the root of documentation.
          type: string
        overview:
          description: >-
            Declares a single overview page. For example:

            <pre><code>documentation:
              summary: ...
              overview: &#40;== include overview.md ==&#41;
            </code></pre>

            This is a shortcut for the following declaration (using pages style):

            <pre><code>documentation:
              summary: ...
              pages:
              - name: Overview
                content: &#40;== include overview.md ==&#41;
            </code></pre>

            Note: you cannot specify both `overview` field and `pages` field.
          type: string
        pages:
          description: The top level pages for the documentation set.
          items:
            $ref: "#/components/schemas/Page"
          type: array
        rules:
          description: >-
            A list of documentation rules that apply to individual API elements.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/DocumentationRule"
          type: array
        serviceRootUrl:
          description: >-
            Specifies the service root url if the default one (the service name

            from the yaml file) is not suitable. This can be seen in any fully

            specified service urls as well as sections that show a base that other

            urls are relative to.
          type: string
        summary:
          description: |-
            A short summary of what the service does. Can only be provided by
            plain text.
          type: string
      type: object
    DocumentationRule:
      description: A documentation rule provides information about individual API elements.
      properties:
        deprecationDescription:
          description: >-
            Deprecation description of the selected element(s). It can be
            provided if

            an element is marked as `deprecated`.
          type: string
        description:
          description: Description of the selected API(s).
          type: string
        selector:
          description: >-
            The selector is a comma-separated list of patterns. Each pattern is
            a

            qualified name of the element which may end in "*", indicating a wildcard.

            Wildcards are only allowed at the end and for a whole component of the

            qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A

            wildcard will match one or more components. To specify a default for all

            applicable elements, the whole pattern "*" is used.
          type: string
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    Endpoint:
      description: >-
        `Endpoint` describes a network endpoint that serves a set of APIs.

        A service may expose any number of endpoints, and all endpoints share the

        same service configuration, such as quota configuration and monitoring

        configuration.


        Example service configuration:

            name: library-example.googleapis.com
            endpoints:
              # Below entry makes 'google.example.library.v1.Library'
              # API be served from endpoint address library-example.googleapis.com.
              # It also allows HTTP OPTIONS calls to be passed to the backend, for
              # it to decide whether the subsequent cross-origin request is
              # allowed to proceed.
            - name: library-example.googleapis.com
              allow_cors: true
      properties:
        aliases:
          description: >-
            DEPRECATED: This field is no longer supported. Instead of using
            aliases,

            please specify multiple google.api.Endpoint for each of the intended

            aliases.


            Additional names that this endpoint will be hosted on.
          items:
            type: string
          type: array
        allowCors:
          description: >-
            Allowing

            [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka

            cross-domain traffic, would allow the backends served from this endpoint to

            receive and respond to HTTP OPTIONS requests. The response will be used by

            the browser to determine whether the subsequent cross-origin request is

            allowed to proceed.
          type: boolean
        features:
          description: The list of features enabled on this endpoint.
          items:
            type: string
          type: array
        name:
          description: The canonical name of this endpoint.
          type: string
        target:
          description: >-
            The specification of an Internet routable address of API frontend
            that will

            handle requests to this [API

            Endpoint](https://cloud.google.com/apis/design/glossary). It should be

            either a valid IPv4 address or a fully-qualified domain name. For example,

            "8.8.8.8" or "myservice.appspot.com".
          type: string
      type: object
    Enum:
      description: Enum type definition.
      properties:
        enumvalue:
          description: Enum value definitions.
          items:
            $ref: "#/components/schemas/EnumValue"
          type: array
        name:
          description: Enum type name.
          type: string
        options:
          description: Protocol buffer options.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        sourceContext:
          $ref: "#/components/schemas/SourceContext"
        syntax:
          description: The source syntax.
          enum:
            - SYNTAX_PROTO2
            - SYNTAX_PROTO3
          type: string
      type: object
    EnumValue:
      description: Enum value definition.
      properties:
        name:
          description: Enum value name.
          type: string
        number:
          description: Enum value number.
          format: int32
          type: integer
        options:
          description: Protocol buffer options.
          items:
            $ref: "#/components/schemas/Option"
          type: array
      type: object
    Field:
      description: A single field of a message type.
      properties:
        cardinality:
          description: The field cardinality.
          enum:
            - CARDINALITY_UNKNOWN
            - CARDINALITY_OPTIONAL
            - CARDINALITY_REQUIRED
            - CARDINALITY_REPEATED
          type: string
        defaultValue:
          description: The string value of the default value of this field. Proto2 syntax
            only.
          type: string
        jsonName:
          description: The field JSON name.
          type: string
        kind:
          description: The field type.
          enum:
            - TYPE_UNKNOWN
            - TYPE_DOUBLE
            - TYPE_FLOAT
            - TYPE_INT64
            - TYPE_UINT64
            - TYPE_INT32
            - TYPE_FIXED64
            - TYPE_FIXED32
            - TYPE_BOOL
            - TYPE_STRING
            - TYPE_GROUP
            - TYPE_MESSAGE
            - TYPE_BYTES
            - TYPE_UINT32
            - TYPE_ENUM
            - TYPE_SFIXED32
            - TYPE_SFIXED64
            - TYPE_SINT32
            - TYPE_SINT64
          type: string
        name:
          description: The field name.
          type: string
        number:
          description: The field number.
          format: int32
          type: integer
        oneofIndex:
          description: >-
            The index of the field type in `Type.oneofs`, for message or
            enumeration

            types. The first type has index 1; zero means the type is not in the list.
          format: int32
          type: integer
        options:
          description: The protocol buffer options.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        packed:
          description: Whether to use alternative packed wire representation.
          type: boolean
        typeUrl:
          description: |-
            The field type URL, without the scheme, for message or enumeration
            types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
          type: string
      type: object
    Http:
      description: |-
        Defines the HTTP configuration for an API service. It contains a list of
        HttpRule, each specifying the mapping of an RPC method
        to one or more HTTP REST API methods.
      properties:
        fullyDecodeReservedExpansion:
          description: >-
            When set to true, URL path parameters will be fully URI-decoded
            except in

            cases of single segment matches in reserved expansion, where "%2F" will be

            left encoded.


            The default behavior is to not decode RFC 6570 reserved characters in multi

            segment matches.
          type: boolean
        rules:
          description: >-
            A list of HTTP configuration rules that apply to individual API
            methods.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/HttpRule"
          type: array
      type: object
    HttpRule:
      description: >-
        # gRPC Transcoding


        gRPC Transcoding is a feature for mapping between a gRPC method and one or

        more HTTP REST endpoints. It allows developers to build a single API service

        that supports both gRPC APIs and REST APIs. Many systems, including [Google

        APIs](https://github.com/googleapis/googleapis),

        [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC

        Gateway](https://github.com/grpc-ecosystem/grpc-gateway),

        and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature

        and use it for large scale production services.


        `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies

        how different portions of the gRPC request message are mapped to the URL

        path, URL query parameters, and HTTP request body. It also controls how the

        gRPC response message is mapped to the HTTP response body. `HttpRule` is

        typically specified as an `google.api.http` annotation on the gRPC method.


        Each mapping specifies a URL path template and an HTTP method. The path

        template may refer to one or more fields in the gRPC request message, as long

        as each field is a non-repeated field with a primitive (non-message) type.

        The path template controls how fields of the request message are mapped to

        the URL path.


        Example:

            service Messaging {
              rpc GetMessage(GetMessageRequest) returns (Message) {
                option (google.api.http) = {
                    get: "/v1/{name=messages/*}"
                };
              }
            }
            message GetMessageRequest {
              string name = 1; // Mapped to URL path.
            }
            message Message {
              string text = 1; // The resource content.
            }

        This enables an HTTP REST to gRPC mapping as below:


        HTTP | gRPC

        -----|-----

        `GET /v1/messages/123456`  | `GetMessage(name: "messages/123456")`


        Any fields in the request message which are not bound by the path template

        automatically become HTTP query parameters if there is no HTTP request body.

        For example:

            service Messaging {
              rpc GetMessage(GetMessageRequest) returns (Message) {
                option (google.api.http) = {
                    get:"/v1/messages/{message_id}"
                };
              }
            }
            message GetMessageRequest {
              message SubMessage {
                string subfield = 1;
              }
              string message_id = 1; // Mapped to URL path.
              int64 revision = 2;    // Mapped to URL query parameter `revision`.
              SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`.
            }

        This enables a HTTP JSON to RPC mapping as below:


        HTTP | gRPC

        -----|-----

        `GET /v1/messages/123456?revision=2&sub.subfield=foo` |

        `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield:

        "foo"))`


        Note that fields which are mapped to URL query parameters must have a

        primitive type or a repeated primitive type or a non-repeated message type.

        In the case of a repeated type, the parameter can be repeated in the URL

        as `...?param=A&param=B`. In the case of a message type, each field of the

        message is mapped to a separate parameter, such as

        `...?foo.a=A&foo.b=B&foo.c=C`.


        For HTTP methods that allow a request body, the `body` field

        specifies the mapping. Consider a REST update method on the

        message resource collection:

            service Messaging {
              rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
                option (google.api.http) = {
                  patch: "/v1/messages/{message_id}"
                  body: "message"
                };
              }
            }
            message UpdateMessageRequest {
              string message_id = 1; // mapped to the URL
              Message message = 2;   // mapped to the body
            }

        The following HTTP JSON to RPC mapping is enabled, where the

        representation of the JSON in the request body is determined by

        protos JSON encoding:


        HTTP | gRPC

        -----|-----

        `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:

        "123456" message { text: "Hi!" })`


        The special name `*` can be used in the body mapping to define that

        every field not bound by the path template should be mapped to the

        request body.  This enables the following alternative definition of

        the update method:

            service Messaging {
              rpc UpdateMessage(Message) returns (Message) {
                option (google.api.http) = {
                  patch: "/v1/messages/{message_id}"
                  body: "*"
                };
              }
            }
            message Message {
              string message_id = 1;
              string text = 2;
            }


        The following HTTP JSON to RPC mapping is enabled:


        HTTP | gRPC

        -----|-----

        `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:

        "123456" text: "Hi!")`


        Note that when using `*` in the body mapping, it is not possible to

        have HTTP parameters, as all fields not bound by the path end in

        the body. This makes this option more rarely used in practice when

        defining REST APIs. The common usage of `*` is in custom methods

        which don't use the URL at all for transferring data.


        It is possible to define multiple HTTP methods for one RPC by using

        the `additional_bindings` option. Example:

            service Messaging {
              rpc GetMessage(GetMessageRequest) returns (Message) {
                option (google.api.http) = {
                  get: "/v1/messages/{message_id}"
                  additional_bindings {
                    get: "/v1/users/{user_id}/messages/{message_id}"
                  }
                };
              }
            }
            message GetMessageRequest {
              string message_id = 1;
              string user_id = 2;
            }

        This enables the following two alternative HTTP JSON to RPC mappings:


        HTTP | gRPC

        -----|-----

        `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`

        `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id:

        "123456")`


        ## Rules for HTTP mapping


        1. Leaf request fields (recursive expansion nested messages in the request
           message) are classified into three categories:
           - Fields referred by the path template. They are passed via the URL path.
           - Fields referred by the HttpRule.body. They are passed via the HTTP
             request body.
           - All other fields are passed via the URL query parameters, and the
             parameter name is the field path in the request message. A repeated
             field can be represented as multiple query parameters under the same
             name.
         2. If HttpRule.body is "*", there is no URL query parameter, all fields
            are passed via URL path and HTTP request body.
         3. If HttpRule.body is omitted, there is no HTTP request body, all
            fields are passed via URL path and URL query parameters.

        ### Path template syntax

            Template = "/" Segments [ Verb ] ;
            Segments = Segment { "/" Segment } ;
            Segment  = "*" | "**" | LITERAL | Variable ;
            Variable = "{" FieldPath [ "=" Segments ] "}" ;
            FieldPath = IDENT { "." IDENT } ;
            Verb     = ":" LITERAL ;

        The syntax `*` matches a single URL path segment. The syntax `**` matches

        zero or more URL path segments, which must be the last part of the URL path

        except the `Verb`.


        The syntax `Variable` matches part of the URL path as specified by its

        template. A variable template must not contain other variables. If a variable

        matches a single path segment, its template may be omitted, e.g. `{var}`

        is equivalent to `{var=*}`.


        The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL`

        contains any reserved character, such characters should be percent-encoded

        before the matching.


        If a variable contains exactly one path segment, such as `"{var}"` or

        `"{var=*}"`, when such a variable is expanded into a URL path on the client

        side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The

        server side does the reverse decoding. Such variables show up in the

        [Discovery

        Document](https://developers.google.com/discovery/v1/reference/apis) as

        `{var}`.


        If a variable contains multiple path segments, such as `"{var=foo/*}"`

        or `"{var=**}"`, when such a variable is expanded into a URL path on the

        client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded.

        The server side does the reverse decoding, except "%2F" and "%2f" are left

        unchanged. Such variables show up in the

        [Discovery

        Document](https://developers.google.com/discovery/v1/reference/apis) as

        `{+var}`.


        ## Using gRPC API Service Configuration


        gRPC API Service Configuration (service config) is a configuration language

        for configuring a gRPC service to become a user-facing product. The

        service config is simply the YAML representation of the `google.api.Service`

        proto message.


        As an alternative to annotating your proto file, you can configure gRPC

        transcoding in your service config YAML files. You do this by specifying a

        `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same

        effect as the proto annotation. This can be particularly useful if you

        have a proto that is reused in multiple services. Note that any transcoding

        specified in the service config will override any matching transcoding

        configuration in the proto.


        Example:

            http:
              rules:
                # Selects a gRPC method and applies HttpRule to it.
                - selector: example.v1.Messaging.GetMessage
                  get: /v1/messages/{message_id}/{sub.subfield}

        ## Special notes


        When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the

        proto to JSON conversion must follow the [proto3

        specification](https://developers.google.com/protocol-buffers/docs/proto3#json).


        While the single segment variable follows the semantics of

        [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String

        Expansion, the multi segment variable **does not** follow RFC 6570 Section

        3.2.3 Reserved Expansion. The reason is that the Reserved Expansion

        does not expand special characters like `?` and `#`, which would lead

        to invalid URLs. As the result, gRPC Transcoding uses a custom encoding

        for multi segment variables.


        The path variables **must not** refer to any repeated or mapped field,

        because client libraries are not capable of handling such variable expansion.


        The path variables **must not** capture the leading "/" character. The reason

        is that the most common use case "{var}" does not capture the leading "/"

        character. For consistency, all path variables must share the same behavior.


        Repeated message fields must not be mapped to URL query parameters, because

        no client library can support such complicated mapping.


        If an API needs to use a JSON array for request or response body, it can map

        the request or response body to a repeated field. However, some gRPC

        Transcoding implementations may not support this feature.
      properties:
        additionalBindings:
          description: |-
            Additional HTTP bindings for the selector. Nested bindings must
            not contain an `additional_bindings` field themselves (that is,
            the nesting may only be one level deep).
          items:
            $ref: "#/components/schemas/HttpRule"
          type: array
        body:
          description: >-
            The name of the request field whose value is mapped to the HTTP
            request

            body, or `*` for mapping all request fields not captured by the path

            pattern to the HTTP body, or omitted for not having any HTTP request body.


            NOTE: the referred field must be present at the top-level of the request

            message type.
          type: string
        custom:
          $ref: "#/components/schemas/CustomHttpPattern"
        delete:
          description: Maps to HTTP DELETE. Used for deleting a resource.
          type: string
        get:
          description: |-
            Maps to HTTP GET. Used for listing and getting information about
            resources.
          type: string
        patch:
          description: Maps to HTTP PATCH. Used for updating a resource.
          type: string
        post:
          description: Maps to HTTP POST. Used for creating a resource or performing an
            action.
          type: string
        put:
          description: Maps to HTTP PUT. Used for replacing a resource.
          type: string
        responseBody:
          description: >-
            Optional. The name of the response field whose value is mapped to
            the HTTP

            response body. When omitted, the entire response message will be used

            as the HTTP response body.


            NOTE: The referred field must be present at the top-level of the response

            message type.
          type: string
        selector:
          description: |-
            Selects a method to which this rule applies.

            Refer to selector for syntax details.
          type: string
      type: object
    LabelDescriptor:
      description: A description of a label.
      properties:
        description:
          description: A human-readable description for the label.
          type: string
        key:
          description: The label key.
          type: string
        valueType:
          description: The type of data that can be assigned to the label.
          enum:
            - STRING
            - BOOL
            - INT64
          type: string
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: A list of operations that matches the specified filter in the
            request.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
      type: object
    ListTenancyUnitsResponse:
      description: Response for the list request.
      properties:
        nextPageToken:
          description: Pagination token for large results.
          type: string
        tenancyUnits:
          description: Tenancy units matching the request.
          items:
            $ref: "#/components/schemas/TenancyUnit"
          type: array
      type: object
    LogDescriptor:
      description: |-
        A description of a log type. Example in YAML format:

            - name: library.googleapis.com/activity_history
              description: The history of borrowing and returning library items.
              display_name: Activity
              labels:
              - key: /customer_id
                description: Identifier of a library customer
      properties:
        description:
          description: >-
            A human-readable description of this log. This information appears
            in

            the documentation and can contain details.
          type: string
        displayName:
          description: |-
            The human-readable name for this log. This information appears on
            the user interface and should be concise.
          type: string
        labels:
          description: >-
            The set of labels that are available to describe a specific log
            entry.

            Runtime requests that contain labels not specified here are

            considered invalid.
          items:
            $ref: "#/components/schemas/LabelDescriptor"
          type: array
        name:
          description: >-
            The name of the log. It must be less than 512 characters long and
            can

            include the following characters: upper- and lower-case alphanumeric

            characters [A-Za-z0-9], and punctuation characters including

            slash, underscore, hyphen, period [/_-.].
          type: string
      type: object
    Logging:
      description: |-
        Logging configuration of the service.

        The following example shows how to configure logs to be sent to the
        producer and consumer projects. In the example, the `activity_history`
        log is sent to both the producer and consumer projects, whereas the
        `purchase_history` log is only sent to the producer project.

            monitored_resources:
            - type: library.googleapis.com/branch
              labels:
              - key: /city
                description: The city where the library branch is located in.
              - key: /name
                description: The name of the branch.
            logs:
            - name: activity_history
              labels:
              - key: /customer_id
            - name: purchase_history
            logging:
              producer_destinations:
              - monitored_resource: library.googleapis.com/branch
                logs:
                - activity_history
                - purchase_history
              consumer_destinations:
              - monitored_resource: library.googleapis.com/branch
                logs:
                - activity_history
      properties:
        consumerDestinations:
          description: |-
            Logging configurations for sending logs to the consumer project.
            There can be multiple consumer destinations, each one must have a
            different monitored resource type. A log can be used in at most
            one consumer destination.
          items:
            $ref: "#/components/schemas/LoggingDestination"
          type: array
        producerDestinations:
          description: |-
            Logging configurations for sending logs to the producer project.
            There can be multiple producer destinations, each one must have a
            different monitored resource type. A log can be used in at most
            one producer destination.
          items:
            $ref: "#/components/schemas/LoggingDestination"
          type: array
      type: object
    LoggingDestination:
      description: |-
        Configuration of a specific logging destination (the producer project
        or the consumer project).
      properties:
        logs:
          description: |-
            Names of the logs to be sent to this destination. Each name must
            be defined in the Service.logs section. If the log name is
            not a domain scoped name, it will be automatically prefixed with
            the service name followed by "/".
          items:
            type: string
          type: array
        monitoredResource:
          description: |-
            The monitored resource type. The type must be defined in the
            Service.monitored_resources section.
          type: string
      type: object
    Method:
      description: Method represents a method of an API interface.
      properties:
        name:
          description: The simple name of this method.
          type: string
        options:
          description: Any metadata attached to the method.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        requestStreaming:
          description: If true, the request is streamed.
          type: boolean
        requestTypeUrl:
          description: A URL of the input message type.
          type: string
        responseStreaming:
          description: If true, the response is streamed.
          type: boolean
        responseTypeUrl:
          description: The URL of the output message type.
          type: string
        syntax:
          description: The source syntax of this method.
          enum:
            - SYNTAX_PROTO2
            - SYNTAX_PROTO3
          type: string
      type: object
    MetricDescriptor:
      description: >-
        Defines a metric type and its schema. Once a metric descriptor is
        created,

        deleting or altering it stops data collection and makes the metric type's

        existing data unusable.
      properties:
        description:
          description: A detailed description of the metric, which can be used in
            documentation.
          type: string
        displayName:
          description: >-
            A concise name for the metric, which can be displayed in user
            interfaces.

            Use sentence case without an ending period, for example "Request count".

            This field is optional but it is recommended to be set for any metrics

            associated with user-visible concepts, such as Quota.
          type: string
        labels:
          description: |-
            The set of labels that can be used to describe a specific
            instance of this metric type. For example, the
            `appengine.googleapis.com/http/server/response_latencies` metric
            type has a label for the HTTP response code, `response_code`, so
            you can look at latencies for successful responses or just
            for responses that failed.
          items:
            $ref: "#/components/schemas/LabelDescriptor"
          type: array
        launchStage:
          description: Optional. The launch stage of the metric definition.
          enum:
            - LAUNCH_STAGE_UNSPECIFIED
            - EARLY_ACCESS
            - ALPHA
            - BETA
            - GA
            - DEPRECATED
          type: string
        metadata:
          $ref: "#/components/schemas/MetricDescriptorMetadata"
        metricKind:
          description: >-
            Whether the metric records instantaneous values, changes to a value,
            etc.

            Some combinations of `metric_kind` and `value_type` might not be supported.
          enum:
            - METRIC_KIND_UNSPECIFIED
            - GAUGE
            - DELTA
            - CUMULATIVE
          type: string
        monitoredResourceTypes:
          description: >-
            Read-only. If present, then a time

            series, which is identified partially by

            a metric type and a MonitoredResourceDescriptor, that is associated

            with this metric type can only be associated with one of the monitored

            resource types listed here.
          items:
            type: string
          type: array
        name:
          description: The resource name of the metric descriptor.
          type: string
        type:
          description: >-
            The metric type, including its DNS name prefix. The type is not

            URL-encoded.  All user-defined metric types have the DNS name

            `custom.googleapis.com` or `external.googleapis.com`.  Metric types should

            use a natural hierarchical grouping. For example:

                "custom.googleapis.com/invoice/paid/amount"
                "external.googleapis.com/prometheus/up"
                "appengine.googleapis.com/http/server/response_latencies"
          type: string
        unit:
          description: >-
            The unit in which the metric value is reported. It is only
            applicable

            if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The

            supported units are a subset of [The Unified Code for Units of

            Measure](http://unitsofmeasure.org/ucum.html) standard:


            **Basic units (UNIT)**


            * `bit`   bit

            * `By`    byte

            * `s`     second

            * `min`   minute

            * `h`     hour

            * `d`     day


            **Prefixes (PREFIX)**


            * `k`     kilo    (10**3)

            * `M`     mega    (10**6)

            * `G`     giga    (10**9)

            * `T`     tera    (10**12)

            * `P`     peta    (10**15)

            * `E`     exa     (10**18)

            * `Z`     zetta   (10**21)

            * `Y`     yotta   (10**24)

            * `m`     milli   (10**-3)

            * `u`     micro   (10**-6)

            * `n`     nano    (10**-9)

            * `p`     pico    (10**-12)

            * `f`     femto   (10**-15)

            * `a`     atto    (10**-18)

            * `z`     zepto   (10**-21)

            * `y`     yocto   (10**-24)

            * `Ki`    kibi    (2**10)

            * `Mi`    mebi    (2**20)

            * `Gi`    gibi    (2**30)

            * `Ti`    tebi    (2**40)


            **Grammar**


            The grammar also includes these connectors:


            * `/`    division (as an infix operator, e.g. `1/s`).

            * `.`    multiplication (as an infix operator, e.g. `GBy.d`)


            The grammar for a unit is as follows:

                Expression = Component { "." Component } { "/" Component } ;

                Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
                          | Annotation
                          | "1"
                          ;

                Annotation = "{" NAME "}" ;

            Notes:


            * `Annotation` is just a comment if it follows a `UNIT` and is
               equivalent to `1` if it is used alone. For examples,
               `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
            * `NAME` is a sequence of non-blank printable ASCII characters not
               containing '{' or '}'.
            * `1` represents dimensionless value 1, such as in `1/s`.

            * `%` represents dimensionless value 1/100, and annotates values giving
               a percentage.
          type: string
        valueType:
          description: >-
            Whether the measurement is an integer, a floating-point number, etc.

            Some combinations of `metric_kind` and `value_type` might not be supported.
          enum:
            - VALUE_TYPE_UNSPECIFIED
            - BOOL
            - INT64
            - DOUBLE
            - STRING
            - DISTRIBUTION
            - MONEY
          type: string
      type: object
    MetricDescriptorMetadata:
      description: Additional annotations that can be used to guide the usage of a metric.
      properties:
        ingestDelay:
          description: >-
            The delay of data points caused by ingestion. Data points older than
            this

            age are guaranteed to be ingested and available to be read, excluding

            data loss due to errors.
          format: google-duration
          type: string
        launchStage:
          description: Deprecated. Must use the MetricDescriptor.launch_stage instead.
          enum:
            - LAUNCH_STAGE_UNSPECIFIED
            - EARLY_ACCESS
            - ALPHA
            - BETA
            - GA
            - DEPRECATED
          type: string
        samplePeriod:
          description: >-
            The sampling period of metric data points. For metrics which are
            written

            periodically, consecutive data points are stored at this time interval,

            excluding data loss due to errors. Metrics with a higher granularity have

            a smaller sampling period.
          format: google-duration
          type: string
      type: object
    MetricRule:
      description: |-
        Bind API methods to metrics. Binding a method to a metric causes that
        metric's configured quota behaviors to apply to the method call.
      properties:
        metricCosts:
          additionalProperties:
            format: int64
            type: string
          description: >-
            Metrics to update when the selected methods are called, and the
            associated

            cost applied to each metric.


            The key of the map is the metric name, and the values are the amount

            increased for the metric against which the quota limits are defined.

            The value must not be negative.
          type: object
        selector:
          description: |-
            Selects the methods to which this rule applies.

            Refer to selector for syntax details.
          type: string
      type: object
    Mixin:
      description: >-
        Declares an API Interface to be included in this interface. The
        including

        interface must redeclare all the methods from the included interface, but

        documentation and options are inherited as follows:


        - If after comment and whitespace stripping, the documentation
          string of the redeclared method is empty, it will be inherited
          from the original method.

        - Each annotation belonging to the service config (http,
          visibility) which is not set in the redeclared method will be
          inherited.

        - If an http annotation is inherited, the path pattern will be
          modified as follows. Any version prefix will be replaced by the
          version of the including interface plus the root path if
          specified.

        Example of a simple mixin:

            package google.acl.v1;
            service AccessControl {
              // Get the underlying ACL object.
              rpc GetAcl(GetAclRequest) returns (Acl) {
                option (google.api.http).get = "/v1/{resource=**}:getAcl";
              }
            }

            package google.storage.v2;
            service Storage {
              //       rpc GetAcl(GetAclRequest) returns (Acl);

              // Get a data record.
              rpc GetData(GetDataRequest) returns (Data) {
                option (google.api.http).get = "/v2/{resource=**}";
              }
            }

        Example of a mixin configuration:

            apis:
            - name: google.storage.v2.Storage
              mixins:
              - name: google.acl.v1.AccessControl

        The mixin construct implies that all methods in `AccessControl` are

        also declared with same name and request/response types in

        `Storage`. A documentation generator or annotation processor will

        see the effective `Storage.GetAcl` method after inherting

        documentation and annotations as follows:

            service Storage {
              // Get the underlying ACL object.
              rpc GetAcl(GetAclRequest) returns (Acl) {
                option (google.api.http).get = "/v2/{resource=**}:getAcl";
              }
              ...
            }

        Note how the version in the path pattern changed from `v1` to `v2`.


        If the `root` field in the mixin is specified, it should be a

        relative path under which inherited HTTP paths are placed. Example:

            apis:
            - name: google.storage.v2.Storage
              mixins:
              - name: google.acl.v1.AccessControl
                root: acls

        This implies the following inherited HTTP annotation:

            service Storage {
              // Get the underlying ACL object.
              rpc GetAcl(GetAclRequest) returns (Acl) {
                option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
              }
              ...
            }
      properties:
        name:
          description: The fully qualified name of the interface which is included.
          type: string
        root:
          description: |-
            If non-empty specifies a path under which inherited HTTP paths
            are rooted.
          type: string
      type: object
    MonitoredResourceDescriptor:
      description: >-
        An object that describes the schema of a MonitoredResource object using
        a

        type name and a set of labels.  For example, the monitored resource

        descriptor for Google Compute Engine VM instances has a type of

        `"gce_instance"` and specifies the use of the labels `"instance_id"` and

        `"zone"` to identify particular VM instances.


        Different APIs can support different monitored resource types. APIs generally

        provide a `list` method that returns the monitored resource descriptors used

        by the API.
      properties:
        description:
          description: >-
            Optional. A detailed description of the monitored resource type that
            might

            be used in documentation.
          type: string
        displayName:
          description: >-
            Optional. A concise name for the monitored resource type that might
            be

            displayed in user interfaces. It should be a Title Cased Noun Phrase,

            without any article or other determiners. For example,

            `"Google Cloud SQL Database"`.
          type: string
        labels:
          description: >-
            Required. A set of labels used to describe instances of this
            monitored

            resource type. For example, an individual Google Cloud SQL database is

            identified by values for the labels `"database_id"` and `"zone"`.
          items:
            $ref: "#/components/schemas/LabelDescriptor"
          type: array
        launchStage:
          description: Optional. The launch stage of the monitored resource definition.
          enum:
            - LAUNCH_STAGE_UNSPECIFIED
            - EARLY_ACCESS
            - ALPHA
            - BETA
            - GA
            - DEPRECATED
          type: string
        name:
          description: >-
            Optional. The resource name of the monitored resource descriptor:

            `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where

            {type} is the value of the `type` field in this object and

            {project_id} is a project ID that provides API-specific context for

            accessing the type.  APIs that do not use project information can use the

            resource name format `"monitoredResourceDescriptors/{type}"`.
          type: string
        type:
          description: |-
            Required. The monitored resource type. For example, the type
            `"cloudsql_database"` represents databases in Google Cloud SQL.
            The maximum length of this value is 256 characters.
          type: string
      type: object
    Monitoring:
      description: |-
        Monitoring configuration of the service.

        The example below shows how to configure monitored resources and metrics
        for monitoring. In the example, a monitored resource and two metrics are
        defined. The `library.googleapis.com/book/returned_count` metric is sent
        to both producer and consumer projects, whereas the
        `library.googleapis.com/book/overdue_count` metric is only sent to the
        consumer project.

            monitored_resources:
            - type: library.googleapis.com/branch
              labels:
              - key: /city
                description: The city where the library branch is located in.
              - key: /name
                description: The name of the branch.
            metrics:
            - name: library.googleapis.com/book/returned_count
              metric_kind: DELTA
              value_type: INT64
              labels:
              - key: /customer_id
            - name: library.googleapis.com/book/overdue_count
              metric_kind: GAUGE
              value_type: INT64
              labels:
              - key: /customer_id
            monitoring:
              producer_destinations:
              - monitored_resource: library.googleapis.com/branch
                metrics:
                - library.googleapis.com/book/returned_count
              consumer_destinations:
              - monitored_resource: library.googleapis.com/branch
                metrics:
                - library.googleapis.com/book/returned_count
                - library.googleapis.com/book/overdue_count
      properties:
        consumerDestinations:
          description: >-
            Monitoring configurations for sending metrics to the consumer
            project.

            There can be multiple consumer destinations. A monitored resouce type may

            appear in multiple monitoring destinations if different aggregations are

            needed for different sets of metrics associated with that monitored

            resource type. A monitored resource and metric pair may only be used once

            in the Monitoring configuration.
          items:
            $ref: "#/components/schemas/MonitoringDestination"
          type: array
        producerDestinations:
          description: >-
            Monitoring configurations for sending metrics to the producer
            project.

            There can be multiple producer destinations. A monitored resouce type may

            appear in multiple monitoring destinations if different aggregations are

            needed for different sets of metrics associated with that monitored

            resource type. A monitored resource and metric pair may only be used once

            in the Monitoring configuration.
          items:
            $ref: "#/components/schemas/MonitoringDestination"
          type: array
      type: object
    MonitoringDestination:
      description: |-
        Configuration of a specific monitoring destination (the producer project
        or the consumer project).
      properties:
        metrics:
          description: |-
            Types of the metrics to report to this monitoring destination.
            Each type must be defined in Service.metrics section.
          items:
            type: string
          type: array
        monitoredResource:
          description: |-
            The monitored resource type. The type must be defined in
            Service.monitored_resources section.
          type: string
      type: object
    OAuthRequirements:
      description: >-
        OAuth scopes are a way to define data and permissions on data. For
        example,

        there are scopes defined for "Read-only access to Google Calendar" and

        "Access to Cloud Platform". Users can consent to a scope for an application,

        giving it permission to access that data on their behalf.


        OAuth scope specifications should be fairly coarse grained; a user will need

        to see and understand the text description of what your scope means.


        In most cases: use one or at most two OAuth scopes for an entire family of

        products. If your product has multiple APIs, you should probably be sharing

        the OAuth scope across all of those APIs.


        When you need finer grained OAuth consent screens: talk with your product

        management about how developers will use them in practice.


        Please note that even though each of the canonical scopes is enough for a

        request to be accepted and passed to the backend, a request can still fail

        due to the backend requiring additional scopes or permissions.
      properties:
        canonicalScopes:
          description: >-
            The list of publicly documented OAuth scopes that are allowed
            access. An

            OAuth token containing any of these scopes will be accepted.


            Example:

                 canonical_scopes: https://www.googleapis.com/auth/calendar,
                                   https://www.googleapis.com/auth/calendar.read
          type: string
      type: object
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a

        network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress.

            If `true`, the operation is completed, and either `error` or `response` is

            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation.  It
            typically

            contains progress information and common metadata such as create time.

            Some services might not provide such metadata.  Any method that returns a

            long-running operation should document the metadata type, if any.
          type: object
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that

            originally returns it. If you use the default HTTP mapping, the

            `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The normal response of the operation in case of success.  If the
            original

            method returns no data on success, such as `Delete`, the response is

            `google.protobuf.Empty`.  If the original method is standard

            `Get`/`Create`/`Update`, the response should be the resource.  For other

            methods, the response should have the type `XxxResponse`, where `Xxx`

            is the original method name.  For example, if the original method name

            is `TakeSnapshot()`, the inferred response type is

            `TakeSnapshotResponse`.
          type: object
      type: object
    Option:
      description: |-
        A protocol buffer option, which can be attached to a message, field,
        enumeration, etc.
      properties:
        name:
          description: >-
            The option's name. For protobuf built-in options (options defined in

            descriptor.proto), this is the short name. For example, `"map_entry"`.

            For custom options, it should be the fully-qualified name. For example,

            `"google.api.http"`.
          type: string
        value:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The option's value packed in an Any message. If the value is a
            primitive,

            the corresponding wrapper type defined in google/protobuf/wrappers.proto

            should be used. If the value is an enum, it should be stored as an int32

            value using the google.protobuf.Int32Value type.
          type: object
      type: object
    Page:
      description: >-
        Represents a documentation page. A page can contain subpages to
        represent

        nested documentation set structure.
      properties:
        content:
          description: >-
            The Markdown content of the page. You can use <code>&#40;== include
            {path}

            ==&#41;</code> to include content from a Markdown file.
          type: string
        name:
          description: >-
            The name of the page. It will be used as an identity of the page to

            generate URI of the page, text of the link to this page in navigation,

            etc. The full page name (start from the root page name to this page

            concatenated with `.`) can be used as reference to the page in your

            documentation. For example:

            <pre><code>pages:

            - name: Tutorial
              content: &#40;== include tutorial.md ==&#41;
              subpages:
              - name: Java
                content: &#40;== include tutorial_java.md ==&#41;
            </code></pre>

            You can reference `Java` page using Markdown reference link syntax:

            `Java`.
          type: string
        subpages:
          description: |-
            Subpages of this page. The order of subpages specified here will be
            honored in the generated docset.
          items:
            $ref: "#/components/schemas/Page"
          type: array
      type: object
    PolicyBinding:
      description: Translates to IAM Policy bindings (without auditing at this level)
      properties:
        members:
          description: >-
            Uses the same format as in IAM policy.

            `member` must include both a prefix and ID. For example, `user:{emailId}`,

            `serviceAccount:{emailId}`, `group:{emailId}`.
          items:
            type: string
          type: array
        role:
          description: |-
            Role. (https://cloud.google.com/iam/docs/understanding-roles)
            For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
      type: object
    Quota:
      description: >+
        Quota configuration helps to achieve fairness and budgeting in service

        usage.


        The metric based quota configuration works this way:

        - The service configuration defines a set of metrics.

        - For API calls, the quota.metric_rules maps methods to metrics with
          corresponding costs.
        - The quota.limits defines limits on the metrics, which will be used for
          quota checks at runtime.

        An example quota configuration in yaml format:

           quota:
             limits:

             - name: apiWriteQpsPerProject
               metric: library.googleapis.com/write_calls
               unit: "1/min/{project}"  # rate limit for consumer projects
               values:
                 STANDARD: 10000


             # The metric rules bind all methods to the read_calls metric,
             # except for the UpdateBook and DeleteBook methods. These two methods
             # are mapped to the write_calls metric, with the UpdateBook method
             # consuming at twice rate as the DeleteBook method.
             metric_rules:
             - selector: "*"
               metric_costs:
                 library.googleapis.com/read_calls: 1
             - selector: google.example.library.v1.LibraryService.UpdateBook
               metric_costs:
                 library.googleapis.com/write_calls: 2
             - selector: google.example.library.v1.LibraryService.DeleteBook
               metric_costs:
                 library.googleapis.com/write_calls: 1

         Corresponding Metric definition:

             metrics:
             - name: library.googleapis.com/read_calls
               display_name: Read requests
               metric_kind: DELTA
               value_type: INT64

             - name: library.googleapis.com/write_calls
               display_name: Write requests
               metric_kind: DELTA
               value_type: INT64

      properties:
        limits:
          description: List of `QuotaLimit` definitions for the service.
          items:
            $ref: "#/components/schemas/QuotaLimit"
          type: array
        metricRules:
          description: >-
            List of `MetricRule` definitions, each one mapping a selected method
            to one

            or more metrics.
          items:
            $ref: "#/components/schemas/MetricRule"
          type: array
      type: object
    QuotaLimit:
      description: >-
        `QuotaLimit` defines a specific limit that applies over a specified
        duration

        for a limit type. There can be at most one limit for a duration and limit

        type combination defined within a `QuotaGroup`.
      properties:
        defaultLimit:
          description: >-
            Default number of tokens that can be consumed during the specified

            duration. This is the number of tokens assigned when a client

            application developer activates the service for his/her project.


            Specifying a value of 0 will block all requests. This can be used if you

            are provisioning quota to selected consumers and blocking others.

            Similarly, a value of -1 will indicate an unlimited quota. No other

            negative values are allowed.


            Used by group-based quotas only.
          format: int64
          type: string
        description:
          description: >-
            Optional. User-visible, extended description for this quota limit.

            Should be used only when more context is needed to understand this limit

            than provided by the limit's display name (see: `display_name`).
          type: string
        displayName:
          description: >-
            User-visible display name for this limit.

            Optional. If not set, the UI will provide a default display name based on

            the quota configuration. This field can be used to override the default

            display name generated from the configuration.
          type: string
        duration:
          description: |-
            Duration of this limit in textual notation. Must be "100s" or "1d".

            Used by group-based quotas only.
          type: string
        freeTier:
          description: >-
            Free tier value displayed in the Developers Console for this limit.

            The free tier is the number of tokens that will be subtracted from the

            billed amount when billing is enabled.

            This field can only be set on a limit with duration "1d", in a billable

            group; it is invalid on any other limit. If this field is not set, it

            defaults to 0, indicating that there is no free tier for this service.


            Used by group-based quotas only.
          format: int64
          type: string
        maxLimit:
          description: >-
            Maximum number of tokens that can be consumed during the specified

            duration. Client application developers can override the default limit up

            to this maximum. If specified, this value cannot be set to a value less

            than the default limit. If not specified, it is set to the default limit.


            To allow clients to apply overrides with no upper bound, set this to -1,

            indicating unlimited maximum quota.


            Used by group-based quotas only.
          format: int64
          type: string
        metric:
          description: >-
            The name of the metric this quota limit applies to. The quota limits
            with

            the same metric will be checked together during runtime. The metric must be

            defined within the service config.
          type: string
        name:
          description: >-
            Name of the quota limit.


            The name must be provided, and it must be unique within the service. The

            name can only include alphanumeric characters as well as '-'.


            The maximum length of the limit name is 64 characters.
          type: string
        unit:
          description: >-
            Specify the unit of the quota limit. It uses the same syntax as

            Metric.unit. The supported unit kinds are determined by the quota

            backend system.


            Here are some examples:

            * "1/min/{project}" for quota per minute per project.


            Note: the order of unit components is insignificant.

            The "1" at the beginning is required to follow the metric unit syntax.
          type: string
        values:
          additionalProperties:
            format: int64
            type: string
          description: >-
            Tiered limit values. You must specify this as a key:value pair, with
            an

            integer value that is the maximum number of requests allowed for the

            specified unit. Currently only STANDARD is supported.
          type: object
      type: object
    RemoveTenantProjectRequest:
      description: Request message to remove a tenant project resource from the tenancy
        unit.
      properties:
        tag:
          description: Tag of the resource within the tenancy unit.
          type: string
      type: object
    SearchTenancyUnitsResponse:
      description: Response for the search query.
      properties:
        nextPageToken:
          description: Pagination token for large results.
          type: string
        tenancyUnits:
          description: Tenancy Units matching the request.
          items:
            $ref: "#/components/schemas/TenancyUnit"
          type: array
      type: object
    Service:
      description: >-
        `Service` is the root object of Google service configuration schema. It

        describes basic information about a service, such as the name and the

        title, and delegates other aspects to sub-sections. Each sub-section is

        either a proto message or a repeated proto message that configures a

        specific aspect, such as auth. See each proto message definition for details.


        Example:

            type: google.api.Service
            config_version: 3
            name: calendar.googleapis.com
            title: Google Calendar API
            apis:
            - name: google.calendar.v3.Calendar
            authentication:
              providers:
              - id: google_calendar_auth
                jwks_uri: https://www.googleapis.com/oauth2/v1/certs
                issuer: https://securetoken.google.com
              rules:
              - selector: "*"
                requirements:
                  provider_id: google_calendar_auth
      properties:
        apis:
          description: >-
            A list of API interfaces exported by this service. Only the `name`
            field

            of the google.protobuf.Api needs to be provided by the configuration

            author, as the remaining fields will be derived from the IDL during the

            normalization process. It is an error to specify an API interface here

            which cannot be resolved against the associated IDL files.
          items:
            $ref: "#/components/schemas/Api"
          type: array
        authentication:
          $ref: "#/components/schemas/Authentication"
        backend:
          $ref: "#/components/schemas/Backend"
        billing:
          $ref: "#/components/schemas/Billing"
        configVersion:
          description: >-
            The semantic version of the service configuration. The config
            version

            affects the interpretation of the service configuration. For example,

            certain features are enabled by default for certain config versions.

            The latest config version is `3`.
          format: uint32
          type: integer
        context:
          $ref: "#/components/schemas/Context"
        control:
          $ref: "#/components/schemas/Control"
        customError:
          $ref: "#/components/schemas/CustomError"
        documentation:
          $ref: "#/components/schemas/Documentation"
        endpoints:
          description: >-
            Configuration for network endpoints.  If this is empty, then an
            endpoint

            with the same name as the service is automatically generated to service all

            defined APIs.
          items:
            $ref: "#/components/schemas/Endpoint"
          type: array
        enums:
          description: |-
            A list of all enum types included in this API service.  Enums
            referenced directly or indirectly by the `apis` are automatically
            included.  Enums which are not referenced but shall be included
            should be listed here by name. Example:

                enums:
                - name: google.someapi.v1.SomeEnum
          items:
            $ref: "#/components/schemas/Enum"
          type: array
        http:
          $ref: "#/components/schemas/Http"
        id:
          description: >-
            A unique ID for a specific instance of this message, typically
            assigned

            by the client for tracking purpose. If empty, the server may choose to

            generate one instead. Must be no longer than 60 characters.
          type: string
        logging:
          $ref: "#/components/schemas/Logging"
        logs:
          description: Defines the logs used by this service.
          items:
            $ref: "#/components/schemas/LogDescriptor"
          type: array
        metrics:
          description: Defines the metrics used by this service.
          items:
            $ref: "#/components/schemas/MetricDescriptor"
          type: array
        monitoredResources:
          description: >-
            Defines the monitored resources used by this service. This is
            required

            by the Service.monitoring and Service.logging configurations.
          items:
            $ref: "#/components/schemas/MonitoredResourceDescriptor"
          type: array
        monitoring:
          $ref: "#/components/schemas/Monitoring"
        name:
          description: |-
            The service name, which is a DNS-like logical identifier for the
            service, such as `calendar.googleapis.com`. The service name
            typically goes through DNS verification to make sure the owner
            of the service also owns the DNS name.
          type: string
        producerProjectId:
          description: The Google project that owns this service.
          type: string
        quota:
          $ref: "#/components/schemas/Quota"
        sourceInfo:
          $ref: "#/components/schemas/SourceInfo"
        systemParameters:
          $ref: "#/components/schemas/SystemParameters"
        systemTypes:
          description: >-
            A list of all proto message types included in this API service.

            It serves similar purpose as [google.api.Service.types], except that

            these types are not needed by user-defined APIs. Therefore, they will not

            show up in the generated discovery doc. This field should only be used

            to define system APIs in ESF.
          items:
            $ref: "#/components/schemas/Type"
          type: array
        title:
          description: The product title for this service.
          type: string
        types:
          description: >-
            A list of all proto message types included in this API service.

            Types referenced directly or indirectly by the `apis` are

            automatically included.  Messages which are not referenced but

            shall be included, such as types used by the `google.protobuf.Any` type,

            should be listed here by name. Example:

                types:
                - name: google.protobuf.Int32
          items:
            $ref: "#/components/schemas/Type"
          type: array
        usage:
          $ref: "#/components/schemas/Usage"
      type: object
    ServiceAccountConfig:
      description: Describes the service account configuration for the tenant project.
      properties:
        accountId:
          description: >-
            ID of the IAM service account to be created in tenant project.

            The email format of the service account is

            "<account-id>@<tenant-project-id>.iam.gserviceaccount.com".

            This account ID must be unique within tenant project and service

            producers have to guarantee it. The ID must be 6-30 characters long, and

            match the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])`.
          type: string
        tenantProjectRoles:
          description: Roles for the associated service account for the tenant project.
          items:
            type: string
          type: array
      type: object
    SourceContext:
      description: |-
        `SourceContext` represents information about the source of a
        protobuf element, like the file in which it is defined.
      properties:
        fileName:
          description: >-
            The path-qualified name of the .proto file that contained the
            associated

            protobuf element.  For example: `"google/protobuf/source_context.proto"`.
          type: string
      type: object
    SourceInfo:
      description: Source information used to create a Service Config
      properties:
        sourceFiles:
          description: All files used during config generation.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    SystemParameter:
      description: >-
        Define a parameter's name and location. The parameter may be passed as
        either

        an HTTP header or a URL query parameter, and if both are passed the behavior

        is implementation-dependent.
      properties:
        httpHeader:
          description: |-
            Define the HTTP header name to use for the parameter. It is case
            insensitive.
          type: string
        name:
          description: Define the name of the parameter, such as "api_key" . It is case
            sensitive.
          type: string
        urlQueryParameter:
          description: >-
            Define the URL query parameter name to use for the parameter. It is
            case

            sensitive.
          type: string
      type: object
    SystemParameterRule:
      description: |-
        Define a system parameter rule mapping system parameter definitions to
        methods.
      properties:
        parameters:
          description: >-
            Define parameters. Multiple names may be defined for a parameter.

            For a given method call, only one of them should be used. If multiple

            names are used the behavior is implementation-dependent.

            If none of the specified names are present the behavior is

            parameter-dependent.
          items:
            $ref: "#/components/schemas/SystemParameter"
          type: array
        selector:
          description: >-
            Selects the methods to which this rule applies. Use '*' to indicate
            all

            methods in all APIs.


            Refer to selector for syntax details.
          type: string
      type: object
    SystemParameters:
      description: >-
        ### System parameter configuration


        A system parameter is a special kind of parameter defined by the API

        system, not by an individual API. It is typically mapped to an HTTP header

        and/or a URL query parameter. This configuration specifies which methods

        change the names of the system parameters.
      properties:
        rules:
          description: >-
            Define system parameters.


            The parameters defined here will override the default parameters

            implemented by the system. If this field is missing from the service

            config, default system parameters will be used. Default system parameters

            and names is implementation-dependent.


            Example: define api key for all methods

                system_parameters
                  rules:
                    - selector: "*"
                      parameters:
                        - name: api_key
                          url_query_parameter: api_key


            Example: define 2 api key names for a specific method.

                system_parameters
                  rules:
                    - selector: "/ListShelves"
                      parameters:
                        - name: api_key
                          http_header: Api-Key1
                        - name: api_key
                          http_header: Api-Key2

            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/SystemParameterRule"
          type: array
      type: object
    TenancyUnit:
      description: Representation of a tenancy unit.
      properties:
        consumer:
          description: |-
            @OutputOnly Cloud resource name of the consumer of this service.
            For example 'projects/123456'.
          type: string
        createTime:
          description: "@OutputOnly The time this tenancy unit was created."
          format: google-datetime
          type: string
        name:
          description: >-
            Globally unique identifier of this tenancy unit

            "services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}"
          type: string
        service:
          description: >-
            Output only. Google Cloud API name of the managed service owning
            this

            tenancy unit.

            For example 'serviceconsumermanagement.googleapis.com'.
          type: string
        tenantResources:
          description: |-
            Resources constituting the tenancy unit.
            There can be at most 512 tenant resources in a tenancy unit.
          items:
            $ref: "#/components/schemas/TenantResource"
          type: array
      type: object
    TenantProjectConfig:
      description: >-
        This structure defines a tenant project to be added to the specified
        tenancy

        unit and its initial configuration and properties. A project lien is created

        for the tenant project to prevent the tenant project from being deleted

        accidentally. The lien is deleted as part of tenant project removal.
      properties:
        billingConfig:
          $ref: "#/components/schemas/BillingConfig"
        folder:
          description: >-
            Folder where project in this tenancy unit must be located

            This folder must have been previously created with the required

            permissions for the caller to create and configure a project in it.

            Valid folder resource names have the format `folders/{folder_number}`

            (for example, `folders/123456`).
          type: string
        labels:
          additionalProperties:
            type: string
          description: Labels that are applied to this project.
          type: object
        serviceAccountConfig:
          $ref: "#/components/schemas/ServiceAccountConfig"
        services:
          description: >-
            Google Cloud API names of services that are activated on this
            project

            during provisioning.  If any of these services can't be activated,

            the request fails.

            For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'
          items:
            type: string
          type: array
        tenantProjectPolicy:
          $ref: "#/components/schemas/TenantProjectPolicy"
      type: object
    TenantProjectPolicy:
      description: |-
        Describes policy settings that need to be applied to a newly
        created tenant project.
      properties:
        policyBindings:
          description: >-
            Policy bindings to be applied to the tenant project, in addition to
            the

            'roles/owner' role granted to the Service Consumer Management service

            account.

            At least one binding must have the role `roles/owner`. Among the list of

            members for `roles/owner`, at least one of them must be either the `user`

            or `group` type.
          items:
            $ref: "#/components/schemas/PolicyBinding"
          type: array
      type: object
    TenantResource:
      description: Resource constituting the TenancyUnit.
      properties:
        resource:
          description: |-
            @OutputOnly Identifier of the tenant resource.
            For cloud projects, it is in the form 'projects/{number}'.
            For example 'projects/123456'.
          type: string
        status:
          description: Status of tenant resource.
          enum:
            - STATUS_UNSPECIFIED
            - PENDING_CREATE
            - ACTIVE
            - PENDING_DELETE
            - FAILED
            - DELETED
          type: string
        tag:
          description: Unique per single tenancy unit.
          type: string
      type: object
    Type:
      description: A protocol buffer message type.
      properties:
        fields:
          description: The list of fields.
          items:
            $ref: "#/components/schemas/Field"
          type: array
        name:
          description: The fully qualified message name.
          type: string
        oneofs:
          description: The list of types appearing in `oneof` definitions in this type.
          items:
            type: string
          type: array
        options:
          description: The protocol buffer options.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        sourceContext:
          $ref: "#/components/schemas/SourceContext"
        syntax:
          description: The source syntax.
          enum:
            - SYNTAX_PROTO2
            - SYNTAX_PROTO3
          type: string
      type: object
    UndeleteTenantProjectRequest:
      description: >-
        Request message to undelete tenant project resource previously deleted
        from

        the tenancy unit.
      properties:
        tag:
          description: Tag of the resource within the tenancy unit.
          type: string
      type: object
    Usage:
      description: Configuration controlling usage of a service.
      properties:
        producerNotificationChannel:
          description: >-
            The full resource name of a channel used for sending notifications
            to the

            service producer.


            Google Service Management currently only supports

            [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification

            channel. To use Google Cloud Pub/Sub as the channel, this must be the name

            of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format

            documented in https://cloud.google.com/pubsub/docs/overview.
          type: string
        requirements:
          description: >-
            Requirements that must be satisfied before a consumer project can
            use the

            service. Each requirement is of the form <service.name>/<requirement-id>;

            for example 'serviceusage.googleapis.com/billing-enabled'.
          items:
            type: string
          type: array
        rules:
          description: >-
            A list of usage rules that apply to individual API methods.


            **NOTE:** All service configuration rules follow "last one wins" order.
          items:
            $ref: "#/components/schemas/UsageRule"
          type: array
      type: object
    UsageRule:
      description: >-
        Usage configuration rules for the service.


        NOTE: Under development.



        Use this rule to configure unregistered calls for the service. Unregistered

        calls are calls that do not contain consumer project identity.

        (Example: calls that do not contain an API key).

        By default, API methods do not allow unregistered calls, and each method call

        must be identified by a consumer project identity. Use this rule to

        allow/disallow unregistered calls.


        Example of an API that wants to allow unregistered calls for entire service.

            usage:
              rules:
              - selector: "*"
                allow_unregistered_calls: true

        Example of a method that wants to allow unregistered calls.

            usage:
              rules:
              - selector: "google.example.library.v1.LibraryService.CreateBook"
                allow_unregistered_calls: true
      properties:
        allowUnregisteredCalls:
          description: |-
            If true, the selected method allows unregistered calls, e.g. calls
            that don't identify any user or application.
          type: boolean
        selector:
          description: >-
            Selects the methods to which this rule applies. Use '*' to indicate
            all

            methods in all APIs.


            Refer to selector for syntax details.
          type: string
        skipServiceControl:
          description: >-
            If true, the selected method should skip service control and the
            control

            plane features, such as quota and billing, will not be available.

            This flag is used by Google Cloud Endpoints to bypass checks for internal

            methods, such as service health check methods.
          type: boolean
      type: object
    V1AddVisibilityLabelsResponse:
      description: >-
        Response message for the `AddVisibilityLabels` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties:
        labels:
          description: The updated set of visibility labels for this consumer on this
            service.
          items:
            type: string
          type: array
      type: object
    V1Beta1BatchCreateProducerOverridesResponse:
      description: Response message for BatchCreateProducerOverrides
      properties:
        overrides:
          description: The overrides that were created.
          items:
            $ref: "#/components/schemas/V1Beta1QuotaOverride"
          type: array
      type: object
    V1Beta1DisableConsumerResponse:
      description: >-
        Response message for the `DisableConsumer` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties: {}
      type: object
    V1Beta1EnableConsumerResponse:
      description: >-
        Response message for the `EnableConsumer` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties: {}
      type: object
    V1Beta1ImportProducerOverridesResponse:
      description: Response message for ImportProducerOverrides
      properties:
        overrides:
          description: The overrides that were created from the imported data.
          items:
            $ref: "#/components/schemas/V1Beta1QuotaOverride"
          type: array
      type: object
    V1Beta1QuotaOverride:
      description: A quota override
      properties:
        dimensions:
          additionalProperties:
            type: string
          description: >-
            If this map is nonempty, then this override applies only to specific
            values

            for dimensions defined in the limit unit.


            For example, an override on a limit with the unit 1/{project}/{region}

            could contain an entry with the key "region" and the value "us-east-1";

            the override is only applied to quota consumed in that region.


            This map has the following restrictions:

            - Keys that are not defined in the limit's unit are not valid keys.
              Any string appearing in {brackets} in the unit (besides {project} or
              {user}) is a defined key.
            - "project" is not a valid key; the project is already specified in
              the parent resource name.
            - "user" is not a valid key; the API does not support quota overrides
              that apply only to a specific user.
            - If "region" appears as a key, its value must be a valid Cloud region.

            - If "zone" appears as a key, its value must be a valid Cloud zone.

            - If any valid key other than "region" or "zone" appears in the map, then
              all valid keys other than "region" or "zone" must also appear in the map.
          type: object
        metric:
          description: |-
            The name of the metric to which this override applies.

            An example name would be:
            `compute.googleapis.com/cpus`
          type: string
        name:
          description: >-
            The resource name of the producer override.

            An example name would be:

            `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerOverrides/4a3f2c1d`
          type: string
        overrideValue:
          description: |-
            The overriding quota limit value.
            Can be any nonnegative integer, or -1 (unlimited quota).
          format: int64
          type: string
        unit:
          description: >-
            The limit unit of the limit to which this override applies.


            An example unit would be:

            `1/{project}/{region}`

            Note that `{project}` and `{region}` are not placeholders in this example;

            the literal characters `{` and `}` occur in the string.
          type: string
      type: object
    V1Beta1RefreshConsumerResponse:
      description: >-
        Response message for the `RefreshConsumer` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties: {}
      type: object
    V1DisableConsumerResponse:
      description: >-
        Response message for the `DisableConsumer` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties: {}
      type: object
    V1EnableConsumerResponse:
      description: >-
        Response message for the `EnableConsumer` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties: {}
      type: object
    V1GenerateServiceAccountResponse:
      description: >-
        Response message for the `GenerateServiceAccount` method.


        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties:
        account:
          $ref: "#/components/schemas/V1ServiceAccount"
      type: object
    V1RefreshConsumerResponse:
      description: >-
        Response message for the `RefreshConsumer` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties: {}
      type: object
    V1RemoveVisibilityLabelsResponse:
      description: >-
        Response message for the `RemoveVisibilityLabels` method.

        This response message is assigned to the `response` field of the returned

        Operation when that operation is done.
      properties:
        labels:
          description: The updated set of visibility labels for this consumer on this
            service.
          items:
            type: string
          type: array
      type: object
    V1ServiceAccount:
      description: A service account in the Identity and Access Management API.
      properties:
        email:
          description: The email address of the service account.
          type: string
        iamAccountName:
          description: Deprecated. See b/136209818.
          type: string
        name:
          description: >-
            P4 SA resource name.


            An example name would be:

            `services/serviceconsumermanagement.googleapis.com/projects/123/serviceAccounts/default`
          type: string
        tag:
          description: >-
            The P4 SA configuration tag. This must be defined in
            activation_grants.

            If not specified when creating the account, the tag is set to "default".
          type: string
        uniqueId:
          description: The unique and stable id of the service account.
          type: string
      type: object
