openapi: 3.0.0
info:
  version: 2014-06-30
  x-release: v4
  title: Amazon Cognito Identity
  description: <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito
    Federated Identities is a web service that delivers scoped temporary
    credentials to mobile devices and other untrusted environments. It uniquely
    identifies a device and supplies the user with a consistent identity over
    the lifetime of an application.</p> <p>Using Amazon Cognito Federated
    Identities, you can enable authentication with one or more third-party
    identity providers (Facebook, Google, or Login with Amazon) or an Amazon
    Cognito user pool, and you can also choose to support unauthenticated access
    from your app. Cognito delivers a unique identifier for each user and acts
    as an OpenID token provider trusted by AWS Security Token Service (STS) to
    access temporary, limited-privilege AWS credentials.</p> <p>For a
    description of the authentication flow from the Amazon Cognito Developer
    Guide see <a
    href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication
    Flow</a>.</p> <p>For more information see <a
    href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon
    Cognito Federated Identities</a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: cognito-identity
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-identity-2014-06-30.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/cognito-identity/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool:
    post:
      operationId: CreateIdentityPool
      description: "<p>Creates a new identity pool. The identity pool is a store of user
        identity information that is specific to your AWS account. The limit on
        identity pools is 60 per account. The keys for
        <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li>
        <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google:
        <code>accounts.google.com</code> </p> </li> <li> <p>Amazon:
        <code>www.amazon.com</code> </p> </li> <li> <p>Twitter:
        <code>api.twitter.com</code> </p> </li> <li> <p>Digits:
        <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS
        Developer credentials to call this API.</p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityPool"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.CreateIdentityPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIdentityPoolInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities:
    post:
      operationId: DeleteIdentities
      description: <p>Deletes identities from an identity pool. You can specify a list of
        1-60 identities that you want to delete.</p> <p>You must use AWS
        Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteIdentitiesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DeleteIdentities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteIdentitiesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool:
    post:
      operationId: DeleteIdentityPool
      description: <p>Deletes an identity pool. Once a pool is deleted, users will not be
        able to authenticate with the pool.</p> <p>You must use AWS Developer
        credentials to call this API.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DeleteIdentityPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteIdentityPoolInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity:
    post:
      operationId: DescribeIdentity
      description: <p>Returns metadata related to the given identity, including when the
        identity was created and any associated linked logins.</p> <p>You must
        use AWS Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityDescription"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DescribeIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeIdentityInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool:
    post:
      operationId: DescribeIdentityPool
      description: <p>Gets details about a particular identity pool, including the pool
        name, ID description, creation date, and current number of users.</p>
        <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityPool"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.DescribeIdentityPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeIdentityPoolInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity:
    post:
      operationId: GetCredentialsForIdentity
      description: <p>Returns credentials for the provided identity ID. Any provided logins
        will be validated against supported login providers. If the token is for
        cognito-identity.amazonaws.com, it will be passed through to AWS
        Security Token Service with the appropriate role for the token.</p>
        <p>This is a public API. You do not need any credentials to call this
        API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCredentialsForIdentityResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InvalidIdentityPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidIdentityPoolConfigurationExcepti\
                  on"
        "486":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "487":
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetCredentialsForIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCredentialsForIdentityInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.GetId:
    post:
      operationId: GetId
      description: <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will
        create an implicit linked account.</p> <p>This is a public API. You do
        not need any credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIdResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "486":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "487":
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetId
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIdInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles:
    post:
      operationId: GetIdentityPoolRoles
      description: <p>Gets the roles for an identity pool.</p> <p>You must use AWS
        Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIdentityPoolRolesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetIdentityPoolRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIdentityPoolRolesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken:
    post:
      operationId: GetOpenIdToken
      description: <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID
        is returned by <a>GetId</a>. You can optionally add additional logins
        for the identity. Supplying multiple logins creates an implicit
        link.</p> <p>The OpenId token is valid for 10 minutes.</p> <p>This is a
        public API. You do not need any credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOpenIdTokenResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "486":
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetOpenIdToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetOpenIdTokenInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity:
    post:
      operationId: GetOpenIdTokenForDeveloperIdentity
      description: <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an
        OpenID Connect token for a user authenticated by your backend
        authentication process. Supplying multiple logins will create an
        implicit linked account. You can only specify one developer provider as
        part of the <code>Logins</code> map, which is linked to the identity
        pool. The developer provider is the "domain" by which Cognito will refer
        to your users.</p> <p>You can use
        <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity
        and to link new logins (that is, user credentials issued by a public
        provider or developer provider) to an existing identity. When you want
        to create a new identity, the <code>IdentityId</code> should be null.
        When you want to associate a new login with an existing
        authenticated/unauthenticated identity, you can do so by providing the
        existing <code>IdentityId</code>. This API will create the identity in
        the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS
        Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOpenIdTokenForDeveloperIdentityRespo\
                  nse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "486":
          description: DeveloperUserAlreadyRegisteredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperUserAlreadyRegisteredException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetOpenIdTokenForDeveloperIdentityInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.ListIdentities:
    post:
      operationId: ListIdentities
      description: <p>Lists the identities in an identity pool.</p> <p>You must use AWS
        Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIdentitiesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.ListIdentities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListIdentitiesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools:
    post:
      operationId: ListIdentityPools
      description: <p>Lists all of the Cognito identity pools registered for your
        account.</p> <p>You must use AWS Developer credentials to call this
        API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIdentityPoolsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.ListIdentityPools
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListIdentityPoolsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: <p>Lists the tags that are assigned to an Amazon Cognito identity
        pool.</p> <p>A tag is a label that you can apply to identity pools to
        categorize and manage them in different ways, such as by purpose, owner,
        environment, or other criteria.</p> <p>You can use this action up to 10
        times per second, per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity:
    post:
      operationId: LookupDeveloperIdentity
      description: "<p>Retrieves the <code>IdentityID</code> associated with a
        <code>DeveloperUserIdentifier</code> or the list of
        <code>DeveloperUserIdentifier</code> values associated with an
        <code>IdentityId</code> for an existing identity. Either
        <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not
        be null. If you supply only one of these values, the other value will be
        searched in the database and returned as a part of the response. If you
        supply both, <code>DeveloperUserIdentifier</code> will be matched
        against <code>IdentityID</code>. If the values are verified against the
        database, the response returns both values and is the same as the
        request. Otherwise a <code>ResourceConflictException</code> is
        thrown.</p> <p> <code>LookupDeveloperIdentity</code> is intended for
        low-throughput control plane operations: for example, to enable customer
        service to locate an identity ID by username. If you are using it for
        higher-volume operations such as user authentication, your requests are
        likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a
        better option for higher-volume operations for user authentication.</p>
        <p>You must use AWS Developer credentials to call this API.</p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LookupDeveloperIdentityResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.LookupDeveloperIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LookupDeveloperIdentityInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities:
    post:
      operationId: MergeDeveloperIdentities
      description: <p>Merges two users having different <code>IdentityId</code>s, existing
        in the same identity pool, and identified by the same developer
        provider. You can use this action to request that discrete users be
        merged and identified as a single user in the Cognito environment.
        Cognito associates the given source user
        (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of
        the <code>DestinationUserIdentifier</code>. Only developer-authenticated
        users can be merged. If the users to be merged are associated with the
        same public provider, but as two different users, an exception will be
        thrown.</p> <p>The number of linked logins is limited to 20. So, the
        number of linked logins for the source user,
        <code>SourceUserIdentifier</code>, and the destination user,
        <code>DestinationUserIdentifier</code>, together should not be larger
        than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS
        Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MergeDeveloperIdentitiesResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.MergeDeveloperIdentities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeDeveloperIdentitiesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles:
    post:
      operationId: SetIdentityPoolRoles
      description: <p>Sets the roles for an identity pool. These roles are used when making
        calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use
        AWS Developer credentials to call this API.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "486":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.SetIdentityPoolRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetIdentityPoolRolesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.TagResource:
    post:
      operationId: TagResource
      description: <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a
        label that you can use to categorize and manage identity pools in
        different ways, such as by purpose, owner, environment, or other
        criteria.</p> <p>Each tag consists of a key and value, both of which you
        define. A key is a general category for more specific values. For
        example, if you have two versions of an identity pool, one for testing
        and another for production, you might assign an <code>Environment</code>
        tag key to both identity pools. The value of this key might be
        <code>Test</code> for one identity pool and <code>Production</code> for
        the other.</p> <p>Tags are useful for cost tracking and access control.
        You can activate your tags so that they appear on the Billing and Cost
        Management console, where you can track the costs associated with your
        identity pools. In an IAM policy, you can constrain permissions for
        identity pools based on specific tags or tag values.</p> <p>You can use
        this action up to 5 times per second, per account. An identity pool can
        have as many as 50 tags.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity:
    post:
      operationId: UnlinkDeveloperIdentity
      description: <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing
        identity. Unlinked developer users will be considered new identities
        next time they are seen. If, for a given Cognito identity, you remove
        all federated identities as well as the developer user identifier, the
        Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer
        credentials to call this API.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UnlinkDeveloperIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnlinkDeveloperIdentityInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity:
    post:
      operationId: UnlinkIdentity
      description: <p>Unlinks a federated identity from an existing account. Unlinked
        logins will be considered new identities next time they are seen.
        Removing the last linked login will make this identity inaccessible.</p>
        <p>This is a public API. You do not need any credentials to call this
        API.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "486":
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UnlinkIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnlinkIdentityInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.UntagResource:
    post:
      operationId: UntagResource
      description: Removes the specified tags from an Amazon Cognito identity pool. You can
        use this action up to 5 times per second, per account
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool:
    post:
      operationId: UpdateIdentityPool
      description: <p>Updates an identity pool.</p> <p>You must use AWS Developer
        credentials to call this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityPool"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalErrorException"
        "486":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "487":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSCognitoIdentityService.UpdateIdentityPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdentityPool"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://cognito-identity.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Cognito Identity multi-region endpoint
  - url: https://cognito-identity.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Cognito Identity multi-region endpoint
  - url: http://cognito-identity.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity endpoint for China (Beijing) and China
      (Ningxia)
  - url: https://cognito-identity.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Cognito Identity endpoint for China (Beijing) and China
      (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    IdentityPool:
      type: object
      required:
        - IdentityPoolId
        - IdentityPoolName
        - AllowUnauthenticatedIdentities
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        IdentityPoolName:
          $ref: "#/components/schemas/IdentityPoolName"
        AllowUnauthenticatedIdentities:
          $ref: "#/components/schemas/IdentityPoolUnauthenticated"
        SupportedLoginProviders:
          $ref: "#/components/schemas/IdentityProviders"
        DeveloperProviderName:
          $ref: "#/components/schemas/DeveloperProviderName"
        OpenIdConnectProviderARNs:
          $ref: "#/components/schemas/OIDCProviderList"
        CognitoIdentityProviders:
          $ref: "#/components/schemas/CognitoIdentityProviderList"
        SamlProviderARNs:
          $ref: "#/components/schemas/SAMLProviderList"
        IdentityPoolTags:
          $ref: "#/components/schemas/IdentityPoolTagsType"
      description: An object representing an Amazon Cognito identity pool.
    CreateIdentityPoolInput:
      type: object
      required:
        - IdentityPoolName
        - AllowUnauthenticatedIdentities
      properties:
        IdentityPoolName:
          $ref: "#/components/schemas/IdentityPoolName"
        AllowUnauthenticatedIdentities:
          $ref: "#/components/schemas/IdentityPoolUnauthenticated"
        SupportedLoginProviders:
          $ref: "#/components/schemas/IdentityProviders"
        DeveloperProviderName:
          $ref: "#/components/schemas/DeveloperProviderName"
        OpenIdConnectProviderARNs:
          $ref: "#/components/schemas/OIDCProviderList"
        CognitoIdentityProviders:
          $ref: "#/components/schemas/CognitoIdentityProviderList"
        SamlProviderARNs:
          $ref: "#/components/schemas/SAMLProviderList"
        IdentityPoolTags:
          $ref: "#/components/schemas/IdentityPoolTagsType"
      description: Input to the CreateIdentityPool action.
    InvalidParameterException: {}
    NotAuthorizedException: {}
    ResourceConflictException: {}
    TooManyRequestsException: {}
    InternalErrorException: {}
    LimitExceededException: {}
    DeleteIdentitiesResponse:
      type: object
      properties:
        UnprocessedIdentityIds:
          $ref: "#/components/schemas/UnprocessedIdentityIdList"
      description: Returned in response to a successful <code>DeleteIdentities</code>
        operation.
    DeleteIdentitiesInput:
      type: object
      required:
        - IdentityIdsToDelete
      properties:
        IdentityIdsToDelete:
          $ref: "#/components/schemas/IdentityIdList"
      description: Input to the <code>DeleteIdentities</code> action.
    DeleteIdentityPoolInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
      description: Input to the DeleteIdentityPool action.
    ResourceNotFoundException: {}
    IdentityDescription:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Logins:
          $ref: "#/components/schemas/LoginsList"
        CreationDate:
          $ref: "#/components/schemas/DateType"
        LastModifiedDate:
          $ref: "#/components/schemas/DateType"
      description: A description of the identity.
    DescribeIdentityInput:
      type: object
      required:
        - IdentityId
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
      description: Input to the <code>DescribeIdentity</code> action.
    DescribeIdentityPoolInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
      description: Input to the DescribeIdentityPool action.
    GetCredentialsForIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Credentials:
          $ref: "#/components/schemas/Credentials"
      description: Returned in response to a successful
        <code>GetCredentialsForIdentity</code> operation.
    GetCredentialsForIdentityInput:
      type: object
      required:
        - IdentityId
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Logins:
          $ref: "#/components/schemas/LoginsMap"
        CustomRoleArn:
          $ref: "#/components/schemas/ARNString"
      description: Input to the <code>GetCredentialsForIdentity</code> action.
    InvalidIdentityPoolConfigurationException: {}
    ExternalServiceException: {}
    GetIdResponse:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
      description: Returned in response to a GetId request.
    GetIdInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        AccountId:
          $ref: "#/components/schemas/AccountId"
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        Logins:
          $ref: "#/components/schemas/LoginsMap"
      description: Input to the GetId action.
    GetIdentityPoolRolesResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        Roles:
          $ref: "#/components/schemas/RolesMap"
        RoleMappings:
          $ref: "#/components/schemas/RoleMappingMap"
      description: Returned in response to a successful <code>GetIdentityPoolRoles</code>
        operation.
    GetIdentityPoolRolesInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
      description: Input to the <code>GetIdentityPoolRoles</code> action.
    GetOpenIdTokenResponse:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Token:
          $ref: "#/components/schemas/OIDCToken"
      description: Returned in response to a successful GetOpenIdToken request.
    GetOpenIdTokenInput:
      type: object
      required:
        - IdentityId
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Logins:
          $ref: "#/components/schemas/LoginsMap"
      description: Input to the GetOpenIdToken action.
    GetOpenIdTokenForDeveloperIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Token:
          $ref: "#/components/schemas/OIDCToken"
      description: Returned in response to a successful
        <code>GetOpenIdTokenForDeveloperIdentity</code> request.
    GetOpenIdTokenForDeveloperIdentityInput:
      type: object
      required:
        - IdentityPoolId
        - Logins
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Logins:
          $ref: "#/components/schemas/LoginsMap"
        TokenDuration:
          $ref: "#/components/schemas/TokenDuration"
      description: Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.
    DeveloperUserAlreadyRegisteredException: {}
    ListIdentitiesResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        Identities:
          $ref: "#/components/schemas/IdentitiesList"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: The response to a ListIdentities request.
    ListIdentitiesInput:
      type: object
      required:
        - IdentityPoolId
        - MaxResults
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        MaxResults:
          $ref: "#/components/schemas/QueryLimit"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
        HideDisabled:
          $ref: "#/components/schemas/HideDisabled"
      description: Input to the ListIdentities action.
    ListIdentityPoolsResponse:
      type: object
      properties:
        IdentityPools:
          $ref: "#/components/schemas/IdentityPoolsList"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: The result of a successful ListIdentityPools action.
    ListIdentityPoolsInput:
      type: object
      required:
        - MaxResults
      properties:
        MaxResults:
          $ref: "#/components/schemas/QueryLimit"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: Input to the ListIdentityPools action.
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/IdentityPoolTagsType"
    ListTagsForResourceInput:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ARNString"
    LookupDeveloperIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        DeveloperUserIdentifierList:
          $ref: "#/components/schemas/DeveloperUserIdentifierList"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: Returned in response to a successful
        <code>LookupDeveloperIdentity</code> action.
    LookupDeveloperIdentityInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        DeveloperUserIdentifier:
          $ref: "#/components/schemas/DeveloperUserIdentifier"
        MaxResults:
          $ref: "#/components/schemas/QueryLimit"
        NextToken:
          $ref: "#/components/schemas/PaginationKey"
      description: Input to the <code>LookupDeveloperIdentityInput</code> action.
    MergeDeveloperIdentitiesResponse:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
      description: Returned in response to a successful
        <code>MergeDeveloperIdentities</code> action.
    MergeDeveloperIdentitiesInput:
      type: object
      required:
        - SourceUserIdentifier
        - DestinationUserIdentifier
        - DeveloperProviderName
        - IdentityPoolId
      properties:
        SourceUserIdentifier:
          $ref: "#/components/schemas/DeveloperUserIdentifier"
        DestinationUserIdentifier:
          $ref: "#/components/schemas/DeveloperUserIdentifier"
        DeveloperProviderName:
          $ref: "#/components/schemas/DeveloperProviderName"
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
      description: Input to the <code>MergeDeveloperIdentities</code> action.
    SetIdentityPoolRolesInput:
      type: object
      required:
        - IdentityPoolId
        - Roles
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        Roles:
          $ref: "#/components/schemas/RolesMap"
        RoleMappings:
          $ref: "#/components/schemas/RoleMappingMap"
      description: Input to the <code>SetIdentityPoolRoles</code> action.
    ConcurrentModificationException: {}
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ARNString"
        Tags:
          $ref: "#/components/schemas/IdentityPoolTagsType"
    UnlinkDeveloperIdentityInput:
      type: object
      required:
        - IdentityId
        - IdentityPoolId
        - DeveloperProviderName
        - DeveloperUserIdentifier
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        DeveloperProviderName:
          $ref: "#/components/schemas/DeveloperProviderName"
        DeveloperUserIdentifier:
          $ref: "#/components/schemas/DeveloperUserIdentifier"
      description: Input to the <code>UnlinkDeveloperIdentity</code> action.
    UnlinkIdentityInput:
      type: object
      required:
        - IdentityId
        - Logins
        - LoginsToRemove
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        Logins:
          $ref: "#/components/schemas/LoginsMap"
        LoginsToRemove:
          $ref: "#/components/schemas/LoginsList"
      description: Input to the UnlinkIdentity action.
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ARNString"
        TagKeys:
          $ref: "#/components/schemas/IdentityPoolTagsListType"
    ARNString:
      type: string
      minLength: 20
      maxLength: 2048
    AccessKeyString:
      type: string
    AccountId:
      type: string
      pattern: \d+
      minLength: 1
      maxLength: 15
    AmbiguousRoleResolutionType:
      type: string
      enum:
        - AuthenticatedRole
        - Deny
    ClaimName:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 64
    ClaimValue:
      type: string
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderName:
      type: string
      pattern: "[\\w._:/-]+"
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderClientId:
      type: string
      pattern: "[\\w_]+"
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderTokenCheck:
      type: boolean
    CognitoIdentityProvider:
      type: object
      properties:
        ProviderName:
          $ref: "#/components/schemas/CognitoIdentityProviderName"
        ClientId:
          $ref: "#/components/schemas/CognitoIdentityProviderClientId"
        ServerSideTokenCheck:
          $ref: "#/components/schemas/CognitoIdentityProviderTokenCheck"
      description: A provider representing an Amazon Cognito user pool and its client ID.
    CognitoIdentityProviderList:
      type: array
      items:
        $ref: "#/components/schemas/CognitoIdentityProvider"
    IdentityPoolName:
      type: string
      pattern: "[\\w ]+"
      minLength: 1
      maxLength: 128
    IdentityPoolUnauthenticated:
      type: boolean
    IdentityProviders:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: "#/components/schemas/IdentityProviderId"
    DeveloperProviderName:
      type: string
      pattern: "[\\w._-]+"
      minLength: 1
      maxLength: 128
    OIDCProviderList:
      type: array
      items:
        $ref: "#/components/schemas/ARNString"
    SAMLProviderList:
      type: array
      items:
        $ref: "#/components/schemas/ARNString"
    IdentityPoolTagsType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TagValueType"
    SecretKeyString:
      type: string
    SessionTokenString:
      type: string
    DateType:
      type: string
      format: date-time
    Credentials:
      type: object
      properties:
        AccessKeyId:
          $ref: "#/components/schemas/AccessKeyString"
        SecretKey:
          $ref: "#/components/schemas/SecretKeyString"
        SessionToken:
          $ref: "#/components/schemas/SessionTokenString"
        Expiration:
          $ref: "#/components/schemas/DateType"
      description: Credentials for the provided identity ID.
    IdentityIdList:
      type: array
      items:
        $ref: "#/components/schemas/IdentityId"
      minItems: 1
      maxItems: 60
    UnprocessedIdentityIdList:
      type: array
      items:
        $ref: "#/components/schemas/UnprocessedIdentityId"
      maxItems: 60
    IdentityPoolId:
      type: string
      pattern: "[\\w-]+:[0-9a-f-]+"
      minLength: 1
      maxLength: 55
    IdentityId:
      type: string
      pattern: "[\\w-]+:[0-9a-f-]+"
      minLength: 1
      maxLength: 55
    DeveloperUserIdentifier:
      type: string
      minLength: 1
      maxLength: 1024
    DeveloperUserIdentifierList:
      type: array
      items:
        $ref: "#/components/schemas/DeveloperUserIdentifier"
    ErrorCode:
      type: string
      enum:
        - AccessDenied
        - InternalServerError
    LoginsMap:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: "#/components/schemas/IdentityProviderToken"
    RolesMap:
      type: object
      maxProperties: 2
      additionalProperties:
        $ref: "#/components/schemas/ARNString"
    RoleMappingMap:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: "#/components/schemas/RoleMapping"
    TokenDuration:
      type: integer
      minimum: 1
      maximum: 86400
    OIDCToken:
      type: string
    HideDisabled:
      type: boolean
    IdentitiesList:
      type: array
      items:
        $ref: "#/components/schemas/IdentityDescription"
    LoginsList:
      type: array
      items:
        $ref: "#/components/schemas/IdentityProviderName"
    IdentityPoolShortDescription:
      type: object
      properties:
        IdentityPoolId:
          $ref: "#/components/schemas/IdentityPoolId"
        IdentityPoolName:
          $ref: "#/components/schemas/IdentityPoolName"
      description: A description of the identity pool.
    TagKeysType:
      type: string
      minLength: 1
      maxLength: 128
    IdentityPoolTagsListType:
      type: array
      items:
        $ref: "#/components/schemas/TagKeysType"
    TagValueType:
      type: string
      minLength: 0
      maxLength: 256
    IdentityPoolsList:
      type: array
      items:
        $ref: "#/components/schemas/IdentityPoolShortDescription"
    IdentityProviderId:
      type: string
      pattern: "[\\w.;_/-]+"
      minLength: 1
      maxLength: 128
    IdentityProviderName:
      type: string
      minLength: 1
      maxLength: 128
    IdentityProviderToken:
      type: string
      minLength: 1
      maxLength: 50000
    QueryLimit:
      type: integer
      minimum: 1
      maximum: 60
    PaginationKey:
      type: string
      pattern: "[\\S]+"
      minLength: 1
    MappingRuleMatchType:
      type: string
      enum:
        - Equals
        - Contains
        - StartsWith
        - NotEqual
    MappingRule:
      type: object
      required:
        - Claim
        - MatchType
        - Value
        - RoleARN
      properties:
        Claim:
          $ref: "#/components/schemas/ClaimName"
        MatchType:
          $ref: "#/components/schemas/MappingRuleMatchType"
        Value:
          $ref: "#/components/schemas/ClaimValue"
        RoleARN:
          $ref: "#/components/schemas/ARNString"
      description: A rule that maps a claim name, a claim value, and a match type to a role
        ARN.
    MappingRulesList:
      type: array
      items:
        $ref: "#/components/schemas/MappingRule"
      minItems: 1
      maxItems: 25
    RoleMappingType:
      type: string
      enum:
        - Token
        - Rules
    RulesConfigurationType:
      type: object
      required:
        - Rules
      properties:
        Rules:
          $ref: "#/components/schemas/MappingRulesList"
      description: A container for rules.
    RoleMapping:
      type: object
      required:
        - Type
      properties:
        Type:
          $ref: "#/components/schemas/RoleMappingType"
        AmbiguousRoleResolution:
          $ref: "#/components/schemas/AmbiguousRoleResolutionType"
        RulesConfiguration:
          $ref: "#/components/schemas/RulesConfigurationType"
      description: A role mapping.
    RoleType:
      type: string
      pattern: (un)?authenticated
    UnprocessedIdentityId:
      type: object
      properties:
        IdentityId:
          $ref: "#/components/schemas/IdentityId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
      description: An array of UnprocessedIdentityId objects, each of which contains an
        ErrorCode and IdentityId.
