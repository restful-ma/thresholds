openapi: 3.0.0
info:
  version: 2017-10-17
  x-release: v4
  title: AWS Secrets Manager
  description: <fullname>AWS Secrets Manager API Reference</fullname> <p>AWS Secrets
    Manager is a web service that enables you to store, manage, and retrieve,
    secrets.</p> <p>This guide provides descriptions of the Secrets Manager API.
    For more information about using this service, see the <a
    href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/introduction.html">AWS
    Secrets Manager User Guide</a>.</p> <p> <b>API Version</b> </p> <p>This
    version of the Secrets Manager API Reference documents the Secrets Manager
    API version 2017-10-17.</p> <note> <p>As an alternative to using the API
    directly, you can use one of the AWS SDKs, which consist of libraries and
    sample code for various programming languages and platforms (such as Java,
    Ruby, .NET, iOS, and Android). The SDKs provide a convenient way to create
    programmatic access to AWS Secrets Manager. For example, the SDKs take care
    of cryptographically signing requests, managing errors, and retrying
    requests automatically. For more information about the AWS SDKs, including
    how to download and install them, see <a
    href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
    </note> <p>We recommend that you use the AWS SDKs to make programmatic API
    calls to Secrets Manager. However, you also can use the Secrets Manager HTTP
    Query API to make direct calls to the Secrets Manager web service. To learn
    more about the Secrets Manager HTTP Query API, see <a
    href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/query-requests.html">Making
    Query Requests</a> in the <i>AWS Secrets Manager User Guide</i>. </p>
    <p>Secrets Manager supports GET and POST requests for all actions. That is,
    the API doesn't require you to use GET for some actions and POST for others.
    However, GET requests are subject to the limitation size of a URL.
    Therefore, for operations that require larger sizes, use a POST request.</p>
    <p> <b>Support and Feedback for AWS Secrets Manager</b> </p> <p>We welcome
    your feedback. Send your comments to <a
    href="mailto:awssecretsmanager-feedback@amazon.com">awssecretsmanager-feedback@amazon.com</a>,
    or post your feedback and questions in the <a
    href="http://forums.aws.amazon.com/forum.jspa?forumID=296">AWS Secrets
    Manager Discussion Forum</a>. For more information about the AWS Discussion
    Forums, see <a href="http://forums.aws.amazon.com/help.jspa">Forums
    Help</a>.</p> <p> <b>How examples are presented</b> </p> <p>The JSON that
    AWS Secrets Manager expects as your request parameters and that the service
    returns as a response to HTTP query requests are single, long strings
    without line breaks or white space formatting. The JSON shown in the
    examples is formatted with both line breaks and white space to improve
    readability. When example input parameters would also result in long strings
    that extend beyond the screen, we insert line breaks to enhance readability.
    You should always submit the input as a single JSON text string.</p> <p>
    <b>Logging API Requests</b> </p> <p>AWS Secrets Manager supports AWS
    CloudTrail, a service that records AWS API calls for your AWS account and
    delivers log files to an Amazon S3 bucket. By using information that's
    collected by AWS CloudTrail, you can determine which requests were
    successfully made to Secrets Manager, who made the request, when it was
    made, and so on. For more about AWS Secrets Manager and its support for AWS
    CloudTrail, see <a
    href="http://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring.html#monitoring_cloudtrail">Logging
    AWS Secrets Manager Events with AWS CloudTrail</a> in the <i>AWS Secrets
    Manager User Guide</i>. To learn more about CloudTrail, including how to
    turn it on and find your log files, see the <a
    href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">AWS
    CloudTrail User Guide</a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: secretsmanager
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/secretsmanager-2017-10-17.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/secretsmanager/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=secretsmanager.CancelRotateSecret:
    post:
      operationId: CancelRotateSecret
      description: <p>Disables automatic scheduled rotation and cancels the rotation of a
        secret if one is currently in progress.</p> <p>To re-enable scheduled
        rotation, call <a>RotateSecret</a> with
        <code>AutomaticallyRotateAfterDays</code> set to a value greater than 0.
        This will immediately rotate your secret and then enable the automatic
        schedule.</p> <note> <p>If you cancel a rotation that is in progress, it
        can leave the <code>VersionStage</code> labels in an unexpected state.
        Depending on what step of the rotation was in progress, you might need
        to remove the staging label <code>AWSPENDING</code> from the partially
        created version, specified by the <code>VersionId</code> response value.
        You should also evaluate the partially rotated new version to see if it
        should be deleted, which you can do by removing all staging labels from
        the new version's <code>VersionStage</code> field.</p> </note> <p>To
        successfully start a rotation, the staging label <code>AWSPENDING</code>
        must be in one of the following states:</p> <ul> <li> <p>Not be attached
        to any version at all</p> </li> <li> <p>Attached to the same version as
        the staging label <code>AWSCURRENT</code> </p> </li> </ul> <p>If the
        staging label <code>AWSPENDING</code> is attached to a different version
        than the version with <code>AWSCURRENT</code> then the attempt to rotate
        fails.</p> <p> <b>Minimum permissions</b> </p> <p>To run this command,
        you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:CancelRotateSecret</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To configure rotation for a secret or
        to manually trigger a rotation, use <a>RotateSecret</a>.</p> </li> <li>
        <p>To get the rotation configuration details for a secret, use
        <a>DescribeSecret</a>.</p> </li> <li> <p>To list all of the currently
        available secrets, use <a>ListSecrets</a>.</p> </li> <li> <p>To list all
        of the versions currently associated with a secret, use
        <a>ListSecretVersionIds</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelRotateSecretResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.CancelRotateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelRotateSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.CreateSecret:
    post:
      operationId: CreateSecret
      description: <p>Creates a new secret. A secret in Secrets Manager consists of both
        the protected secret data and the important information needed to manage
        the secret.</p> <p>Secrets Manager stores the encrypted secret data in
        one of a collection of "versions" associated with the secret. Each
        version contains a copy of the encrypted secret data. Each version is
        associated with one or more "staging labels" that identify where the
        version is in the rotation cycle. The
        <code>SecretVersionsToStages</code> field of the secret contains the
        mapping of staging labels to the active versions of the secret. Versions
        without a staging label are considered deprecated and are not included
        in the list.</p> <p>You provide the secret data to be encrypted by
        putting text in either the <code>SecretString</code> parameter or binary
        data in the <code>SecretBinary</code> parameter, but not both. If you
        include <code>SecretString</code> or <code>SecretBinary</code> then
        Secrets Manager also creates an initial secret version and automatically
        attaches the staging label <code>AWSCURRENT</code> to the new
        version.</p> <note> <ul> <li> <p>If you call an operation that needs to
        encrypt or decrypt the <code>SecretString</code> or
        <code>SecretBinary</code> for a secret in the same account as the
        calling user and that secret doesn't specify a AWS KMS encryption key,
        Secrets Manager uses the account's default AWS managed customer master
        key (CMK) with the alias <code>aws/secretsmanager</code>. If this key
        doesn't already exist in your account then Secrets Manager creates it
        for you automatically. All users and roles in the same AWS account
        automatically have access to use the default CMK. Note that if an
        Secrets Manager API call results in AWS having to create the account's
        AWS-managed CMK, it can result in a one-time significant delay in
        returning the result.</p> </li> <li> <p>If the secret is in a different
        AWS account from the credentials calling an API that requires encryption
        or decryption of the secret value then you must create and use a custom
        AWS KMS CMK because you can't access the default CMK for the account
        using credentials from a different AWS account. Store the ARN of the CMK
        in the secret when you create the secret or when you update it by
        including it in the <code>KMSKeyId</code>. If you call an API that must
        encrypt or decrypt <code>SecretString</code> or
        <code>SecretBinary</code> using credentials from a different account
        then the AWS KMS key policy must grant cross-account access to that
        other account's user or role for both the kms:GenerateDataKey and
        kms:Decrypt operations.</p> </li> </ul> </note> <p> </p> <p> <b>Minimum
        permissions</b> </p> <p>To run this command, you must have the following
        permissions:</p> <ul> <li> <p>secretsmanager:CreateSecret</p> </li> <li>
        <p>kms:GenerateDataKey - needed only if you use a customer-managed AWS
        KMS key to encrypt the secret. You do not need this permission to use
        the account's default AWS managed CMK for Secrets Manager.</p> </li>
        <li> <p>kms:Decrypt - needed only if you use a customer-managed AWS KMS
        key to encrypt the secret. You do not need this permission to use the
        account's default AWS managed CMK for Secrets Manager.</p> </li> <li>
        <p>secretsmanager:TagResource - needed only if you include the
        <code>Tags</code> parameter. </p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To delete a secret, use
        <a>DeleteSecret</a>.</p> </li> <li> <p>To modify an existing secret, use
        <a>UpdateSecret</a>.</p> </li> <li> <p>To create a new version of a
        secret, use <a>PutSecretValue</a>.</p> </li> <li> <p>To retrieve the
        encrypted secure string and secure binary values, use
        <a>GetSecretValue</a>.</p> </li> <li> <p>To retrieve all other details
        for a secret, use <a>DescribeSecret</a>. This does not include the
        encrypted secure string and secure binary values.</p> </li> <li> <p>To
        retrieve the list of secret versions associated with the current secret,
        use <a>DescribeSecret</a> and examine the
        <code>SecretVersionsToStages</code> response value.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSecretResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: EncryptionFailure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionFailure"
        "484":
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceExistsException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: MalformedPolicyDocumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "487":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "488":
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionNotMetException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.CreateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.DeleteResourcePolicy:
    post:
      operationId: DeleteResourcePolicy
      description: <p>Deletes the resource-based permission policy that's attached to the
        secret.</p> <p> <b>Minimum permissions</b> </p> <p>To run this command,
        you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:DeleteResourcePolicy</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To attach a resource policy to a
        secret, use <a>PutResourcePolicy</a>.</p> </li> <li> <p>To retrieve the
        current resource-based policy that's attached to a secret, use
        <a>GetResourcePolicy</a>.</p> </li> <li> <p>To list all of the currently
        available secrets, use <a>ListSecrets</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResourcePolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.DeleteResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.DeleteSecret:
    post:
      operationId: DeleteSecret
      description: <p>Deletes an entire secret and all of its versions. You can optionally
        include a recovery window during which you can restore the secret. If
        you don't specify a recovery window value, the operation defaults to 30
        days. Secrets Manager attaches a <code>DeletionDate</code> stamp to the
        secret that specifies the end of the recovery window. At the end of the
        recovery window, Secrets Manager deletes the secret permanently.</p>
        <p>At any time before recovery window ends, you can use
        <a>RestoreSecret</a> to remove the <code>DeletionDate</code> and cancel
        the deletion of the secret.</p> <p>You cannot access the encrypted
        secret information in any secret that is scheduled for deletion. If you
        need to access that information, you must cancel the deletion with
        <a>RestoreSecret</a> and then retrieve the information.</p> <note> <ul>
        <li> <p>There is no explicit operation to delete a version of a secret.
        Instead, remove all staging labels from the <code>VersionStage</code>
        field of a version. That marks the version as deprecated and allows
        Secrets Manager to delete it as needed. Versions that do not have any
        staging labels do not show up in <a>ListSecretVersionIds</a> unless you
        specify <code>IncludeDeprecated</code>.</p> </li> <li> <p>The permanent
        secret deletion at the end of the waiting period is performed as a
        background task with low priority. There is no guarantee of a specific
        time after the recovery window for the actual delete operation to
        occur.</p> </li> </ul> </note> <p> <b>Minimum permissions</b> </p> <p>To
        run this command, you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:DeleteSecret</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To create a secret, use
        <a>CreateSecret</a>.</p> </li> <li> <p>To cancel deletion of a version
        of a secret before the recovery window has expired, use
        <a>RestoreSecret</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSecretResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.DeleteSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.DescribeSecret:
    post:
      operationId: DescribeSecret
      description: <p>Retrieves the details of a secret. It does not include the encrypted
        fields. Only those fields that are populated with a value are returned
        in the response. </p> <p> <b>Minimum permissions</b> </p> <p>To run this
        command, you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:DescribeSecret</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To create a secret, use
        <a>CreateSecret</a>.</p> </li> <li> <p>To modify a secret, use
        <a>UpdateSecret</a>.</p> </li> <li> <p>To retrieve the encrypted secret
        information in a version of the secret, use <a>GetSecretValue</a>.</p>
        </li> <li> <p>To list all of the secrets in the AWS account, use
        <a>ListSecrets</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeSecretResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.DescribeSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.GetRandomPassword:
    post:
      operationId: GetRandomPassword
      description: <p>Generates a random password of the specified complexity. This
        operation is intended for use in the Lambda rotation function. Per best
        practice, we recommend that you specify the maximum length and include
        every character type that the system you are generating a password for
        can support.</p> <p> <b>Minimum permissions</b> </p> <p>To run this
        command, you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:GetRandomPassword</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRandomPasswordResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.GetRandomPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRandomPasswordRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.GetResourcePolicy:
    post:
      operationId: GetResourcePolicy
      description: <p>Retrieves the JSON text of the resource-based policy document that's
        attached to the specified secret. The JSON request string input and
        response output are shown formatted with white space and line breaks for
        better readability. Submit your input as a single line JSON string.</p>
        <p> <b>Minimum permissions</b> </p> <p>To run this command, you must
        have the following permissions:</p> <ul> <li>
        <p>secretsmanager:GetResourcePolicy</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To attach a resource policy to a
        secret, use <a>PutResourcePolicy</a>.</p> </li> <li> <p>To delete the
        resource-based policy that's attached to a secret, use
        <a>DeleteResourcePolicy</a>.</p> </li> <li> <p>To list all of the
        currently available secrets, use <a>ListSecrets</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResourcePolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.GetResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.GetSecretValue:
    post:
      operationId: GetSecretValue
      description: <p>Retrieves the contents of the encrypted fields
        <code>SecretString</code> or <code>SecretBinary</code> from the
        specified version of a secret, whichever contains content.</p> <p>
        <b>Minimum permissions</b> </p> <p>To run this command, you must have
        the following permissions:</p> <ul> <li>
        <p>secretsmanager:GetSecretValue</p> </li> <li> <p>kms:Decrypt -
        required only if you use a customer-managed AWS KMS key to encrypt the
        secret. You do not need this permission to use the account's default AWS
        managed CMK for Secrets Manager.</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To create a new version of the secret
        with different encrypted information, use <a>PutSecretValue</a>.</p>
        </li> <li> <p>To retrieve the non-encrypted details for the secret, use
        <a>DescribeSecret</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSecretValueResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: DecryptionFailure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecryptionFailure"
        "484":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.GetSecretValue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSecretValueRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.ListSecretVersionIds:
    post:
      operationId: ListSecretVersionIds
      description: <p>Lists all of the versions attached to the specified secret. The
        output does not include the <code>SecretString</code> or
        <code>SecretBinary</code> fields. By default, the list includes only
        versions that have at least one staging label in
        <code>VersionStage</code> attached.</p> <note> <p>Always check the
        <code>NextToken</code> response parameter when calling any of the
        <code>List*</code> operations. These operations can occasionally return
        an empty or shorter than expected list of results even when there are
        more results available. When this happens, the <code>NextToken</code>
        response parameter contains a value to pass to the next call to the same
        API to request the next part of the list.</p> </note> <p> <b>Minimum
        permissions</b> </p> <p>To run this command, you must have the following
        permissions:</p> <ul> <li> <p>secretsmanager:ListSecretVersionIds</p>
        </li> </ul> <p> <b>Related operations</b> </p> <ul> <li> <p>To list the
        secrets in an account, use <a>ListSecrets</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSecretVersionIdsResponse"
        "480":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.ListSecretVersionIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSecretVersionIdsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.ListSecrets:
    post:
      operationId: ListSecrets
      description: <p>Lists all of the secrets that are stored by Secrets Manager in the
        AWS account. To list the versions currently stored for a specific
        secret, use <a>ListSecretVersionIds</a>. The encrypted fields
        <code>SecretString</code> and <code>SecretBinary</code> are not included
        in the output. To get that information, call the <a>GetSecretValue</a>
        operation.</p> <note> <p>Always check the <code>NextToken</code>
        response parameter when calling any of the <code>List*</code>
        operations. These operations can occasionally return an empty or shorter
        than expected list of results even when there are more results
        available. When this happens, the <code>NextToken</code> response
        parameter contains a value to pass to the next call to the same API to
        request the next part of the list.</p> </note> <p> <b>Minimum
        permissions</b> </p> <p>To run this command, you must have the following
        permissions:</p> <ul> <li> <p>secretsmanager:ListSecrets</p> </li> </ul>
        <p> <b>Related operations</b> </p> <ul> <li> <p>To list the versions
        attached to a secret, use <a>ListSecretVersionIds</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSecretsResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "482":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.ListSecrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListSecretsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.PutResourcePolicy:
    post:
      operationId: PutResourcePolicy
      description: <p>Attaches the contents of the specified resource-based permission
        policy to a secret. A resource-based policy is optional. Alternatively,
        you can use IAM identity-based policies that specify the secret's Amazon
        Resource Name (ARN) in the policy statement's <code>Resources</code>
        element. You can also use a combination of both identity-based and
        resource-based policies. The affected users and roles receive the
        permissions that are permitted by all of the relevant policies. For more
        information, see <a
        href="http://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html">Using
        Resource-Based Policies for AWS Secrets Manager</a>. For the complete
        description of the AWS policy syntax and grammar, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
        JSON Policy Reference</a> in the <i>IAM User Guide</i>.</p> <p>
        <b>Minimum permissions</b> </p> <p>To run this command, you must have
        the following permissions:</p> <ul> <li>
        <p>secretsmanager:PutResourcePolicy</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To retrieve the resource policy that's
        attached to a secret, use <a>GetResourcePolicy</a>.</p> </li> <li> <p>To
        delete the resource-based policy that's attached to a secret, use
        <a>DeleteResourcePolicy</a>.</p> </li> <li> <p>To list all of the
        currently available secrets, use <a>ListSecrets</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutResourcePolicyResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "484":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.PutResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.PutSecretValue:
    post:
      operationId: PutSecretValue
      description: <p>Stores a new encrypted secret value in the specified secret. To do
        this, the operation creates a new version and attaches it to the secret.
        The version can contain a new <code>SecretString</code> value or a new
        <code>SecretBinary</code> value. You can also specify the staging labels
        that are initially attached to the new version.</p> <note> <p>The
        Secrets Manager console uses only the <code>SecretString</code> field.
        To add binary data to a secret with the <code>SecretBinary</code> field
        you must use the AWS CLI or one of the AWS SDKs.</p> </note> <ul> <li>
        <p>If this operation creates the first version for the secret then
        Secrets Manager automatically attaches the staging label
        <code>AWSCURRENT</code> to the new version.</p> </li> <li> <p>If another
        version of this secret already exists, then this operation does not
        automatically move any staging labels other than those that you
        explicitly specify in the <code>VersionStages</code> parameter.</p>
        </li> <li> <p>If this operation moves the staging label
        <code>AWSCURRENT</code> from another version to this version (because
        you included it in the <code>StagingLabels</code> parameter) then
        Secrets Manager also automatically moves the staging label
        <code>AWSPREVIOUS</code> to the version that <code>AWSCURRENT</code> was
        removed from.</p> </li> <li> <p>This operation is idempotent. If a
        version with a <code>VersionId</code> with the same value as the
        <code>ClientRequestToken</code> parameter already exists and you specify
        the same secret data, the operation succeeds but does nothing. However,
        if the secret data is different, then the operation fails because you
        cannot modify an existing version; you can only create new ones.</p>
        </li> </ul> <note> <ul> <li> <p>If you call an operation that needs to
        encrypt or decrypt the <code>SecretString</code> or
        <code>SecretBinary</code> for a secret in the same account as the
        calling user and that secret doesn't specify a AWS KMS encryption key,
        Secrets Manager uses the account's default AWS managed customer master
        key (CMK) with the alias <code>aws/secretsmanager</code>. If this key
        doesn't already exist in your account then Secrets Manager creates it
        for you automatically. All users and roles in the same AWS account
        automatically have access to use the default CMK. Note that if an
        Secrets Manager API call results in AWS having to create the account's
        AWS-managed CMK, it can result in a one-time significant delay in
        returning the result.</p> </li> <li> <p>If the secret is in a different
        AWS account from the credentials calling an API that requires encryption
        or decryption of the secret value then you must create and use a custom
        AWS KMS CMK because you can't access the default CMK for the account
        using credentials from a different AWS account. Store the ARN of the CMK
        in the secret when you create the secret or when you update it by
        including it in the <code>KMSKeyId</code>. If you call an API that must
        encrypt or decrypt <code>SecretString</code> or
        <code>SecretBinary</code> using credentials from a different account
        then the AWS KMS key policy must grant cross-account access to that
        other account's user or role for both the kms:GenerateDataKey and
        kms:Decrypt operations.</p> </li> </ul> </note> <p> <b>Minimum
        permissions</b> </p> <p>To run this command, you must have the following
        permissions:</p> <ul> <li> <p>secretsmanager:PutSecretValue</p> </li>
        <li> <p>kms:GenerateDataKey - needed only if you use a customer-managed
        AWS KMS key to encrypt the secret. You do not need this permission to
        use the account's default AWS managed CMK for Secrets Manager.</p> </li>
        </ul> <p> <b>Related operations</b> </p> <ul> <li> <p>To retrieve the
        encrypted value you store in the version of a secret, use
        <a>GetSecretValue</a>.</p> </li> <li> <p>To create a secret, use
        <a>CreateSecret</a>.</p> </li> <li> <p>To get the details for a secret,
        use <a>DescribeSecret</a>.</p> </li> <li> <p>To list the versions
        attached to a secret, use <a>ListSecretVersionIds</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutSecretValueResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: EncryptionFailure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionFailure"
        "484":
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceExistsException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.PutSecretValue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutSecretValueRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.RestoreSecret:
    post:
      operationId: RestoreSecret
      description: <p>Cancels the scheduled deletion of a secret by removing the
        <code>DeletedDate</code> time stamp. This makes the secret accessible to
        query once again.</p> <p> <b>Minimum permissions</b> </p> <p>To run this
        command, you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:RestoreSecret</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To delete a secret, use
        <a>DeleteSecret</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestoreSecretResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.RestoreSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.RotateSecret:
    post:
      operationId: RotateSecret
      description: <p>Configures and starts the asynchronous process of rotating this
        secret. If you include the configuration parameters, the operation sets
        those values for the secret and then immediately starts a rotation. If
        you do not include the configuration parameters, the operation starts a
        rotation with the values already stored in the secret. After the
        rotation completes, the protected service and its clients all use the
        new version of the secret. </p> <p>This required configuration
        information includes the ARN of an AWS Lambda function and the time
        between scheduled rotations. The Lambda rotation function creates a new
        version of the secret and creates or updates the credentials on the
        protected service to match. After testing the new credentials, the
        function marks the new secret with the staging label
        <code>AWSCURRENT</code> so that your clients all immediately begin to
        use the new version. For more information about rotating secrets and how
        to configure a Lambda function to rotate the secrets for your protected
        service, see <a
        href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html">Rotating
        Secrets in AWS Secrets Manager</a> in the <i>AWS Secrets Manager User
        Guide</i>.</p> <p>Secrets Manager schedules the next rotation when the
        previous one is complete. Secrets Manager schedules the date by adding
        the rotation interval (number of days) to the actual date of the last
        rotation. The service chooses the hour within that 24-hour date window
        randomly. The minute is also chosen somewhat randomly, but weighted
        towards the top of the hour and influenced by a variety of factors that
        help distribute load.</p> <p>The rotation function must end with the
        versions of the secret in one of two states:</p> <ul> <li> <p>The
        <code>AWSPENDING</code> and <code>AWSCURRENT</code> staging labels are
        attached to the same version of the secret, or</p> </li> <li> <p>The
        <code>AWSPENDING</code> staging label is not attached to any version of
        the secret.</p> </li> </ul> <p>If instead the <code>AWSPENDING</code>
        staging label is present but is not attached to the same version as
        <code>AWSCURRENT</code> then any later invocation of
        <code>RotateSecret</code> assumes that a previous rotation request is
        still in progress and returns an error.</p> <p> <b>Minimum
        permissions</b> </p> <p>To run this command, you must have the following
        permissions:</p> <ul> <li> <p>secretsmanager:RotateSecret</p> </li> <li>
        <p>lambda:InvokeFunction (on the function specified in the secret's
        metadata)</p> </li> </ul> <p> <b>Related operations</b> </p> <ul> <li>
        <p>To list the secrets in your account, use <a>ListSecrets</a>.</p>
        </li> <li> <p>To get the details for a version of a secret, use
        <a>DescribeSecret</a>.</p> </li> <li> <p>To create a new version of a
        secret, use <a>CreateSecret</a>.</p> </li> <li> <p>To attach staging
        labels to or remove staging labels from a version of a secret, use
        <a>UpdateSecretVersionStage</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RotateSecretResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.RotateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RotateSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.TagResource:
    post:
      operationId: TagResource
      description: "<p>Attaches one or more tags, each consisting of a key name and a
        value, to the specified secret. Tags are part of the secret's overall
        metadata, and are not associated with any specific version of the
        secret. This operation only appends tags to the existing list of tags.
        To remove tags, you must use <a>UntagResource</a>.</p> <p>The following
        basic restrictions apply to tags:</p> <ul> <li> <p>Maximum number of
        tags per secret—50</p> </li> <li> <p>Maximum key length—127 Unicode
        characters in UTF-8</p> </li> <li> <p>Maximum value length—255 Unicode
        characters in UTF-8</p> </li> <li> <p>Tag keys and values are case
        sensitive.</p> </li> <li> <p>Do not use the <code>aws:</code> prefix in
        your tag names or values because it is reserved for AWS use. You can't
        edit or delete tag names or values with this prefix. Tags with this
        prefix do not count against your tags per secret limit.</p> </li> <li>
        <p>If your tagging schema will be used across multiple services and
        resources, remember that other services might have restrictions on
        allowed characters. Generally allowed characters are: letters, spaces,
        and numbers representable in UTF-8, plus the following special
        characters: + - = . _ : / @.</p> </li> </ul> <important> <p>If you use
        tags as part of your security strategy, then adding or removing a tag
        can change permissions. If successfully completing this operation would
        result in you losing your permissions for this secret, then the
        operation is blocked and returns an Access Denied error.</p>
        </important> <p> <b>Minimum permissions</b> </p> <p>To run this command,
        you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:TagResource</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To remove one or more tags from the
        collection attached to a secret, use <a>UntagResource</a>.</p> </li>
        <li> <p>To view the list of tags attached to a secret, use
        <a>DescribeSecret</a>.</p> </li> </ul>"
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.UntagResource:
    post:
      operationId: UntagResource
      description: <p>Removes one or more tags from the specified secret.</p> <p>This
        operation is idempotent. If a requested tag is not attached to the
        secret, no error is returned and the secret metadata is unchanged.</p>
        <important> <p>If you use tags as part of your security strategy, then
        removing a tag can change permissions. If successfully completing this
        operation would result in you losing your permissions for this secret,
        then the operation is blocked and returns an Access Denied error.</p>
        </important> <p> <b>Minimum permissions</b> </p> <p>To run this command,
        you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:UntagResource</p> </li> </ul> <p> <b>Related
        operations</b> </p> <ul> <li> <p>To add one or more tags to the
        collection attached to a secret, use <a>TagResource</a>.</p> </li> <li>
        <p>To view the list of tags attached to a secret, use
        <a>DescribeSecret</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "483":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.UpdateSecret:
    post:
      operationId: UpdateSecret
      description: <p>Modifies many of the details of the specified secret. If you include
        a <code>ClientRequestToken</code> and <i>either</i>
        <code>SecretString</code> or <code>SecretBinary</code> then it also
        creates a new version attached to the secret.</p> <p>To modify the
        rotation configuration of a secret, use <a>RotateSecret</a> instead.</p>
        <note> <p>The Secrets Manager console uses only the
        <code>SecretString</code> parameter and therefore limits you to
        encrypting and storing only a text string. To encrypt and store binary
        data as part of the version of a secret, you must use either the AWS CLI
        or one of the AWS SDKs.</p> </note> <ul> <li> <p>If a version with a
        <code>VersionId</code> with the same value as the
        <code>ClientRequestToken</code> parameter already exists, the operation
        results in an error. You cannot modify an existing version, you can only
        create a new version.</p> </li> <li> <p>If you include
        <code>SecretString</code> or <code>SecretBinary</code> to create a new
        secret version, Secrets Manager automatically attaches the staging label
        <code>AWSCURRENT</code> to the new version. </p> </li> </ul> <note> <ul>
        <li> <p>If you call an operation that needs to encrypt or decrypt the
        <code>SecretString</code> or <code>SecretBinary</code> for a secret in
        the same account as the calling user and that secret doesn't specify a
        AWS KMS encryption key, Secrets Manager uses the account's default AWS
        managed customer master key (CMK) with the alias
        <code>aws/secretsmanager</code>. If this key doesn't already exist in
        your account then Secrets Manager creates it for you automatically. All
        users and roles in the same AWS account automatically have access to use
        the default CMK. Note that if an Secrets Manager API call results in AWS
        having to create the account's AWS-managed CMK, it can result in a
        one-time significant delay in returning the result.</p> </li> <li> <p>If
        the secret is in a different AWS account from the credentials calling an
        API that requires encryption or decryption of the secret value then you
        must create and use a custom AWS KMS CMK because you can't access the
        default CMK for the account using credentials from a different AWS
        account. Store the ARN of the CMK in the secret when you create the
        secret or when you update it by including it in the
        <code>KMSKeyId</code>. If you call an API that must encrypt or decrypt
        <code>SecretString</code> or <code>SecretBinary</code> using credentials
        from a different account then the AWS KMS key policy must grant
        cross-account access to that other account's user or role for both the
        kms:GenerateDataKey and kms:Decrypt operations.</p> </li> </ul> </note>
        <p> <b>Minimum permissions</b> </p> <p>To run this command, you must
        have the following permissions:</p> <ul> <li>
        <p>secretsmanager:UpdateSecret</p> </li> <li> <p>kms:GenerateDataKey -
        needed only if you use a custom AWS KMS key to encrypt the secret. You
        do not need this permission to use the account's AWS managed CMK for
        Secrets Manager.</p> </li> <li> <p>kms:Decrypt - needed only if you use
        a custom AWS KMS key to encrypt the secret. You do not need this
        permission to use the account's AWS managed CMK for Secrets Manager.</p>
        </li> </ul> <p> <b>Related operations</b> </p> <ul> <li> <p>To create a
        new secret, use <a>CreateSecret</a>.</p> </li> <li> <p>To add only a new
        version to an existing secret, use <a>PutSecretValue</a>.</p> </li> <li>
        <p>To get the details for a secret, use <a>DescribeSecret</a>.</p> </li>
        <li> <p>To list the versions contained in a secret, use
        <a>ListSecretVersionIds</a>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateSecretResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: EncryptionFailure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncryptionFailure"
        "484":
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceExistsException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: MalformedPolicyDocumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "487":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "488":
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionNotMetException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.UpdateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSecretRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=secretsmanager.UpdateSecretVersionStage:
    post:
      operationId: UpdateSecretVersionStage
      description: <p>Modifies the staging labels attached to a version of a secret.
        Staging labels are used to track a version as it progresses through the
        secret rotation process. You can attach a staging label to only one
        version of a secret at a time. If a staging label to be added is already
        attached to another version, then it is moved--removed from the other
        version first and then attached to this one. For more information about
        staging labels, see <a
        href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/terms-concepts.html#term_staging-label">Staging
        Labels</a> in the <i>AWS Secrets Manager User Guide</i>. </p> <p>The
        staging labels that you specify in the <code>VersionStage</code>
        parameter are added to the existing list of staging labels--they don't
        replace it.</p> <p>You can move the <code>AWSCURRENT</code> staging
        label to this version by including it in this call.</p> <note>
        <p>Whenever you move <code>AWSCURRENT</code>, Secrets Manager
        automatically moves the label <code>AWSPREVIOUS</code> to the version
        that <code>AWSCURRENT</code> was removed from.</p> </note> <p>If this
        action results in the last label being removed from a version, then the
        version is considered to be 'deprecated' and can be deleted by Secrets
        Manager.</p> <p> <b>Minimum permissions</b> </p> <p>To run this command,
        you must have the following permissions:</p> <ul> <li>
        <p>secretsmanager:UpdateSecretVersionStage</p> </li> </ul> <p>
        <b>Related operations</b> </p> <ul> <li> <p>To get the list of staging
        labels that are currently associated with a version of a secret, use
        <code> <a>DescribeSecret</a> </code> and examine the
        <code>SecretVersionsToStages</code> response value. </p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateSecretVersionStageResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - secretsmanager.UpdateSecretVersionStage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSecretVersionStageRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://secretsmanager.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Secrets Manager multi-region endpoint
  - url: https://secretsmanager.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Secrets Manager multi-region endpoint
  - url: http://secretsmanager.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Secrets Manager endpoint for China (Beijing) and China (Ningxia)
  - url: https://secretsmanager.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Secrets Manager endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CancelRotateSecretResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: Name
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
    CancelRotateSecretRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
    ResourceNotFoundException: {}
    InvalidParameterException: {}
    InternalServiceError: {}
    InvalidRequestException: {}
    CreateSecretResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
        VersionId: EXAMPLE1-90ab-cdef-fedc-ba987SECRET1
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
    CreateSecretRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameType"
        ClientRequestToken:
          $ref: "#/components/schemas/ClientRequestTokenType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        KmsKeyId:
          $ref: "#/components/schemas/KmsKeyIdType"
        SecretBinary:
          $ref: "#/components/schemas/SecretBinaryType"
        SecretString:
          $ref: "#/components/schemas/SecretStringType"
        Tags:
          $ref: "#/components/schemas/TagListType"
    LimitExceededException: {}
    EncryptionFailure: {}
    ResourceExistsException: {}
    MalformedPolicyDocumentException: {}
    PreconditionNotMetException: {}
    DeleteResourcePolicyResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseMasterSecret-a1b2c3
        Name: MyTestDatabaseSecret
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/NameType"
    DeleteResourcePolicyRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
    DeleteSecretResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        DeletionDate: "1524085349.095"
        Name: MyTestDatabaseSecret
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        DeletionDate:
          $ref: "#/components/schemas/DeletionDateType"
    DeleteSecretRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        RecoveryWindowInDays:
          $ref: "#/components/schemas/RecoveryWindowInDaysType"
        ForceDeleteWithoutRecovery:
          $ref: "#/components/schemas/BooleanType"
    DescribeSecretResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Description: My test database secret
        KmsKeyId: arn:aws:kms:us-west-2:123456789012:key/EXAMPLE1-90ab-cdef-fedc-ba987KMSKEY1
        LastAccessedDate: "1523923200"
        LastChangedDate: 1523477145.729
        LastRotatedDate: 1525747253.72
        Name: MyTestDatabaseSecret
        RotationEnabled: true
        RotationLambdaARN: arn:aws:lambda:us-west-2:123456789012:function:MyTestRotationLambda
        RotationRules:
          AutomaticallyAfterDays: 30
        Tags:
          - Key: SecondTag
            Value: AnotherValue
          - Key: FirstTag
            Value: SomeValue
        VersionIdsToStages:
          EXAMPLE1-90ab-cdef-fedc-ba987EXAMPLE:
            - AWSPREVIOUS
          EXAMPLE2-90ab-cdef-fedc-ba987EXAMPLE:
            - AWSCURRENT
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        KmsKeyId:
          $ref: "#/components/schemas/KmsKeyIdType"
        RotationEnabled:
          $ref: "#/components/schemas/RotationEnabledType"
        RotationLambdaARN:
          $ref: "#/components/schemas/RotationLambdaARNType"
        RotationRules:
          $ref: "#/components/schemas/RotationRulesType"
        LastRotatedDate:
          $ref: "#/components/schemas/LastRotatedDateType"
        LastChangedDate:
          $ref: "#/components/schemas/LastChangedDateType"
        LastAccessedDate:
          $ref: "#/components/schemas/LastAccessedDateType"
        DeletedDate:
          $ref: "#/components/schemas/DeletedDateType"
        Tags:
          $ref: "#/components/schemas/TagListType"
        VersionIdsToStages:
          $ref: "#/components/schemas/SecretVersionsToStagesMapType"
        OwningService:
          $ref: "#/components/schemas/OwningServiceType"
    DescribeSecretRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
    GetRandomPasswordResponse:
      type: object
      example:
        RandomPassword: N+Z43a,>vx7j O8^*<8i3
      properties:
        RandomPassword:
          $ref: "#/components/schemas/RandomPasswordType"
    GetRandomPasswordRequest:
      type: object
      properties:
        PasswordLength:
          $ref: "#/components/schemas/PasswordLengthType"
        ExcludeCharacters:
          $ref: "#/components/schemas/ExcludeCharactersType"
        ExcludeNumbers:
          $ref: "#/components/schemas/ExcludeNumbersType"
        ExcludePunctuation:
          $ref: "#/components/schemas/ExcludePunctuationType"
        ExcludeUppercase:
          $ref: "#/components/schemas/ExcludeUppercaseType"
        ExcludeLowercase:
          $ref: "#/components/schemas/ExcludeLowercaseType"
        IncludeSpace:
          $ref: "#/components/schemas/IncludeSpaceType"
        RequireEachIncludedType:
          $ref: "#/components/schemas/RequireEachIncludedTypeType"
    GetResourcePolicyResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
        ResourcePolicy: |-
          {
          "Version":"2012-10-17",
          "Statement":[{
          "Effect":"Allow",
          "Principal":{
          "AWS":"arn:aws:iam::123456789012:root"
          },
          "Action":"secretsmanager:GetSecretValue",
          "Resource":"*"
          }]
          }
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/NameType"
        ResourcePolicy:
          $ref: "#/components/schemas/NonEmptyResourcePolicyType"
    GetResourcePolicyRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
    GetSecretValueResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        CreatedDate: 1523477145.713
        Name: MyTestDatabaseSecret
        SecretString: |
          {
            "username":"david",
            "password":"BnQw&XDWgaEeT9XGTT29"
          }
        VersionId: EXAMPLE1-90ab-cdef-fedc-ba987SECRET1
        VersionStages:
          - AWSPREVIOUS
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
        SecretBinary:
          $ref: "#/components/schemas/SecretBinaryType"
        SecretString:
          $ref: "#/components/schemas/SecretStringType"
        VersionStages:
          $ref: "#/components/schemas/SecretVersionStagesType"
        CreatedDate:
          $ref: "#/components/schemas/CreatedDateType"
    GetSecretValueRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
        VersionStage:
          $ref: "#/components/schemas/SecretVersionStageType"
    DecryptionFailure: {}
    ListSecretVersionIdsResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
        Versions:
          - CreatedDate: 1523477145.713
            VersionId: EXAMPLE1-90ab-cdef-fedc-ba987EXAMPLE
            VersionStages:
              - AWSPREVIOUS
          - CreatedDate: 1523486221.391
            VersionId: EXAMPLE2-90ab-cdef-fedc-ba987EXAMPLE
            VersionStages:
              - AWSCURRENT
          - CreatedDate: 1511974462.36
            VersionId: EXAMPLE3-90ab-cdef-fedc-ba987EXAMPLE;
      properties:
        Versions:
          $ref: "#/components/schemas/SecretVersionsListType"
        NextToken:
          $ref: "#/components/schemas/NextTokenType"
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
    ListSecretVersionIdsRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        MaxResults:
          $ref: "#/components/schemas/MaxResultsType"
        NextToken:
          $ref: "#/components/schemas/NextTokenType"
        IncludeDeprecated:
          $ref: "#/components/schemas/BooleanType"
    InvalidNextTokenException: {}
    ListSecretsResponse:
      type: object
      example:
        SecretList:
          - ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
            Description: My test database secret
            LastChangedDate: 1523477145.729
            Name: MyTestDatabaseSecret
            SecretVersionsToStages:
              EXAMPLE1-90ab-cdef-fedc-ba987EXAMPLE:
                - AWSCURRENT
          - ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret1-d4e5f6
            Description: Another secret created for a different database
            LastChangedDate: 1523482025.685
            Name: MyTestDatabaseSecret1
            SecretVersionsToStages:
              EXAMPLE2-90ab-cdef-fedc-ba987EXAMPLE:
                - AWSCURRENT
      properties:
        SecretList:
          $ref: "#/components/schemas/SecretListType"
        NextToken:
          $ref: "#/components/schemas/NextTokenType"
    ListSecretsRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/MaxResultsType"
        NextToken:
          $ref: "#/components/schemas/NextTokenType"
    PutResourcePolicyResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/NameType"
    PutResourcePolicyRequest:
      type: object
      required:
        - SecretId
        - ResourcePolicy
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        ResourcePolicy:
          $ref: "#/components/schemas/NonEmptyResourcePolicyType"
    PutSecretValueResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
        VersionId: EXAMPLE2-90ab-cdef-fedc-ba987EXAMPLE
        VersionStages:
          - AWSCURRENT
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
        VersionStages:
          $ref: "#/components/schemas/SecretVersionStagesType"
    PutSecretValueRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        ClientRequestToken:
          $ref: "#/components/schemas/ClientRequestTokenType"
        SecretBinary:
          $ref: "#/components/schemas/SecretBinaryType"
        SecretString:
          $ref: "#/components/schemas/SecretStringType"
        VersionStages:
          $ref: "#/components/schemas/SecretVersionStagesType"
    RestoreSecretResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
    RestoreSecretRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
    RotateSecretResponse:
      type: object
      example:
        SecretARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        SecretName: MyTestDatabaseSecret
        SecretVersionId: EXAMPLE2-90ab-cdef-fedc-ba987SECRET2
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
    RotateSecretRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        ClientRequestToken:
          $ref: "#/components/schemas/ClientRequestTokenType"
        RotationLambdaARN:
          $ref: "#/components/schemas/RotationLambdaARNType"
        RotationRules:
          $ref: "#/components/schemas/RotationRulesType"
    TagResourceRequest:
      type: object
      required:
        - SecretId
        - Tags
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        Tags:
          $ref: "#/components/schemas/TagListType"
    UntagResourceRequest:
      type: object
      required:
        - SecretId
        - TagKeys
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        TagKeys:
          $ref: "#/components/schemas/TagKeyListType"
    UpdateSecretResponse:
      type: object
      example:
        ARN: aws:arn:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
        VersionId: EXAMPLE1-90ab-cdef-fedc-ba987EXAMPLE
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
    UpdateSecretRequest:
      type: object
      required:
        - SecretId
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        ClientRequestToken:
          $ref: "#/components/schemas/ClientRequestTokenType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        KmsKeyId:
          $ref: "#/components/schemas/KmsKeyIdType"
        SecretBinary:
          $ref: "#/components/schemas/SecretBinaryType"
        SecretString:
          $ref: "#/components/schemas/SecretStringType"
    UpdateSecretVersionStageResponse:
      type: object
      example:
        ARN: arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3
        Name: MyTestDatabaseSecret
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
    UpdateSecretVersionStageRequest:
      type: object
      required:
        - SecretId
        - VersionStage
      properties:
        SecretId:
          $ref: "#/components/schemas/SecretIdType"
        VersionStage:
          $ref: "#/components/schemas/SecretVersionStageType"
        RemoveFromVersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
        MoveToVersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
    AutomaticallyRotateAfterDaysType:
      type: integer
      minimum: 1
      maximum: 1000
    BooleanType:
      type: boolean
    SecretIdType:
      type: string
      minLength: 1
      maxLength: 2048
    SecretARNType:
      type: string
      minLength: 20
      maxLength: 2048
    SecretNameType:
      type: string
      minLength: 1
      maxLength: 256
    SecretVersionIdType:
      type: string
      minLength: 32
      maxLength: 64
    ClientRequestTokenType:
      type: string
      minLength: 32
      maxLength: 64
    NameType:
      type: string
      minLength: 1
      maxLength: 512
    DescriptionType:
      type: string
      maxLength: 2048
    KmsKeyIdType:
      type: string
      minLength: 0
      maxLength: 2048
    SecretBinaryType:
      type: string
      minLength: 0
      maxLength: 10240
      format: password
    SecretStringType:
      type: string
      minLength: 0
      maxLength: 10240
      format: password
    TagListType:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    CreatedDateType:
      type: string
      format: date-time
    RecoveryWindowInDaysType:
      type: integer
    DeletionDateType:
      type: string
      format: date-time
    DeletedDateType:
      type: string
      format: date-time
    RotationEnabledType:
      type: boolean
    RotationLambdaARNType:
      type: string
      minLength: 0
      maxLength: 2048
    RotationRulesType:
      type: object
      properties:
        AutomaticallyAfterDays:
          $ref: "#/components/schemas/AutomaticallyRotateAfterDaysType"
      description: A structure that defines the rotation configuration for the secret.
    LastRotatedDateType:
      type: string
      format: date-time
    LastChangedDateType:
      type: string
      format: date-time
    LastAccessedDateType:
      type: string
      format: date-time
    SecretVersionsToStagesMapType:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/SecretVersionStagesType"
    OwningServiceType:
      type: string
      minLength: 1
      maxLength: 128
    ExcludeCharactersType:
      type: string
      minLength: 0
      maxLength: 4096
    ExcludeLowercaseType:
      type: boolean
    ExcludeNumbersType:
      type: boolean
    ExcludePunctuationType:
      type: boolean
    ExcludeUppercaseType:
      type: boolean
    PasswordLengthType:
      type: integer
      minimum: 1
      maximum: 4096
    IncludeSpaceType:
      type: boolean
    RequireEachIncludedTypeType:
      type: boolean
    RandomPasswordType:
      type: string
      minLength: 0
      maxLength: 4096
      format: password
    NonEmptyResourcePolicyType:
      type: string
      minLength: 1
      maxLength: 20480
    SecretVersionStageType:
      type: string
      minLength: 1
      maxLength: 256
    SecretVersionStagesType:
      type: array
      items:
        $ref: "#/components/schemas/SecretVersionStageType"
      minItems: 1
      maxItems: 20
    MaxResultsType:
      type: integer
      minimum: 1
      maximum: 100
    NextTokenType:
      type: string
      minLength: 1
      maxLength: 4096
    SecretVersionsListType:
      type: array
      items:
        $ref: "#/components/schemas/SecretVersionsListEntry"
    SecretListType:
      type: array
      items:
        $ref: "#/components/schemas/SecretListEntry"
    SecretListEntry:
      type: object
      properties:
        ARN:
          $ref: "#/components/schemas/SecretARNType"
        Name:
          $ref: "#/components/schemas/SecretNameType"
        Description:
          $ref: "#/components/schemas/DescriptionType"
        KmsKeyId:
          $ref: "#/components/schemas/KmsKeyIdType"
        RotationEnabled:
          $ref: "#/components/schemas/RotationEnabledType"
        RotationLambdaARN:
          $ref: "#/components/schemas/RotationLambdaARNType"
        RotationRules:
          $ref: "#/components/schemas/RotationRulesType"
        LastRotatedDate:
          $ref: "#/components/schemas/LastRotatedDateType"
        LastChangedDate:
          $ref: "#/components/schemas/LastChangedDateType"
        LastAccessedDate:
          $ref: "#/components/schemas/LastAccessedDateType"
        DeletedDate:
          $ref: "#/components/schemas/DeletedDateType"
        Tags:
          $ref: "#/components/schemas/TagListType"
        SecretVersionsToStages:
          $ref: "#/components/schemas/SecretVersionsToStagesMapType"
        OwningService:
          $ref: "#/components/schemas/OwningServiceType"
      description: A structure that contains the details about a secret. It does not
        include the encrypted <code>SecretString</code> and
        <code>SecretBinary</code> values. To get those values, use the
        <a>GetSecretValue</a> operation.
    SecretVersionsListEntry:
      type: object
      properties:
        VersionId:
          $ref: "#/components/schemas/SecretVersionIdType"
        VersionStages:
          $ref: "#/components/schemas/SecretVersionStagesType"
        LastAccessedDate:
          $ref: "#/components/schemas/LastAccessedDateType"
        CreatedDate:
          $ref: "#/components/schemas/CreatedDateType"
      description: A structure that contains information about one version of a secret.
    TagKeyType:
      type: string
      minLength: 1
      maxLength: 128
    TagValueType:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      properties:
        Key:
          $ref: "#/components/schemas/TagKeyType"
        Value:
          $ref: "#/components/schemas/TagValueType"
      description: A structure that contains information about a tag.
    TagKeyListType:
      type: array
      items:
        $ref: "#/components/schemas/TagKeyType"
