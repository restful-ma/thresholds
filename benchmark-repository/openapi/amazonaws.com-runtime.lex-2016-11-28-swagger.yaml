openapi: 3.0.0
info:
  version: 2016-11-28
  x-release: v4
  title: Amazon Lex Runtime Service
  description: 'Amazon Lex provides both build and runtime endpoints. Each endpoint
    provides a set of operations (API). Your conversational bot uses the runtime
    API to understand user utterances (user input text or voice). For example,
    suppose a user says "I want pizza", your bot sends this input to Amazon Lex
    using the runtime API. Amazon Lex recognizes that the user request is for
    the OrderPizza intent (one of the intents defined in the bot). Then Amazon
    Lex engages in user conversation on behalf of the bot to elicit required
    information (slot values, such as pizza size and crust type), and then
    performs fulfillment activity (that you configured when you created the
    bot). You use the build-time API to create and manage your Amazon Lex bot.
    For a list of build-time operations, see the build-time API, . '
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: runtime.lex
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex-2016-11-28.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lex/
security:
  - hmac: []
paths:
  "/bot/{botName}/alias/{botAlias}/user/{userId}/session":
    delete:
      operationId: DeleteSession
      description: "Removes session information for a specified bot, alias, and user ID. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSessionResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the bot that contains the session data.
          schema:
            type: string
        - name: botAlias
          in: path
          required: true
          description: The alias in use for the bot that contains the session data.
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: The identifier of the user associated with the session data.
          schema:
            type: string
            minLength: 2
            maxLength: 100
            pattern: "[0-9a-zA-Z._:-]+"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetSession
      description: Returns session information for a specified bot, alias, and user ID.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSessionResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the bot that contains the session data.
          schema:
            type: string
        - name: botAlias
          in: path
          required: true
          description: The alias in use for the bot that contains the session data.
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: "The ID of the client application user. Amazon Lex uses this to
            identify a user's conversation with your bot. "
          schema:
            type: string
            minLength: 2
            maxLength: 100
            pattern: "[0-9a-zA-Z._:-]+"
    post:
      operationId: PutSession
      description: <p>Creates a new session or modifies an existing session with an Amazon
        Lex bot. Use this operation to enable your application to set the state
        of the bot.</p> <p>For more information, see <a
        href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
        Sessions</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutSessionResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "485":
          description: NotAcceptableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableException"
        "486":
          description: DependencyFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DependencyFailedException"
        "487":
          description: BadGatewayException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the bot that contains the session data.
          schema:
            type: string
        - name: botAlias
          in: path
          required: true
          description: The alias in use for the bot that contains the session data.
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: "The ID of the client application user. Amazon Lex uses this to
            identify a user's conversation with your bot. "
          schema:
            type: string
            minLength: 2
            maxLength: 100
            pattern: "[0-9a-zA-Z._:-]+"
        - name: Accept
          in: header
          required: false
          description: <p>The message that Amazon Lex returns in the response can be either
            text or speech based depending on the value of this field.</p> <ul>
            <li> <p>If the value is <code>text/plain; charset=utf-8</code>,
            Amazon Lex returns text in the response.</p> </li> <li> <p>If the
            value begins with <code>audio/</code>, Amazon Lex returns speech in
            the response. Amazon Lex uses Amazon Polly to generate the speech in
            the configuration that you specify. For example, if you specify
            <code>audio/mpeg</code> as the value, Amazon Lex returns speech in
            the MPEG format.</p> </li> <li> <p>If the value is
            <code>audio/pcm</code>, the speech is returned as
            <code>audio/pcm</code> in 16-bit, little endian format.</p> </li>
            <li> <p>The following are the accepted values:</p> <ul> <li> <p>
            <code>audio/mpeg</code> </p> </li> <li> <p> <code>audio/ogg</code>
            </p> </li> <li> <p> <code>audio/pcm</code> </p> </li> <li> <p>
            <code>audio/*</code> (defaults to mpeg)</p> </li> <li> <p>
            <code>text/plain; charset=utf-8</code> </p> </li> </ul> </li> </ul>
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - dialogAction
              properties:
                sessionAttributes:
                  description: Map of key/value pairs representing the session-specific
                    context information. It contains application information
                    passed between Amazon Lex and a client application.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                dialogAction:
                  description: Describes the next action that the bot should take in its
                    interaction with the user and provides information about the
                    context in which the action takes place. Use the
                    <code>DialogAction</code> data type to set the interaction
                    to a specific state, or to return the interaction to a
                    previous state.
                  type: object
                  properties:
                    type:
                      $ref: "#/components/schemas/DialogActionType"
                    intentName:
                      $ref: "#/components/schemas/IntentName"
                    slots:
                      $ref: "#/components/schemas/StringMap"
                    slotToElicit:
                      $ref: "#/components/schemas/String"
                    fulfillmentState:
                      $ref: "#/components/schemas/FulfillmentState"
                    message:
                      $ref: "#/components/schemas/Text"
                    messageFormat:
                      $ref: "#/components/schemas/MessageFormatType"
        required: true
  "/bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type":
    post:
      operationId: PostContent
      description: '<p> Sends user input (text or speech) to Amazon Lex. Clients use this
        API to send text and audio requests to Amazon Lex at runtime. Amazon Lex
        interprets the user input using the machine learning model that it built
        for the bot. </p> <p>The <code>PostContent</code> operation supports
        audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher
        speech recognition accuracy in telephone audio applications. </p> <p> In
        response, Amazon Lex returns the next message to convey to the user.
        Consider the following example messages: </p> <ul> <li> <p> For a user
        input "I would like a pizza," Amazon Lex might return a response with a
        message eliciting slot data (for example, <code>PizzaSize</code>): "What
        size pizza would you like?". </p> </li> <li> <p> After the user provides
        all of the pizza order information, Amazon Lex might return a response
        with a message to get user confirmation: "Order the pizza?". </p> </li>
        <li> <p> After the user replies "Yes" to the confirmation prompt, Amazon
        Lex might return a conclusion statement: "Thank you, your cheese pizza
        has been ordered.". </p> </li> </ul> <p> Not all Amazon Lex messages
        require a response from the user. For example, conclusion statements do
        not require a response. Some messages require only a yes or no response.
        In addition to the <code>message</code>, Amazon Lex provides additional
        context about the message in the response that you can use to enhance
        client behavior, such as displaying the appropriate client user
        interface. Consider the following examples: </p> <ul> <li> <p> If the
        message is to elicit slot data, Amazon Lex returns the following context
        information: </p> <ul> <li> <p> <code>x-amz-lex-dialog-state</code>
        header set to <code>ElicitSlot</code> </p> </li> <li> <p>
        <code>x-amz-lex-intent-name</code> header set to the intent name in the
        current context </p> </li> <li> <p>
        <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for
        which the <code>message</code> is eliciting information </p> </li> <li>
        <p> <code>x-amz-lex-slots</code> header set to a map of slots configured
        for the intent with their current values </p> </li> </ul> </li> <li> <p>
        If the message is a confirmation prompt, the
        <code>x-amz-lex-dialog-state</code> header is set to
        <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>
        header is omitted. </p> </li> <li> <p> If the message is a clarification
        prompt configured for the intent, indicating that the user intent is not
        understood, the <code>x-amz-dialog-state</code> header is set to
        <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code>
        header is omitted. </p> </li> </ul> <p> In addition, Amazon Lex also
        returns your application-specific <code>sessionAttributes</code>. For
        more information, see <a
        href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
        Conversation Context</a>. </p>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostContentResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "485":
          description: UnsupportedMediaTypeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedMediaTypeException"
        "486":
          description: NotAcceptableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAcceptableException"
        "487":
          description: RequestTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestTimeoutException"
        "488":
          description: DependencyFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DependencyFailedException"
        "489":
          description: BadGatewayException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayException"
        "490":
          description: LoopDetectedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoopDetectedException"
      parameters:
        - name: botName
          in: path
          required: true
          description: Name of the Amazon Lex bot.
          schema:
            type: string
        - name: botAlias
          in: path
          required: true
          description: Alias of the Amazon Lex bot.
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: <p>The ID of the client application user. Amazon Lex uses this to
            identify a user's conversation with your bot. At runtime, each
            request must contain the <code>userID</code> field.</p> <p>To decide
            the user ID to use for your application, consider the following
            factors.</p> <ul> <li> <p>The <code>userID</code> field must not
            contain any personally identifiable information of the user, for
            example, name, personal identification numbers, or other end user
            personal information.</p> </li> <li> <p>If you want a user to start
            a conversation on one device and continue on another device, use a
            user-specific identifier.</p> </li> <li> <p>If you want the same
            user to be able to have two independent conversations on two
            different devices, choose a device-specific identifier.</p> </li>
            <li> <p>A user can't have two independent conversations with two
            different versions of the same bot. For example, a user can't have a
            conversation with the PROD and BETA versions of the same bot. If you
            anticipate that a user will need to have conversation with two
            different versions, for example, while testing, include the bot
            alias in the user ID to separate the two conversations.</p> </li>
            </ul>
          schema:
            type: string
            minLength: 2
            maxLength: 100
            pattern: "[0-9a-zA-Z._:-]+"
        - name: x-amz-lex-session-attributes
          in: header
          required: false
          description: <p>You pass this value as the
            <code>x-amz-lex-session-attributes</code> HTTP header.</p>
            <p>Application-specific information passed between Amazon Lex and a
            client application. The value must be a JSON serialized and base64
            encoded map with string keys and values. The total size of the
            <code>sessionAttributes</code> and <code>requestAttributes</code>
            headers is limited to 12 KB.</p> <p>For more information, see <a
            href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting
            Session Attributes</a>.</p>
          schema:
            type: string
            format: password
        - name: x-amz-lex-request-attributes
          in: header
          required: false
          description: <p>You pass this value as the
            <code>x-amz-lex-request-attributes</code> HTTP header.</p>
            <p>Request-specific information passed between Amazon Lex and a
            client application. The value must be a JSON serialized and base64
            encoded map with string keys and values. The total size of the
            <code>requestAttributes</code> and <code>sessionAttributes</code>
            headers is limited to 12 KB.</p> <p>The namespace
            <code>x-amz-lex:</code> is reserved for special attributes. Don't
            create any request attributes with the prefix
            <code>x-amz-lex:</code>.</p> <p>For more information, see <a
            href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting
            Request Attributes</a>.</p>
          schema:
            type: string
            format: password
        - name: Content-Type
          in: header
          required: true
          description: "<p> You pass this value as the <code>Content-Type</code> HTTP
            header. </p> <p> Indicates the audio format or text. The header
            value must start with one of the following prefixes: </p> <ul> <li>
            <p>PCM format, audio data must be in little-endian byte order.</p>
            <ul> <li> <p>audio/l16; rate=16000; channels=1</p> </li> <li>
            <p>audio/x-l16; sample-rate=16000; channel-count=1</p> </li> <li>
            <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;
            channel-count=1; is-big-endian=false </p> </li> </ul> </li> <li>
            <p>Opus format</p> <ul> <li> <p>audio/x-cbr-opus-with-preamble;
            preamble-size=0; bit-rate=256000; frame-size-milliseconds=4</p>
            </li> </ul> </li> <li> <p>Text format</p> <ul> <li> <p>text/plain;
            charset=utf-8</p> </li> </ul> </li> </ul>"
          schema:
            type: string
        - name: Accept
          in: header
          required: false
          description: <p> You pass this value as the <code>Accept</code> HTTP header. </p>
            <p> The message Amazon Lex returns in the response can be either
            text or speech based on the <code>Accept</code> HTTP header value in
            the request. </p> <ul> <li> <p> If the value is <code>text/plain;
            charset=utf-8</code>, Amazon Lex returns text in the response. </p>
            </li> <li> <p> If the value begins with <code>audio/</code>, Amazon
            Lex returns speech in the response. Amazon Lex uses Amazon Polly to
            generate the speech (using the configuration you specified in the
            <code>Accept</code> header). For example, if you specify
            <code>audio/mpeg</code> as the value, Amazon Lex returns speech in
            the MPEG format.</p> </li> <li> <p>If the value is
            <code>audio/pcm</code>, the speech returned is
            <code>audio/pcm</code> in 16-bit, little endian format. </p> </li>
            <li> <p>The following are the accepted values:</p> <ul> <li>
            <p>audio/mpeg</p> </li> <li> <p>audio/ogg</p> </li> <li>
            <p>audio/pcm</p> </li> <li> <p>text/plain; charset=utf-8</p> </li>
            <li> <p>audio/* (defaults to mpeg)</p> </li> </ul> </li> </ul>
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - inputStream
              properties:
                inputStream:
                  description: <p> User input in PCM or Opus audio format or text format as
                    described in the <code>Content-Type</code> HTTP header. </p>
                    <p>You can stream audio data to Amazon Lex or you can create
                    a local buffer that captures all of the audio data before
                    sending. In general, you get better performance if you
                    stream audio data rather than buffering the data
                    locally.</p>
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/bot/{botName}/alias/{botAlias}/user/{userId}/text":
    post:
      operationId: PostText
      description: '<p>Sends user input (text or SSML) to Amazon Lex. Client applications
        can use this API to send requests to Amazon Lex at runtime. Amazon Lex
        then interprets the user input using the machine learning model it built
        for the bot. </p> <p> In response, Amazon Lex returns the next
        <code>message</code> to convey to the user an optional
        <code>responseCard</code> to display. Consider the following example
        messages: </p> <ul> <li> <p> For a user input "I would like a pizza",
        Amazon Lex might return a response with a message eliciting slot data
        (for example, PizzaSize): "What size pizza would you like?" </p> </li>
        <li> <p> After the user provides all of the pizza order information,
        Amazon Lex might return a response with a message to obtain user
        confirmation "Proceed with the pizza order?". </p> </li> <li> <p> After
        the user replies to a confirmation prompt with a "yes", Amazon Lex might
        return a conclusion statement: "Thank you, your cheese pizza has been
        ordered.". </p> </li> </ul> <p> Not all Amazon Lex messages require a
        user response. For example, a conclusion statement does not require a
        response. Some messages require only a "yes" or "no" user response. In
        addition to the <code>message</code>, Amazon Lex provides additional
        context about the message in the response that you might use to enhance
        client behavior, for example, to display the appropriate client user
        interface. These are the <code>slotToElicit</code>,
        <code>dialogState</code>, <code>intentName</code>, and
        <code>slots</code> fields in the response. Consider the following
        examples: </p> <ul> <li> <p>If the message is to elicit slot data,
        Amazon Lex returns the following context information:</p> <ul> <li> <p>
        <code>dialogState</code> set to ElicitSlot </p> </li> <li> <p>
        <code>intentName</code> set to the intent name in the current context
        </p> </li> <li> <p> <code>slotToElicit</code> set to the slot name for
        which the <code>message</code> is eliciting information </p> </li> <li>
        <p> <code>slots</code> set to a map of slots, configured for the intent,
        with currently known values </p> </li> </ul> </li> <li> <p> If the
        message is a confirmation prompt, the <code>dialogState</code> is set to
        ConfirmIntent and <code>SlotToElicit</code> is set to null. </p> </li>
        <li> <p>If the message is a clarification prompt (configured for the
        intent) that indicates that user intent is not understood, the
        <code>dialogState</code> is set to ElicitIntent and
        <code>slotToElicit</code> is set to null. </p> </li> </ul> <p> In
        addition, Amazon Lex also returns your application-specific
        <code>sessionAttributes</code>. For more information, see <a
        href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
        Conversation Context</a>. </p>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostTextResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "485":
          description: DependencyFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DependencyFailedException"
        "486":
          description: BadGatewayException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadGatewayException"
        "487":
          description: LoopDetectedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoopDetectedException"
      parameters:
        - name: botName
          in: path
          required: true
          description: The name of the Amazon Lex bot.
          schema:
            type: string
        - name: botAlias
          in: path
          required: true
          description: The alias of the Amazon Lex bot.
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: <p>The ID of the client application user. Amazon Lex uses this to
            identify a user's conversation with your bot. At runtime, each
            request must contain the <code>userID</code> field.</p> <p>To decide
            the user ID to use for your application, consider the following
            factors.</p> <ul> <li> <p>The <code>userID</code> field must not
            contain any personally identifiable information of the user, for
            example, name, personal identification numbers, or other end user
            personal information.</p> </li> <li> <p>If you want a user to start
            a conversation on one device and continue on another device, use a
            user-specific identifier.</p> </li> <li> <p>If you want the same
            user to be able to have two independent conversations on two
            different devices, choose a device-specific identifier.</p> </li>
            <li> <p>A user can't have two independent conversations with two
            different versions of the same bot. For example, a user can't have a
            conversation with the PROD and BETA versions of the same bot. If you
            anticipate that a user will need to have conversation with two
            different versions, for example, while testing, include the bot
            alias in the user ID to separate the two conversations.</p> </li>
            </ul>
          schema:
            type: string
            minLength: 2
            maxLength: 100
            pattern: "[0-9a-zA-Z._:-]+"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - inputText
              properties:
                sessionAttributes:
                  description: <p>Application-specific information passed between Amazon
                    Lex and a client application.</p> <p>For more information,
                    see <a
                    href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting
                    Session Attributes</a>.</p>
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                requestAttributes:
                  description: <p>Request-specific information passed between Amazon Lex
                    and a client application.</p> <p>The namespace
                    <code>x-amz-lex:</code> is reserved for special attributes.
                    Don't create any request attributes with the prefix
                    <code>x-amz-lex:</code>.</p> <p>For more information, see <a
                    href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting
                    Request Attributes</a>.</p>
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/String"
                inputText:
                  description: The text that the user entered (Amazon Lex interprets this
                    text).
                  type: string
                  minLength: 1
                  maxLength: 1024
                  format: password
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://runtime.lex.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Lex Runtime Service multi-region endpoint
  - url: https://runtime.lex.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Lex Runtime Service multi-region endpoint
  - url: http://runtime.lex.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China
      (Ningxia)
  - url: https://runtime.lex.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China
      (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    DeleteSessionResponse:
      type: object
      properties:
        botName:
          $ref: "#/components/schemas/BotName"
        botAlias:
          $ref: "#/components/schemas/BotAlias"
        userId:
          $ref: "#/components/schemas/UserId"
        sessionId:
          $ref: "#/components/schemas/String"
    NotFoundException: {}
    BadRequestException: {}
    LimitExceededException: {}
    InternalFailureException: {}
    ConflictException: {}
    GetSessionResponse:
      type: object
      properties:
        recentIntentSummaryView:
          $ref: "#/components/schemas/IntentSummaryList"
        sessionAttributes:
          $ref: "#/components/schemas/StringMap"
        sessionId:
          $ref: "#/components/schemas/String"
        dialogAction:
          $ref: "#/components/schemas/DialogAction"
    PostContentResponse:
      type: object
      properties:
        audioStream:
          $ref: "#/components/schemas/BlobStream"
    UnsupportedMediaTypeException: {}
    NotAcceptableException: {}
    RequestTimeoutException: {}
    DependencyFailedException: {}
    BadGatewayException: {}
    LoopDetectedException: {}
    PostTextResponse:
      type: object
      properties:
        intentName:
          $ref: "#/components/schemas/IntentName"
        slots:
          $ref: "#/components/schemas/StringMap"
        sessionAttributes:
          $ref: "#/components/schemas/StringMap"
        message:
          $ref: "#/components/schemas/Text"
        messageFormat:
          $ref: "#/components/schemas/MessageFormatType"
        dialogState:
          $ref: "#/components/schemas/DialogState"
        slotToElicit:
          $ref: "#/components/schemas/String"
        responseCard:
          $ref: "#/components/schemas/ResponseCard"
    String:
      type: string
    PutSessionResponse:
      type: object
      properties:
        audioStream:
          $ref: "#/components/schemas/BlobStream"
    DialogActionType:
      type: string
      enum:
        - ElicitIntent
        - ConfirmIntent
        - ElicitSlot
        - Close
        - Delegate
    IntentName:
      type: string
    StringMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    FulfillmentState:
      type: string
      enum:
        - Fulfilled
        - Failed
        - ReadyForFulfillment
    Text:
      type: string
      minLength: 1
      maxLength: 1024
      format: password
    MessageFormatType:
      type: string
      enum:
        - PlainText
        - CustomPayload
        - SSML
        - Composite
    Accept:
      type: string
    AttributesString:
      type: string
      format: password
    BlobStream:
      type: string
    BotAlias:
      type: string
    BotName:
      type: string
    ButtonTextStringWithLength:
      type: string
      minLength: 1
      maxLength: 15
    ButtonValueStringWithLength:
      type: string
      minLength: 1
      maxLength: 1000
    Button:
      type: object
      required:
        - text
        - value
      properties:
        text:
          $ref: "#/components/schemas/ButtonTextStringWithLength"
        value:
          $ref: "#/components/schemas/ButtonValueStringWithLength"
      description: Represents an option to be shown on the client platform (Facebook,
        Slack, etc.)
    ConfirmationStatus:
      type: string
      enum:
        - None
        - Confirmed
        - Denied
    ContentType:
      type: string
      enum:
        - application/vnd.amazonaws.card.generic
    UserId:
      type: string
      pattern: "[0-9a-zA-Z._:-]+"
      minLength: 2
      maxLength: 100
    DeleteSessionRequest:
      type: object
      properties: {}
    DialogAction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/DialogActionType"
        intentName:
          $ref: "#/components/schemas/IntentName"
        slots:
          $ref: "#/components/schemas/StringMap"
        slotToElicit:
          $ref: "#/components/schemas/String"
        fulfillmentState:
          $ref: "#/components/schemas/FulfillmentState"
        message:
          $ref: "#/components/schemas/Text"
        messageFormat:
          $ref: "#/components/schemas/MessageFormatType"
      description: Describes the next action that the bot should take in its interaction
        with the user and provides information about the context in which the
        action takes place. Use the <code>DialogAction</code> data type to set
        the interaction to a specific state, or to return the interaction to a
        previous state.
    DialogState:
      type: string
      enum:
        - ElicitIntent
        - ConfirmIntent
        - ElicitSlot
        - Fulfilled
        - ReadyForFulfillment
        - Failed
    StringWithLength:
      type: string
      minLength: 1
      maxLength: 80
    StringUrlWithLength:
      type: string
      minLength: 1
      maxLength: 2048
    listOfButtons:
      type: array
      items:
        $ref: "#/components/schemas/Button"
      minItems: 0
      maxItems: 5
    GenericAttachment:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/StringWithLength"
        subTitle:
          $ref: "#/components/schemas/StringWithLength"
        attachmentLinkUrl:
          $ref: "#/components/schemas/StringUrlWithLength"
        imageUrl:
          $ref: "#/components/schemas/StringUrlWithLength"
        buttons:
          $ref: "#/components/schemas/listOfButtons"
      description: "Represents an option rendered to the user when a prompt is shown. It
        could be an image, a button, a link, or text. "
    GetSessionRequest:
      type: object
      properties: {}
    IntentSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/IntentSummary"
      minItems: 0
      maxItems: 3
    HttpContentType:
      type: string
    IntentSummary:
      type: object
      required:
        - dialogActionType
      properties:
        intentName:
          $ref: "#/components/schemas/IntentName"
        slots:
          $ref: "#/components/schemas/StringMap"
        confirmationStatus:
          $ref: "#/components/schemas/ConfirmationStatus"
        dialogActionType:
          $ref: "#/components/schemas/DialogActionType"
        fulfillmentState:
          $ref: "#/components/schemas/FulfillmentState"
        slotToElicit:
          $ref: "#/components/schemas/String"
      description: Provides information about the state of an intent. You can use this
        information to get the current state of an intent so that you can
        process the intent, or so that you can return the intent to its previous
        state.
    PostContentRequest:
      type: object
      required:
        - inputStream
      properties:
        inputStream:
          $ref: "#/components/schemas/BlobStream"
    PostTextRequest:
      type: object
      required:
        - inputText
      properties:
        sessionAttributes:
          $ref: "#/components/schemas/StringMap"
        requestAttributes:
          $ref: "#/components/schemas/StringMap"
        inputText:
          $ref: "#/components/schemas/Text"
    ResponseCard:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/String"
        contentType:
          $ref: "#/components/schemas/ContentType"
        genericAttachments:
          $ref: "#/components/schemas/genericAttachmentList"
      description: If you configure a response card when creating your bots, Amazon Lex
        substitutes the session attributes and slot values that are available,
        and then returns it. The response card can also come from a Lambda
        function ( <code>dialogCodeHook</code> and
        <code>fulfillmentActivity</code> on an intent).
    PutSessionRequest:
      type: object
      properties:
        sessionAttributes:
          $ref: "#/components/schemas/StringMap"
        dialogAction:
          $ref: "#/components/schemas/DialogAction"
    genericAttachmentList:
      type: array
      items:
        $ref: "#/components/schemas/GenericAttachment"
      minItems: 0
      maxItems: 10
