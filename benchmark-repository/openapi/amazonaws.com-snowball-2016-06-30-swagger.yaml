openapi: 3.0.0
info:
  version: 2016-06-30
  x-release: v4
  title: Amazon Import/Export Snowball
  description: AWS Snowball is a petabyte-scale data transport solution that uses secure
    devices to transfer large amounts of data between your on-premises data
    centers and Amazon Simple Storage Service (Amazon S3). The commands
    described here provide access to the same functionality that is available in
    the AWS Snowball Management Console, which enables you to create and manage
    jobs for Snowball and Snowball Edge devices. To transfer data locally with a
    device, you'll need to use the Snowball client or the Amazon S3 API adapter
    for Snowball.
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: snowball
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/snowball-2016-06-30.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/snowball/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AWSIESnowballJobManagementService.CancelCluster:
    post:
      operationId: CancelCluster
      description: Cancels a cluster job. You can only cancel a cluster job while it's in
        the <code>AwaitingQuorum</code> status. You'll have at least an hour
        after creating a cluster job to cancel it.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelClusterResult"
        "480":
          description: KMSRequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSRequestFailedException"
        "481":
          description: InvalidJobStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidJobStateException"
        "482":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.CancelCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelClusterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.CancelJob:
    post:
      operationId: CancelJob
      description: Cancels the specified job. You can only cancel a job before its
        <code>JobState</code> value changes to <code>PreparingAppliance</code>.
        Requesting the <code>ListJobs</code> or <code>DescribeJob</code> action
        returns a job's <code>JobState</code> as part of the response element
        data returned.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelJobResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidJobStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidJobStateException"
        "482":
          description: KMSRequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSRequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.CancelJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.CreateAddress:
    post:
      operationId: CreateAddress
      description: Creates an address for a Snowball to be shipped to. In most regions,
        addresses are validated at the time of creation. The address you provide
        must be located within the serviceable area of your region. If the
        address is invalid or unsupported, then an exception is thrown.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAddressResult"
        "480":
          description: InvalidAddressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidAddressException"
        "481":
          description: UnsupportedAddressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedAddressException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.CreateAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAddressRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.CreateCluster:
    post:
      operationId: CreateCluster
      description: Creates an empty cluster. Each cluster supports five nodes. You use the
        <a>CreateJob</a> action separately to create the jobs for each of these
        nodes. The cluster does not ship until these five node jobs have been
        created.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateClusterResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: KMSRequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSRequestFailedException"
        "482":
          description: InvalidInputCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputCombinationException"
        "483":
          description: Ec2RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ec2RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.CreateCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClusterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.CreateJob:
    post:
      operationId: CreateJob
      description: "Creates a job to import or export data between Amazon S3 and your
        on-premises data center. Your AWS account must have the right trust
        policies and permissions in place to create a job for Snowball. If
        you're creating a job for a node in a cluster, you only need to provide
        the <code>clusterId</code> value; the other job attributes are inherited
        from the cluster. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateJobResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: KMSRequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSRequestFailedException"
        "482":
          description: InvalidInputCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputCombinationException"
        "483":
          description: ClusterLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterLimitExceededException"
        "484":
          description: Ec2RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ec2RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.CreateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddress:
    post:
      operationId: DescribeAddress
      description: Takes an <code>AddressId</code> and returns specific details about that
        address in the form of an <code>Address</code> object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAddressResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.DescribeAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeAddressRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddresses:
    post:
      operationId: DescribeAddresses
      description: Returns a specified number of <code>ADDRESS</code> objects. Calling this
        API in one of the US regions will return addresses from the list of all
        addresses associated with this account in all US regions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeAddressesResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.DescribeAddresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeAddressesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeCluster:
    post:
      operationId: DescribeCluster
      description: Returns information about a specific cluster including shipping
        information, cluster status, and other important metadata.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeClusterResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.DescribeCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeClusterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeJob:
    post:
      operationId: DescribeJob
      description: "Returns information about a specific job including shipping
        information, job status, and other important metadata. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeJobResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.DescribeJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.GetJobManifest:
    post:
      operationId: GetJobManifest
      description: <p>Returns a link to an Amazon S3 presigned URL for the manifest file
        associated with the specified <code>JobId</code> value. You can access
        the manifest file for up to 60 minutes after this request has been made.
        To access the manifest file after 60 minutes have passed, you'll have to
        make another call to the <code>GetJobManifest</code> action.</p> <p>The
        manifest is an encrypted file that you can download after your job
        enters the <code>WithCustomer</code> status. The manifest is decrypted
        by using the <code>UnlockCode</code> code value, when you pass both
        values to the Snowball through the Snowball client when the client is
        started for the first time.</p> <p>As a best practice, we recommend that
        you don't save a copy of an <code>UnlockCode</code> value in the same
        location as the manifest file for that job. Saving these separately
        helps prevent unauthorized parties from gaining access to the Snowball
        associated with that job.</p> <p>The credentials of a given job,
        including its manifest file and unlock code, expire 90 days after the
        job is created.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobManifestResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidJobStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidJobStateException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.GetJobManifest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobManifestRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.GetJobUnlockCode:
    post:
      operationId: GetJobUnlockCode
      description: <p>Returns the <code>UnlockCode</code> code value for the specified job.
        A particular <code>UnlockCode</code> value can be accessed for up to 90
        days after the associated job has been created.</p> <p>The
        <code>UnlockCode</code> value is a 29-character code with 25
        alphanumeric characters and 4 hyphens. This code is used to decrypt the
        manifest file when it is passed along with the manifest to the Snowball
        through the Snowball client when the client is started for the first
        time.</p> <p>As a best practice, we recommend that you don't save a copy
        of the <code>UnlockCode</code> in the same location as the manifest file
        for that job. Saving these separately helps prevent unauthorized parties
        from gaining access to the Snowball associated with that job.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobUnlockCodeResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidJobStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidJobStateException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.GetJobUnlockCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobUnlockCodeRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.GetSnowballUsage:
    post:
      operationId: GetSnowballUsage
      description: <p>Returns information about the Snowball service limit for your
        account, and also the number of Snowballs your account has in use.</p>
        <p>The default service limit for the number of Snowballs that you can
        have at one time is 1. If you want to increase your service limit,
        contact AWS Support.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSnowballUsageResult"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.GetSnowballUsage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSnowballUsageRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.ListClusterJobs:
    post:
      operationId: ListClusterJobs
      description: Returns an array of <code>JobListEntry</code> objects of the specified
        length. Each <code>JobListEntry</code> object is for a job in the
        specified cluster and contains a job's state, a job's ID, and other
        information.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListClusterJobsResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.ListClusterJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListClusterJobsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.ListClusters:
    post:
      operationId: ListClusters
      description: Returns an array of <code>ClusterListEntry</code> objects of the
        specified length. Each <code>ClusterListEntry</code> object contains a
        cluster's state, a cluster's ID, and other important status information.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListClustersResult"
        "480":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.ListClusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListClustersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.ListCompatibleImages:
    post:
      operationId: ListCompatibleImages
      description: This action returns a list of the different Amazon EC2 Amazon Machine
        Images (AMIs) that are owned by your AWS account that would be supported
        for use on <code>EDGE</code>, <code>EDGE_C</code>, and
        <code>EDGE_CG</code> devices. For more information on compatible AMIs,
        see <a
        href="http://docs.aws.amazon.com/snowball/latest/developer-guide/using-ec2.html">Using
        Amazon EC2 Compute Instances</a> in the <i>AWS Snowball Developer
        Guide</i>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCompatibleImagesResult"
        "480":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "481":
          description: Ec2RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ec2RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.ListCompatibleImages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCompatibleImagesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.ListJobs:
    post:
      operationId: ListJobs
      description: Returns an array of <code>JobListEntry</code> objects of the specified
        length. Each <code>JobListEntry</code> object contains a job's state, a
        job's ID, and a value that indicates whether the job is a job part, in
        the case of export jobs. Calling this API action in one of the US
        regions will return jobs from the list of all jobs associated with this
        account in all US regions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJobsResult"
        "480":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.ListJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListJobsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.UpdateCluster:
    post:
      operationId: UpdateCluster
      description: While a cluster's <code>ClusterState</code> value is in the
        <code>AwaitingQuorum</code> state, you can update some of the
        information associated with a cluster. Once the cluster changes to a
        different job state, usually 60 minutes after the cluster being created,
        this action is no longer available.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateClusterResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidJobStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidJobStateException"
        "482":
          description: KMSRequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSRequestFailedException"
        "483":
          description: InvalidInputCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputCombinationException"
        "484":
          description: Ec2RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ec2RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.UpdateCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClusterRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJob:
    post:
      operationId: UpdateJob
      description: While a job's <code>JobState</code> value is <code>New</code>, you can
        update some of the information associated with a job. Once the job
        changes to a different job state, usually within 60 minutes of the job
        being created, this action is no longer available.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateJobResult"
        "480":
          description: InvalidResourceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidResourceException"
        "481":
          description: InvalidJobStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidJobStateException"
        "482":
          description: KMSRequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSRequestFailedException"
        "483":
          description: InvalidInputCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputCombinationException"
        "484":
          description: ClusterLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterLimitExceededException"
        "485":
          description: Ec2RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ec2RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIESnowballJobManagementService.UpdateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://snowball.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Snowball multi-region endpoint
  - url: https://snowball.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Snowball multi-region endpoint
  - url: http://snowball.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Snowball endpoint for China (Beijing) and China (Ningxia)
  - url: https://snowball.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Snowball endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CancelClusterResult:
      type: object
      properties: {}
    CancelClusterRequest:
      type: object
      required:
        - ClusterId
      properties:
        ClusterId:
          $ref: "#/components/schemas/ClusterId"
    KMSRequestFailedException: {}
    InvalidJobStateException: {}
    InvalidResourceException: {}
    CancelJobResult:
      type: object
      properties: {}
    CancelJobRequest:
      type: object
      required:
        - JobId
      properties:
        JobId:
          $ref: "#/components/schemas/JobId"
    CreateAddressResult:
      type: object
      example:
        AddressId: ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b
      properties:
        AddressId:
          $ref: "#/components/schemas/String"
    CreateAddressRequest:
      type: object
      required:
        - Address
      properties:
        Address:
          $ref: "#/components/schemas/Address"
    InvalidAddressException: {}
    UnsupportedAddressException: {}
    CreateClusterResult:
      type: object
      example:
        ClusterId: CID123e4567-e89b-12d3-a456-426655440000
      properties:
        ClusterId:
          $ref: "#/components/schemas/ClusterId"
    CreateClusterRequest:
      type: object
      required:
        - JobType
        - Resources
        - AddressId
        - RoleARN
        - ShippingOption
      properties:
        JobType:
          $ref: "#/components/schemas/JobType"
        Resources:
          $ref: "#/components/schemas/JobResource"
        Description:
          $ref: "#/components/schemas/String"
        AddressId:
          $ref: "#/components/schemas/AddressId"
        KmsKeyARN:
          $ref: "#/components/schemas/KmsKeyARN"
        RoleARN:
          $ref: "#/components/schemas/RoleARN"
        SnowballType:
          $ref: "#/components/schemas/SnowballType"
        ShippingOption:
          $ref: "#/components/schemas/ShippingOption"
        Notification:
          $ref: "#/components/schemas/Notification"
        ForwardingAddressId:
          $ref: "#/components/schemas/AddressId"
    InvalidInputCombinationException: {}
    Ec2RequestFailedException: {}
    CreateJobResult:
      type: object
      example:
        JobId: JID123e4567-e89b-12d3-a456-426655440000
      properties:
        JobId:
          $ref: "#/components/schemas/JobId"
    CreateJobRequest:
      type: object
      properties:
        JobType:
          $ref: "#/components/schemas/JobType"
        Resources:
          $ref: "#/components/schemas/JobResource"
        Description:
          $ref: "#/components/schemas/String"
        AddressId:
          $ref: "#/components/schemas/AddressId"
        KmsKeyARN:
          $ref: "#/components/schemas/KmsKeyARN"
        RoleARN:
          $ref: "#/components/schemas/RoleARN"
        SnowballCapacityPreference:
          $ref: "#/components/schemas/SnowballCapacity"
        ShippingOption:
          $ref: "#/components/schemas/ShippingOption"
        Notification:
          $ref: "#/components/schemas/Notification"
        ClusterId:
          $ref: "#/components/schemas/ClusterId"
        SnowballType:
          $ref: "#/components/schemas/SnowballType"
        ForwardingAddressId:
          $ref: "#/components/schemas/AddressId"
    ClusterLimitExceededException: {}
    DescribeAddressResult:
      type: object
      example:
        Address:
          AddressId: ADID5643ec50-3eec-4eb3-9be6-9374c10eb51b
          City: Seattle
          Company: My Company
          Country: US
          Name: My Name
          PhoneNumber: 425-555-5555
          PostalCode: "98101"
          StateOrProvince: WA
          Street1: 123 Main Street
      properties:
        Address:
          $ref: "#/components/schemas/Address"
    DescribeAddressRequest:
      type: object
      required:
        - AddressId
      properties:
        AddressId:
          $ref: "#/components/schemas/AddressId"
    DescribeAddressesResult:
      type: object
      example:
        Addresses:
          - AddressId: ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b
            City: Seattle
            Company: My Company
            Country: US
            Name: My Name
            PhoneNumber: 425-555-5555
            PostalCode: "98101"
            StateOrProvince: WA
            Street1: 123 Main Street
      properties:
        Addresses:
          $ref: "#/components/schemas/AddressList"
        NextToken:
          $ref: "#/components/schemas/String"
    DescribeAddressesRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/ListLimit"
        NextToken:
          $ref: "#/components/schemas/String"
    InvalidNextTokenException: {}
    DescribeClusterResult:
      type: object
      example:
        ClusterMetadata:
          AddressId: ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b
          ClusterId: CID123e4567-e89b-12d3-a456-426655440000
          ClusterState: Pending
          CreationDate: "1480475517.0"
          Description: MyCluster
          JobType: LOCAL_USE
          KmsKeyARN: arn:aws:kms:us-east-1:123456789012:key/abcd1234-12ab-34cd-56ef-123456123456
          Notification:
            JobStatesToNotify: []
            NotifyAll: false
          Resources:
            S3Resources:
              - BucketArn: arn:aws:s3:::MyBucket
                KeyRange: {}
          RoleARN: arn:aws:iam::123456789012:role/snowball-import-S3-role
          ShippingOption: SECOND_DAY
      properties:
        ClusterMetadata:
          $ref: "#/components/schemas/ClusterMetadata"
    DescribeClusterRequest:
      type: object
      required:
        - ClusterId
      properties:
        ClusterId:
          $ref: "#/components/schemas/ClusterId"
    DescribeJobResult:
      type: object
      example:
        JobMetadata:
          AddressId: ADID1234ab12-3eec-4eb3-9be6-9374c10eb51b
          CreationDate: "1475626164"
          Description: My Job
          JobId: JID123e4567-e89b-12d3-a456-426655440000
          JobState: New
          JobType: IMPORT
          KmsKeyARN: arn:aws:kms:us-east-1:123456789012:key/abcd1234-12ab-34cd-56ef-123456123456
          Notification:
            JobStatesToNotify: []
            NotifyAll: false
          Resources:
            S3Resources:
              - BucketArn: arn:aws:s3:::MyBucket
                KeyRange: {}
          RoleARN: arn:aws:iam::123456789012:role/snowball-import-S3-role
          ShippingDetails:
            ShippingOption: SECOND_DAY
          SnowballCapacityPreference: T80
          SnowballType: STANDARD
      properties:
        JobMetadata:
          $ref: "#/components/schemas/JobMetadata"
        SubJobMetadata:
          $ref: "#/components/schemas/JobMetadataList"
    DescribeJobRequest:
      type: object
      required:
        - JobId
      properties:
        JobId:
          $ref: "#/components/schemas/JobId"
    GetJobManifestResult:
      type: object
      example:
        ManifestURI: https://awsie-frosty-manifests-prod.s3.amazonaws.com/JID123e4567-e89b-12d3-a456-426655440000_manifest.bin?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20161224T005115Z&X-Amz-SignedHeaders=...
      properties:
        ManifestURI:
          $ref: "#/components/schemas/String"
    GetJobManifestRequest:
      type: object
      required:
        - JobId
      properties:
        JobId:
          $ref: "#/components/schemas/JobId"
    GetJobUnlockCodeResult:
      type: object
      example:
        UnlockCode: 12345-abcde-56789-fghij-01234
      properties:
        UnlockCode:
          $ref: "#/components/schemas/String"
    GetJobUnlockCodeRequest:
      type: object
      required:
        - JobId
      properties:
        JobId:
          $ref: "#/components/schemas/JobId"
    GetSnowballUsageResult:
      type: object
      example:
        SnowballLimit: 1
        SnowballsInUse: 0
      properties:
        SnowballLimit:
          $ref: "#/components/schemas/Integer"
        SnowballsInUse:
          $ref: "#/components/schemas/Integer"
    GetSnowballUsageRequest:
      type: object
      properties: {}
    ListClusterJobsResult:
      type: object
      example:
        JobListEntries:
          - CreationDate: "1480475524.0"
            Description: MyClustrer-node-001
            IsMaster: false
            JobId: JID123e4567-e89b-12d3-a456-426655440000
            JobState: New
            JobType: LOCAL_USE
            SnowballType: EDGE
          - CreationDate: "1480475525.0"
            Description: MyClustrer-node-002
            IsMaster: false
            JobId: JID123e4567-e89b-12d3-a456-426655440001
            JobState: New
            JobType: LOCAL_USE
            SnowballType: EDGE
          - CreationDate: "1480475525.0"
            Description: MyClustrer-node-003
            IsMaster: false
            JobId: JID123e4567-e89b-12d3-a456-426655440002
            JobState: New
            JobType: LOCAL_USE
            SnowballType: EDGE
          - CreationDate: "1480475525.0"
            Description: MyClustrer-node-004
            IsMaster: false
            JobId: JID123e4567-e89b-12d3-a456-426655440003
            JobState: New
            JobType: LOCAL_USE
            SnowballType: EDGE
          - CreationDate: "1480475525.0"
            Description: MyClustrer-node-005
            IsMaster: false
            JobId: JID123e4567-e89b-12d3-a456-426655440004
            JobState: New
            JobType: LOCAL_USE
            SnowballType: EDGE
      properties:
        JobListEntries:
          $ref: "#/components/schemas/JobListEntryList"
        NextToken:
          $ref: "#/components/schemas/String"
    ListClusterJobsRequest:
      type: object
      required:
        - ClusterId
      properties:
        ClusterId:
          $ref: "#/components/schemas/ClusterId"
        MaxResults:
          $ref: "#/components/schemas/ListLimit"
        NextToken:
          $ref: "#/components/schemas/String"
    ListClustersResult:
      type: object
      example:
        ClusterListEntries:
          - ClusterId: CID123e4567-e89b-12d3-a456-426655440000
            ClusterState: Pending
            CreationDate: "1480475517.0"
            Description: MyCluster
      properties:
        ClusterListEntries:
          $ref: "#/components/schemas/ClusterListEntryList"
        NextToken:
          $ref: "#/components/schemas/String"
    ListClustersRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/ListLimit"
        NextToken:
          $ref: "#/components/schemas/String"
    ListCompatibleImagesResult:
      type: object
      properties:
        CompatibleImages:
          $ref: "#/components/schemas/CompatibleImageList"
        NextToken:
          $ref: "#/components/schemas/String"
    ListCompatibleImagesRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/ListLimit"
        NextToken:
          $ref: "#/components/schemas/String"
    ListJobsResult:
      type: object
      example:
        JobListEntries:
          - CreationDate: "1460678186.0"
            Description: MyJob
            IsMaster: false
            JobId: JID123e4567-e89b-12d3-a456-426655440000
            JobState: New
            JobType: IMPORT
            SnowballType: STANDARD
      properties:
        JobListEntries:
          $ref: "#/components/schemas/JobListEntryList"
        NextToken:
          $ref: "#/components/schemas/String"
    ListJobsRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/ListLimit"
        NextToken:
          $ref: "#/components/schemas/String"
    UpdateClusterResult:
      type: object
      properties: {}
    UpdateClusterRequest:
      type: object
      required:
        - ClusterId
      properties:
        ClusterId:
          $ref: "#/components/schemas/ClusterId"
        RoleARN:
          $ref: "#/components/schemas/RoleARN"
        Description:
          $ref: "#/components/schemas/String"
        Resources:
          $ref: "#/components/schemas/JobResource"
        AddressId:
          $ref: "#/components/schemas/AddressId"
        ShippingOption:
          $ref: "#/components/schemas/ShippingOption"
        Notification:
          $ref: "#/components/schemas/Notification"
        ForwardingAddressId:
          $ref: "#/components/schemas/AddressId"
    UpdateJobResult:
      type: object
      properties: {}
    UpdateJobRequest:
      type: object
      required:
        - JobId
      properties:
        JobId:
          $ref: "#/components/schemas/JobId"
        RoleARN:
          $ref: "#/components/schemas/RoleARN"
        Notification:
          $ref: "#/components/schemas/Notification"
        Resources:
          $ref: "#/components/schemas/JobResource"
        AddressId:
          $ref: "#/components/schemas/AddressId"
        ShippingOption:
          $ref: "#/components/schemas/ShippingOption"
        Description:
          $ref: "#/components/schemas/String"
        SnowballCapacityPreference:
          $ref: "#/components/schemas/SnowballCapacity"
        ForwardingAddressId:
          $ref: "#/components/schemas/AddressId"
    AddressId:
      type: string
      pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
      minLength: 40
      maxLength: 40
    String:
      type: string
      minLength: 1
    Boolean:
      type: boolean
    Address:
      type: object
      properties:
        AddressId:
          $ref: "#/components/schemas/AddressId"
        Name:
          $ref: "#/components/schemas/String"
        Company:
          $ref: "#/components/schemas/String"
        Street1:
          $ref: "#/components/schemas/String"
        Street2:
          $ref: "#/components/schemas/String"
        Street3:
          $ref: "#/components/schemas/String"
        City:
          $ref: "#/components/schemas/String"
        StateOrProvince:
          $ref: "#/components/schemas/String"
        PrefectureOrDistrict:
          $ref: "#/components/schemas/String"
        Landmark:
          $ref: "#/components/schemas/String"
        Country:
          $ref: "#/components/schemas/String"
        PostalCode:
          $ref: "#/components/schemas/String"
        PhoneNumber:
          $ref: "#/components/schemas/String"
        IsRestricted:
          $ref: "#/components/schemas/Boolean"
      description: The address that you want the Snowball or Snowballs associated with a
        specific job to be shipped to. Addresses are validated at the time of
        creation. The address you provide must be located within the serviceable
        area of your region. Although no individual elements of the
        <code>Address</code> are required, if the address is invalid or
        unsupported, then an exception is thrown.
    AddressList:
      type: array
      items:
        $ref: "#/components/schemas/Address"
    AmiId:
      type: string
      pattern: (ami-[0-9a-f]{8})|(ami-[0-9a-f]{17})
      minLength: 12
      maxLength: 21
    ClusterId:
      type: string
      pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
      minLength: 39
      maxLength: 39
    JobId:
      type: string
      pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
      minLength: 39
      maxLength: 39
    ClusterState:
      type: string
      enum:
        - AwaitingQuorum
        - Pending
        - InUse
        - Complete
        - Cancelled
    Timestamp:
      type: string
      format: date-time
    ClusterListEntry:
      type: object
      properties:
        ClusterId:
          $ref: "#/components/schemas/String"
        ClusterState:
          $ref: "#/components/schemas/ClusterState"
        CreationDate:
          $ref: "#/components/schemas/Timestamp"
        Description:
          $ref: "#/components/schemas/String"
      description: Contains a cluster's state, a cluster's ID, and other important
        information.
    ClusterListEntryList:
      type: array
      items:
        $ref: "#/components/schemas/ClusterListEntry"
    KmsKeyARN:
      type: string
      pattern: arn:aws.*:kms:.*:[0-9]{12}:key/.*
      maxLength: 255
    RoleARN:
      type: string
      pattern: arn:aws.*:iam::[0-9]{12}:role/.*
      maxLength: 255
    JobType:
      type: string
      enum:
        - IMPORT
        - EXPORT
        - LOCAL_USE
    SnowballType:
      type: string
      enum:
        - STANDARD
        - EDGE
        - EDGE_C
        - EDGE_CG
    JobResource:
      type: object
      properties:
        S3Resources:
          $ref: "#/components/schemas/S3ResourceList"
        LambdaResources:
          $ref: "#/components/schemas/LambdaResourceList"
        Ec2AmiResources:
          $ref: "#/components/schemas/Ec2AmiResourceList"
      description: Contains an array of AWS resource objects. Each object represents an
        Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image
        (AMI) based on Amazon EC2 that is associated with a particular job.
    ShippingOption:
      type: string
      enum:
        - SECOND_DAY
        - NEXT_DAY
        - EXPRESS
        - STANDARD
    Notification:
      type: object
      properties:
        SnsTopicARN:
          $ref: "#/components/schemas/SnsTopicARN"
        JobStatesToNotify:
          $ref: "#/components/schemas/JobStateList"
        NotifyAll:
          $ref: "#/components/schemas/Boolean"
      description: <p>The Amazon Simple Notification Service (Amazon SNS) notification
        settings associated with a specific job. The <code>Notification</code>
        object is returned as a part of the response syntax of the
        <code>DescribeJob</code> action in the <code>JobMetadata</code> data
        type.</p> <p>When the notification settings are defined during job
        creation, you can choose to notify based on a specific set of job states
        using the <code>JobStatesToNotify</code> array of strings, or you can
        specify that you want to have Amazon SNS notifications sent out for all
        job states with <code>NotifyAll</code> set to true.</p>
    ClusterMetadata:
      type: object
      properties:
        ClusterId:
          $ref: "#/components/schemas/String"
        Description:
          $ref: "#/components/schemas/String"
        KmsKeyARN:
          $ref: "#/components/schemas/KmsKeyARN"
        RoleARN:
          $ref: "#/components/schemas/RoleARN"
        ClusterState:
          $ref: "#/components/schemas/ClusterState"
        JobType:
          $ref: "#/components/schemas/JobType"
        SnowballType:
          $ref: "#/components/schemas/SnowballType"
        CreationDate:
          $ref: "#/components/schemas/Timestamp"
        Resources:
          $ref: "#/components/schemas/JobResource"
        AddressId:
          $ref: "#/components/schemas/AddressId"
        ShippingOption:
          $ref: "#/components/schemas/ShippingOption"
        Notification:
          $ref: "#/components/schemas/Notification"
        ForwardingAddressId:
          $ref: "#/components/schemas/AddressId"
      description: Contains metadata about a specific cluster.
    CompatibleImage:
      type: object
      properties:
        AmiId:
          $ref: "#/components/schemas/String"
        Name:
          $ref: "#/components/schemas/String"
      description: A JSON-formatted object that describes a compatible Amazon Machine Image
        (AMI). For more information on compatible AMIs, see <a
        href="http://docs.aws.amazon.com/snowball/latest/developer-guide/using-ec2.html">Using
        Amazon EC2 Compute Instances</a> in the <i>AWS Snowball Developer
        Guide</i>.
    CompatibleImageList:
      type: array
      items:
        $ref: "#/components/schemas/CompatibleImage"
    SnowballCapacity:
      type: string
      enum:
        - T50
        - T80
        - T100
        - T42
        - NoPreference
    Long:
      type: integer
    DataTransfer:
      type: object
      properties:
        BytesTransferred:
          $ref: "#/components/schemas/Long"
        ObjectsTransferred:
          $ref: "#/components/schemas/Long"
        TotalBytes:
          $ref: "#/components/schemas/Long"
        TotalObjects:
          $ref: "#/components/schemas/Long"
      description: Defines the real-time status of a Snowball's data transfer while the
        device is at AWS. This data is only available while a job has a
        <code>JobState</code> value of <code>InProgress</code>, for both import
        and export jobs.
    ListLimit:
      type: integer
      minimum: 0
      maximum: 100
    JobMetadata:
      type: object
      properties:
        JobId:
          $ref: "#/components/schemas/String"
        JobState:
          $ref: "#/components/schemas/JobState"
        JobType:
          $ref: "#/components/schemas/JobType"
        SnowballType:
          $ref: "#/components/schemas/SnowballType"
        CreationDate:
          $ref: "#/components/schemas/Timestamp"
        Resources:
          $ref: "#/components/schemas/JobResource"
        Description:
          $ref: "#/components/schemas/String"
        KmsKeyARN:
          $ref: "#/components/schemas/KmsKeyARN"
        RoleARN:
          $ref: "#/components/schemas/RoleARN"
        AddressId:
          $ref: "#/components/schemas/AddressId"
        ShippingDetails:
          $ref: "#/components/schemas/ShippingDetails"
        SnowballCapacityPreference:
          $ref: "#/components/schemas/SnowballCapacity"
        Notification:
          $ref: "#/components/schemas/Notification"
        DataTransferProgress:
          $ref: "#/components/schemas/DataTransfer"
        JobLogInfo:
          $ref: "#/components/schemas/JobLogs"
        ClusterId:
          $ref: "#/components/schemas/String"
        ForwardingAddressId:
          $ref: "#/components/schemas/AddressId"
      description: Contains information about a specific job including shipping
        information, job status, and other important metadata. This information
        is returned as a part of the response syntax of the
        <code>DescribeJob</code> action.
    JobMetadataList:
      type: array
      items:
        $ref: "#/components/schemas/JobMetadata"
    Ec2AmiResource:
      type: object
      required:
        - AmiId
      properties:
        AmiId:
          $ref: "#/components/schemas/AmiId"
        SnowballAmiId:
          $ref: "#/components/schemas/String"
      description: A JSON-formatted object that contains the IDs for an Amazon Machine
        Image (AMI), including the Amazon EC2 AMI ID and the Snowball Edge AMI
        ID. Each AMI has these two IDs to simplify identifying the AMI in both
        the AWS Cloud and on the device.
    Ec2AmiResourceList:
      type: array
      items:
        $ref: "#/components/schemas/Ec2AmiResource"
    ResourceARN:
      type: string
      maxLength: 255
    EventTriggerDefinition:
      type: object
      properties:
        EventResourceARN:
          $ref: "#/components/schemas/ResourceARN"
      description: The container for the <a>EventTriggerDefinition$EventResourceARN</a>.
    EventTriggerDefinitionList:
      type: array
      items:
        $ref: "#/components/schemas/EventTriggerDefinition"
    Integer:
      type: integer
    JobState:
      type: string
      enum:
        - New
        - PreparingAppliance
        - PreparingShipment
        - InTransitToCustomer
        - WithCustomer
        - InTransitToAWS
        - WithAWSSortingFacility
        - WithAWS
        - InProgress
        - Complete
        - Cancelled
        - Listing
        - Pending
    JobListEntry:
      type: object
      properties:
        JobId:
          $ref: "#/components/schemas/String"
        JobState:
          $ref: "#/components/schemas/JobState"
        IsMaster:
          $ref: "#/components/schemas/Boolean"
        JobType:
          $ref: "#/components/schemas/JobType"
        SnowballType:
          $ref: "#/components/schemas/SnowballType"
        CreationDate:
          $ref: "#/components/schemas/Timestamp"
        Description:
          $ref: "#/components/schemas/String"
      description: Each <code>JobListEntry</code> object contains a job's state, a job's
        ID, and a value that indicates whether the job is a job part, in the
        case of an export job.
    JobListEntryList:
      type: array
      items:
        $ref: "#/components/schemas/JobListEntry"
    JobLogs:
      type: object
      properties:
        JobCompletionReportURI:
          $ref: "#/components/schemas/String"
        JobSuccessLogURI:
          $ref: "#/components/schemas/String"
        JobFailureLogURI:
          $ref: "#/components/schemas/String"
      description: "<p>Contains job logs. Whenever Snowball is used to import data into or
        export data out of Amazon S3, you'll have the option of downloading a
        PDF job report. Job logs are returned as a part of the response syntax
        of the <code>DescribeJob</code> action in the <code>JobMetadata</code>
        data type. The job logs can be accessed for up to 60 minutes after this
        request has been made. To access any of the job logs after 60 minutes
        have passed, you'll have to make another call to the
        <code>DescribeJob</code> action.</p> <p>For import jobs, the PDF job
        report becomes available at the end of the import process. For export
        jobs, your job report typically becomes available while the Snowball for
        your job part is being delivered to you.</p> <p>The job report provides
        you insight into the state of your Amazon S3 data transfer. The report
        includes details about your job or job part for your records.</p> <p>For
        deeper visibility into the status of your transferred objects, you can
        look at the two associated logs: a success log and a failure log. The
        logs are saved in comma-separated value (CSV) format, and the name of
        each log includes the ID of the job or job part that the log
        describes.</p>"
    ShippingDetails:
      type: object
      properties:
        ShippingOption:
          $ref: "#/components/schemas/ShippingOption"
        InboundShipment:
          $ref: "#/components/schemas/Shipment"
        OutboundShipment:
          $ref: "#/components/schemas/Shipment"
      description: A job's shipping information, including inbound and outbound tracking
        numbers and shipping speed options.
    S3ResourceList:
      type: array
      items:
        $ref: "#/components/schemas/S3Resource"
    LambdaResourceList:
      type: array
      items:
        $ref: "#/components/schemas/LambdaResource"
    JobStateList:
      type: array
      items:
        $ref: "#/components/schemas/JobState"
    KeyRange:
      type: object
      properties:
        BeginMarker:
          $ref: "#/components/schemas/String"
        EndMarker:
          $ref: "#/components/schemas/String"
      description: Contains a key range. For export jobs, a <code>S3Resource</code> object
        can have an optional <code>KeyRange</code> value. The length of the
        range is defined at job creation, and has either an inclusive
        <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both.
        Ranges are UTF-8 binary sorted.
    LambdaResource:
      type: object
      properties:
        LambdaArn:
          $ref: "#/components/schemas/ResourceARN"
        EventTriggers:
          $ref: "#/components/schemas/EventTriggerDefinitionList"
      description: "Identifies "
    SnsTopicARN:
      type: string
      pattern: arn:aws.*:sns:.*:[0-9]{12}:.*
      maxLength: 255
    S3Resource:
      type: object
      properties:
        BucketArn:
          $ref: "#/components/schemas/ResourceARN"
        KeyRange:
          $ref: "#/components/schemas/KeyRange"
      description: Each <code>S3Resource</code> object represents an Amazon S3 bucket that
        your transferred data will be exported from or imported into. For export
        jobs, this object can have an optional <code>KeyRange</code> value. The
        length of the range is defined at job creation, and has either an
        inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>,
        or both. Ranges are UTF-8 binary sorted.
    Shipment:
      type: object
      properties:
        Status:
          $ref: "#/components/schemas/String"
        TrackingNumber:
          $ref: "#/components/schemas/String"
      description: The <code>Status</code> and <code>TrackingNumber</code> information for
        an inbound or outbound shipment.
