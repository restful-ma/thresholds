openapi: 3.0.0
info:
  version: 2018-11-05
  x-release: v4
  title: AWS Transfer for SFTP
  description: "AWS Transfer for SFTP is a fully managed service that enables the transfer
    of files directly into and out of Amazon S3 using the Secure File Transfer
    Protocol (SFTP)—also known as Secure Shell (SSH) File Transfer Protocol. AWS
    helps you seamlessly migrate your file transfer workflows to AWS Transfer
    for SFTP—by integrating with existing authentication systems, and providing
    DNS routing with Amazon Route 53—so nothing changes for your customers and
    partners, or their applications. With your data in S3, you can use it with
    AWS services for processing, analytics, machine learning, and archiving.
    Getting started with AWS Transfer for SFTP (AWS SFTP) is easy; there is no
    infrastructure to buy and set up. "
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: transfer
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/transfer-2018-11-05.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/transfer/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=TransferService.CreateServer:
    post:
      operationId: CreateServer
      description: Instantiates an autoscaling virtual server based on Secure File Transfer
        Protocol (SFTP) in AWS. When you make updates to your server or when you
        work with users, use the service-generated <code>ServerId</code>
        property that is assigned to the newly created server.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateServerResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceExistsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.CreateServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.CreateUser:
    post:
      operationId: CreateUser
      description: Creates a user and associates them with an existing Secure File Transfer
        Protocol (SFTP) server. You can only create and associate users with
        SFTP servers that have the <code>IdentityProviderType</code> set to
        <code>SERVICE_MANAGED</code>. Using parameters for
        <code>CreateUser</code>, you can specify the user name, set the home
        directory, store the user's public key, and assign the user's AWS
        Identity and Access Management (IAM) role. You can also optionally add a
        scope-down policy, and assign metadata with tags that can be used to
        group and search for users.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceExistsException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.DeleteServer:
    post:
      operationId: DeleteServer
      description: <p>Deletes the Secure File Transfer Protocol (SFTP) server that you
        specify.</p> <p>No response returns from this operation.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.DeleteServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.DeleteSshPublicKey:
    post:
      operationId: DeleteSshPublicKey
      description: <p>Deletes a user's Secure Shell (SSH) public key.</p> <p>No response is
        returned from this operation.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.DeleteSshPublicKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSshPublicKeyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.DeleteUser:
    post:
      operationId: DeleteUser
      description: <p>Deletes the user belonging to the server you specify.</p> <p>No
        response returns from this operation.</p> <note> <p>When you delete a
        user from a server, the user's information is lost.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.DeleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.DescribeServer:
    post:
      operationId: DescribeServer
      description: <p>Describes the server that you specify by passing the
        <code>ServerId</code> parameter.</p> <p>The response contains a
        description of the server's properties.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeServerResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.DescribeServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.DescribeUser:
    post:
      operationId: DescribeUser
      description: <p>Describes the user assigned to a specific server, as identified by
        its <code>ServerId</code> property.</p> <p>The response from this call
        returns the properties of the user associated with the
        <code>ServerId</code> value that was specified.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeUserResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.DescribeUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.ImportSshPublicKey:
    post:
      operationId: ImportSshPublicKey
      description: <p>Adds a Secure Shell (SSH) public key to a user account identified by
        a <code>UserName</code> value assigned to a specific server, identified
        by <code>ServerId</code>.</p> <p>The response returns the
        <code>UserName</code> value, the <code>ServerId</code> value, and the
        name of the <code>SshPublicKeyId</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportSshPublicKeyResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceExistsException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.ImportSshPublicKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportSshPublicKeyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.ListServers:
    post:
      operationId: ListServers
      description: Lists the Secure File Transfer Protocol (SFTP) servers that are
        associated with your AWS account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListServersResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.ListServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListServersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: Lists all of the tags associated with the Amazon Resource Number (ARN)
        you specify. The resource can be a user, server, or role.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.ListUsers:
    post:
      operationId: ListUsers
      description: Lists the users for the server that you specify by passing the
        <code>ServerId</code> parameter.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.ListUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUsersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.StartServer:
    post:
      operationId: StartServer
      description: <p>Changes the state of a Secure File Transfer Protocol (SFTP) server
        from <code>OFFLINE</code> to <code>ONLINE</code>. It has no impact on an
        SFTP server that is already <code>ONLINE</code>. An <code>ONLINE</code>
        server can accept and process file transfer jobs.</p> <p>The state of
        <code>STARTING</code> indicates that the server is in an intermediate
        state, either not fully able to respond, or not fully online. The values
        of <code>START_FAILED</code> can indicate an error condition. </p> <p>No
        response is returned from this call.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.StartServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.StopServer:
    post:
      operationId: StopServer
      description: <p>Changes the state of an SFTP server from <code>ONLINE</code> to
        <code>OFFLINE</code>. An <code>OFFLINE</code> server cannot accept and
        process file transfer jobs. Information tied to your server such as
        server and user properties are not affected by stopping your server.
        Stopping a server will not reduce or impact your Secure File Transfer
        Protocol (SFTP) endpoint billing.</p> <p>The state of
        <code>STOPPING</code> indicates that the server is in an intermediate
        state, either not fully able to respond, or not fully offline. The
        values of <code>STOP_FAILED</code> can indicate an error condition.</p>
        <p>No response is returned from this call.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.StopServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.TagResource:
    post:
      operationId: TagResource
      description: <p>Attaches a key-value pair to a resource, as identified by its Amazon
        Resource Name (ARN). Resources are users, servers, roles, and other
        entities.</p> <p>There is no response returned from this call.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.TestIdentityProvider:
    post:
      operationId: TestIdentityProvider
      description: If the <code>IdentityProviderType</code> of the server is
        <code>API_Gateway</code>, tests whether your API Gateway is set up
        successfully. We highly recommend that you call this operation to test
        your authentication method as soon as you create your server. By doing
        so, you can troubleshoot issues with the API Gateway integration to
        ensure that your users can successfully use the service.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestIdentityProviderResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.TestIdentityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestIdentityProviderRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.UntagResource:
    post:
      operationId: UntagResource
      description: <p>Detaches a key-value pair from a resource, as identified by its
        Amazon Resource Name (ARN). Resources are users, servers, roles, and
        other entities.</p> <p>No response is returned from this call.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.UpdateServer:
    post:
      operationId: UpdateServer
      description: <p>Updates the server properties after that server has been created.</p>
        <p>The <code>UpdateServer</code> call returns the <code>ServerId</code>
        of the Secure File Transfer Protocol (SFTP) server you updated.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateServerResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.UpdateServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=TransferService.UpdateUser:
    post:
      operationId: UpdateUser
      description: "<p>Assigns new properties to a user. Parameters you pass modify any or
        all of the following: the home directory, role, and policy for the
        <code>UserName</code> and <code>ServerId</code> you specify.</p> <p>The
        response returns the <code>ServerId</code> and the <code>UserName</code>
        for the updated user.</p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "480":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "481":
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceError"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - TransferService.UpdateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://transfer.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Transfer multi-region endpoint
  - url: https://transfer.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Transfer multi-region endpoint
  - url: http://transfer.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Transfer endpoint for China (Beijing) and China (Ningxia)
  - url: https://transfer.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Transfer endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateServerResponse:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
    CreateServerRequest:
      type: object
      properties:
        EndpointDetails:
          $ref: "#/components/schemas/EndpointDetails"
        EndpointType:
          $ref: "#/components/schemas/EndpointType"
        HostKey:
          $ref: "#/components/schemas/HostKey"
        IdentityProviderDetails:
          $ref: "#/components/schemas/IdentityProviderDetails"
        IdentityProviderType:
          $ref: "#/components/schemas/IdentityProviderType"
        LoggingRole:
          $ref: "#/components/schemas/Role"
        Tags:
          $ref: "#/components/schemas/Tags"
    ServiceUnavailableException: {}
    InternalServiceError: {}
    InvalidRequestException: {}
    ResourceExistsException: {}
    CreateUserResponse:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        UserName:
          $ref: "#/components/schemas/UserName"
    CreateUserRequest:
      type: object
      required:
        - Role
        - ServerId
        - UserName
      properties:
        HomeDirectory:
          $ref: "#/components/schemas/HomeDirectory"
        Policy:
          $ref: "#/components/schemas/Policy"
        Role:
          $ref: "#/components/schemas/Role"
        ServerId:
          $ref: "#/components/schemas/ServerId"
        SshPublicKeyBody:
          $ref: "#/components/schemas/SshPublicKeyBody"
        Tags:
          $ref: "#/components/schemas/Tags"
        UserName:
          $ref: "#/components/schemas/UserName"
    ResourceNotFoundException: {}
    DeleteServerRequest:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
    DeleteSshPublicKeyRequest:
      type: object
      required:
        - ServerId
        - SshPublicKeyId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        SshPublicKeyId:
          $ref: "#/components/schemas/SshPublicKeyId"
        UserName:
          $ref: "#/components/schemas/UserName"
    DeleteUserRequest:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        UserName:
          $ref: "#/components/schemas/UserName"
    DescribeServerResponse:
      type: object
      required:
        - Server
      properties:
        Server:
          $ref: "#/components/schemas/DescribedServer"
    DescribeServerRequest:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
    DescribeUserResponse:
      type: object
      required:
        - ServerId
        - User
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        User:
          $ref: "#/components/schemas/DescribedUser"
    DescribeUserRequest:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        UserName:
          $ref: "#/components/schemas/UserName"
    ImportSshPublicKeyResponse:
      type: object
      required:
        - ServerId
        - SshPublicKeyId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        SshPublicKeyId:
          $ref: "#/components/schemas/SshPublicKeyId"
        UserName:
          $ref: "#/components/schemas/UserName"
      description: This response identifies the user, the server they belong to, and the
        identifier of the SSH public key associated with that user. A user can
        have more than one key on each server that they are associated with.
    ImportSshPublicKeyRequest:
      type: object
      required:
        - ServerId
        - SshPublicKeyBody
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        SshPublicKeyBody:
          $ref: "#/components/schemas/SshPublicKeyBody"
        UserName:
          $ref: "#/components/schemas/UserName"
    ListServersResponse:
      type: object
      required:
        - Servers
      properties:
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Servers:
          $ref: "#/components/schemas/ListedServers"
    ListServersRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/MaxResults"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    InvalidNextTokenException: {}
    ListTagsForResourceResponse:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Tags:
          $ref: "#/components/schemas/Tags"
    ListTagsForResourceRequest:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        MaxResults:
          $ref: "#/components/schemas/MaxResults"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListUsersResponse:
      type: object
      required:
        - ServerId
        - Users
      properties:
        NextToken:
          $ref: "#/components/schemas/NextToken"
        ServerId:
          $ref: "#/components/schemas/ServerId"
        Users:
          $ref: "#/components/schemas/ListedUsers"
    ListUsersRequest:
      type: object
      required:
        - ServerId
      properties:
        MaxResults:
          $ref: "#/components/schemas/MaxResults"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        ServerId:
          $ref: "#/components/schemas/ServerId"
    StartServerRequest:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
    StopServerRequest:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
    TagResourceRequest:
      type: object
      required:
        - Arn
        - Tags
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        Tags:
          $ref: "#/components/schemas/Tags"
    TestIdentityProviderResponse:
      type: object
      required:
        - StatusCode
        - Url
      properties:
        Response:
          $ref: "#/components/schemas/Response"
        StatusCode:
          $ref: "#/components/schemas/StatusCode"
        Message:
          $ref: "#/components/schemas/Message"
        Url:
          $ref: "#/components/schemas/Url"
    TestIdentityProviderRequest:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        UserName:
          $ref: "#/components/schemas/UserName"
        UserPassword:
          $ref: "#/components/schemas/UserPassword"
    UntagResourceRequest:
      type: object
      required:
        - Arn
        - TagKeys
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        TagKeys:
          $ref: "#/components/schemas/TagKeys"
    UpdateServerResponse:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
    UpdateServerRequest:
      type: object
      required:
        - ServerId
      properties:
        EndpointDetails:
          $ref: "#/components/schemas/EndpointDetails"
        EndpointType:
          $ref: "#/components/schemas/EndpointType"
        HostKey:
          $ref: "#/components/schemas/HostKey"
        IdentityProviderDetails:
          $ref: "#/components/schemas/IdentityProviderDetails"
        LoggingRole:
          $ref: "#/components/schemas/NullableRole"
        ServerId:
          $ref: "#/components/schemas/ServerId"
    UpdateUserResponse:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: "#/components/schemas/ServerId"
        UserName:
          $ref: "#/components/schemas/UserName"
      description: " <code>UpdateUserResponse</code> returns the user name and server
        identifier for the request to update a user's properties."
    UpdateUserRequest:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        HomeDirectory:
          $ref: "#/components/schemas/HomeDirectory"
        Policy:
          $ref: "#/components/schemas/Policy"
        Role:
          $ref: "#/components/schemas/Role"
        ServerId:
          $ref: "#/components/schemas/ServerId"
        UserName:
          $ref: "#/components/schemas/UserName"
    Arn:
      type: string
      minLength: 20
      maxLength: 1600
    EndpointDetails:
      type: object
      properties:
        VpcEndpointId:
          $ref: "#/components/schemas/VpcEndpointId"
      description: The configuration settings for the virtual private cloud (VPC) endpoint
        for your SFTP server.
    EndpointType:
      type: string
      enum:
        - PUBLIC
        - VPC_ENDPOINT
    HostKey:
      type: string
      maxLength: 4096
      format: password
    IdentityProviderDetails:
      type: object
      properties:
        Url:
          $ref: "#/components/schemas/Url"
        InvocationRole:
          $ref: "#/components/schemas/Role"
      description: Returns information related to the type of user authentication that is
        in use for a server's users. A server can have only one method of
        authentication.
    IdentityProviderType:
      type: string
      enum:
        - SERVICE_MANAGED
        - API_GATEWAY
      description: Returns information related to the type of user authentication that is
        in use for a server's users. For <code>SERVICE_MANAGED</code>
        authentication, the Secure Shell (SSH) public keys are stored with a
        user on an SFTP server instance. For <code>API_GATEWAY</code>
        authentication, your custom authentication method is implemented by
        using an API call. A server can have only one method of authentication.
    Role:
      type: string
      pattern: arn:.*role/.*
    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 1
      maxItems: 50
    ServerId:
      type: string
      pattern: ^s-([0-9a-f]{17})$
    HomeDirectory:
      type: string
      pattern: ^$|/.*
      maxLength: 1024
    Policy:
      type: string
    SshPublicKeyBody:
      type: string
      pattern: ^ssh-rsa\s+[A-Za-z0-9+/]+[=]{0,3}(\s+.+)?\s*$
      maxLength: 2048
    UserName:
      type: string
      pattern: ^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$
    DateImported:
      type: string
      format: date-time
    SshPublicKeyId:
      type: string
      pattern: ^key-[0-9a-f]{17}$
    DescribedServer:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        EndpointDetails:
          $ref: "#/components/schemas/EndpointDetails"
        EndpointType:
          $ref: "#/components/schemas/EndpointType"
        HostKeyFingerprint:
          $ref: "#/components/schemas/HostKeyFingerprint"
        IdentityProviderDetails:
          $ref: "#/components/schemas/IdentityProviderDetails"
        IdentityProviderType:
          $ref: "#/components/schemas/IdentityProviderType"
        LoggingRole:
          $ref: "#/components/schemas/Role"
        ServerId:
          $ref: "#/components/schemas/ServerId"
        State:
          $ref: "#/components/schemas/State"
        Tags:
          $ref: "#/components/schemas/Tags"
        UserCount:
          $ref: "#/components/schemas/UserCount"
      description: "Describes the properties of the server that was specified. Information
        returned includes the following: the server Amazon Resource Name (ARN),
        the authentication configuration and type, the logging role, the server
        ID and state, and assigned tags or metadata. "
    DescribedUser:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        HomeDirectory:
          $ref: "#/components/schemas/HomeDirectory"
        Policy:
          $ref: "#/components/schemas/Policy"
        Role:
          $ref: "#/components/schemas/Role"
        SshPublicKeys:
          $ref: "#/components/schemas/SshPublicKeys"
        Tags:
          $ref: "#/components/schemas/Tags"
        UserName:
          $ref: "#/components/schemas/UserName"
      description: Returns properties of the user that you want to describe.
    HostKeyFingerprint:
      type: string
    State:
      type: string
      enum:
        - OFFLINE
        - ONLINE
        - STARTING
        - STOPPING
        - START_FAILED
        - STOP_FAILED
      description: "<p>Describes the condition of the SFTP server with respect to its
        ability to perform file operations. There are six possible states:
        <code>OFFLINE</code>, <code>ONLINE</code>, <code>STARTING</code>,
        <code>STOPPING</code>, <code>START_FAILED</code>, and
        <code>STOP_FAILED</code>.</p> <p> <code>OFFLINE</code> indicates that
        the SFTP server exists, but that it is not available for file
        operations. <code>ONLINE</code> indicates that the SFTP server is
        available to perform file operations. <code>STARTING</code> indicates
        that the SFTP server's was instantiated, but the server is not yet
        available to perform file operations. Under normal conditions, it can
        take a couple of minutes for an SFTP server to be completely
        operational. Both <code>START_FAILED</code> and <code>STOP_FAILED</code>
        are error conditions.</p>"
    UserCount:
      type: integer
    SshPublicKeys:
      type: array
      items:
        $ref: "#/components/schemas/SshPublicKey"
      maxItems: 5
    VpcEndpointId:
      type: string
      pattern: ^vpce-[0-9a-f]{17}$
    Url:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    NextToken:
      type: string
      minLength: 1
      maxLength: 6144
    ListedServers:
      type: array
      items:
        $ref: "#/components/schemas/ListedServer"
    ListedUsers:
      type: array
      items:
        $ref: "#/components/schemas/ListedUser"
    ListedServer:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        IdentityProviderType:
          $ref: "#/components/schemas/IdentityProviderType"
        EndpointType:
          $ref: "#/components/schemas/EndpointType"
        LoggingRole:
          $ref: "#/components/schemas/Role"
        ServerId:
          $ref: "#/components/schemas/ServerId"
        State:
          $ref: "#/components/schemas/State"
        UserCount:
          $ref: "#/components/schemas/UserCount"
      description: Returns properties of the server that was specified.
    SshPublicKeyCount:
      type: integer
    ListedUser:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        HomeDirectory:
          $ref: "#/components/schemas/HomeDirectory"
        Role:
          $ref: "#/components/schemas/Role"
        SshPublicKeyCount:
          $ref: "#/components/schemas/SshPublicKeyCount"
        UserName:
          $ref: "#/components/schemas/UserName"
      description: Returns properties of the user that you specify.
    Message:
      type: string
    NullableRole:
      type: string
      pattern: ^$|arn:.*role/.*
    Response:
      type: string
    SshPublicKey:
      type: object
      required:
        - DateImported
        - SshPublicKeyBody
        - SshPublicKeyId
      properties:
        DateImported:
          $ref: "#/components/schemas/DateImported"
        SshPublicKeyBody:
          $ref: "#/components/schemas/SshPublicKeyBody"
        SshPublicKeyId:
          $ref: "#/components/schemas/SshPublicKeyId"
      description: Provides information about the public Secure Shell (SSH) key that is
        associated with a user account for a specific server (as identified by
        <code>ServerId</code>). The information returned includes the date the
        key was imported, the public key contents, and the public key ID. A user
        can store more than one SSH public key associated with their user name
        on a specific SFTP server.
    StatusCode:
      type: integer
    TagKey:
      type: string
    TagValue:
      type: string
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: Creates a key-value pair for a specific resource. Tags are metadata that
        you can use to search for and group a resource for various purposes. You
        can apply tags to servers, users, and roles. A tag key can take more
        than one value. For example, to group servers for accounting purposes,
        you might create a tag called <code>Group</code> and assign the values
        <code>Research</code> and <code>Accounting</code> to that group.
    TagKeys:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
      maxItems: 50
    UserPassword:
      type: string
      format: password
