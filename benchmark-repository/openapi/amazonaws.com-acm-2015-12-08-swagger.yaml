openapi: 3.0.0
info:
  version: 2015-12-08
  x-release: v4
  title: AWS Certificate Manager
  description: <fullname>AWS Certificate Manager</fullname> <p>Welcome to the AWS
    Certificate Manager (ACM) API documentation.</p> <p>You can use ACM to
    manage SSL/TLS certificates for your AWS-based websites and applications.
    For general information about using ACM, see the <a
    href="https://docs.aws.amazon.com/acm/latest/userguide/"> <i>AWS Certificate
    Manager User Guide</i> </a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: acm
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-2015-12-08.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/acm/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=CertificateManager.AddTagsToCertificate:
    post:
      operationId: AddTagsToCertificate
      description: <p>Adds one or more tags to an ACM certificate. Tags are labels that you
        can use to identify and organize your AWS resources. Each tag consists
        of a <code>key</code> and an optional <code>value</code>. You specify
        the certificate on input by its Amazon Resource Name (ARN). You specify
        the tag by using a key-value pair. </p> <p>You can apply a tag to just
        one certificate if you want to identify a specific characteristic of
        that certificate, or you can apply the same tag to multiple certificates
        if you want to filter for a common relationship among those
        certificates. Similarly, you can apply the same tag to multiple
        resources if you want to specify a relationship among those resources.
        For example, you can add the same tag to an ACM certificate and an
        Elastic Load Balancing load balancer to indicate that they are both used
        by the same website. For more information, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/tags.html">Tagging
        ACM certificates</a>. </p> <p>To remove one or more tags, use the
        <a>RemoveTagsFromCertificate</a> action. To view all of the tags that
        have been applied to the certificate, use the
        <a>ListTagsForCertificate</a> action. </p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagException"
        "483":
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTagsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.AddTagsToCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTagsToCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.DeleteCertificate:
    post:
      operationId: DeleteCertificate
      description: <p>Deletes a certificate and its associated private key. If this action
        succeeds, the certificate no longer appears in the list that can be
        displayed by calling the <a>ListCertificates</a> action or be retrieved
        by calling the <a>GetCertificate</a> action. The certificate will not be
        available for use by AWS services integrated with ACM. </p> <note>
        <p>You cannot delete an ACM certificate that is being used by another
        AWS service. To delete a certificate that is in use, the certificate
        association must first be removed.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.DeleteCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.DescribeCertificate:
    post:
      operationId: DescribeCertificate
      description: Returns detailed metadata about the specified ACM certificate.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeCertificateResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.DescribeCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.ExportCertificate:
    post:
      operationId: ExportCertificate
      description: <p>Exports a private certificate issued by a private certificate
        authority (CA) for use anywhere. You can export the certificate, the
        certificate chain, and the encrypted private key associated with the
        public key embedded in the certificate. You must store the private key
        securely. The private key is a 2048 bit RSA key. You must provide a
        passphrase for the private key when exporting it. You can use the
        following OpenSSL command to decrypt it later. Provide the passphrase
        when prompted. </p> <p> <code>openssl rsa -in encrypted_key.pem -out
        decrypted_key.pem</code> </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportCertificateResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.ExportCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.GetCertificate:
    post:
      operationId: GetCertificate
      description: Retrieves a certificate specified by an ARN and its certificate chain .
        The chain is an ordered list of certificates that contains the end
        entity certificate, intermediate certificates of subordinate CAs, and
        the root certificate in that order. The certificate and certificate
        chain are base64 encoded. If you want to decode the certificate to see
        the individual fields, you can use OpenSSL.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCertificateResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.GetCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.ImportCertificate:
    post:
      operationId: ImportCertificate
      description: <p>Imports a certificate into AWS Certificate Manager (ACM) to use with
        services that are integrated with ACM. Note that <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html">integrated
        services</a> allow only certificate types and keys they support to be
        associated with their resources. Further, their support differs
        depending on whether the certificate is imported into IAM or into ACM.
        For more information, see the documentation for each service. For more
        information about importing certificates into ACM, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing
        Certificates</a> in the <i>AWS Certificate Manager User Guide</i>. </p>
        <note> <p>ACM does not provide <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed
        renewal</a> for certificates that you import.</p> </note> <p>Note the
        following guidelines when importing third party certificates:</p> <ul>
        <li> <p>You must enter the private key that matches the certificate you
        are importing.</p> </li> <li> <p>The private key must be unencrypted.
        You cannot import a private key that is protected by a password or a
        passphrase.</p> </li> <li> <p>If the certificate you are importing is
        not self-signed, you must enter its certificate chain.</p> </li> <li>
        <p>If a certificate chain is included, the issuer must be the subject of
        one of the certificates in the chain.</p> </li> <li> <p>The certificate,
        private key, and certificate chain must be PEM-encoded.</p> </li> <li>
        <p>The current time must be between the <code>Not Before</code> and
        <code>Not After</code> certificate fields.</p> </li> <li> <p>The
        <code>Issuer</code> field must not be empty.</p> </li> <li> <p>The OCSP
        authority URL, if present, must not exceed 1000 characters.</p> </li>
        <li> <p>To import a new certificate, omit the
        <code>CertificateArn</code> argument. Include this argument only when
        you want to replace a previously imported certificate.</p> </li> <li>
        <p>When you import a certificate by using the CLI, you must specify the
        certificate, the certificate chain, and the private key by their file
        names preceded by <code>file://</code>. For example, you can specify a
        certificate saved in the <code>C:\temp</code> folder as
        <code>file://C:\temp\certificate_to_import.pem</code>. If you are making
        an HTTP or HTTPS Query request, include these arguments as BLOBs. </p>
        </li> <li> <p>When you import a certificate by using an SDK, you must
        specify the certificate, the certificate chain, and the private key
        files in the manner required by the programming language you're using.
        </p> </li> </ul> <p>This operation returns the <a
        href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
        Resource Name (ARN)</a> of the imported certificate.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportCertificateResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.ImportCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.ListCertificates:
    post:
      operationId: ListCertificates
      description: "Retrieves a list of certificate ARNs and domain names. You can request
        that only certificates that match a specific status be listed. You can
        also filter by specific attributes of the certificate. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCertificatesResponse"
        "480":
          description: InvalidArgsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgsException"
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.ListCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCertificatesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.ListTagsForCertificate:
    post:
      operationId: ListTagsForCertificate
      description: "Lists the tags that have been applied to the ACM certificate. Use the
        certificate's Amazon Resource Name (ARN) to specify the certificate. To
        add a tag to an ACM certificate, use the <a>AddTagsToCertificate</a>
        action. To delete a tag, use the <a>RemoveTagsFromCertificate</a>
        action. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForCertificateResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.ListTagsForCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.RemoveTagsFromCertificate:
    post:
      operationId: RemoveTagsFromCertificate
      description: <p>Remove one or more tags from an ACM certificate. A tag consists of a
        key-value pair. If you do not specify the value portion of the tag when
        calling this function, the tag will be removed regardless of value. If
        you specify a value, the tag is removed only if it is associated with
        the specified value. </p> <p>To add tags to a certificate, use the
        <a>AddTagsToCertificate</a> action. To view all of the tags that have
        been applied to a specific ACM certificate, use the
        <a>ListTagsForCertificate</a> action. </p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.RemoveTagsFromCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveTagsFromCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.RenewCertificate:
    post:
      operationId: RenewCertificate
      description: Renews an eligable ACM certificate. At this time, only exported private
        certificates can be renewed with this operation. In order to renew your
        ACM PCA certificates with ACM, you must first <a
        href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaPermissions.html">grant
        the ACM service principal permission to do so</a>. For more information,
        see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/manual-renewal.html">Testing
        Managed Renewal</a> in the ACM User Guide.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.RenewCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenewCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.RequestCertificate:
    post:
      operationId: RequestCertificate
      description: <p>Requests an ACM certificate for use with other AWS services. To
        request an ACM certificate, you must specify a fully qualified domain
        name (FQDN) in the <code>DomainName</code> parameter. You can also
        specify additional FQDNs in the <code>SubjectAlternativeNames</code>
        parameter. </p> <p>If you are requesting a private certificate, domain
        validation is not required. If you are requesting a public certificate,
        each domain name that you specify must be validated to verify that you
        own or control the domain. You can use <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">DNS
        validation</a> or <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html">email
        validation</a>. We recommend that you use DNS validation. ACM issues
        public certificates after receiving approval from the domain owner. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestCertificateResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InvalidDomainValidationOptionsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidDomainValidationOptionsException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.RequestCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.ResendValidationEmail:
    post:
      operationId: ResendValidationEmail
      description: 'Resends the email that requests domain ownership validation. The domain
        owner or an authorized representative must approve the ACM certificate
        before it can be issued. The certificate can be approved by clicking a
        link in the mail to navigate to the Amazon certificate approval website
        and then clicking <b>I Approve</b>. However, the validation email can be
        blocked by spam filters. Therefore, if you do not receive the original
        mail, you can request that the mail be resent within 72 hours of
        requesting the ACM certificate. If more than 72 hours have elapsed since
        your original request or since your last attempt to resend validation
        mail, you must request a new certificate. For more information about
        setting up your contact email addresses, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/setup-email.html">Configure
        Email for your Domain</a>. '
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "483":
          description: InvalidDomainValidationOptionsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidDomainValidationOptionsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.ResendValidationEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendValidationEmailRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=CertificateManager.UpdateCertificateOptions:
    post:
      operationId: UpdateCertificateOptions
      description: 'Updates a certificate. Currently, you can use this function to specify
        whether to opt in to or out of recording your certificate in a
        certificate transparency log. For more information, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency">
        Opting Out of Certificate Transparency Logging</a>. '
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "483":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - CertificateManager.UpdateCertificateOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCertificateOptionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://acm.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The ACM multi-region endpoint
  - url: https://acm.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The ACM multi-region endpoint
  - url: http://acm.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The ACM endpoint for China (Beijing) and China (Ningxia)
  - url: https://acm.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The ACM endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddTagsToCertificateRequest:
      type: object
      required:
        - CertificateArn
        - Tags
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        Tags:
          $ref: "#/components/schemas/TagList"
    ResourceNotFoundException: {}
    InvalidArnException: {}
    InvalidTagException: {}
    TooManyTagsException: {}
    DeleteCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    ResourceInUseException: {}
    DescribeCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: "#/components/schemas/CertificateDetail"
    DescribeCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    ExportCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: "#/components/schemas/CertificateBody"
        CertificateChain:
          $ref: "#/components/schemas/CertificateChain"
        PrivateKey:
          $ref: "#/components/schemas/PrivateKey"
    ExportCertificateRequest:
      type: object
      required:
        - CertificateArn
        - Passphrase
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        Passphrase:
          $ref: "#/components/schemas/PassphraseBlob"
    RequestInProgressException: {}
    GetCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: "#/components/schemas/CertificateBody"
        CertificateChain:
          $ref: "#/components/schemas/CertificateChain"
    GetCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    ImportCertificateResponse:
      type: object
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    ImportCertificateRequest:
      type: object
      required:
        - Certificate
        - PrivateKey
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        Certificate:
          $ref: "#/components/schemas/CertificateBodyBlob"
        PrivateKey:
          $ref: "#/components/schemas/PrivateKeyBlob"
        CertificateChain:
          $ref: "#/components/schemas/CertificateChainBlob"
    LimitExceededException: {}
    ListCertificatesResponse:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/NextToken"
        CertificateSummaryList:
          $ref: "#/components/schemas/CertificateSummaryList"
    ListCertificatesRequest:
      type: object
      properties:
        CertificateStatuses:
          $ref: "#/components/schemas/CertificateStatuses"
        Includes:
          $ref: "#/components/schemas/Filters"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        MaxItems:
          $ref: "#/components/schemas/MaxItems"
    InvalidArgsException: {}
    ListTagsForCertificateResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
    ListTagsForCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    RemoveTagsFromCertificateRequest:
      type: object
      required:
        - CertificateArn
        - Tags
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        Tags:
          $ref: "#/components/schemas/TagList"
    RenewCertificateRequest:
      type: object
      required:
        - CertificateArn
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    RequestCertificateResponse:
      type: object
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    RequestCertificateRequest:
      type: object
      required:
        - DomainName
      properties:
        DomainName:
          $ref: "#/components/schemas/DomainNameString"
        ValidationMethod:
          $ref: "#/components/schemas/ValidationMethod"
        SubjectAlternativeNames:
          $ref: "#/components/schemas/DomainList"
        IdempotencyToken:
          $ref: "#/components/schemas/IdempotencyToken"
        DomainValidationOptions:
          $ref: "#/components/schemas/DomainValidationOptionList"
        Options:
          $ref: "#/components/schemas/CertificateOptions"
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
    InvalidDomainValidationOptionsException: {}
    ResendValidationEmailRequest:
      type: object
      required:
        - CertificateArn
        - Domain
        - ValidationDomain
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        Domain:
          $ref: "#/components/schemas/DomainNameString"
        ValidationDomain:
          $ref: "#/components/schemas/DomainNameString"
    InvalidStateException: {}
    UpdateCertificateOptionsRequest:
      type: object
      required:
        - CertificateArn
        - Options
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        Options:
          $ref: "#/components/schemas/CertificateOptions"
    Arn:
      type: string
      pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
      minLength: 20
      maxLength: 2048
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 1
      maxItems: 50
    CertificateBody:
      type: string
      pattern: -{5}BEGIN
        CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END
        CERTIFICATE-{5}(\u000D?\u000A)?
      minLength: 1
      maxLength: 32768
    CertificateBodyBlob:
      type: string
      minLength: 1
      maxLength: 32768
    CertificateChain:
      type: string
      pattern: (-{5}BEGIN
        CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END
        CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN
        CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END
        CERTIFICATE-{5}(\u000D?\u000A)?
      minLength: 1
      maxLength: 2097152
    CertificateChainBlob:
      type: string
      minLength: 1
      maxLength: 2097152
    DomainNameString:
      type: string
      pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
      minLength: 1
      maxLength: 253
    DomainList:
      type: array
      items:
        $ref: "#/components/schemas/DomainNameString"
      minItems: 1
      maxItems: 100
    DomainValidationList:
      type: array
      items:
        $ref: "#/components/schemas/DomainValidation"
      minItems: 1
      maxItems: 1000
    String:
      type: string
    TStamp:
      type: string
      format: date-time
    CertificateStatus:
      type: string
      enum:
        - PENDING_VALIDATION
        - ISSUED
        - INACTIVE
        - EXPIRED
        - VALIDATION_TIMED_OUT
        - REVOKED
        - FAILED
    RevocationReason:
      type: string
      enum:
        - UNSPECIFIED
        - KEY_COMPROMISE
        - CA_COMPROMISE
        - AFFILIATION_CHANGED
        - SUPERCEDED
        - CESSATION_OF_OPERATION
        - CERTIFICATE_HOLD
        - REMOVE_FROM_CRL
        - PRIVILEGE_WITHDRAWN
        - A_A_COMPROMISE
    KeyAlgorithm:
      type: string
      enum:
        - RSA_2048
        - RSA_1024
        - RSA_4096
        - EC_prime256v1
        - EC_secp384r1
        - EC_secp521r1
    InUseList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    FailureReason:
      type: string
      enum:
        - NO_AVAILABLE_CONTACTS
        - ADDITIONAL_VERIFICATION_REQUIRED
        - DOMAIN_NOT_ALLOWED
        - INVALID_PUBLIC_DOMAIN
        - DOMAIN_VALIDATION_DENIED
        - CAA_ERROR
        - PCA_LIMIT_EXCEEDED
        - PCA_INVALID_ARN
        - PCA_INVALID_STATE
        - PCA_REQUEST_FAILED
        - PCA_RESOURCE_NOT_FOUND
        - PCA_INVALID_ARGS
        - PCA_INVALID_DURATION
        - PCA_ACCESS_DENIED
        - OTHER
    CertificateType:
      type: string
      enum:
        - IMPORTED
        - AMAZON_ISSUED
        - PRIVATE
    RenewalSummary:
      type: object
      required:
        - RenewalStatus
        - DomainValidationOptions
        - UpdatedAt
      properties:
        RenewalStatus:
          $ref: "#/components/schemas/RenewalStatus"
        DomainValidationOptions:
          $ref: "#/components/schemas/DomainValidationList"
        RenewalStatusReason:
          $ref: "#/components/schemas/FailureReason"
        UpdatedAt:
          $ref: "#/components/schemas/TStamp"
      description: Contains information about the status of ACM's <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed
        renewal</a> for the certificate. This structure exists only when the
        certificate type is <code>AMAZON_ISSUED</code>.
    KeyUsageList:
      type: array
      items:
        $ref: "#/components/schemas/KeyUsage"
    ExtendedKeyUsageList:
      type: array
      items:
        $ref: "#/components/schemas/ExtendedKeyUsage"
    RenewalEligibility:
      type: string
      enum:
        - ELIGIBLE
        - INELIGIBLE
    CertificateOptions:
      type: object
      properties:
        CertificateTransparencyLoggingPreference:
          $ref: "#/components/schemas/CertificateTransparencyLoggingPreference"
      description: 'Structure that contains options for your certificate. Currently, you
        can use this only to specify whether to opt in to or out of certificate
        transparency logging. Some browsers require that public certificates
        issued for your domain be recorded in a log. Certificates that are not
        logged typically generate a browser error. Transparency makes it
        possible for you to detect SSL/TLS certificates that have been
        mistakenly or maliciously issued for your domain. For general
        information, see <a
        href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate
        Transparency Logging</a>. '
    CertificateDetail:
      type: object
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        DomainName:
          $ref: "#/components/schemas/DomainNameString"
        SubjectAlternativeNames:
          $ref: "#/components/schemas/DomainList"
        DomainValidationOptions:
          $ref: "#/components/schemas/DomainValidationList"
        Serial:
          $ref: "#/components/schemas/String"
        Subject:
          $ref: "#/components/schemas/String"
        Issuer:
          $ref: "#/components/schemas/String"
        CreatedAt:
          $ref: "#/components/schemas/TStamp"
        IssuedAt:
          $ref: "#/components/schemas/TStamp"
        ImportedAt:
          $ref: "#/components/schemas/TStamp"
        Status:
          $ref: "#/components/schemas/CertificateStatus"
        RevokedAt:
          $ref: "#/components/schemas/TStamp"
        RevocationReason:
          $ref: "#/components/schemas/RevocationReason"
        NotBefore:
          $ref: "#/components/schemas/TStamp"
        NotAfter:
          $ref: "#/components/schemas/TStamp"
        KeyAlgorithm:
          $ref: "#/components/schemas/KeyAlgorithm"
        SignatureAlgorithm:
          $ref: "#/components/schemas/String"
        InUseBy:
          $ref: "#/components/schemas/InUseList"
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        Type:
          $ref: "#/components/schemas/CertificateType"
        RenewalSummary:
          $ref: "#/components/schemas/RenewalSummary"
        KeyUsages:
          $ref: "#/components/schemas/KeyUsageList"
        ExtendedKeyUsages:
          $ref: "#/components/schemas/ExtendedKeyUsageList"
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        RenewalEligibility:
          $ref: "#/components/schemas/RenewalEligibility"
        Options:
          $ref: "#/components/schemas/CertificateOptions"
      description: "Contains metadata about an ACM certificate. This structure is returned
        in the response to a <a>DescribeCertificate</a> request. "
    CertificateTransparencyLoggingPreference:
      type: string
      enum:
        - ENABLED
        - DISABLED
    CertificateStatuses:
      type: array
      items:
        $ref: "#/components/schemas/CertificateStatus"
    CertificateSummary:
      type: object
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        DomainName:
          $ref: "#/components/schemas/DomainNameString"
      description: "This structure is returned in the response object of
        <a>ListCertificates</a> action. "
    CertificateSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/CertificateSummary"
    DomainStatus:
      type: string
      enum:
        - PENDING_VALIDATION
        - SUCCESS
        - FAILED
    ValidationEmailList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    ResourceRecord:
      type: object
      required:
        - Name
        - Type
        - Value
      properties:
        Name:
          $ref: "#/components/schemas/String"
        Type:
          $ref: "#/components/schemas/RecordType"
        Value:
          $ref: "#/components/schemas/String"
      description: "Contains a DNS record value that you can use to can use to validate
        ownership or control of a domain. This is used by the
        <a>DescribeCertificate</a> action. "
    ValidationMethod:
      type: string
      enum:
        - EMAIL
        - DNS
    DomainValidation:
      type: object
      required:
        - DomainName
      properties:
        DomainName:
          $ref: "#/components/schemas/DomainNameString"
        ValidationEmails:
          $ref: "#/components/schemas/ValidationEmailList"
        ValidationDomain:
          $ref: "#/components/schemas/DomainNameString"
        ValidationStatus:
          $ref: "#/components/schemas/DomainStatus"
        ResourceRecord:
          $ref: "#/components/schemas/ResourceRecord"
        ValidationMethod:
          $ref: "#/components/schemas/ValidationMethod"
      description: Contains information about the validation of each domain name in the
        certificate.
    DomainValidationOption:
      type: object
      required:
        - DomainName
        - ValidationDomain
      properties:
        DomainName:
          $ref: "#/components/schemas/DomainNameString"
        ValidationDomain:
          $ref: "#/components/schemas/DomainNameString"
      description: Contains information about the domain names that you want ACM to use to
        send you emails that enable you to validate domain ownership.
    DomainValidationOptionList:
      type: array
      items:
        $ref: "#/components/schemas/DomainValidationOption"
      minItems: 1
      maxItems: 100
    PassphraseBlob:
      type: string
      minLength: 4
      maxLength: 128
      format: password
    PrivateKey:
      type: string
      pattern: -{5}BEGIN PRIVATE
        KEY-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END
        PRIVATE KEY-{5}(\u000D?\u000A)?
      minLength: 1
      maxLength: 524288
      format: password
    ExtendedKeyUsageName:
      type: string
      enum:
        - TLS_WEB_SERVER_AUTHENTICATION
        - TLS_WEB_CLIENT_AUTHENTICATION
        - CODE_SIGNING
        - EMAIL_PROTECTION
        - TIME_STAMPING
        - OCSP_SIGNING
        - IPSEC_END_SYSTEM
        - IPSEC_TUNNEL
        - IPSEC_USER
        - ANY
        - NONE
        - CUSTOM
    ExtendedKeyUsage:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/ExtendedKeyUsageName"
        OID:
          $ref: "#/components/schemas/String"
      description: "The Extended Key Usage X.509 v3 extension defines one or more purposes
        for which the public key can be used. This is in addition to or in place
        of the basic purposes specified by the Key Usage extension. "
    ExtendedKeyUsageFilterList:
      type: array
      items:
        $ref: "#/components/schemas/ExtendedKeyUsageName"
    KeyUsageFilterList:
      type: array
      items:
        $ref: "#/components/schemas/KeyUsageName"
    KeyAlgorithmList:
      type: array
      items:
        $ref: "#/components/schemas/KeyAlgorithm"
    Filters:
      type: object
      properties:
        extendedKeyUsage:
          $ref: "#/components/schemas/ExtendedKeyUsageFilterList"
        keyUsage:
          $ref: "#/components/schemas/KeyUsageFilterList"
        keyTypes:
          $ref: "#/components/schemas/KeyAlgorithmList"
      description: "This structure can be used in the <a>ListCertificates</a> action to
        filter the output of the certificate list. "
    IdempotencyToken:
      type: string
      pattern: \w+
      minLength: 1
      maxLength: 32
    PrivateKeyBlob:
      type: string
      minLength: 1
      maxLength: 524288
      format: password
    KeyUsageName:
      type: string
      enum:
        - DIGITAL_SIGNATURE
        - NON_REPUDIATION
        - KEY_ENCIPHERMENT
        - DATA_ENCIPHERMENT
        - KEY_AGREEMENT
        - CERTIFICATE_SIGNING
        - CRL_SIGNING
        - ENCIPHER_ONLY
        - DECIPHER_ONLY
        - ANY
        - CUSTOM
    KeyUsage:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/KeyUsageName"
      description: The Key Usage X.509 v3 extension defines the purpose of the public key
        contained in the certificate.
    NextToken:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*"
      minLength: 1
      maxLength: 320
    MaxItems:
      type: integer
      minimum: 1
      maximum: 1000
    RecordType:
      type: string
      enum:
        - CNAME
    RenewalStatus:
      type: string
      enum:
        - PENDING_AUTO_RENEWAL
        - PENDING_VALIDATION
        - SUCCESS
        - FAILED
    TagKey:
      type: string
      pattern: "[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*"
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      pattern: "[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*"
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: A key-value pair that identifies or specifies metadata about an ACM
        resource.
