openapi: 3.0.0
info:
  description: An API for face detection, verification, and identification.
  title: Face Client
  version: "1.0"
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cognitiveservices/data-plane/Face/stable/v1.0/Face.json
      version: "2.0"
  x-providerName: azure.com
  x-serviceName: cognitiveservices-Face
  x-tags:
    - Azure
    - Microsoft
security:
  - apim_key: []
paths:
  /detect:
    post:
      description: >-
        Detect human faces in an image, return face rectangles, and optionally
        with faceIds, landmarks, and attributes.<br />

        * No image will be stored. Only the extracted face feature will be stored on server. The faceId is an identifier of the face feature and will be used in [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). The stored face feature(s) will expire and be deleted 24 hours after the original detection call.

        * Optional parameters include faceId, landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes may not be highly accurate.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.

        * For optimal results when querying [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' is true), please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes).

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |

        * Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter. Once specified, the detected faceIds will be associated with the specified recognition model. More details, please refer to [How to specify a recognition model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'recognition_01': | The default recognition model for [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). All those faceIds created before 2019 March are bonded with this recognition model. |
          | 'recognition_02': | Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'. |
      operationId: Face_DetectWithUrl
      parameters:
        - description: A value indicating whether the operation should return faceIds of
            detected faces.
          in: query
          name: returnFaceId
          schema:
            type: boolean
            default: true
        - description: A value indicating whether the operation should return landmarks of
            the detected faces.
          in: query
          name: returnFaceLandmarks
          schema:
            type: boolean
            default: false
        - $ref: "#/components/parameters/returnFaceAttributes"
        - $ref: "#/components/parameters/recognitionModel"
        - $ref: "#/components/parameters/returnRecognitionModel"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithUrlImageurl"
      responses:
        "200":
          description: A successful call returns an array of face entries ranked by face
            rectangle size in descending order. An empty response indicates no
            faces detected.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetectedFaces"
              examples:
                Detect with url example:
                  $ref: "#/components/examples/Detect_with_url_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /facelists:
    get:
      description: >
        List face lists’ faceListId, name, userData and recognitionModel. <br
        /> 

        To get face information inside faceList use [FaceList - Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
      operationId: FaceList_List
      parameters:
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns an array of faceList.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceLists"
              examples:
                List Face lists example:
                  $ref: "#/components/examples/List_Face_lists_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/facelists/{faceListId}":
    delete:
      description: Delete a specified face list.
      operationId: FaceList_Delete
      parameters:
        - $ref: "#/components/parameters/faceListId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: >
        Retrieve a face list’s faceListId, name, userData, recognitionModel and
        faces in the face list.
      operationId: FaceList_Get
      parameters:
        - $ref: "#/components/parameters/faceListId"
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns the face list's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceList"
              examples:
                Get Face list example:
                  $ref: "#/components/examples/Get_Face_list_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update information of a face list.
      operationId: FaceList_Update
      parameters:
        - $ref: "#/components/parameters/faceListId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NameAndUserDataContract"
        description: Request body for updating a face list.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    put:
      description: >-
        Create an empty face list with user-specified faceListId, name, an
        optional userData and recognitionModel. Up to 64 face lists are allowed
        in one subscription.

        <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

        <br /> After creation, user should use [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) to import the faces. No image will be stored. Only the extracted face features are stored on server until [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.

        <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

        <br /> Please consider [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) when the face number is large. It can support up to 1,000,000 faces.

        <br />'recognitionModel' should be specified to associate with this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing face list will use the recognition model that's already associated with the collection. Existing face features in a face list can't be updated to features extracted by another version of recognition model.

        * 'recognition_01': The default recognition model for [FaceList- Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b). All those face lists created before 2019 March are bonded with this recognition model.

        * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
      operationId: FaceList_Create
      parameters:
        - $ref: "#/components/parameters/faceListId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataContract"
        description: Request body for creating a face list.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/facelists/{faceListId}/persistedfaces":
    post:
      description: >-
        Add a face to a specified face list, up to 1,000 faces.

        <br /> To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
      operationId: FaceList_AddFaceFromUrl
      parameters:
        - $ref: "#/components/parameters/faceListId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithUrlImageurl"
      responses:
        "200":
          description: A successful call returns a new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Create face list face example:
                  $ref: "#/components/examples/Create_face_list_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/facelists/{faceListId}/persistedfaces/{persistedFaceId}":
    delete:
      description: >-
        Delete a face from a face list by specified faceListId and
        persistedFaceId.

        <br /> Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
      operationId: FaceList_DeleteFace
      parameters:
        - $ref: "#/components/parameters/faceListId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  /findsimilars:
    post:
      description: >
        Given query face's faceId, to search the similar-looking faces from a
        faceId array, a face list or a large face list. faceId array contains
        the faces created by [Face -
        Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236),
        which will expire 24 hours after creation. A "faceListId" is created by
        [FaceList -
        Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)
        containing persistedFaceIds that will not expire. And a
        "largeFaceListId" is created by [LargeFaceList -
        Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
        containing persistedFaceIds that will also not expire. Depending on the
        input the returned similar faces list contains faceIds or
        persistedFaceIds ranked by similarity.

        <br/>Find similar has two working modes, "matchPerson" and "matchFace". "matchPerson" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty list will be returned if no faces pass the internal thresholds. "matchFace" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching celebrity-looking faces.

        <br/>The 'recognitionModel' associated with the query face's faceId should be the same as the 'recognitionModel' used by the target faceId array, face list or large face list.
      operationId: Face_FindSimilar
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindSimilarRequest"
        description: Request body for Find Similar.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an array of the most similar faces
            represented in faceId if the input parameter is faceIds or
            persistedFaceId if the input parameter is faceListId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimilarFaces"
              examples:
                Find similar results example:
                  $ref: "#/components/examples/Find_similar_results_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /group:
    post:
      description: >
        Divide candidate faces into groups based on face similarity.<br />

        * The output is one or more disjointed face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person. Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result.

        * MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found their counterparts.

        * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) when you only have 2 candidate faces.

        * The 'recognitionModel' associated with the query faces' faceIds should be the same.
      operationId: Face_Group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequest"
        description: Request body for grouping.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns one or more groups of similar faces (rank
            by group size) and a messyGroup.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupResult"
              examples:
                Group example:
                  $ref: "#/components/examples/Group_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /identify:
    post:
      description: >
        1-to-many identification to find the closest matches of the specific
        query person face from a person group or large person group.

        <br/> For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The person group/large person group should be trained to make it ready for identification. See more in [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) and [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).

        <br/>
         
        Remarks:<br />

        * The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.

        * Each person in the person group/large person group could have more than one face, but no more than 248 faces.

        * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified, the returned candidates will be an empty array.

        * Try [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) when you need to find similar faces from a face list/large face list instead of a person group/large person group.

        * The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target person group or large person group.
      operationId: Face_Identify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdentifyRequest"
        description: Request body for identify operation.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns the identified candidate person(s) for
            each query face.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentifyResults"
              examples:
                Identify example:
                  $ref: "#/components/examples/Identify_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /largefacelists:
    get:
      description: >
        List large face lists’ information of largeFaceListId, name, userData
        and recognitionModel. <br /> 

        To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br />

        * Large face lists are stored in alphabetical order of largeFaceListId.

        * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.

        * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.

        <br />

        For example, total 5 large person lists: "list1", ..., "list5".

        <br /> "start=&top=" will return all 5 lists.

        <br /> "start=&top=2" will return "list1", "list2".

        <br /> "start=list2&top=3" will return "list3", "list4", "list5".
      operationId: LargeFaceList_List
      parameters:
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns an array of largeFaceList.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeFaceLists"
              examples:
                List large face lists example:
                  $ref: "#/components/examples/List_large_face_lists_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largefacelists/{largeFaceListId}":
    delete:
      description: Delete a specified large face list.
      operationId: LargeFaceList_Delete
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve a large face list’s largeFaceListId, name, userData and
        recognitionModel.
      operationId: LargeFaceList_Get
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns the large face list's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeFaceList"
              examples:
                Get large face list example:
                  $ref: "#/components/examples/Get_large_face_list_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update information of a large face list.
      operationId: LargeFaceList_Update
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NameAndUserDataContract"
        description: Request body for updating a large face list.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    put:
      description: >-
        Create an empty large face list with user-specified largeFaceListId,
        name, an optional userData and recognitionModel.

        <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

        <br /> After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.

        <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

        <br/>'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.

        * 'recognition_01': The default recognition model for [LargeFaceList- Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). All those large face lists created before 2019 March are bonded with this recognition model.

        * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.


        Large face list quota:

        * Free-tier subscription quota: 64 large face lists.

        * S0-tier subscription quota: 1,000,000 large face lists.
      operationId: LargeFaceList_Create
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataContract"
        description: Request body for creating a large face list.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largefacelists/{largeFaceListId}/persistedfaces":
    get:
      description: List all faces in a large face list, and retrieve face information
        (including userData and persistedFaceIds of registered faces of the
        face).
      operationId: LargeFaceList_ListFaces
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - description: Starting face id to return (used to list a range of faces).
          in: query
          name: start
          required: false
          schema:
            type: string
          examples:
            List faces in large face list:
              value: 25985303-c537-4467-b41d-bdb45cd95ca1
        - description: Number of faces to return starting with the face id indicated by the
            'start' parameter.
          in: query
          name: top
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          examples:
            List faces in large face list:
              value: 2
      responses:
        "200":
          description: A successful call returns an array of face information that belong
            to the large face list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFaces"
              examples:
                List faces in large face list:
                  $ref: "#/components/examples/List_faces_in_large_face_list"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    post:
      description: >-
        Add a face to a specified large face list, up to 1,000,000 faces.

        <br /> To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [LargeFaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |

        Quota:

        * Free-tier subscription quota: 1,000 faces per large face list.

        * S0-tier subscription quota: 1,000,000 faces per large face list.
      operationId: LargeFaceList_AddFaceFromUrl
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithUrlImageurl"
      responses:
        "200":
          description: A successful call returns a new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Create large face list face example:
                  $ref: "#/components/examples/Create_large_face_list_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}":
    delete:
      description: >-
        Delete a face from a large face list by specified largeFaceListId and
        persistedFaceId.

        <br /> Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
      operationId: LargeFaceList_DeleteFace
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve information about a persisted face (specified by
        persistedFaceId and its belonging largeFaceListId).
      operationId: LargeFaceList_GetFace
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns target persisted face's information
            (persistedFaceId and userData).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Get persisted face example:
                  $ref: "#/components/examples/Get_persisted_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update a persisted face's userData field.
      operationId: LargeFaceList_UpdateFace
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - $ref: "#/components/parameters/persistedFaceId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateFaceRequest"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/largefacelists/{largeFaceListId}/train":
    post:
      description: Queue a large face list training task, the training task may not be
        started immediately.
      operationId: LargeFaceList_Train
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
      responses:
        "202":
          description: The training task was queued successfully.
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largefacelists/{largeFaceListId}/training":
    get:
      description: Retrieve the training status of a large face list (completed or ongoing).
      operationId: LargeFaceList_GetTrainingStatus
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
      responses:
        "200":
          description: A successful call returns the large face list's training status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingStatus"
              examples:
                Get large face list's training status example:
                  $ref: "#/components/examples/Get_large_face_list_s_training_statu\
                    s_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /largepersongroups:
    get:
      description: >
        List all existing large person groups’ largePersonGroupId, name,
        userData and recognitionModel.<br />

        * Large person groups are stored in alphabetical order of largePersonGroupId.

        * "start" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.

        * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.

        <br />

        For example, total 5 large person groups: "group1", ..., "group5".

        <br /> "start=&top=" will return all 5 groups.

        <br /> "start=&top=2" will return "group1", "group2".

        <br /> "start=group2&top=3" will return "group3", "group4", "group5".
      operationId: LargePersonGroup_List
      parameters:
        - description: List large person groups from the least largePersonGroupId greater
            than the "start".
          in: query
          name: start
          required: false
          schema:
            type: string
            maxLength: 64
          examples:
            List large person groups example:
              value: sample_group
        - description: The number of large person groups to list.
          in: query
          name: top
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 1000
          examples:
            List large person groups example:
              value: 2
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns an array of large person groups and their
            information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargePersonGroups"
              examples:
                List large person groups example:
                  $ref: "#/components/examples/List_large_person_groups_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}":
    delete:
      description: Delete an existing large person group. Persisted face features of all
        people in the large person group will also be deleted.
      operationId: LargePersonGroup_Delete
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: >
        Retrieve the information of a large person group, including its name,
        userData and recognitionModel. This API returns large person group
        information only, use [LargePersonGroup Person -
        List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)
        instead to retrieve person information under the large person group.
      operationId: LargePersonGroup_Get
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns the large person group's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargePersonGroup"
              examples:
                Get large person group example:
                  $ref: "#/components/examples/Get_large_person_group_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update an existing large person group's display name and userData. The
        properties which does not appear in request body will not be updated.
      operationId: LargePersonGroup_Update
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NameAndUserDataContract"
        description: Request body for updating large person group.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    put:
      description: >-
        Create a new large person group with user-specified largePersonGroupId,
        name, an optional userData and recognitionModel.

        <br /> A large person group is the container of the uploaded person data, including face recognition feature, and up to 1,000,000

        people.

        <br /> After creation, use [LargePersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40) to add person into the group, and call [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

        <br /> No image will be stored. Only the person's extracted face features and userData will be stored on server until [LargePersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2) or [LargePersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f) is called.

        <br/>'recognitionModel' should be specified to associate with this large person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large person group will use the recognition model that's already associated with the collection. Existing face features in a large person group can't be updated to features extracted by another version of recognition model.

        * 'recognition_01': The default recognition model for [LargePersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d). All those large person groups created before 2019 March are bonded with this recognition model.

        * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.


        Large person group quota:

        * Free-tier subscription quota: 1,000 large person groups.

        * S0-tier subscription quota: 1,000,000 large person groups.
      operationId: LargePersonGroup_Create
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataContract"
        description: Request body for creating new large person group.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/persons":
    get:
      description: List all persons in a large person group, and retrieve person
        information (including personId, name, userData and persistedFaceIds of
        registered faces of the person).
      operationId: LargePersonGroupPerson_List
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - description: Starting person id to return (used to list a range of persons).
          in: query
          name: start
          required: false
          schema:
            type: string
          examples:
            List persons in person group:
              value: 25985303-c537-4467-b41d-bdb45cd95ca1
        - description: Number of persons to return starting with the person id indicated by
            the 'start' parameter.
          in: query
          name: top
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          examples:
            List persons in person group:
              value: 2
      responses:
        "200":
          description: A successful call returns an array of person information that belong
            to the large person group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Persons"
              examples:
                List persons in person group:
                  $ref: "#/components/examples/List_persons_in_person_group"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    post:
      description: Create a new person in a specified large person group.
      operationId: LargePersonGroupPerson_Create
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
      requestBody:
        $ref: "#/components/requestBodies/NameAndUserDataContract2"
      responses:
        "200":
          description: A successful call returns a new personId created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
              examples:
                Create new person for large person group example:
                  $ref: "#/components/examples/Create_new_person_for_large_person_g\
                    roup_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/persons/{personId}":
    delete:
      description: Delete an existing person from a large person group. The
        persistedFaceId, userData, person name and face feature in the person
        entry will all be deleted.
      operationId: LargePersonGroupPerson_Delete
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve a person's name and userData, and the persisted faceIds
        representing the registered person face feature.
      operationId: LargePersonGroupPerson_Get
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
      responses:
        "200":
          description: A successful call returns the person's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
              examples:
                Get person example:
                  $ref: "#/components/examples/Get_person_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update name or userData of a person.
      operationId: LargePersonGroupPerson_Update
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
      requestBody:
        $ref: "#/components/requestBodies/NameAndUserDataContract"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces":
    post:
      description: >-
        Add a face to a person into a large person group for face identification
        or verification. To deal with an image contains multiple faces, input
        face can be specified as an image with a targetFace rectangle. It
        returns a persistedFaceId representing the added face. No image will be
        stored. Only the extracted face feature will be stored on server until
        [LargePersonGroup PersonFace -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ae2966ac60f11b48b5aa3),
        [LargePersonGroup Person -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)
        or [LargePersonGroup -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)
        is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * Each person entry can hold up to 248 faces.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
      operationId: LargePersonGroupPerson_AddFaceFromUrl
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithUrlImageurl"
      responses:
        "200":
          description: A successful call returns the new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Add Person face example:
                  $ref: "#/components/examples/Add_Person_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}":
    delete:
      description: >-
        Delete a face from a person in a large person group by specified
        largePersonGroupId, personId and persistedFaceId.

        <br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
      operationId: LargePersonGroupPerson_DeleteFace
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve information about a persisted face (specified by
        persistedFaceId, personId and its belonging largePersonGroupId).
      operationId: LargePersonGroupPerson_GetFace
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns target persisted face's information
            (persistedFaceId and userData).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Get persisted face example:
                  $ref: "#/components/examples/Get_persisted_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update a person persisted face's userData field.
      operationId: LargePersonGroupPerson_UpdateFace
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/persistedFaceId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateFaceRequest"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/train":
    post:
      description: Queue a large person group training task, the training task may not be
        started immediately.
      operationId: LargePersonGroup_Train
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
      responses:
        "202":
          description: The training task was queued successfully.
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/training":
    get:
      description: Retrieve the training status of a large person group (completed or
        ongoing).
      operationId: LargePersonGroup_GetTrainingStatus
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
      responses:
        "200":
          description: A successful call returns the large person group's training status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingStatus"
              examples:
                Get large person group's training status example:
                  $ref: "#/components/examples/Get_large_person_group_s_training_st\
                    atus_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/operations/{operationId}":
    get:
      description: Retrieve the status of a take/apply snapshot operation.
      operationId: Snapshot_GetOperationStatus
      parameters:
        - $ref: "#/components/parameters/operationId"
      responses:
        "200":
          description: A successful call returns the snapshot operation's status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationStatus"
              examples:
                Get snapshot operation status example:
                  $ref: "#/components/examples/Get_snapshot_operation_status_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /persongroups:
    get:
      description: >
        List person groups’ personGroupId, name, userData and
        recognitionModel.<br />

        * Person groups are stored in alphabetical order of personGroupId.

        * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.

        * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.

        <br />

        For example, total 5 person groups: "group1", ..., "group5".

        <br /> "start=&top=" will return all 5 groups.

        <br /> "start=&top=2" will return "group1", "group2".

        <br /> "start=group2&top=3" will return "group3", "group4", "group5".
      operationId: PersonGroup_List
      parameters:
        - description: List person groups from the least personGroupId greater than the
            "start".
          in: query
          name: start
          required: false
          schema:
            type: string
            maxLength: 64
          examples:
            List person groups example:
              value: sample_group
        - description: The number of person groups to list.
          in: query
          name: top
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 1000
          examples:
            List person groups example:
              value: 2
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns an array of person groups and their
            information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonGroups"
              examples:
                List person groups example:
                  $ref: "#/components/examples/List_person_groups_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}":
    delete:
      description: Delete an existing person group. Persisted face features of all people
        in the person group will also be deleted.
      operationId: PersonGroup_Delete
      parameters:
        - $ref: "#/components/parameters/personGroupId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve person group name, userData and recognitionModel. To get person
        information under this personGroup, use [PersonGroup Person -
        List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
      operationId: PersonGroup_Get
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/returnRecognitionModel"
      responses:
        "200":
          description: A successful call returns the person group's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonGroup"
              examples:
                Get person group example:
                  $ref: "#/components/examples/Get_person_group_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update an existing person group's display name and userData. The
        properties which does not appear in request body will not be updated.
      operationId: PersonGroup_Update
      parameters:
        - $ref: "#/components/parameters/personGroupId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NameAndUserDataContract"
        description: Request body for updating person group.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    put:
      description: >-
        Create a new person group with specified personGroupId, name,
        user-provided userData and recognitionModel.

        <br /> A person group is the container of the uploaded person data, including face recognition features.

        <br /> After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

        <br /> No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.

        <br/>'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model.

        * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model.

        * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.


        Person group quota:

        * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.

        * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.

        * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
      operationId: PersonGroup_Create
      parameters:
        - $ref: "#/components/parameters/personGroupId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetaDataContract"
        description: Request body for creating new person group.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/persons":
    get:
      description: List all persons in a person group, and retrieve person information
        (including personId, name, userData and persistedFaceIds of registered
        faces of the person).
      operationId: PersonGroupPerson_List
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - description: Starting person id to return (used to list a range of persons).
          in: query
          name: start
          required: false
          schema:
            type: string
          examples:
            List persons in person group:
              value: 25985303-c537-4467-b41d-bdb45cd95ca1
        - description: Number of persons to return starting with the person id indicated by
            the 'start' parameter.
          in: query
          name: top
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          examples:
            List persons in person group:
              value: 2
      responses:
        "200":
          description: A successful call returns an array of person information that belong
            to the person group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Persons"
              examples:
                List persons in person group:
                  $ref: "#/components/examples/List_persons_in_person_group"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    post:
      description: Create a new person in a specified person group.
      operationId: PersonGroupPerson_Create
      parameters:
        - $ref: "#/components/parameters/personGroupId"
      requestBody:
        $ref: "#/components/requestBodies/NameAndUserDataContract2"
      responses:
        "200":
          description: A successful call returns a new personId created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
              examples:
                Create new person for person group example:
                  $ref: "#/components/examples/Create_new_person_for_person_group_e\
                    xample"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/persons/{personId}":
    delete:
      description: Delete an existing person from a person group. The persistedFaceId,
        userData, person name and face feature in the person entry will all be
        deleted.
      operationId: PersonGroupPerson_Delete
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve a person's information, including registered persisted faces,
        name and userData.
      operationId: PersonGroupPerson_Get
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
      responses:
        "200":
          description: A successful call returns the person's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
              examples:
                Get person example:
                  $ref: "#/components/examples/Get_person_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update name or userData of a person.
      operationId: PersonGroupPerson_Update
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
      requestBody:
        $ref: "#/components/requestBodies/NameAndUserDataContract"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/persons/{personId}/persistedfaces":
    post:
      description: >-
        Add a face to a person into a person group for face identification or
        verification. To deal with an image contains multiple faces, input face
        can be specified as an image with a targetFace rectangle. It returns a
        persistedFaceId representing the added face. No image will be stored.
        Only the extracted face feature will be stored on server until
        [PersonGroup PersonFace -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e),
        [PersonGroup Person -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
        or [PersonGroup -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
        is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        *   Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        *   Each person entry can hold up to 248 faces.

        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [PersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
      operationId: PersonGroupPerson_AddFaceFromUrl
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithUrlImageurl"
      responses:
        "200":
          description: A successful call returns the new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Add Person face example:
                  $ref: "#/components/examples/Add_Person_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}":
    delete:
      description: >-
        Delete a face from a person in a person group by specified
        personGroupId, personId and persistedFaceId.

        <br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
      operationId: PersonGroupPerson_DeleteFace
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve information about a persisted face (specified by
        persistedFaceId, personId and its belonging personGroupId).
      operationId: PersonGroupPerson_GetFace
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/persistedFaceId"
      responses:
        "200":
          description: A successful call returns target persisted face's information
            (persistedFaceId and userData).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Get persisted face example:
                  $ref: "#/components/examples/Get_persisted_face_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: >-
        Add a face to a person into a person group for face identification or
        verification. To deal with an image contains multiple faces, input face
        can be specified as an image with a targetFace rectangle. It returns a
        persistedFaceId representing the added face. No image will be stored.
        Only the extracted face feature will be stored on server until
        [PersonGroup PersonFace -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e),
        [PersonGroup Person -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
        or [PersonGroup -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
        is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * Each person entry can hold up to 248 faces.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
      operationId: PersonGroupPerson_UpdateFace
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/persistedFaceId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateFaceRequest"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/train":
    post:
      description: Queue a person group training task, the training task may not be started
        immediately.
      operationId: PersonGroup_Train
      parameters:
        - $ref: "#/components/parameters/personGroupId"
      responses:
        "202":
          description: The training task was queued successfully.
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/training":
    get:
      description: Retrieve the training status of a person group (completed or ongoing).
      operationId: PersonGroup_GetTrainingStatus
      parameters:
        - $ref: "#/components/parameters/personGroupId"
      responses:
        "200":
          description: A successful call returns the person group's training status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingStatus"
              examples:
                Get person group's training status example:
                  $ref: "#/components/examples/Get_person_group_s_training_status_e\
                    xample"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /snapshots:
    get:
      description: List all accessible snapshots with related information, including
        snapshots that were taken by the user, or snapshots to be applied to the
        user (subscription id was included in the applyScope in Snapshot -
        Take).
      operationId: Snapshot_List
      parameters:
        - description: User specified object type as a search filter.
          in: query
          name: type
          required: false
          x-ms-enum:
            modelAsString: false
            name: SnapshotObjectType
          schema:
            type: string
            enum:
              - FaceList
              - LargeFaceList
              - LargePersonGroup
              - PersonGroup
          examples:
            List snapshots example:
              value: FaceList
        - $ref: "#/components/parameters/applyScope"
      responses:
        "200":
          description: A successful call returns an array of snapshots with snapshot
            information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshots"
              examples:
                List snapshots example:
                  $ref: "#/components/examples/List_snapshots_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    post:
      description: >-
        Submit an operation to take a snapshot of face list, large face list,
        person group or large person group, with user-specified snapshot type,
        source object id, apply scope and an optional user data.<br />

        The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.<br />

        Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".<br />

        Snapshot taking time depends on the number of person and face entries in the source object. It could be in seconds, or up to several hours for 1,000,000 persons with multiple faces.<br />

        Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by themselves any time before expiration.<br />

        Taking snapshot for a certain object will not block any other operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will also include the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.<br />

        * Free-tier subscription quota: 100 take operations per month.

        * S0-tier subscription quota: 100 take operations per day.
      operationId: Snapshot_Take
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TakeSnapshotRequest"
        description: Request body for taking a snapshot.
        required: true
        x-ms-client-flatten: true
      responses:
        "202":
          description: The snapshot taking task was queued successfully.
          headers:
            Operation-Location:
              description: Operation location with an operation id used to track the
                progress of taking snapshot. The returned id is the operation
                id, rather than snapshot id. Snapshot id can be obtained only
                when the operation status becomes "succeeded" in OperationStatus
                - Get.
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/snapshots/{snapshotId}":
    delete:
      description: Delete an existing snapshot according to the snapshotId. All object data
        and information in the snapshot will also be deleted. Only the source
        subscription who took the snapshot can delete the snapshot. If the user
        does not delete a snapshot with this API, the snapshot will still be
        automatically deleted in 48 hours after creation.
      operationId: Snapshot_Delete
      parameters:
        - $ref: "#/components/parameters/snapshotId"
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      description: Retrieve information about a snapshot. Snapshot is only accessible to
        the source subscription who took it, and target subscriptions included
        in the applyScope in Snapshot - Take.
      operationId: Snapshot_Get
      parameters:
        - $ref: "#/components/parameters/snapshotId"
      responses:
        "200":
          description: A successful call returns the snapshot's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
              examples:
                Get snapshot example:
                  $ref: "#/components/examples/Get_snapshot_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      description: Update the information of a snapshot. Only the source subscription who
        took the snapshot can update the snapshot.
      operationId: Snapshot_Update
      parameters:
        - $ref: "#/components/parameters/snapshotId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSnapshotRequest"
        description: Request body for updating a snapshot.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns an empty response body.
        default:
          description: Error response.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/APIError"
  "/snapshots/{snapshotId}/apply":
    post:
      description: >-
        Submit an operation to apply a snapshot to current subscription. For
        each snapshot, only subscriptions included in the applyScope of Snapshot
        - Take can apply it.<br />

        The snapshot interfaces are for users to backup and restore their face data from one face subscription to another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.<br />

        Applying snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus - Get response when the operation status is "succeeded".<br />

        Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.<br />

        Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its creation.<br />

        Applying a snapshot will not block any other operations against the target object, however it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying is completed, all operations towards the target object can work as normal. Snapshot also includes the training results of the source object, which means target subscription the snapshot applied to does not need re-train the target object before calling Identify/FindSimilar.<br />

        One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will fail if target subscription already contains an object of same type and using the same objectId. Users can specify the "objectId" in request body to avoid such conflicts.<br />

        * Free-tier subscription quota: 100 apply operations per month.

        * S0-tier subscription quota: 100 apply operations per day.
      operationId: Snapshot_Apply
      parameters:
        - $ref: "#/components/parameters/snapshotId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplySnapshotRequest"
        description: Request body for applying a snapshot.
        required: true
        x-ms-client-flatten: true
      responses:
        "202":
          description: The snapshot applying task was queued successfully.
          headers:
            Operation-Location:
              description: Operation location with an operation id used to track the
                progress of applying the snapshot by OperationStatus - Get.
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /verify:
    post:
      description: >
        Verify whether two faces belong to a same person or whether one face
        belongs to a person.

        <br/>

        Remarks:<br />

        * Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * For the scenarios that are sensitive to accuracy please make your own judgment.

        * The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group or large person group.
      operationId: Face_VerifyFaceToFace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyFaceToFaceRequest"
        description: Request body for face to face verification.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns the verification result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyResult"
              examples:
                Verify faces example:
                  $ref: "#/components/examples/Verify_faces_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
x-ms-paths:
  /detect?overload=stream:
    post:
      description: >-
        Detect human faces in an image, return face rectangles, and optionally
        with faceIds, landmarks, and attributes.<br />

        * No image will be stored. Only the extracted face feature will be stored on server. The faceId is an identifier of the face feature and will be used in [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). The stored face feature(s) will expire and be deleted 24 hours after the original detection call.

        * Optional parameters include faceId, landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes may not be highly accurate.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.

        * For optimal results when querying [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' is true), please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes).

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |

        * Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter. Once specified, the detected faceIds will be associated with the specified recognition model. More details, please refer to [How to specify a recognition model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'recognition_01': | The default recognition model for [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236). All those faceIds created before 2019 March are bonded with this recognition model. |
          | 'recognition_02': | Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'. |
      operationId: Face_DetectWithStream
      parameters:
        - description: A value indicating whether the operation should return faceIds of
            detected faces.
          in: query
          name: returnFaceId
          schema:
            type: boolean
            default: true
        - description: A value indicating whether the operation should return landmarks of
            the detected faces.
          in: query
          name: returnFaceLandmarks
          schema:
            type: boolean
            default: false
        - $ref: "#/components/parameters/returnFaceAttributes"
        - $ref: "#/components/parameters/recognitionModel"
        - $ref: "#/components/parameters/returnRecognitionModel"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithStreamImage"
      responses:
        "200":
          description: A successful call returns an array of face entries ranked by face
            rectangle size in descending order. An empty response indicates no
            faces detected.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetectedFaces"
              examples:
                Detect with stream example:
                  $ref: "#/components/examples/Detect_with_stream_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/facelists/{faceListId}/persistedfaces?overload=stream":
    post:
      description: >-
        Add a face to a specified face list, up to 1,000 faces.

        <br /> To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
      operationId: FaceList_AddFaceFromStream
      parameters:
        - $ref: "#/components/parameters/faceListId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithStreamImage"
      responses:
        "200":
          description: A successful call returns a new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Add face to face list from stream example:
                  $ref: "#/components/examples/Add_face_to_face_list_from_stream_ex\
                    ample"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largefacelists/{largeFaceListId}/persistedfaces?overload=stream":
    post:
      description: >-
        Add a face to a specified large face list, up to 1,000,000 faces.

        <br /> To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [LargeFaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |

        Quota:

        * Free-tier subscription quota: 1,000 faces per large face list.

        * S0-tier subscription quota: 1,000,000 faces per large face list.
      operationId: LargeFaceList_AddFaceFromStream
      parameters:
        - $ref: "#/components/parameters/largeFaceListId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithStreamImage"
      responses:
        "200":
          description: A successful call returns a new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Add face to large face list from stream example:
                  $ref: "#/components/examples/Add_face_to_large_face_list_from_str\
                    eam_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces?overload=stream":
    post:
      description: >-
        Add a face to a person into a large person group for face identification
        or verification. To deal with an image contains multiple faces, input
        face can be specified as an image with a targetFace rectangle. It
        returns a persistedFaceId representing the added face. No image will be
        stored. Only the extracted face feature will be stored on server until
        [LargePersonGroup PersonFace -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ae2966ac60f11b48b5aa3),
        [LargePersonGroup Person -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)
        or [LargePersonGroup -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)
        is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        * Each person entry can hold up to 248 faces.

        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
      operationId: LargePersonGroupPerson_AddFaceFromStream
      parameters:
        - $ref: "#/components/parameters/largePersonGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithStreamImage"
      responses:
        "200":
          description: A successful call returns the new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Add face to person with stream example:
                  $ref: "#/components/examples/Add_face_to_person_with_stream_examp\
                    le"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  "/persongroups/{personGroupId}/persons/{personId}/persistedfaces?overload=stream":
    post:
      description: >-
        Add a face to a person into a person group for face identification or
        verification. To deal with an image contains multiple faces, input face
        can be specified as an image with a targetFace rectangle. It returns a
        persistedFaceId representing the added face. No image will be stored.
        Only the extracted face feature will be stored on server until
        [PersonGroup PersonFace -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e),
        [PersonGroup Person -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
        or [PersonGroup -
        Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
        is called.

        <br /> Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).

        *   Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.

        *   Each person entry can hold up to 248 faces.

        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.

        *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.

        *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.

        *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.

        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.

        * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
          | Model | Recommended use-case(s) |
          | ---------- | -------- |
          | 'detection_01': | The default detection model for [PersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
          | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
      operationId: PersonGroupPerson_AddFaceFromStream
      parameters:
        - $ref: "#/components/parameters/personGroupId"
        - $ref: "#/components/parameters/personId"
        - $ref: "#/components/parameters/faceUserData"
        - $ref: "#/components/parameters/targetFace"
        - $ref: "#/components/parameters/detectionModel"
      requestBody:
        $ref: "#/components/requestBodies/Face_DetectWithStreamImage"
      responses:
        "200":
          description: A successful call returns the new persistedFaceId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersistedFace"
              examples:
                Add face to person with stream example:
                  $ref: "#/components/examples/Add_face_to_person_with_stream_examp\
                    le"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
  /verify?overload=person:
    post:
      description: Verify whether two faces belong to a same person. Compares a face Id
        with a Person Id
      operationId: Face_VerifyFaceToPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyFaceToPersonRequest"
        description: Request body for face to person verification.
        required: true
        x-ms-client-flatten: true
      responses:
        "200":
          description: A successful call returns the verification result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyResult"
              examples:
                Verify face to person example:
                  $ref: "#/components/examples/Verify_face_to_person_example"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
servers:
  - url: https://azure.local
  - url: "{Endpoint}/face/v1.0"
    variables:
      Endpoint:
        description: "Supported Cognitive Services endpoints (protocol and hostname, for
          example: https://westus.api.cognitive.microsoft.com)."
        x-ms-parameter-location: client
        x-ms-skip-url-encoding: true
        default: ""
components:
  examples:
    Detect_with_url_example:
      value:
        - faceAttributes:
            accessories:
              - confidence: 0.99
                type: headWear
              - confidence: 1
                type: glasses
              - confidence: 0.87
                type: mask
            age: 71
            blur:
              blurLevel: Medium
              value: 0.51
            emotion:
              anger: 0.575
              contempt: 0
              disgust: 0.006
              fear: 0.008
              happiness: 0.394
              neutral: 0.013
              sadness: 0
              surprise: 0.004
            exposure:
              exposureLevel: GoodExposure
              value: 0.55
            facialHair:
              beard: 0.1
              moustache: 0.8
              sideburns: 0.02
            gender: male
            glasses: sunglasses
            hair:
              bald: 0
              hairColor:
                - color: brown
                  confidence: 1
                - color: blond
                  confidence: 0.88
                - color: black
                  confidence: 0.48
                - color: other
                  confidence: 0.11
                - color: gray
                  confidence: 0.07
                - color: red
                  confidence: 0.03
              invisible: false
            headPose:
              pitch: 1.6
              roll: 2.1
              yaw: 3
            makeup:
              eyeMakeup: true
              lipMakeup: false
            noise:
              noiseLevel: Low
              value: 0.12
            occlusion:
              eyeOccluded: false
              foreheadOccluded: false
              mouthOccluded: false
            smile: 0.88
          faceId: c5c24a82-6845-4031-9d5d-978df9175426
          faceLandmarks:
            eyeLeftBottom:
              x: 413
              y: 80.1
            eyeLeftInner:
              x: 418.9
              y: 78
            eyeLeftOuter:
              x: 406.7
              y: 80.6
            eyeLeftTop:
              x: 412.2
              y: 76.2
            eyeRightBottom:
              x: 447
              y: 75.3
            eyeRightInner:
              x: 441.5
              y: 75
            eyeRightOuter:
              x: 451.7
              y: 73.4
            eyeRightTop:
              x: 446.4
              y: 71.7
            eyebrowLeftInner:
              x: 425.4
              y: 70.5
            eyebrowLeftOuter:
              x: 397.9
              y: 78.5
            eyebrowRightInner:
              x: 4.8
              y: 69.7
            eyebrowRightOuter:
              x: 5.5
              y: 68.5
            mouthLeft:
              x: 417.8
              y: 114.4
            mouthRight:
              x: 451.3
              y: 109.3
            noseLeftAlarOutTip:
              x: 424.3
              y: 96.4
            noseLeftAlarTop:
              x: 428.3
              y: 89.7
            noseRightAlarOutTip:
              x: 446.6
              y: 92.5
            noseRightAlarTop:
              x: 442.2
              y: 87
            noseRootLeft:
              x: 428
              y: 77.1
            noseRootRight:
              x: 435.8
              y: 75.6
            noseTip:
              x: 437.7
              y: 92.4
            pupilLeft:
              x: 412.7
              y: 78.4
            pupilRight:
              x: 446.8
              y: 74.2
            underLipBottom:
              x: 437.3
              y: 114.5
            underLipTop:
              x: 436.8
              y: 111.4
            upperLipBottom:
              x: 437.6
              y: 108.2
            upperLipTop:
              x: 437.6
              y: 105.9
          faceRectangle:
            height: 78
            left: 394
            top: 54
            width: 78
          recognitionModel: recognition_01
    List_Face_lists_example:
      value:
        - faceListId: sample_face_list
          name: list1
          recognitionModel: recognition_01
          userData: User-provided data attached to the face list.
    Get_Face_list_example:
      value:
        faceListId: sample_list
        name: list1
        persistedFaces:
          - persistedFaceId: B8D802CF-DD8F-4E61-B15C-9E6C5844CCBD
            userData: User-provided data attached to the face.
        recognitionModel: recognition_01
        userData: User-provided data attached to the face list.
    Create_face_list_face_example:
      value:
        persistedFaceId: B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA
    Find_similar_results_example:
      value:
        - confidence: 0.82
          persistedFaceId: 015839fb-fbd9-4f79-ace9-7675fc2f1dd9
    Group_example:
      value:
        groups:
          - - c5c24a82-6845-4031-9d5d-978df9175426
            - 015839fb-fbd9-4f79-ace9-7675fc2f1dd9
            - fce92aed-d578-4d2e-8114-068f8af4492e
            - b64d5e15-8257-4af2-b20a-5a750f8940e7
          - - 65d083d4-9447-47d1-af30-b626144bf0fb
            - 30ea1073-cc9e-4652-b1e3-d08fb7b95315
        messyGroup:
          - be386ab3-af91-4104-9e6d-4dae4c9fddb7
    Identify_example:
      value:
        - candidates:
            - confidence: 0.92
              personId: 25985303-c537-4467-b41d-bdb45cd95ca1
          faceId: c5c24a82-6845-4031-9d5d-978df9175426
        - candidates:
            - confidence: 0.89
              personId: 2ae4935b-9659-44c3-977f-61fac20d0538
          faceId: 65d083d4-9447-47d1-af30-b626144bf0fb
    List_large_face_lists_example:
      value:
        - largeFaceListId: f92f6f1b-3258-4444-8fa2-c2df505cc7ac
          name: large-face-list-name1
          recognitionModel: recognition_01
          userData: User-provided data attached to the large face list.
        - largeFaceListId: c76f7f13-0ed3-4d00-8a3e-2ad3d78f6c37
          name: large-face-list-name2
          recognitionModel: recognition_01
          userData: User-provided data attached to the large face list.
    Get_large_face_list_example:
      value:
        largeFaceListId: f92f6f1b-3258-4444-8fa2-c2df505cc7ac
        name: large-face-list-name
        recognitionModel: recognition_01
        userData: User-provided data attached to the large face list.
    List_faces_in_large_face_list:
      value:
        - persistedFaceId: 8a887ac2-53fd-4f55-9024-1ec77eecd08e
          userData: User-provided data attached to the large face list face.
        - persistedFaceId: f92f6f1b-3258-4444-8fa2-c2df505cc7ac
          userData: User-provided data attached to the large face list face.
    Create_large_face_list_face_example:
      value:
        persistedFaceId: B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA
    Get_persisted_face_example:
      value:
        persistedFaceId: 015839fb-fbd9-4f79-ace9-7675fc2f1dd9
        userData: User-provided data attached to the person face.
    Get_large_face_list_s_training_status_example:
      value:
        createdDateTime: 2017-12-21T12:57:27.00Z
        lastActionDateTime: 2017-12-21T12:57:30.00Z
        lastSuccessfulTrainingDateTime: 2017-12-21T12:57:30.00Z
        status: succeeded
    List_large_person_groups_example:
      value:
        - largePersonGroupId: f92f6f1b-3258-4444-8fa2-c2df505cc7ac
          name: large-person-group-name1
          recognitionModel: recognition_01
          userData: User-provided data attached to the large person group.
        - largePersonGroupId: c76f7f13-0ed3-4d00-8a3e-2ad3d78f6c37
          name: large-person-group-name2
          recognitionModel: recognition_01
          userData: User-provided data attached to the large person group.
    Get_large_person_group_example:
      value:
        largePersonGroupId: d408cb4e-2f5f-4b4d-b99e-f0b72870e5b5
        name: large-person-group-name
        recognitionModel: recognition_01
        userData: User-provided data attached to the large person group.
    List_persons_in_person_group:
      value:
        - name: Ryan
          persistedFaceIds:
            - 015839fb-fbd9-4f79-ace9-7675fc2f1dd9
            - fce92aed-d578-4d2e-8114-068f8af4492e
            - b64d5e15-8257-4af2-b20a-5a750f8940e7
          personId: 25985303-c537-4467-b41d-bdb45cd95ca1
          userData: User-provided data attached to the person
        - name: David
          persistedFaceIds:
            - 30ea1073-cc9e-4652-b1e3-d08fb7b95315
            - fbd2a038-dbff-452c-8e79-2ee81b1aa84e
          personId: 2ae4935b-9659-44c3-977f-61fac20d0538
          userData: User-provided data attached to the person
    Create_new_person_for_large_person_group_example:
      value:
        personId: 4caa25ee-3bc6-4e88-adf8-12455ce7aab0
    Get_person_example:
      value:
        name: Ryan
        persistedFaceIds:
          - 015839fb-fbd9-4f79-ace9-7675fc2f1dd9
          - fce92aed-d578-4d2e-8114-068f8af4492e
          - b64d5e15-8257-4af2-b20a-5a750f8940e7
        personId: 25985303-c537-4467-b41d-bdb45cd95ca1
        userData: User-provided data attached to the person.
    Add_Person_face_example:
      value:
        persistedFaceId: 6e04c175-219e-42a2-9d26-0e7b790e1ef4
    Get_large_person_group_s_training_status_example:
      value:
        createdDateTime: 2017-12-21T12:57:27.00Z
        lastActionDateTime: 2017-12-21T12:57:30.00Z
        lastSuccessfulTrainingDateTime: 2017-12-21T12:57:30.00Z
        status: succeeded
    Get_snapshot_operation_status_example:
      value:
        createdTime: 2018-12-25T11:41:02.2331413Z
        lastActionTime: 2018-12-25T11:51:27.8705696Z
        resourceLocation: /snapshots/e58b3f08-1e8b-4165-81df-aa9858f233dc
        status: succeeded
    List_person_groups_example:
      value:
        - name: group1
          personGroupId: sample_group
          recognitionModel: recognition_01
          userData: User-provided data attached to the person group.
        - name: group2
          personGroupId: sample_group2
          recognitionModel: recognition_01
          userData: User-provided data attached to the person group.
    Get_person_group_example:
      value:
        name: group1
        personGroupId: sample_group
        recognitionModel: recognition_01
        userData: User-provided data attached to the person group.
    Create_new_person_for_person_group_example:
      value:
        personId: 4caa25ee-3bc6-4e88-adf8-12455ce7aab0
    Get_person_group_s_training_status_example:
      value:
        createdDateTime: 2017-12-21T12:57:27.00Z
        lastActionDateTime: 2017-12-21T12:57:30.00Z
        status: succeeded
    List_snapshots_example:
      value:
        - account: /subscriptions/f9b96b36-1f5e-4021-8959-51527e26e6d3/resourceGroups/TestRG/providers/Microsoft.CognitiveServices/accounts/FaceTest01
          applyScope:
            - 35230F59-AA9C-45E0-AB5E-C859BF1A5429
            - 64084E07-9B7F-4A98-BEA4-9986D3A1EDEB
          createdTime: 2018-12-25T11:41:02.2331413Z
          id: e58b3f08-1e8b-4165-81df-aa9858f233dc
          lastUpdateTime: 2018-12-25T11:51:27.8705696Z
          type: FaceList
          userData: User-provided data attached to the snapshot1.
        - account: /subscriptions/6622996e-0149-4b22-9703-4216dc948d52/resourceGroups/TestRG/providers/Microsoft.CognitiveServices/accounts/FaceTest01
          applyScope:
            - 64084E07-9B7F-4A98-BEA4-9986D3A1EDEB
          createdTime: 2018-12-29T17:09:32.3298483Z
          id: a61e61e4-c3d1-4d33-8ae8-676e6104757d
          lastUpdateTime: 2018-12-29T17:14:34.5645877Z
          type: FaceList
          userData: User-provided data attached to the snapshot2.
    Get_snapshot_example:
      value:
        account: /subscriptions/f9b96b36-1f5e-4021-8959-51527e26e6d3/resourceGroups/TestRG/providers/Microsoft.CognitiveServices/accounts/FaceTest01
        applyScope:
          - 35230F59-AA9C-45E0-AB5E-C859BF1A5429
          - 64084E07-9B7F-4A98-BEA4-9986D3A1EDEB
        createdTime: 2018-12-25T11:41:02.2331413Z
        id: e58b3f08-1e8b-4165-81df-aa9858f233dc
        lastUpdateTime: 2018-12-25T11:51:27.8705696Z
        type: FaceList
        userData: User-provided data attached to the snapshot.
    Verify_faces_example:
      value:
        confidence: 0.9
        isIdentical: true
    Detect_with_stream_example:
      value:
        - faceAttributes:
            accessories:
              - confidence: 0.99
                type: headWear
              - confidence: 1
                type: glasses
              - confidence: 0.87
                type: mask
            age: 71
            blur:
              blurLevel: Medium
              value: 0.51
            emotion:
              anger: 0.575
              contempt: 0
              disgust: 0.006
              fear: 0.008
              happiness: 0.394
              neutral: 0.013
              sadness: 0
              surprise: 0.004
            exposure:
              exposureLevel: GoodExposure
              value: 0.55
            facialHair:
              beard: 0.1
              moustache: 0.8
              sideburns: 0.02
            gender: male
            glasses: sunglasses
            hair:
              bald: 0
              hairColor:
                - color: brown
                  confidence: 1
                - color: blond
                  confidence: 0.88
                - color: black
                  confidence: 0.48
                - color: other
                  confidence: 0.11
                - color: gray
                  confidence: 0.07
                - color: red
                  confidence: 0.03
              invisible: false
            headPose:
              pitch: 1.6
              roll: 2.1
              yaw: 3
            makeup:
              eyeMakeup: true
              lipMakeup: false
            noise:
              noiseLevel: Low
              value: 0.12
            occlusion:
              eyeOccluded: false
              foreheadOccluded: false
              mouthOccluded: false
            smile: 0.88
          faceId: c5c24a82-6845-4031-9d5d-978df9175426
          faceLandmarks:
            eyeLeftBottom:
              x: 413
              y: 80.1
            eyeLeftInner:
              x: 418.9
              y: 78
            eyeLeftOuter:
              x: 406.7
              y: 80.6
            eyeLeftTop:
              x: 412.2
              y: 76.2
            eyeRightBottom:
              x: 447
              y: 75.3
            eyeRightInner:
              x: 441.5
              y: 75
            eyeRightOuter:
              x: 451.7
              y: 73.4
            eyeRightTop:
              x: 446.4
              y: 71.7
            eyebrowLeftInner:
              x: 425.4
              y: 70.5
            eyebrowLeftOuter:
              x: 397.9
              y: 78.5
            eyebrowRightInner:
              x: 4.8
              y: 69.7
            eyebrowRightOuter:
              x: 5.5
              y: 68.5
            mouthLeft:
              x: 417.8
              y: 114.4
            mouthRight:
              x: 451.3
              y: 109.3
            noseLeftAlarOutTip:
              x: 424.3
              y: 96.4
            noseLeftAlarTop:
              x: 428.3
              y: 89.7
            noseRightAlarOutTip:
              x: 446.6
              y: 92.5
            noseRightAlarTop:
              x: 442.2
              y: 87
            noseRootLeft:
              x: 428
              y: 77.1
            noseRootRight:
              x: 435.8
              y: 75.6
            noseTip:
              x: 437.7
              y: 92.4
            pupilLeft:
              x: 412.7
              y: 78.4
            pupilRight:
              x: 446.8
              y: 74.2
            underLipBottom:
              x: 437.3
              y: 114.5
            underLipTop:
              x: 436.8
              y: 111.4
            upperLipBottom:
              x: 437.6
              y: 108.2
            upperLipTop:
              x: 437.6
              y: 105.9
          faceRectangle:
            height: 78
            left: 394
            top: 54
            width: 78
          recognitionModel: recognition_01
    Add_face_to_face_list_from_stream_example:
      value:
        persistedFaceId: B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA
    Add_face_to_large_face_list_from_stream_example:
      value:
        persistedFaceId: B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA
    Add_face_to_person_with_stream_example:
      value:
        persistedFaceId: 6e04c175-219e-42a2-9d26-0e7b790e1ef4
    Verify_face_to_person_example:
      value:
        confidence: 0.9
        isIdentical: true
  parameters:
    Endpoint:
      description: "Supported Cognitive Services endpoints (protocol and hostname, for
        example: https://westus.api.cognitive.microsoft.com)."
      in: path
      name: Endpoint
      required: true
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
      schema:
        type: string
    applyScope:
      description: User specified snapshot apply scopes as a search filter. ApplyScope is
        an array of the target Azure subscription ids for the snapshot,
        specified by the user who created the snapshot by Snapshot - Take.
      in: query
      name: applyScope
      required: false
      x-ms-parameter-location: method
      style: form
      explode: false
      schema:
        type: array
        items:
          format: uuid
          type: string
          nullable: false
      examples:
        List snapshots example:
          value:
            - 64084E07-9B7F-4A98-BEA4-9986D3A1EDEB
    detectionModel:
      description: Name of detection model. Detection model is used to detect faces in the
        submitted image. A detection model name can be provided when performing
        Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
        Face. The default value is 'detection_01', if another model is needed,
        please explicitly specify it.
      in: query
      name: detectionModel
      required: false
      x-ms-enum:
        modelAsString: true
        name: DetectionModel
      x-ms-parameter-location: method
      x-nullable: false
      schema:
        type: string
        enum:
          - detection_01
          - detection_02
        default: detection_01
      examples:
        Detect with url example:
          value: detection_01
        Create face list face example:
          value: detection_01
        Create large face list face example:
          value: detection_01
        Add Person face example:
          value: detection_01
        Detect with stream example:
          value: detection_01
        Add face to face list from stream example:
          value: detection_01
        Add face to large face list from stream example:
          value: detection_01
        Add face to person with stream example:
          value: detection_01
    faceListId:
      description: Id referencing a particular face list.
      in: path
      name: faceListId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        maxLength: 64
        pattern: ^[a-z0-9-_]+$
      examples:
        Delete face list example:
          value: sample_face_list
        Get Face list example:
          value: sample_face_list
        Update face list example:
          value: sample_face_list
        Create new face list example:
          value: sample_face_list
        Create face list face example:
          value: sample_face_list
        Delete face in face list example:
          value: sample_face_list
        Add face to face list from stream example:
          value: sample_face_list
    faceUserData:
      description: User-specified data about the face for any purpose. The maximum length
        is 1KB.
      in: query
      name: userData
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
        maxLength: 1024
      examples:
        Create face list face example:
          value: "{Customized user data}"
        Create large face list face example:
          value: "{Customized user data}"
        Add Person face example:
          value: "{customized User data}"
        Add face to face list from stream example:
          value: "{Customized user data}"
        Add face to large face list from stream example:
          value: "{Customized user data}"
        Add face to person with stream example:
          value: "{customized User data}"
    largeFaceListId:
      description: Id referencing a particular large face list.
      in: path
      name: largeFaceListId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        maxLength: 64
        pattern: ^[a-z0-9-_]+$
      examples:
        Delete large face list example:
          value: sample_face_list
        Get large face list example:
          value: f92f6f1b-3258-4444-8fa2-c2df505cc7ac
        Update large face list example:
          value: sample_face_list
        Create new large face list example:
          value: sample_face_list
        List faces in large face list:
          value: abc
        Create large face list face example:
          value: sample_face_list
        Delete face in large face list example:
          value: sample_face_list
        Get persisted face example:
          value: abc
        Update face example:
          value: abc
        Queue large face list training:
          value: abc
        Get large face list's training status example:
          value: abc
        Add face to large face list from stream example:
          value: sample_face_list
    largePersonGroupId:
      description: Id referencing a particular large person group.
      in: path
      name: largePersonGroupId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        maxLength: 64
        pattern: ^[a-z0-9-_]+$
      examples:
        Delete a large person group example:
          value: abc
        Get large person group example:
          value: abc
        Update large person group example:
          value: abc
        Create new large person group example:
          value: abc
        List persons in person group:
          value: abc
        Create new person for large person group example:
          value: abc
        Delete an existing person example:
          value: abc
        Get person example:
          value: abc
        Update person example:
          value: abc
        Add Person face example:
          value: abc
        Delete face from person example:
          value: abc
        Get persisted face example:
          value: abc
        Update person face example:
          value: abc
        Queue large person group training:
          value: abc
        Get large person group's training status example:
          value: abc
        Add face to person with stream example:
          value: abc
    operationId:
      description: Id referencing a particular take/apply snapshot operation.
      in: path
      name: operationId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
      examples:
        Get snapshot operation status example:
          value: a63a3bdd-a1db-4d05-87b8-dbad6850062a
    persistedFaceId:
      description: Id referencing a particular persistedFaceId of an existing face.
      in: path
      name: persistedFaceId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
      examples:
        Delete face in face list example:
          value: 62004fa7-1ac0-478e-9d5a-b38f9e7fbc68
        Delete face in large face list example:
          value: 62004fa7-1ac0-478e-9d5a-b38f9e7fbc68
        Get persisted face example:
          value: asd
        Update face example:
          value: 62004fa7-1ac0-478e-9d5a-b38f9e7fbc68
        Delete face from person example:
          value: 62004fa7-1ac0-478e-9d5a-b38f9e7fbc68
        Update person face example:
          value: 62004fa7-1ac0-478e-9d5a-b38f9e7fbc68
    personGroupId:
      description: Id referencing a particular person group.
      in: path
      name: personGroupId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        maxLength: 64
        pattern: ^[a-z0-9-_]+$
      examples:
        Delete a person group example:
          value: abc
        Get person group example:
          value: abc
        Update person group example:
          value: abc
        Create new person group example:
          value: abc
        List persons in person group:
          value: abc
        Create new person for person group example:
          value: abc
        Delete an existing person example:
          value: abc
        Get person example:
          value: abc
        Update person example:
          value: abc
        Add Person face example:
          value: abc
        Delete face from person example:
          value: abc
        Get persisted face example:
          value: abc
        Update person face example:
          value: abc
        Queue person group training:
          value: abc
        Get person group's training status example:
          value: abc
        Add face to person with stream example:
          value: abc
    personId:
      description: Id referencing a particular person.
      in: path
      name: personId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
      examples:
        Delete an existing person example:
          value: 25985303-c537-4467-b41d-bdb45cd95ca1
        Get person example:
          value: 25985303-c537-4467-b41d-bdb45cd95ca1
        Update person example:
          value: 25985303-c537-4467-b41d-bdb45cd95ca1
        Add Person face example:
          value: 4caa25ee-3bc6-4e88-adf8-12455ce7aab0
        Delete face from person example:
          value: 25985303-c537-4467-b41d-bdb45cd95ca1
        Get persisted face example:
          value: foobar
        Update person face example:
          value: 25985303-c537-4467-b41d-bdb45cd95ca1
        Add face to person with stream example:
          value: 4caa25ee-3bc6-4e88-adf8-12455ce7aab0
    recognitionModel:
      description: Name of recognition model. Recognition model is used when the face
        features are extracted and associated with detected faceIds,
        (Large)FaceList or (Large)PersonGroup. A recognition model name can be
        provided when performing Face - Detect or (Large)FaceList - Create or
        (Large)PersonGroup - Create. The default value is 'recognition_01', if
        latest model needed, please explicitly specify the model you need.
      in: query
      name: recognitionModel
      required: false
      x-ms-enum:
        modelAsString: true
        name: RecognitionModel
      x-ms-parameter-location: method
      x-nullable: false
      schema:
        type: string
        enum:
          - recognition_01
          - recognition_02
        default: recognition_01
      examples:
        Detect with url example:
          value: recognition_01
        Detect with stream example:
          value: recognition_01
    returnFaceAttributes:
      description: Analyze and return the one or more specified face attributes in the
        comma-separated string like "returnFaceAttributes=age,gender". Supported
        face attributes include age, gender, headPose, smile, facialHair,
        glasses and emotion. Note that each face attribute analysis has
        additional computational and time cost.
      in: query
      name: returnFaceAttributes
      required: false
      x-ms-parameter-location: method
      style: form
      explode: false
      schema:
        type: array
        items:
          enum:
            - age
            - gender
            - headPose
            - smile
            - facialHair
            - glasses
            - emotion
            - hair
            - makeup
            - occlusion
            - accessories
            - blur
            - exposure
            - noise
          type: string
          x-ms-enum:
            modelAsString: false
            name: FaceAttributeType
          nullable: false
      examples:
        Detect with url example:
          value:
            - age
            - gender
            - headPose
            - smile
            - facialHair
            - glasses
            - emotion
            - hair
            - makeup
            - occlusion
            - accessories
            - blur
            - exposure
            - noise
        Detect with stream example:
          value:
            - age
            - gender
            - headPose
            - smile
            - facialHair
            - glasses
            - emotion
            - hair
            - makeup
            - occlusion
            - accessories
            - blur
            - exposure
            - noise
    returnRecognitionModel:
      description: A value indicating whether the operation should return
        'recognitionModel' in response.
      in: query
      name: returnRecognitionModel
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Detect with url example:
          value: true
        List Face lists example:
          value: true
        Get Face list example:
          value: true
        List large face lists example:
          value: true
        Get large face list example:
          value: true
        List large person groups example:
          value: true
        Get large person group example:
          value: true
        List person groups example:
          value: true
        Get person group example:
          value: true
        Detect with stream example:
          value: true
    snapshotId:
      description: Id referencing a particular snapshot.
      in: path
      name: snapshotId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
      examples:
        Delete snapshot example:
          value: e58b3f08-1e8b-4165-81df-aa9858f233dc
        Get snapshot example:
          value: e58b3f08-1e8b-4165-81df-aa9858f233dc
        Update snapshot example:
          value: e58b3f08-1e8b-4165-81df-aa9858f233dc
        Apply snapshot example:
          value: e58b3f08-1e8b-4165-81df-aa9858f233dc
    targetFace:
      description: A face rectangle to specify the target face to be added to a person in
        the format of "targetFace=left,top,width,height". E.g.
        "targetFace=10,10,100,100". If there is more than one face in the image,
        targetFace is required to specify which face to add. No targetFace means
        there is only one face detected in the entire image.
      in: query
      name: targetFace
      required: false
      x-ms-parameter-location: method
      style: form
      explode: false
      schema:
        type: array
        items:
          format: int32
          maxItems: 4
          minItems: 4
          type: integer
          nullable: false
      examples:
        Create face list face example:
          value:
            - 10
            - 10
            - 100
            - 100
        Create large face list face example:
          value:
            - 10
            - 10
            - 100
            - 100
        Add Person face example:
          value:
            - 10
            - 10
            - 100
            - 100
        Add face to face list from stream example:
          value:
            - 10
            - 10
            - 100
            - 100
        Add face to large face list from stream example:
          value:
            - 10
            - 10
            - 100
            - 100
        Add face to person with stream example:
          value:
            - 10
            - 10
            - 100
            - 100
  requestBodies:
    NameAndUserDataContract:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NameAndUserDataContract"
      description: Request body for person update operation.
      required: true
      x-ms-client-flatten: true
    Face_DetectWithUrlImageurl:
      content:
        application/json:
          schema:
            properties:
              url:
                description: Publicly reachable URL of an image
                type: string
            required:
              - url
            type: object
      description: A JSON document with a URL pointing to the image that is to be analyzed.
      required: true
      x-ms-client-flatten: true
      x-ms-parameter-location: method
    UpdateFaceRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateFaceRequest"
      description: Request body for updating persisted face.
      required: true
      x-ms-client-flatten: true
    NameAndUserDataContract2:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NameAndUserDataContract"
      description: Request body for creating new person.
      required: true
      x-ms-client-flatten: true
    Face_DetectWithStreamImage:
      content:
        application/octet-stream:
          schema:
            format: file
            type: object
      description: An image stream.
      required: true
      x-ms-parameter-location: method
  securitySchemes:
    apim_key:
      in: header
      name: Ocp-Apim-Subscription-Key
      type: apiKey
  schemas:
    APIError:
      description: Error information returned by the API
      properties:
        error:
          $ref: "#/components/schemas/Error"
      type: object
    Accessories:
      description: Properties describing any accessories on a given face.
      items:
        $ref: "#/components/schemas/Accessory"
      type: array
    Accessory:
      description: Accessory item and corresponding confidence level.
      properties:
        confidence:
          $ref: "#/components/schemas/Confidence"
        type:
          description: Type of an accessory
          enum:
            - headWear
            - glasses
            - mask
          type: string
          x-ms-enum:
            modelAsString: false
            name: AccessoryType
          nullable: false
      type: object
    ApplyScope:
      description: Array of the target Face subscription ids for the snapshot, specified by
        the user who created the snapshot when calling Snapshot - Take. For each
        snapshot, only subscriptions included in the applyScope of Snapshot -
        Take can apply it.
      items:
        format: uuid
        type: string
        nullable: false
      type: array
    ApplySnapshotRequest:
      description: Request body for applying snapshot operation.
      properties:
        mode:
          default: CreateNew
          description: Snapshot applying mode. Currently only CreateNew is supported, which
            means the apply operation will fail if target subscription already
            contains an object of same type and using the same objectId. Users
            can specify the "objectId" in request body to avoid such conflicts.
          enum:
            - CreateNew
          type: string
          x-ms-enum:
            modelAsString: false
            name: SnapshotApplyMode
          nullable: false
        objectId:
          description: User specified target object id to be created from the snapshot.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
      required:
        - objectId
      type: object
    Blur:
      description: Properties describing any presence of blur within the image.
      properties:
        blurLevel:
          description: An enum value indicating level of blurriness.
          enum:
            - Low
            - Medium
            - High
          type: string
          x-ms-enum:
            modelAsString: false
            name: BlurLevel
          nullable: false
        value:
          $ref: "#/components/schemas/Level"
      type: object
    Confidence:
      description: A number ranging from 0 to 1 indicating a level of confidence associated
        with a property.
      maximum: 1
      minimum: 0
      type: number
    Coordinate:
      description: Coordinates within an image
      properties:
        x:
          description: The horizontal component, in pixels.
          type: number
        y:
          description: The vertical component, in pixels.
          type: number
      required:
        - x
        - y
      type: object
    DetectedFace:
      description: Detected Face object.
      properties:
        faceAttributes:
          $ref: "#/components/schemas/FaceAttributes"
        faceId:
          format: uuid
          type: string
        faceLandmarks:
          $ref: "#/components/schemas/FaceLandmarks"
        faceRectangle:
          $ref: "#/components/schemas/FaceRectangle"
        recognitionModel:
          $ref: "#/components/schemas/RecognitionModel"
      required:
        - faceRectangle
      type: object
    DetectedFaces:
      items:
        $ref: "#/components/schemas/DetectedFace"
      type: array
    Emotion:
      description: Properties describing facial emotion in form of confidence ranging from
        0 to 1.
      properties:
        anger:
          $ref: "#/components/schemas/Confidence"
        contempt:
          $ref: "#/components/schemas/Confidence"
        disgust:
          $ref: "#/components/schemas/Confidence"
        fear:
          $ref: "#/components/schemas/Confidence"
        happiness:
          $ref: "#/components/schemas/Confidence"
        neutral:
          $ref: "#/components/schemas/Confidence"
        sadness:
          $ref: "#/components/schemas/Confidence"
        surprise:
          $ref: "#/components/schemas/Confidence"
      type: object
    Error:
      description: Error body.
      properties:
        code:
          type: string
        message:
          type: string
      type: object
    Exposure:
      description: Properties describing exposure level of the image.
      properties:
        exposureLevel:
          description: An enum value indicating level of exposure.
          enum:
            - UnderExposure
            - GoodExposure
            - OverExposure
          type: string
          x-ms-enum:
            modelAsString: false
            name: ExposureLevel
          nullable: false
        value:
          $ref: "#/components/schemas/Level"
      type: object
    FaceAttributes:
      description: Face Attributes
      properties:
        accessories:
          $ref: "#/components/schemas/Accessories"
        age:
          description: Age in years
          type: number
        blur:
          $ref: "#/components/schemas/Blur"
        emotion:
          $ref: "#/components/schemas/Emotion"
        exposure:
          $ref: "#/components/schemas/Exposure"
        facialHair:
          $ref: "#/components/schemas/FacialHair"
        gender:
          description: Possible gender of the face.
          enum:
            - male
            - female
          type: string
          x-ms-enum:
            modelAsString: false
            name: Gender
        glasses:
          description: Glasses type if any of the face.
          enum:
            - noGlasses
            - readingGlasses
            - sunglasses
            - swimmingGoggles
          type: string
          x-ms-enum:
            modelAsString: false
            name: GlassesType
        hair:
          $ref: "#/components/schemas/Hair"
        headPose:
          $ref: "#/components/schemas/HeadPose"
        makeup:
          $ref: "#/components/schemas/Makeup"
        noise:
          $ref: "#/components/schemas/Noise"
        occlusion:
          $ref: "#/components/schemas/Occlusion"
        smile:
          $ref: "#/components/schemas/Level"
      type: object
    FaceLandmarks:
      description: A collection of 27-point face landmarks pointing to the important
        positions of face components.
      properties:
        eyeLeftBottom:
          $ref: "#/components/schemas/Coordinate"
        eyeLeftInner:
          $ref: "#/components/schemas/Coordinate"
        eyeLeftOuter:
          $ref: "#/components/schemas/Coordinate"
        eyeLeftTop:
          $ref: "#/components/schemas/Coordinate"
        eyeRightBottom:
          $ref: "#/components/schemas/Coordinate"
        eyeRightInner:
          $ref: "#/components/schemas/Coordinate"
        eyeRightOuter:
          $ref: "#/components/schemas/Coordinate"
        eyeRightTop:
          $ref: "#/components/schemas/Coordinate"
        eyebrowLeftInner:
          $ref: "#/components/schemas/Coordinate"
        eyebrowLeftOuter:
          $ref: "#/components/schemas/Coordinate"
        eyebrowRightInner:
          $ref: "#/components/schemas/Coordinate"
        eyebrowRightOuter:
          $ref: "#/components/schemas/Coordinate"
        mouthLeft:
          $ref: "#/components/schemas/Coordinate"
        mouthRight:
          $ref: "#/components/schemas/Coordinate"
        noseLeftAlarOutTip:
          $ref: "#/components/schemas/Coordinate"
        noseLeftAlarTop:
          $ref: "#/components/schemas/Coordinate"
        noseRightAlarOutTip:
          $ref: "#/components/schemas/Coordinate"
        noseRightAlarTop:
          $ref: "#/components/schemas/Coordinate"
        noseRootLeft:
          $ref: "#/components/schemas/Coordinate"
        noseRootRight:
          $ref: "#/components/schemas/Coordinate"
        noseTip:
          $ref: "#/components/schemas/Coordinate"
        pupilLeft:
          $ref: "#/components/schemas/Coordinate"
        pupilRight:
          $ref: "#/components/schemas/Coordinate"
        underLipBottom:
          $ref: "#/components/schemas/Coordinate"
        underLipTop:
          $ref: "#/components/schemas/Coordinate"
        upperLipBottom:
          $ref: "#/components/schemas/Coordinate"
        upperLipTop:
          $ref: "#/components/schemas/Coordinate"
      type: object
    FaceList:
      allOf:
        - $ref: "#/components/schemas/MetaDataContract"
      description: Face list object.
      properties:
        faceListId:
          description: FaceListId of the target face list.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        persistedFaces:
          $ref: "#/components/schemas/PersistedFaces"
      required:
        - faceListId
      type: object
    FaceLists:
      description: An array of face list results, with fields of faceListId, name and
        userData
      items:
        $ref: "#/components/schemas/FaceList"
      type: array
    FaceRectangle:
      description: A rectangle within which a face can be found
      properties:
        height:
          description: The height of the rectangle, in pixels.
          format: int32
          type: integer
        left:
          description: The distance from the left edge if the image to the left edge of the
            rectangle, in pixels.
          format: int32
          type: integer
        top:
          description: The distance from the top edge if the image to the top edge of the
            rectangle, in pixels.
          format: int32
          type: integer
        width:
          description: The width of the rectangle, in pixels.
          format: int32
          type: integer
      required:
        - width
        - height
        - left
        - top
      type: object
    FacialHair:
      description: Properties describing facial hair attributes.
      properties:
        beard:
          $ref: "#/components/schemas/Confidence"
        moustache:
          $ref: "#/components/schemas/Confidence"
        sideburns:
          $ref: "#/components/schemas/Confidence"
      type: object
    FindSimilarRequest:
      description: Request body for find similar operation.
      properties:
        faceId:
          description: FaceId of the query face. User needs to call Face - Detect first to
            get a valid faceId. Note that this faceId is not persisted and will
            expire 24 hours after the detection call
          format: uuid
          type: string
        faceIds:
          description: An array of candidate faceIds. All of them are created by Face -
            Detect and the faceIds will expire 24 hours after the detection
            call. The number of faceIds is limited to 1000. Parameter
            faceListId, largeFaceListId and faceIds should not be provided at
            the same time.
          items:
            format: uuid
            type: string
          maxItems: 1000
          type: array
        faceListId:
          description: An existing user-specified unique candidate face list, created in
            Face List - Create a Face List. Face list contains a set of
            persistedFaceIds which are persisted and will never expire.
            Parameter faceListId, largeFaceListId and faceIds should not be
            provided at the same time.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        largeFaceListId:
          description: An existing user-specified unique candidate large face list, created
            in LargeFaceList - Create. Large face list contains a set of
            persistedFaceIds which are persisted and will never expire.
            Parameter faceListId, largeFaceListId and faceIds should not be
            provided at the same time.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        maxNumOfCandidatesReturned:
          default: 20
          description: The number of top similar faces returned. The valid range is [1,
            1000].
          maximum: 1000
          minimum: 1
          type: integer
        mode:
          default: matchPerson
          description: Similar face searching mode. It can be "matchPerson" or "matchFace".
          enum:
            - matchPerson
            - matchFace
          type: string
          x-ms-enum:
            modelAsString: false
            name: FindSimilarMatchMode
          nullable: false
      required:
        - faceId
      type: object
    GroupRequest:
      description: Request body for group request.
      properties:
        faceIds:
          description: Array of candidate faceId created by Face - Detect. The maximum is
            1000 faces
          items:
            format: uuid
            type: string
            nullable: false
          maxItems: 1000
          type: array
      required:
        - faceIds
      type: object
    GroupResult:
      description: An array of face groups based on face similarity.
      properties:
        groups:
          description: A partition of the original faces based on face similarity. Groups
            are ranked by number of faces
          items:
            items:
              format: uuid
              type: string
              nullable: false
            type: array
          type: array
        messyGroup:
          description: Face ids array of faces that cannot find any similar faces from
            original faces.
          items:
            format: uuid
            type: string
            nullable: false
          type: array
      required:
        - groups
      type: object
    Hair:
      description: Properties describing hair attributes.
      properties:
        bald:
          $ref: "#/components/schemas/Confidence"
        hairColor:
          $ref: "#/components/schemas/HairColors"
        invisible:
          description: A boolean value describing whether the hair is visible in the image.
          type: boolean
          nullable: false
      type: object
    HairColor:
      description: Hair color and associated confidence
      properties:
        color:
          description: Name of the hair color.
          enum:
            - unknown
            - white
            - gray
            - blond
            - brown
            - red
            - black
            - other
          type: string
          x-ms-enum:
            modelAsString: false
            name: HairColorType
          nullable: false
        confidence:
          $ref: "#/components/schemas/Confidence"
      type: object
    HairColors:
      items:
        $ref: "#/components/schemas/HairColor"
      type: array
    HeadPose:
      description: Properties indicating head pose of the face.
      properties:
        pitch:
          type: number
          nullable: false
        roll:
          type: number
          nullable: false
        yaw:
          type: number
          nullable: false
      type: object
    IdentifyCandidate:
      description: All possible faces that may qualify.
      properties:
        confidence:
          $ref: "#/components/schemas/Confidence"
        personId:
          description: Id of candidate
          format: uuid
          type: string
      required:
        - personId
        - confidence
      type: object
    IdentifyRequest:
      description: Request body for identify face operation.
      properties:
        confidenceThreshold:
          $ref: "#/components/schemas/Confidence"
        faceIds:
          description: Array of query faces faceIds, created by the Face - Detect. Each of
            the faces are identified independently. The valid number of faceIds
            is between [1, 10].
          items:
            format: uuid
            type: string
            nullable: false
          maxItems: 10
          type: array
        largePersonGroupId:
          description: LargePersonGroupId of the target large person group, created by
            LargePersonGroup - Create. Parameter personGroupId and
            largePersonGroupId should not be provided at the same time.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        maxNumOfCandidatesReturned:
          default: 1
          description: The range of maxNumOfCandidatesReturned is between 1 and 5 (default
            is 1).
          maximum: 5
          minimum: 1
          type: integer
        personGroupId:
          description: PersonGroupId of the target person group, created by PersonGroup -
            Create. Parameter personGroupId and largePersonGroupId should not be
            provided at the same time.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
      required:
        - faceIds
      type: object
    IdentifyResult:
      description: Response body for identify face operation.
      properties:
        candidates:
          description: Identified person candidates for that face (ranked by confidence).
            Array size should be no larger than input
            maxNumOfCandidatesReturned. If no person is identified, will return
            an empty array.
          items:
            $ref: "#/components/schemas/IdentifyCandidate"
          type: array
        faceId:
          description: FaceId of the query face
          format: uuid
          type: string
      required:
        - faceId
        - candidates
      type: object
    IdentifyResults:
      items:
        $ref: "#/components/schemas/IdentifyResult"
      type: array
    LargeFaceList:
      allOf:
        - $ref: "#/components/schemas/MetaDataContract"
      description: Large face list object.
      properties:
        largeFaceListId:
          description: LargeFaceListId of the target large face list.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
      required:
        - largeFaceListId
      type: object
    LargeFaceLists:
      description: An array of large face list results, with fields of largeFaceListId,
        name and userData
      items:
        $ref: "#/components/schemas/LargeFaceList"
      type: array
    LargePersonGroup:
      allOf:
        - $ref: "#/components/schemas/MetaDataContract"
      description: Large person group object.
      properties:
        largePersonGroupId:
          description: LargePersonGroupId of the target large person groups
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
      required:
        - largePersonGroupId
      type: object
    LargePersonGroups:
      description: An array of large person groups.
      items:
        $ref: "#/components/schemas/LargePersonGroup"
      type: array
    Level:
      description: A number ranging from 0 to 1 indicating the intensity level associated
        with a property.
      maximum: 1
      minimum: 0
      type: number
    Makeup:
      description: Properties describing present makeups on a given face.
      properties:
        eyeMakeup:
          description: A boolean value describing whether eye makeup is present on a face.
          type: boolean
          nullable: false
        lipMakeup:
          description: A boolean value describing whether lip makeup is present on a face.
          type: boolean
          nullable: false
      type: object
    MetaDataContract:
      allOf:
        - $ref: "#/components/schemas/NameAndUserDataContract"
      description: A combination of user defined name and user specified data and
        recognition model name for largePersonGroup/personGroup, and
        largeFaceList/faceList.
      properties:
        recognitionModel:
          $ref: "#/components/schemas/RecognitionModel"
      type: object
    NameAndUserDataContract:
      description: A combination of user defined name and user specified data for the
        person, largePersonGroup/personGroup, and largeFaceList/faceList.
      properties:
        name:
          description: User defined name, maximum length is 128.
          maxLength: 128
          type: string
        userData:
          description: User specified data. Length should not exceed 16KB.
          maxLength: 16384
          type: string
      type: object
    Noise:
      description: Properties describing noise level of the image.
      properties:
        noiseLevel:
          description: An enum value indicating level of noise.
          enum:
            - Low
            - Medium
            - High
          type: string
          x-ms-enum:
            modelAsString: false
            name: NoiseLevel
          nullable: false
        value:
          $ref: "#/components/schemas/Level"
      type: object
    Occlusion:
      description: Properties describing occlusions on a given face.
      properties:
        eyeOccluded:
          description: A boolean value indicating whether eyes are occluded.
          type: boolean
          nullable: false
        foreheadOccluded:
          description: A boolean value indicating whether forehead is occluded.
          type: boolean
          nullable: false
        mouthOccluded:
          description: A boolean value indicating whether the mouth is occluded.
          type: boolean
          nullable: false
      type: object
    OperationStatus:
      description: Operation status object. Operation refers to the asynchronous backend
        task including taking a snapshot and applying a snapshot.
      properties:
        createdTime:
          description: A combined UTC date and time string that describes the time when the
            operation (take or apply a snapshot) is requested. E.g.
            2018-12-25T11:41:02.2331413Z.
          format: date-time
          type: string
        lastActionTime:
          description: A combined UTC date and time string that describes the last time the
            operation (take or apply a snapshot) is actively migrating data. The
            lastActionTime will keep increasing until the operation finishes.
            E.g. 2018-12-25T11:51:27.8705696Z.
          format: date-time
          type: string
        message:
          description: Show failure message when operation fails (omitted when operation
            succeeds).
          type: string
        resourceLocation:
          description: When the operation succeeds successfully, for snapshot taking
            operation the snapshot id will be included in this field, and for
            snapshot applying operation, the path to get the target object will
            be returned in this field.
          type: string
        status:
          description: 'Operation status: notstarted, running, succeeded, failed. If the
            operation is requested and waiting to perform, the status is
            notstarted. If the operation is ongoing in backend, the status is
            running. Status succeeded means the operation is completed
            successfully, specifically for snapshot taking operation, it
            illustrates the snapshot is well taken and ready to apply, and for
            snapshot applying operation, it presents the target object has
            finished creating by the snapshot and ready to be used. Status
            failed is often caused by editing the source object while taking the
            snapshot or editing the target object while applying the snapshot
            before completion, see the field "message" to check the failure
            reason.'
          enum:
            - notstarted
            - running
            - succeeded
            - failed
          type: string
          x-ms-enum:
            modelAsString: false
            name: OperationStatusType
      required:
        - status
        - createdTime
      type: object
    PersistedFace:
      description: PersonFace object.
      properties:
        persistedFaceId:
          description: The persistedFaceId of the target face, which is persisted and will
            not expire. Different from faceId created by Face - Detect and will
            expire in 24 hours after the detection call.
          format: uuid
          type: string
        userData:
          description: User-provided data attached to the face. The size limit is 1KB.
          maxLength: 1024
          type: string
      required:
        - persistedFaceId
      type: object
    PersistedFaces:
      description: An array of persisted faces within the face list or large face list.
      items:
        $ref: "#/components/schemas/PersistedFace"
      type: array
    Person:
      allOf:
        - $ref: "#/components/schemas/NameAndUserDataContract"
      description: Person object.
      properties:
        persistedFaceIds:
          description: PersistedFaceIds of registered faces in the person. These
            persistedFaceIds are returned from Person - Add a Person Face, and
            will not expire.
          items:
            format: uuid
            type: string
            nullable: false
          type: array
        personId:
          description: PersonId of the target face list.
          format: uuid
          type: string
      required:
        - personId
      type: object
    PersonGroup:
      allOf:
        - $ref: "#/components/schemas/MetaDataContract"
      description: Person group object.
      properties:
        personGroupId:
          description: PersonGroupId of the target person group.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
      required:
        - personGroupId
      type: object
    PersonGroups:
      description: An array of person groups.
      items:
        $ref: "#/components/schemas/PersonGroup"
      type: array
    Persons:
      description: An array of Persons.
      items:
        $ref: "#/components/schemas/Person"
      type: array
    RecognitionModel:
      default: recognition_01
      description: Name of recognition model. Recognition model is used when the face
        features are extracted and associated with detected faceIds,
        (Large)FaceList or (Large)PersonGroup. A recognition model name can be
        provided when performing Face - Detect or (Large)FaceList - Create or
        (Large)PersonGroup - Create. The default value is 'recognition_01', if
        latest model needed, please explicitly specify the model you need.
      enum:
        - recognition_01
        - recognition_02
      type: string
      x-ms-enum:
        modelAsString: true
        name: RecognitionModel
      nullable: false
    SimilarFace:
      description: Response body for find similar face operation.
      properties:
        confidence:
          $ref: "#/components/schemas/Confidence"
        faceId:
          description: FaceId of candidate face when find by faceIds. faceId is created by
            Face - Detect and will expire 24 hours after the detection call
          format: uuid
          type: string
        persistedFaceId:
          description: PersistedFaceId of candidate face when find by faceListId.
            persistedFaceId in face list is persisted and will not expire. As
            showed in below response
          format: uuid
          type: string
      required:
        - confidence
      type: object
    SimilarFaces:
      items:
        $ref: "#/components/schemas/SimilarFace"
      type: array
    Snapshot:
      description: Snapshot object.
      properties:
        account:
          description: Azure Cognitive Service Face account id of the subscriber who
            created the snapshot by Snapshot - Take.
          type: string
        applyScope:
          $ref: "#/components/schemas/ApplyScope"
        createdTime:
          description: A combined UTC date and time string that describes the created time
            of the snapshot. E.g. 2018-12-25T11:41:02.2331413Z.
          format: date-time
          type: string
        id:
          description: Snapshot id.
          format: uuid
          type: string
        lastUpdateTime:
          description: A combined UTC date and time string that describes the last time
            when the snapshot was created or updated by Snapshot - Update. E.g.
            2018-12-25T11:51:27.8705696Z.
          format: date-time
          type: string
        type:
          description: Type of the source object in the snapshot, specified by the
            subscriber who created the snapshot when calling Snapshot - Take.
            Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup
            are supported.
          enum:
            - FaceList
            - LargeFaceList
            - LargePersonGroup
            - PersonGroup
          type: string
          x-ms-enum:
            modelAsString: false
            name: SnapshotObjectType
        userData:
          description: User specified data about the snapshot for any purpose. Length
            should not exceed 16KB.
          maxLength: 16384
          type: string
      required:
        - id
        - account
        - type
        - applyScope
        - createdTime
        - lastUpdateTime
      type: object
    Snapshots:
      description: An array of snapshots.
      items:
        $ref: "#/components/schemas/Snapshot"
      type: array
    TakeSnapshotRequest:
      description: Request body for taking snapshot operation.
      properties:
        applyScope:
          $ref: "#/components/schemas/ApplyScope"
        objectId:
          description: User specified source object id to take snapshot from.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        type:
          description: User specified type for the source object to take snapshot from.
            Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup
            are supported.
          enum:
            - FaceList
            - LargeFaceList
            - LargePersonGroup
            - PersonGroup
          type: string
          x-ms-enum:
            modelAsString: false
            name: SnapshotObjectType
        userData:
          description: User specified data about the snapshot for any purpose. Length
            should not exceed 16KB.
          maxLength: 16384
          type: string
      required:
        - type
        - objectId
        - applyScope
      type: object
    TrainingStatus:
      description: Training status object.
      properties:
        createdDateTime:
          description: A combined UTC date and time string that describes the created time
            of the person group, large person group or large face list.
          format: date-time
          type: string
          x-ms-client-name: created
        lastActionDateTime:
          description: A combined UTC date and time string that describes the last modify
            time of the person group, large person group or large face list,
            could be null value when the group is not successfully trained.
          format: date-time
          type: string
          x-ms-client-name: lastAction
        lastSuccessfulTrainingDateTime:
          description: A combined UTC date and time string that describes the last
            successful training time of the person group, large person group or
            large face list.
          format: date-time
          type: string
          x-ms-client-name: lastSuccessfulTraining
        message:
          description: Show failure message when training failed (omitted when training
            succeed).
          type: string
        status:
          description: "Training status: notstarted, running, succeeded, failed. If the
            training process is waiting to perform, the status is notstarted. If
            the training is ongoing, the status is running. Status succeed means
            this person group or large person group is ready for Face -
            Identify, or this large face list is ready for Face - Find Similar.
            Status failed is often caused by no person or no persisted face
            exist in the person group or large person group, or no persisted
            face exist in the large face list."
          enum:
            - nonstarted
            - running
            - succeeded
            - failed
          type: string
          x-ms-enum:
            modelAsString: false
            name: TrainingStatusType
      required:
        - status
        - createdDateTime
      type: object
    UpdateFaceRequest:
      description: Request to update face data.
      properties:
        userData:
          description: User-provided data attached to the face. The size limit is 1KB.
          maxLength: 1024
          type: string
      type: object
    UpdateSnapshotRequest:
      description: Request body for updating a snapshot, with a combination of user defined
        apply scope and user specified data.
      properties:
        applyScope:
          $ref: "#/components/schemas/ApplyScope"
        userData:
          description: User specified data about the snapshot for any purpose. Length
            should not exceed 16KB.
          maxLength: 16384
          type: string
      type: object
    VerifyFaceToFaceRequest:
      description: Request body for face to face verification.
      properties:
        faceId1:
          description: FaceId of the first face, comes from Face - Detect
          format: uuid
          type: string
        faceId2:
          description: FaceId of the second face, comes from Face - Detect
          format: uuid
          type: string
      required:
        - faceId1
        - faceId2
      type: object
    VerifyFaceToPersonRequest:
      description: Request body for face to person verification.
      properties:
        faceId:
          description: FaceId of the face, comes from Face - Detect
          format: uuid
          type: string
        largePersonGroupId:
          description: Using existing largePersonGroupId and personId for fast loading a
            specified person. largePersonGroupId is created in LargePersonGroup
            - Create. Parameter personGroupId and largePersonGroupId should not
            be provided at the same time.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        personGroupId:
          description: Using existing personGroupId and personId for fast loading a
            specified person. personGroupId is created in PersonGroup - Create.
            Parameter personGroupId and largePersonGroupId should not be
            provided at the same time.
          maxLength: 64
          pattern: ^[a-z0-9-_]+$
          type: string
        personId:
          description: Specify a certain person in a person group or a large person group.
            personId is created in PersonGroup Person - Create or
            LargePersonGroup Person - Create.
          format: uuid
          type: string
      required:
        - faceId
        - personId
      type: object
    VerifyResult:
      description: Result of the verify operation.
      properties:
        confidence:
          $ref: "#/components/schemas/Confidence"
        isIdentical:
          description: True if the two faces belong to the same person or the face belongs
            to the person, otherwise false.
          type: boolean
      required:
        - isIdentical
        - confidence
      type: object
