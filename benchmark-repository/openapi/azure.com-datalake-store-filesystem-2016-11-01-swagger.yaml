openapi: 3.0.0
info:
  description: Creates an Azure Data Lake Store filesystem client.
  title: DataLakeStoreFileSystemManagementClient
  version: 2016-11-01
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/datalake-store/data-plane/Microsoft.DataLakeStore/stable/2016-11-01/filesystem.json
      version: "2.0"
  x-preferred: true
  x-providerName: azure.com
  x-serviceName: datalake-store-filesystem
  x-tags:
    - Azure
    - Microsoft
paths:
  "/WebHdfsExt/{path}":
    post:
      description: "Appends to the specified file, optionally first creating the file if it
        does not yet exist. This method supports multiple concurrent appends to
        the file. NOTE: The target must not contain data added by Create or
        normal (serial) Append. ConcurrentAppend and Append cannot be used
        interchangeably; once a target file has been modified using either of
        these append options, the other append option cannot be used on the
        target file. ConcurrentAppend does not guarantee order and can result in
        duplicated data landing in the target file."
      operationId: FileSystem_ConcurrentAppend
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file to which to
            append using concurrent append.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file":
              value: test_file_path
        - description: Indicates the concurrent append call should create the file if it
            doesn't exist or just open the existing file for append
          in: query
          name: appendMode
          required: false
          x-ms-enum:
            modelAsString: false
            name: AppendModeType
          schema:
            type: string
            enum:
              - autocreate
          examples:
            "Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file":
              value: autocreate
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - CONCURRENTAPPEND
          examples:
            "Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file":
              value: CONCURRENTAPPEND
        - description: Indicates the data being sent to the server is being streamed in
            chunks.
          in: header
          name: Transfer-Encoding
          required: true
          schema:
            type: string
            enum:
              - chunked
          examples:
            "Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file":
              value: chunked
        - description: Optionally indicates what to do after completion of the concurrent
            append. DATA indicates that more data will be sent immediately by
            the client, the file handle should remain open/locked, and file
            metadata (including file length, last modified time) should NOT get
            updated. METADATA indicates that more data will be sent immediately
            by the client, the file handle should remain open/locked, and file
            metadata should get updated. CLOSE indicates that the client is done
            sending data, the file handle should be closed/unlocked, and file
            metadata should get updated.
          in: query
          name: syncFlag
          required: false
          x-ms-enum:
            modelAsString: false
            name: SyncFlag
          schema:
            type: string
            enum:
              - DATA
              - METADATA
              - CLOSE
            default: DATA
          examples:
            "Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file":
              value: DATA
        - $ref: "#/components/parameters/ApiVersionParameter"
      requestBody:
        $ref: "#/components/requestBodies/FileSystem_ConcurrentAppendStreamcontents"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
    put:
      description: Sets or removes the expiration time on the specified file. This
        operation can only be executed against files. Folders are not supported.
      operationId: FileSystem_SetFileExpiry
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file on which to
            set or remove the expiration time.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported:
              value: test_file_path
        - description: "Indicates the type of expiration to use for the file: 1.
            NeverExpire: ExpireTime is ignored. 2. RelativeToNow: ExpireTime is
            an integer in milliseconds representing the expiration date relative
            to when file expiration is updated. 3. RelativeToCreationDate:
            ExpireTime is an integer in milliseconds representing the expiration
            date relative to file creation. 4. Absolute: ExpireTime is an
            integer in milliseconds, as a Unix timestamp relative to 1/1/1970
            00:00:00."
          in: query
          name: expiryOption
          required: true
          x-ms-enum:
            modelAsString: false
            name: ExpiryOptionType
          schema:
            type: string
            enum:
              - NeverExpire
              - RelativeToNow
              - RelativeToCreationDate
              - Absolute
          examples:
            Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported:
              value: NeverExpire
        - description: The time that the file will expire, corresponding to the
            ExpiryOption that was set.
          in: query
          name: expireTime
          required: false
          schema:
            type: integer
            format: int64
          examples:
            Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported:
              value: 1
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - SETEXPIRY
          examples:
            Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported:
              value: SETEXPIRY
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: Successfully set the expiration time on the specified file.
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}":
    get:
      description: Checks if the specified access is available at the given path.
      operationId: FileSystem_CheckAccess
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory for which to check access.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Checks if the specified access is available at the given path:
              value: test_file_path
        - description: File system operation read/write/execute in string form, matching
            regex pattern '[rwx-]{3}'
          in: query
          name: fsaction
          required: true
          schema:
            type: string
          examples:
            Checks if the specified access is available at the given path:
              value: test_fsaction
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - CHECKACCESS
          examples:
            Checks if the specified access is available at the given path:
              value: CHECKACCESS
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
x-ms-paths:
  "/webhdfs/v1/{path}?op=APPEND":
    post:
      description: "Used for serial appends to the specified file. NOTE: The target must
        not contain data added by ConcurrentAppend. ConcurrentAppend and Append
        cannot be used interchangeably; once a target file has been modified
        using either of these append options, the other append option cannot be
        used on the target file."
      operationId: FileSystem_Append
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file to which to
            append.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: test_file_path
        - description: The optional offset in the stream to begin the append operation.
            Default is to append at the end of the stream.
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int64
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: 1
        - description: Optionally indicates what to do after completion of the concurrent
            append. DATA indicates that more data will be sent immediately by
            the client, the file handle should remain open/locked, and file
            metadata (including file length, last modified time) should NOT get
            updated. METADATA indicates that more data will be sent immediately
            by the client, the file handle should remain open/locked, and file
            metadata should get updated. CLOSE indicates that the client is done
            sending data, the file handle should be closed/unlocked, and file
            metadata should get updated.
          in: query
          name: syncFlag
          required: false
          x-ms-enum:
            modelAsString: false
            name: SyncFlag
          schema:
            type: string
            enum:
              - DATA
              - METADATA
              - CLOSE
            default: CLOSE
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: DATA
        - description: Optional unique GUID per file to ensure single writer semantics,
            meaning that only clients that append to the file with the same
            leaseId will be allowed to do so.
          in: query
          name: leaseId
          required: false
          schema:
            type: string
            format: uuid
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: 34adfa4f-cedf-4dc0-ba29-b6d1a69ab345
        - description: Optional unique GUID per file indicating all the appends with the
            same fileSessionId are from the same client and same session. This
            will give a performance benefit when syncFlag is DATA or METADATA.
          in: query
          name: fileSessionId
          required: false
          schema:
            type: string
            format: uuid
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: 34adfa4f-cedf-4dc0-ba29-b6d1a69ab346
        - description: Flag to skip redirection. When append=false or not specified, the
            request is redirected. Submit another HTTP PUT request using the URL
            in the Location header with the file data to be written. When
            append=true, this redirection is skipped.
          in: query
          name: append
          required: true
          schema:
            type: string
            enum:
              - "true"
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: "true"
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - APPEND
          examples:
            "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
              value: APPEND
        - $ref: "#/components/parameters/ApiVersionParameter"
      requestBody:
        $ref: "#/components/requestBodies/FileSystem_ConcurrentAppendStreamcontents"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=CONCAT":
    post:
      description: Concatenates the list of source files into the destination file,
        removing all source files upon success.
      operationId: FileSystem_Concat
      parameters:
        - description: The Data Lake Store path (starting with '/') of the destination file
            resulting from the concatenation.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Concatenates the list of source files into the destination file, removing all source files upon success":
              value: test_file_path
        - description: A list of comma separated Data Lake Store paths (starting with '/')
            of the files to concatenate, in the order in which they should be
            concatenated.
          in: query
          name: sources
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          examples:
            "Concatenates the list of source files into the destination file, removing all source files upon success":
              value:
                - test_source_1
                - test_source_2
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - CONCAT
          examples:
            "Concatenates the list of source files into the destination file, removing all source files upon success":
              value: CONCAT
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=CREATE":
    put:
      description: "Creates a file with optionally specified content. NOTE: If content is
        provided, the resulting file cannot be modified using ConcurrentAppend."
      operationId: FileSystem_Create
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file to create.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: test_file_path
        - description: The indication of if the file should be overwritten.
          in: query
          name: overwrite
          required: false
          schema:
            type: boolean
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: false
        - description: Optionally indicates what to do after completion of the create. DATA
            indicates that more data will be sent immediately by the client, the
            file handle should remain open/locked, and file metadata (including
            file length, last modified time) should NOT get updated. METADATA
            indicates that more data will be sent immediately by the client, the
            file handle should remain open/locked, and file metadata should get
            updated. CLOSE indicates that the client is done sending data, the
            file handle should be closed/unlocked, and file metadata should get
            updated.
          in: query
          name: syncFlag
          required: false
          x-ms-enum:
            modelAsString: false
            name: SyncFlag
          schema:
            type: string
            enum:
              - DATA
              - METADATA
              - CLOSE
            default: CLOSE
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: DATA
        - description: Optional unique GUID per file to ensure single writer semantics,
            meaning that only clients that append to the file with the same
            leaseId will be allowed to do so.
          in: query
          name: leaseId
          required: false
          schema:
            type: string
            format: uuid
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: 34adfa4f-cedf-4dc0-ba29-b6d1a69ab345
        - description: The octal representation of the unnamed user, mask and other
            permissions that should be set for the file when created. If not
            specified, it inherits these from the container.
          in: query
          name: permission
          schema:
            type: integer
            format: int32
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: 1
        - description: Flag to skip redirection. When write=false or not specified, the
            request is redirected. Submit another HTTP PUT request using the URL
            in the Location header with the file data to be written. When
            write=true, this redirection is skipped.
          in: query
          name: write
          required: true
          schema:
            type: string
            enum:
              - "true"
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: "true"
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - CREATE
          examples:
            "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
              value: CREATE
        - $ref: "#/components/parameters/ApiVersionParameter"
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: file
              type: object
        description: The file contents to include when creating the file. This parameter is
          optional, resulting in an empty file if not specified.  The maximum
          content size is 4MB.  For content larger than 4MB you must append the
          content in 4MB chunks.
      responses:
        "201":
          description: CREATED
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=DELETE":
    delete:
      description: Deletes the requested file or directory, optionally recursively.
      operationId: FileSystem_Delete
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory to delete.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Deletes the requested file or directory, optionally recursively":
              value: test_file_path
        - description: The optional switch indicating if the delete should be recursive
          in: query
          name: recursive
          required: false
          schema:
            type: boolean
          examples:
            "Deletes the requested file or directory, optionally recursively":
              value: false
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - DELETE
          examples:
            "Deletes the requested file or directory, optionally recursively":
              value: DELETE
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileOperationResult"
              examples:
                "Deletes the requested file or directory, optionally recursively":
                  $ref: "#/components/examples/Deletes_the_requested_file_or_direct\
                    ory_optionally_recursively"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=GETACLSTATUS":
    get:
      description: Gets Access Control List (ACL) entries for the specified file or
        directory.
      operationId: FileSystem_GetAclStatus
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory for which to get the ACL.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Gets Access Control List (ACL) entries for the specified file or directory:
              value: test_file_path
        - description: An optional switch to return friendly names in place of object ID
            for ACL entries. tooId=false returns friendly names instead of the
            AAD Object ID. Default value is true, returning AAD object IDs.
          in: query
          name: tooId
          required: false
          schema:
            type: boolean
          examples:
            Gets Access Control List (ACL) entries for the specified file or directory:
              value: false
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - GETACLSTATUS
          examples:
            Gets Access Control List (ACL) entries for the specified file or directory:
              value: GETACLSTATUS
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AclStatusResult"
              examples:
                Gets Access Control List (ACL) entries for the specified file or directory:
                  $ref: "#/components/examples/Gets_Access_Control_List_ACL_entries\
                    _for_the_specified_file_or_directory"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=GETCONTENTSUMMARY":
    get:
      description: Gets the file content summary object specified by the file path.
      operationId: FileSystem_GetContentSummary
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file for which
            to retrieve the summary.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Gets the file content summary object specified by the file path:
              value: test_file_path
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - GETCONTENTSUMMARY
          examples:
            Gets the file content summary object specified by the file path:
              value: GETCONTENTSUMMARY
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentSummaryResult"
              examples:
                Gets the file content summary object specified by the file path:
                  $ref: "#/components/examples/Gets_the_file_content_summary_object\
                    _specified_by_the_file_path"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=GETFILESTATUS":
    get:
      description: Get the file status object specified by the file path.
      operationId: FileSystem_GetFileStatus
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory for which to retrieve the status.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Get the file status object specified by the file path:
              value: test_file_path
        - description: An optional switch to return friendly names in place of owner and
            group. tooId=false returns friendly names instead of the AAD Object
            ID. Default value is true, returning AAD object IDs.
          in: query
          name: tooId
          required: false
          schema:
            type: boolean
          examples:
            Get the file status object specified by the file path:
              value: false
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - GETFILESTATUS
          examples:
            Get the file status object specified by the file path:
              value: GETFILESTATUS
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileStatusResult"
              examples:
                Get the file status object specified by the file path:
                  $ref: "#/components/examples/Get_the_file_status_object_specified\
                    _by_the_file_path"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=LISTSTATUS":
    get:
      description: Get the list of file status objects specified by the file path, with
        optional pagination parameters
      operationId: FileSystem_ListFileStatus
      parameters:
        - description: The Data Lake Store path (starting with '/') of the directory to
            list.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Get the list of file status objects specified by the file path, with optional pagination parameters":
              value: test_file_path
        - description: Gets or sets the number of items to return. Optional.
          in: query
          name: listSize
          required: false
          schema:
            type: integer
            format: int32
          examples:
            "Get the list of file status objects specified by the file path, with optional pagination parameters":
              value: 1
        - description: Gets or sets the item or lexicographical index after which to begin
            returning results. For example, a file list of 'a','b','d' and
            listAfter='b' will return 'd', and a listAfter='c' will also return
            'd'. Optional.
          in: query
          name: listAfter
          required: false
          schema:
            type: string
          examples:
            "Get the list of file status objects specified by the file path, with optional pagination parameters":
              value: test_list_after
        - description: Gets or sets the item or lexicographical index before which to begin
            returning results. For example, a file list of 'a','b','d' and
            listBefore='d' will return 'a','b', and a listBefore='c' will also
            return 'a','b'. Optional.
          in: query
          name: listBefore
          required: false
          schema:
            type: string
          examples:
            "Get the list of file status objects specified by the file path, with optional pagination parameters":
              value: test_list_before
        - description: An optional switch to return friendly names in place of owner and
            group. tooId=false returns friendly names instead of the AAD Object
            ID. Default value is true, returning AAD object IDs.
          in: query
          name: tooId
          required: false
          schema:
            type: boolean
          examples:
            "Get the list of file status objects specified by the file path, with optional pagination parameters":
              value: false
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - LISTSTATUS
          examples:
            "Get the list of file status objects specified by the file path, with optional pagination parameters":
              value: LISTSTATUS
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileStatusesResult"
              examples:
                "Get the list of file status objects specified by the file path, with optional pagination parameters":
                  $ref: "#/components/examples/Get_the_list_of_file_status_objects_\
                    specified_by_the_file_path_with_optional_pagination_paramet\
                    ers"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=MKDIRS":
    put:
      description: Creates a directory.
      operationId: FileSystem_Mkdirs
      parameters:
        - description: The Data Lake Store path (starting with '/') of the directory to
            create.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Creates a directory:
              value: test_file_path
        - description: Optional octal permission with which the directory should be created.
          in: query
          name: permission
          required: false
          schema:
            type: integer
            format: int32
          examples:
            Creates a directory:
              value: 1
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - MKDIRS
          examples:
            Creates a directory:
              value: MKDIRS
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileOperationResult"
              examples:
                Creates a directory:
                  $ref: "#/components/examples/Creates_a_directory"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=MODIFYACLENTRIES":
    put:
      description: Modifies existing Access Control List (ACL) entries on a file or folder.
      operationId: FileSystem_ModifyAclEntries
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory with the ACL being modified.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Modifies existing Access Control List (ACL) entries on a file or folder:
              value: test_file_path
        - description: The ACL specification included in ACL modification operations in the
            format '[default:]user|group|other::r|-w|-x|-'
          in: query
          name: aclspec
          required: true
          schema:
            type: string
          examples:
            Modifies existing Access Control List (ACL) entries on a file or folder:
              value: user:2666084e-edd4-4276-9a8c-d1024a5e3d94:rwx
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - MODIFYACLENTRIES
          examples:
            Modifies existing Access Control List (ACL) entries on a file or folder:
              value: MODIFYACLENTRIES
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=MSCONCAT":
    post:
      description: Concatenates the list of source files into the destination file,
        deleting all source files upon success. This method accepts more source
        file paths than the Concat method. This method and the parameters it
        accepts are subject to change for usability in an upcoming version.
      operationId: FileSystem_MsConcat
      parameters:
        - description: The Data Lake Store path (starting with '/') of the destination file
            resulting from the concatenation.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            "Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version":
              value: test_file_path
        - description: "Indicates that as an optimization instead of deleting each
            individual source stream, delete the source stream folder if all
            streams are in the same folder instead. This results in a
            substantial performance improvement when the only streams in the
            folder are part of the concatenation operation. WARNING: This
            includes the deletion of any other files that are not source files.
            Only set this to true when source files are the only files in the
            source directory."
          in: query
          name: deleteSourceDirectory
          required: false
          schema:
            type: boolean
          examples:
            "Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version":
              value: false
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - MSCONCAT
          examples:
            "Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version":
              value: MSCONCAT
        - $ref: "#/components/parameters/ApiVersionParameter"
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: file
              type: object
        description: "A list of Data Lake Store paths (starting with '/') of the source
          files. Must be a comma-separated path list in the format:
          sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv"
        required: true
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=OPEN":
    get:
      description: Opens and reads from the specified file.
      operationId: FileSystem_Open
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file to open.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Opens and reads from the specified file:
              value: test_file_path
        - description: The number of bytes that the server will attempt to retrieve. It
            will retrieve <= length bytes.
          in: query
          name: length
          required: false
          schema:
            type: integer
            format: int64
          examples:
            Opens and reads from the specified file:
              value: 1
        - description: The byte offset to start reading data from.
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int64
          examples:
            Opens and reads from the specified file:
              value: 1
        - description: Optional unique GUID per file indicating all the reads with the same
            fileSessionId are from the same client and same session. This will
            give a performance benefit.
          in: query
          name: fileSessionId
          required: false
          schema:
            type: string
            format: uuid
          examples:
            Opens and reads from the specified file:
              value: 34adfa4f-cedf-4dc0-ba29-b6d1a69ab345
        - description: Flag to skip redirection. When read=false or not specified, the
            request is redirected. Submit another HTTP PUT request using the URL
            in the Location header with the file data to be read. When
            read=true, this redirection is skipped.
          in: query
          name: read
          required: true
          schema:
            type: string
            enum:
              - "true"
          examples:
            Opens and reads from the specified file:
              value: "true"
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - OPEN
          examples:
            Opens and reads from the specified file:
              value: OPEN
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
              examples:
                Opens and reads from the specified file:
                  $ref: "#/components/examples/Opens_and_reads_from_the_specified_f\
                    ile"
        default:
          description: An unexpected error from the server.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=REMOVEACL":
    put:
      description: Removes the existing Access Control List (ACL) of the specified file or
        directory.
      operationId: FileSystem_RemoveAcl
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory with the ACL being removed.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Removes the existing Access Control List (ACL) of the specified file or directory:
              value: test_file_path
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - REMOVEACL
          examples:
            Removes the existing Access Control List (ACL) of the specified file or directory:
              value: REMOVEACL
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: Successfully removed the Access Control List on the specified file
            or directory.
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=REMOVEACLENTRIES":
    put:
      description: Removes existing Access Control List (ACL) entries for a file or folder.
      operationId: FileSystem_RemoveAclEntries
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory with the ACL being removed.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Removes existing Access Control List (ACL) entries for a file or folder:
              value: test_file_path
        - description: The ACL spec included in ACL removal operations in the format
            '[default:]user|group|other'
          in: query
          name: aclspec
          required: true
          schema:
            type: string
          examples:
            Removes existing Access Control List (ACL) entries for a file or folder:
              value: user:2666084e-edd4-4276-9a8c-d1024a5e3d94
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - REMOVEACLENTRIES
          examples:
            Removes existing Access Control List (ACL) entries for a file or folder:
              value: REMOVEACLENTRIES
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=REMOVEDEFAULTACL":
    put:
      description: Removes the existing Default Access Control List (ACL) of the specified
        directory.
      operationId: FileSystem_RemoveDefaultAcl
      parameters:
        - description: The Data Lake Store path (starting with '/') of the directory with
            the default ACL being removed.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Removes the existing Default Access Control List (ACL) of the specified directory:
              value: test_file_path
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - REMOVEDEFAULTACL
          examples:
            Removes the existing Default Access Control List (ACL) of the specified directory:
              value: REMOVEDEFAULTACL
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: Successfully Removed the Default Access Control List on the
            specified directory.
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=RENAME":
    put:
      description: Rename a file or directory.
      operationId: FileSystem_Rename
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory to move/rename.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Rename a file or directory:
              value: test_file_path
        - description: The path to move/rename the file or folder to
          in: query
          name: destination
          required: true
          schema:
            type: string
          examples:
            Rename a file or directory:
              value: /test_destination_path
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - RENAME
          examples:
            Rename a file or directory:
              value: RENAME
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileOperationResult"
              examples:
                Rename a file or directory:
                  $ref: "#/components/examples/Rename_a_file_or_directory"
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=SETACL":
    put:
      description: Sets the Access Control List (ACL) for a file or folder.
      operationId: FileSystem_SetAcl
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory on which to set the ACL.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Sets the Access Control List (ACL) for a file or folder:
              value: test_file_path
        - description: The ACL spec included in ACL creation operations in the format
            '[default:]user|group|other::r|-w|-x|-'
          in: query
          name: aclspec
          required: true
          schema:
            type: string
          examples:
            Sets the Access Control List (ACL) for a file or folder:
              value: user:2666084e-edd4-4276-9a8c-d1024a5e3d94:rwx
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - SETACL
          examples:
            Sets the Access Control List (ACL) for a file or folder:
              value: SETACL
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=SETOWNER":
    put:
      description: Sets the owner of a file or directory.
      operationId: FileSystem_SetOwner
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory for which to set the owner.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Sets the owner of a file or directory:
              value: test_file_path
        - description: The AAD Object ID of the user owner of the file or directory. If
            empty, the property will remain unchanged.
          in: query
          name: owner
          required: false
          schema:
            type: string
          examples:
            Sets the owner of a file or directory:
              value: test_owner
        - description: The AAD Object ID of the group owner of the file or directory. If
            empty, the property will remain unchanged.
          in: query
          name: group
          required: false
          schema:
            type: string
          examples:
            Sets the owner of a file or directory:
              value: test_group
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - SETOWNER
          examples:
            Sets the owner of a file or directory:
              value: SETOWNER
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
  "/webhdfs/v1/{path}?op=SETPERMISSION":
    put:
      description: Sets the permission of the file or folder.
      operationId: FileSystem_SetPermission
      parameters:
        - description: The Data Lake Store path (starting with '/') of the file or
            directory for which to set the permission.
          in: path
          name: path
          required: true
          schema:
            type: string
          examples:
            Sets the owner of a file or directory:
              value: test_file_path
        - description: A string representation of the permission (i.e 'rwx'). If empty,
            this property remains unchanged.
          in: query
          name: permission
          required: false
          schema:
            type: string
          examples:
            Sets the owner of a file or directory:
              value: rwx
        - description: The constant value for the operation.
          in: query
          name: op
          required: true
          schema:
            type: string
            enum:
              - SETPERMISSION
          examples:
            Sets the owner of a file or directory:
              value: SETPERMISSION
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: OK
        default:
          description: An unexpected error from the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdlsError"
      tags:
        - FileSystem
servers:
  - url: https://azure.local
  - url: https://{accountName}.{adlsFileSystemDnsSuffix}
    variables:
      accountName:
        description: The Azure Data Lake Store account to execute filesystem operations on.
        x-ms-skip-url-encoding: true
        default: ""
      adlsFileSystemDnsSuffix:
        default: azuredatalakestore.net
        description: Gets the URI used as the base for all cloud service requests.
        x-ms-parameter-location: client
        x-ms-skip-url-encoding: true
components:
  examples:
    Deletes_the_requested_file_or_directory_optionally_recursively:
      value:
        boolean: false
    Gets_Access_Control_List_ACL_entries_for_the_specified_file_or_directory:
      value:
        aclStatus:
          entries:
            - test_entry_1
            - test_entry_2
          group: test_group
          owner: test_owner
          permission: "1"
          stickyBit: false
    Gets_the_file_content_summary_object_specified_by_the_file_path:
      value:
        contentSummary:
          directoryCount: 1
          fileCount: 1
          length: 1
          spaceConsumed: 1
    Get_the_file_status_object_specified_by_the_file_path:
      value:
        fileStatus:
          accessTime: 1
          aclBit: false
          blockSize: 1
          group: test_group
          length: 1
          modificationTime: 1
          msExpirationTime: 1
          owner: test_owner
          pathSuffix: test_path_suffix
          permission: test_permission
          type: FILE
    Get_the_list_of_file_status_objects_specified_by_the_file_path_with_optional_pagination_parameters:
      value:
        fileStatuses:
          fileStatus:
            - accessTime: 1
              aclBit: false
              blockSize: 1
              group: test_group
              length: 1
              modificationTime: 1
              msExpirationTime: 1
              owner: test_owner
              pathSuffix: test_path_suffix
              permission: test_permission
              type: FILE
    Creates_a_directory:
      value:
        boolean: false
    Opens_and_reads_from_the_specified_file:
      value: This is actually a byte stream. This request/response is being presented
        as a string for readability in the example
    Rename_a_file_or_directory:
      value:
        boolean: false
  parameters:
    ApiVersionParameter:
      description: Client Api Version.
      in: query
      name: api-version
      required: true
      schema:
        type: string
      examples:
        "Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file":
          value: 2016-11-01
        Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported:
          value: 2016-11-01
        Checks if the specified access is available at the given path:
          value: 2016-11-01
        "Used for serial appends to the specified file. NOTE: The target must not contain data added by ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file":
          value: 2016-11-01
        "Concatenates the list of source files into the destination file, removing all source files upon success":
          value: 2016-11-01
        "Creates a file with optionally specified content. NOTE: If content is provided, the resulting file cannot be modified using ConcurrentAppend":
          value: 2016-11-01
        "Deletes the requested file or directory, optionally recursively":
          value: 2016-11-01
        Gets Access Control List (ACL) entries for the specified file or directory:
          value: 2016-11-01
        Gets the file content summary object specified by the file path:
          value: 2016-11-01
        Get the file status object specified by the file path:
          value: 2016-11-01
        "Get the list of file status objects specified by the file path, with optional pagination parameters":
          value: 2016-11-01
        Creates a directory:
          value: 2016-11-01
        Modifies existing Access Control List (ACL) entries on a file or folder:
          value: 2016-11-01
        "Concatenates the list of source files into the destination file, deleting all source files upon success. This method accepts more source file paths than the Concat method. This method and the parameters it accepts are subject to change for usability in an upcoming version":
          value: 2016-11-01
        Opens and reads from the specified file:
          value: 2016-11-01
        Removes the existing Access Control List (ACL) of the specified file or directory:
          value: 2016-11-01
        Removes existing Access Control List (ACL) entries for a file or folder:
          value: 2016-11-01
        Removes the existing Default Access Control List (ACL) of the specified directory:
          value: 2016-11-01
        Rename a file or directory:
          value: 2016-11-01
        Sets the Access Control List (ACL) for a file or folder:
          value: 2016-11-01
        Sets the owner of a file or directory:
          value: 2016-11-01
    adlsFilesystemDnsSuffixInPath:
      description: Gets the URI used as the base for all cloud service requests.
      in: path
      name: adlsFileSystemDnsSuffix
      required: true
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
      schema:
        type: string
        default: azuredatalakestore.net
  requestBodies:
    FileSystem_ConcurrentAppendStreamcontents:
      content:
        application/octet-stream:
          schema:
            format: file
            type: object
      description: The file contents to include when appending to the file.  The maximum
        content size is 4MB.  For content larger than 4MB you must append the
        content in 4MB chunks.
      required: true
  schemas:
    AclStatus:
      description: Data Lake Store file or directory Access Control List information.
      properties:
        entries:
          description: the list of ACLSpec entries on a file or directory.
          items:
            type: string
          type: array
        group:
          description: the group owner, an AAD Object ID.
          type: string
        owner:
          description: the user owner, an AAD Object ID.
          type: string
        permission:
          description: The octal representation of the unnamed user, mask and other
            permissions.
          type: string
        stickyBit:
          description: the indicator of whether the sticky bit is on or off.
          readOnly: true
          type: boolean
    AclStatusResult:
      description: Data Lake Store file or directory Access Control List information.
      properties:
        aclStatus:
          $ref: "#/components/schemas/AclStatus"
    AdlsAccessControlException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating that access is denied due to
        insufficient permissions. Thrown when a 403 error response code is
        returned (forbidden).
      x-ms-discriminator-value: AccessControlException
    AdlsBadOffsetException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating the append or read is from a bad
        offset. Thrown when a 400 error response code is returned for append and
        open operations (Bad request).
      x-ms-discriminator-value: BadOffsetException
    AdlsError:
      description: Data Lake Store filesystem error containing a specific WebHDFS exception.
      properties:
        remoteException:
          $ref: "#/components/schemas/AdlsRemoteException"
    AdlsFileAlreadyExistsException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating the file or folder already exists.
        Thrown when a 403 error response code is returned (forbidden).
      x-ms-discriminator-value: FileAlreadyExistsException
    AdlsFileNotFoundException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating the file or folder could not be
        found. Thrown when a 404 error response code is returned (not found).
      x-ms-discriminator-value: FileNotFoundException
    AdlsIOException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating there was an IO (read or write)
        error. Thrown when a 403 error response code is returned (forbidden).
      x-ms-discriminator-value: IOException
    AdlsIllegalArgumentException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating that one more arguments is
        incorrect. Thrown when a 400 error response code is returned (bad
        request).
      x-ms-discriminator-value: IllegalArgumentException
    AdlsRemoteException:
      description: Data Lake Store filesystem exception based on the WebHDFS definition for
        RemoteExceptions. This is a WebHDFS 'catch all' exception
      discriminator:
        propertyName: exception
      properties:
        exception:
          description: the class name of the exception thrown, such as
            'IllegalArgumentException'.
          type: string
        javaClassName:
          description: the full class package name for the exception thrown, such as
            'java.lang.IllegalArgumentException'.
          readOnly: true
          type: string
        message:
          description: the message associated with the exception that was thrown, such as
            'Invalid value for webhdfs parameter "permission":...'.
          readOnly: true
          type: string
      required:
        - exception
    AdlsRuntimeException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown when an unexpected error occurs during an
        operation. Thrown when a 500 error response code is returned (Internal
        server error).
      x-ms-discriminator-value: RuntimeException
    AdlsSecurityException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating that access is denied. Thrown when
        a 401 error response code is returned (Unauthorized).
      x-ms-discriminator-value: SecurityException
    AdlsThrottledException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating that the request is being
        throttled. Reducing the number of requests or request size helps to
        mitigate this error.
      x-ms-discriminator-value: ThrottledException
    AdlsUnsupportedOperationException:
      allOf:
        - $ref: "#/components/schemas/AdlsRemoteException"
      description: A WebHDFS exception thrown indicating that the requested operation is
        not supported. Thrown when a 400 error response code is returned (bad
        request).
      x-ms-discriminator-value: UnsupportedOperationException
    ContentSummary:
      description: Data Lake Store content summary information
      properties:
        directoryCount:
          description: the number of directories.
          format: int64
          readOnly: true
          type: integer
        fileCount:
          description: the number of files.
          format: int64
          readOnly: true
          type: integer
        length:
          description: the number of bytes used by the content.
          format: int64
          readOnly: true
          type: integer
        spaceConsumed:
          description: the disk space consumed by the content.
          format: int64
          readOnly: true
          type: integer
    ContentSummaryResult:
      description: Data Lake Store filesystem content summary information response.
      properties:
        contentSummary:
          $ref: "#/components/schemas/ContentSummary"
    FileOperationResult:
      description: The result of the request or operation.
      properties:
        boolean:
          description: the result of the operation or request.
          readOnly: true
          type: boolean
          x-ms-client-name: operationResult
    FileStatusProperties:
      description: Data Lake Store file or directory information.
      properties:
        accessTime:
          description: the last access time as ticks since the epoch.
          format: int64
          readOnly: true
          type: integer
        aclBit:
          description: "flag to indicate if extended acls are enabled "
          readOnly: true
          type: boolean
        blockSize:
          description: the block size for the file.
          format: int64
          readOnly: true
          type: integer
        group:
          description: the group owner.
          readOnly: true
          type: string
        length:
          description: the number of bytes in a file.
          format: int64
          readOnly: true
          type: integer
        modificationTime:
          description: the modification time as ticks since the epoch.
          format: int64
          readOnly: true
          type: integer
        msExpirationTime:
          description: Gets the expiration time, if any, as ticks since the epoch. If the
            value is 0 or DateTime.MaxValue there is no expiration.
          format: int64
          readOnly: true
          type: integer
          x-ms-client-name: expirationTime
        owner:
          description: the user who is the owner.
          readOnly: true
          type: string
        pathSuffix:
          description: the path suffix.
          readOnly: true
          type: string
        permission:
          description: the permission represented as an string.
          readOnly: true
          type: string
        type:
          description: the type of the path object.
          enum:
            - FILE
            - DIRECTORY
          readOnly: true
          type: string
          x-ms-enum:
            modelAsString: false
            name: FileType
    FileStatusResult:
      description: Data Lake Store filesystem file status information response.
      properties:
        fileStatus:
          $ref: "#/components/schemas/FileStatusProperties"
    FileStatuses:
      description: Data Lake Store file status list information.
      properties:
        fileStatus:
          description: the object containing the list of properties of the files.
          items:
            $ref: "#/components/schemas/FileStatusProperties"
          readOnly: true
          type: array
    FileStatusesResult:
      description: Data Lake Store filesystem file status list information response.
      properties:
        fileStatuses:
          $ref: "#/components/schemas/FileStatuses"
