openapi: 3.0.0
info:
  contact:
    email: develop@ssp-europe.eu
    x-twitter: dracoongmbh
  description: "REST Web Services for DRACOON.<br> Version. 4.5.0  - built at:
    1517571015562"
  termsOfService: https://www.dracoon.com/terms/general-terms-and-conditions/
  title: DRACOON
  version: 4.5.0
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://twitter.com/dracoongmbh/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://dracoon.team/api/spec_v4/
      version: "2.0"
  x-providerName: dracoon.team
tags:
  - description: File download without auth headers
    name: downloads
  - description: User groups
    name: groups
  - description: Upload and Download Shares
    name: shares
  - description: Current user operations
    name: user
  - description: Authentication
    name: auth
  - description: System events log
    name: eventlog
  - description: User management
    name: users
  - description: System settings
    name: system
  - description: File system objects (rooms, folders, files)
    name: nodes
  - description: Configuration
    name: config
  - description: "System events log (DEPRECATED: use eventlog)"
    name: syslog
  - description: Provisioning interface
    name: provisioning
  - description: "Public: shares upload/download, software info"
    name: public
  - description: Role user managment
    name: roles
  - description: File upload without auth headers
    name: uploads
paths:
  /v4/auth/login:
    post:
      description: >-
        ### Functional Description:

        Authenticates user and provides an authentication token that is required for most operations.


        ### Precondition:

        Existing user that is not locked.


        ### Effects:

        User is logged in.


        ### Further Information:

        The provided token is valid for **2 hours**, every usage resets this period to 2 full hours again.  

        Logging off invalidates the token.  


        ### Important:  

        * If auth type `radius` is used, a token (request parameter) may be set, otherwise this parameter is ignored.  

        * If the token is set, `password` is optional for this auth type.


        ### Currently supported languages (with ISO 639-1 code):

        * German (de)

        * English (en)

        * Spanish (es)

        * French (fr)
      operationId: login
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        description: User credentials
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: >-
            Bad Request


            * [-10010] Provided language is not supported.

            * [-10100] Invalid authentication method.

            * [-80000] Mandatory fields cannot be empty.

            * [-90057] The domain has to be provided with the user name in the following way: domain\\username.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10011] Wrong username or password.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: >-
            Forbidden


            * [-10003] User is locked by an administrator.

            * [-10004] User has expired.

            * [-10005] User is temporarily locked. (Unlock time will be delivered in ISO 8601 format [2014-12-23T13:24:00Z]).

            * [-10007] Customer for this user is locked.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * [-40010] Could not create Home Room.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10108] RADIUS Access-Challenge required.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RadiusChallengeResponse"
        "502":
          description: |-
            Bad Gateway

            * [-90055] Invalid Active Directory Configuration.
            * [-90070] RADIUS connection failed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Authenticate user
      tags:
        - auth
  /v4/auth/openid/login:
    post:
      description: >-
        ### Functional Description:  

        This is the second step of the OpenID Connect authentication.  

        The user hands over the authorization code and is logged in.


        ### Precondition:

        Existing user with activated OpenID Connect authentication that is not locked.


        ### Effects:

        User is logged in.


        ### Further Information:

        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: completeOpenIdLogin
      parameters:
        - description: Authorization code
          in: query
          name: code
          required: true
          schema:
            type: string
        - description: Authentication state
          in: query
          name: state
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: |-
            Bad Request

            * [-10100] Invalid authentication method.
            * [-80000] Mandatory fields cannot be empty.
            * [-90043] Invalid authentication state.
        "403":
          description: >-
            Forbidden


            * [-10003] User is locked by an administrator.

            * [-10004] User has expired.

            * [-10005] User is temporarily locked. (Unlock time will be delivered in ISO 8601 format [2014-12-23T13:24:00Z]).

            * [-10007] Customer for this user is locked.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "502":
          description: |-
            Bad Gateway

            * [-90044] Identity retrieval failed.
            * [-90045] Identity validation failed.
            * [-90046] User information retrieval failed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Complete OpenID Connect authentication
      tags:
        - auth
  /v4/auth/openid/resources:
    get:
      deprecated: true
      description: |-
        ### Functional Description:  
        Provides information about OpenID Connect authentication options.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOpenIdAuthResources
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OpenIdAuthResources"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OpenID Connect authentication resources
      tags:
        - auth
  /v4/auth/ping:
    get:
      description: |-
        ### Functional Description:
        Test connection to DRACOON Server.

        ### Precondition:
        None.

        ### Effects:
        `200 OK` with current date string is returned if successful.

        ### Further Information:
        None.
      operationId: ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "406":
          description: |
            Not Acceptable
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Ping
      tags:
        - auth
  /v4/auth/reset_password:
    post:
      description: >-
        ### Functional Description:  

        Request an email with a request token for a certain user to reset his / her password.


        ### Precondition:

        Registered user account.


        ### Effects:

        Provided user receives email with reset token.


        ### Further Information:

        None.


        ### Currently supported languages (with ISO 639-1 code):

        * German (de)

        * English (en)

        * Spanish (es)

        * French (fr)
      operationId: requestPasswordReset
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-10010] Provided language is not supported.
            * [-10105] Password cannot be reset for this user.
            * [-10107] Password can only be reset every 5 minutes.
            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Request password reset
      tags:
        - auth
  "/v4/auth/reset_password/{token}":
    get:
      description: >-
        ### Functional Description:  

        Request all information for a password change dialogue e.g. real name of user.


        ### Precondition:

        User received a password reset token.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: validateResetPasswordToken
      parameters:
        - description: Password reset token
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ResetPasswordTokenValidateResponse"
        "400":
          description: |-
            Bad Request

            * [-10001] Password reset token is modified.
            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * Token not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get information for password reset
      tags:
        - auth
    put:
      description: |-
        ### Functional Description:  
        Resets a user's password to a new value.

        ### Precondition:
        User received a password reset token.

        ### Effects:
        Newly transmitted password is set.

        ### Further Information:
        None.
      operationId: resetPassword
      parameters:
        - description: Password reset token
          in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/ResetPasswordWithTokenRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-10002] Password is not secure.
            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * Token not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Reset password
      tags:
        - auth
  /v4/auth/resources:
    get:
      deprecated: true
      description: >-
        ### Functional Description:  

        Provides information about authentication options.


        ### Precondition: 

        None.


        ### Effects: 

        None.


        ### Further Information:

        The server identifies the relevant customer by the passed HTTP header `Origin`.  

        Use this call to customize the log-on form.  


        ### Important: 

        The default language and authentication method are always provided as topmost entry.


        ### Currently supported languages (with ISO 639-1 code):

        * German (de)

        * English (en)

        * Spanish (es)

        * French (fr)
      operationId: getAuthInitResources
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/AuthInitResources"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get authentication resources
      tags:
        - auth
  /v4/config/authSettings:
    get:
      description: >-
        ### Functional Description:  

        Retrieve the settings of authentication configuration.


        ### Precondition:

        Right _"read global config"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Configuration settings for various authentication methods


        ### Authentication Methods


        * **sql**  
            **Basic Authentication globally allowed**  
            This option must be activated to allow users to log in with their credentials stored in the database.  
            VALUE: `[true|false]`

        * **active_directory**  
            **Active Directory Authentication globally allowed**  
            This option must be activated to allow users to log in with their Active Directory credentials.  
            VALUE: `[true|false]`

        * **radius**  
            **RADIUS Authentication globally allowed**  
            This option must be activated to allow users to log in with their RADIUS username, their PIN and a token password.  
            VALUE: `[true|false]`

        * **openid**  
            **OpenID Connect Authentication globally allowed**  
            This option must be activated to allow users to log in with their OpenID Connect identity.  
            VALUE: `[true|false]`

        * **default_auth_method**  
            **Default authentication method without user context**  
            If this option is set, the chosen method will be provided as default authentication method if no user context is available.  
            Only one authentication method can be set and it must be allowed (see above).  
            If no value is set, there is no guarantee about the order of the returned methods.  
            Only activated authentication methods may be set as default authentication method.  
            VALUE: `[sql|active_directory|radius|openid]`

        ### Configurable settings for RADIUS authentication


        ### `DEPRECATED`


        These settings will be ignored.  

        Please use `/system/config/auth/radius` API.


        * **radius-ip**  
            IP address of the RADIUS server  
            VALUE: `IPv4 address`

        * **radius-port**  
            Port of the RADIUS server (usually 1812)  
            VALUE: `Port`

        * **radius-sharedsec**  
            Shared Secret to access the RADIUS server  
            VALUE: `Shared Secret`

        * **radius-otpPinFirst**  
            Sequence order of concatenated PIN and One-Time token  
            VALUE: `[true|false]`
      operationId: getAuthSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ConfigOptionList"
        "401":
          description: |
            Unauthorized
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get authentication settings
      tags:
        - config
    put:
      description: >-
        ### Functional Description:

        Change one or more settings of authentication configuration.


        ### Precondition:

        Right _"change global config"_ required.


        ### Effects:

        One or more global authentication setting gets changed.


        ### Further Information:

        None.


        ### Configuration settings for various authentication methods


        ### Authentication Methods


        * **sql**  
            **Basic Authentication globally allowed**  
            This option must be activated to allow users to log in with their credentials stored in the database.  
            VALUE: `[true|false]`

        * **active_directory**  
            **Active Directory Authentication globally allowed**  
            This option must be activated to allow users to log in with their Active Directory credentials.  
            VALUE: `[true|false]`

        * **radius**  
            **RADIUS Authentication globally allowed**  
            This option must be activated to allow users to log in with their RADIUS username, their PIN and a token password.  
            VALUE: `[true|false]`

        * **openid**  
            **OpenID Connect Authentication globally allowed**  
            This option must be activated to allow users to log in with their OpenID Connect identity.  
            VALUE: `[true|false]`

        * **default_auth_method**  
            **Default authentication method without user context**  
            If this option is set, the chosen method will be provided as default authentication method if no user context is available.  
            Only one authentication method can be set and it must be allowed (see above).  
            If no value is set, there is no guarantee about the order of the returned methods.  
            Only activated authentication methods may be set as default authentication method.  
            VALUE: `[sql|active_directory|radius|openid]`

        ### Configurable settings for RADIUS authentication


        ### `DEPRECATED`


        These settings will be ignored.  

        Please use `PUT /system/config/auth/radius` API.


        * **radius-ip**  
            IP address of the RADIUS server  
            VALUE: `IPv4 address`

        * **radius-port**  
            Port of the RADIUS server (usually 1812)  
            VALUE: `Port`

        * **radius-sharedsec**  
            Shared Secret to access the RADIUS server  
            VALUE: `Shared Secret`

        * **radius-otpPinFirst**  
            Sequence order of concatenated PIN and One-Time token  
            VALUE: `[true|false]`
      operationId: setAuthSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ConfigOptionList"
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-10100] Invalid authentication method.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80005] Not valid boolean value.
            * [-80020] Not valid IP address.
            * [-90071] Cannot enable RADIUS. No Valid Configuration.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90000] Settings key not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Change authentication setting
      tags:
        - config
  /v4/config/settings:
    get:
      description: >-
        ### Functional Description:  

        DRACOON configuration entry point.  

        Returns a list of configurable system settings.


        ### Precondition:

        Right _"read global config"_ required.


        ### Effects:

        None.


        ### Further Information:


        ### Attention

        If `eula_active` is true, but not accepted yet, or password must be changed, only the following two values are returned:

        * **allow_system_global_weak_password**

        * **eula_active**


        ### Configurable settings


        * **allow_system_global_weak_password**  
            Allow weak password
            * A weak password has to fulfill the following criteria:  
                * is at least 8 characters long  
                * contains letters and numbers
            * A strong password has to fulfill the following criteria in addition:  
                * contains at least one special character  
                * contains upper and lower case characters

            VALUE: `[true|false]`

        * **branding_server_branding_id** **`NEW`**  
            The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.  
            VALUE: `String`

        * **branding_portal_url** **`NEW`**  
            Access URL to to the Branding Portal.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `String`

        * **branding_server_customer**  
            The UUID of the branding server customer, which corresponds to customer key in the branding server.  
            VALUE: `String`

        * **branding_server_url**  
            Access URL to to the Branding Server.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `String`

        * **connect_as_drive**  
            Rooms can be mounted by WebDAV.  
            VALUE: `[true|false]`

        * **dblog**  
            Write logs to local database  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **default_downloadshare_expiration_period**  
            Default expiration period for Download Shares in days.  
            VALUE: `Integer between 0 and 9999`

        * **default_file_upload_expiration_date**  
            Default expiration period for all uploaded files in days.  
            VALUE: `Integer between 0 and 9999` (set 0 to disable)

        * **default_language**  
            Define which language should be default.  
            VALUE: `cf. GET /auth/resources Model "Language"`

        * **default_uploadshare_expiration_period**  
            Default expiration period for Upload Shares in days.  
            VALUE: `Integer between 0 and 9999`

        * **email_from**  
            Sender of system-generated emails  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `Valid email address`

        * **email_to_sales**  
            Contact email address for customers to request more user licenses or data volume.  
            VALUE: `Valid email address`

        * **email_to_support**  
            Support email address for users.  
            VALUE: `Valid email address`

        * **enable_client_side_crypto**  
            Activation status of **TripleCrypt™ Technology**.  
            Can only be enabled once; disabling is not possible.  
            VALUE: `[true|false]` (default: `false`)

        * **eula_active**  
            Each user has to confirm the EULA at first login.  
            VALUE: `[true|false]`

        * **eventlog_retention_period**  
            Retention period (in days) of event log entries.  
            After that period, all entries are deleted.  
            Recommended value: 7  
            VALUE: `Integer between 0 and 9999` (if set to 0: no logs are deleted)

        * **file_size_js**  
            Maximum file size (in bytes) for downloads of encrypted files with JavaScript.  
            Bigger files will require a JavaApplet.  
            Recommended value: 10485760 (= 10MB)  
            VALUE: `Integer`

        * **ip_address_logging**  
            Determines whether a user's IP address is logged on login.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **mailserver**  
            Email server to send emails  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `DNS name or IPv4 of an email server`

        * **mailserver_authentication_necessary**  
            Set to true if the email server requires authentication.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **mailserver_password**  

        **Password is no longer returned.**


        * **mailserver_password_set**  
            Indicates if a password is set for the mailserver (because `mailserver_password` is always returned empty)  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **mailserver_port**  
            Email server port  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `Positive number`

        * **mailserver_username**  
            User name for email server  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `User name for authentication`

        * **mailserver_use_ssl**  
            Email server requires SSL connection?  
            Only visible for _Config Manager_ of Provider Customer  
            Requires mailserver_use_starttls to be false  
            VALUE: `[true|false]`

        * **mailserver_use_starttls**  
            Email server requires StartTLS connection?  
            Only visible for _Config Manager_ of Provider Customer  
            Requires mailserver_use_ssl to be false  
            VALUE: `[true|false]`

        * **syslog**  
            Write logs to a syslog interface  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **syslog_host**  
            Syslog Server (IP or FQDN)  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `DNS name or IPv4 of a syslog server`

        * **syslog_port**  
            Syslog server port  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `Positive Number`

        * **syslog_protocol**  
            Protocol to connect to syslog server  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[TCP|UDP]`

        * **system_name**  
            System name  
            VALUE: `Display name of the DRACOON`

        * **enable_email_notification_button**  
            Enable mail notification button  
            VALUE: `[true|false]`

        * **allow_share_password_sms**  
            Allow sending of share passwords via SMS  
            VALUE: `[true|false]`

        * **globally_allow_share_password_sms**  
            Allow sending of share passwords via SMS  
            Read only  
            VALUE: `[true|false]`

        * **use_s3_storage**  
            Defines if S3 is used as storage backend  
            Read only  
            VALUE: `[true|false]`

        * **s3_default_region**  
            Suggested S3 region  
            Read only  
            VALUE: `Region name`
      operationId: getSystemSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ConfigOptionList"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get system settings
      tags:
        - config
    put:
      description: >-
        ### Functional Description:

        DRACOON configuration entry point.  

        Returns a list of configurable settings.


        ### Precondition:

        Right _"change global config"_ required.


        ### Effects:

        One or more global authentication setting gets changed.


        ### Further Information:


        ### Attention

        Only visible for _Config Manager_ of Provider Customer.


        ### Settings


        ### Configurable settings


        * **allow_system_global_weak_password**  
            Allow weak password
            * A weak password has to fulfill the following criteria:  
                * is at least 8 characters long  
                * contains letters and numbers
            * A strong password has to fulfill the following criteria in addition:  
                * contains at least one special character  
                * contains upper and lower case characters

            VALUE: `[true|false]`

        * **branding_server_branding_id** **`NEW`**  
            The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.  
            VALUE: `String`

        * **branding_portal_url** **`NEW`**  
            Access URL to to the Branding Portal.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `String`

        * **branding_server_customer**  
            The UUID of the branding server customer, which corresponds to customer key in the branding server.  
            VALUE: `String`

        * **branding_server_url**  
            Access URL to to the Branding Server.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `String`

        * **connect_as_drive**  
            Rooms can be mounted by WebDAV.  
            VALUE: `[true|false]`

        * **dblog**  
            Write logs to local database  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **default_downloadshare_expiration_period**  
            Default expiration period for Download Shares in days.  
            VALUE: `Integer between 0 and 9999`

        * **default_file_upload_expiration_date**  
            Default expiration period for all uploaded files in days.  
            VALUE: `Integer between 0 and 9999` (set 0 to disable)

        * **default_language**  
            Define which language should be default.  
            VALUE: `cf. GET /auth/resources Model "Language"`

        * **default_uploadshare_expiration_period**  
            Default expiration period for Upload Shares in days.  
            VALUE: `Integer between 0 and 9999`

        * **email_from**  
            Sender of system-generated emails  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `Valid email address`

        * **email_to_sales**  
            Contact email address for customers to request more user licenses or data volume.  
            VALUE: `Valid email address`

        * **email_to_support**  
            Support email address for users.  
            VALUE: `Valid email address`

        * **enable_client_side_crypto**  
            Activation status of **TripleCrypt™ technology**.  
            Can only be enabled once; disabling is not possible.  
            VALUE: `[true|false]` (default: `false`)

        * **eula_active**  
            Each user has to confirm the EULA at first login.  
            VALUE: `[true|false]`

        * **eventlog_retention_period**  
            Retention period (in days) of event log entries.  
            After that period, all entries are deleted.  
            Recommended value: 7  
            VALUE: `Integer between 0 and 9999` (if set to 0: no logs are deleted)

        * **file_size_js**  
            Maximum file size (in bytes) for downloads of encrypted files with JavaScript.  
            Bigger files will require a JavaApplet.  
            Recommended value: 10485760 (= 10MB)  
            VALUE: `Integer`

        * **ip_address_logging**  
            Determines whether a user's IP address is logged on login.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **mailserver**  
            Email server to send emails  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `DNS name or IPv4 of an email server`

        * **mailserver_authentication_necessary**  
            Set to true if the email server requires authentication.  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **mailserver_password**  
            Password for email server  
            VALUE: `Password for authentication`

        * **mailserver_port**  
            Email server port  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `Positive number`

        * **mailserver_username**  
            User name for email server  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `User name for authentication`

        * **mailserver_use_ssl**  
            Email server requires SSL connection?  
            Only visible for _Config Manager_ of Provider Customer  
            Requires mailserver_use_starttls to be false  
            VALUE: `[true|false]`

        * **mailserver_use_starttls**  
            Email server requires StartTLS connection?  
            Only visible for _Config Manager_ of Provider Customer  
            Requires mailserver_use_ssl to be false  
            VALUE: `[true|false]`

        * **syslog**  
            Write logs to a syslog interface  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[true|false]`

        * **syslog_host**  
            Syslog Server (IP or FQDN)  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `DNS name or IPv4 of a syslog server`

        * **syslog_port**  
            Syslog server port  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `Positive Number`

        * **syslog_protocol**  
            Protocol to connect to syslog server  
            Only visible for _Config Manager_ of Provider Customer  
            VALUE: `[TCP|UDP]`

        * **system_name**  
            System name  
            VALUE: `Display name of the DRACOON`

        * **enable_email_notification_button**  
            Enable mail notification button  
            VALUE: `[true|false]`

        * **allow_share_password_sms**  
            Allow sending of share passwords via SMS  
            VALUE: `[true|false]`
      operationId: setSystemSetting
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ConfigOptionList"
      responses:
        "204":
          description: No Content
        "400":
          description: >-
            Bad Request


            * [-10010] Provided language is not supported.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80009] Not a valid email address.

            * [-80012] Not allowed protocol.

            * [-80013] Not a valid hostname or IP address.

            * [-80018] Not between 0 and 9999.

            * [-80019] Not between 1 and 9999.

            * [-80029] Global configuration value cannot be overwritten.

            * [-90001] Cannot use both SSL and STARTTLS for mail.

            * [-90010] TripleCrypt™ technology is already active and can not be deactivated.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90000] Settings key not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Change system settings
      tags:
        - config
  "/v4/downloads/zip/{token}":
    get:
      description: |-
        ### Functional Description:  
        Download multiple files in a ZIP archive.

        ### Precondition:
        Valid download token.

        ### Effects:
        None.

        ### Further Information:
        Create a download token with `POST /nodes/zip`.
      operationId: getZipFileByToken
      parameters:
        - description: Download token
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-50001] Download token not found.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Download ZIP file
      tags:
        - downloads
  "/v4/downloads/{token}":
    get:
      description: >-
        ### Functional Description:  

        Download a file.


        ### Precondition:

        Valid download token.


        ### Effects:

        None.


        ### Further Information:

        Range requests are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileDataByToken
      parameters:
        - description: Download token
          in: path
          name: token
          required: true
          schema:
            type: string
        - description: Range
          in: header
          name: Range
          required: false
          schema:
            type: string
        - description: Always return 'application/octet-stream' instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "206":
          description: Partial Content
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-50001] Download token not found.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "416":
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - downloads
    head:
      description: >-
        ### Functional Description:  

        Download a file.


        ### Precondition:

        Valid download token.


        ### Effects:

        None.


        ### Further Information:

        Range requests are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileDataByToken_1
      parameters:
        - description: Download token
          in: path
          name: token
          required: true
          schema:
            type: string
        - description: Range
          in: header
          name: Range
          required: false
          schema:
            type: string
        - description: Always return 'application/octet-stream' instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "206":
          description: Partial Content
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-50001] Download token not found.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "416":
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - downloads
  /v4/eventlog/audits/nodes:
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of all nodes of type `room` and the room assignment users with permissions.


        ### Precondition:

        Right _"read audit log"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  

        Multiple fields are supported.


        ### Filter fields:


        * **nodeId**  
            Node ID  
            OPERATOR: `eq` (Node ID equal value)  
            VALUE: `Search string`

        * **nodeName**  
            Node name (Login)  
            OPERATOR: `cn|eq` (Node name contains value | equal value)  
            VALUE: `Search string`

        * **nodeParentId**  
            Node parent ID  
            OPERATOR: `eq` (Parent ID equal value; parent ID 0 is the root node.)  
            VALUE: `Search string`

        * **userId**  
            User ID  
            OPERATOR: `eq` (User ID equal value)  
            VALUE: `Search string`

        * **userName**  
            User name (Login)  
            OPERATOR: `cn|eq` (User name contains value | equal value)  
            VALUE: `Search string`

        * **userFirstName**  
            User first name  
            OPERATOR: `cn|eq` (User first name contains value | equal value)  
            VALUE: `Search string`

        * **userLastName**  
            User last name  
            OPERATOR: `cn|eq` (User last name contains value | equal value)  
            VALUE: `Search string`

        * **permissionsManage**  
            Filter the users that (don't) have manage right in this room  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

        * **nodeIsEncrypted**  
            Encrypted node filter  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

        * **nodeHasRecycleBin**  
            Recycle bin filter  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

            
        * **nodeHasActivitiesLog**  
            Activities log filter  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

        ### Logical grouping:

        Filtering according first three fields (`login`, `lastName`, `firstName`) is intrinsically processed by the API as logical _OR_.  

        In opposite, filtering according to is processed intrinsically as logical _AND_.


        ### Example:

        * `userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`  

        Filter by user login containing `searchString_1` OR first name containing `searchString_2` and node ID equal 2.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields are supported.


        ### Sort fields:


        * **nodeId**: Node ID

        * **nodeName**: Node name

        * **nodeParentId**: Node parent ID

        * **nodeSize**: Node size

        * **nodeQuota**: Node quota


        ### Example:

        * `nodeName:asc`  

        Sort by `nodeName` ascending.
      operationId: getAuditNodeUserData
      parameters:
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/AuditNodeResponse"
                type: array
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get node assigned users with permissions
      tags:
        - eventlog
  /v4/eventlog/events:
    get:
      description: |-
        ### Functional Description:  
        Retrieve eventlog (= audit log) events.

        ### Precondition:
        Role _"Log Auditor"_ required.

        ### Effects:
        None.

        ### Further Information:
        Output may be limited to a certain number of entries.  
        Please use filter criteria and paging.
      operationId: getLogEvents
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: |-
            Start date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_start
          required: false
          schema:
            type: string
        - description: |-
            End date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_end
          required: false
          schema:
            type: string
        - description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          in: query
          name: type
          required: false
          schema:
            type: integer
            format: int32
        - description: User ID
          in: query
          name: user_id
          required: false
          schema:
            type: integer
            format: int64
        - description: |-
            Operation status:
            * 0 - Success
            * 2 - Error
          in: query
          name: status
          required: false
          schema:
            type: integer
            format: int32
        - description: User client
          in: query
          name: user_client
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/LogEventList"
            text/csv:
              schema:
                $ref: "#/components/schemas/LogEventList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
            * [-80026] Not a valid operation ID.
            * [-80027] Not a valid operation status.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get system events
      tags:
        - eventlog
  /v4/eventlog/operations:
    get:
      description: >-
        ### Functional Description:  

        Retrieve eventlog (= audit log) operation IDs and the associated log operation description.


        ### Precondition:

        Role _"Log Auditor"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: getLogOperations
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/LogOperationList"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get allowed Log Operations
      tags:
        - eventlog
  /v4/groups:
    get:
      description: >-
        ### Functional Description:  

        Returns a list of user groups.


        ### Precondition:

        Right _"read groups"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filters


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`


        ### Filter fields:


        * **name**  
            Group name  
            OPERATOR: `cn` (Group name contains value; multiple values not allowed)  
            VALUE: `Search string`

        ### Example: 

        * `name:cn:searchString`  

        Filter by group `name` containing `searchString`.


        ### Sorting


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields are supported.


        ### Sort fields:


        * **name**: Group name

        * **createdAt**: Creation date

        * **expireAt**: Expiration date

        * **cntUsers**: Amount of users


        ### Example:

        * `name:asc|expireAt:desc`  

        Sort by `name` ascending and by `expireAt` descending.
      operationId: getGroups
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GroupList"
        "400":
          description: |-
            Bad Request

            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user groups
      tags:
        - groups
    post:
      description: |-
        ### Functional Description:
        Create a new user group.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        A new group is created.

        ### Further Information:
        * If a group should not expire, leave `expireAt` empty.
        * Group names are limited to **150** characters
        * Allowed characters: **All**
      operationId: createGroup
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: >-
            Bad Request


            * [-30020] Group must have at least 'read' right in parent room.

            * [-70510] User already in the group.

            * [-80000] Mandatory fields cannot be empty.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified group name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new user group
      tags:
        - groups
  "/v4/groups/{group_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete a user group.

        ### Precondition:
        Right _"delete groups"_ required.

        ### Effects:
        User group is deleted.

        ### Further Information:
        None.
      operationId: deleteGroup
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: >-
            Bad Request


            * [-30040] A group which is defined as AD Import Group can not be deleted.

            * [-40006] At least one admin user/group required.

            * [-71006] At least one role user/group required.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete user group
      tags:
        - groups
    get:
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one user group.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getGroup
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user group
      tags:
        - groups
    put:
      description: |-
        ### Functional Description:  
        Update the meta data of a user group.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        Meta data of a user group is updated.

        ### Further Information:
        * If a group should not expire, leave `expireAt` empty.
        * Group names are limited to **150** characters
        * Allowed characters: **All**
      operationId: updateGroup
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: >-
            Bad Request


            * [-30020] Group must have at least 'read' right in parent room.

            * [-40006] At least one admin user/group required.

            * [-71006] At least one role user/group required.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified group name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update user group
      tags:
        - groups
  "/v4/groups/{group_id}/roles":
    get:
      description: |-
        ### Functional Description:  
        Retrieve a list of all roles and the role assignment rights of a group.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getGroupRoles
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get group roles
      tags:
        - groups
  "/v4/groups/{group_id}/rooms":
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of rooms, that are granted or may be granted to the group.


        ### Precondition:

        Right _"read groups"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **name**  
            Room name  
            OPERATOR: `cn` (multiple values not allowed)  
            VALUE: `search string`

        * **isGranted**  
            Filter rooms which the group is or is not granted  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        * **effectivePerm**  
            Filter rooms with _DIRECT_ or _DIRECT_ **AND** _EFFECTIVE_ permissions  
            * `false`: _DIRECT_ permissions  
            * `true`:  _DIRECT_ **AND** _EFFECTIVE_ permissions  
            
            > _DIRECT_ means: e.g. room administrator grants read permissions to group of users **directly** on desired room.  
            _EFFECTIVE_ means: e.g. group of users gets read permissions on desired room through **inheritance**.  

            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]` (default: `true`)

        ### Example:

        * `isGranted:eq:false|name:cn:searchString`  

        Get all rooms where the group is not granted AND whose `name` is like `searchString`.
      operationId: getGroupRooms
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoomTreeDataList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get rooms granted to the group or/and rooms that can be granted
      tags:
        - groups
  "/v4/groups/{group_id}/users":
    delete:
      description: |-
        ### Functional Description:  
        Remove group members.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        Provided users are removed from the user group.

        ### Further Information:
        Batch function.  
        The provided users are removed from the user group.
      operationId: deleteGroupMembers
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ChangeGroupMembersRequest"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: |-
            Bad Request

            * [-71006] At least one role user/group required.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete group members
      tags:
        - groups
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of group members.


        ### Precondition:

        Right _"read groups"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **displayName**  
            User display name (`firstName`, `lastName`, `login`)  
            OPERATOR: `cn` (multiple values not allowed)  
            VALUE: `search string`

        * **isMember**  
            Filter the group members AND / OR users  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        ### Example:

        * `is_member:eq:false|displayName:cn:searchString`  

        Get all users that are not in this group AND whose display name is like `searchString`.
      operationId: getGroupUsers
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/GroupUserList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get group member users or/and users who can become a member
      tags:
        - groups
    post:
      description: |-
        ### Functional Description:
        Add members to a group.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        New members are added to the group.

        ### Further Information:
        Batch function.  
        The newly provided members will be added to the existing ones.
      operationId: addGroupMembers
      parameters:
        - description: Group ID
          in: path
          name: group_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ChangeGroupMembersRequest"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: |-
            Bad Request

            * [-70510] User already in the group.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add group members
      tags:
        - groups
  /v4/nodes:
    delete:
      description: |-
        ### Functional Description:
        Delete nodes (room, folder, file).

        ### Precondition:
        Authenticated user with _"delete"_ permissions on supplied nodes.

        ### Effects:
        Nodes are deleted.

        ### Further Information:
        Nodes must be in same parent.
      operationId: deleteNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/DeleteNodesRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-10006] User has no permissions to delete file(s).
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeBatchOperationErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete file system nodes
      tags:
        - nodes
    get:
      description: >-
        ### Functional Description:  

        Provides a hierarchical list of file system nodes (rooms, folders, files) of a given parent that are accessible by the current user.


        ### Precondition:

        Authenticated user.


        ### Effects:

        None.


        ### Further Information:

        `EncryptionInfo` is not provided.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`


        ### Fields:


        * **type**  
            Node type filter  
            OPERATOR: `eq` (multiple values allowed)  
            VALUE: `[room|folder|file]`

        * **perm**  
            Permissions filter  
            OPERATOR: `eq` (multiple values allowed)  
            VALUE: `[manage|read|change|create|delete|manageDownloadShare|manageUploadShare|canReadRecycleBin|canRestoreRecycleBin|canDeleteRecycleBin]`

        * **childPerm**  
            The same as **perm**, but less restrictive (applied to child nodes only)  
            OPERATOR: `eq` (multiple values allowed)  
            VALUE: `[manage|read|change|create|delete|manageDownloadShare|manageUploadShare|canReadRecycleBin|canRestoreRecycleBin|canDeleteRecycleBin]`

        * **name**  
            Node name filter  
            OPERATOR: `cn` (name contains value, multiple values not allowed)  
            VALUE: `Search string`

        * **encrypted**  
            Node encryption status filter  
            OPERATOR: `eq` (Node is encrypted, multiple values not allowed)  
            VALUE: `[true|false]`

        * **branchVersion**  
            Node branch version  
            OPERATOR: `ge|le`  
            VALUE: `version number`

        ### Example:

        * `type:eq:room:folder|perm:eq:read`  

        Get nodes where type equals `room` OR `folder` AND user has `read` permissions.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields not supported.


        ### Sort fields:


        * **name**: Node name

        * **createdBy**: Creator user name

        * **createdAt**: Creation date

        * **updatedBy**: Modifier user name

        * **updatedAt**: Modification date

        * **fileType**: File type (extension)

        * **classification**: Classification ID (for files only):  
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
        * **size**: Node size

        * **cntAdmins**: **DEPRECATED (No effect)** For rooms only: Number of admins

        * **cntUsers**: **DEPRECATED (No effect)** For rooms only: Number of users

        * **nodeCntChildren**: For rooms / folders only: Number of direct children (not recursive)

        * **cntDeletedVersions**: For files / folders only: Number of deleted versions of this file / folder (not recursive)


        ### Example:

        * `name:desc`  

        Sort by `name` descending.
      operationId: getFsNodes
      parameters:
        - description: >-
            * 0 - top level nodes only

            * n (any positive number) - include n levels starting from the current node

            * -1 - full tree (**DEPRECATED**: will be removed)
          in: query
          name: depth_level
          required: false
          schema:
            type: integer
            format: int32
        - description: |-
            Parent node ID.
            Only rooms and folders can be parents.
            Parent ID 0 or empty is the root node.
          in: query
          name: parent_id
          required: false
          schema:
            type: integer
            format: int64
        - description: |-
            Show all rooms for management perspective.
            Only posible for _Rooms Managers_.
            For all other users, it will be ignored.
          in: query
          name: room_manager
          required: false
          schema:
            type: boolean
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeList"
        "400":
          description: |-
            Bad Request

            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get file system nodes
      tags:
        - nodes
  /v4/nodes/deleted_nodes:
    delete:
      description: |-
        ### Functional Description:
        Permanently remove a list of nodes from the Recycle Bin.

        ### Precondition:
        User has _"delete recycle bin"_ permissions in parent room.

        ### Effects:
        All provided nodes are removed.

        ### Further Information:
        The removal of deleted nodes from the Recycle Bin is irreversible.
      operationId: deleteDeletedNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/DeleteDeletedNodesRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41100] Deleted node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete nodes from Recycle Bin
      tags:
        - nodes
  /v4/nodes/deleted_nodes/actions/restore:
    post:
      description: >-
        ### Functional Description:  

        Restore a list of deleted nodes.


        ### Precondition:

        User has _"create"_ permissions in parent room and _"restore recycle bin"_ permissions.


        ### Effects:

        The selected files are moved from the Recycle Bin to the chosen productive container.


        ### Further Information:

        If no parent ID is provided, the node is restored to its previous location.  

        The default resolution strategy is `autorename` that adds numbers to the file name until the conflict is solved.  

        If an existing file is overwritten, it is moved to the Recycle Bin instead of the restored one.
      operationId: restoreNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RestoreDeletedNodesRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NotRestoredNodeList"
        "400":
          description: >-
            Bad Request


            * [-40002] (Target) room is encrypted.

            * [-40013] Encrypted file cannot be restored inside another than its original room.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80034] 'keepShareLinks' is only allowed with conflict mode 'overwrite'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
            * [-41100] Deleted node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Restore deleted nodes
      tags:
        - nodes
  "/v4/nodes/deleted_nodes/{deleted_node_id}":
    get:
      description: |-
        ### Functional Description:  
        Get the meta data of one deleted node.

        ### Precondition:
        User can access parent room and has _"read recycle bin"_ permissions.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getFsDeletedNode
      parameters:
        - description: Deleted node ID
          in: path
          name: deleted_node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DeletedNode"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41100] Deleted node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get deleted node
      tags:
        - nodes
  /v4/nodes/files/keys:
    post:
      description: >-
        ### Functional Description:  

        Sets symmetric file keys for several users and files.


        ### Precondition:

        User has file keys for the files.


        ### Effects:

        Stores new file keys for other users.


        ### Further Information:

        Only users with copies of the file key (encrypted with their public keys) can access a certain file.  

        This endpoint is used for the distribution of file keys amongst an authorized user base.
      operationId: setUserFileKeys
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UserFileKeySetBatchRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-40761] User does not have a file key.
            * [-70020] User does not have a key pair.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Set FileKeys for a list of users and files
      tags:
        - nodes
  /v4/nodes/files/uploads:
    post:
      description: >
        ### Functional Description:

        This endpoint creates a new upload channel which is the first step in any file upload workflow.


        ### Precondition:

        User has _"create"_ permissions in the parent container (room or folder).


        ### Effects:

        A new upload channel for a file is created.  

        Its ID and an upload token are returned.


        ### Further Information:

        The upload ID is used for uploads with `X-Sds-Auth-Token` header, the upload token can be used for uploads without authentication header.


        Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.


        ### Node naming convention


        * Node (room, folder, file) names are limited to 150 characters.


        * Not allowed names:  

        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9','.','/'`


        * Not allowed characters in names:  

        `'../', '\\', '<','>', ':', '\"', '|', '?', '*', '/'`
      operationId: createFileUpload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateFileUploadRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/CreateFileUploadResponse"
        "400":
          description: >-
            Bad Request


            * [-40755] Bad node name.

            * [-40756] Illegal classification code.

            * [-41200] Path is too long.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40000] Parent node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "507":
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room.
            * [-90200] Exceeds the free customer quota.
            * [-90201] Exceeds the free customer physical disk space.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new file upload channel
      tags:
        - nodes
  "/v4/nodes/files/uploads/{upload_id}":
    delete:
      description: |-
        ### Functional Description:
        Cancel an upload and destroy the Upload Channel.

        ### Precondition:
        An Upload Channel has been created.

        ### Effects:
        The Upload Channel is removed and all temporary uploaded data is purged.

        ### Further Information:
        It is recommended to notify the API about cancelled uploads if possible.
      operationId: cancelFileUpload
      parameters:
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Cancel file upload
      tags:
        - nodes
    post:
      description: >-
        ### Functional Description:  

        Uploads a file or parts of it in an active Upload Channel.


        ### Precondition:

        An Upload Channel has been created.


        ### Effects:

        A file or parts of it are uploaded to a temporary location.


        ### Further Information:

        This endpoints supports chunked upload.  

        Please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for further information.
      operationId: uploadFile
      parameters:
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          schema:
            type: string
        - description: |-
            Content-Range
            e.g. "bytes 0-999/3980"
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Content-Range
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/uploadFile"
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ChunkUploadResponse"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80021] Incorrect upload 'Content-Range'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "507":
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room.
            * [-90200] Exceeds the free customer quota.
            * [-90201] Exceeds the free customer physical disk space.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Upload file
      tags:
        - nodes
    put:
      description: >-
        ### Functional Description:

        Finishes an upload and closes the corresponding Upload Channel.


        ### Precondition:

        An Upload Channel has been created and data has been transmitted.


        ### Effects:

        The upload is finished and the temporary file is moved to the productive environment.


        ### Further Information:

        The provided file name might be changed in accordance with the resolution strategy:  

        * **autorename**: changes the file name and adds a number to avoid conflicts.

        * **overwrite**: deletes any old file with the same file name.

        * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.


        Please ensure that all chunks have been transferred correctly before finishing the upload.


        ### 200 OK is not used by this API
      operationId: completeFileUpload
      parameters:
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteUploadRequest"
        description: body
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "202":
          description: Accepted
        "400":
          description: >-
            Bad Request


            * [-40763] File key must be set for upload into encrypted room.

            * [-80000] Mandatory fields cannot be empty.

            * [-80034] 'keepShareLinks' is only allowed with conflict mode 'overwrite'.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * Specified file name already exists. Node of existing file is returned.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "508":
          description: Loop Detected
      summary: Complete file upload
      tags:
        - nodes
  "/v4/nodes/files/{file_id}":
    put:
      description: >
        ### Functional Description:  

        Updates a file's meta data.


        ### Precondition:

        User has _"change"_ permissions in parent room.


        ### Effects:

        Meta data changed.


        ### Further Information:

        None.


        ### Node naming convention


        * Node (room, folder, file) names are limited to 150 characters.


        * Not allowed names:  

        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9','.','/'`


        * Not allowed characters in names:  

        `'../', '\\', '<','>', ':', '\"', '|', '?', '*', '/'`
      operationId: updateFile
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateFileRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: >-
            Bad Request


            * [-40755] Bad node name.

            * [-40756] Illegal classification code.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified file name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update file meta data
      tags:
        - nodes
  "/v4/nodes/files/{file_id}/data_room_file_key":
    get:
      description: >-
        ### Functional Description:  

        Returns the file key for the room emergency password of a certain file (if available).


        ### Precondition:

        User with _"read"_ permissions in parent room.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: getDataRoomFileKey
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/FileKey"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
            * [-40761] User does not have a file key.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get room emergency password
      tags:
        - nodes
  "/v4/nodes/files/{file_id}/data_space_file_key":
    get:
      description: >-
        ### Functional Description:  

        Returns the file key for the system emergency password of a certain file (if available).


        ### Precondition:

        User with _"read"_ permissions in parent room.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: getDataSpaceFileKey
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/FileKey"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
            * [-40761] User does not have a file key.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get system emergency password
      tags:
        - nodes
  "/v4/nodes/files/{file_id}/downloads":
    get:
      deprecated: true
      description: >-
        ### Use `downloads` API


        ### Functional Description:

        Download a file.


        ### Precondition:

        User with _"read"_ permissions in parent room.


        ### Effects:

        None.


        ### Further Information:

        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileData
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range
          in: header
          name: Range
          required: false
          schema:
            type: string
        - description: Always return 'application/octet-stream' instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          schema:
            type: boolean
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "206":
          description: Partial Content
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "416":
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - nodes
    head:
      deprecated: true
      description: >-
        ### Use `downloads` API


        ### Functional Description:

        Download a file.


        ### Precondition:

        User with _"read"_ permissions in parent room.


        ### Effects:

        None.


        ### Further Information:

        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileData_1
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range
          in: header
          name: Range
          required: false
          schema:
            type: string
        - description: Always return 'application/octet-stream' instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          schema:
            type: boolean
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "206":
          description: Partial Content
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "416":
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - nodes
    post:
      description: >-
        ### Functional Description:

        Create a download token to retrieve a file without `X-Sds-Auth-Token` Header.


        ### Precondition:

        User with _"read"_ permissions in parent room.


        ### Effects:

        Download token is generated and returned.


        ### Further Information:

        The token is necessary to access `downloads` ressources.
      operationId: createFileDownloadToken
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DownloadTokenGenerateResponse"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Generate download token
      tags:
        - nodes
  "/v4/nodes/files/{file_id}/user_file_key":
    get:
      description: >-
        ### Functional Description:  

        Returns the file key for the current user (if available).


        ### Precondition:

        User with _"read"_, _"create"_ or _"manage download share"_ permissions in parent room.


        ### Effects:

        None.


        ### Further Information:

        The symmetric file key is encrypted with the user's public key.  

        File keys are generated with the workflow _"Generate file keys"_ that starts at `GET /nodes/missingFileKeys`.
      operationId: getUserFileKey
      parameters:
        - description: File ID
          in: path
          name: file_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/FileKey"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
            * [-40761] User does not have a file key.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user's file key
      tags:
        - nodes
  /v4/nodes/folders:
    post:
      description: >
        ### Functional Description:

        Creates a new folder.


        ### Precondition:

        User has _"create"_ permissions in current room.


        ### Effects:

        A new folder is created.


        ### Further Information:

        Folders cannot be created on top level (without parent element).


        ### Node naming convention


        * Node (room, folder, file) names are limited to 150 characters.


        * Not allowed names:  

        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9','.','/'`


        * Not allowed characters in names:  

        `'../', '\\', '<','>', ':', '\"', '|', '?', '*', '/'`
      operationId: createFolder
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateFolderRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: |-
            Bad Request

            * [-40755] Bad node name.
            * [-41200] Path is too long.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified folder name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new folder
      tags:
        - nodes
  "/v4/nodes/folders/{folder_id}":
    put:
      description: >
        ### Functional Description:  

        Renames an existing folder.


        ### Precondition:

        User has _"change"_ permissions in current room.


        ### Effects:

        The folder is renamed.


        ### Further Information:

        None.


        ### Node naming convention


        * Node (room, folder, file) names are limited to 150 characters.


        * Not allowed names:  

        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9','.','/'`


        * Not allowed characters in names:  

        `'../', '\\', '<','>', ':', '\"', '|', '?', '*', '/'`
      operationId: updateFolder
      parameters:
        - description: Folder ID
          in: path
          name: folder_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateFolderRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: |-
            Bad Request

            * [-40755] Bad node name.
            * [-41200] Path is too long.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified folder name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update folder
      tags:
        - nodes
  /v4/nodes/missingFileKeys:
    get:
      description: >-
        ### Functional Description:  

        Requests a list of missing file keys that may be generated by the current user.


        ### Precondition:

        User has a key pair.


        ### Effects:

        None.


        ### Further Information:

        Clients should regularly request missing file keys to provide access to files for other users.  

        The returned list is ordered by priority (emergency passwords are returned first).  

        ### Please note: 

        This API returns **1024** entries at maximum.  

        There might be more entries even if a total of 1024 is returned.
      operationId: missingFileKeys
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Room ID
          in: query
          name: room_id
          required: false
          schema:
            type: integer
            format: int64
        - description: File ID
          in: query
          name: file_id
          required: false
          schema:
            type: integer
            format: int64
        - description: User ID
          in: query
          name: user_id
          required: false
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/MissingKeysResponse"
        "400":
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
            * [-41000] Node not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get files where the user has no filekey
      tags:
        - nodes
  /v4/nodes/rooms:
    post:
      description: >-
        ### Functional Description:

        Creates a new room at the provided parent node.  

        Creation of top level rooms provided.


        ### Precondition:

        User has _"create"_ permissions in the parent room.


        ### Effects:

        A new room is created.


        ### Further Information:  

        Rooms may only have other rooms as parent.  

        Rooms on top level do not have any parent.  

        Rooms may have rooms as children on n hierarchy levels.  

        If permission inheritance is disabled, there must be at least one admin user / group (with neither the group nor the user having an expiration date).
      operationId: createRoom
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateRoomRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: >-
            Bad Request


            * [-40006] At least one admin user/group required.

            * [-40017] For the top level room can not set inheritPermissions: true

            * [-40755] Bad node name.

            * [-41200] Path is too long.

            * [-70520] The user must have at least 'read' right in parent room.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80003] Not valid positive number or zero.

            * [-80005] Not valid boolean value.

            * [-80007] Maximum allowed length is exceeded.

            * [-80018] Not between 0 and 9999.

            * [-80025] Invalid 'newGroupMemberAcceptance' value.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified room name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new room
      tags:
        - nodes
  /v4/nodes/rooms/pending:
    get:
      description: >-
        ### Functional Description:  

        Requests a list of user-room assignments by groups that have not been approved yet  

        These can have the state:

        * **WAITING**  

        * **DENIED**  

        * **ACCEPTED**  


        **ACCEPTED** assignments are already removed from the list.


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        Room administrators should regularly request pending assingments to provide access to rooms for other users.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`


        ### Fields:


        * **userId**  
            User ID filter  
            OPERATOR: `eq`  
            VALUE: `Positive Integer`

        * **groupId**  
            Group ID filter  
            OPERATOR: `eq`  
            VALUE: `Positive Integer`

        * **roomId**  
            Room ID filter  
            OPERATOR: `eq`  
            VALUE: `Positive Integer`

        * **state**  
            Assignment state  
            OPERATOR: `eq`  
            VALUE: `[WAITING|DENIED]`

        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields not supported.


        ### Sort fields:


        * **userId**: User ID

        * **groupId**: Group ID

        * **roomId**: Room ID

        * **state**: State


        ### Example:

        * `userId:desc`  

        Sort by user ID descending.
      operationId: getPendingAssignments
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/PendingAssignmentList"
        "400":
          description: |-
            Bad Request

            * [-40301] Invalid pending assignment status.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user-room assignments per group that have not been accepted yet
      tags:
        - nodes
    put:
      description: >-
        ### Functional Description:  

        Handles a list of user-room assignments by groups that have not been approved yet  

        **WAITING** or **DENIED** assignments can be **ACCEPTED**.


        ### Precondition:

        None.


        ### Effects:

        User-room assignment is approved and the user gets access to the group.


        ### Further Information:

        Room administrators should regularly handle pending assignments to provide access to rooms for other users.
      operationId: changePendingAssignments
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/PendingAssignmentsRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-40301] Invalid pending assignment status.
            * [-80000] Mandatory fields cannot be empty.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-40300] Pending assignment not found.
            * [-41000] Node not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Handle user-room assignments per group that have not been accepted yet
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}":
    put:
      description: >-
        ### Functional Description:  

        Update a room's meta data.


        ### Precondition:

        User is admin in superordinated level.


        ### Effects:

        Room's meta data is changed.


        ### Further Information:

        None.


        ### Node naming convention


        * Node (room, folder, file) names are limited to 150 characters.


        * Not allowed names:  

        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9','.','/'`


        * Not allowed characters in names:  

        `'../', '\\', '<','>', ':', '\"', '|', '?', '*', '/'`
      operationId: updateRoom
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateRoomRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: |-
            Bad Request

            * [-40755] Bad node name.
            * [-41200] Path is too long.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
            * [-80019] Not between 1 and 9999.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified room name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update room
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/activities_log":
    get:
      deprecated: true
      description: |-
        ### Use `nodes/rooms/{room_id}/events` API

        ### Functional Description:
        Retrieve syslog (= audit log) events related to a room.

        ### Precondition:
        Requires _"read"_ permissions on that room.

        ### Effects:
        None.

        ### Further Information:
        Output may be limited to a certain number of entries.  
        Please use filter criteria and paging.
      operationId: getRoomActivitiesLog_1
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: |-
            Start date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_start
          required: false
          schema:
            type: string
        - description: |-
            End date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_end
          required: false
          schema:
            type: string
        - description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          in: query
          name: type
          required: false
          schema:
            type: integer
            format: int32
        - description: User ID
          in: query
          name: user_id
          required: false
          schema:
            type: integer
            format: int64
        - description: |-
            Operation status:
            * 0 - Success
            * 2 - Error
          in: query
          name: status
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/SyslogEventList"
            text/csv:
              schema:
                $ref: "#/components/schemas/SyslogEventList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
            * [-80026] Not a valid operation ID.
            * [-80027] Not a valid operation status.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get events of a room
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/config":
    put:
      description: |-
        ### Functional Description:
        Updates a room.

        ### Precondition:
        User needs to be room administrator.

        ### Effects:
        Room's configuration is changed.

        ### Further Information:
        None.
      operationId: configRoom
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/ConfigRoomRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: >-
            Bad Request


            * [-40011] Recycle Bin can not be disabled because it is not empty.

            * [-40015] Room inheritance already enabled.

            * [-40016] Room inheritance already disabled.

            * [-40017] For the top level room can not set inheritPermissions: true

            * [-40019] For the top level room can not set takeOverPermissions.

            * [-40755] Bad node name.

            * [-41200] Path is too long.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80007] Maximum allowed length is exceeded.

            * [-80018] Not between 0 and 9999.

            * [-80028] Due to existing dependency the input must be null.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified room name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Config room
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/encrypt":
    put:
      description: |-
        ### Functional Description:  
        Activates the client-side encryption for a room.

        ### Precondition:
        User needs to be room administrator.

        ### Effects:
        Encryption of room is activated.

        ### Further Information:
        Only empty rooms at the top level may be encrypted.  
        This endpoint may also be used to disable encryption of an empty room.
      operationId: encryptRoom
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/EncryptRoomRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted.
            * [-40003] Room with files cannot be unencrypted.
            * [-40004] Only one room emergency password is allowed.
            * [-40008] Room with files cannot be encrypted.
            * [-40012] Room with not empty Recycle Bin cannot be encrypted.
            * [-70020] User does not have a key pair.
            * [-70022] Public key format is not valid.
            * [-70023] Private key format is not valid.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80005] Not valid boolean value.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Encrypt room
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/events":
    get:
      description: |-
        ### Use `nodes/rooms/{room_id}/events` API

        ### Functional Description:
        Retrieve syslog (= audit log) events related to a room.

        ### Precondition:
        Requires _"read"_ permissions on that room.

        ### Effects:
        None.

        ### Further Information:
        Output may be limited to a certain number of entries.  
        Please use filter criteria and paging.
      operationId: getRoomActivitiesLog
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: |-
            Start date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_start
          required: false
          schema:
            type: string
        - description: |-
            End date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_end
          required: false
          schema:
            type: string
        - description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          in: query
          name: type
          required: false
          schema:
            type: integer
            format: int32
        - description: User ID
          in: query
          name: user_id
          required: false
          schema:
            type: integer
            format: int64
        - description: |-
            Operation status:
            * 0 - Success
            * 2 - Error
          in: query
          name: status
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/LogEventList"
            text/csv:
              schema:
                $ref: "#/components/schemas/LogEventList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
            * [-80026] Not a valid operation ID.
            * [-80027] Not a valid operation status.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get events of a room
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/groups":
    delete:
      description: |-
        ### Functional Description:  
        Batch function.  
        Revoke groups from room.

        ### Precondition:
        User needs to be room administrator.

        ### Effects:
        Group's permissions are revoked.

        ### Further Information:
        None.
      operationId: deleteRoomGroupsBatch
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RoomGroupsDeleteBatchRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Revoke group permissions from room
      tags:
        - nodes
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of groups that are and / or can be granted to the room.


        ### Precondition:

        Any permissions on target room.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **name**  
            Group name  
            OPERATOR: `cn` (multiple values not allowed)  
            VALUE: `search string`

        * **isGranted**  
            Filter the groups that have (no) access to this room  
            **Attention! This filter is only available for room administrators.  
            Other users can only look for groups in their rooms, so this filter is true and cannot be overridden.**  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        * **permissionsManage**  
            Filter the groups that (don't) have manage right in this room  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`.

        * **effectivePerm**  
            Filter groups with _DIRECT_ or _DIRECT_ **AND** _EFFECTIVE_ permissions  
            * `false`: _DIRECT_ permissions  
            * `true`:  _DIRECT_ **AND** _EFFECTIVE_ permissions  
            
            > _DIRECT_ means: e.g. room administrator grants read permissions to group of users **directly** on desired room.  
            _EFFECTIVE_ means: e.g. group of users gets read permissions on desired room through **inheritance**.  

            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]` (default: `true`)

        * **groupId**  
            Filter the groups by ID  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `Positive Integer`

        ### Example:

        * `isGranted:eq:false|name:cn:searchString`  

        Get all groups that have no rights to this room of AND whose name is like `searchString`.
      operationId: getRoomGroups
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoomGroupList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get room granted groups or/and groups that can be granted
      tags:
        - nodes
    put:
      description: |-
        ### Functional Description:
        Batch function.  
        All existing group permissions will be overwritten.

        ### Precondition:
        User needs to be room administrator.

        ### Effects:
        Group's permissions are changed.

        ### Further Information:
        None.
      operationId: setRoomGroupsBatch
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RoomGroupsAddBatchRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-30020] Group must have at least 'read' right in parent room.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80025] Invalid 'newGroupMemberAcceptance' value.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add or change room granted groups
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/keypair":
    get:
      description: |-
        ### Functional Description:  
        Retrieve the room emergency password.

        ### Precondition:
        User has _"read"_ permissions in that room.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: roomRescueKey
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserKeyPairContainer"
        "400":
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40007] No room emergency password found.
            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get room emergency password
      tags:
        - nodes
  "/v4/nodes/rooms/{room_id}/users":
    delete:
      description: |-
        ### Functional Description:  
        Batch function.  
        Revoke users from room.

        ### Precondition:
        User needs to be room administrator.

        ### Effects:
        User's permissions are revoked.

        ### Further Information:
        None.
      operationId: deleteRoomUsersBatch
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RoomUsersDeleteBatchRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-40006] At least one admin user/group required.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Revoke user permissions from room
      tags:
        - nodes
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of users that are and / or can be granted to the room.


        ### Precondition:

        Any permissions on target room.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **displayName**  
            User display name (`firstName`, `lastName`, `login`)  
            OPERATOR: `cn` (multiple values not allowed)  
            VALUE: `search string`

        * **isGranted**  
            Filter the users that have (no) access to this room  
            **Attention! This filter is only available for room administrators.  
            Other users can only look for users in their rooms, so this filter is true and cannot be overridden.**  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        * **permissionsManage**  
            Filter the users that (don't) have manage right in this room  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`.

        * **effectivePerm**  
            Filter users with _DIRECT_ or _DIRECT_ **AND** _EFFECTIVE_ permissions  
            * `false`: _DIRECT_ permissions  
            * `true`:  _DIRECT_ **AND** _EFFECTIVE_ permissions  
            * `any`: _DIRECT_ **AND** _EFFECTIVE_ **AND** _OVER GROUP_ permissions  
            
            > _DIRECT_ means: e.g. room administrator grants read permissions to user **directly** on desired room.  
            _EFFECTIVE_ means: e.g. user gets read permissions on desired room through **inheritance**.  
            _OVER GROUP_ means: e.g. user gets read permissions on desired room through **group membership**.  

            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `false`)

        * **userId**  
            Filter the users by ID  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `Positive Integer`

        ### Example:

        * `isGranted:eq:true|displayName:cn:searchString|permissions_manage:eq:true`  

        Get all users that have manage rights to this room of AND whose name is like `searchString`.


        ### The filters are connected by AND
      operationId: getRoomUsers
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoomUserList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get room granted users or/and users that can be granted
      tags:
        - nodes
    put:
      description: |-
        ### Functional Description:
        Batch function.  
        All existing user permissions will be overwritten.

        ### Precondition:
        User needs to be room administrator.

        ### Effects:
        User's permissions are changed.

        ### Further Information:
        None.
      operationId: setRoomUsersBatch
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RoomUsersAddBatchRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-40006] At least one admin user/group required.
            * [-70520] The user must have at least 'read' right in parent room.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add or change room granted users
      tags:
        - nodes
  /v4/nodes/search:
    get:
      description: >-
        ### Functional Description:  

        Provides a flat list of file system nodes (rooms, folders, files) of a given parent that are accessible by the current user.


        ### Precondition:

        Authenticated user with _"read"_ permissions on parent room.


        ### Effects:

        None.


        ### Further Information:  

        A maximum of **500** results is returned.  

        For more results please use paging (`offset` + `limit`).  

        `EncryptionInfo` is not provided.  

        Wildcard character is the asterisk character: `*`.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`


        ### Fields:


        * **type**  
            Node type filter  
            OPERATOR: `eq`  
            VALUE: `[room|folder|file]`

        * **fileType**  
            File type filter (file extension)  
            OPERATOR: `cn` (name contains value, multiple values not allowed)  
            VALUE: `Search string`

        * **classification**  
            File classification filter  
            OPERATOR: `eq`  
            VALUE: `[1|2|3|4]`
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential

        * **createdBy**  
            Creation username filter  
            OPERATOR: `cn` (name contains value, multiple values not allowed)  
            VALUE: `Search string`

        * **createdAt**  
            Creation data filter  
            OPERATOR: `ge|le`  
            VALUE: `Date (yyyy-MM-dd)`

        * **updatedBy**  
            Last change username filter  
            OPERATOR: `cn` (name contains value, multiple values not allowed)  
            VALUE: `Search string`

        * **updatedAt**  
            Last change date filter  
            OPERATOR: `ge|le`  
            VALUE: `Date (yyyy-MM-dd)`

        * **expireAt**  
            Expire date filter  
            OPERATOR: `ge|le`  
            VALUE: `Date (yyyy-MM-dd)`

        * **size**  
            Size filter  
            OPERATOR: `ge|le`  
            VALUE: `Size in bytes`

        * **isFavorite**  
            Favorite filter  
            OPERATOR: `eq`  
            VALUE: `[true|false]`

        * **branchVersion**  
            Node branch version  
            OPERATOR: `ge|le`  
            VALUE: `Version Number`

        ### Example:

        * `type:eq:file|createdAt:ge:2015-01-01`  

        Get nodes where `type` equals `file` AND file was created at or after `2015-01-01`.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`   

        Order can be `asc` or `desc`.  

        Multiple fields not supported.


        ### Sort fields:


        * **name**: Node name

        * **createdBy**: Creator user name

        * **createdAt**: Creation date

        * **updatedBy**: Modifier user name

        * **updatedAt**: Modification date

        * **fileType**: File type (extension)

        * **classification**: Classification ID (for files only):  
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
        * **size**: Node size

        * **cntAdmins**: **DEPRECATED (No Effect)** For rooms only: Number of admins

        * **cntUsers**: **DEPRECATED (No Effect)** For rooms only: Number of users

        * **nodeCntChildren**: For rooms / folders only: Number of direct children (not recursive)

        * **cntDeletedVersions**: For files / folders only: Number of deleted versions of this file/folder (not recursive)

        * **type**: Node type (room, folder, file)


        ### Example:

        * `name:desc`  

        Sort by `name` descending.
      operationId: searchFsNodes
      parameters:
        - description: Search string
          in: query
          name: search_string
          required: true
          schema:
            type: string
        - description: >-
            * 0 - top level nodes only

            * -1 - full tree

            * n (any positive number) - include n levels starting from the current node
          in: query
          name: depth_level
          required: false
          schema:
            type: integer
            format: int32
        - description: |-
            Parent node ID.
            Only rooms and folders can be parents.
            Parent ID 0 or empty is the root node.
          in: query
          name: parent_id
          required: false
          schema:
            type: integer
            format: int64
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search file system nodes
      tags:
        - nodes
  /v4/nodes/zip:
    post:
      description: |-
        ### Functional Description:  
        Create a download token to retrieve several files in one ZIP archive.

        ### Precondition:
        User has _"read"_ permissions in parent room.

        ### Effects:
        Download token is generated and returned.

        ### Further Information:
        The token is necessary to access `downloads` resources.  
        ZIP download is only available for files and folders.
      operationId: getNodesAsZip
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ZipDownloadRequest"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DownloadTokenGenerateResponse"
        "400":
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Generate download token for zip download
      tags:
        - nodes
  /v4/nodes/zip/download:
    post:
      description: |-
        ### Functional Description:  
        Download multiple files in a ZIP archive.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getNodesAsZipDownload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ZipDownloadRequest"
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Download files/folders as ZIP
      tags:
        - nodes
  "/v4/nodes/{node_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete node (room, folder, file).

        ### Precondition:
        Authenticated user with _"delete"_ permissions on supplied nodes.

        ### Effects:
        Node gets deleted.

        ### Further Information:
        None.
      operationId: deleteNode
      parameters:
        - description: Node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-10006] User has no permissions to delete file(s).
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeBatchOperationErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete file system node
      tags:
        - nodes
    get:
      description: |-
        ### Functional Description:  
        Get node (room, folder, file).

        ### Precondition:
        User has _"read"_ permissions in auth parent room.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getFsNode
      parameters:
        - description: Node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get node
      tags:
        - nodes
  "/v4/nodes/{node_id}/copy_to":
    post:
      description: >-
        ### Functional Description:

        Copies nodes (folder, file) to another parent.


        ### Precondition:

        Authenticated user with _"read"_ permissions in the source parent and _"create"_ permissions in the target parent node.


        ### Effects:

        Nodes are copied to target parent.


        ### Further Information:

        Nodes must be in same source parent.  

        Rooms cannot be copied.
      operationId: copyNodes
      parameters:
        - description: Target parent node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CopyNodesRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: >-
            Bad Request


            * [-40001] (Target) room is not encrypted.

            * [-40002] (Target) room is encrypted.

            * [-41052] Rooms can not be moved.

            * [-41053] File can not be a target node.

            * [-41303] Node can only be copied to its own place with resolution strategy 'autorename'.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80034] 'keepShareLinks' is only allowed with conflict mode 'overwrite'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40014] User is missing a file key.
            * [-41050] Source node not found.
            * [-41051] Target node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeBatchOperationErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Some source nodes already exist in target node.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeBatchOperationErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Copy file system nodes
      tags:
        - nodes
  "/v4/nodes/{node_id}/deleted_nodes":
    delete:
      description: |-
        ### Functional Description:  
        Empty a Recycle Bin.

        ### Precondition:
        User has _"delete recycle bin"_ permissions in parent room.

        ### Effects:
        All files in the Recycle Bin are permanently removed.

        ### Further Information:
        Actually removes the previously deleted files from the system.  
        This action is irreversible.
      operationId: emptyDeletedNodes
      parameters:
        - description: |-
            Parent node ID.
            Only rooms and folders can be parents.
            Parent ID 0 or empty is the root node.
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
            * [-40020] Recycle Bin is not active.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Empty Recycle Bin
      tags:
        - nodes
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of deleted nodes in a Recycle Bin.


        ### Precondition:

        User can access parent room and has _"read recycle bin"_ permissions.


        ### Effects:

        None.


        ### Further Information:

        Only room IDs are accepted as node ID since only rooms have Recycle Bins.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`


        ### Fields:


        * **type**  
            Node type filter  
            OPERATOR: `eq` (multiple values allowed)  
            VALUE: `[folder|file]`

        * **name**  
            Node name filter  
            OPERATOR: `cn` (Node name contains value, multiple values not allowed)  
            VALUE: `Search string`

        * **parentPath**  
            Parent path filter  
            OPERATOR: `cn` (Parent path contains value, multiple values not allowed)  
            VALUE: `Search string`

        ### Example:

        * `type:eq:file:folder|name:cn:searchString_1|parentPath:cn:searchString_2`  

        Get deleted nodes where type equals `file` or `folder` AND deleted node name containing `searchString_1` AND deleted node parent path containing `searchString 2`.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields not supported.


        ### Sort fields:


        * **name**: Node name

        * **cntVersions**: Number of deleted versions of this file

        * **firstDeletedAt**: First deleted version

        * **lastDeletedAt**: Last deleted version

        * **parentPath**: Parent path of deleted node


        ### Example:

        * `name:desc`  

        Sort by `name` descending.
      operationId: getFsDeletedNodesSummary
      parameters:
        - description: Auth parent node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DeletedNodeSummaryList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
            * [-40020] Recycle Bin is not active.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get deleted nodes
      tags:
        - nodes
  "/v4/nodes/{node_id}/deleted_nodes/versions":
    get:
      description: |-
        ### Functional Description:  
        Retrieve all deleted versions of a node.

        ### Precondition:
        User can access parent room and has _"read recycle bin"_ permissions.

        ### Effects:
        None.

        ### Further Information:
        The node is identified by three parameters:
        * parent ID
        * name
        * type (file, folder).

        ### Sort

        Sort string syntax: `FIELD_NAME:ORDER`  
        Order can be `asc` or `desc`.  
        Multiple fields not supported.

        ### Sort fields:

        * **expireAt**:Expiration date
        * **accessedAt**: Last access date
        * **size**: Node size
        * **classification**: Classification ID (for files only):  
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
        * **createdAt**: Creation date
        * **createdBy**: Node created by user
        * **updatedAt**: Modification date
        * **updatedBy**: Node modified by user
        * **deletedAt**: Deleted date
        * **deletedBy**: Node deleted by user

        ### Example:
        * `expireAt:desc`  
        Sort by `expireAt` descending.
      operationId: getFsDeletedNodeVersions
      parameters:
        - description: Auth parent node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Node type
          in: query
          name: type
          required: true
          schema:
            type: string
            enum:
              - file
              - folder
        - description: Node name
          in: query
          name: name
          required: true
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DeletedNodeVersionsList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get deleted versions
      tags:
        - nodes
  "/v4/nodes/{node_id}/favorite":
    delete:
      description: |-
        ### Functional Description:
        Unmarks a node (room, folder, file) as favorite.

        ### Precondition:
        User needs _"read"_ permissions on that node.

        ### Effects:
        A node gets unmarked as favorite.

        ### Further Information:
        None.
      operationId: unmarkFavorite
      parameters:
        - description: Node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-41301] Node is not set as favorite.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Unmark a node (room, folder or file) as favorite
      tags:
        - nodes
    post:
      description: |-
        ### Functional Description:  
        Marks a node (room, folder, file) as favorite.

        ### Precondition:
        User needs _"read"_ permissions on that node.

        ### Effects:
        A node gets marked as favorite.

        ### Further Information:
        None.
      operationId: addFavorite
      parameters:
        - description: Node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Mark a node (room, folder or file) as favorite
      tags:
        - nodes
  "/v4/nodes/{node_id}/move_to":
    post:
      description: >-
        ### Functional Description:  

        Moves nodes (folder, file) to another parent.


        ### Precondition:

        Authenticated user with _"read"_ and _"delete"_ permissions in the source parent and _"create"_ permissions in the target parent node.


        ### Effects:

        Nodes are moved to target parent.


        ### Further Information:

        Nodes must be in same source parent.  

        Rooms cannot be moved.
      operationId: moveNodes
      parameters:
        - description: Target parent node ID
          in: path
          name: node_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/MoveNodesRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "400":
          description: >-
            Bad Request


            * [-40001] (Target) room is not encrypted.

            * [-40002] (Target) room is encrypted.

            * [-41052] Rooms can not be moved.

            * [-41053] File can not be a target node.

            * [-41054] Source nodes must be in same parent.

            * [-41302] Node cannot be moved to its own place.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80034] 'keepShareLinks' is only allowed with conflict mode 'overwrite'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40014] User is missing a file key.
            * [-41050] Source node not found.
            * [-41051] Target node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeBatchOperationErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Some source nodes already exist in target node.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NodeBatchOperationErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Move file system nodes
      tags:
        - nodes
  /v4/provisioning/customers:
    get:
      description: >-
        ### Functional Description:  

        Receive a list of customers.


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        This list returns a maximum of **1000** entries.  

        Please use filters or searches to specify what you are looking for.  

        Authentication with `X-Sds-Service-Token` required.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`


        ### Fields:


        * **id**  
            Customer ID filter  
            OPERATOR: `eq`  
            VALUE: `Positive Integer`

        * **companyName**  
            Company name filter  
            OPERATOR: `cn` (Company name contains value, multiple values not allowed)  
            VALUE: `search string`

        * **customerContractType**  
            Customer contract type filter  
            OPERATOR: `eq`  
            VALUE: `demo|free|pay`

        * **activationCode**  
            Activation code filter  
            OPERATOR: `cn|eq` (Activation code contains value | equals value, multiple values not allowed )  
            VALUE: `search string`

        * **trialDaysLeft**  
            Left trial days filter  
            OPERATOR: `ge|le` (Number of trial days is greater or equal | less or equal)  
            VALUE: `Positive Integer`

        * **providerCustomerId**  
            Provider Customer ID filter  
            OPERATOR: `cn|eq` (providerCustomerId contains value | equals value, multiple values not allowed )  
            VALUE: `search string`

        * **quotaMax**  
            Maximum quota filter  
            OPERATOR: `ge|le` (Quota is greater or equal | less or equal)  
            VALUE: `Positive Integer`

        * **quotaUsed**  
            Used quota filter  
            OPERATOR: `ge|le` (Quota is greater or equal | less or equal)  
            VALUE: `Positive Integer`

        * **userMax**  
            Maximum user filter  
            OPERATOR: `ge|le` (User maximum is greater or equal | less or equal)  
            VALUE: `Positive Integer`

        * **userUsed**  
            Used users filter  
            OPERATOR: `ge|le` (Number of registered users is greater or equal | less or equal)  
            VALUE: `Positive Integer`

        * **lockStatus**  
            Lock status filter  
            OPERATOR: `eq`  
            VALUE: `Integer (0 or 1)`

        * **createdAt**  
            Creation date filter  
            OPERATOR: `ge|le` (Date is greater or equal | less or equal)  
            VALUE: `Date`

        * **updatedAt**  
            Update date filter  
            OPERATOR: `ge|le` (Date is greater or equal | less or equal)  
            VALUE: `Date`

        * **lastLoginAt**  
            Last login filter  
            OPERATOR: `ge|le` (Date is greater or equal | less or equal)  
            VALUE: `Date`

        * **userLogin**  
            User login filter  
            OPERATOR: `eq` (Customer user login name equal value, multiple values not allowed)  
            Search user all logins e.g. `sql`, `active_directory`, `radius`  
            VALUE: `search string`

            
        * **attributeKey**  
            Customer attribute key filter  
            OPERATOR: `eq` (Customer attribute key equal value, multiple values not allowed)  
            Search customers with given customer attribute key.  
            VALUE: `search string`

        * **attributeValue**  
            Customer attribute value filter  
            OPERATOR: `eq` (Customer attribute value equal value, multiple values not allowed)  
            Search customers with given customer attribute value.  
            VALUE: `search string`

        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields not supported.


        ### Sort fields:


        * **companyName**: Company name

        * **customerContractType**: Customer contract type

        * **trialDaysLeft**: Number of remaining trial days (demo customers)

        * **providerCustomerId**: Provider Customer ID (pay customers)

        * **quotaMax**: Maximum quota

        * **quotaUsed**: Currently used quota

        * **userMax**: Maximum user number

        * **userUsed**: Number of currently active users

        * **lockStatus**: Lock status of customer

        * **createdAt**: Creation date

        * **updatedAt**: Date of last update

        * **lastLoginAt**: Date of last login of any user of this customer


        ### Example:

        * `companyName:desc`  

        Sort by company `name` descending.
      operationId: getCustomers
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Include custom customer attributes.
          in: query
          name: include_attributes
          required: false
          schema:
            type: boolean
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/CustomerList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get customers
      tags:
        - provisioning
    post:
      description: >-
        ### Functional Description:

        Create a new customer.


        ### Precondition:

        None.


        ### Effects:

        A new customer is created.


        ### Further Information:

        Authentication with `X-Sds-Service-Token` required.  

        If no company name is set, first name of the first administrator is used.  

        Max quota has to be at least 1 GB (= 1 073 741 824 B).


        ### Authentication Method Options


        * **SQL**  
            `none`

        * **Active Directory**  
            (optional)  
            key: `"ad_config_id"`  
            value: "Active Directory configuration ID"  
            
            key: `"username"`  
            value: "Active Directory user name according to auth setting `userFilter`"

        * **RADIUS**  
            key: `"username"`  
            value: "Radius user name"

        * **OpenID Connect**  
            key: `"openid_config_id"`  
            value: "OpenID Connect configuration ID"  
            
            key: `"username"`  
            value: "OpenID Connect user name according to auth setting `mappingClaim`"
      operationId: newCustomerRequest
      parameters:
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/NewCustomerRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/NewCustomerResponse"
        "400":
          description: >-
            Bad Request


            * [-10100] Invalid authentication method.

            * [-10101] Not valid auth method key.

            * [-10102] At least one authentication method must be enabled.

            * [-70506] Wrong gender.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.

            * [-80009] Not a valid email address.

            * [-80015] Not valid key value list because there are duplicate keys present.

            * [-90002] No distinct authentication configuration.

            * [-90509] Illegal customer lock status code.

            * [-90510] Maximum quota must not be less than one GB.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP not found.
            * [-90039] No valid OpenID Connect IDP found.
            * [-90050] Active Directory configuration not found.
            * [-90059] No valid Active Directory found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-70560] User with provided basic authentication login already exists.

            * [-70561] User with provided Active Directory user name already exists.

            * [-70562] User with provided RADIUS login already exists.

            * [-70563] User with provided OpenID user name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create customer
      tags:
        - provisioning
  "/v4/provisioning/customers/{customer_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete a customer.

        ### Precondition:
        None.

        ### Effects:
        Customer is deleted.

        ### Further Information:
        Authentication with `X-Sds-Service-Token` required.
      operationId: deleteCustomer
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete customer
      tags:
        - provisioning
    get:
      description: |-
        ### Functional Description:  
        Receive details of a selected customer.

        ### Precondition:
        Existing customer.

        ### Effects:
        None.

        ### Further Information:
        Authentication with `X-Sds-Service-Token` required.
      operationId: getCustomer
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Include custom customer attributes.
          in: query
          name: include_attributes
          required: false
          schema:
            type: boolean
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get customer
      tags:
        - provisioning
    put:
      description: |-
        ### Functional Description:  
        Change selected attributes of a customer.

        ### Precondition:
        Existing customer.

        ### Effects:
        Update of attributes.

        ### Further Information:
        Authentication with `X-Sds-Service-Token` required.
      operationId: updateCustomer
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateCustomerRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UpdateCustomerResponse"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
            * [-90110] Invalid lock status.
            * [-90111] Invalid 'customerContractType' transition.
            * [-90510] Maximum quota must not be less than one GB.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update customer
      tags:
        - provisioning
  "/v4/provisioning/customers/{customer_id}/customerAttributes":
    post:
      description: |
        ### Functional Description:  
        Set custom customer attributes.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Custom customer attributes gets set.

        ### Further Information:
        Batch function.  
        All existing customer attributes will be deleted.  
        Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        Characters are case-insensitive.
      operationId: setAllCustomerAttributes
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CustomerAttributes"
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: >-
            Bad Request


            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80007] Maximum allowed length is exceeded.

            * [-80015] Not valid key value list because there are duplicate keys present.

            * [-80023] Input contains invalid characters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Set customer attributes
      tags:
        - provisioning
    put:
      description: |-
        ### Functional Description:  
        Add or edit custom customer attributes.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Custom customer attributes get added or edited.

        ### Further Information:
        Batch function.  
        If an entry exists before, it will be overwritten.  
        Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        Characters are case-insensitive.
      operationId: setCustomerAttributes
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CustomerAttributes"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: >-
            Bad Request


            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80007] Maximum allowed length is exceeded.

            * [-80015] Not valid key value list because there are duplicate keys present.

            * [-80023] Input contains invalid characters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add or edit customer attributes
      tags:
        - provisioning
  "/v4/provisioning/customers/{customer_id}/customerAttributes/{key}":
    delete:
      description: |-
        ### Functional Description:
        Delete custom customer attribute.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Custom customer attribute gets deleted.

        ### Further Information:
        Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        Characters are case-insensitive.
      operationId: deleteCustomerAttributes
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Key
          in: path
          name: key
          required: true
          schema:
            type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80023] Input contains invalid characters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70550] Attribute not found.
            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete customer attributes
      tags:
        - provisioning
  "/v4/provisioning/customers/{customer_id}/users":
    get:
      description: >-
        ### Functional Description:  

        Receive a list of users associated with a certain customer.


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        Authentication with `X-Sds-Service-Token` required.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  

        Multiple fields are supported.


        ### Filter fields:


        * **login**  
            Login name  
            OPERATOR: `cn` (User login name contains value)  
            VALUE: `Search string`

        * **firstName**  
            First name  
            OPERATOR: `cn` (User first name contains value)  
            VALUE: `Search string`

        * **lastName**  
            Last name  
            OPERATOR: `cn` (User last name contains value)  
            VALUE: `Search string`

        * **lockStatus**  
            Lock status:
            * 0 - Locked
            * 1 - Web access allowed
            * 2 - Web and mobile access allowed,  
            
            OPERATOR: `eq` (User lock status)  
            VALUE: `[0|1|2]`.

        * **effectiveRoles**  
            Filter users with _DIRECT_ or _DIRECT_ **AND** _EFFECTIVE_ roles  
            * `false`: _DIRECT_ roles  
            * `true`:  _DIRECT_ **AND** _EFFECTIVE_ roles  

            > _DIRECT_ means: e.g. user gets role **directly** granted from someone with _grant permission_ right.  
            _EFFECTIVE_ means: e.g. user gets role through **group membership**.  

            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]` (default: `false`)


        ### Logical grouping:

        Filtering according first three fields (`login`, `lastName`, `firstName`) is intrinsically processed by the API as logical _OR_.  

        In opposite, filtering according to last three field (`lockStatus`) is processed intrinsically as logical _AND_.


        ### Example:

        * `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  

        Filter by `login` contains `searchString_1` or `firstName` contains `searchString_2` and user are not locked.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields are supported.


        ### Sort fields:


        * **login**: Login name

        * **firstName**: First name

        * **lastName**: Last name

        * **gender**: Gender

        * **lockStatus**: User lock status

        * **lastLoginSuccessAt**: Last successful logon date

        * **expireAt**: Expiration date


        ### Example:

        * `firstName:asc|lastLoginSuccessAt:desc`  

        Sort by `firstName` ascending and by `lastLoginSuccessAt` descending.
      operationId: getCustomerUsers
      parameters:
        - description: Customer ID
          in: path
          name: customer_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90103] Customer not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get customer users
      tags:
        - provisioning
  /v4/public/branding/info:
    get:
      description: >-
        ### Functional Description:  

        Public branding information.


        ### Precondition:

        None.


        ### Effects:

        If `brandingServerBrandingId` is set, `brandingServerCustomer` is not supplied.


        ### Further Information:

        None.
      operationId: getBrandingServerInfo
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/BrandingServerInfo"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get branding info
      tags:
        - public
  "/v4/public/shares/downloads/{access_key}":
    get:
      description: |-
        ### Functional Description:  
        Retrieve the public information of a Download Share.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getPublicDownloadShare
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/PublicDownloadShare"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-50009] Wrong password for Download Share link.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-40751] File not found.
            * [-50000] Download access key not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get public Download Share info
      tags:
        - public
    post:
      description: |-
        ### Functional Description:
        Generate a download token to retrieve a shared file.

        ### Precondition:
        None.

        ### Effects:
        Download token is generated and returned.

        ### Further Information:
        After generating the download token a download is possible with:
        * `GET /public/shares/downloads/{access_key}/{token}`
      operationId: createPublicDownloadShareToken
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicDownloadTokenGenerateRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/PublicDownloadTokenGenerateResponse"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-50000] Download access key not found.
            * [-50002] Downloads limit reached.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Generate download token
      tags:
        - public
  "/v4/public/shares/downloads/{access_key}/{token}":
    get:
      description: >-
        ### Functional Description:  

        Download a file.


        ### Precondition:

        Valid download token.


        ### Effects:

        None.


        ### Further Information:

        Range requests are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getPublicFileData
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: Download token
          in: path
          name: token
          required: true
          schema:
            type: string
        - description: Range
          in: header
          name: Range
          required: false
          schema:
            type: string
        - description: Always return 'application/octet-stream' instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80022] Range cannot be set at ZIP download.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-50000] Download access key not found.
            * [-50001] Download token not found.
            * [-50002] Downloads limit reached.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "416":
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - public
    head:
      description: >-
        ### Functional Description:  

        Download a file.


        ### Precondition:

        Valid download token.


        ### Effects:

        None.


        ### Further Information:

        Range requests are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getPublicFileData_1
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: Download token
          in: path
          name: token
          required: true
          schema:
            type: string
        - description: Range
          in: header
          name: Range
          required: false
          schema:
            type: string
        - description: Always return 'application/octet-stream' instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80022] Range cannot be set at ZIP download.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-50000] Download access key not found.
            * [-50001] Download token not found.
            * [-50002] Downloads limit reached.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "416":
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - public
  "/v4/public/shares/uploads/{access_key}":
    get:
      description: >-
        ### Functional Description:  

        Provides information about the desired Upload Share.


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        If no password is set, the returned information is reduced to the following attributes (if available):


        * **name**

        * **maxSlots**

        * **createdAt**

        * **isProtected**

        * **isEncrypted**

        * **showUploadedFiles**

        * **userUserPublicKeyList** (if parent is end-to-end encrypted)


        Only if the password is transmitted as `X-Sds-Share-Password` header, all values are returned.
      operationId: getPublicUploadShare
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: Upload share password
          in: header
          name: X-Sds-Share-Password
          required: false
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/PublicUploadShare"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-50502] Wrong password.
            * [-50505] No room user has a keypair.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-50501] Upload access key not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get public Upload Share info
      tags:
        - public
    post:
      description: >
        ### Functional Description:  

        Create a new upload channel.


        ### Precondition:

        None.


        ### Effects:

        Upload channel is created and corresponding token / upload ID returned.


        ### Further Information:

        The token from the response can be used at:


        * `POST /uploads/{token}`

        * `PUT /uploads/{token}`

        * `DELETE /uploads/{token}`


        Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.


        ### Node naming convention


        * Node (room, folder, file) names are limited to 150 characters.


        * Not allowed names:  

        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9','.','/'`


        * Not allowed characters in names:  

        `'../', '\\', '<','>', ':', '\"', '|', '?', '*', '/'`
      operationId: createShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateShareUploadChannelRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/CreateShareUploadChannelResponse"
        "400":
          description: |-
            Bad Request

            * [-40755] Bad node name.
            * [-50506] Exceeds the number of files for this Upload Share.
            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-50502] Wrong password.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-50501] Upload access key not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "507":
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room.
            * [-50504] Exceeds the quota for this Upload Share.
            * [-90200] Exceeds the free customer quota.
            * [-90201] Exceeds the free customer physical disk space.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new file upload channel
      tags:
        - public
  "/v4/public/shares/uploads/{access_key}/{upload_id}":
    delete:
      description: |-
        ### Functional Description:
        Abort (chunked) upload via Upload Share.

        ### Precondition:
        Valid Upload ID.

        ### Effects:
        Aborts upload and invalidates upload ID / token.

        ### Further Information:
        None.
      operationId: cancelShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Cancel file upload
      tags:
        - public
    post:
      description: >-
        ### Functional Description:  

        Chunked upload of files via Upload Share.


        ### Precondition:

        Valid upload ID.


        ### Effects:

        Chunk of file is uploaded.


        ### Further Information:

        Chunked uploads (range requests) are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: uploadShare
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          schema:
            type: string
        - description: |-
            Content-Range
            e.g. "bytes 0-999/3980"
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Content-Range
          required: false
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/uploadFile"
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ChunkUploadResponse"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80021] Incorrect upload 'Content-Range'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "507":
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room.
            * [-90200] Exceeds the free customer quota.
            * [-90201] Exceeds the free customer physical disk space.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Upload file
      tags:
        - public
    put:
      description: >-
        ### Functional Description:

        Finalize (chunked) upload via Upload Share.


        ### Precondition:

        Valid upload ID.


        ### Effects:

        Finalizes upload.


        ### Further Information:

        Chunked uploads (range requests) are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).  


        Please ensure that all chunks have been transferred correctly before finishing the upload.  

        If file hash has been created in time a `201 Created` will be responded and hash will be part of response, otherwise it will be a `202 Accepted` without it.


        ### 200 OK is not used by this API
      operationId: completeShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          schema:
            type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserFileKeyList"
        description: Mandatory for encrypted shares
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/PublicUploadedFileData"
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/PublicUploadedFileData"
        "202":
          description: Accepted
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "508":
          description: Loop Detected
      summary: Complete file upload
      tags:
        - public
  /v4/public/software/version:
    get:
      description: |-
        ### Functional Description:  
        Public software version information.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        The version of DRACOON Server consists of two components:
        * **API**
        * **Core** (refered to as _"Server"_)

        that are versioned individually.
      operationId: getSoftwareVersion
      parameters:
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/SoftwareVersionData"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get software version info
      tags:
        - public
  /v4/public/system/info:
    get:
      description: |-
        ### Functional Description:  
        Provides information about system.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getSystemInfo
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/SystemInfo"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get system information
      tags:
        - public
  /v4/public/system/info/auth/ad:
    get:
      description: |-
        ### Functional Description:  
        Provides information about Active Directory authentication options.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getActiveDirectoryAuthInfo
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ActiveDirectoryAuthInfo"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Active Directory authentication information
      tags:
        - public
  /v4/public/system/info/auth/openid:
    get:
      description: |-
        ### Functional Description:  
        Provides information about OpenID Connect authentication options.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOpenIdAuthInfo
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OpenIdAuthInfo"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OpenID Connect authentication information
      tags:
        - public
  /v4/public/time:
    get:
      description: |-
        ### Functional Description:  
        Retrieve the actual server time.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getSdsServerTime
      parameters:
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/SdsServerTime"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get system time
      tags:
        - public
  /v4/roles:
    get:
      description: |-
        ### Functional Description:  
        Retrieve a list of all Roles and the role assignment rights.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getRoles
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleList"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get all roles and to the role assignment rights
      tags:
        - roles
  "/v4/roles/{role_id}/groups":
    delete:
      description: >-
        ### Functional Description:  

        Removes one or more groups from a role.


        ### Precondition:

        Role _"Group Manager"_ required.  

        For each role, at least one non-expiring user must remain who keeps the role.


        ### Effects:

        One or more groups will be removed from a role.


        ### Further Information:

        None.
      operationId: deleteRoleGroups
      parameters:
        - description: Role ID
          in: path
          name: role_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/GroupIds"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleGroupList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-71001] Role not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Revoke groups role
      tags:
        - roles
    get:
      description: >-
        ### Functional Description:  

        Get all groups of a role.


        ### Precondition:

        Right _"read groups"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **isMember**  
            Filter the groups which are / aren't member of that role  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        * **name**  
            Group name  
            OPERATOR: `cn` (Group name contains value; multiple values not allowed)  
            VALUE: `Search string`

        ### Example:

        * `isMember:eq:false|name:cn:searchString`  

        Get all groups that are not a member of that role AND whose `name` contains `searchString`.
      operationId: getRoleGroups
      parameters:
        - description: Role ID
          in: path
          name: role_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleGroupList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-71001] Role not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get role groups
      tags:
        - roles
    post:
      description: |-
        ### Functional Description:
        Adds one or more groups to a role.

        ### Precondition:
        Right _"grant permission on groups"_ required.

        ### Effects:
        One or more groups will be added to a role.

        ### Further Information:
        None.
      operationId: addRoleGroups
      parameters:
        - description: Role ID
          in: path
          name: role_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/GroupIds"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleGroupList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-71001] Role not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add groups to the role
      tags:
        - roles
  "/v4/roles/{role_id}/users":
    delete:
      description: >-
        ### Functional Description:  

        Removes one or more users from a role.


        ### Precondition:

        Role _"User Manager"_ required.  

        For each role, at least one non-expiring user must remain who keeps the role.


        ### Effects:

        One or more users will be removed from a role.


        ### Further Information:

        None.
      operationId: deleteRoleUsers
      parameters:
        - description: Role ID
          in: path
          name: role_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserIds"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleUserList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
            * [-71001] Role not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Revoke users role
      tags:
        - roles
    get:
      description: >-
        ### Functional Description:  

        Get all users of a role.


        ### Precondition:

        Right _"read users"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **isMember**  
            Filter the users which are / aren't member of that role  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        * **displayName**  
            User display name (firstName, lastName, login)  
            OPERATOR: `cn` (User display name contains value; multiple values not allowed)  
            VALUE: `Search string`

        ### Example:

        * `isMember:eq:false|displayName:cn:searchString`  

        Get all users that are not member of that role AND whose display name contains `searchString`.
      operationId: getRoleUsers
      parameters:
        - description: Role ID
          in: path
          name: role_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleUserList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-71001] Role not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get role users
      tags:
        - roles
    post:
      description: |-
        ### Functional Description:
        Adds one or more users to a role.

        ### Precondition:
        Right _"grant permission on users"_ required.

        ### Effects:
        One or more users will be added to a role.

        ### Further Information:
        None.
      operationId: addRoleUsers
      parameters:
        - description: Role ID
          in: path
          name: role_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserIds"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleUserList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
            * [-71001] Role not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add users to the role
      tags:
        - roles
  /v4/shares/downloads:
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of Download Shares.


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filters


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  

        Multiple fields is supported.


        ### Filter fields:


        * **name**  
            Alias Name or File Name  
            OPERATOR: `cn` ( name contains value)  
            VALUE: `Search string`

        * **createdBy**  
            Creator info  
            OPERATOR: `cn` (Creator info (`login`, `email`, `firstName`, `lastName`) contains value)  
            VALUE: `Search string`

        * **accessKey**  
            Share access key  
            OPERATOR: `cn` (Share access key contains value)  
            VALUE: `Search string`

        * **nodeId**  
            Source node ID  
            OPERATOR: `eq` (Source file / folder / room ID)  
            VALUE: `Search node ID`

        * **userId**  
            Creator user ID  
            OPERATOR: `eq`  
            VALUE: `Search user ID`

        ### Example:

        * `name:cn:searchString_1|createdBy:cn:searchString_2|nodeId:eq:1`  

        Filter by file `name` contains `searchString_1` OR creator info (`login`, `email`, `firstName`, `lastName`) contains `searchString_2` OR node ID is equal to `1`.


        ### Sorting


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields is supported.


        ### Sort fields:


        * **name**: Alias Name or File Name

        * **classification**: Classification ID (for files only):  
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
        * **notifyCreator**: Notify creator on every download

        * **expireAt**: Expiration date

        * **createdAt**: Creation date

        * **createdBy**: Creator info


        ### Example:

        * `name:asc|expireAt:desc`  

        Sort by `name` ascending and by `expireAt` descending.
      operationId: getDownloadShares
      parameters:
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DownloadShareList"
        "400":
          description: |-
            Bad Request

            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Download Shares
      tags:
        - shares
    post:
      description: |-
        ### Functional Description:
        Create a new Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        Download Share created.

        ### Further Information:

        * **Access password:** limited to **150** characters.
        * **Notes:** limited to **255** characters.
        * **Alias names:** limited to **150** characters.
      operationId: createDownloadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateDownloadShareRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DownloadShare"
        "400":
          description: >-
            Bad Request


            * [-10002] Password is not secure.

            * [-50004] Download Shares of encrypted containers not allowed.

            * [-50005] File key must be set on Download Share in encrypted containers.

            * [-50006] Key pair must be set on Download Share in encrypted containers.

            * [-50007] Download Shares in unencrypted rooms must not have keys.

            * [-70022] Public key format is not valid.

            * [-70023] Private key format is not valid.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.

            * [-80009] Not a valid email address.

            * [-80030] SMS disabled.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "502":
          description: |-
            Bad Gateway

            * [-90090] Could not send SMS.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new Download Share
      tags:
        - shares
  "/v4/shares/downloads/{share_id}":
    delete:
      description: >-
        ### Functional Description:

        Delete a Download Share.


        ### Precondition:

        None.


        ### Effects:

        Download Share is deleted.


        ### Further Information:

        Only the Download Share is removed; the referenced file or container persists.
      operationId: deleteDownloadShare
      parameters:
        - description: Share ID
          in: path
          name: share_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-60000] Download Share not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete Download Share
      tags:
        - shares
    get:
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one Download Share.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getDownloadShare
      parameters:
        - description: Share ID
          in: path
          name: share_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DownloadShare"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-60000] Download Share not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Download Share
      tags:
        - shares
  "/v4/shares/downloads/{share_id}/qr":
    get:
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one Download Share.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getDownloadShareQr
      parameters:
        - description: Share ID
          in: path
          name: share_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/DownloadShare"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-60000] Download Share not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Download Share via QR Code
      tags:
        - shares
  /v4/shares/uploads:
    get:
      description: >-
        ### Functional Description:  

        Retrieve a list of Upload Shares (aka Upload Accounts).


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filters


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  

        Multiple fields is supported.


        ### Filter fields:


        * **name**  
            Alias name  
            OPERATOR: `cn` (Alias name contains value)  
            VALUE: `search string`

        * **createdBy**  
            Creator info  
            OPERATOR: `cn` (Creator info (`login`, `email`, `firstName`, `lastName`) contains value)  
            VALUE: `search string`

        * **accessKey**  
            Share access key  
            OPERATOR: `cn` (Share access key contains value)  
            VALUE: `search string`

        * **targetId**  
            Target node (room, folder)  
            **DEPRECATED** OPERATOR: `cn` (Target node contains value)  
            **NEW** OPERATOR: `eq` (Target node equal value)  
            VALUE: `search string`

        * **userId**  
            Creator user ID  
            OPERATOR: `eq`  
            VALUE: `Search user ID`

        ### Example:

        * `name:cn:searchString_1|createdBy:cn:searchString_2`  

        Filter by alias `name` contains `searchString_1` OR creator info (`login`, `email`, `firstName`, `lastName`) contains `searchString_2`.


        ### Sorting


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields is supported.


        ### Sort fields:


        * **name**: Alias name

        * **expireAt**: Expiration date

        * **notifyCreator**: Notify creator on every upload.

        * **createdAt**: Creation date

        * **createdBy**: Creator info


        ### Example:

        * `name:asc|expireAt:desc`  

        Sort by `name` ascending AND by `expireAt` descending.
      operationId: getUploadShares
      parameters:
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UploadShareList"
        "400":
          description: |-
            Bad Request

            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Upload Shares
      tags:
        - shares
    post:
      description: >-
        ### Functional Description:

        Create a new Upload Share (aka Upload Account).


        ### Precondition:

        User has _"manage upload share"_ permissions on target container.


        ### Effects:

        Upload Share is created.


        ### Further Information:


        * **Notes:** limited to **255** characters.

        * **Alias Names:** are limited to **150** characters.

        * **Send Mail:**:  
            * If `sendMail` is set to `false`: `mailRecipients`; `mailSubject`; `mailBody` are **optional**.  
            * If `sendMail` is set to `true`: `mailRecipients`; `mailSubject`; `mailBody` are **mandatory**.
      operationId: createUploadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateUploadShareRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UploadShare"
        "400":
          description: >-
            Bad Request


            * [-10002] Password is not secure.

            * [-41200] Path is too long.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.

            * [-80009] Not a valid email address.

            * [-80030] SMS disabled.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-41000] Node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * Specified alias name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "502":
          description: |-
            Bad Gateway

            * [-90090] Could not send SMS.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create new Upload Share
      tags:
        - shares
  "/v4/shares/uploads/{share_id}":
    delete:
      description: >-
        ### Functional Description:

        Delete an Upload Share (aka Upload Account).


        ### Precondition:

        None.


        ### Effects:

        Upload Share is deleted.


        ### Further Information:

        Only the Upload Share is removed; already uploaded files and the target container persist.
      operationId: deleteUploadShare
      parameters:
        - description: Share ID
          in: path
          name: share_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-60500] Upload Share not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete Upload Share
      tags:
        - shares
    get:
      description: >-
        ### Functional Description:  

        Retrieve detailed information about one Upload Share (aka Upload Account).


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: getUploadShare
      parameters:
        - description: Share ID
          in: path
          name: share_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UploadShare"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-60500] Upload Share not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Upload Share
      tags:
        - shares
  "/v4/shares/uploads/{share_id}/qr":
    get:
      description: >-
        ### Functional Description:  

        Retrieve detailed information about one Upload Share (aka Upload Account).


        ### Precondition:

        None.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: getUploadShareQr
      parameters:
        - description: Share ID
          in: path
          name: share_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UploadShare"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-60500] Upload Share not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Upload Share via QR Code
      tags:
        - shares
  /v4/syslog/audits/nodes:
    get:
      deprecated: true
      description: >-
        ### Functional Description:  

        Retrieve a list of all nodes of type `room` and the room assignment users with permissions.


        ### Precondition:

        Right _"read audit log"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  

        Multiple fields are supported.


        ### Filter fields:


        * **nodeId**  
            Node ID  
            OPERATOR: `eq` (Node ID equal value)  
            VALUE: `Search string`

        * **nodeName**  
            Node name (Login)  
            OPERATOR: `cn|eq` (Node name contains value | equal value)  
            VALUE: `Search string`

        * **nodeParentId**  
            Node parent ID  
            OPERATOR: `eq` (Parent ID equal value; parent ID 0 is the root node.)  
            VALUE: `Search string`

        * **userId**  
            User ID  
            OPERATOR: `eq` (User ID equal value)  
            VALUE: `Search string`

        * **userName**  
            User name (Login)  
            OPERATOR: `cn|eq` (User name contains value | equal value)  
            VALUE: `Search string`

        * **userFirstName**  
            User first name  
            OPERATOR: `cn|eq` (User first name contains value | equal value)  
            VALUE: `Search string`

        * **userLastName**  
            User last name  
            OPERATOR: `cn|eq` (User last name contains value | equal value)  
            VALUE: `Search string`

        * **permissionsManage**  
            Filter the users that (don't) have manage right in this room  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

        * **nodeIsEncrypted**  
            Encrypted node filter  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

        * **nodeHasRecycleBin**  
            Recycle bin filter  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

            
        * **nodeHasActivitiesLog**  
            Activities log filter  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]`

        ### Logical grouping:

        Filtering according first three fields (`login`, `lastName`, `firstName`) is intrinsically processed by the API as logical _OR_.  

        In opposite, filtering according to is processed intrinsically as logical _AND_.


        ### Example:

        * `userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`  

        Filter by user login containing `searchString_1` OR first name containing `searchString_2` and node ID equal 2.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields are supported.


        ### Sort fields:


        * **nodeId**: Node ID

        * **nodeName**: Node name

        * **nodeParentId**: Node parent ID

        * **nodeSize**: Node size

        * **nodeQuota**: Node quota


        ### Example:

        * `nodeName:asc`  

        Sort by `nodeName` ascending.
      operationId: getAuditNodeUserData_1
      parameters:
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/AuditNodeResponse"
                type: array
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get node assigned users with permissions
      tags:
        - syslog
  /v4/syslog/events:
    get:
      deprecated: true
      description: |-
        ### Functional Description:  
        Retrieve eventlog (= audit log) events.

        ### Precondition:
        Role _"Log Auditor"_ required.

        ### Effects:
        None.

        ### Further Information:
        Output may be limited to a certain number of entries.  
        Please use filter criteria and paging.
      operationId: getSyslogEvents
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: |-
            Start date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_start
          required: false
          schema:
            type: string
        - description: |-
            End date
            e.g. 2015-12-31T23:59:00
          in: query
          name: date_end
          required: false
          schema:
            type: string
        - description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          in: query
          name: type
          required: false
          schema:
            type: integer
            format: int32
        - description: User ID
          in: query
          name: user_id
          required: false
          schema:
            type: integer
            format: int64
        - description: |-
            Operation status:
            * 0 - Success
            * 2 - Error
          in: query
          name: status
          required: false
          schema:
            type: integer
            format: int32
        - description: User client
          in: query
          name: user_client
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/SyslogEventList"
            text/csv:
              schema:
                $ref: "#/components/schemas/SyslogEventList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
            * [-80026] Not a valid operation ID.
            * [-80027] Not a valid operation status.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get system events
      tags:
        - syslog
  /v4/syslog/operations:
    get:
      deprecated: true
      description: >-
        ### Functional Description:  

        Retrieve eventlog (= audit log) operation IDs and the associated log operation description.


        ### Precondition:

        Role _"Log Auditor"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.
      operationId: getLogOperations_1
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/LogOperationList"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get allowed Log Operations
      tags:
        - syslog
  /v4/system/config/actions/test/ad:
    post:
      description: |-
        ### Functional Description:  
        Test AD configuration.

        ### Precondition:
        Role _Config Manager_.

        ### Effects:
        None.

        ### Further Information:
        DRACOON tries to establish a connection with the provided information.
      operationId: testAdConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/TestActiveDirectoryConfigRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/TestActiveDirectoryConfigResponse"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-90051] Active Directory login failed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90052] Active Directory Connection Failed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * [-90056] Active Directory Name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Test active directory configuration
      tags:
        - system
  /v4/system/config/actions/test/radius:
    post:
      operationId: testRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "502":
          description: |-
            Bad Gateway

            * [-90070] RADIUS connection failed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Test RADIUS server availability
      tags:
        - system
  /v4/system/config/auth/ads:
    get:
      description: |-
        ### Functional Description:  
        Retrieve a list of configured ADs.

        ### Precondition:
        Role _Config Manager_.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getAdConfigs
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ActiveDirectoryConfigList"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get active directory configuration
      tags:
        - system
    post:
      description: |-
        ### Functional Description:
        Create a new AD configuration.

        ### Precondition:
        Role _Config Manager_.

        ### Effects:
        New AD configuration created.

        ### Further Information:
        None.
      operationId: createAdConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateActiveDirectoryConfigRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ActiveDirectoryConfig"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-90053] This Homefolder is not allowed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-40000] Parent node not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * [-90056] Active Directory Name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create active directory configuration
      tags:
        - system
  "/v4/system/config/auth/ads/{ad_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete an existing AD configuration.

        ### Precondition:
        Role _Config Manager_.

        ### Effects:
        AD configuration removed.

        ### Further Information:
        None.
      operationId: deleteAdConfig
      parameters:
        - description: Active Directory ID
          in: path
          name: ad_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90050] Active Directory configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * [-90059] No valid Active Directory found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete active directory configuration
      tags:
        - system
    get:
      description: |-
        ### Functional Description:  
        Retrieve the configuration of a AD.

        ### Precondition:
        Role _Config Manager_.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getAuthAdSetting
      parameters:
        - description: Active Directory ID
          in: path
          name: ad_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ActiveDirectoryConfig"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90050] Active Directory configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get active directory configuration
      tags:
        - system
    put:
      description: |-
        ### Functional Description:  
        Update an existing AD configuration.

        ### Precondition:
        Role _Config Manager_.

        ### Effects:
        AD configuration updated.

        ### Further Information:
        None.
      operationId: updateAuthAdSetting
      parameters:
        - description: Active Directory ID
          in: path
          name: ad_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateActiveDirectoryConfigRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ActiveDirectoryConfig"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-90053] This Homefolder is not allowed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-30000] Group not found.
            * [-40000] Parent node not found.
            * [-90050] Active Directory configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-90063] Cannot activate Active Directory import due to active users at other customers.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update active directory configuration
      tags:
        - system
  /v4/system/config/auth/openid/idps:
    get:
      description: |-
        ### Functional Description:  
        Retrieve a list of configured OpenID Connect IDPs.

        ### Precondition:
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOpenIdIdpConfigs
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/OpenIdIdpConfig"
                type: array
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OpenID IDP configurations
      tags:
        - system
    post:
      description: >-
        ### Functional Description:

        Create a new OpenID Connect IDP configuration.


        ### Precondition:

        Role _Config Manager_ of the Provider Customer.


        ### Effects:

        New OpenID Connect IDP configuration is created.


        ### Further Information:

        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: createOpenIdIdpConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateOpenIdIdpConfigRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OpenIdIdpConfig"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80007] Maximum allowed length is exceeded.
            * [-80010] Not a valid URL.
            * [-80032] Not a valid URI.
            * [-90086] Not a valid PKCE code challenge method.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-90036] OpenID Connect IDP configuration with same name already exists.

            * [-90037] OpenID Connect IDP configuration with same issuer already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create OpenID IDP configuration
      tags:
        - system
  "/v4/system/config/auth/openid/idps/{idp_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete an existing OpenID Connect IDP configuration.

        ### Precondition:
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        OpenID Connect IDP configuration removed.

        ### Further Information:
        None.
      operationId: deleteOpenIdIdpConfig
      parameters:
        - description: OpenID IDP configuration ID
          in: path
          name: idp_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-90038] Cannot delete OpenID Connect IDP configuration with active users.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete OpenID IDP configuration
      tags:
        - system
    get:
      description: |-
        ### Functional Description:  
        Retrieve an OpenID Connect IDP configuration.

        ### Precondition:
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOpenIdIdpConfig
      parameters:
        - description: OpenID IDP configuration ID
          in: path
          name: idp_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OpenIdIdpConfig"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OpenID IDP configuration
      tags:
        - system
    put:
      description: >-
        ### Functional Description:  

        Update an existing OpenID Connect IDP configuration.


        ### Precondition:

        Role _Config Manager_ of the Provider Customer.


        ### Effects:

        OpenID Connect IDP configuration is updated.


        ### Further Information:

        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: updateOpenIdIdpConfig
      parameters:
        - description: OpenID IDP configuration ID
          in: path
          name: idp_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateOpenIdIdpConfigRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OpenIdIdpConfig"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80007] Maximum allowed length is exceeded.
            * [-80010] Not a valid URL.
            * [-80032] Not a valid URI.
            * [-90086] Not a valid PKCE code challenge method.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-90036] OpenID Connect IDP configuration with same name already exists.

            * [-90037] OpenID Connect IDP configuration with same issuer already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update OpenID IDP configuration
      tags:
        - system
  /v4/system/config/auth/radius:
    delete:
      operationId: DeteteRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete RADIUS Configuration
      tags:
        - system
    get:
      operationId: GetRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RadiusConfig"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90080] Client could not be found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get RADIUS Configuration
      tags:
        - system
    post:
      operationId: create
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RadiusConfigCreateRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RadiusConfig"
        "400":
          description: |-
            Bad Request

            * [-80007] Maximum allowed length is exceeded.
            * [-80033] Not a valid port number.
            * [-90073] RADIUS configuration already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create RADIUS Configuration
      tags:
        - system
    put:
      operationId: UpdateRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/RadiusConfigUpdateRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RadiusConfig"
        "400":
          description: |-
            Bad Request

            * [-80007] Maximum allowed length is exceeded.
            * [-80033] Not a valid port number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update RADIUS Configuration
      tags:
        - system
  /v4/system/config/oauth/clients:
    get:
      description: |-
        ### Functional Description:  
        Retrieve a list of configured OAuth clients.

        ### Precondition:
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOAuthClients
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/OAuthClient"
                type: array
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OAuth clients
      tags:
        - system
    post:
      description: >-
        ### Functional Description:

        Create a new OAuth client.


        ### Precondition:

        Role _Config Manager_ of the Provider Customer.


        ### Effects:

        New OAuth client created.


        ### Further Information:  

        Client secret must have:  

        * at least 12 characters, at most 32 characters  

        * only lower case characters, upper case characters and digits  

        * at least 1 lower case character, 1 upper case character and 1 digit  


        The client secret is optional and will be generated if it is left empty.  


        Valid grant types are:  

        * **authorization_code**  

        * **implicit**  

        * **password**  

        * **client_credentials**  

        * **refresh_token**  


        Grant type `client_credentials` is actually not permitted!  


        Default access token validity: **8 hours**  

        Default refresh token validity: **30 days**
      operationId: createOAuthClient
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateOAuthClientRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OAuthClient"
        "400":
          description: |-
            Bad Request

            * [-10002] Password is not secure.
            * [-80000] Mandatory fields cannot be empty.
            * [-80007] Maximum allowed length is exceeded.
            * [-80032] Not a valid URI.
            * [-90083] Invalid grant type.
            * [-90085] Invalid token validity.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * [-90081] Client with same ID already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create OAuth client
      tags:
        - system
  "/v4/system/config/oauth/clients/{client_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete an existing OAuth client.

        ### Precondition:
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        OAuth client removed.

        ### Further Information:
        None.
      operationId: deleteOAuthClient
      parameters:
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90080] Client could not be found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete OAuth client
      tags:
        - system
    get:
      description: |-
        ### Functional Description:  
        Retrieve the configuration of an OAuth client.

        ### Precondition:
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOAuthClient
      parameters:
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OAuthClient"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90080] Client could not be found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OAuth client
      tags:
        - system
    put:
      description: >
        ### Functional Description:  

        Update an existing OAuth client.


        ### Precondition:

        Role _Config Manager_ of the Provider Customer.


        ### Effects:

        OAuth client updated.


        ### Further Information:  

        Client secret must have:  

        * at least 12 characters, at most 32 characters  

        * only lower case characters, upper case characters and digits  

        * at least 1 lower case character, 1 upper case character and 1 digit  


        The client secret is optional and will be generated if it is left empty.  


        Valid grant types are:  

        * **authorization_code**  

        * **implicit**  

        * **password**  

        * **client_credentials**  

        * **refresh_token**  


        Grant type `client_credentials` is actually not permitted!  
      operationId: updateOAuthClient
      parameters:
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateOAuthClientRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/OAuthClient"
        "400":
          description: |-
            Bad Request

            * [-10002] Password is not secure.
            * [-80000] Mandatory fields cannot be empty.
            * [-80007] Maximum allowed length is exceeded.
            * [-80032] Not a valid URI.
            * [-90083] Invalid grant type.
            * [-90085] Invalid token validity.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90080] Client could not be found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update OAuth client
      tags:
        - system
  /v4/system/config/storage/s3:
    get:
      operationId: GetS3Config
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/S3Config"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90026] S3 configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get S3 Storage Configuration
      tags:
        - system
    post:
      operationId: PostS3Config
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/S3ConfigCreateRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/S3Config"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80007] Maximum allowed length is exceeded.
            * [-90001] Cannot use both SSL and STARTTLS for mail.
            * [-90025] S3 configuration already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create S3 Storage Configuration
      tags:
        - system
    put:
      operationId: PutS3Config
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/S3ConfigUpdateRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/S3Config"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80007] Maximum allowed length is exceeded.
            * [-90001] Cannot use both SSL and STARTTLS for mail.
            * [-90026] S3 configuration not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update S3 Storage Configuration
      tags:
        - system
  "/v4/uploads/{token}":
    delete:
      description: >-
        ### Functional Description:

        Cancel file upload.


        ### Precondition:

        Valid upload token.


        ### Effects:

        Upload canceled, token invalidated and all already transfered chunks removed.


        ### Further Information:

        It is recommended to notify the API about cancelled uploads if possible.
      operationId: cancelFileUploadByToken
      parameters:
        - description: Upload token
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-20502] Invalid upload token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-20501] Upload not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Cancel file upload
      tags:
        - uploads
    post:
      description: >-
        ### Functional Description:  

        Upload a chunk of a file.


        ### Precondition:

        Valid upload token.


        ### Effects:

        Chunk uploaded.


        ### Further Information:

        Use this API if you cannot set custom headers during uploads.  

        Range requests are supported (please cf. [RCF 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: uploadFileByToken
      parameters:
        - description: Upload token
          in: path
          name: token
          required: true
          schema:
            type: string
        - description: |-
            Content-Range
            e.g. "bytes 0-999/3980"
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Content-Range
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/uploadFile"
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ChunkUploadResponse"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80021] Incorrect upload 'Content-Range'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-20502] Invalid upload token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "507":
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room.
            * [-90200] Exceeds the free customer quota.
            * [-90201] Exceeds the free customer physical disk space.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Upload file by token
      tags:
        - uploads
    put:
      description: >-
        ### Functional Description:

        Finish uploading a file.


        ### Precondition:

        Valid upload token.


        ### Effects:

        File created.


        ### Further Information:

        The provided file name might be changed in accordance with the resolution strategy:


        * **autorename**: changes the file name and adds a number to avoid conflicts.

        * **overwrite**: deletes any old file with the same file name.

        * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.


        Please ensure that all chunks have been transferred correctly before finishing the upload.


        ### 200 OK is not used by this API
      operationId: completeFileUploadByToken
      parameters:
        - description: Upload token
          in: path
          name: token
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteUploadRequest"
        description: |-
          The body must be empty if public upload token is used.
          The 'resolutionStrategy' in that case will be always 'autorename'
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "202":
          description: Accepted
        "400":
          description: >-
            Bad Request


            * [-40763] File key must be set for upload into encrypted room.

            * [-80000] Mandatory fields cannot be empty.

            * [-80007] Maximum allowed length is exceeded.

            * [-80034] 'keepShareLinks' is only allowed with conflict mode 'overwrite'.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-20502] Invalid upload token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * Specified file name already exists. Node of existing file is returned.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Node"
        "508":
          description: Loop Detected
      summary: Complete file upload
      tags:
        - uploads
  /v4/user/account:
    get:
      description: >-
        ### Functional Description:  

        Retrieves all information regarding the current user's account.


        ### Precondition:

        Valid auth token.


        ### Effects:

        None.


        ### Further Information:

        Setting the query parameter `more_info` to `true`, causes the API to return more details e.g. the user's groups.
      operationId: getUserInfo
      parameters:
        - description: |-
            Get more info for this user
            e.g. list of user groups
          in: query
          name: more_info
          required: false
          schema:
            type: boolean
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserAccount"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user account info
      tags:
        - user
    put:
      description: >-
        ### Functional Description:  

        Update current user's account.


        ### Precondition:

        Valid auth token.


        ### Effects:

        User updated.


        ### Further Information:

        All input fields are limited to **150** characters.  

        Allowed characters: **All**  


        ### Authentication Method Options


        * **SQL**  
            `none`

        * **Active Directory**  
            (optional)  
            key: `"ad_config_id"`  
            value: "Active Directory configuration ID"  
            
            key: `"username"`  
            value: "Active Directory user name according to auth setting `userFilter`"

        * **RADIUS**  
            key: `"username"`  
            value: "Radius user name"

        * **OpenID Connect**  
            key: `"openid_config_id"`  
            value: "OpenID Connect configuration ID"  
            
            key: `"username"`  
            value: "OpenID Connect user name according to auth setting `mappingClaim`"
      operationId: updateUserAccount
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateUserAccountRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserAccount"
        "400":
          description: >-
            Bad Request


            * [-10100] Invalid authentication method.

            * [-10101] Not valid auth method key.

            * [-70103] Accepted EULA can not be undone.

            * [-70104] EULA is already accepted.

            * [-70105] Username change not allowed.

            * [-70506] Wrong gender.

            * [-80000] Mandatory fields cannot be empty.

            * [-80007] Maximum allowed length is exceeded.

            * [-80009] Not a valid email address.

            * [-90062] Cannot set Active Directory authentication for this customer.

            * [-90071] Cannot enable RADIUS. No Valid Configuration.

            * [-90095] Cannot set OpenID Connect authentication for this customer.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90059] No valid Active Directory found.
            * [-90094] No valid OpenID Connect IDP configuration found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-70560] User with provided basic authentication login already exists.

            * [-70561] User with provided Active Directory user name already exists.

            * [-70562] User with provided RADIUS login already exists.

            * [-70563] User with provided OpenID user name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update user account
      tags:
        - user
  /v4/user/account/customer:
    get:
      description: |-
        ### Functional Description:  
        Lean API to get: 
        * customer name
        * used / free space
        * used / avaliable
        * user account info

        of a customer.

        ### Precondition:
        Valid auth token.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getCustomerInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/CustomerData"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get customer info
      tags:
        - user
    put:
      description: |-
        ### Functional Description:  
        Activate client-side encryption for whole customer.

        ### Precondition:
        Only available for _"Config Managers"_.

        ### Effects:
        Client-side encryption is enabled.

        ### Further Information:
        Sets the ability for this customer to encrypt rooms.  
        Once enabled on customer level, it cannot be unset.  
        On activation, a emergency keypair must be set.
      operationId: enableCustomerEncryption
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/EnableCustomerEncryptionRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/CustomerData"
        "400":
          description: |-
            Bad Request

            * [-70022] Public key format is not valid.
            * [-70023] Private key format is not valid.
            * [-70024] Customer encryption can not be disabled.
            * [-70025] Customer encryption is already enabled.
            * [-80000] Mandatory fields cannot be empty.
            * [-80005] Not valid boolean value.
            * [-90020] TripleCrypt™ technology is not enabled.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Enable encryption for this customer
      tags:
        - user
  /v4/user/account/customer/keypair:
    get:
      description: |-
        ### Functional Description:  
        Retrieve the customer's keypair (aka system emergency password).

        ### Precondition:
        Valid auth token.

        ### Effects:
        None.

        ### Further Information:
        The private key is password-based encrypted with `AES256` / `PBKDF2`.  
        Further details in crypto documentation.
      operationId: getCustomerKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserKeyPairContainer"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70020] User does not have a key pair.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get customer keypair
      tags:
        - user
  /v4/user/account/keypair:
    delete:
      description: >-
        ### Functional Description:  

        Delete the user's keypair.


        ### Precondition:

        Valid auth token.


        ### Effects:

        None.


        ### Further Information:

        This will also remove all file keys that were encrypted with the user's public key.  

        If the user had exclusive access to some files, those are removed as well since decrypting them became impossible.
      operationId: deleteUserKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70020] User does not have a key pair.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete user keypair
      tags:
        - user
    get:
      description: |-
        ### Functional Description:  
        Retrieve the user's keypair.

        ### Precondition:
        Valid auth token.

        ### Effects:
        None.

        ### Further Information:
        The private key is password-based encrypted with `AES256` / `PBKDF2`.  
        Further details in crypto documentation.
      operationId: getUserKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserKeyPairContainer"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70020] User does not have a key pair.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user keypair
      tags:
        - user
    post:
      description: |-
        ### Functional Description:  
        Set the user's keypair.

        ### Precondition:
        Valid auth token.

        ### Effects:
        The keypair is set.

        ### Further Information:
        Overwriting an existing keypair is not possible.  
        Please delete the existing keypair first.  
        The private key is password-based encrypted with `AES256` / `PBKDF2`.  
        Further details in crypto documentation.
      operationId: setUserKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UserKeyPairContainer"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-70022] Public key format is not valid.
            * [-70023] Private key format is not valid.
            * [-80000] Mandatory fields cannot be empty.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |-
            Conflict

            * [-70021] User does already have a keypair.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Set user keypair
      tags:
        - user
  /v4/user/account/password:
    put:
      description: |-
        ### Functional Description:
        Change the user's password.

        ### Precondition:
        Valid auth token.

        ### Effects:
        Password is changed.

        ### Further Information:
        Password security configuration applies.
      operationId: changeUserPassword
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/ChangeUserPasswordRequest"
        description: body
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-10105] Password cannot be reset for this user.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Change user password
      tags:
        - user
  /v4/user/logout:
    post:
      description: |-
        ### Functional Description:  
        Logout a user.

        ### Precondition:
        Valid authentication token.

        ### Effects:
        User is logged out, authentication token invalidated.

        ### Further Information:
        None.
      operationId: userLogout
      parameters:
        - description: Invalidate all tokens
          in: query
          name: everywhere
          required: false
          schema:
            type: boolean
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * Token not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Invalidate authentication token
      tags:
        - user
  /v4/user/oauth/authorizations:
    get:
      description: |-
        ### Functional Description:  
        Retrieve info about all OAuth client authorizations.

        ### Precondition:
        Valid auth token.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getOAuthAuthorizations
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/OAuthAuthorization"
                type: array
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get OAuth client authorizations
      tags:
        - user
  "/v4/user/oauth/authorizations/{client_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete authorizations of an OAuth client.

        ### Precondition:
        Valid auth token; valid client ID.

        ### Effects:
        Authorizations for OAuth client are revoked.

        ### Further Information:
        None.
      operationId: deleteOAuthAuthorization
      parameters:
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90082] Authorization for provided client ID could not be found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete OAuth authorization
      tags:
        - user
  /v4/user/ping:
    get:
      description: |-
        ### Functional Description:
        Test connection to DRACOON Server (while authenticated).

        ### Precondition:
        None.

        ### Effects:
        `200 OK` with principal information is returned if successful.

        ### Further Information:
        None.
      operationId: userPing
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "406":
          description: |
            Not Acceptable
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Ping
      tags:
        - user
  /v4/users:
    get:
      description: >-
        ### Functional Description:  

        Get users entry point.  

        Returns a list of DRACOON users.


        ### Precondition:

        Right _"read users"_ required.


        ### Effects:

        None.


        ### Further Information:  

        Authentication with `X-Sds-Auth-Token` required.


        ### Filter


        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  

        Multiple fields are supported.


        ### Filter fields:


        * **login**  
            Login name  
            OPERATOR: `cn` (User login name contains value)  
            VALUE: `Search string`

        * **firstName**  
            First name  
            OPERATOR: `cn` (User first name contains value)  
            VALUE: `Search string`

        * **lastName**  
            Last name  
            OPERATOR: `cn` (User last name contains value)  
            VALUE: `Search string`

        * **lockStatus**  
            Lock status:
            * 0 - Locked
            * 1 - Web access allowed
            * 2 - Web and mobile access allowed  
            
            OPERATOR: `eq` (User lock status)  
            VALUE: `[0|1|2]`.

        * **effectiveRoles**  
            Filter users with _DIRECT_ or _DIRECT_ **AND** _EFFECTIVE_ roles  
            * `false`: _DIRECT_ roles  
            * `true`:  _DIRECT_ **AND** _EFFECTIVE_ roles  

            > _DIRECT_ means: e.g. user gets role **directly** granted from someone with _grant permission_ right.  
            _EFFECTIVE_ means: e.g. user gets role through **group membership**.  

            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false]` (default: `false`)

        ### Logical grouping:

        Filtering according first three fields (`login`, `lastName`, `firstName`) is intrinsically processed by the API as logical _OR_.  

        In opposite, filtering according to last three field (lockStatus) is processed intrinsically as logical _AND_.


        ### Example:

        * `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  

        Filter by `login` contains `searchString_1` OR `firstName` contains `searchString_2` AND user are not locked.


        ### Sort


        Sort string syntax: `FIELD_NAME:ORDER`  

        Order can be `asc` or `desc`.  

        Multiple fields are supported.


        ### Sort fields:


        * **login**: Login name

        * **firstName**: First name

        * **lastName**: Last name

        * **gender**: Gender

        * **lockStatus**: User lock status

        * **lastLoginSuccessAt**: Last successful logon date

        * **expireAt**: Expiration date


        ### Example:

        * `firstName:asc|lastLoginSuccessAt:desc`  

        Sort by `firstName` ascending AND by `lastLoginSuccessAt` descending
      operationId: getUsers
      parameters:
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Sort string
          in: query
          name: sort
          required: false
          schema:
            type: string
        - description: Include custom user attributes.
          in: query
          name: include_attributes
          required: false
          schema:
            type: boolean
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: |-
            Bad Request

            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get users
      tags:
        - users
    post:
      description: >-
        ### Functional Description:

        Create a new user.


        ### Precondition:

        Right _"change users"_ required.


        ### Effects:

        A new user is created.


        ### Further Information:


        * If a user should not expire, leave `expireAt` empty.

        * All input fields are limited to **150** characters

        * Allowed characters: **All**


        ### Authentication Method Options


        * **SQL**  
            `none`

        * **Active Directory**  
            (optional)  
            key: `"ad_config_id"`  
            value: "Active Directory configuration ID"  
            
            key: `"username"`  
            value: "Active Directory user name according to auth setting `userFilter`"

        * **RADIUS**  
            key: `"username"`  
            value: "Radius user name"

        * **OpenID Connect**  
            key: `"openid_config_id"`  
            value: "OpenID Connect configuration ID"  
            
            key: `"username"`  
            value: "OpenID Connect user name according to auth setting `mappingClaim`"
      operationId: createUser
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        description: body
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: >-
            Bad Request


            * [-10100] Invalid authentication method.

            * [-10101] Not valid auth method key.

            * [-10102] At least one authentication method must be enabled.

            * [-70506] Wrong gender.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.

            * [-80009] Not a valid email address.

            * [-90002] No distinct authentication configuration.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |-
            Forbidden

            * [-70505] Maximum number of users reached.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP not found.
            * [-90039] No valid OpenID Connect IDP found.
            * [-90050] Active Directory configuration not found.
            * [-90059] No valid Active Directory found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-70560] User with provided basic authentication login already exists.

            * [-70561] User with provided Active Directory user name already exists.

            * [-70562] User with provided RADIUS login already exists.

            * [-70563] User with provided OpenID user name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create user
      tags:
        - users
  "/v4/users/{user_id}":
    delete:
      description: |-
        ### Functional Description:
        Delete a user.

        ### Precondition:
        Right _"delete users"_ required.

        ### Effects:
        User is deleted.

        ### Further Information:
        User cannot be deleted if he is the last room administrator.
      operationId: deleteUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-40006] At least one admin user/group required.
            * [-71006] At least one role user/group required.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete user
      tags:
        - users
    get:
      description: >-
        ### Functional Description:  

        Retrieve detailed information about single user.


        ### Precondition:

        Right _"read users"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Authentication Method Options


        * **SQL**  
            `none`

        * **Active Directory**  
            (optional)  
            key: `"ad_config_id"`  
            value: "Active Directory configuration ID"  
            
            key: `"username"`  
            value: "Active Directory user name according to auth setting `userFilter`"

        * **RADIUS**  
            key: `"username"`  
            value: "Radius user name"

        * **OpenID Connect**  
            key: `"openid_config_id"`  
            value: "OpenID Connect configuration ID"  
            
            key: `"username"`  
            value: "OpenID Connect user name according to auth setting `mappingClaim`"
      operationId: getUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Effective roles
          in: query
          name: effective_roles
          required: false
          schema:
            type: boolean
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user
      tags:
        - users
    put:
      description: >-
        ### Functional Description:  

        Update the meta data of a user


        ### Precondition:

        Right _"change users"_ required.


        ### Effects:

        Meta data of a user is updated.


        ### Further Information:


        * If a user should not expire, leave `expireAt` empty.

        * All input fields are limited to **150** characters

        * Allowed characters: **All**


        ### Authentication Method Options


        * **SQL**  
            `none`

        * **Active Directory**  
            (optional)  
            key: `"ad_config_id"`  
            value: "Active Directory configuration ID"  
            
            key: `"username"`  
            value: "Active Directory user name according to auth setting `userFilter`"

        * **RADIUS**  
            key: `"username"`  
            value: "Radius user name"

        * **OpenID Connect**  
            key: `"openid_config_id"`  
            value: "OpenID Connect configuration ID"  
            
            key: `"username"`  
            value: "OpenID Connect user name according to auth setting `mappingClaim`"
      operationId: updateUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        description: body
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: >-
            Bad Request


            * [-10100] Invalid authentication method.

            * [-10101] Not valid auth method key.

            * [-10102] At least one authentication method must be enabled.

            * [-70506] Wrong gender.

            * [-70509] Illegal user lock status code.

            * [-71006] At least one role user/group required.

            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80005] Not valid boolean value.

            * [-80006] Expiration date is in the past.

            * [-80007] Maximum allowed length is exceeded.

            * [-80008] The year is too far in the future. Max year is limited to 9999.

            * [-90002] No distinct authentication configuration.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP not found.
            * [-90039] No valid OpenID Connect IDP found.
            * [-90050] Active Directory configuration not found.
            * [-90059] No valid Active Directory found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: >-
            Conflict


            * [-70560] User with provided basic authentication login already exists.

            * [-70561] User with provided Active Directory user name already exists.

            * [-70562] User with provided RADIUS login already exists.

            * [-70563] User with provided OpenID user name already exists.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update user
      tags:
        - users
  "/v4/users/{user_id}/groups":
    get:
      description: >-
        ### Functional Description:  

        Retrieves a List of groups a user is member of and / or can become a member.


        ### Precondition:

        Right _"read users"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **name**  
            Group name  
            OPERATOR: `cn` (multiple values not allowed)  
            VALUE: `search string`

        * **isMember**  
            Filter the groups which the user is or is not member of  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        ### Example:

        * `is_member:eq:false|name:cn:searchString`  

        Get all groups that the user is not member of AND whose `name` is like `searchString`.
      operationId: getUserGroups
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserGroupList"
        "400":
          description: |-
            Bad Request

            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get groups that user is a member of or/and can become a member
      tags:
        - users
  "/v4/users/{user_id}/roles":
    get:
      description: |-
        ### Functional Description:  
        Retrieve a list of all roles and the role assignment rights of a user.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### Further Information:
        None.
      operationId: getUserRoles
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoleList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get user roles
      tags:
        - users
  "/v4/users/{user_id}/rooms":
    get:
      description: >-
        ### Functional Description:  

        Retrieves a list of rooms granted to the user and / or that can be granted.


        ### Precondition:

        Right _"read users"_ required.


        ### Effects:

        None.


        ### Further Information:

        None.


        ### Filter


        ### Filter fields:


        * **name**  
            Room name  
            OPERATOR: `cn` (multiple values not allowed)  
            VALUE: `search string`

        * **isGranted**  
            Filter the rooms which the user is or is not granted  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `true`)

        * **isLastAdmin**  
            Filter the rooms which the user is last room administrator.  
            Only with connect `isGranted:eq:true` possible.  
            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true]`.

        * **effectivePerm**  
            Filter rooms with _DIRECT_ or _DIRECT_ **AND** _EFFECTIVE_ permissions  
            * `false`: _DIRECT_ permissions  
            * `true`:  _DIRECT_ **AND** _EFFECTIVE_ permissions  
            * `any`: _DIRECT_ **AND** _EFFECTIVE_ **AND** _OVER GROUP_ permissions  
            
            > _DIRECT_ means: e.g. room administrator grants read permissions to user **directly** on desired room.  
            _EFFECTIVE_ means: e.g. user gets read permissions on desired room through **inheritance**.  
            _OVER GROUP_ means: e.g. user gets read permissions on desired room through **group membership**.  

            OPERATOR: `eq` (multiple values not allowed)  
            VALUE: `[true|false|any]` (default: `false`)

        ### Examples:

        * `isGranted:eq:false|name:cn:searchString`  

        Get all rooms that the user is not granted AND whose `name` is like `searchString`.


        * `isGranted:eq:true|isLastAdmin:eq:true|name:cn:searchString`  

        Get all rooms that the user is granted AND is last admin AND whose `name` is like `searchString`.
      operationId: getUsersRooms
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Range offset
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description: Range limit
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
        - description: Filter string
          in: query
          name: filter
          required: false
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RoomTreeDataList"
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80024] Invalid range parameters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "412":
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted.
            * [-10104] Password must be changed.
            * [-10106] Username must be changed.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get rooms granted to the user or/and rooms that can be granted
      tags:
        - users
  "/v4/users/{user_id}/userAttributes":
    post:
      description: |-
        ### Functional Description:  
        Set custom user attributes.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        Custom user attributes gets set.

        ### Further Information:
        Batch function.  
        All existing user attributes will be deleted.  
        Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        Characters are case-insensitive.
      operationId: setAllUserAttributes
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserAttributes"
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: >-
            Bad Request


            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80007] Maximum allowed length is exceeded.

            * [-80015] Not valid key value list because there are duplicate keys present.

            * [-80023] Input contains invalid characters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Set custom user attributes
      tags:
        - users
    put:
      description: |-
        ### Functional Description:  
        Set custom user attributes.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        Custom user attributes get added or edited.

        ### Further Information:
        Batch function.  
        If an entry exists before, it will be overwritten.  
        Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        Characters are case-insensitive.
      operationId: setUserAttributes
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
        - description: >-
            Date time format (cf. [RFC
            3339](https://www.ietf.org/rfc/rfc3339.txt)):

            * LOCAL

            * UTC

            * OFFSET

            * EPOCH
          in: header
          name: X-Sds-Date-Format
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserAttributes"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: >-
            Bad Request


            * [-80000] Mandatory fields cannot be empty.

            * [-80001] Not valid positive number.

            * [-80002] Not valid number.

            * [-80007] Maximum allowed length is exceeded.

            * [-80015] Not valid key value list because there are duplicate keys present.

            * [-80023] Input contains invalid characters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Add or edit custom user attributes
      tags:
        - users
  "/v4/users/{user_id}/userAttributes/{key}":
    delete:
      description: |-
        ### Functional Description:
        Delete custom user attribute.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        Custom user attribute gets deleted.

        ### Further Information:
        Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        Characters are case-insensitive.
      operationId: deleteUserAttributes
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: integer
            format: int64
        - description: Key
          in: path
          name: key
          required: true
          schema:
            type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty.
            * [-80001] Not valid positive number.
            * [-80002] Not valid number.
            * [-80023] Input contains invalid characters.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |-
            Unauthorized

            * [-10012] Wrong token.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            Forbidden
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |-
            Not Found

            * [-70501] User not found.
            * [-70550] Attribute not found.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "406":
          description: |
            Not Acceptable
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete custom user attribute
      tags:
        - users
servers:
  - url: https://dracoon.team/api
components:
  requestBodies:
    ZipDownloadRequest:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/ZipDownloadRequest"
      description: body
      required: true
    uploadFile:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                description: File
                type: string
                format: binary
    CustomerAttributes:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/CustomerAttributes"
      description: body
      required: true
    UserIds:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/UserIds"
      description: User IDs
      required: true
    ConfigOptionList:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/ConfigOptionList"
      description: body
      required: true
    ChangeGroupMembersRequest:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/ChangeGroupMembersRequest"
      description: body
      required: true
    GroupIds:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/GroupIds"
      description: Group IDs
      required: true
    UserAttributes:
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/UserAttributes"
      description: body
      required: true
  schemas:
    ActiveDirectory:
      properties:
        alias:
          description: Unique name for an Active Directory configuration
          type: string
        id:
          description: ID
          format: int32
          type: integer
        isGlobalAvailable:
          description: Is available for all customers
          example: false
          type: boolean
      required:
        - alias
        - id
        - isGlobalAvailable
      type: object
    ActiveDirectoryAuthInfo:
      properties:
        items:
          description: List of available Active Directories
          items:
            $ref: "#/components/schemas/ActiveDirectory"
          type: array
      required:
        - items
      type: object
    ActiveDirectoryConfig:
      properties:
        adExportGroup:
          description: >-
            If 'ad_userimport' is set to true,

            the user must be member of this Active Directory group to receive a newly created DRACOON account.
          type: string
        alias:
          description: Unique name for an Active Directory configuration
          type: string
        createHomeFolder:
          description: >-
            Determines whether a room is created for each user that is created
            by automatic import (like a home folder).

            Room's name will equal the user's login name.
          example: false
          type: boolean
        homeFolderParent:
          description: >-
            ID of the room in which the individual rooms for users will be
            created.

            cf. 'ad_create_home_folder_on'
          format: int64
          type: integer
        id:
          description: ID
          format: int32
          type: integer
        ldapUsersDomain:
          description: Search scope of Active Directory; only users below this node can log
            on.
          type: string
        sdsImportGroup:
          description: User group that is assigned to users who are created by automatic
            import.
          format: int64
          type: integer
        serverAdminName:
          description: Distinguished Name (DN) of Active Directory administrative account
          type: string
        serverIp:
          description: IPv4 or IPv6 address or host name
          type: string
        serverPort:
          description: Port
          format: int32
          type: integer
        sslFingerPrint:
          description: |-
            SSL finger print of Active Directory server.
            Mandatory for LDAPS connections.
            Format: Algorithm/Fingerprint
          type: string
        useLdaps:
          description: Determines whether LDAPS should be used instead of plain LDAP.
          example: false
          type: boolean
        userFilter:
          description: Name of Active Directory attribute that is used as login name.
          type: string
        userImport:
          description: >-
            Determines if an DRACOON account is automatically created for a new
            user

            who successfully logs on with his/her AD account.
          example: false
          type: boolean
      required:
        - adExportGroup
        - alias
        - createHomeFolder
        - id
        - ldapUsersDomain
        - serverAdminName
        - serverIp
        - serverPort
        - useLdaps
        - userFilter
        - userImport
      type: object
    ActiveDirectoryConfigList:
      properties:
        items:
          description: List of Active Directory configurations
          items:
            $ref: "#/components/schemas/ActiveDirectoryConfig"
          type: array
      required:
        - items
      type: object
    AuditNodeResponse:
      properties:
        auditUserPermissionList:
          description: List of assigned users with permissions
          items:
            $ref: "#/components/schemas/AuditUserPermission"
          type: array
        nodeCntChildren:
          description: |-
            Number of direct children
            (no recursion; for rooms/folders only)
          format: int32
          type: integer
        nodeCreatedAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        nodeCreatedBy:
          $ref: "#/components/schemas/UserInfo"
        nodeHasActivitiesLog:
          description: |-
            Is activities log active (for rooms only)
            (default: true)
          example: false
          type: boolean
        nodeHasRecycleBin:
          description: Is Recycle Bin active (for rooms only)
          example: false
          type: boolean
        nodeId:
          description: Node ID
          format: int64
          type: integer
        nodeIsEncrypted:
          description: Encryption state
          example: false
          type: boolean
        nodeName:
          description: Node name
          type: string
        nodeParentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        nodeParentPath:
          description: |-
            Parent node path
            '/' if node is a root node (room)
          type: string
        nodeQuota:
          description: Quota in byte
          format: int64
          type: integer
        nodeRecycleBinRetentionPeriod:
          description: |-
            Retention period for deleted nodes in days
            (Integer between 0 and 9999)
          format: int32
          type: integer
        nodeSize:
          description: Node size in byte
          format: int64
          type: integer
        nodeUpdatedAt:
          description: |-
            Modification date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        nodeUpdatedBy:
          $ref: "#/components/schemas/UserInfo"
      required:
        - auditUserPermissionList
        - nodeCntChildren
        - nodeId
        - nodeName
        - nodeParentPath
      type: object
    AuditUserPermission:
      properties:
        permissions:
          $ref: "#/components/schemas/NodePermissions"
        userFirstName:
          description: User first name
          type: string
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
        userLastName:
          description: User last name
          type: string
        userLogin:
          description: User login name
          type: string
      required:
        - permissions
        - userFirstName
        - userId
        - userLastName
        - userLogin
      type: object
    AuthInitResources:
      properties:
        authTypes:
          description: Supported authentication types
          items:
            $ref: "#/components/schemas/KeyValueEntry"
          type: array
        languages:
          description: Supported languages
          items:
            $ref: "#/components/schemas/Language"
          type: array
      required:
        - authTypes
        - languages
      type: object
    AuthMethod:
      properties:
        isEnabled:
          description: Is enabled
          example: false
          type: boolean
        name:
          description: Name
          type: string
        priority:
          description: Priority
          format: int32
          type: integer
      required:
        - isEnabled
        - name
        - priority
      type: object
    BrandingServerInfo:
      properties:
        brandingServerBrandingId:
          description: UUID of Branding
          type: string
        brandingServerCustomer:
          description: Branding server customer UUID
          type: string
        brandingServerUrl:
          description: Branding server URL
          type: string
      required:
        - brandingServerBrandingId
        - brandingServerCustomer
      type: object
    ChangeGroupMembersRequest:
      properties:
        ids:
          description: List of group IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - ids
      type: object
    ChangeUserPasswordRequest:
      properties:
        newPassword:
          description: New password
          type: string
        oldPassword:
          description: Old password
          type: string
      required:
        - newPassword
        - oldPassword
      type: object
    ChunkUploadResponse:
      properties:
        hash:
          description: Hash value of transferred chunk
          type: string
        size:
          description: Chunk size
          format: int64
          type: integer
      required:
        - hash
        - size
      type: object
    CompleteUploadRequest:
      properties:
        fileKey:
          $ref: "#/components/schemas/FileKey"
        fileName:
          description: New file name to store with
          type: string
        keepShareLinks:
          description: |-
            Preserve Download Share Links and point them to the new node.
            (default: false)
          example: false
          type: boolean
        resolutionStrategy:
          description: |-
            Node conflict resolution strategy:
            * autorename
            * overwrite
            * fail

            (default: autorename)
          enum:
            - autorename
            - overwrite
            - fail
          type: string
        userFileKeyList:
          $ref: "#/components/schemas/UserFileKeyList"
      type: object
    ConfigOptionList:
      properties:
        items:
          description: List of key-value pairs
          items:
            $ref: "#/components/schemas/KeyValueEntry"
          type: array
      required:
        - items
      type: object
    ConfigRoomRequest:
      properties:
        adminGroupIds:
          description: |-
            List of group ids
            A room requires at least one admin (user or group)
          items:
            format: int64
            type: integer
          type: array
        adminIds:
          description: |-
            List of user ids
            A room requires at least one admin (user or group)
          items:
            format: int64
            type: integer
          type: array
        hasActivitiesLog:
          description: |-
            Is activities log active (for rooms only)
            (default: true)
          example: false
          type: boolean
        hasRecycleBin:
          description: Is Recycle Bin active (for rooms only)
          example: false
          type: boolean
        inheritPermissions:
          description: Inherit permissions from parent room
          example: false
          type: boolean
        newGroupMemberAcceptance:
          description: |-
            Behaviour when new users are added to the group:
            * autoallow
            * pending

            Only relevant if 'adminGroupIds' has items.
            (default: autoallow)
          type: string
        recycleBinRetentionPeriod:
          description: |-
            Retention period for deleted nodes in days
            (Integer between 0 and 9999)
          format: int32
          type: integer
        takeOverPermissions:
          description: Take over existing permissions
          example: false
          type: boolean
      type: object
    ConflictNode:
      properties:
        errorCode:
          description: Error code
          format: int32
          type: integer
        errorMessage:
          description: Error message
          type: string
        name:
          description: Name
          type: string
        nodeId:
          description: Node ID
          format: int64
          type: integer
      type: object
    CopyNode:
      properties:
        id:
          description: Source node ID
          format: int64
          type: integer
        name:
          description: New node name
          type: string
      required:
        - id
      type: object
    CopyNodesRequest:
      properties:
        items:
          description: List of nodes to be copied
          items:
            $ref: "#/components/schemas/CopyNode"
          type: array
        keepShareLinks:
          description: |-
            Preserve Download Share Links and point them to the new node.
            (default: false)
          example: false
          type: boolean
        nodeIds:
          description: "DEPRECATED: Node IDs; use 'items' attribute"
          items:
            format: int64
            type: integer
          type: array
        resolutionStrategy:
          description: |-
            Node conflict resolution strategy:
            * autorename
            * overwrite
            * fail

            (default: autorename)
          enum:
            - autorename
            - overwrite
            - fail
          type: string
      type: object
    CreateActiveDirectoryConfigRequest:
      properties:
        adExportGroup:
          description: >-
            If 'ad_userimport' is set to true,

            the user must be member of this Active Directory group to receive a newly created DRACOON account.
          type: string
        alias:
          description: Unique name for an Active Directory configuration
          type: string
        createHomeFolder:
          description: >-
            Determines whether a room is created for each user that is created
            by automatic import (like a home folder).

            Room's name will equal the user's login name.
          example: false
          type: boolean
        homeFolderParent:
          description: >-
            ID of the room in which the individual rooms for users will be
            created.

            cf. 'ad_create_home_folder_on'
          format: int64
          type: integer
        ldapUsersDomain:
          description: Search scope of Active Directory; only users below this node can log
            on.
          type: string
        sdsImportGroup:
          description: User group that is assigned to users who are created by automatic
            import.
          format: int64
          type: integer
        serverAdminName:
          description: Distinguished Name (DN) of Active Directory administrative account
          type: string
        serverAdminPassword:
          description: Password of Active Directory administrative account
          type: string
        serverIp:
          description: IPv4 or IPv6 address or host name
          type: string
        serverPort:
          description: Port
          format: int32
          type: integer
        sslFingerPrint:
          description: |-
            SSL finger print of Active Directory server.
            Mandatory for LDAPS connections.
            Format: Algorithm/Fingerprint
          type: string
        useLdaps:
          description: Determines whether LDAPS should be used instead of plain LDAP.
          example: false
          type: boolean
        userFilter:
          description: Name of Active Directory attribute that is used as login name.
          type: string
        userImport:
          description: >-
            Determines if an DRACOON account is automatically created for a new
            user

            who successfully logs on with his/her AD account.
          example: false
          type: boolean
      required:
        - alias
        - ldapUsersDomain
        - serverAdminName
        - serverAdminPassword
        - serverIp
        - serverPort
        - useLdaps
        - userFilter
        - userImport
      type: object
    CreateDownloadShareRequest:
      properties:
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        fileId:
          description: Source file ID
          format: int64
          type: integer
        fileKey:
          $ref: "#/components/schemas/FileKey"
        keyPair:
          $ref: "#/components/schemas/UserKeyPairContainer"
        mailBody:
          description: Notification email content
          type: string
        mailRecipients:
          description: CSV string of recipient emails
          type: string
        mailSubject:
          description: Notification email subject
          type: string
        maxDownloads:
          description: Max allowed downloads
          format: int32
          type: integer
        name:
          description: Alias name
          type: string
        nodeId:
          description: Source node ID
          format: int64
          type: integer
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        notifyCreator:
          description: Notify creator on every download.
          example: false
          type: boolean
        password:
          description: Access password, not allowed for encrypted shares
          type: string
        sendMail:
          description: Notify recipients
          example: false
          type: boolean
        sendSms:
          description: Send share password via SMS
          example: false
          type: boolean
        showCreatorName:
          description: Show creator first and last name
          example: false
          type: boolean
        showCreatorUsername:
          description: Show creator email address
          example: false
          type: boolean
        smsRecipients:
          description: CSV string of recipient MSISDNS
          type: string
      required:
        - fileId
        - nodeId
      type: object
    CreateFileUploadRequest:
      properties:
        classification:
          description: |-
            Classification ID (for files only):
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
          format: int32
          type: integer
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        name:
          description: File name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        size:
          description: File size in byte
          format: int64
          type: integer
      required:
        - classification
        - name
        - parentId
      type: object
    CreateFileUploadResponse:
      properties:
        token:
          description: "DEPRECATED: Upload token"
          type: string
        uploadId:
          description: Upload (channel) ID
          type: string
        uploadUrl:
          description: (public) Upload URL
          type: string
      required:
        - token
        - uploadId
      type: object
    CreateFolderRequest:
      properties:
        name:
          description: Name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
      required:
        - name
        - parentId
      type: object
    CreateGroupRequest:
      properties:
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        name:
          description: Group name
          type: string
      required:
        - name
      type: object
    CreateOAuthClientRequest:
      properties:
        accessTokenValidity:
          description: Validity of the access token in seconds.
          format: int32
          type: integer
        clientId:
          description: ID of the OAuth client
          type: string
        clientSecret:
          description: Secret, which uses the client for authentication.
          type: string
        grantTypes:
          description: |-
            Authorized grant types
            cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
          items:
            type: string
          type: array
        redirectUris:
          description: URIs, to which a user is redirected after authorization.
          items:
            type: string
          type: array
        redirectUrl:
          description: "DEPRECATED: URL, to which a user is redirected after authorization."
          type: string
        refreshTokenValidity:
          description: Validity of the refresh token in seconds.
          format: int32
          type: integer
      required:
        - clientId
        - grantTypes
      type: object
    CreateOpenIdIdpConfigRequest:
      properties:
        authorizationEndPointUrl:
          description: URL of the authorization endpoint
          type: string
        clientId:
          description: ID of the OAuth client
          type: string
        clientSecret:
          description: Secret, which uses the client for authentication.
          type: string
        fallbackMappingClaim:
          description: |-
            Name of the claim which is used for the user mapping fallback.
            e.g. 'sub'
          type: string
        issuer:
          description: |-
            Issuer identifier of the IDP
            The value is a case sensitive URL.
          type: string
        jwksEndPointUrl:
          description: URL of the JWKS endpoint
          type: string
        mappingClaim:
          description: |-
            Name of the claim which is used for the user mapping.
            e.g. 'email'
          type: string
        name:
          description: Name of the IDP
          type: string
        pkceChallengeMethod:
          description: |-
            PKCE code challenge method.
            cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          type: string
        pkceEnabled:
          description: |-
            Determines whether PKCE is enabled.
            cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          example: false
          type: boolean
        redirectUris:
          description: URIs, to which a user is redirected after authorization.
          items:
            type: string
          type: array
        scopes:
          description: |-
            List of requested scopes
            Usually 'openid' and the names of the requested claims.
          items:
            type: string
          type: array
        tokenEndPointUrl:
          description: URL of the token endpoint
          type: string
        userInfoEndPointUrl:
          description: URL of the user info endpoint
          type: string
        userUpdateEnabled:
          description: |-
            Determines if the user metadata is updated with data from the IDP.
            The scope 'profile' is needed for the update.
            If this scope is not granted, only the email address is updated.
          example: false
          type: boolean
      required:
        - authorizationEndPointUrl
        - clientId
        - clientSecret
        - issuer
        - jwksEndPointUrl
        - mappingClaim
        - name
        - redirectUris
        - scopes
        - tokenEndPointUrl
        - userInfoEndPointUrl
      type: object
    CreateRoomRequest:
      properties:
        adminGroupIds:
          description: |-
            List of group ids
            A room requires at least one admin (user or group)
          items:
            format: int64
            type: integer
          type: array
        adminIds:
          description: |-
            List of user ids
            A room requires at least one admin (user or group)
          items:
            format: int64
            type: integer
          type: array
        hasActivitiesLog:
          description: |-
            Is activities log active (for rooms only)
            (default: true)
          example: false
          type: boolean
        hasRecycleBin:
          description: Is Recycle Bin active (for rooms only)
          example: false
          type: boolean
        inheritPermissions:
          description: Inherit permissions from parent room
          example: false
          type: boolean
        name:
          description: Name
          type: string
        newGroupMemberAcceptance:
          description: |-
            Behaviour when new users are added to the group:
            * autoallow
            * pending

            Only relevant if 'adminGroupIds' has items.
            (default: autoallow)
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        parentId:
          description: Parent room ID or 'null' to create a top level room
          format: int64
          type: integer
        quota:
          description: Quota in byte
          format: int64
          type: integer
        recycleBinRetentionPeriod:
          description: |-
            Retention period for deleted nodes in days
            (Integer between 0 and 9999)
          format: int32
          type: integer
      required:
        - name
      type: object
    CreateShareUploadChannelRequest:
      properties:
        name:
          description: File name
          type: string
        password:
          description: Password
          type: string
        size:
          description: File size in byte
          format: int64
          type: integer
      required:
        - name
      type: object
    CreateShareUploadChannelResponse:
      properties:
        token:
          description: "DEPRECATED: Upload token"
          type: string
        uploadId:
          description: Upload (channel) ID
          type: string
        uploadUrl:
          description: (public) Upload URL
          type: string
      required:
        - uploadId
        - uploadUrl
      type: object
    CreateUploadShareRequest:
      properties:
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        filesExpiryPeriod:
          description: Number of days after which uploaded files expire
          format: int32
          type: integer
        mailBody:
          description: Notification email content
          type: string
        mailRecipients:
          description: CSV string of recipient emails
          type: string
        mailSubject:
          description: Notification email subject
          type: string
        maxSize:
          description: "DEPRECATED: Maximal total size of uploaded files (in bytes)"
          format: int64
          type: integer
        maxSlots:
          description: "DEPRECATED: Maximal amount of files to upload"
          format: int32
          type: integer
        name:
          description: Alias name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        notifyCreator:
          description: Notify creator on every upload.
          example: false
          type: boolean
        password:
          description: Password
          type: string
        sendMail:
          description: Notify recipients
          example: false
          type: boolean
        sendSms:
          description: Send share password via SMS
          example: false
          type: boolean
        showUploadedFiles:
          description: Allow display of already uploaded files
          example: false
          type: boolean
        smsRecipients:
          description: CSV string of recipient MSISDNS
          type: string
        targetId:
          description: Target room or folder ID
          format: int64
          type: integer
      required:
        - name
        - targetId
      type: object
    CreateUserRequest:
      properties:
        authMethods:
          description: Authentication methods
          items:
            $ref: "#/components/schemas/UserAuthMethod"
          type: array
        email:
          description: "DEPRECATED: Email"
          type: string
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        lastName:
          description: User last name
          type: string
        login:
          description: User login name
          type: string
        title:
          description: Job title
          type: string
      required:
        - authMethods
        - firstName
        - lastName
        - login
      type: object
    Customer:
      properties:
        activationCode:
          description: |-
            Customer activation code string:
            * valid only for types 'free' and 'demo'
            * for 'pay' customers it is empty
          type: string
        companyName:
          description: Company name
          type: string
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        customerAttributes:
          $ref: "#/components/schemas/CustomerAttributes"
        customerContractType:
          description: Customer type
          enum:
            - free
            - demo
            - pay
          type: string
        id:
          description: Unique identifier for the customer
          format: int64
          type: integer
        lastLoginAt:
          description: |-
            Date of last seen login for the customer
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          example: false
          type: boolean
        providerCustomerId:
          description: Provider customer ID value (relevant only for type 'pay')
          type: string
        quotaMax:
          description: Maximal disc space which can be allocated by customer in bytes.
          format: int64
          type: integer
        quotaUsed:
          description: Used amount of disc space in bytes
          format: int64
          type: integer
        trialDaysLeft:
          description: Number of days left for trial period (relevant only for type demo)
          format: int32
          type: integer
        updatedAt:
          description: |-
            Modification date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        userMax:
          description: Maximal number of users
          format: int32
          type: integer
        userUsed:
          description: Number of users which are already allocated.
          format: int32
          type: integer
      required:
        - companyName
        - createdAt
        - customerContractType
        - id
        - lockStatus
        - quotaMax
        - quotaUsed
        - userMax
        - userUsed
      type: object
    CustomerAttributes:
      properties:
        items:
          description: List of customer attributes
          items:
            $ref: "#/components/schemas/KeyValueEntry"
          type: array
      type: object
    CustomerData:
      properties:
        accountsLimit:
          description: User accounts limit
          format: int32
          type: integer
        accountsUsed:
          description: User accounts used
          format: int32
          type: integer
        cntFiles:
          description: |-
            Total number of files
            Visible only with at least one global role.
          format: int64
          type: integer
        cntFolders:
          description: |-
            Total number of folders
            Visible only with at least one global role.
          format: int64
          type: integer
        cntRooms:
          description: |-
            Total number of rooms
            Visible only with at least one global role.
          format: int64
          type: integer
        customerEncryptionEnabled:
          description: Clientside encryption for customer enabled
          example: false
          type: boolean
        id:
          description: Unique identifier for the customer
          format: int64
          type: integer
        isProviderCustomer:
          description: Customer is Provider Customer
          example: false
          type: boolean
        name:
          description: Customer name
          type: string
        spaceLimit:
          description: Space limit (in bytes)
          format: int64
          type: integer
        spaceUsed:
          description: Space used (in bytes)
          format: int64
          type: integer
      required:
        - accountsLimit
        - accountsUsed
        - customerEncryptionEnabled
        - id
        - isProviderCustomer
        - name
        - spaceLimit
        - spaceUsed
      type: object
    CustomerList:
      properties:
        items:
          description: List of customers
          items:
            $ref: "#/components/schemas/Customer"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    DeleteDeletedNodesRequest:
      properties:
        deletedNodeIds:
          description: List of deleted node IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - deletedNodeIds
      type: object
    DeleteNodesRequest:
      properties:
        nodeIds:
          description: List of node IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - nodeIds
      type: object
    DeletedNode:
      properties:
        accessedAt:
          description: |-
            Last access date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        classification:
          description: |-
            Classification ID (for files only):
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
          format: int32
          type: integer
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/UserInfo"
        deletedAt:
          description: |-
            Deletion date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        deletedBy:
          $ref: "#/components/schemas/UserInfo"
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        id:
          description: Node ID
          format: int64
          type: integer
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        name:
          description: Node name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        parentPath:
          description: |-
            Parent node path
            '/' if node is a root node (room)
          type: string
        s3Key:
          $ref: "#/components/schemas/UserInfo"
        size:
          description: Node size in byte
          format: int64
          type: integer
        type:
          description: Node type
          enum:
            - room
            - folder
          type: string
        updatedAt:
          description: |-
            Modification date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/UserInfo"
      required:
        - name
        - parentId
        - parentPath
        - type
      type: object
    DeletedNodeSummary:
      properties:
        cntVersions:
          description: Number of deleted versions of this file
          format: int32
          type: integer
        firstDeletedAt:
          description: |-
            First deleted version
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lastDeletedAt:
          description: |-
            Last deleted version
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lastDeletedNodeId:
          description: Node ID of last deleted version
          format: int64
          type: integer
        name:
          description: Node name
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        parentPath:
          description: |-
            Parent node path
            '/' if node is a root node (room)
          type: string
        type:
          description: Node type
          enum:
            - room
            - folder
          type: string
      required:
        - cntVersions
        - firstDeletedAt
        - lastDeletedAt
        - lastDeletedNodeId
        - name
        - parentId
        - parentPath
        - type
      type: object
    DeletedNodeSummaryList:
      properties:
        items:
          description: List of deleted nodes (summary)
          items:
            $ref: "#/components/schemas/DeletedNodeSummary"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    DeletedNodeVersionsList:
      properties:
        items:
          description: List of deleted nodes
          items:
            $ref: "#/components/schemas/DeletedNode"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    DownloadShare:
      properties:
        accessKey:
          description: Share access key to generate secure link
          type: string
        classification:
          description: |-
            Classification ID (for files only):
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
          format: int32
          type: integer
        cntDownloads:
          description: Downloads counter (incremented on each download)
          format: int32
          type: integer
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/UserInfo"
        dataUrl:
          description: Path to shared download node
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        id:
          description: Share ID
          format: int64
          type: integer
        isEncrypted:
          description: |-
            Encrypted share
            (this only applies to shared files, not folders)
          example: false
          type: boolean
        isProtected:
          description: Is share protected by password
          example: false
          type: boolean
        maxDownloads:
          description: Max allowed downloads
          format: int32
          type: integer
        name:
          description: Alias name
          type: string
        nodeId:
          description: Source node ID
          format: int64
          type: integer
        nodePath:
          description: Path to shared download node
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        notifyCreator:
          description: Notify creator on every download.
          example: false
          type: boolean
        recipients:
          description: CSV string of recipient emails
          type: string
        showCreatorName:
          description: Show creator first and last name
          example: false
          type: boolean
        showCreatorUsername:
          description: Show creator email address
          example: false
          type: boolean
        smsRecipients:
          description: CSV string of recipient MSISDNS
          type: string
      required:
        - accessKey
        - cntDownloads
        - createdAt
        - createdBy
        - id
        - nodeId
        - notifyCreator
      type: object
    DownloadShareList:
      properties:
        items:
          description: List of Download Shares
          items:
            $ref: "#/components/schemas/DownloadShare"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    DownloadTokenGenerateResponse:
      properties:
        downloadUrl:
          description: Download URL
          type: string
        token:
          description: "DEPRECATED: Download token"
          type: string
      required:
        - token
      type: object
    EnableCustomerEncryptionRequest:
      properties:
        dataSpaceRescueKey:
          $ref: "#/components/schemas/UserKeyPairContainer"
        enableCustomerEncryption:
          description: Set 'true' to enable encryption for this customer
          example: false
          type: boolean
      required:
        - dataSpaceRescueKey
        - enableCustomerEncryption
      type: object
    EncryptRoomRequest:
      properties:
        dataRoomRescueKey:
          $ref: "#/components/schemas/UserKeyPairContainer"
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        useDataSpaceRescueKey:
          description: Use system emergency password for files in this room
          example: false
          type: boolean
      required:
        - isEncrypted
      type: object
    EncryptionInfo:
      properties:
        dataSpaceKeyState:
          description: DRACOON key state
          enum:
            - none
            - pending
            - available
          type: string
        roomKeyState:
          description: Room key state
          enum:
            - none
            - pending
            - available
          type: string
        userKeyState:
          description: User key state
          enum:
            - none
            - pending
            - available
          type: string
      required:
        - dataSpaceKeyState
        - roomKeyState
        - userKeyState
      type: object
    ErrorResponse:
      properties:
        code:
          description: HTTP status code
          format: int32
          type: integer
        debugInfo:
          description: Debug information
          type: string
        errorCode:
          description: Error code
          format: int32
          type: integer
        message:
          description: HTTP status code description
          type: string
      type: object
    FailoverServer:
      properties:
        failoverEnabled:
          description: RADIUS Failover Server is active
          example: false
          type: boolean
        failoverIpAddress:
          description: |-
            RADIUS Failover Server IP Address
            Required if failover server is enabled.
          type: string
        failoverPort:
          description: |-
            RADIUS Failover Server Port
            Required if failover server is enabled.
          format: int32
          type: integer
      required:
        - failoverEnabled
      type: object
    FileFileKeys:
      properties:
        fileKeyContainer:
          $ref: "#/components/schemas/FileKeyContainer"
        id:
          description: File ID
          format: int64
          type: integer
      type: object
    FileKey:
      properties:
        iv:
          description: Initial vector
          type: string
        key:
          description: Encryption key
          type: string
        tag:
          description: |-
            Authentication tag
            (needed with authenticated encryption)
          type: string
        version:
          description: Version
          type: string
      required:
        - iv
        - key
        - tag
        - version
      type: object
    FileKeyContainer:
      properties:
        iv:
          description: Initial vector
          type: string
        key:
          description: Encryption key
          type: string
        tag:
          description: |-
            Authentication tag
            (needed with authenticated encryption)
          type: string
        version:
          description: Version
          type: string
      required:
        - iv
        - key
        - version
      type: object
    FirstAdminUser:
      properties:
        authMethods:
          description: Authentication methods
          items:
            $ref: "#/components/schemas/UserAuthMethod"
          type: array
        email:
          description: "DEPRECATED: Email"
          type: string
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        language:
          description: Language ID or ISO 639-1 code
          type: string
        lastName:
          description: User last name
          type: string
        login:
          description: User login name
          type: string
        needsToChangeUserName:
          description: If true, the user must change the 'userName' at the first login
          example: false
          type: boolean
        notifyUser:
          description: |-
            Notify user about his new account
            (default: true)
          example: false
          type: boolean
        password:
          description: An initial password may be preset
          type: string
        title:
          description: Job title
          type: string
      required:
        - firstName
        - lastName
        - login
      type: object
    Group:
      properties:
        cntUsers:
          description: Amount of users
          format: int32
          type: integer
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/UserInfo"
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        groupRoles:
          $ref: "#/components/schemas/RoleList"
        id:
          description: Unique identifier for the group
          format: int64
          type: integer
        name:
          description: Group name
          type: string
        updatedAt:
          description: |-
            Modification date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/UserInfo"
      required:
        - cntUsers
        - createdAt
        - createdBy
        - id
        - name
      type: object
    GroupIds:
      properties:
        ids:
          description: List of group IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - ids
      type: object
    GroupList:
      properties:
        items:
          description: List of groups
          items:
            $ref: "#/components/schemas/Group"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    GroupUser:
      properties:
        displayName:
          description: Display name
          type: string
        email:
          description: "DEPRECATED: Email"
          type: string
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        isMember:
          description: Is group member
          example: false
          type: boolean
        login:
          description: User login name
          type: string
      required:
        - displayName
        - email
        - id
        - isMember
        - login
      type: object
    GroupUserList:
      properties:
        items:
          description: List of group-user mappings
          items:
            $ref: "#/components/schemas/GroupUser"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    InputStream:
      type: object
    KeyValueEntry:
      properties:
        key:
          description: Entry key
          type: string
        value:
          description: Entry value
          type: string
      required:
        - key
        - value
      type: object
    Language:
      properties:
        description:
          description: Description
          type: string
        isoCode:
          description: ISO 639-1 code
          type: string
        languageId:
          description: Language ID
          format: int32
          type: integer
      required:
        - description
        - isoCode
        - languageId
      type: object
    LogEvent:
      properties:
        attribute1:
          description: Attribute 1
          type: string
        attribute2:
          description: Attribute 2
          type: string
        attribute3:
          description: Attribute 3
          type: string
        authParentSource:
          description: Auth parent source ID
          type: string
        authParentTarget:
          description: Auth parent target ID
          type: string
        customerId:
          description: Unique identifier for the customer
          format: int64
          type: integer
        id:
          description: Event ID
          format: int64
          type: integer
        message:
          description: Event description
          type: string
        objectId1:
          description: Object ID 1
          format: int64
          type: integer
        objectId2:
          description: Object ID 2
          format: int64
          type: integer
        objectName1:
          description: Object name 1
          type: string
        objectName2:
          description: Object name 2
          type: string
        objectType1:
          description: Object type 1
          format: int32
          type: integer
        objectType2:
          description: Object type 2
          format: int32
          type: integer
        operationId:
          description: Operation type ID
          format: int32
          type: integer
        operationName:
          description: Operation name
          type: string
        status:
          description: |-
            Operation status:
            * 0 - Success
            * 2 - Error
          format: int32
          type: integer
        time:
          description: |-
            Event timestamp
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        userClient:
          description: Client
          type: string
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
        userIp:
          description: User IP
          type: string
        userName:
          description: User name
          type: string
      required:
        - id
        - message
        - time
        - userId
      type: object
    LogEventList:
      properties:
        items:
          description: List of log events
          items:
            $ref: "#/components/schemas/LogEvent"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    LogOperationList:
      properties:
        operationList:
          description: List of all log operations
          type: string
      required:
        - operationList
      type: object
    LoginRequest:
      properties:
        authType:
          description: Authentication type code
          type: string
        language:
          description: Language ID or ISO 639-1 code
          type: string
        login:
          description: User login name
          type: string
        password:
          description: Password
          type: string
        state:
          description: >-
            For RADIUS Access-Challenge

            If a 'replyState' is returned, it must be included as 'state' in the following request.
          type: string
        token:
          description: Token
          type: string
      required:
        - login
        - password
      type: object
    LoginResponse:
      properties:
        token:
          description: Authentication token
          type: string
      required:
        - token
      type: object
    MissingKeysResponse:
      properties:
        files:
          description: List of file keys
          items:
            $ref: "#/components/schemas/FileFileKeys"
          type: array
        items:
          description: List of user ID and file ID mappings
          items:
            $ref: "#/components/schemas/UserIdFileIdItem"
          type: array
        range:
          $ref: "#/components/schemas/Range"
        users:
          description: List of user public keys
          items:
            $ref: "#/components/schemas/UserUserPublicKey"
          type: array
      type: object
    MoveNode:
      properties:
        id:
          description: Source node ID
          format: int64
          type: integer
        name:
          description: New node name
          type: string
      required:
        - id
      type: object
    MoveNodesRequest:
      properties:
        items:
          description: List of nodes to be moved
          items:
            $ref: "#/components/schemas/MoveNode"
          type: array
        keepShareLinks:
          description: |-
            Preserve Download Share Links and point them to the new node.
            (default: false)
          example: false
          type: boolean
        nodeIds:
          description: "DEPRECATED: Node IDs; use 'items' attribute"
          items:
            format: int64
            type: integer
          type: array
        resolutionStrategy:
          description: |-
            Node conflict resolution strategy:
            * autorename
            * overwrite
            * fail

            (default: autorename)
          enum:
            - autorename
            - overwrite
            - fail
          type: string
      type: object
    NewCustomerRequest:
      properties:
        activationCode:
          description: |-
            Customer activation code string:
            * valid only for types 'free' and 'demo'
            * for 'pay' customers it is empty
          type: string
        companyName:
          description: Company name
          type: string
        customerAttributes:
          $ref: "#/components/schemas/CustomerAttributes"
        customerContractType:
          description: Customer type
          enum:
            - free
            - demo
            - pay
          type: string
        firstAdminUser:
          $ref: "#/components/schemas/FirstAdminUser"
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          example: false
          type: boolean
        providerCustomerId:
          description: Provider customer ID value (relevant only for type 'pay')
          type: string
        quotaMax:
          description: Maximal disc space which can be allocated by customer in bytes.
          format: int64
          type: integer
        trialDays:
          description: Number of days left for trial period (relevant only for type demo)
          format: int32
          type: integer
        userMax:
          description: Maximal number of users
          format: int32
          type: integer
      required:
        - customerContractType
        - firstAdminUser
        - quotaMax
        - userMax
      type: object
    NewCustomerResponse:
      properties:
        activationCode:
          description: |-
            Customer activation code string:
            * valid only for types 'free' and 'demo'
            * for 'pay' customers it is empty
          type: string
        companyName:
          description: Company name
          type: string
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        customerAttributes:
          $ref: "#/components/schemas/CustomerAttributes"
        customerContractType:
          description: Customer type
          enum:
            - free
            - demo
            - pay
          type: string
        firstAdminUser:
          $ref: "#/components/schemas/FirstAdminUser"
        id:
          description: Unique identifier for the customer
          format: int64
          type: integer
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          example: false
          type: boolean
        providerCustomerId:
          description: Provider customer ID value (relevant only for type 'pay')
          type: string
        quotaMax:
          description: Maximal disc space which can be allocated by customer in bytes.
          format: int64
          type: integer
        trialDays:
          description: Number of days left for trial period (relevant only for type demo)
          format: int32
          type: integer
        userMax:
          description: Maximal number of users
          format: int32
          type: integer
      required:
        - companyName
        - customerContractType
        - firstAdminUser
        - lockStatus
        - quotaMax
        - userMax
      type: object
    Node:
      properties:
        branchVersion:
          description: Version of last change in this node or a node further down the tree.
          format: int64
          type: integer
        children:
          description: |-
            Child nodes list (if requested)
            (for rooms/folders only)
          items:
            $ref: "#/components/schemas/Node"
          type: array
        classification:
          description: |-
            Classification ID (for files only):
            * 1 - public
            * 2 - for internal use only
            * 3 - confidential
            * 4 - strictly confidential
          format: int32
          type: integer
        cntAdmins:
          description: "DEPRECATED: Number of admins (for rooms only)"
          format: int32
          type: integer
        cntChildren:
          description: |-
            Number of direct children
            (no recursion; for rooms/folders only)
          format: int32
          type: integer
        cntDeletedVersions:
          description: |-
            Number of deleted versions of this file/folder
            (for rooms/folders only)
          format: int32
          type: integer
        cntDownloadShares:
          description: Returns the number of Download Shares of this node.
          format: int32
          type: integer
        cntUploadShares:
          description: Returns the number of Upload Shares of this node.
          format: int32
          type: integer
        cntUsers:
          description: "DEPRECATED: Number of users (for rooms only)"
          format: int32
          type: integer
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/UserInfo"
        encryptionInfo:
          $ref: "#/components/schemas/EncryptionInfo"
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        fileType:
          description: File type/extension (for files only)
          type: string
        hasActivitiesLog:
          description: |-
            Is activities log active (for rooms only)
            (default: true)
          example: false
          type: boolean
        hasRecycleBin:
          description: Is Recycle Bin active (for rooms only)
          example: false
          type: boolean
        hash:
          description: MD5 hash of file
          type: string
        id:
          description: Node ID
          format: int64
          type: integer
        inheritPermissions:
          description: Inherit permissions from parent room
          example: false
          type: boolean
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        isFavorite:
          description: Node is marked as favorite (for rooms/folders only)
          example: false
          type: boolean
        mediaToken:
          description: Media server media token
          type: string
        mediaType:
          description: File media type (for files only)
          type: string
        name:
          description: Name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        parentPath:
          description: |-
            Parent node path
            '/' if node is a root node (room)
          type: string
        permissions:
          $ref: "#/components/schemas/NodePermissions"
        quota:
          description: Quota in byte
          format: int64
          type: integer
        recycleBinRetentionPeriod:
          description: |-
            Retention period for deleted nodes in days
            (Integer between 0 and 9999)
          format: int32
          type: integer
        s3Key:
          description: S3 key
          type: string
        size:
          description: Node size in byte
          format: int64
          type: integer
        type:
          description: Node type
          enum:
            - room
            - folder
            - file
          type: string
        updatedAt:
          description: |-
            Modification date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/UserInfo"
      required:
        - id
        - name
        - type
      type: object
    NodeBatchOperationErrorInfos:
      properties:
        conflictNodes:
          description: List of nodes that caused a conflict
          items:
            $ref: "#/components/schemas/ConflictNode"
          type: array
      required:
        - conflictNodes
      type: object
    NodeBatchOperationErrorResponse:
      properties:
        code:
          description: HTTP status code
          format: int32
          type: integer
        debugInfo:
          description: Debug information
          type: string
        errorCode:
          description: Error code
          format: int32
          type: integer
        errorInfos:
          $ref: "#/components/schemas/NodeBatchOperationErrorInfos"
        message:
          description: HTTP status code description
          type: string
      required:
        - errorInfos
      type: object
    NodeList:
      properties:
        items:
          description: List of nodes
          items:
            $ref: "#/components/schemas/Node"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    NodePermissions:
      properties:
        change:
          description: "User/Group may update meta data of nodes: rename files and folders,
            change classification, etc."
          example: false
          type: boolean
        create:
          description: User/Group may upload files, create folders and copy/move files to
            this room, overwriting is not possible.
          example: false
          type: boolean
        delete:
          description: User/Group may overwrite and remove files/folders, move files from
            this room.
          example: false
          type: boolean
        deleteRecycleBin:
          description: User/Group may permanently remove files/folders from the Recycle Bin.
          example: false
          type: boolean
        manage:
          description: >-
            User/Group may grant all of the above permissions to other users and
            groups independently,

            may update room metadata and create/update/delete subordinary rooms, has all permissions.
          example: false
          type: boolean
        manageDownloadShare:
          description: User/Group may create Download Shares for files and containers view
            all previously created Download Shares in this room.
          example: false
          type: boolean
        manageUploadShare:
          description: User/Group may create Upload Shares for containers, view all
            previously created Upload Shares in this room.
          example: false
          type: boolean
        read:
          description: User/Group may see all rooms, files and folders in the room and
            download everything, copy files from this room.
          example: false
          type: boolean
        readRecycleBin:
          description: User/Group may look up files/folders in the Recycle Bin.
          example: false
          type: boolean
        restoreRecycleBin:
          description: User/Group may restore files/folders from Recycle Bin – room
            permissions required.
          example: false
          type: boolean
      required:
        - change
        - create
        - delete
        - deleteRecycleBin
        - manage
        - manageDownloadShare
        - manageUploadShare
        - read
        - readRecycleBin
        - restoreRecycleBin
      type: object
    NotRestoredNode:
      properties:
        id:
          description: Not restored node ID
          format: int64
          type: integer
        name:
          description: Node name
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        parentPath:
          description: |-
            Parent node path
            '/' if node is a root node (room)
          type: string
        type:
          description: Node type
          enum:
            - room
            - folder
          type: string
      required:
        - name
        - parentId
        - parentPath
        - type
      type: object
    NotRestoredNodeList:
      properties:
        items:
          description: List of not restored nodes
          items:
            $ref: "#/components/schemas/NotRestoredNode"
          type: array
      required:
        - items
      type: object
    OAuthAuthorization:
      properties:
        clientId:
          description: ID of the OAuth client
          type: string
        expiresAt:
          description: Expiration date of the authorization
          format: date-time
          type: string
      required:
        - clientId
      type: object
    OAuthClient:
      properties:
        accessTokenValidity:
          description: Validity of the access token in seconds.
          format: int32
          type: integer
        clientId:
          description: ID of the OAuth client
          type: string
        clientSecret:
          description: Secret, which uses the client for authentication.
          type: string
        grantTypes:
          description: |-
            Authorized grant types
            cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
          items:
            type: string
          type: array
        redirectUris:
          description: URIs, to which a user is redirected after authorization.
          items:
            type: string
          type: array
        redirectUrl:
          description: "DEPRECATED: URL, to which a user is redirected after authorization."
          type: string
        refreshTokenValidity:
          description: Validity of the refresh token in seconds.
          format: int32
          type: integer
      required:
        - clientId
      type: object
    ObjectExpiration:
      properties:
        enableExpiration:
          description: enabled/disabled
          example: false
          type: boolean
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
      required:
        - enableExpiration
      type: object
    OpenIdAuthInfo:
      properties:
        items:
          description: List of available OpenID Connect identity providers
          items:
            $ref: "#/components/schemas/OpenIdProvider"
          type: array
      required:
        - items
      type: object
    OpenIdAuthResources:
      properties:
        openIdProviders:
          description: List of available OpenID Connect identity providers
          items:
            $ref: "#/components/schemas/OpenIdProvider"
          type: array
      required:
        - openIdProviders
      type: object
    OpenIdIdpConfig:
      properties:
        authorizationEndPointUrl:
          description: URL of the authorization endpoint
          type: string
        clientId:
          description: ID of the OAuth client
          type: string
        clientSecret:
          description: Secret, which uses the client for authentication.
          type: string
        fallbackMappingClaim:
          description: |-
            Name of the claim which is used for the user mapping fallback.
            e.g. 'sub'
          type: string
        id:
          description: ID
          format: int32
          type: integer
        issuer:
          description: |-
            Issuer identifier of the IDP
            The value is a case sensitive URL.
          type: string
        jwksEndPointUrl:
          description: URL of the JWKS endpoint
          type: string
        mappingClaim:
          description: |-
            Name of the claim which is used for the user mapping.
            e.g. 'email'
          type: string
        name:
          description: Name of the IDP
          type: string
        pkceChallengeMethod:
          description: |-
            PKCE code challenge method.
            cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          type: string
        pkceEnabled:
          description: |-
            Determines whether PKCE is enabled.
            cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          example: false
          type: boolean
        redirectUris:
          description: URIs, to which a user is redirected after authorization.
          items:
            type: string
          type: array
        scopes:
          description: |-
            List of requested scopes
            Usually 'openid' and the names of the requested claims.
          items:
            type: string
          type: array
        tokenEndPointUrl:
          description: URL of the token endpoint
          type: string
        userInfoEndPointUrl:
          description: URL of the user info endpoint
          type: string
        userUpdateEnabled:
          description: |-
            Determines if the user metadata is updated with data from the IDP.
            The scope 'profile' is needed for the update.
            If this scope is not granted, only the email address is updated.
          example: false
          type: boolean
      required:
        - id
      type: object
    OpenIdProvider:
      properties:
        id:
          description: ID
          format: int32
          type: integer
        isGlobalAvailable:
          description: Is available for all customers
          example: false
          type: boolean
        issuer:
          description: |-
            Issuer identifier of the IDP
            The value is a case sensitive URL.
          type: string
        mappingClaim:
          description: |-
            Name of the claim which is used for the user mapping.
            e.g. 'email'
          type: string
        name:
          description: Name of the IDP
          type: string
      required:
        - id
        - issuer
        - mappingClaim
        - name
      type: object
    PendingAssignment:
      properties:
        groupId:
          description: Unique identifier for the group
          format: int64
          type: integer
        roomId:
          description: Room ID
          format: int64
          type: integer
        state:
          description: |-
            Acceptance state:
            * ACCEPTED
            * WAITING
            * DENIED
          type: string
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
      required:
        - groupId
        - roomId
        - state
        - userId
      type: object
    PendingAssignmentData:
      properties:
        groupId:
          description: "DEPRECATED: Unique identifier for the group"
          format: int64
          type: integer
        pendingGroupData:
          $ref: "#/components/schemas/PendingGroupData"
        pendingUserData:
          $ref: "#/components/schemas/PendingUserData"
        roomId:
          description: Room ID
          format: int64
          type: integer
        state:
          description: |-
            Acceptance state:
            * ACCEPTED
            * WAITING
            * DENIED
          type: string
        userId:
          description: "DEPRECATED: Unique identifier for the user"
          format: int64
          type: integer
      required:
        - pendingGroupData
        - pendingUserData
        - roomId
        - state
      type: object
    PendingAssignmentList:
      properties:
        items:
          description: List of pending assignment information
          items:
            $ref: "#/components/schemas/PendingAssignmentData"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
      type: object
    PendingAssignmentsRequest:
      properties:
        items:
          description: List of pending assignments
          items:
            $ref: "#/components/schemas/PendingAssignment"
          type: array
      required:
        - items
      type: object
    PendingGroupData:
      properties:
        id:
          description: Unique identifier for the group
          format: int64
          type: integer
        name:
          description: Group name
          type: string
      required:
        - id
        - name
      type: object
    PendingUserData:
      properties:
        displayName:
          description: Display name
          type: string
        email:
          description: "DEPRECATED: Email"
          type: string
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        login:
          description: User login name
          type: string
      required:
        - displayName
        - email
        - id
        - login
      type: object
    PrivateKeyContainer:
      properties:
        privateKey:
          description: Private key
          type: string
        version:
          description: Version
          type: string
      required:
        - privateKey
        - version
      type: object
    PublicDownloadShare:
      properties:
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        creatorName:
          description: Creator name
          type: string
        creatorUsername:
          description: Creator user name
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        fileKey:
          $ref: "#/components/schemas/FileKey"
        fileName:
          description: File name
          type: string
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        isProtected:
          description: Is share protected by password
          example: false
          type: boolean
        limitReached:
          description: Downloads limit reached
          example: false
          type: boolean
        name:
          description: Share display name (alias name)
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        privateKeyContainer:
          $ref: "#/components/schemas/PrivateKeyContainer"
        size:
          description: File size or container size not compressed (in bytes)
          format: int64
          type: integer
      required:
        - createdAt
        - creatorName
        - fileName
        - isProtected
        - limitReached
        - size
      type: object
    PublicDownloadTokenGenerateRequest:
      properties:
        password:
          description: Password (only for password-protected shares)
          type: string
      type: object
    PublicDownloadTokenGenerateResponse:
      properties:
        downloadUrl:
          description: Download URL
          type: string
        token:
          description: "DEPRECATED: Download token"
          type: string
      required:
        - token
      type: object
    PublicKeyContainer:
      properties:
        publicKey:
          description: Public key
          type: string
        version:
          description: Version
          type: string
      required:
        - publicKey
        - version
      type: object
    PublicUploadShare:
      properties:
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        isProtected:
          description: Is share protected by password
          example: false
          type: boolean
        maxSize:
          description: "DEPRECATED: Maximal total size of uploaded files (in bytes)"
          format: double
          type: number
        maxSlots:
          description: "DEPRECATED: Maximal amount of files to upload"
          format: int32
          type: integer
        name:
          description: Share display name (alias name)
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        showUploadedFiles:
          description: Allow display of already uploaded files
          example: false
          type: boolean
        uploadedFiles:
          description: List of (public) uploaded files
          items:
            $ref: "#/components/schemas/PublicUploadedFileData"
          type: array
        userUserPublicKeyList:
          $ref: "#/components/schemas/UserUserPublicKeyList"
      required:
        - createdAt
        - isProtected
        - maxSlots
      type: object
    PublicUploadedFileData:
      properties:
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        hash:
          description: Hash value of transferred file
          type: string
        name:
          description: Name
          type: string
        size:
          description: File size in byte
          format: int64
          type: integer
      required:
        - createdAt
        - name
        - size
      type: object
    RadiusChallengeResponse:
      properties:
        code:
          description: HTTP status code
          format: int32
          type: integer
        debugInfo:
          description: Debug information
          type: string
        errorCode:
          description: Error code
          format: int32
          type: integer
        message:
          description: HTTP status code description
          type: string
        replyMessage:
          description: |-
            RADIUS Reply-Message
            Instruction how to handle the situation.
          type: string
        replyState:
          description: >-
            For RADIUS Access-Challenge

            If a 'replyState' is returned, it must be included as 'state' in the following request.
          type: string
      type: object
    RadiusConfig:
      properties:
        failoverServer:
          $ref: "#/components/schemas/FailoverServer"
        id:
          description: ID
          format: int32
          type: integer
        ipAddress:
          description: RADIUS Server IP Address
          type: string
        name:
          description: Name
          type: string
        otpPinFirst:
          description: Sequence order of concatenated PIN and one-time token
          example: false
          type: boolean
        port:
          description: RADIUS Server Port
          format: int32
          type: integer
        sharedSecret:
          description: Shared Secret to access the RADIUS server
          type: string
      required:
        - id
        - ipAddress
        - name
        - otpPinFirst
        - port
        - sharedSecret
      type: object
    RadiusConfigCreateRequest:
      properties:
        failoverServer:
          $ref: "#/components/schemas/FailoverServer"
        ipAddress:
          description: RADIUS Server IP Address
          type: string
        otpPinFirst:
          description: Sequence order of concatenated PIN and one-time token
          example: false
          type: boolean
        port:
          description: RADIUS Server Port
          format: int32
          type: integer
        sharedSecret:
          description: Shared Secret to access the RADIUS server
          type: string
      required:
        - ipAddress
        - port
        - sharedSecret
      type: object
    RadiusConfigUpdateRequest:
      properties:
        failoverServer:
          $ref: "#/components/schemas/FailoverServer"
        ipAddress:
          description: RADIUS Server IP Address
          type: string
        otpPinFirst:
          description: Sequence order of concatenated PIN and one-time token
          example: false
          type: boolean
        port:
          description: RADIUS Server Port
          format: int32
          type: integer
        sharedSecret:
          description: Shared Secret to access the RADIUS server
          type: string
      required:
        - ipAddress
        - port
        - sharedSecret
      type: object
    Range:
      properties:
        limit:
          description: Range limit
          format: int64
          type: integer
        offset:
          description: Range offset
          format: int64
          type: integer
        total:
          description: Total items available
          format: int64
          type: integer
      required:
        - limit
        - offset
        - total
      type: object
    ResetPasswordRequest:
      properties:
        language:
          description: Language ID or ISO 639-1 code
          type: string
        login:
          description: User login name
          type: string
      required:
        - login
      type: object
    ResetPasswordTokenValidateResponse:
      properties:
        allowSystemGlobalWeakPassword:
          description: Allow weak password
          example: false
          type: boolean
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        lastName:
          description: User last name
          type: string
        title:
          description: Job title
          type: string
      required:
        - firstName
        - lastName
      type: object
    ResetPasswordWithTokenRequest:
      properties:
        password:
          description: New password
          type: string
      required:
        - password
      type: object
    RestoreDeletedNodesRequest:
      properties:
        deletedNodeIds:
          description: List of deleted node IDs
          items:
            format: int64
            type: integer
          type: array
        keepShareLinks:
          description: |-
            Preserve Download Share Links and point them to the new node.
            (default: false)
          example: false
          type: boolean
        parentId:
          description: |-
            Node parent ID
            (default: previous parent ID)
          format: int64
          type: integer
        resolutionStrategy:
          description: |-
            Node conflict resolution strategy:
            * autorename
            * overwrite
            * fail

            (default: autorename)
          enum:
            - autorename
            - overwrite
            - fail
          type: string
      required:
        - deletedNodeIds
      type: object
    Right:
      properties:
        description:
          description: Right description
          type: string
        id:
          description: Unique identifier for the right
          format: int32
          type: integer
        name:
          description: Right (unique) name
          type: string
      required:
        - description
        - id
        - name
      type: object
    Role:
      properties:
        description:
          description: Role description
          type: string
        id:
          description: Unique identifier for the role
          format: int32
          type: integer
        items:
          description: List of reachable right over role
          items:
            $ref: "#/components/schemas/Right"
          type: array
        name:
          description: Role (unique) name
          type: string
      required:
        - description
        - id
        - name
      type: object
    RoleGroup:
      properties:
        id:
          description: Unique identifier for the group
          format: int64
          type: integer
        isMember:
          description: Is group member of the role
          example: false
          type: boolean
        name:
          description: Group name
          type: string
      required:
        - id
        - isMember
        - name
      type: object
    RoleGroupList:
      properties:
        items:
          description: List of role-group mappings
          items:
            $ref: "#/components/schemas/RoleGroup"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    RoleList:
      properties:
        items:
          description: List of roles
          items:
            $ref: "#/components/schemas/Role"
          type: array
      required:
        - items
      type: object
    RoleUser:
      properties:
        displayName:
          description: Display name
          type: string
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        isMember:
          description: Is user member of the role
          example: false
          type: boolean
      required:
        - displayName
        - id
        - isMember
      type: object
    RoleUserList:
      properties:
        items:
          description: List of role-user mappings
          items:
            $ref: "#/components/schemas/RoleUser"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    RoomData:
      properties:
        children:
          description: List of rooms, where this room is a parent (if exist)
          items:
            $ref: "#/components/schemas/RoomData"
          type: array
        cntAdmins:
          description: "DEPRECATED: Number of admins (for rooms only)"
          format: int32
          type: integer
        cntDownloadShares:
          description: Returns the number of Download Shares of this node.
          format: int32
          type: integer
        cntUploadShares:
          description: Returns the number of Upload Shares of this node.
          format: int32
          type: integer
        cntUsers:
          description: "DEPRECATED: Number of users (for rooms only)"
          format: int32
          type: integer
        createdAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/UserInfo"
        hasRecycleBin:
          description: Is Recycle Bin active (for rooms only)
          example: false
          type: boolean
        id:
          description: Room ID
          format: int64
          type: integer
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        isFavorite:
          description: Node is marked as favorite (for rooms/folders only)
          example: false
          type: boolean
        isGranted:
          description: Is user granted room permissions
          example: false
          type: boolean
        name:
          description: Name
          type: string
        parentId:
          description: Parent node ID (room or folder)
          format: int64
          type: integer
        permissions:
          $ref: "#/components/schemas/NodePermissions"
        quota:
          description: Quota in byte
          format: int64
          type: integer
        recycleBinRetentionPeriod:
          description: |-
            Retention period for deleted nodes in days
            (Integer between 0 and 9999)
          format: int32
          type: integer
        size:
          description: Room size
          format: int64
          type: integer
        type:
          description: Node type
          enum:
            - room
          type: string
        updatedAt:
          description: |-
            Modification date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        updatedBy:
          $ref: "#/components/schemas/UserInfo"
      required:
        - hasRecycleBin
        - id
        - isEncrypted
        - isGranted
        - name
        - recycleBinRetentionPeriod
      type: object
    RoomGroup:
      properties:
        id:
          description: Unique identifier for the group
          format: int64
          type: integer
        isGranted:
          description: Is user granted room permissions
          example: false
          type: boolean
        name:
          description: Group name
          type: string
        newGroupMemberAcceptance:
          description: |-
            Behaviour when new users are added to the group:
            * autoallow
            * pending

            Only relevant if 'adminGroupIds' has items.
            (default: autoallow)
          type: string
        permissions:
          $ref: "#/components/schemas/NodePermissions"
      required:
        - id
        - isGranted
        - name
      type: object
    RoomGroupList:
      properties:
        items:
          description: List of room-group mappings
          items:
            $ref: "#/components/schemas/RoomGroup"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    RoomGroupsAddBatchRequest:
      properties:
        items:
          description: List of room-group mappings
          items:
            $ref: "#/components/schemas/RoomGroupsAddBatchRequestItem"
          type: array
      required:
        - items
      type: object
    RoomGroupsAddBatchRequestItem:
      properties:
        id:
          description: Unique identifier for the group
          format: int64
          type: integer
        newGroupMemberAcceptance:
          description: |-
            Behaviour when new users are added to the group:
            * autoallow
            * pending

            Only relevant if 'adminGroupIds' has items.
            (default: autoallow)
          type: string
        permissions:
          $ref: "#/components/schemas/NodePermissions"
      required:
        - id
        - permissions
      type: object
    RoomGroupsDeleteBatchRequest:
      properties:
        ids:
          description: List of group IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - ids
      type: object
    RoomTreeDataList:
      properties:
        items:
          description: List of room data information
          items:
            $ref: "#/components/schemas/RoomData"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    RoomUser:
      properties:
        displayName:
          description: Display name
          type: string
        email:
          description: "DEPRECATED: Email"
          type: string
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        isGranted:
          description: Is user granted room permissions
          example: false
          type: boolean
        login:
          description: User login name
          type: string
        permissions:
          $ref: "#/components/schemas/NodePermissions"
        publicKeyContainer:
          $ref: "#/components/schemas/PublicKeyContainer"
      required:
        - displayName
        - email
        - id
        - isGranted
        - login
      type: object
    RoomUserList:
      properties:
        items:
          description: List of room-user mappings
          items:
            $ref: "#/components/schemas/RoomUser"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    RoomUsersAddBatchRequest:
      properties:
        items:
          description: List of room-user mappings
          items:
            $ref: "#/components/schemas/RoomUsersAddBatchRequestItem"
          type: array
      required:
        - items
      type: object
    RoomUsersAddBatchRequestItem:
      properties:
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        permissions:
          $ref: "#/components/schemas/NodePermissions"
      required:
        - id
        - permissions
      type: object
    RoomUsersDeleteBatchRequest:
      properties:
        ids:
          description: List of user IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - ids
      type: object
    S3Config:
      properties:
        accessKey:
          description: Access key
          type: string
        bucketName:
          description: S3 bucket name
          type: string
        endpointUrl:
          description: S3 object storage endpoint URL
          type: string
        id:
          description: ID
          format: int32
          type: integer
        region:
          description: S3 region
          type: string
        secretKey:
          description: Secret to key
          type: string
      required:
        - accessKey
        - bucketName
        - endpointUrl
        - id
        - secretKey
      type: object
    S3ConfigCreateRequest:
      properties:
        accessKey:
          description: Access key
          type: string
        bucketName:
          description: S3 bucket name
          type: string
        endpointUrl:
          description: S3 object storage endpoint URL
          type: string
        region:
          description: S3 region
          type: string
        secretKey:
          description: Secret to key
          type: string
      required:
        - accessKey
        - bucketName
        - endpointUrl
        - secretKey
      type: object
    S3ConfigUpdateRequest:
      properties:
        accessKey:
          description: Access key
          type: string
        bucketName:
          description: S3 bucket name
          type: string
        endpointUrl:
          description: S3 object storage endpoint URL
          type: string
        region:
          description: S3 region
          type: string
        secretKey:
          description: Secret to key
          type: string
      type: object
    SdsServerTime:
      properties:
        time:
          description: DRACOON server time
          format: date-time
          type: string
      type: object
    SoftwareVersionData:
      properties:
        buildDate:
          description: |-
            Build date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        restApiVersion:
          description: |-
            REST API version
            e.g. 4.4.0
          type: string
        scmRevisionNumber:
          description: Revision number e.g. 27575
          type: string
        sdsServerVersion:
          description: |-
            DRACOON server version
            e.g. 4.4.0
          type: string
      required:
        - buildDate
        - restApiVersion
        - scmRevisionNumber
        - sdsServerVersion
      type: object
    SyslogEvent:
      properties:
        attribute1:
          description: Attribute 1
          type: string
        attribute2:
          description: Attribute 2
          type: string
        attribute3:
          description: Attribute 3
          type: string
        authParentSource:
          description: Auth parent source ID
          type: string
        authParentTarget:
          description: Auth parent target ID
          type: string
        customerId:
          description: Unique identifier for the customer
          format: int64
          type: integer
        id:
          description: Event ID
          format: int64
          type: integer
        message:
          description: Event description
          type: string
        objectId1:
          description: Object ID 1
          format: int64
          type: integer
        objectId2:
          description: Object ID 2
          format: int64
          type: integer
        objectName1:
          description: Object name 1
          type: string
        objectName2:
          description: Object type 2
          type: string
        objectType1:
          description: Object type 1
          format: int32
          type: integer
        objectType2:
          description: Object type 2
          format: int32
          type: integer
        operationId:
          description: Operation type ID
          format: int32
          type: integer
        operationName:
          description: Operation name
          type: string
        status:
          description: |-
            Operation status:
            * 0 - Success
            * 2 - Error
          format: int32
          type: integer
        time:
          description: |-
            Event timestamp
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        userClient:
          description: Client
          type: string
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
        userIp:
          description: User IP
          type: string
        userName:
          description: User name
          type: string
      required:
        - id
        - message
        - time
        - userId
      type: object
    SyslogEventList:
      properties:
        items:
          description: List of log events
          items:
            $ref: "#/components/schemas/SyslogEvent"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    SystemInfo:
      properties:
        authMethods:
          description: Authentication methods
          items:
            $ref: "#/components/schemas/AuthMethod"
          type: array
        defaultLanguage:
          description: |-
            System default language
            cf. [RFC 5646](https://tools.ietf.org/html/rfc5646)
          type: string
      required:
        - authMethods
        - defaultLanguage
      type: object
    TestActiveDirectoryConfigRequest:
      properties:
        ldapUsersDomain:
          description: Search scope of Active Directory; only users below this node can log
            on.
          type: string
        serverAdminName:
          description: Distinguished Name (DN) of Active Directory administrative account
          type: string
        serverAdminPassword:
          description: Password of Active Directory administrative account
          type: string
        serverIp:
          description: IPv4 or IPv6 address or host name
          type: string
        serverPort:
          description: Port
          format: int32
          type: integer
        sslFingerPrint:
          description: |-
            SSL finger print of Active Directory server.
            Mandatory for LDAPS connections.
            Format: Algorithm/Fingerprint
          type: string
        useLdaps:
          description: Determines whether LDAPS should be used instead of plain LDAP.
          example: false
          type: boolean
      required:
        - ldapUsersDomain
        - serverAdminName
        - serverAdminPassword
        - serverIp
        - serverPort
        - useLdaps
      type: object
    TestActiveDirectoryConfigResponse:
      properties:
        ldapUsersDomain:
          description: Search scope of Active Directory; only users below this node can log
            on.
          type: string
        serverAdminName:
          description: Distinguished Name (DN) of Active Directory administrative account
          type: string
        serverAdminPassword:
          description: Password of Active Directory administrative account
          type: string
        serverIp:
          description: IPv4 or IPv6 address or host name
          type: string
        serverPort:
          description: Port
          format: int32
          type: integer
        sslFingerPrint:
          description: |-
            SSL finger print of Active Directory server.
            Mandatory for LDAPS connections.
            Format: Algorithm/Fingerprint
          type: string
        useLdaps:
          description: Determines whether LDAPS should be used instead of plain LDAP.
          example: false
          type: boolean
      required:
        - ldapUsersDomain
        - serverAdminName
        - serverAdminPassword
        - serverIp
        - serverPort
        - useLdaps
      type: object
    UpdateActiveDirectoryConfigRequest:
      properties:
        adExportGroup:
          description: >-
            If 'ad_userimport' is set to true,

            the user must be member of this Active Directory group to receive a newly created DRACOON account.
          type: string
        alias:
          description: Alias name
          type: string
        createHomeFolder:
          description: >-
            Determines whether a room is created for each user that is created
            by automatic import (like a home folder).

            Room's name will equal the user's login name.
          example: false
          type: boolean
        homeFolderParent:
          description: >-
            ID of the room in which the individual rooms for users will be
            created.

            cf. 'ad_create_home_folder_on'
          format: int64
          type: integer
        ldapUsersDomain:
          description: Search scope of Active Directory; only users below this node can log
            on.
          type: string
        sdsImportGroup:
          description: User group that is assigned to users who are created by automatic
            import.
          format: int64
          type: integer
        serverAdminName:
          description: Distinguished Name (DN) of Active Directory administrative account
          type: string
        serverAdminPassword:
          description: Password of Active Directory administrative account
          type: string
        serverIp:
          description: IPv4 or IPv6 address or host name
          type: string
        serverPort:
          description: Port
          format: int32
          type: integer
        sslFingerPrint:
          description: |-
            SSL finger print of Active Directory server.
            Mandatory for LDAPS connections.
            Format: Algorithm/Fingerprint
          type: string
        useLdaps:
          description: Determines whether LDAPS should be used instead of plain LDAP.
          example: false
          type: boolean
        userFilter:
          description: Name of Active Directory attribute that is used as login name.
          type: string
        userImport:
          description: >-
            Determines if an DRACOON account is automatically created for a new
            user

            who successfully logs on with his/her AD account.
          example: false
          type: boolean
      type: object
    UpdateCustomerRequest:
      properties:
        companyName:
          description: Company name
          type: string
        customerContractType:
          description: Customer type
          enum:
            - free
            - demo
            - pay
          type: string
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          example: false
          type: boolean
        providerCustomerId:
          description: Provider customer ID value (relevant only for type 'pay')
          type: string
        quotaMax:
          description: Maximal disc space which can be allocated by customer in bytes.
          format: int64
          type: integer
        userMax:
          description: Maximal number of users
          format: int32
          type: integer
      type: object
    UpdateCustomerResponse:
      properties:
        activationCode:
          description: |-
            Customer activation code string:
            * valid only for types 'free' and 'demo'
            * for 'pay' customers it is empty
          type: string
        companyName:
          description: Company name
          type: string
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        customerAttributes:
          $ref: "#/components/schemas/CustomerAttributes"
        customerContractType:
          description: Customer type
          enum:
            - free
            - demo
            - pay
          type: string
        id:
          description: Unique identifier for the customer
          format: int64
          type: integer
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          example: false
          type: boolean
        providerCustomerId:
          description: Provider customer ID value (relevant only for type 'pay')
          type: string
        quotaMax:
          description: Maximal disc space which can be allocated by customer in bytes.
          format: int64
          type: integer
        trialDays:
          description: Number of days left for trial period (relevant only for type demo)
          format: int32
          type: integer
        userMax:
          description: Maximal number of users
          format: int32
          type: integer
      required:
        - companyName
        - customerContractType
        - id
        - lockStatus
        - quotaMax
        - userMax
      type: object
    UpdateFileRequest:
      properties:
        classification:
          description: Expiration date/time
          format: int32
          type: integer
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        name:
          description: File name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
      type: object
    UpdateFolderRequest:
      properties:
        name:
          description: Folder name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
      type: object
    UpdateGroupRequest:
      properties:
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        name:
          description: Group name
          type: string
      type: object
    UpdateOAuthClientRequest:
      properties:
        accessTokenValidity:
          description: Validity of the access token in seconds.
          format: int32
          type: integer
        clientSecret:
          description: Secret, which uses the client for authentication.
          type: string
        grantTypes:
          description: |-
            Authorized grant types
            cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
          items:
            type: string
          type: array
        redirectUris:
          description: URIs, to which a user is redirected after authorization.
          items:
            type: string
          type: array
        redirectUrl:
          description: "DEPRECATED: URL, to which a user is redirected after authorization."
          type: string
        refreshTokenValidity:
          description: Validity of the refresh token in seconds.
          format: int32
          type: integer
      type: object
    UpdateOpenIdIdpConfigRequest:
      properties:
        authorizationEndPointUrl:
          description: URL of the authorization endpoint
          type: string
        clientId:
          description: ID of the OAuth client
          type: string
        clientSecret:
          description: Secret, which uses the client for authentication.
          type: string
        fallbackMappingClaim:
          description: |-
            Name of the claim which is used for the user mapping fallback.
            e.g. 'sub'
          type: string
        issuer:
          description: |-
            Issuer identifier of the IDP
            The value is a case sensitive URL.
          type: string
        jwksEndPointUrl:
          description: URL of the JWKS endpoint
          type: string
        mappingClaim:
          description: |-
            Name of the claim which is used for the user mapping.
            e.g. 'email'
          type: string
        name:
          description: Name of the IDP
          type: string
        pkceChallengeMethod:
          description: |-
            PKCE code challenge method.
            cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          type: string
        pkceEnabled:
          description: |-
            Determines whether PKCE is enabled.
            cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          example: false
          type: boolean
        redirectUris:
          description: URIs, to which a user is redirected after authorization.
          items:
            type: string
          type: array
        scopes:
          description: |-
            List of requested scopes
            Usually 'openid' and the names of the requested claims.
          items:
            type: string
          type: array
        tokenEndPointUrl:
          description: URL of the token endpoint
          type: string
        userInfoEndPointUrl:
          description: URL of the user info endpoint
          type: string
        userUpdateEnabled:
          description: |-
            Determines if the user metadata is updated with data from the IDP.
            The scope 'profile' is needed for the update.
            If this scope is not granted, only the email address is updated.
          example: false
          type: boolean
      type: object
    UpdateRoomRequest:
      properties:
        name:
          description: Name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        quota:
          description: Quota in byte
          format: int64
          type: integer
      type: object
    UpdateUserAccountRequest:
      properties:
        acceptEULA:
          description: |-
            Accept EULA
            Present, if EULA is system global active.
            cf. `GET config/settings` - 'eula_active'
            If accepted can not be undone.
          example: false
          type: boolean
        email:
          description: "DEPRECATED: Email"
          type: string
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        lastName:
          description: User last name
          type: string
        login:
          description: User login name
          type: string
        title:
          description: Job title
          type: string
      type: object
    UpdateUserRequest:
      properties:
        authMethods:
          description: Authentication methods
          items:
            $ref: "#/components/schemas/UserAuthMethod"
          type: array
        email:
          description: "DEPRECATED: Email"
          type: string
        expiration:
          $ref: "#/components/schemas/ObjectExpiration"
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        lastName:
          description: User last name
          type: string
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          format: int32
          type: integer
        title:
          description: Job title
          type: string
      type: object
    UploadShare:
      properties:
        accessKey:
          description: Share access key to generate secure link
          type: string
        cntFiles:
          description: Total amount of existing files uploaded with this share.
          format: int32
          type: integer
        cntUploads:
          description: Total amount of uploads conducted with this share.
          format: int32
          type: integer
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/UserInfo"
        dataUrl:
          description: Upload Share URL
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        filesExpiryPeriod:
          description: Number of days after which uploaded files expire
          format: int32
          type: integer
        id:
          description: Share ID
          format: int64
          type: integer
        isEncrypted:
          description: Encryption state
          example: false
          type: boolean
        isProtected:
          description: Is share protected by password
          example: false
          type: boolean
        maxSize:
          description: "DEPRECATED: Maximal total size of uploaded files (in bytes)"
          format: int64
          type: integer
        maxSlots:
          description: "DEPRECATED: Maximal amount of files to upload"
          format: int32
          type: integer
        name:
          description: Alias name
          type: string
        notes:
          description: |-
            User notes
            Use empty string to remove.
          type: string
        notifyCreator:
          description: Notify creator on every upload.
          example: false
          type: boolean
        recipients:
          description: CSV string of recipient emails
          type: string
        showUploadedFiles:
          description: Allow display of already uploaded files
          example: false
          type: boolean
        smsRecipients:
          description: CSV string of recipient MSISDNS
          type: string
        targetId:
          description: Target room or folder ID
          format: int64
          type: integer
        targetPath:
          description: Path to shared upload node
          type: string
      required:
        - accessKey
        - createdAt
        - createdBy
        - expireAt
        - id
        - isProtected
        - name
        - notifyCreator
        - targetId
      type: object
    UploadShareList:
      properties:
        items:
          description: List of Upload Shares
          items:
            $ref: "#/components/schemas/UploadShare"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    UserAccount:
      properties:
        authMethods:
          description: Authentication methods
          items:
            $ref: "#/components/schemas/UserAuthMethod"
          type: array
        customer:
          $ref: "#/components/schemas/CustomerData"
        email:
          description: "DEPRECATED: Email"
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        hasManageableRooms:
          description: User has manageable rooms
          example: false
          type: boolean
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        isEncryptionEnabled:
          description: |-
            User has generated private key.
            Possible if **TripleCrypt™ technology** is active for this customer
          example: false
          type: boolean
        lastLoginFailAt:
          description: |-
            Last failed logon date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lastLoginFailIp:
          description: Last failed logon IP address
          type: string
        lastLoginSuccessAt:
          description: |-
            Last successful logon date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lastLoginSuccessIp:
          description: Last successful logon IP address
          type: string
        lastName:
          description: User last name
          type: string
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          format: int32
          type: integer
        login:
          description: User login name
          type: string
        needsToAcceptEULA:
          description: |-
            User has accepted EULA.
            Present, if EULA is system global active.
            cf. `GET config/settings` - 'eula_active'
          example: false
          type: boolean
        needsToChangePassword:
          description: User has changed the password
          example: false
          type: boolean
        needsToChangeUserName:
          description: If true, the user must change the 'userName' at the first login
          example: false
          type: boolean
        title:
          description: Job title
          type: string
        userAttributes:
          $ref: "#/components/schemas/UserAttributes"
        userGroups:
          description: All groups the user is member of
          items:
            $ref: "#/components/schemas/UserGroup"
          type: array
        userRoles:
          $ref: "#/components/schemas/RoleList"
      required:
        - authMethods
        - customer
        - firstName
        - hasManageableRooms
        - id
        - lastName
        - lockStatus
        - login
        - needsToChangePassword
        - userRoles
      type: object
    UserAttributes:
      properties:
        items:
          description: List of key-value pairs
          items:
            $ref: "#/components/schemas/KeyValueEntry"
          type: array
      type: object
    UserAuthMethod:
      properties:
        authId:
          description: Authentication method ID
          type: string
        isEnabled:
          description: Is enabled
          example: false
          type: boolean
        options:
          description: Authentication method options
          items:
            $ref: "#/components/schemas/KeyValueEntry"
          type: array
      required:
        - authId
        - isEnabled
      type: object
    UserData:
      properties:
        authMethods:
          description: Authentication methods
          items:
            $ref: "#/components/schemas/UserAuthMethod"
          type: array
        email:
          description: "DEPRECATED: Email"
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        hasManageableRooms:
          description: User has manageable rooms
          example: false
          type: boolean
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        isEncryptionEnabled:
          description: |-
            User has generated private key.
            Possible if **TripleCrypt™ technology** is active for this customer
          example: false
          type: boolean
        lastLoginSuccessAt:
          description: |-
            Last successful logon date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lastName:
          description: User last name
          type: string
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          format: int32
          type: integer
        login:
          description: User login name
          type: string
        publicKeyContainer:
          $ref: "#/components/schemas/PublicKeyContainer"
        title:
          description: Job title
          type: string
        userAttributes:
          $ref: "#/components/schemas/UserAttributes"
        userRoles:
          $ref: "#/components/schemas/RoleList"
      required:
        - authMethods
        - email
        - firstName
        - id
        - lastName
        - lockStatus
        - login
      type: object
    UserFileKey:
      properties:
        fileKey:
          $ref: "#/components/schemas/FileKey"
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
      required:
        - fileKey
        - userId
      type: object
    UserFileKeyList:
      properties:
        items:
          description: List of user file keys
          items:
            $ref: "#/components/schemas/UserFileKey"
          type: array
      type: object
    UserFileKeySetBatchRequest:
      properties:
        items:
          description: List of user file keys
          items:
            $ref: "#/components/schemas/UserFileKeySetRequest"
          type: array
      required:
        - items
      type: object
    UserFileKeySetRequest:
      properties:
        fileId:
          description: File ID
          format: int64
          type: integer
        fileKey:
          $ref: "#/components/schemas/FileKey"
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
      required:
        - fileId
        - fileKey
        - userId
      type: object
    UserGroup:
      properties:
        id:
          description: Unique identifier for the group
          format: int64
          type: integer
        isMember:
          description: Is group member
          example: false
          type: boolean
        name:
          description: Group name
          type: string
      required:
        - id
        - isMember
        - name
      type: object
    UserGroupList:
      properties:
        items:
          description: List of user-group mappings
          items:
            $ref: "#/components/schemas/UserGroup"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    UserIdFileIdItem:
      properties:
        fileId:
          description: File ID
          format: int64
          type: integer
        userId:
          description: Unique identifier for the user
          format: int64
          type: integer
      type: object
    UserIds:
      properties:
        ids:
          description: List of user IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - ids
      type: object
    UserInfo:
      properties:
        displayName:
          description: Display name
          type: string
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
      required:
        - displayName
        - id
      type: object
    UserItem:
      properties:
        createdAt:
          description: |-
            Creation date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        email:
          description: "DEPRECATED: Email"
          type: string
        expireAt:
          description: |-
            Expiration date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        firstName:
          description: User first name
          type: string
        gender:
          description: Gender
          enum:
            - m
            - f
            - n
          type: string
        hasManageableRooms:
          description: User has manageable rooms
          example: false
          type: boolean
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        isEncryptionEnabled:
          description: |-
            User has generated private key.
            Possible if **TripleCrypt™ technology** is active for this customer
          example: false
          type: boolean
        lastLoginSuccessAt:
          description: |-
            Last successful logon date
            e.g. 2015-12-31T23:59:00
          format: date-time
          type: string
        lastName:
          description: User last name
          type: string
        lockStatus:
          description: >-
            Lock status:

            * false - unlocked

            * true - locked


            All users of this customer will be blocked and can not login anymore.
          format: int32
          type: integer
        login:
          description: User login name
          type: string
        title:
          description: Job title
          type: string
        userAttributes:
          $ref: "#/components/schemas/UserAttributes"
        userRoles:
          $ref: "#/components/schemas/RoleList"
      required:
        - firstName
        - hasManageableRooms
        - id
        - lastName
        - lockStatus
        - login
        - userRoles
      type: object
    UserKeyPairContainer:
      properties:
        privateKeyContainer:
          $ref: "#/components/schemas/PrivateKeyContainer"
        publicKeyContainer:
          $ref: "#/components/schemas/PublicKeyContainer"
      required:
        - privateKeyContainer
        - publicKeyContainer
      type: object
    UserList:
      properties:
        items:
          description: List of users
          items:
            $ref: "#/components/schemas/UserItem"
          type: array
        range:
          $ref: "#/components/schemas/Range"
      required:
        - items
        - range
      type: object
    UserUserPublicKey:
      properties:
        id:
          description: Unique identifier for the user
          format: int64
          type: integer
        publicKeyContainer:
          $ref: "#/components/schemas/PublicKeyContainer"
      type: object
    UserUserPublicKeyList:
      properties:
        items:
          description: List of user public keys
          items:
            $ref: "#/components/schemas/UserUserPublicKey"
          type: array
      required:
        - items
      type: object
    ZipDownloadRequest:
      properties:
        nodeIds:
          description: List of node IDs
          items:
            format: int64
            type: integer
          type: array
      required:
        - nodeIds
      type: object
