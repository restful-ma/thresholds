openapi: 3.0.0
info:
  version: 2013-12-02
  x-release: v4
  title: Amazon Kinesis
  description: <fullname>Amazon Kinesis Data Streams Service API Reference</fullname>
    <p>Amazon Kinesis Data Streams is a managed service that scales elastically
    for real-time processing of streaming big data.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: kinesis
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-2013-12-02.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/kinesis/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=Kinesis_20131202.AddTagsToStream:
    post:
      operationId: AddTagsToStream
      description: <p>Adds or updates tags for the specified Kinesis data stream. Each time
        you invoke this operation, you can specify up to 10 tags. If you want to
        add more than 10 tags to your stream, you can invoke this operation
        multiple times. In total, each stream can have up to 50 tags.</p> <p>If
        tags have already been assigned to the stream,
        <code>AddTagsToStream</code> overwrites any existing tags that
        correspond to the specified tag keys.</p> <p> <a>AddTagsToStream</a> has
        a limit of five transactions per second per account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.AddTagsToStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTagsToStreamInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.CreateStream:
    post:
      operationId: CreateStream
      description: <p>Creates a Kinesis data stream. A stream captures and transports data
        records that are continuously emitted from different data sources or
        <i>producers</i>. Scale-out within a stream is explicitly supported by
        means of shards, which are uniquely identified groups of data records in
        a stream.</p> <p>You specify and control the number of shards that a
        stream is composed of. Each shard can support reads up to five
        transactions per second, up to a maximum data read total of 2 MB per
        second. Each shard can support writes up to 1,000 records per second, up
        to a maximum data write total of 1 MB per second. If the amount of data
        input increases or decreases, you can add or remove shards.</p> <p>The
        stream name identifies the stream. The name is scoped to the AWS account
        used by the application. It is also scoped by AWS Region. That is, two
        streams in two different accounts can have the same name, and two
        streams in the same account, but in two different Regions, can have the
        same name.</p> <p> <code>CreateStream</code> is an asynchronous
        operation. Upon receiving a <code>CreateStream</code> request, Kinesis
        Data Streams immediately returns and sets the stream status to
        <code>CREATING</code>. After the stream is created, Kinesis Data Streams
        sets the stream status to <code>ACTIVE</code>. You should perform read
        and write operations only on an <code>ACTIVE</code> stream. </p> <p>You
        receive a <code>LimitExceededException</code> when making a
        <code>CreateStream</code> request when you try to do one of the
        following:</p> <ul> <li> <p>Have more than five streams in the
        <code>CREATING</code> state at any point in time.</p> </li> <li>
        <p>Create more shards than are authorized for your account.</p> </li>
        </ul> <p>For the default shard limit for an AWS account, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
        Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams
        Developer Guide</i>. To increase this limit, <a
        href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
        AWS Support</a>.</p> <p>You can use <code>DescribeStream</code> to check
        the stream status, which is returned in <code>StreamStatus</code>.</p>
        <p> <a>CreateStream</a> has a limit of five transactions per second per
        account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.CreateStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStreamInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DecreaseStreamRetentionPeriod:
    post:
      operationId: DecreaseStreamRetentionPeriod
      description: <p>Decreases the Kinesis data stream's retention period, which is the
        length of time data records are accessible after they are added to the
        stream. The minimum value of a stream's retention period is 24
        hours.</p> <p>This operation may result in lost data. For example, if
        the stream's retention period is 48 hours and is decreased to 24 hours,
        any data already in the stream that is older than 24 hours is
        inaccessible.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DecreaseStreamRetentionPeriod
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecreaseStreamRetentionPeriodInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DeleteStream:
    post:
      operationId: DeleteStream
      description: <p>Deletes a Kinesis data stream and all its shards and data. You must
        shut down any applications that are operating on the stream before you
        delete the stream. If an application attempts to operate on a deleted
        stream, it receives the exception
        <code>ResourceNotFoundException</code>.</p> <p>If the stream is in the
        <code>ACTIVE</code> state, you can delete it. After a
        <code>DeleteStream</code> request, the specified stream is in the
        <code>DELETING</code> state until Kinesis Data Streams completes the
        deletion.</p> <p> <b>Note:</b> Kinesis Data Streams might continue to
        accept data read and write operations, such as <a>PutRecord</a>,
        <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in the
        <code>DELETING</code> state until the stream deletion is complete.</p>
        <p>When you delete a stream, any shards in that stream are also deleted,
        and any tags are dissociated from the stream.</p> <p>You can use the
        <a>DescribeStream</a> operation to check the state of the stream, which
        is returned in <code>StreamStatus</code>.</p> <p> <a>DeleteStream</a>
        has a limit of five transactions per second per account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DeleteStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteStreamInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DeregisterStreamConsumer:
    post:
      operationId: DeregisterStreamConsumer
      description: <p>To deregister a consumer, provide its ARN. Alternatively, you can
        provide the ARN of the data stream and the name you gave the consumer
        when you registered it. You may also provide all three parameters, as
        long as they don't conflict with each other. If you don't know the name
        or ARN of the consumer that you want to deregister, you can use the
        <a>ListStreamConsumers</a> operation to get a list of the descriptions
        of all the consumers that are currently registered with a given data
        stream. The description of a consumer contains its name and ARN.</p>
        <p>This operation has a limit of five transactions per second per
        account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DeregisterStreamConsumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeregisterStreamConsumerInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DescribeLimits:
    post:
      operationId: DescribeLimits
      description: <p>Describes the shard limits and usage for the account.</p> <p>If you
        update your account limits, the old limits might be returned for a few
        minutes.</p> <p>This operation has a limit of one transaction per second
        per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeLimitsOutput"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DescribeLimits
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeLimitsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DescribeStream:
    post:
      operationId: DescribeStream
      description: <p>Describes the specified Kinesis data stream.</p> <p>The information
        returned includes the stream name, Amazon Resource Name (ARN), creation
        time, enhanced metric configuration, and shard map. The shard map is an
        array of shard objects. For each shard object, there is the hash key and
        sequence number ranges that the shard spans, and the IDs of any earlier
        shards that played in a role in creating the shard. Every record
        ingested in the stream is identified by a sequence number, which is
        assigned when the record is put into the stream.</p> <p>You can limit
        the number of shards returned by each call. For more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-retrieve-shards.html">Retrieving
        Shards from a Stream</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p>There are no guarantees about the chronological order
        shards returned. To process shards in chronological order, use the ID of
        the parent shard to track the lineage to the oldest shard.</p> <p>This
        operation has a limit of 10 transactions per second per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeStreamOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: ExclusiveStartShardId
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DescribeStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeStreamInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DescribeStreamConsumer:
    post:
      operationId: DescribeStreamConsumer
      description: <p>To get the description of a registered consumer, provide the ARN of
        the consumer. Alternatively, you can provide the ARN of the data stream
        and the name you gave the consumer when you registered it. You may also
        provide all three parameters, as long as they don't conflict with each
        other. If you don't know the name or ARN of the consumer that you want
        to describe, you can use the <a>ListStreamConsumers</a> operation to get
        a list of the descriptions of all the consumers that are currently
        registered with a given data stream.</p> <p>This operation has a limit
        of 20 transactions per second per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeStreamConsumerOutput"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DescribeStreamConsumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeStreamConsumerInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DescribeStreamSummary:
    post:
      operationId: DescribeStreamSummary
      description: <p>Provides a summarized description of the specified Kinesis data
        stream without the shard list.</p> <p>The information returned includes
        the stream name, Amazon Resource Name (ARN), status, record retention
        period, approximate creation time, monitoring, encryption details, and
        open shard count. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeStreamSummaryOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DescribeStreamSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeStreamSummaryInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.DisableEnhancedMonitoring:
    post:
      operationId: DisableEnhancedMonitoring
      description: Disables enhanced monitoring.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnhancedMonitoringOutput"
        "480":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.DisableEnhancedMonitoring
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisableEnhancedMonitoringInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.EnableEnhancedMonitoring:
    post:
      operationId: EnableEnhancedMonitoring
      description: Enables enhanced Kinesis data stream monitoring for shard-level metrics.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnhancedMonitoringOutput"
        "480":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.EnableEnhancedMonitoring
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnableEnhancedMonitoringInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.GetRecords:
    post:
      operationId: GetRecords
      description: <p>Gets data records from a Kinesis data stream's shard.</p> <p>Specify
        a shard iterator using the <code>ShardIterator</code> parameter. The
        shard iterator specifies the position in the shard from which you want
        to start reading data records sequentially. If there are no records
        available in the portion of the shard that the iterator points to,
        <a>GetRecords</a> returns an empty list. It might take multiple calls to
        get to a portion of the shard that contains records.</p> <p>You can
        scale by provisioning multiple shards per stream while considering
        service limits (for more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
        Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams
        Developer Guide</i>). Your application should have one thread per shard,
        each reading continuously from its stream. To read from a stream
        continually, call <a>GetRecords</a> in a loop. Use
        <a>GetShardIterator</a> to get the shard iterator to specify in the
        first <a>GetRecords</a> call. <a>GetRecords</a> returns a new shard
        iterator in <code>NextShardIterator</code>. Specify the shard iterator
        returned in <code>NextShardIterator</code> in subsequent calls to
        <a>GetRecords</a>. If the shard has been closed, the shard iterator
        can't return more data and <a>GetRecords</a> returns <code>null</code>
        in <code>NextShardIterator</code>. You can terminate the loop when the
        shard is closed, or when the shard iterator reaches the record with the
        sequence number or other attribute that marks it as the last record to
        process.</p> <p>Each data record can be up to 1 MiB in size, and each
        shard can read up to 2 MiB per second. You can ensure that your calls
        don't exceed the maximum supported size or throughput by using the
        <code>Limit</code> parameter to specify the maximum number of records
        that <a>GetRecords</a> can return. Consider your average record size
        when determining this limit. The maximum number of records that can be
        returned per call is 10,000.</p> <p>The size of the data returned by
        <a>GetRecords</a> varies depending on the utilization of the shard. The
        maximum size of data that <a>GetRecords</a> can return is 10 MiB. If a
        call returns this amount of data, subsequent calls made within the next
        5 seconds throw <code>ProvisionedThroughputExceededException</code>. If
        there is insufficient provisioned throughput on the stream, subsequent
        calls made within the next 1 second throw
        <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a>
        doesn't return any data when it throws an exception. For this reason, we
        recommend that you wait 1 second between calls to <a>GetRecords</a>.
        However, it's possible that the application will get exceptions for
        longer than 1 second.</p> <p>To detect whether the application is
        falling behind in processing, you can use the
        <code>MillisBehindLatest</code> response attribute. You can also monitor
        the stream using CloudWatch metrics and other mechanisms (see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html">Monitoring</a>
        in the <i>Amazon Kinesis Data Streams Developer Guide</i>).</p> <p>Each
        Amazon Kinesis record includes a value,
        <code>ApproximateArrivalTimestamp</code>, that is set when a stream
        successfully receives and stores a record. This is commonly referred to
        as a server-side time stamp, whereas a client-side time stamp is set
        when a data producer creates or sends the record to a stream (a data
        producer is any data source putting data records into a stream, for
        example with <a>PutRecords</a>). The time stamp has millisecond
        precision. There are no guarantees about the time stamp accuracy, or
        that the time stamp is always increasing. For example, records in a
        shard or across a stream might have time stamps that are out of
        order.</p> <p>This operation has a limit of five transactions per second
        per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRecordsOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "483":
          description: ExpiredIteratorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredIteratorException"
        "484":
          description: KMSDisabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSDisabledException"
        "485":
          description: KMSInvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSInvalidStateException"
        "486":
          description: KMSAccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSAccessDeniedException"
        "487":
          description: KMSNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSNotFoundException"
        "488":
          description: KMSOptInRequired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSOptInRequired"
        "489":
          description: KMSThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSThrottlingException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.GetRecords
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRecordsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.GetShardIterator:
    post:
      operationId: GetShardIterator
      description: <p>Gets an Amazon Kinesis shard iterator. A shard iterator expires 5
        minutes after it is returned to the requester.</p> <p>A shard iterator
        specifies the shard position from which to start reading data records
        sequentially. The position is specified using the sequence number of a
        data record in a shard. A sequence number is the identifier associated
        with every record ingested in the stream, and is assigned when a record
        is put into the stream. Each stream has one or more shards.</p> <p>You
        must specify the shard iterator type. For example, you can set the
        <code>ShardIteratorType</code> parameter to read exactly from the
        position denoted by a specific sequence number by using the
        <code>AT_SEQUENCE_NUMBER</code> shard iterator type. Alternatively, the
        parameter can read right after the sequence number by using the
        <code>AFTER_SEQUENCE_NUMBER</code> shard iterator type, using sequence
        numbers returned by earlier calls to <a>PutRecord</a>,
        <a>PutRecords</a>, <a>GetRecords</a>, or <a>DescribeStream</a>. In the
        request, you can specify the shard iterator type
        <code>AT_TIMESTAMP</code> to read records from an arbitrary point in
        time, <code>TRIM_HORIZON</code> to cause <code>ShardIterator</code> to
        point to the last untrimmed record in the shard in the system (the
        oldest data record in the shard), or <code>LATEST</code> so that you
        always read the most recent data in the shard. </p> <p>When you read
        repeatedly from a stream, use a <a>GetShardIterator</a> request to get
        the first shard iterator for use in your first <a>GetRecords</a> request
        and for subsequent reads use the shard iterator returned by the
        <a>GetRecords</a> request in <code>NextShardIterator</code>. A new shard
        iterator is returned by every <a>GetRecords</a> request in
        <code>NextShardIterator</code>, which you use in the
        <code>ShardIterator</code> parameter of the next <a>GetRecords</a>
        request. </p> <p>If a <a>GetShardIterator</a> request is made too often,
        you receive a <code>ProvisionedThroughputExceededException</code>. For
        more information about throughput limits, see <a>GetRecords</a>, and <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
        Limits</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p>If the shard is closed, <a>GetShardIterator</a>
        returns a valid iterator for the last sequence number of the shard. A
        shard can be closed as a result of using <a>SplitShard</a> or
        <a>MergeShards</a>.</p> <p> <a>GetShardIterator</a> has a limit of five
        transactions per second per account per open shard.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShardIteratorOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.GetShardIterator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetShardIteratorInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.IncreaseStreamRetentionPeriod:
    post:
      operationId: IncreaseStreamRetentionPeriod
      description: <p>Increases the Kinesis data stream's retention period, which is the
        length of time data records are accessible after they are added to the
        stream. The maximum value of a stream's retention period is 168 hours (7
        days).</p> <p>If you choose a longer stream retention period, this
        operation increases the time period during which records that have not
        yet expired are accessible. However, it does not make previous, expired
        data (older than the stream's previous retention period) accessible
        after the operation has been called. For example, if a stream's
        retention period is set to 24 hours and is increased to 168 hours, any
        data that is older than 24 hours remains inaccessible to consumer
        applications.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.IncreaseStreamRetentionPeriod
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncreaseStreamRetentionPeriodInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.ListShards:
    post:
      operationId: ListShards
      description: <p>Lists the shards in a stream and provides information about each
        shard. This operation has a limit of 100 transactions per second per
        data stream.</p> <important> <p>This API is a new operation that is used
        by the Amazon Kinesis Client Library (KCL). If you have a fine-grained
        IAM policy that only allows specific operations, you must update your
        policy to allow calls to this API. For more information, see <a
        href="https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html">Controlling
        Access to Amazon Kinesis Data Streams Resources Using IAM</a>.</p>
        </important>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListShardsOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ExpiredNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredNextTokenException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.ListShards
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListShardsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.ListStreamConsumers:
    post:
      operationId: ListStreamConsumers
      description: <p>Lists the consumers registered to receive data from a stream using
        enhanced fan-out, and provides information about each consumer.</p>
        <p>This operation has a limit of 10 transactions per second per
        account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListStreamConsumersOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ExpiredNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredNextTokenException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.ListStreamConsumers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListStreamConsumersInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.ListStreams:
    post:
      operationId: ListStreams
      description: <p>Lists your Kinesis data streams.</p> <p>The number of streams may be
        too large to return from a single call to <code>ListStreams</code>. You
        can limit the number of returned streams using the <code>Limit</code>
        parameter. If you do not specify a value for the <code>Limit</code>
        parameter, Kinesis Data Streams uses the default limit, which is
        currently 10.</p> <p>You can detect if there are more streams available
        to list by using the <code>HasMoreStreams</code> flag from the returned
        output. If there are more streams available, you can request more
        streams by using the name of the last stream returned by the
        <code>ListStreams</code> request in the
        <code>ExclusiveStartStreamName</code> parameter in a subsequent request
        to <code>ListStreams</code>. The group of stream names returned by the
        subsequent request is then added to the list. You can continue this
        process until all the stream names have been collected in the list. </p>
        <p> <a>ListStreams</a> has a limit of five transactions per second per
        account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListStreamsOutput"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: ExclusiveStartStreamName
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.ListStreams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListStreamsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.ListTagsForStream:
    post:
      operationId: ListTagsForStream
      description: Lists the tags for the specified Kinesis data stream. This operation has
        a limit of five transactions per second per account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForStreamOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.ListTagsForStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForStreamInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.MergeShards:
    post:
      operationId: MergeShards
      description: <p>Merges two adjacent shards in a Kinesis data stream and combines them
        into a single shard to reduce the stream's capacity to ingest and
        transport data. Two shards are considered adjacent if the union of the
        hash key ranges for the two shards form a contiguous set with no gaps.
        For example, if you have two shards, one with a hash key range of
        276...381 and the other with a hash key range of 382...454, then you
        could merge these two shards into a single shard that would have a hash
        key range of 276...454. After the merge, the single child shard receives
        data for all hash key values covered by the two parent shards.</p> <p>
        <code>MergeShards</code> is called when there is a need to reduce the
        overall capacity of a stream because of excess capacity that is not
        being used. You must specify the shard to be merged and the adjacent
        shard for a stream. For more information about merging shards, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html">Merge
        Two Shards</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p>If the stream is in the <code>ACTIVE</code> state, you
        can call <code>MergeShards</code>. If a stream is in the
        <code>CREATING</code>, <code>UPDATING</code>, or <code>DELETING</code>
        state, <code>MergeShards</code> returns a
        <code>ResourceInUseException</code>. If the specified stream does not
        exist, <code>MergeShards</code> returns a
        <code>ResourceNotFoundException</code>. </p> <p>You can use
        <a>DescribeStream</a> to check the state of the stream, which is
        returned in <code>StreamStatus</code>.</p> <p> <code>MergeShards</code>
        is an asynchronous operation. Upon receiving a <code>MergeShards</code>
        request, Amazon Kinesis Data Streams immediately returns a response and
        sets the <code>StreamStatus</code> to <code>UPDATING</code>. After the
        operation is completed, Kinesis Data Streams sets the
        <code>StreamStatus</code> to <code>ACTIVE</code>. Read and write
        operations continue to work while the stream is in the
        <code>UPDATING</code> state. </p> <p>You use <a>DescribeStream</a> to
        determine the shard IDs that are specified in the
        <code>MergeShards</code> request. </p> <p>If you try to operate on too
        many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>,
        <code>MergeShards</code>, or <a>SplitShard</a>, you receive a
        <code>LimitExceededException</code>. </p> <p> <code>MergeShards</code>
        has a limit of five transactions per second per account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.MergeShards
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeShardsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.PutRecord:
    post:
      operationId: PutRecord
      description: <p>Writes a single data record into an Amazon Kinesis data stream. Call
        <code>PutRecord</code> to send data into the stream for real-time
        ingestion and subsequent processing, one record at a time. Each shard
        can support writes up to 1,000 records per second, up to a maximum data
        write total of 1 MB per second.</p> <p>You must specify the name of the
        stream that captures, stores, and transports the data; a partition key;
        and the data blob itself.</p> <p>The data blob can be any type of data;
        for example, a segment from a log file, geographic/location data,
        website clickstream data, and so on.</p> <p>The partition key is used by
        Kinesis Data Streams to distribute data across shards. Kinesis Data
        Streams segregates the data records that belong to a stream into
        multiple shards, using the partition key associated with each data
        record to determine the shard to which a given data record belongs.</p>
        <p>Partition keys are Unicode strings, with a maximum length limit of
        256 characters for each key. An MD5 hash function is used to map
        partition keys to 128-bit integer values and to map associated data
        records to shards using the hash key ranges of the shards. You can
        override hashing the partition key to determine the shard by explicitly
        specifying a hash value using the <code>ExplicitHashKey</code>
        parameter. For more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
        Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p> <code>PutRecord</code> returns the shard ID of where
        the data record was placed and the sequence number that was assigned to
        the data record.</p> <p>Sequence numbers increase over time and are
        specific to a shard within a stream, not across all shards within a
        stream. To guarantee strictly increasing ordering, write serially to a
        shard and use the <code>SequenceNumberForOrdering</code> parameter. For
        more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
        Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p>If a <code>PutRecord</code> request cannot be
        processed because of insufficient provisioned throughput on the shard
        involved in the request, <code>PutRecord</code> throws
        <code>ProvisionedThroughputExceededException</code>. </p> <p>By default,
        data records are accessible for 24 hours from the time that they are
        added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or
        <a>DecreaseStreamRetentionPeriod</a> to modify this retention
        period.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutRecordOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "483":
          description: KMSDisabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSDisabledException"
        "484":
          description: KMSInvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSInvalidStateException"
        "485":
          description: KMSAccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSAccessDeniedException"
        "486":
          description: KMSNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSNotFoundException"
        "487":
          description: KMSOptInRequired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSOptInRequired"
        "488":
          description: KMSThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSThrottlingException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.PutRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutRecordInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.PutRecords:
    post:
      operationId: PutRecords
      description: '<p>Writes multiple data records into a Kinesis data stream in a single
        call (also referred to as a <code>PutRecords</code> request). Use this
        operation to send data into the stream for data ingestion and
        processing. </p> <p>Each <code>PutRecords</code> request can support up
        to 500 records. Each record in the request can be as large as 1 MB, up
        to a limit of 5 MB for the entire request, including partition keys.
        Each shard can support writes up to 1,000 records per second, up to a
        maximum data write total of 1 MB per second.</p> <p>You must specify the
        name of the stream that captures, stores, and transports the data; and
        an array of request <code>Records</code>, with each record in the array
        requiring a partition key and data blob. The record size limit applies
        to the total size of the partition key and data blob.</p> <p>The data
        blob can be any type of data; for example, a segment from a log file,
        geographic/location data, website clickstream data, and so on.</p>
        <p>The partition key is used by Kinesis Data Streams as input to a hash
        function that maps the partition key and associated data to a specific
        shard. An MD5 hash function is used to map partition keys to 128-bit
        integer values and to map associated data records to shards. As a result
        of this hashing mechanism, all data records with the same partition key
        map to the same shard within the stream. For more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
        Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p>Each record in the <code>Records</code> array may
        include an optional parameter, <code>ExplicitHashKey</code>, which
        overrides the partition key to shard mapping. This parameter allows a
        data producer to determine explicitly the shard where the record is
        stored. For more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords">Adding
        Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data
        Streams Developer Guide</i>.</p> <p>The <code>PutRecords</code> response
        includes an array of response <code>Records</code>. Each record in the
        response array directly correlates with a record in the request array
        using natural ordering, from the top to the bottom of the request and
        response. The response <code>Records</code> array always includes the
        same number of records as the request array.</p> <p>The response
        <code>Records</code> array includes both successfully and unsuccessfully
        processed records. Kinesis Data Streams attempts to process all records
        in each <code>PutRecords</code> request. A single record failure does
        not stop the processing of subsequent records.</p> <p>A successfully
        processed record includes <code>ShardId</code> and
        <code>SequenceNumber</code> values. The <code>ShardId</code> parameter
        identifies the shard in the stream where the record is stored. The
        <code>SequenceNumber</code> parameter is an identifier assigned to the
        put record, unique to all records in the stream.</p> <p>An
        unsuccessfully processed record includes <code>ErrorCode</code> and
        <code>ErrorMessage</code> values. <code>ErrorCode</code> reflects the
        type of error and can be one of the following values:
        <code>ProvisionedThroughputExceededException</code> or
        <code>InternalFailure</code>. <code>ErrorMessage</code> provides more
        detailed information about the
        <code>ProvisionedThroughputExceededException</code> exception including
        the account ID, stream name, and shard ID of the record that was
        throttled. For more information about partially successful responses,
        see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords">Adding
        Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data
        Streams Developer Guide</i>.</p> <p>By default, data records are
        accessible for 24 hours from the time that they are added to a stream.
        You can use <a>IncreaseStreamRetentionPeriod</a> or
        <a>DecreaseStreamRetentionPeriod</a> to modify this retention
        period.</p>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutRecordsOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "483":
          description: KMSDisabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSDisabledException"
        "484":
          description: KMSInvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSInvalidStateException"
        "485":
          description: KMSAccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSAccessDeniedException"
        "486":
          description: KMSNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSNotFoundException"
        "487":
          description: KMSOptInRequired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSOptInRequired"
        "488":
          description: KMSThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSThrottlingException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.PutRecords
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutRecordsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.RegisterStreamConsumer:
    post:
      operationId: RegisterStreamConsumer
      description: <p>Registers a consumer with a Kinesis data stream. When you use this
        operation, the consumer you register can read data from the stream at a
        rate of up to 2 MiB per second. This rate is unaffected by the total
        number of consumers that read from the same stream.</p> <p>You can
        register up to 5 consumers per stream. A given consumer can only be
        registered with one stream.</p> <p>This operation has a limit of five
        transactions per second per account.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterStreamConsumerOutput"
        "480":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.RegisterStreamConsumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterStreamConsumerInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.RemoveTagsFromStream:
    post:
      operationId: RemoveTagsFromStream
      description: <p>Removes tags from the specified Kinesis data stream. Removed tags are
        deleted and cannot be recovered after this operation successfully
        completes.</p> <p>If you specify a tag that does not exist, it is
        ignored.</p> <p> <a>RemoveTagsFromStream</a> has a limit of five
        transactions per second per account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.RemoveTagsFromStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveTagsFromStreamInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.SplitShard:
    post:
      operationId: SplitShard
      description: <p>Splits a shard into two new shards in the Kinesis data stream, to
        increase the stream's capacity to ingest and transport data.
        <code>SplitShard</code> is called when there is a need to increase the
        overall capacity of a stream because of an expected increase in the
        volume of data records being ingested. </p> <p>You can also use
        <code>SplitShard</code> when a shard appears to be approaching its
        maximum utilization; for example, the producers sending data into the
        specific shard are suddenly sending more than previously anticipated.
        You can also call <code>SplitShard</code> to increase stream capacity,
        so that more Kinesis Data Streams applications can simultaneously read
        data from the stream for real-time processing. </p> <p>You must specify
        the shard to be split and the new hash key, which is the position in the
        shard where the shard gets split in two. In many cases, the new hash key
        might be the average of the beginning and ending hash key, but it can be
        any hash key value in the range being mapped into the shard. For more
        information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html">Split
        a Shard</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>.</p> <p>You can use <a>DescribeStream</a> to determine the
        shard ID and hash key values for the <code>ShardToSplit</code> and
        <code>NewStartingHashKey</code> parameters that are specified in the
        <code>SplitShard</code> request.</p> <p> <code>SplitShard</code> is an
        asynchronous operation. Upon receiving a <code>SplitShard</code>
        request, Kinesis Data Streams immediately returns a response and sets
        the stream status to <code>UPDATING</code>. After the operation is
        completed, Kinesis Data Streams sets the stream status to
        <code>ACTIVE</code>. Read and write operations continue to work while
        the stream is in the <code>UPDATING</code> state. </p> <p>You can use
        <code>DescribeStream</code> to check the status of the stream, which is
        returned in <code>StreamStatus</code>. If the stream is in the
        <code>ACTIVE</code> state, you can call <code>SplitShard</code>. If a
        stream is in <code>CREATING</code> or <code>UPDATING</code> or
        <code>DELETING</code> states, <code>DescribeStream</code> returns a
        <code>ResourceInUseException</code>.</p> <p>If the specified stream does
        not exist, <code>DescribeStream</code> returns a
        <code>ResourceNotFoundException</code>. If you try to create more shards
        than are authorized for your account, you receive a
        <code>LimitExceededException</code>. </p> <p>For the default shard limit
        for an AWS account, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Kinesis
        Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer
        Guide</i>. To increase this limit, <a
        href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
        AWS Support</a>.</p> <p>If you try to operate on too many streams
        simultaneously using <a>CreateStream</a>, <a>DeleteStream</a>,
        <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a
        <code>LimitExceededException</code>. </p> <p> <code>SplitShard</code>
        has a limit of five transactions per second per account.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "482":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.SplitShard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SplitShardInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.StartStreamEncryption:
    post:
      operationId: StartStreamEncryption
      description: "<p>Enables or updates server-side encryption using an AWS KMS key for a
        specified stream. </p> <p>Starting encryption is an asynchronous
        operation. Upon receiving the request, Kinesis Data Streams returns
        immediately and sets the status of the stream to <code>UPDATING</code>.
        After the update is complete, Kinesis Data Streams sets the status of
        the stream back to <code>ACTIVE</code>. Updating or applying encryption
        normally takes a few seconds to complete, but it can take minutes. You
        can continue to read and write data to your stream while its status is
        <code>UPDATING</code>. Once the status of the stream is
        <code>ACTIVE</code>, encryption begins for records written to the
        stream. </p> <p>API Limits: You can successfully apply a new AWS KMS key
        for server-side encryption 25 times in a rolling 24-hour period.</p>
        <p>Note: It can take up to 5 seconds after the stream is in an
        <code>ACTIVE</code> status before all records written to the stream are
        encrypted. After you enable encryption, you can verify that encryption
        is applied by inspecting the API response from <code>PutRecord</code> or
        <code>PutRecords</code>.</p>"
      responses:
        "200":
          description: Success
        "480":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: KMSDisabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSDisabledException"
        "485":
          description: KMSInvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSInvalidStateException"
        "486":
          description: KMSAccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSAccessDeniedException"
        "487":
          description: KMSNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSNotFoundException"
        "488":
          description: KMSOptInRequired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSOptInRequired"
        "489":
          description: KMSThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSThrottlingException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.StartStreamEncryption
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartStreamEncryptionInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.StopStreamEncryption:
    post:
      operationId: StopStreamEncryption
      description: "<p>Disables server-side encryption for a specified stream. </p>
        <p>Stopping encryption is an asynchronous operation. Upon receiving the
        request, Kinesis Data Streams returns immediately and sets the status of
        the stream to <code>UPDATING</code>. After the update is complete,
        Kinesis Data Streams sets the status of the stream back to
        <code>ACTIVE</code>. Stopping encryption normally takes a few seconds to
        complete, but it can take minutes. You can continue to read and write
        data to your stream while its status is <code>UPDATING</code>. Once the
        status of the stream is <code>ACTIVE</code>, records written to the
        stream are no longer encrypted by Kinesis Data Streams. </p> <p>API
        Limits: You can successfully disable server-side encryption 25 times in
        a rolling 24-hour period. </p> <p>Note: It can take up to 5 seconds
        after the stream is in an <code>ACTIVE</code> status before all records
        written to the stream are no longer subject to encryption. After you
        disabled encryption, you can verify that encryption is not applied by
        inspecting the API response from <code>PutRecord</code> or
        <code>PutRecords</code>.</p>"
      responses:
        "200":
          description: Success
        "480":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.StopStreamEncryption
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopStreamEncryptionInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=Kinesis_20131202.UpdateShardCount:
    post:
      operationId: UpdateShardCount
      description: <p>Updates the shard count of the specified stream to the specified
        number of shards.</p> <p>Updating the shard count is an asynchronous
        operation. Upon receiving the request, Kinesis Data Streams returns
        immediately and sets the status of the stream to <code>UPDATING</code>.
        After the update is complete, Kinesis Data Streams sets the status of
        the stream back to <code>ACTIVE</code>. Depending on the size of the
        stream, the scaling action could take a few minutes to complete. You can
        continue to read and write data to your stream while its status is
        <code>UPDATING</code>.</p> <p>To update the shard count, Kinesis Data
        Streams performs splits or merges on individual shards. This can cause
        short-lived shards to be created, in addition to the final shards. We
        recommend that you double or halve the shard count, as this results in
        the fewest number of splits or merges.</p> <p>This operation has the
        following default limits. By default, you cannot do the following:</p>
        <ul> <li> <p>Scale more than twice per rolling 24-hour period per
        stream</p> </li> <li> <p>Scale up to more than double your current shard
        count for a stream</p> </li> <li> <p>Scale down below half your current
        shard count for a stream</p> </li> <li> <p>Scale up to more than 500
        shards in a stream</p> </li> <li> <p>Scale a stream with more than 500
        shards down unless the result is less than 500 shards</p> </li> <li>
        <p>Scale up to more than the shard limit for your account</p> </li>
        </ul> <p>For the default limits for an AWS account, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
        Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To
        request an increase in the call rate limit, the shard limit for this
        API, or your overall shard limit, use the <a
        href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits
        form</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateShardCountOutput"
        "480":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Kinesis_20131202.UpdateShardCount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateShardCountInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://kinesis.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Kinesis multi-region endpoint
  - url: https://kinesis.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Kinesis multi-region endpoint
  - url: http://kinesis.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Kinesis endpoint for China (Beijing) and China (Ningxia)
  - url: https://kinesis.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Kinesis endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddTagsToStreamInput:
      type: object
      required:
        - StreamName
        - Tags
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        Tags:
          $ref: "#/components/schemas/TagMap"
      description: Represents the input for <code>AddTagsToStream</code>.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The requested resource could not be found. The stream might not be
        specified correctly.
    ResourceInUseException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The resource is not available for this operation. For successful
        operation, the resource must be in the <code>ACTIVE</code> state.
    InvalidArgumentException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: A specified parameter exceeds its restrictions, is not supported, or
        can't be used. For more information, see the returned message.
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: "The requested resource exceeds the maximum number allowed, or the
        number of concurrent stream requests exceeds the maximum number allowed.
        "
    CreateStreamInput:
      type: object
      required:
        - StreamName
        - ShardCount
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ShardCount:
          $ref: "#/components/schemas/PositiveIntegerObject"
      description: Represents the input for <code>CreateStream</code>.
    DecreaseStreamRetentionPeriodInput:
      type: object
      required:
        - StreamName
        - RetentionPeriodHours
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        RetentionPeriodHours:
          $ref: "#/components/schemas/RetentionPeriodHours"
      description: Represents the input for <a>DecreaseStreamRetentionPeriod</a>.
    DeleteStreamInput:
      type: object
      required:
        - StreamName
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        EnforceConsumerDeletion:
          $ref: "#/components/schemas/BooleanObject"
      description: Represents the input for <a>DeleteStream</a>.
    DeregisterStreamConsumerInput:
      type: object
      properties:
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
        ConsumerName:
          $ref: "#/components/schemas/ConsumerName"
        ConsumerARN:
          $ref: "#/components/schemas/ConsumerARN"
    DescribeLimitsOutput:
      type: object
      required:
        - ShardLimit
        - OpenShardCount
      properties:
        ShardLimit:
          $ref: "#/components/schemas/ShardCountObject"
        OpenShardCount:
          $ref: "#/components/schemas/ShardCountObject"
    DescribeLimitsInput:
      type: object
      properties: {}
    DescribeStreamOutput:
      type: object
      required:
        - StreamDescription
      properties:
        StreamDescription:
          $ref: "#/components/schemas/StreamDescription"
      description: Represents the output for <code>DescribeStream</code>.
    DescribeStreamInput:
      type: object
      required:
        - StreamName
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        Limit:
          $ref: "#/components/schemas/DescribeStreamInputLimit"
        ExclusiveStartShardId:
          $ref: "#/components/schemas/ShardId"
      description: Represents the input for <code>DescribeStream</code>.
    DescribeStreamConsumerOutput:
      type: object
      required:
        - ConsumerDescription
      properties:
        ConsumerDescription:
          $ref: "#/components/schemas/ConsumerDescription"
    DescribeStreamConsumerInput:
      type: object
      properties:
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
        ConsumerName:
          $ref: "#/components/schemas/ConsumerName"
        ConsumerARN:
          $ref: "#/components/schemas/ConsumerARN"
    DescribeStreamSummaryOutput:
      type: object
      required:
        - StreamDescriptionSummary
      properties:
        StreamDescriptionSummary:
          $ref: "#/components/schemas/StreamDescriptionSummary"
    DescribeStreamSummaryInput:
      type: object
      required:
        - StreamName
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
    EnhancedMonitoringOutput:
      type: object
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        CurrentShardLevelMetrics:
          $ref: "#/components/schemas/MetricsNameList"
        DesiredShardLevelMetrics:
          $ref: "#/components/schemas/MetricsNameList"
      description: Represents the output for <a>EnableEnhancedMonitoring</a> and
        <a>DisableEnhancedMonitoring</a>.
    DisableEnhancedMonitoringInput:
      type: object
      required:
        - StreamName
        - ShardLevelMetrics
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ShardLevelMetrics:
          $ref: "#/components/schemas/MetricsNameList"
      description: Represents the input for <a>DisableEnhancedMonitoring</a>.
    EnableEnhancedMonitoringInput:
      type: object
      required:
        - StreamName
        - ShardLevelMetrics
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ShardLevelMetrics:
          $ref: "#/components/schemas/MetricsNameList"
      description: Represents the input for <a>EnableEnhancedMonitoring</a>.
    GetRecordsOutput:
      type: object
      required:
        - Records
      properties:
        Records:
          $ref: "#/components/schemas/RecordList"
        NextShardIterator:
          $ref: "#/components/schemas/ShardIterator"
        MillisBehindLatest:
          $ref: "#/components/schemas/MillisBehindLatest"
      description: Represents the output for <a>GetRecords</a>.
    GetRecordsInput:
      type: object
      required:
        - ShardIterator
      properties:
        ShardIterator:
          $ref: "#/components/schemas/ShardIterator"
        Limit:
          $ref: "#/components/schemas/GetRecordsInputLimit"
      description: Represents the input for <a>GetRecords</a>.
    ProvisionedThroughputExceededException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The request rate for the stream is too high, or the requested data is
        too large for the available throughput. Reduce the frequency or size of
        your requests. For more information, see <a
        href="http://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
        Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>,
        and <a
        href="http://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
        Retries and Exponential Backoff in AWS</a> in the <i>AWS General
        Reference</i>.
    ExpiredIteratorException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The provided iterator exceeds the maximum age allowed.
    KMSDisabledException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The request was rejected because the specified customer master key (CMK)
        isn't enabled.
    KMSInvalidStateException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The request was rejected because the state of the specified resource
        isn't valid for this request. For more information, see <a
        href="http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
        Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key
        Management Service Developer Guide</i>.
    KMSAccessDeniedException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The ciphertext references a key that doesn't exist or that you don't
        have access to.
    KMSNotFoundException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The request was rejected because the specified entity or resource can't
        be found.
    KMSOptInRequired:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The AWS access key ID needs a subscription for the service.
    KMSThrottlingException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The request was denied due to request throttling. For more information
        about throttling, see <a
        href="http://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
        in the <i>AWS Key Management Service Developer Guide</i>.
    GetShardIteratorOutput:
      type: object
      properties:
        ShardIterator:
          $ref: "#/components/schemas/ShardIterator"
      description: Represents the output for <code>GetShardIterator</code>.
    GetShardIteratorInput:
      type: object
      required:
        - StreamName
        - ShardId
        - ShardIteratorType
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ShardId:
          $ref: "#/components/schemas/ShardId"
        ShardIteratorType:
          $ref: "#/components/schemas/ShardIteratorType"
        StartingSequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        Timestamp:
          $ref: "#/components/schemas/Timestamp"
      description: Represents the input for <code>GetShardIterator</code>.
    IncreaseStreamRetentionPeriodInput:
      type: object
      required:
        - StreamName
        - RetentionPeriodHours
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        RetentionPeriodHours:
          $ref: "#/components/schemas/RetentionPeriodHours"
      description: Represents the input for <a>IncreaseStreamRetentionPeriod</a>.
    ListShardsOutput:
      type: object
      properties:
        Shards:
          $ref: "#/components/schemas/ShardList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListShardsInput:
      type: object
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        ExclusiveStartShardId:
          $ref: "#/components/schemas/ShardId"
        MaxResults:
          $ref: "#/components/schemas/ListShardsInputLimit"
        StreamCreationTimestamp:
          $ref: "#/components/schemas/Timestamp"
    ExpiredNextTokenException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
      description: The pagination token passed to the operation is expired.
    ListStreamConsumersOutput:
      type: object
      properties:
        Consumers:
          $ref: "#/components/schemas/ConsumerList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListStreamConsumersInput:
      type: object
      required:
        - StreamARN
      properties:
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        MaxResults:
          $ref: "#/components/schemas/ListStreamConsumersInputLimit"
        StreamCreationTimestamp:
          $ref: "#/components/schemas/Timestamp"
    ListStreamsOutput:
      type: object
      required:
        - StreamNames
        - HasMoreStreams
      properties:
        StreamNames:
          $ref: "#/components/schemas/StreamNameList"
        HasMoreStreams:
          $ref: "#/components/schemas/BooleanObject"
      description: Represents the output for <code>ListStreams</code>.
    ListStreamsInput:
      type: object
      properties:
        Limit:
          $ref: "#/components/schemas/ListStreamsInputLimit"
        ExclusiveStartStreamName:
          $ref: "#/components/schemas/StreamName"
      description: Represents the input for <code>ListStreams</code>.
    ListTagsForStreamOutput:
      type: object
      required:
        - Tags
        - HasMoreTags
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
        HasMoreTags:
          $ref: "#/components/schemas/BooleanObject"
      description: Represents the output for <code>ListTagsForStream</code>.
    ListTagsForStreamInput:
      type: object
      required:
        - StreamName
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ExclusiveStartTagKey:
          $ref: "#/components/schemas/TagKey"
        Limit:
          $ref: "#/components/schemas/ListTagsForStreamInputLimit"
      description: Represents the input for <code>ListTagsForStream</code>.
    MergeShardsInput:
      type: object
      required:
        - StreamName
        - ShardToMerge
        - AdjacentShardToMerge
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ShardToMerge:
          $ref: "#/components/schemas/ShardId"
        AdjacentShardToMerge:
          $ref: "#/components/schemas/ShardId"
      description: Represents the input for <code>MergeShards</code>.
    PutRecordOutput:
      type: object
      required:
        - ShardId
        - SequenceNumber
      properties:
        ShardId:
          $ref: "#/components/schemas/ShardId"
        SequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
      description: Represents the output for <code>PutRecord</code>.
    PutRecordInput:
      type: object
      required:
        - StreamName
        - Data
        - PartitionKey
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        Data:
          $ref: "#/components/schemas/Data"
        PartitionKey:
          $ref: "#/components/schemas/PartitionKey"
        ExplicitHashKey:
          $ref: "#/components/schemas/HashKey"
        SequenceNumberForOrdering:
          $ref: "#/components/schemas/SequenceNumber"
      description: Represents the input for <code>PutRecord</code>.
    PutRecordsOutput:
      type: object
      required:
        - Records
      properties:
        FailedRecordCount:
          $ref: "#/components/schemas/PositiveIntegerObject"
        Records:
          $ref: "#/components/schemas/PutRecordsResultEntryList"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
      description: " <code>PutRecords</code> results."
    PutRecordsInput:
      type: object
      required:
        - Records
        - StreamName
      properties:
        Records:
          $ref: "#/components/schemas/PutRecordsRequestEntryList"
        StreamName:
          $ref: "#/components/schemas/StreamName"
      description: A <code>PutRecords</code> request.
    RegisterStreamConsumerOutput:
      type: object
      required:
        - Consumer
      properties:
        Consumer:
          $ref: "#/components/schemas/Consumer"
    RegisterStreamConsumerInput:
      type: object
      required:
        - StreamARN
        - ConsumerName
      properties:
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
        ConsumerName:
          $ref: "#/components/schemas/ConsumerName"
    RemoveTagsFromStreamInput:
      type: object
      required:
        - StreamName
        - TagKeys
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        TagKeys:
          $ref: "#/components/schemas/TagKeyList"
      description: Represents the input for <code>RemoveTagsFromStream</code>.
    SplitShardInput:
      type: object
      required:
        - StreamName
        - ShardToSplit
        - NewStartingHashKey
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        ShardToSplit:
          $ref: "#/components/schemas/ShardId"
        NewStartingHashKey:
          $ref: "#/components/schemas/HashKey"
      description: Represents the input for <code>SplitShard</code>.
    StartStreamEncryptionInput:
      type: object
      required:
        - StreamName
        - EncryptionType
        - KeyId
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
        KeyId:
          $ref: "#/components/schemas/KeyId"
    StopStreamEncryptionInput:
      type: object
      required:
        - StreamName
        - EncryptionType
        - KeyId
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
        KeyId:
          $ref: "#/components/schemas/KeyId"
    UpdateShardCountOutput:
      type: object
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        CurrentShardCount:
          $ref: "#/components/schemas/PositiveIntegerObject"
        TargetShardCount:
          $ref: "#/components/schemas/PositiveIntegerObject"
    UpdateShardCountInput:
      type: object
      required:
        - StreamName
        - TargetShardCount
        - ScalingType
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        TargetShardCount:
          $ref: "#/components/schemas/PositiveIntegerObject"
        ScalingType:
          $ref: "#/components/schemas/ScalingType"
    StreamName:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 1
      maxLength: 128
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    BooleanObject:
      type: boolean
    ConsumerName:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 1
      maxLength: 128
    ConsumerARN:
      type: string
      pattern: ^(arn):aws.*:kinesis:.*:\d{12}:.*stream\/[a-zA-Z0-9_.-]+\/consumer\/[a-zA-Z0-9_.-]+:[0-9]+
      minLength: 1
      maxLength: 2048
    ConsumerStatus:
      type: string
      enum:
        - CREATING
        - DELETING
        - ACTIVE
    Timestamp:
      type: string
      format: date-time
    Consumer:
      type: object
      required:
        - ConsumerName
        - ConsumerARN
        - ConsumerStatus
        - ConsumerCreationTimestamp
      properties:
        ConsumerName:
          $ref: "#/components/schemas/ConsumerName"
        ConsumerARN:
          $ref: "#/components/schemas/ConsumerARN"
        ConsumerStatus:
          $ref: "#/components/schemas/ConsumerStatus"
        ConsumerCreationTimestamp:
          $ref: "#/components/schemas/Timestamp"
      description: An object that represents the details of the consumer you registered.
    ConsumerCountObject:
      type: integer
      minimum: 0
      maximum: 1000000
    StreamARN:
      type: string
      pattern: arn:aws.*:kinesis:.*:\d{12}:stream/.*
      minLength: 1
      maxLength: 2048
    ConsumerDescription:
      type: object
      required:
        - ConsumerName
        - ConsumerARN
        - ConsumerStatus
        - ConsumerCreationTimestamp
        - StreamARN
      properties:
        ConsumerName:
          $ref: "#/components/schemas/ConsumerName"
        ConsumerARN:
          $ref: "#/components/schemas/ConsumerARN"
        ConsumerStatus:
          $ref: "#/components/schemas/ConsumerStatus"
        ConsumerCreationTimestamp:
          $ref: "#/components/schemas/Timestamp"
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
      description: An object that represents the details of a registered consumer.
    ConsumerList:
      type: array
      items:
        $ref: "#/components/schemas/Consumer"
    PositiveIntegerObject:
      type: integer
      minimum: 1
      maximum: 100000
    Data:
      type: string
      minLength: 0
      maxLength: 1048576
    RetentionPeriodHours:
      type: integer
      minimum: 1
      maximum: 168
    ShardCountObject:
      type: integer
      minimum: 0
      maximum: 1000000
    DescribeStreamInputLimit:
      type: integer
      minimum: 1
      maximum: 10000
    ShardId:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 1
      maxLength: 128
    StreamDescription:
      type: object
      required:
        - StreamName
        - StreamARN
        - StreamStatus
        - Shards
        - HasMoreShards
        - RetentionPeriodHours
        - StreamCreationTimestamp
        - EnhancedMonitoring
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
        StreamStatus:
          $ref: "#/components/schemas/StreamStatus"
        Shards:
          $ref: "#/components/schemas/ShardList"
        HasMoreShards:
          $ref: "#/components/schemas/BooleanObject"
        RetentionPeriodHours:
          $ref: "#/components/schemas/RetentionPeriodHours"
        StreamCreationTimestamp:
          $ref: "#/components/schemas/Timestamp"
        EnhancedMonitoring:
          $ref: "#/components/schemas/EnhancedMonitoringList"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
        KeyId:
          $ref: "#/components/schemas/KeyId"
      description: Represents the output for <a>DescribeStream</a>.
    StreamDescriptionSummary:
      type: object
      required:
        - StreamName
        - StreamARN
        - StreamStatus
        - RetentionPeriodHours
        - StreamCreationTimestamp
        - EnhancedMonitoring
        - OpenShardCount
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        StreamARN:
          $ref: "#/components/schemas/StreamARN"
        StreamStatus:
          $ref: "#/components/schemas/StreamStatus"
        RetentionPeriodHours:
          $ref: "#/components/schemas/PositiveIntegerObject"
        StreamCreationTimestamp:
          $ref: "#/components/schemas/Timestamp"
        EnhancedMonitoring:
          $ref: "#/components/schemas/EnhancedMonitoringList"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
        KeyId:
          $ref: "#/components/schemas/KeyId"
        OpenShardCount:
          $ref: "#/components/schemas/ShardCountObject"
        ConsumerCount:
          $ref: "#/components/schemas/ConsumerCountObject"
      description: "Represents the output for <a>DescribeStreamSummary</a> "
    MetricsNameList:
      type: array
      items:
        $ref: "#/components/schemas/MetricsName"
      minItems: 1
      maxItems: 7
    EncryptionType:
      type: string
      enum:
        - NONE
        - KMS
    EnhancedMetrics:
      type: object
      properties:
        ShardLevelMetrics:
          $ref: "#/components/schemas/MetricsNameList"
      description: Represents enhanced metrics types.
    EnhancedMonitoringList:
      type: array
      items:
        $ref: "#/components/schemas/EnhancedMetrics"
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    ShardIterator:
      type: string
      minLength: 1
      maxLength: 512
    GetRecordsInputLimit:
      type: integer
      minimum: 1
      maximum: 10000
    RecordList:
      type: array
      items:
        $ref: "#/components/schemas/Record"
    MillisBehindLatest:
      type: integer
      minimum: 0
    ShardIteratorType:
      type: string
      enum:
        - AT_SEQUENCE_NUMBER
        - AFTER_SEQUENCE_NUMBER
        - TRIM_HORIZON
        - LATEST
        - AT_TIMESTAMP
    SequenceNumber:
      type: string
      pattern: 0|([1-9]\d{0,128})
    HashKey:
      type: string
      pattern: 0|([1-9]\d{0,38})
    HashKeyRange:
      type: object
      required:
        - StartingHashKey
        - EndingHashKey
      properties:
        StartingHashKey:
          $ref: "#/components/schemas/HashKey"
        EndingHashKey:
          $ref: "#/components/schemas/HashKey"
      description: The range of possible hash key values for the shard, which is a set of
        ordered contiguous positive integers.
    InternalFailureException:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/ErrorMessage"
    KeyId:
      type: string
      minLength: 1
      maxLength: 2048
    NextToken:
      type: string
      minLength: 1
      maxLength: 1048576
    ListShardsInputLimit:
      type: integer
      minimum: 1
      maximum: 10000
    ShardList:
      type: array
      items:
        $ref: "#/components/schemas/Shard"
    ListStreamConsumersInputLimit:
      type: integer
      minimum: 1
      maximum: 10000
    ListStreamsInputLimit:
      type: integer
      minimum: 1
      maximum: 10000
    StreamNameList:
      type: array
      items:
        $ref: "#/components/schemas/StreamName"
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    ListTagsForStreamInputLimit:
      type: integer
      minimum: 1
      maximum: 50
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 0
    MetricsName:
      type: string
      enum:
        - IncomingBytes
        - IncomingRecords
        - OutgoingBytes
        - OutgoingRecords
        - WriteProvisionedThroughputExceeded
        - ReadProvisionedThroughputExceeded
        - IteratorAgeMilliseconds
        - ALL
    PartitionKey:
      type: string
      minLength: 1
      maxLength: 256
    PutRecordsRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutRecordsRequestEntry"
      minItems: 1
      maxItems: 500
    PutRecordsResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutRecordsResultEntry"
      minItems: 1
      maxItems: 500
    PutRecordsRequestEntry:
      type: object
      required:
        - Data
        - PartitionKey
      properties:
        Data:
          $ref: "#/components/schemas/Data"
        ExplicitHashKey:
          $ref: "#/components/schemas/HashKey"
        PartitionKey:
          $ref: "#/components/schemas/PartitionKey"
      description: Represents the output for <code>PutRecords</code>.
    PutRecordsResultEntry:
      type: object
      properties:
        SequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        ShardId:
          $ref: "#/components/schemas/ShardId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Represents the result of an individual record from a
        <code>PutRecords</code> request. A record that is successfully added to
        a stream includes <code>SequenceNumber</code> and <code>ShardId</code>
        in the result. A record that fails to be added to the stream includes
        <code>ErrorCode</code> and <code>ErrorMessage</code> in the result.
    Record:
      type: object
      required:
        - SequenceNumber
        - Data
        - PartitionKey
      properties:
        SequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        ApproximateArrivalTimestamp:
          $ref: "#/components/schemas/Timestamp"
        Data:
          $ref: "#/components/schemas/Data"
        PartitionKey:
          $ref: "#/components/schemas/PartitionKey"
        EncryptionType:
          $ref: "#/components/schemas/EncryptionType"
      description: The unit of data of the Kinesis data stream, which is composed of a
        sequence number, a partition key, and a data blob.
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
      maxItems: 50
    ScalingType:
      type: string
      enum:
        - UNIFORM_SCALING
    SequenceNumberRange:
      type: object
      required:
        - StartingSequenceNumber
      properties:
        StartingSequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        EndingSequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
      description: The range of possible sequence numbers for the shard.
    Shard:
      type: object
      required:
        - ShardId
        - HashKeyRange
        - SequenceNumberRange
      properties:
        ShardId:
          $ref: "#/components/schemas/ShardId"
        ParentShardId:
          $ref: "#/components/schemas/ShardId"
        AdjacentParentShardId:
          $ref: "#/components/schemas/ShardId"
        HashKeyRange:
          $ref: "#/components/schemas/HashKeyRange"
        SequenceNumberRange:
          $ref: "#/components/schemas/SequenceNumberRange"
      description: A uniquely identified group of data records in a Kinesis data stream.
    StartingPosition:
      type: object
      required:
        - Type
      properties:
        Type:
          $ref: "#/components/schemas/ShardIteratorType"
        SequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        Timestamp:
          $ref: "#/components/schemas/Timestamp"
    StreamStatus:
      type: string
      enum:
        - CREATING
        - DELETING
        - ACTIVE
        - UPDATING
    SubscribeToShardEvent:
      type: object
      required:
        - Records
        - ContinuationSequenceNumber
        - MillisBehindLatest
      properties:
        Records:
          $ref: "#/components/schemas/RecordList"
        ContinuationSequenceNumber:
          $ref: "#/components/schemas/SequenceNumber"
        MillisBehindLatest:
          $ref: "#/components/schemas/MillisBehindLatest"
      description: "After you call <a>SubscribeToShard</a>, Kinesis Data Streams sends
        events of this type to your consumer. "
    SubscribeToShardEventStream:
      type: object
      required:
        - SubscribeToShardEvent
      properties:
        SubscribeToShardEvent:
          $ref: "#/components/schemas/SubscribeToShardEvent"
    SubscribeToShardInput:
      type: object
      required:
        - ConsumerARN
        - ShardId
        - StartingPosition
      properties:
        ConsumerARN:
          $ref: "#/components/schemas/ConsumerARN"
        ShardId:
          $ref: "#/components/schemas/ShardId"
        StartingPosition:
          $ref: "#/components/schemas/StartingPosition"
    SubscribeToShardOutput:
      type: object
      required:
        - EventStream
      properties:
        EventStream:
          $ref: "#/components/schemas/SubscribeToShardEventStream"
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: Metadata assigned to the stream, consisting of a key-value pair.
