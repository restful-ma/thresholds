openapi: 3.0.0
info:
  contact:
    x-twitter: halo
  description: API that provides statistical data about Players and Matches.
  title: Stats
  version: "1.0"
  x-apisguru-categories:
    - entertainment
  x-logo:
    url: https://twitter.com/halo/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://developer.haloapi.com/docs/services/58acdf27e2f7f71ad0dad84b/export?DocumentFormat=Swagger
      version: "2.0"
  x-providerName: haloapi.com
  x-serviceName: stats
security:
  - apiKeyHeader: []
  - apiKeyQuery: []
tags: []
paths:
  "/h5/arena/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match with the Arena Game
        Mode.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 12, 2018:</strong></p>
            <ul>
                <li>Updated the documentation for "PlayerScore".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Post-Game Carnage Report: Arena" to "Halo 5 - Match Result - Arena".</li>
                <li>Removed "{title}" Request Parameter.</li>
                <li>Updated the documentation for "GameVariantResourceId" and "MapVariantResourceId" to reference the UGC API.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 16, 2016:</strong></p>
            <ul>
                <li>Documented HTTP 503 Response Code.</li>
                <li>Added documentation for the "MatchSpeedWinAmount", "ObjectivesCompletedAmount", and "BoostData" fields.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added documentation for the "GameVariantResourceId", "MapVariantResourceId", and "PlayerScore" fields.</li>
                <li>Updated the documentation for the "MapVariantId" and "GameVariantId" fields with the recommendation of using the "MapVariantResourceId" and "GameVariantResourceId" fields, respectively.</li>
            </ul>
        </div>
      operationId: Halo-5-Match-Result-Arena
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    GameBaseVariantId: guid
                    GameVariantId: guid
                    GameVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 2
                    IsMatchOver: boolean
                    IsTeamGame: boolean
                    MapId: guid
                    MapVariantId: guid
                    MapVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 3
                    PlayerStats:
                      - AvgLifeTimeOfPlayer: string
                        BoostData:
                          CardConsumed: bool
                          DefinitionId: guid
                        CreditsEarned:
                          BoostAmount: int
                          PlayerRankAmount: int
                          Result: int
                          SpartanRankModifier: double
                          TimePlayedAmount: double
                          TotalCreditsEarned: int
                        CurrentCsr:
                          Csr: int
                          DesignationId: int
                          PercentToNextTier: int
                          Rank: int
                          Tier: int
                        DNF: boolean
                        DestroyedEnemyVehicles:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        EnemyKills:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        FlexibleStats:
                          ImpulseStatCounts:
                            - Count: int
                              Id: guid
                          ImpulseTimelapses:
                            - Id: guid
                              Timelapse: string
                          MedalStatCounts:
                            - Count: int
                              Id: guid
                          MedalTimelapses:
                            - Id: guid
                              Timelapse: string
                        Impulses:
                          - Count: int
                            Id: int
                        KilledByOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        KilledOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        MeasurementMatchesLeft: int
                        MedalAwards:
                          - Count: int
                            MedalId: int
                        MetaCommendationDeltas:
                          - Id: guid
                            MetRequirements:
                              - Data1: int
                                Data2: int
                                Data3: int
                                Data4: int
                            PreviousMetRequirements:
                              - Data1: int
                                Data2: int
                                Data3: int
                                Data4: int
                        Player:
                          Gamertag: string
                          Xuid: null
                        PlayerScore: int
                        PostMatchRatings: null
                        PreMatchRatings: null
                        PreviousCsr:
                          Csr: int
                          DesignationId: int
                          PercentToNextTier: int
                          Rank: int
                          Tier: int
                        ProgressiveCommendationDeltas:
                          - Id: guid
                            PreviousProgress: int
                            Progress: int
                        Rank: int
                        RewardSets:
                          - CommendationLevelId: guid
                            CommendationSource: guid
                            RewardSet: guid
                            RewardSourceType: int
                            SpartanRankSource: int
                        TeamId: int
                        TotalAssassinations: int
                        TotalAssists: int
                        TotalDeaths: int
                        TotalGamesCompleted: int
                        TotalGamesLost: int
                        TotalGamesTied: int
                        TotalGamesWon: int
                        TotalGrenadeDamage: double
                        TotalGrenadeKills: int
                        TotalGroundPoundDamage: double
                        TotalGroundPoundKills: int
                        TotalHeadshots: int
                        TotalKills: int
                        TotalMeleeDamage: double
                        TotalMeleeKills: int
                        TotalPowerWeaponDamage: double
                        TotalPowerWeaponGrabs: int
                        TotalPowerWeaponKills: int
                        TotalPowerWeaponPossessionTime: string
                        TotalShotsFired: int
                        TotalShotsLanded: int
                        TotalShoulderBashDamage: double
                        TotalShoulderBashKills: int
                        TotalSpartanKills: int
                        TotalTimePlayed: string
                        TotalWeaponDamage: double
                        WeaponStats:
                          - TotalDamageDealt: double
                            TotalHeadshots: int
                            TotalKills: int
                            TotalPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            WeaponId:
                              Attachments:
                                - int
                              StockId: int
                        WeaponWithMostKills:
                          TotalDamageDealt: double
                          TotalHeadshots: int
                          TotalKills: int
                          TotalPossessionTime: string
                          TotalShotsFired: int
                          TotalShotsLanded: int
                          WeaponId:
                            Attachments:
                              - int
                            StockId: int
                        XpInfo:
                          BoostAmount: int
                          MatchSpeedWinAmount: int
                          ObjectivesCompletedAmount: int
                          PerformanceXP: int
                          PlayerRankXPAward: int
                          PlayerTimePerformanceXPAward: int
                          PrevSpartanRank: int
                          PrevTotalXP: int
                          SpartanRank: int
                          SpartanRankMatchXPScalar: double
                          TotalXP: int
                    PlaylistId: guid
                    SeasonId: guid
                    TeamStats:
                      - Rank: int
                        RoundStats:
                          - Rank: int
                            RoundNumber: int
                            Score: uint32
                        Score: uint32
                        TeamId: int
                    TotalDuration: string
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Match Result - Arena
  "/h5/campaign/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match with the Campaign Game
        Mode.</p>

        <p>Every time a player plays a portion of a Campaign Mission, a Match will be generated whether the player finishes the Mission or not. If the "Match" ends because the Mission was completed, this will be indicated in the response.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Post-Game Carnage Report: Campaign" to "Halo 5 - Match Result - Campaign".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 16, 2016:</strong></p>
            <ul>
                <li>Documented HTTP 503 Response Code.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added documentation for the "GameVariantResourceId", "MapVariantResourceId", and "PlayerScore" fields.</li>
            </ul>
        </div>
      operationId: Halo-5-Match-Result-Campaign
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    Difficulty: int
                    GameBaseVariantId: guid
                    GameVariantId: guid
                    GameVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: int
                    IsMatchOver: boolean
                    IsTeamGame: boolean
                    MapId: guid
                    MapVariantId: guid
                    MapVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: int
                    MissionCompleted: boolean
                    PlayerStats:
                      - AvgLifeTimeOfPlayer: string
                        BiggestKillScore: int
                        CharacterIndex: null
                        DNF: boolean
                        DestroyedEnemyVehicles:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        EnemyKills:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        FlexibleStats:
                          ImpulseStatCounts:
                            - Count: int
                              Id: guid
                          ImpulseTimelapses:
                            - Id: guid
                              Timelapse: string
                          MedalStatCounts:
                            - Count: int
                              Id: guid
                          MedalTimelapses:
                            - Id: guid
                              Timelapse: string
                        Impulses:
                          - Count: int
                            Id: int
                        MedalAwards:
                          - Count: int
                            MedalId: int
                        Player:
                          Gamertag: string
                          Xuid: null
                        PlayerScore: null
                        PostMatchRatings: null
                        PreMatchRatings: null
                        Rank: int
                        Score: uint32
                        TeamId: int
                        TotalAssassinations: int
                        TotalAssists: int
                        TotalDeaths: int
                        TotalGamesCompleted: int
                        TotalGamesLost: int
                        TotalGamesTied: int
                        TotalGamesWon: int
                        TotalGrenadeDamage: double
                        TotalGrenadeKills: int
                        TotalGroundPoundDamage: double
                        TotalGroundPoundKills: int
                        TotalHeadshots: int
                        TotalKills: int
                        TotalMeleeDamage: double
                        TotalMeleeKills: int
                        TotalPowerWeaponDamage: double
                        TotalPowerWeaponGrabs: int
                        TotalPowerWeaponKills: int
                        TotalPowerWeaponPossessionTime: string
                        TotalShotsFired: int
                        TotalShotsLanded: int
                        TotalShoulderBashDamage: double
                        TotalShoulderBashKills: int
                        TotalSpartanKills: int
                        TotalTimePlayed: string
                        TotalWeaponDamage: double
                        WeaponStats:
                          - TotalDamageDealt: double
                            TotalHeadshots: int
                            TotalKills: int
                            TotalPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            WeaponId:
                              Attachments:
                                - int
                              StockId: int
                        WeaponWithMostKills:
                          TotalDamageDealt: double
                          TotalHeadshots: int
                          TotalKills: int
                          TotalPossessionTime: string
                          TotalShotsFired: int
                          TotalShotsLanded: int
                          WeaponId:
                            Attachments:
                              - int
                            StockId: int
                    PlaylistId: guid
                    SeasonId: null
                    Skulls:
                      - int
                    TotalDuration: string
                    TotalMissionPlaythroughTime: string
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Match Result - Campaign
  "/h5/companies/{companyId}":
    get:
      description: >
        <p>Retrieves information about the Company. The response will contain
        the Company's name, status, and members.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>July 14, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-5-Company
      parameters:
        - description: The ID for the Company. The Company ID for a player can be retrieved
            from the Profile APIs via the "Halo 5 - Player Apperance" Endpoint.
          in: path
          name: companyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Company name, status, and members.
          content:
            application/json:
              examples:
                response:
                  value: >
                    {
                      // The ID of the company.
                      "Id": "guid",

                      // The name of the company.
                      "Name": "string",

                      // Information about the creator of the company. The creator might not necessarily be a
                      // member of the company.
                      "Creator": {

                        // The company creator's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // The highest number of users that were (or are) in this company.
                      "PeakMembershipCount": "int",

                      // Indicates the date that the company is suspended until. This is expressed as an ISO
                      // 8601 combined Date and Time.
                      "SuspendedUntilDate": {

                        "ISO8601Date": "string"
                      },

                      // The current members of the company. If the company does not have any members, this
                      // list will be empty. 
                      "Members": [
                        {
                           // Information about the member. 
                          "Player": {

                            // The member's gamertag.
                            "Gamertag": "string",

                            // Internal use only. This will always be null.
                            "Xuid": null
                          },

                          // The role of the member in the company. This field will contain one of the
                          // following values:
                          //   Member = 0,
                          //   Lieutenant = 1,
                          //   Leader = 2
                          "Role": "int",

                          // The date when the member was added to the company. The time component of this
                          // date is always set to "00:00:00". This is expressed as an ISO 8601 combined Date
                          // and Time.
                          "JoinedDate": {

                            "ISO8601Date": "string"
                          },

                          // The date when the member's role was last modified. The time component of this
                          // date is always set to "00:00:00". This is expressed as an ISO 8601 combined Date
                          // and Time.
                          "LastModifiedDate": {

                            "ISO8601Date": "string"
                        }
                      ],

                      // The date when the company was created. The time component of this date is always set
                      // to "00:00:00". This is expressed as an ISO 8601 combined Date and Time.
                      "CreatedDate": {

                        "ISO8601Date": "string"
                      },

                      // The date when the company was last modified. The time component of this date is
                      // always set to "00:00:00". This is expressed as an ISO 8601 combined Date and Time.
                      "LastModifiedDate": {

                        "ISO8601Date": "string"
                      }
                    }
        "404":
          description: Specified Company was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Company
  "/h5/companies/{companyId}/commendations":
    get:
      description: |
        <p>Retrieves the commendation state for a Company.</p>
        <br />
        <h4>Changelog</h4>
        <div class="panel-body">
            <p><strong>July 14, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-5-Company-Commendations
      parameters:
        - description: The ID for the Company. The Company ID for a player can be retrieved
            from the Profile APIs via the "Halo 5 - Player Apperance" Endpoint.
          in: path
          name: companyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the commendation state for the
            Company.
          content:
            application/json:
              examples:
                response:
                  value:
                    LastUpdatedDateUtc:
                      ISO8601Date: string
                    Links: null
                    MetaCommendations:
                      - Id: guid
                        MetRequirements:
                          - Data1: int
                            Data2: int
                            Data3: int
                            Data4: int
                    ProgressiveCommendations:
                      - CompletedLevels:
                          - CompletedDateUtc:
                              ISO8601Date: string
                            Id: guid
                        Id: guid
                        Progress: int
        "404":
          description: Specified Company was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Company Commendations
  "/h5/custom/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match with the Custom Game Mode.
        Games with the Custom Game Mode are played on Xbox Live Servers. For
        games played on Local Servers, use the "Halo 5 - Match Result - Custom
        Local" Endpoint.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 12, 2018:</strong></p>
            <ul>
                <li>Updated the documentation for "PlayerScore".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
                <li>Added documentation for "PresentInMatch".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Post-Game Carnage Report: Custom" to "Halo 5 - Match Result - Custom".</li>
                <li>Removed "{title}" Request Parameter.</li>
                <li>Updated the documentation for "GameVariantResourceId" and "MapVariantResourceId" to reference the UGC API.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 16, 2016:</strong></p>
            <ul>
                <li>Documented HTTP 503 Response Code.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added documentation for the "GameVariantResourceId", "MapVariantResourceId", and "PlayerScore" fields.</li>
                <li>Updated the documentation for the "MapVariantId" and "GameVariantId" fields with the recommendation of using the "MapVariantResourceId" and "GameVariantResourceId" fields, respectively.</li>
            </ul>
        </div>
      operationId: Halo-5-Match-Result-Custom
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    GameBaseVariantId: guid
                    GameVariantId: guid
                    GameVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 2
                    IsMatchOver: boolean
                    IsTeamGame: boolean
                    MapId: guid
                    MapVariantId: guid
                    MapVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 3
                    PlayerStats:
                      - AvgLifeTimeOfPlayer: string
                        DNF: boolean
                        DestroyedEnemyVehicles:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        EnemyKills:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        FlexibleStats:
                          ImpulseStatCounts:
                            - Count: int
                              Id: guid
                          ImpulseTimelapses:
                            - Id: guid
                              Timelapse: string
                          MedalStatCounts:
                            - Count: int
                              Id: guid
                          MedalTimelapses:
                            - Id: guid
                              Timelapse: string
                        Impulses:
                          - Count: int
                            Id: int
                        KilledByOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        KilledOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        MedalAwards:
                          - Count: int
                            MedalId: int
                        Player:
                          Gamertag: string
                          Xuid: null
                        PlayerScore: int
                        PostMatchRatings: null
                        PreMatchRatings: null
                        PresentInMatch: boolean
                        Rank: int
                        TeamId: int
                        TotalAssassinations: int
                        TotalAssists: int
                        TotalDeaths: int
                        TotalGamesCompleted: int
                        TotalGamesLost: int
                        TotalGamesTied: int
                        TotalGamesWon: int
                        TotalGrenadeDamage: double
                        TotalGrenadeKills: int
                        TotalGroundPoundDamage: double
                        TotalGroundPoundKills: int
                        TotalHeadshots: int
                        TotalKills: int
                        TotalMeleeDamage: double
                        TotalMeleeKills: int
                        TotalPowerWeaponDamage: double
                        TotalPowerWeaponGrabs: int
                        TotalPowerWeaponKills: int
                        TotalPowerWeaponPossessionTime: string
                        TotalShotsFired: int
                        TotalShotsLanded: int
                        TotalShoulderBashDamage: double
                        TotalShoulderBashKills: int
                        TotalSpartanKills: int
                        TotalTimePlayed: string
                        TotalWeaponDamage: double
                        WeaponStats:
                          - TotalDamageDealt: double
                            TotalHeadshots: int
                            TotalKills: int
                            TotalPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            WeaponId:
                              Attachments:
                                - int
                              StockId: int
                        WeaponWithMostKills:
                          TotalDamageDealt: double
                          TotalHeadshots: int
                          TotalKills: int
                          TotalPossessionTime: string
                          TotalShotsFired: int
                          TotalShotsLanded: int
                          WeaponId:
                            Attachments:
                              - int
                            StockId: int
                    PlaylistId: guid
                    SeasonId: null
                    TeamStats:
                      - Rank: int
                        RoundStats:
                          - Rank: int
                            RoundNumber: int
                            Score: uint32
                        Score: uint32
                        TeamId: int
                    TotalDuration: string
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Match Result - Custom
  "/h5/customlocal/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match with the Custom Local Game
        Mode. Games with the Custom Local Game Mode are played on Local Servers.
        For games played on Xbox Live Servers, use the "Halo 5 - Match Result -
        Custom" Endpoint.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 12, 2018:</strong></p>
            <ul>
                <li>Updated the documentation for "PlayerScore".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-5-Match-Result-Custom-Local
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    GameBaseVariantId: guid
                    GameVariantId: guid
                    GameVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 2
                    IsMatchOver: boolean
                    IsTeamGame: boolean
                    MapId: guid
                    MapVariantId: guid
                    MapVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 3
                    PlayerStats:
                      - AvgLifeTimeOfPlayer: string
                        DNF: boolean
                        DestroyedEnemyVehicles:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        EnemyKills:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        FlexibleStats:
                          ImpulseStatCounts:
                            - Count: int
                              Id: guid
                          ImpulseTimelapses:
                            - Id: guid
                              Timelapse: string
                          MedalStatCounts:
                            - Count: int
                              Id: guid
                          MedalTimelapses:
                            - Id: guid
                              Timelapse: string
                        Impulses:
                          - Count: int
                            Id: int
                        KilledByOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        KilledOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        MedalAwards:
                          - Count: int
                            MedalId: int
                        Player:
                          Gamertag: string
                          Xuid: null
                        PlayerScore: int
                        PostMatchRatings: null
                        PreMatchRatings: null
                        PresentInMatch: boolean
                        Rank: int
                        TeamId: int
                        TotalAssassinations: int
                        TotalAssists: int
                        TotalDeaths: int
                        TotalGamesCompleted: int
                        TotalGamesLost: int
                        TotalGamesTied: int
                        TotalGamesWon: int
                        TotalGrenadeDamage: double
                        TotalGrenadeKills: int
                        TotalGroundPoundDamage: double
                        TotalGroundPoundKills: int
                        TotalHeadshots: int
                        TotalKills: int
                        TotalMeleeDamage: double
                        TotalMeleeKills: int
                        TotalPowerWeaponDamage: double
                        TotalPowerWeaponGrabs: int
                        TotalPowerWeaponKills: int
                        TotalPowerWeaponPossessionTime: string
                        TotalShotsFired: int
                        TotalShotsLanded: int
                        TotalShoulderBashDamage: double
                        TotalShoulderBashKills: int
                        TotalSpartanKills: int
                        TotalTimePlayed: string
                        TotalWeaponDamage: double
                        WeaponStats:
                          - TotalDamageDealt: double
                            TotalHeadshots: int
                            TotalKills: int
                            TotalPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            WeaponId:
                              Attachments:
                                - int
                              StockId: int
                        WeaponWithMostKills:
                          TotalDamageDealt: double
                          TotalHeadshots: int
                          TotalKills: int
                          TotalPossessionTime: string
                          TotalShotsFired: int
                          TotalShotsLanded: int
                          WeaponId:
                            Attachments:
                              - int
                            StockId: int
                    PlaylistId: guid
                    SeasonId: null
                    TeamStats:
                      - Rank: int
                        RoundStats:
                          - Rank: int
                            RoundNumber: int
                            Score: uint32
                        Score: uint32
                        TeamId: int
                    TotalDuration: string
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Match Result - Custom Local
  "/h5/matches/{matchId}/events":
    get:
      description: >
        <p>Retrieves a set of Events related to the Match specified. Events are
        only available once the Match has completed.</p>

        <p>The set of Events may grow over time as data becomes available.</p>

        <p>This Endpoint does not have the accuracy guarantees of other Endpoints have, so please use with caution. This endpoint may not return Matches before December 1, 2015.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Events for Match" to "Halo 5 - Match Events".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 20, 2016:</strong></p>
            <ul>
                <li>The Endpoint now correctly reports the "Content-Type" Response Header as "application/json".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 16, 2016:</strong></p>
            <ul>
                <li>Documented HTTP 503 Response Code.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added new types of events to the Endpoint: Impulses, Medals, Player Spawns, Round Stats, Round Ends, Weapon Drops, Weapon Pickups, and Weapon Pickup Pads.</li>
                <li>Fixed an issue that caused the API to consistently return HTTP 500's for matches where a player left and rejoined the match.</li>
            </ul>
        </div>
      operationId: Halo-5-Match-Events
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Events.
          content:
            application/json:
              examples:
                response:
                  value: >
                    {
                      // Events that describe a match from start to completion. Events are reported in
                      // chronological order.
                      // Events can come in a variety of types indicated by the "EventName" field. Each event
                      // is documented in detail below the documentation for this return contract.
                      // Additional event types may be added in the future.
                      // When deserializing events, it is suggested to use a union of all of the fields
                      // across all of the different event types, shown below.
                      "GameEvents": [
                        {
                          "Assistants": [
                            {
                              "Gamertag": "string",

                              "Xuid": null
                            }
                          ],

                          "DeathDisposition": "int",

                          "ImpulseId": "int",

                          "IsAssassination": "boolean",

                          "IsGroundPound": "boolean",

                          "IsHeadshot": "boolean",

                          "IsMelee": "boolean",

                          "IsShoulderBash": "boolean",

                          "IsWeapon": "boolean",

                          "Killer": {

                            "Gamertag": "string",

                            "Xuid": null
                          },

                          "KillerAgent": "int",

                          "KillerWeaponAttachmentIds": [ "int" ],

                          "KillerWeaponStockId": "int",

                          "KillerWorldLocation": {

                            "x": "double",

                            "y": "double",

                            "z": "double"
                          },

                          "MedalId": "int",

                          "Player": {

                            "Gamertag": "string",

                            "Xuid": null
                          },

                          "RoundIndex": "int",

                          "ShotsFired": "int",

                          "ShotsLanded": "int",

                          "TimeWeaponActiveAsPrimary": "string",

                          "Victim": {

                            "Gamertag": "string",

                            "Xuid": null
                          },

                          "VictimAgent": "int",

                          "VictimAttachmentIds": [ "int" ],

                          "VictimStockId": "int",

                          "VictimWorldLocation": {

                            "x": "double",

                            "y": "double",

                            "z": "double"
                          },

                          "WeaponAttachmentIds": [ "int" ],

                          "WeaponStockId": "int",

                          // Descriptor to determine what fields will be filled in for the event. This list
                          // will grow over time as more events are exposed. Can be one of the following:
                          //   "Death" - An event that is created when a death occurs in the match.
                          //   "Impulse" - An event that is created when an impulse (invisible medal) is
                          // triggered in the match.
                          //   "Medal" - An event that is created when a medal is awarded in the match.
                          //   "PlayerSpawn" - An event that is created when a player spawns in the match.
                          //   "RoundStart" - An event that is created when a round starts. In regular
                          // matches, there is typically one round. However, some modes have multiple rounds..
                          //   "RoundEnd" - An event that is created when a round ends. In regular matches,
                          // there is typically one round. However, some modes have multiple rounds..
                          //   "WeaponDrop" - An event that is created when a player drops a weapon for a new
                          // weapon. This occurs when a player picks up a new weapon and drops their current
                          // one, when a player dies and drops their weapon(s), or at the end of the match
                          // for each player.
                          //   "WeaponPickup" - An event that is created when a player picks up a weapon.
                          // This can be when a player spawns, or when a player picks up a new weapon.
                          //   "WeaponPickupPad" - An event that is created when a player picks up a weapon
                          // off a pad. This will not be triggered if the weapon was picked up off the ground
                          // after another player who had picked it off a pad.
                          "EventName": "string",

                          // Time passed since the start of the match when the event occurred. This is
                          // expressed as an ISO 8601 Duration.
                          "TimeSinceStart": "string"
                        }
                      ],

                      // As this is an experimental API it has no guarantees around its accuracy. However we
                      // do try our best to ensure all events are valid and accounted for. If they do not
                      // match up to our expectations this field will return as false indicating this may not
                      // be the full set of events that occurred in game.
                      "IsCompleteSetOfEvents": "boolean",

                      // Internal use only. A set of related resource links.
                      "Links": null
                    }


                    // Death Event

                    {
                      // The gamertags of players who contributed to a kill.
                      "Assistants": [
                      {
                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      }],

                      // The disposition of the death. Can be one of the following:
                      //   Friendly = 0,
                      //   Hostile = 1,
                      //   Neutral = 2
                      "DeathDisposition": "int",

                      // Describes if the death was committed by the killer from behind (Assassination or
                      // melee to back).
                      "IsAssassination": "boolean",

                      // Describes if the kill was committed by the killer with a ground pound.
                      "IsGroundPound": "boolean",

                      // Describes if the kill was committed by the killer with a head shot.
                      "IsHeadshot": "boolean",

                      // Describes if the kill was committed by the killer using melee.
                      "IsMelee": "boolean",

                      // Describes if the kill was committed by the killer with a shoulder bash.
                      "IsShoulderBash": "boolean",

                      // Describes if the kill was committed by the killer with a weapon.
                      "IsWeapon": "boolean",

                      // Describes the killer's information. Can be null if killer is not a player in the
                      // game.
                      "Killer": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // The type of killer that caused the death. Can be one of the following:
                      //   None = 0,
                      //   Player = 1,
                      //   AI = 2
                      "KillerAgent": "int",

                      // The IDs of any attachments that were associated with the weapon that was used to
                      // kill the victim.
                      "KillerWeaponAttachmentIds": ["int"],

                      // The ID of the weapon that was used to kill the victim. Depending on the type of the
                      // kill, this could be the ID of an Enemy, Vehicle, or Weapon, all of which are
                      // available via the Metadata APIs. Note that most vehicles are duplicated between both
                      // the Vehicle and Weapon Metadata APIs. If this was a standard kill with an actual
                      // weapon, then this will be the ID of the weapon that killed the victim. If this was a
                      // kill with a vehicle, then this will the ID of the vehicle that killed the victim. If
                      // this was a melee kill, then this will be the ID of the type of the object that
                      // killed the player (which will be either Spartan or the type of the type of the AI
                      // enemy that killed the player). Note that if the victim was killed by a weapon held
                      // by an AI enemy, the type of the AI enemy is unknown.
                      "KillerWeaponStockId": "int",

                      // Object describing the position of the killer on the map when they made the kill.
                      "KillerWorldLocation": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Describes the victim's information. Can be null if victim is not a player in the
                      // game.
                      "Victim": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // The type of victim who was killed. Can be one of the following:
                      //   None = 0,
                      //   Player = 1,
                      //   AI = 2
                      "VictimAgent": "int",

                      // Any variants of the AI enemy, empty otherwise.
                      "VictimAttachmentIds": ["int"],

                      // The ID of the AI Enemy killed, zero otherwise. Enemy IDs are available via the
                      // Metadata API.
                      "VictimStockId": "int",

                      // Object describing the position of the victim on the map when they were killed.
                      "VictimWorldLocation": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "string",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // Impulse Event

                    {
                      // The ID that uniquely identifies this impulse. Impulses are available via the
                      // Metadata API.
                      "ImpulseId" : "int",

                      // The player who received the impulse.
                      "Player": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      }
                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "Impulse",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // Medal Event

                    {
                      // The ID that uniquely identifies this medal. Medals are available via the Metadata
                      // API.
                      "MedalId" : "int",

                      // The player who received the medal.
                      "Player": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "Medal",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // PlayerSpawn Event

                    {
                      // The player who spawned.
                      "Player": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "PlayerSpawn",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // RoundStart Event

                    {
                      // The index of the round that started.
                      "RoundIndex" : "int",

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "RoundStart",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // RoundEnd Event

                    {
                      // The index of the round that ended.
                      "RoundIndex" : "int",

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "RoundEnd",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // WeaponDrop Event

                    {
                      // The player who dropped the weapon.
                      "Player": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // The number of shots fired with the weapon by the player.
                      "ShotsFired" : "int",

                      // The number of shots that hit the target with the weapon by the player.
                      "ShotsLanded" : "int",

                      // The amount of time the weapon was in the active slot of the player. This is
                      // expressed as an ISO 8601 Duration.
                      "TimeWeaponActiveAsPrimary": "string",

                      // The IDs of any attachments that were associated with the weapon that was dropped.
                      "WeaponAttachmentIds": ["int"],

                      // The ID of the weapon that was dropped. Weapons are available via the Metadata API.
                      "WeaponStockId": "int",

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "WeaponDrop",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // WeaponPickup Event

                    {
                      // The player who picked up the weapon.
                      "Player": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // The IDs of any attachments that were associated with the weapon that was picked up.
                      "WeaponAttachmentIds": ["int"],

                      // The ID of the weapon that was picked up. Weapons are available via the Metadata API.
                      "WeaponStockId": "int",

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "WeaponPickup",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }


                    // WeaponPickupPad Event

                    {
                      // The player who picked up the weapon.
                      "Player": {

                        // The player's gamertag.
                        "Gamertag": "string",

                        // Internal use only. This will always be null.
                        "Xuid": null
                      },

                      // The IDs of any attachments that were associated with the weapon that was picked up.
                      "WeaponAttachmentIds": ["int"],

                      // The ID of the weapon that was picked up. Weapons are available via the Metadata API.
                      "WeaponStockId": "int",

                      // Descriptor to determine what fields will be filled in for the event.
                      "EventName": "WeaponPickupPad",

                      // Time passed since the start of the match when the event occurred. This is expressed
                      // as an ISO 8601 Duration.
                      "TimeSinceStart": "string"
                    }
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Match Events
  "/h5/player-leaderboards/csr/{seasonId}/{playlistId}":
    get:
      description: >
        <p>Retrieves the Leaderboard for Player CSRs. The Leaderboard consists
        of the top Players with a CSR of 1800 or above for a given Playlist in a
        Season.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>March 6, 2018:</strong></p>
            <ul>
                <li>Fixed documentation typos for the names of the "Player" and "Gamertag" properties.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>July 31, 2017:</strong></p>
            <ul>
                <li>Clarified documentation for which players are included in the leaderboard.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Player Leaderboard" to "Halo 5 - Leaderboard Player CSR".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-5-Leaderboard-Player-CSR
      parameters:
        - description: The ID for the Season.
          in: path
          name: seasonId
          required: true
          schema:
            type: string
        - description: The ID for the Playlist.
          in: path
          name: playlistId
          required: true
          schema:
            type: string
        - description: >-
            When specified, this indicates the maximum quantity of items the
            client would like returned in the response.


            When omitted, 200 is assumed.


            When the value contains a non-digit or is exactly "0", HTTP 400 ("Bad Request") is returned.


            When the value is greater than the allowed range [1,250], the maximum allowed value is used instead.


            The "Count" field in the response will confirm the actual value that was used.
          in: query
          name: count
          schema:
            type: number
      responses:
        "200":
          description: The response body will contain the Players in the Leaderboard. An
            empty list will be returned if no Players are in the Leaderboard.
          content:
            application/json:
              examples:
                response:
                  value:
                    Count: int
                    Links: links
                    ResultCount: int
                    Results:
                      - Player:
                          Gamertag: string
                          Xuid: null
                        Rank: int
                        Score:
                          Csr: int
                          DesignationId: int
                          PercentToNextTier: int
                          Rank: int
                          Tier: int
                    Start: int
        "404":
          description: The Season does not exist, or the Playlist either does not exist or
            is not part of the given Season.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Leaderboard - Player CSR
  "/h5/players/{player}/commendations":
    get:
      description: |
        <p>Retrieves the commendation state for a Player.</p>
        <br />
        <h4>Changelog</h4>
        <div class="panel-body">
            <p><strong>July 14, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Commendations
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the commendation state for the Player.
          content:
            application/json:
              examples:
                response:
                  value:
                    LastUpdatedDateUtc:
                      ISO8601Date: string
                    Links: null
                    MetaCommendations:
                      - Id: guid
                        MetRequirements:
                          - Data1: int
                            Data2: int
                            Data3: int
                            Data4: int
                    ProgressiveCommendations:
                      - CompletedLevels:
                          - CompletedDateUtc:
                              ISO8601Date: string
                            Id: guid
                        Id: guid
                        Progress: int
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Player Commendations
  "/h5/players/{player}/matches":
    get:
      description: >
        <p>Retrieves a list of Matches that the Player has participated in and
        which have completed processing. If the Player is currently in a match,
        it is not returned in this API.</p>

        <p>This endpoint will include games played on Local Servers with the Custom Local Game Mode for games that occurred or after December 22, 2017.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>February 1, 2019:</strong></p>
            <ul>
                <li>Enabled support for viewing the time component of the "MatchCompletedDate" via the "{include-times}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added support for the Custom Local Game mode.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Matches for Player" to "Halo 5 - Player Match History".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Clarified documentation for the "MapVariant" and "GameVariant" fields.</li>
                <li>Corrected "OwnerType" values for the "MapVariant" and "GameVariant" fields.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Match-History
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
        - description: >-
            Indicates what Game Mode(s) the client is interested in getting
            Matches for (arena, campaign, custom, customlocal, or warzone).


            When the parameter is omitted or empty, Matches from all modes are returned. When a client would like to receive Matches spanning multiple Modes, separate the Modes with a comma (e.g. "arena,custom"). There is no significance to the order the Modes are specified in this parameter.


            When an invalid Mode is specified, HTTP 400 ("Bad Request") is returned.


            When a valid Mode is specified more than once, HTTP 400 ("Bad Request") is returned.
          in: query
          name: modes
          schema:
            type: string
        - description: >-
            When specified, this indicates the starting index (0-based) for
            which the batch of results will begin at. For example, "start=0"
            indicates that the first qualifying result will be returned, no
            items are 'skipped'. Passing "start=10" indicates that the result
            will begin with the 11th item, the first 10 will be 'skipped'.


            When omitted, zero is assumed.


            When the value contains a non-digit, HTTP 400 ("Bad Request") is returned.
          in: query
          name: start
          schema:
            type: number
        - description: >-
            When specified, this indicates the maximum quantity of items the
            client would like returned in the response.


            When omitted, 25 is assumed.


            When the value contains a non-digit or is exactly "0", HTTP 400 ("Bad Request") is returned.


            When the value is greater than the allowed range [1,25], the maximum allowed value is used instead. The "Count" field in the response will confirm the actual value that was used.
          in: query
          name: count
          schema:
            type: number
        - description: >-
            When set to "true", this indicates that the time component of the
            "MatchCompletedDate" field should be populated.


            Otherwise, when set to "false" or when omitted, the time component will be set to "00:00:00".


            When the value contains a non-boolean, HTTP 400 ("Bad Request") is returned.
          in: query
          name: include-times
          schema:
            type: boolean
      responses:
        "200":
          description: The response body will contain the Player's recent Matches. An empty
            list will be returned if the Player has not played any Matches in
            the specified Game Mode(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Count: int
                    ResultCount: int
                    Results:
                      - GameBaseVariantId: guid
                        GameVariant:
                          Owner: string
                          OwnerType: int
                          ResourceId: guid
                          ResourceType: 2
                        HopperId: guid
                        Id:
                          GameMode: int
                          MatchId: guid
                        IsTeamGame: boolean
                        Links: links
                        MapId: guid
                        MapVariant:
                          Owner: string
                          OwnerType: int
                          ResourceId: guid
                          ResourceType: 3
                        MatchCompletedDate:
                          ISO8601Date: string
                        MatchCompletedDateFidelity: int
                        MatchDuration: string
                        Players:
                          - Player:
                              Gamertag: string
                              Xuid: null
                            PostMatchRatings: null
                            PreMatchRatings: null
                            Rank: int
                            Result: int
                            TeamId: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalKills: int
                        SeasonId: null
                        Teams:
                          - Id: int
                            Rank: int
                            Score: uint32
                    Start: int
        "400":
          description: An unsupported value was provided for a query string parameter.
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Player Match History
  /h5/servicerecords/arena:
    get:
      description: >
        <p>Retrieves Service Records for the Arena Game Mode for one or more
        players. A Service Record contains a player's lifetime statistics in the
        Game Mode.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>June 29, 2018:</strong></p>
            <ul>
                <li>Added support for Social (Unranked) Playlists.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Service Record: Arena" to "Halo 5 - Player Service Records - Arena".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added documentation for the "CsrPercentile" field.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Service-Records-Arena
      parameters:
        - description: A comma-separated list of Gamertags. Up to 32 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
        - description: When specified, this indicates the Season to request the Arena
            Playlist Stats for. If this is not specified, the default is the
            current Season. Seasons are available via the Metadata API. Social
            (Unranked) Arena Playlist Stats can be retrieved by specifying
            "NonSeasonal".
          in: query
          name: seasonId
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Service Records for the requested
            player(s).
          content:
            application/json:
              examples:
                response:
                  value: >
                    {
                      // Set of responses. One per user queried.
                      "Results": [
                        {
                          // The player's gamertag.
                          "Id": "string",

                          // The result of the query for the player. One of the following:
                          //   Success = 0,
                          //   NotFound = 1,
                          //   ServiceFailure = 2,
                          //   ServiceUnavailable = 3
                          // It is possible for different requests from the batch to succeed and fail
                          // independently.
                          "ResultCode": "int",

                          // The Service Record result for the player. Only set if ResultCode is Success.
                          "Result": {

                            // Arena stats data.
                            "ArenaStats": {

                              // List of arena stats by playlist. This is the ONLY set of stats in the
                              // response that respects the Season ID request parameter. If no Season ID was
                              // specified, these will be the stats for the current season. If an invalid
                              // Season ID was specified, this will be empty.
                              "ArenaPlaylistStats": [
                                {
                                  // The playlist ID. Playlists are available via the Metadata API.
                                  "PlaylistId": "guid",

                                  // The player's measurement matches left. If this field is greater than
                                  // zero, then the player will not have a CSR yet.
                                  "MeasurementMatchesLeft": "int",

                                  // The highest Competitive Skill Ranking (CSR) achieved by the player. This
                                  // is included because a player's CSR can drop based on performance.
                                  "HighestCsr": {

                                    // The CSR tier. CSR Tiers are designation-specific and are available via
                                    // the Metadata API.
                                    "Tier": "int",

                                    // The Designation of the CSR. CSR Designations are available via the
                                    // Metadata API.
                                    "DesignationId": "int",

                                    // The CSR value. Zero for normal (Diamond and below) designations.
                                    "Csr": "int",

                                    // The percentage of progress towards the next CSR tier.
                                    "PercentToNextTier": "int",

                                    // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null
                                    // otherwise.
                                    "Rank": "int"
                                  },

                                  // The current Competitive Skill Ranking (CSR) of the player.
                                  "Csr": {

                                    // The CSR tier. CSR Tiers are designation-specific and are available via
                                    // the Metadata API.
                                    "Tier": "int",

                                    // The Designation of the CSR. CSR Designations are available via the
                                    // Metadata API.
                                    "DesignationId": "int",

                                    // The CSR value. Zero for normal (Diamond and below) designations.
                                    "Csr": "int",

                                    // The percentage of progress towards the next CSR tier.
                                    "PercentToNextTier": "int",

                                    // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null
                                    // otherwise.
                                    "Rank": "int"
                                  },

                                  // Number represents within what percent of the top players the user is
                                  // (top 2 percent for example). Can be null if list is not ranked or if
                                  // player has not completed their measurement matches. Does not work for
                                  // pre-season.
                                  "CsrPercentile": "int"
                                  // Total number of kills done by the player. This includes melee kills,
                                  // shoulder bash kills and Spartan charge kills, all power weapons, AI
                                  // kills and vehicle destructions. 
                                  "TotalKills": "int",

                                  // Total number of headshots done by the player.
                                  "TotalHeadshots": "int",

                                  // Total weapon damage dealt by the player.
                                  "TotalWeaponDamage": "double",

                                  // Total number of shots fired by the player.
                                  "TotalShotsFired": "int",

                                  // Total number of shots landed by the player.
                                  "TotalShotsLanded": "int",

                                  // The weapon the player used to get the most kills.
                                  "WeaponWithMostKills": {

                                    "WeaponId": {

                                      // The ID of the weapon. Weapons are available via the Metadata API.
                                      "StockId": "int",

                                      // Any attachments the weapon had.
                                      "Attachments": [ 
                                        "int" 
                                      ]
                                    },

                                    // The number of shots fired for this weapon.
                                    "TotalShotsFired": "int",

                                    // The number of shots landed for this weapon.
                                    "TotalShotsLanded": "int",

                                    // The number of headshots for this weapon.
                                    "TotalHeadshots": "int",

                                    // The number of kills for this weapon.
                                    "TotalKills": "int",

                                    // The total damage dealt for this weapon.
                                    "TotalDamageDealt": "double",

                                    // The total possession time for this weapon. This is expressed as an ISO
                                    // 8601 Duration.
                                    "TotalPossessionTime": "string"
                                  },

                                  // Total number of melee kills by the player.
                                  "TotalMeleeKills": "int",

                                  // Total melee damage dealt by the player.
                                  "TotalMeleeDamage": "double",

                                  // Total number of assassinations by the player.
                                  "TotalAssassinations": "int",

                                  // Total number of ground pound kills by the player.
                                  "TotalGroundPoundKills": "int",

                                  // Total ground pound damage dealt by the player.
                                  "TotalGroundPoundDamage": "double",

                                  // Total number of shoulder bash kills by the player.
                                  "TotalShoulderBashKills": "int",

                                  // Total shoulder bash damage dealt by the player.
                                  "TotalShoulderBashDamage": "double",

                                  // Total grenade damage dealt by the player.
                                  "TotalGrenadeDamage": "double",

                                  // Total number of power weapon kills by the player.
                                  "TotalPowerWeaponKills": "int",

                                  // Total power weapon damage dealt by the player.
                                  "TotalPowerWeaponDamage": "double",

                                  // Total number of power weapon grabs by the player.
                                  "TotalPowerWeaponGrabs": "int",

                                  // Total power weapon possession by the player. This is expressed as an ISO
                                  // 8601 Duration.
                                  "TotalPowerWeaponPossessionTime": "string",

                                  // Total number of deaths by the player.
                                  "TotalDeaths": "int",

                                  // Total number of assists by the player.
                                  "TotalAssists": "int",

                                  // Total number of games the player has completed.
                                  "TotalGamesCompleted": "int",

                                  // Total number of games won by the player.
                                  "TotalGamesWon": "int",

                                  // Total number of games lost by the player.
                                  "TotalGamesLost": "int",

                                  // Total number of games tied by the player.
                                  "TotalGamesTied": "int",

                                  // Total timed played by the player.
                                  "TotalTimePlayed": "string",

                                  // Total number of grenade kills by the player.
                                  "TotalGrenadeKills": "int",

                                  // The set of Medals earned by the player.
                                  "MedalAwards": [
                                    {
                                      // The ID of the Medal. Medals are available via the Metadata API.
                                      "MedalId": "int",

                                      // The number of times the Medal was earned.
                                      "Count": "int"
                                    }
                                  ], 

                                  // List of enemy vehicles destroyed. Vehicles are available via the
                                  // Metadata API. Note: this stat measures enemy vehicles, not any vehicle
                                  // destruction.
                                  "DestroyedEnemyVehicles": [
                                    {
                                      // The enemy this entry references
                                      "Enemy": {

                                        // The Base ID for the enemy.
                                        "BaseId": "int",

                                        // The attachments (variants) for the enemy.
                                        "Attachments": [
                                          "int"
                                        ]
                                      },

                                      // Total number of kills on the enemy by the player
                                      "TotalKills": "int"
                                    }
                                  ],

                                  // List of enemies killed, per enemy type. Enemies are available via the
                                  // Metadata API.
                                  "EnemyKills": [
                                    {
                                      // The enemy this entry references
                                      "Enemy": {

                                        // The Base ID for the enemy.
                                        "BaseId": "int",

                                        // The attachments (variants) for the enemy.
                                        "Attachments": [
                                          "int"
                                        ]
                                      },

                                      // Total number of kills on the enemy by the player
                                      "TotalKills": "int"
                                    }
                                  ],

                                  // The set of weapons (weapons and vehicles included) used by the player.
                                  "WeaponStats": [
                                    {
                                      "WeaponId": {

                                        // The ID of the weapon. Weapons are available via the Metadata API.
                                        "StockId": "int",

                                        // Any attachments the weapon had.
                                        "Attachments": [ 
                                          "int" 
                                        ]
                                      },

                                      // The number of shots fired for this weapon.
                                      "TotalShotsFired": "int",

                                      // The number of shots landed for this weapon.
                                      "TotalShotsLanded": "int",

                                      // The number of headshots for this weapon.
                                      "TotalHeadshots": "int",

                                      // The number of kills for this weapon.
                                      "TotalKills": "int",

                                      // The total damage dealt for this weapon.
                                      "TotalDamageDealt": "double",

                                      // The total possession time for this weapon. This is expressed as an
                                      // ISO 8601 Duration.
                                      "TotalPossessionTime": "string"
                                    }
                                  ],

                                  // The set of Impulses (invisible Medals) earned by the player.
                                  "Impulses": [
                                    {
                                      // The ID of the Impulse. Impulses are available via the Metadata API.
                                      "Id": "int",

                                      // The number of times the Impulse was earned.
                                      "Count": "int"
                                    }
                                  ],

                                  // Total number of Spartan kills by the player.
                                  "TotalSpartanKills": "int"
                                }
                              ],

                              // The highest obtained CSR by the player in arena across all seasons. If the
                              // player hasn't finished measurement matches yet for any playlist, this value
                              // is null.
                              "HighestCsrAttained": {

                                // The CSR tier. CSR Tiers are designation-specific and are available via the
                                // Metadata API.
                                "Tier": "int",

                                // The Designation of the CSR. CSR Designations are available via the
                                // Metadata API.
                                "DesignationId": "int",

                                // The CSR value. Zero for normal (Diamond and below) designations.
                                "Csr": "int",

                                // The percentage of progress towards the next CSR tier.
                                "PercentToNextTier": "int",

                                // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null
                                // otherwise.
                                "Rank": "int"
                              },

                              // List of arena stats by GameBaseVariant across all seasons.
                              "ArenaGameBaseVariantStats": [
                                {
                                  // The game base variant specific stats. Flexible stats are available via
                                  // the Metadata API.
                                  "FlexibleStats": {

                                    // The set of flexible stats that are derived from medal events.
                                    "MedalStatCounts": [
                                      {
                                        // The ID of the flexible stat.
                                        "Id": "guid",

                                        // The number of times this flexible stat was earned.
                                        "Count": "int"
                                      }
                                    ],

                                    // The set of flexible stats that are derived from impulse events.
                                    "ImpulseStatCounts": [
                                      {
                                        // The ID of the flexible stat.
                                        "Id": "guid",

                                        // The number of times this flexible stat was earned.
                                        "Count": "int"
                                      }
                                    ],

                                    // The set of flexible stats that are derived from medal time lapses.
                                    "MedalTimelapses": [
                                      {
                                        // The ID of the flexible stat.
                                        "Id": "guid",

                                        // The amount of time the flexible stat was earned for. This is
                                        // expressed as an ISO 8601 Duration.
                                        "Timelapse": "string"
                                      }
                                    ],    

                                    // The set of flexible stats that are derived from impulse time lapses.
                                    "ImpulseTimelapses": [
                                      {
                                        // The ID of the flexible stat.
                                        "Id": "guid",

                                        // The amount of time the flexible stat was earned for. This is
                                        // expressed as an ISO 8601 Duration.
                                        "Timelapse": "string"
                                      }
                                    ]
                                  },

                                  // The ID of the game base variant. Game base variants are available via
                                  // the Metadata API.
                                  "GameBaseVariantId": "guid",

                                  // Total number of kills done by the player. This includes melee kills,
                                  // shoulder bash kills and Spartan charge kills, all power weapons, AI
                                  // kills and vehicle destructions. 
                                  "TotalKills": "int",

                                  // Total number of headshots done by the player.
                                  "TotalHeadshots": "int",

                                  // Total weapon damage dealt by the player.
                                  "TotalWeaponDamage": "double",

                                  // Total number of shots fired by the player.
                                  "TotalShotsFired": "int",

                                  // Total number of shots landed by the player.
                                  "TotalShotsLanded": "int",

                                  // The weapon the player used to get the most kills.
                                  "WeaponWithMostKills": {

                                    "WeaponId": {

                                      // The ID of the weapon. Weapons are available via the Metadata API.
                                      "StockId": "int",

                                      // Any attachments the weapon had.
                                      "Attachments": [ 
                                        "int" 
                                      ]
                                    },

                                    // The number of shots fired for this weapon.
                                    "TotalShotsFired": "int",

                                    // The number of shots landed for this weapon.
                                    "TotalShotsLanded": "int",

                                    // The number of headshots for this weapon.
                                    "TotalHeadshots": "int",

                                    // The number of kills for this weapon.
                                    "TotalKills": "int",

                                    // The total damage dealt for this weapon.
                                    "TotalDamageDealt": "double",

                                    // The total possession time for this weapon. This is expressed as an ISO
                                    // 8601 Duration.
                                    "TotalPossessionTime": "string"
                                  },

                                  // Total number of melee kills by the player.
                                  "TotalMeleeKills": "int",

                                  // Total melee damage dealt by the player.
                                  "TotalMeleeDamage": "double",

                                  // Total number of assassinations by the player.
                                  "TotalAssassinations": "int",

                                  // Total number of ground pound kills by the player.
                                  "TotalGroundPoundKills": "int",

                                  // Total ground pound damage dealt by the player.
                                  "TotalGroundPoundDamage": "double",

                                  // Total number of shoulder bash kills by the player.
                                  "TotalShoulderBashKills": "int",

                                  // Total shoulder bash damage dealt by the player.
                                  "TotalShoulderBashDamage": "double",

                                  // Total grenade damage dealt by the player.
                                  "TotalGrenadeDamage": "double",

                                  // Total number of power weapon kills by the player.
                                  "TotalPowerWeaponKills": "int",

                                  // Total power weapon damage dealt by the player.
                                  "TotalPowerWeaponDamage": "double",

                                  // Total number of power weapon grabs by the player.
                                  "TotalPowerWeaponGrabs": "int",

                                  // Total power weapon possession by the player. This is expressed as an ISO
                                  // 8601 Duration.
                                  "TotalPowerWeaponPossessionTime": "string",

                                  // Total number of deaths by the player.
                                  "TotalDeaths": "int",

                                  // Total number of assists by the player.
                                  "TotalAssists": "int",

                                  // Total number of games the player has completed.
                                  "TotalGamesCompleted": "int",

                                  // Total number of games won by the player.
                                  "TotalGamesWon": "int",

                                  // Total number of games lost by the player.
                                  "TotalGamesLost": "int",

                                  // Total number of games tied by the player.
                                  "TotalGamesTied": "int",

                                  // Total timed played by the player.
                                  "TotalTimePlayed": "string",

                                  // Total number of grenade kills by the player.
                                  "TotalGrenadeKills": "int",

                                  // The set of Medals earned by the player.
                                  "MedalAwards": [
                                    {
                                      // The ID of the Medal. Medals are available via the Metadata API.
                                      "MedalId": "int",

                                      // The number of times the Medal was earned.
                                      "Count": "int"
                                    }
                                  ], 

                                  // List of enemy vehicles destroyed. Vehicles are available via the
                                  // Metadata API. Note: this stat measures enemy vehicles, not any vehicle
                                  // destruction.
                                  "DestroyedEnemyVehicles": [
                                    {
                                      // The enemy this entry references
                                      "Enemy": {

                                        // The Base ID for the enemy.
                                        "BaseId": "int",

                                        // The attachments (variants) for the enemy.
                                        "Attachments": [
                                          "int"
                                        ]
                                      },

                                      // Total number of kills on the enemy by the player
                                      "TotalKills": "int"
                                    }
                                  ],

                                  // List of enemies killed, per enemy type. Enemies are available via the
                                  // Metadata API.
                                  "EnemyKills": [
                                    {
                                      // The enemy this entry references
                                      "Enemy": {

                                        // The Base ID for the enemy.
                                        "BaseId": "int",

                                        // The attachments (variants) for the enemy.
                                        "Attachments": [
                                          "int"
                                        ]
                                      },

                                      // Total number of kills on the enemy by the player
                                      "TotalKills": "int"
                                    }
                                  ],

                                  // The set of weapons (weapons and vehicles included) used by the player.
                                  "WeaponStats": [
                                    {
                                      "WeaponId": {

                                        // The ID of the weapon. Weapons are available via the Metadata API.
                                        "StockId": "int",

                                        // Any attachments the weapon had.
                                        "Attachments": [ 
                                          "int" 
                                        ]
                                      },

                                      // The number of shots fired for this weapon.
                                      "TotalShotsFired": "int",

                                      // The number of shots landed for this weapon.
                                      "TotalShotsLanded": "int",

                                      // The number of headshots for this weapon.
                                      "TotalHeadshots": "int",

                                      // The number of kills for this weapon.
                                      "TotalKills": "int",

                                      // The total damage dealt for this weapon.
                                      "TotalDamageDealt": "double",

                                      // The total possession time for this weapon. This is expressed as an
                                      // ISO 8601 Duration.
                                      "TotalPossessionTime": "string"
                                    }
                                  ],

                                  // The set of Impulses (invisible Medals) earned by the player.
                                  "Impulses": [
                                    {
                                      // The ID of the Impulse. Impulses are available via the Metadata API.
                                      "Id": "int",

                                      // The number of times the Impulse was earned.
                                      "Count": "int"
                                    }
                                  ],

                                  // Total number of Spartan kills by the player.
                                  "TotalSpartanKills": "int"
                                }
                              ],

                              // A list of up to three game base variants with the highest win rate across
                              // all seasons by the user. If there is a tie, the game base variant with more
                              // completed games is higher. If there's still a tie, the game base variant IDs
                              // are sorted and selected.
                              "TopGameBaseVariants": [
                                {
                                  // Rank between 1-3
                                  "GameBaseVariantRank": "int",

                                  // Number of games played in game base variant
                                  "NumberOfMatchesCompleted": "int",

                                  // Id of the game base variant
                                  "GameBaseVariantId": "guid",

                                  // Number of matches won on game base variant
                                  "NumberOfMatchesWon": "int"
                                }
                              ],

                              // The ID for the playlist that pertains to the highest obtained CSR field
                              // across all seasons. If the CSR is null, so is this field. 
                              "HighestCsrPlaylistId": "guid",

                              // The ID for the season that pertains to the highest obtained CSR field across
                              // all seasons. If the CSR is null, so is this field.
                              "HighestCsrSeasonId": "guid",

                              // The ID for the Season of the stats in ArenaPlaylistStats. If no Season ID
                              // was specified on the request, then this is the ID of the current season.
                              "ArenaPlaylistStatsSeasonId": "guid",

                              // Total number of kills done by the player. This includes melee kills,
                              // shoulder bash kills and Spartan charge kills, all power weapons, AI kills
                              // and vehicle destructions. 
                              "TotalKills": "int",

                              // Total number of headshots done by the player.
                              "TotalHeadshots": "int",

                              // Total weapon damage dealt by the player.
                              "TotalWeaponDamage": "double",

                              // Total number of shots fired by the player.
                              "TotalShotsFired": "int",

                              // Total number of shots landed by the player.
                              "TotalShotsLanded": "int",

                              // The weapon the player used to get the most kills.
                              "WeaponWithMostKills": {

                                "WeaponId": {

                                  // The ID of the weapon. Weapons are available via the Metadata API.
                                  "StockId": "int",

                                  // Any attachments the weapon had.
                                  "Attachments": [ 
                                    "int" 
                                  ]
                                },

                                // The number of shots fired for this weapon.
                                "TotalShotsFired": "int",

                                // The number of shots landed for this weapon.
                                "TotalShotsLanded": "int",

                                // The number of headshots for this weapon.
                                "TotalHeadshots": "int",

                                // The number of kills for this weapon.
                                "TotalKills": "int",

                                // The total damage dealt for this weapon.
                                "TotalDamageDealt": "double",

                                // The total possession time for this weapon. This is expressed as an ISO
                                // 8601 Duration.
                                "TotalPossessionTime": "string"
                              },

                              // Total number of melee kills by the player.
                              "TotalMeleeKills": "int",

                              // Total melee damage dealt by the player.
                              "TotalMeleeDamage": "double",

                              // Total number of assassinations by the player.
                              "TotalAssassinations": "int",

                              // Total number of ground pound kills by the player.
                              "TotalGroundPoundKills": "int",

                              // Total ground pound damage dealt by the player.
                              "TotalGroundPoundDamage": "double",

                              // Total number of shoulder bash kills by the player.
                              "TotalShoulderBashKills": "int",

                              // Total shoulder bash damage dealt by the player.
                              "TotalShoulderBashDamage": "double",

                              // Total grenade damage dealt by the player.
                              "TotalGrenadeDamage": "double",

                              // Total number of power weapon kills by the player.
                              "TotalPowerWeaponKills": "int",

                              // Total power weapon damage dealt by the player.
                              "TotalPowerWeaponDamage": "double",

                              // Total number of power weapon grabs by the player.
                              "TotalPowerWeaponGrabs": "int",

                              // Total power weapon possession by the player. This is expressed as an ISO
                              // 8601 Duration.
                              "TotalPowerWeaponPossessionTime": "string",

                              // Total number of deaths by the player.
                              "TotalDeaths": "int",

                              // Total number of assists by the player.
                              "TotalAssists": "int",

                              // Total number of games the player has completed.
                              "TotalGamesCompleted": "int",

                              // Total number of games won by the player.
                              "TotalGamesWon": "int",

                              // Total number of games lost by the player.
                              "TotalGamesLost": "int",

                              // Total number of games tied by the player.
                              "TotalGamesTied": "int",

                              // Total timed played by the player.
                              "TotalTimePlayed": "string",

                              // Total number of grenade kills by the player.
                              "TotalGrenadeKills": "int",

                              // The set of Medals earned by the player.
                              "MedalAwards": [
                                {
                                  // The ID of the Medal. Medals are available via the Metadata API.
                                  "MedalId": "int",

                                  // The number of times the Medal was earned.
                                  "Count": "int"
                                }
                              ], 

                              // List of enemy vehicles destroyed. Vehicles are available via the Metadata
                              // API. Note: this stat measures enemy vehicles, not any vehicle destruction.
                              "DestroyedEnemyVehicles": [
                                {
                                  // The enemy this entry references
                                  "Enemy": {

                                    // The Base ID for the enemy.
                                    "BaseId": "int",

                                    // The attachments (variants) for the enemy.
                                    "Attachments": [
                                      "int"
                                    ]
                                  },

                                  // Total number of kills on the enemy by the player
                                  "TotalKills": "int"
                                }
                              ],

                              // List of enemies killed, per enemy type. Enemies are available via the
                              // Metadata API.
                              "EnemyKills": [
                                {
                                  // The enemy this entry references
                                  "Enemy": {

                                    // The Base ID for the enemy.
                                    "BaseId": "int",

                                    // The attachments (variants) for the enemy.
                                    "Attachments": [
                                      "int"
                                    ]
                                  },

                                  // Total number of kills on the enemy by the player
                                  "TotalKills": "int"
                                }
                              ],

                              // The set of weapons (weapons and vehicles included) used by the player.
                              "WeaponStats": [
                                {
                                  "WeaponId": {

                                    // The ID of the weapon. Weapons are available via the Metadata API.
                                    "StockId": "int",

                                    // Any attachments the weapon had.
                                    "Attachments": [ 
                                      "int" 
                                    ]
                                  },

                                  // The number of shots fired for this weapon.
                                  "TotalShotsFired": "int",

                                  // The number of shots landed for this weapon.
                                  "TotalShotsLanded": "int",

                                  // The number of headshots for this weapon.
                                  "TotalHeadshots": "int",

                                  // The number of kills for this weapon.
                                  "TotalKills": "int",

                                  // The total damage dealt for this weapon.
                                  "TotalDamageDealt": "double",

                                  // The total possession time for this weapon. This is expressed as an ISO
                                  // 8601 Duration.
                                  "TotalPossessionTime": "string"
                                }
                              ],

                              // The set of Impulses (invisible Medals) earned by the player.
                              "Impulses": [
                                {
                                  // The ID of the Impulse. Impulses are available via the Metadata API.
                                  "Id": "int",

                                  // The number of times the Impulse was earned.
                                  "Count": "int"
                                }
                              ],

                              // Total number of Spartan kills by the player.
                              "TotalSpartanKills": "int"
                            },

                            // Information about the player for whom this data was returned.
                            "PlayerId": {

                              // The gamertag of the player queried.
                              "GamerTag": "string",

                              // Internal use only. This will always be null.
                              "Xuid": null
                            },

                            // The player's Spartan Rank.
                            "SpartanRank": "int",

                            // The player's XP.
                            "Xp": "int"
                          }
                        }
                      ],

                      // Internal use only. A set of related resource links.
                      "Links": null
                    }
        "404":
          description: One or more Gamertags don't pass validation rules.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Player Service Records - Arena
  /h5/servicerecords/campaign:
    get:
      description: >
        <p>Retrieves Service Records for the Campaign Game Mode for one or more
        players. A Service Record contains a player's lifetime statistics in the
        Game Mode.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Service Record: Campaign" to "Halo 5 - Player Service Records - Campaign".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Service-Records-Campaign
      parameters:
        - description: A comma-separated list of Gamertags. Up to 32 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Service Records for the requested
            player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: null
                    Results:
                      - Id: string
                        Result:
                          CampaignStat:
                            CampaignMissionStats:
                              - CoopStats:
                                  int:
                                    AllSkullsOn: bool
                                    FastestCompletionTime: string
                                    HighestScore: int
                                    Skulls:
                                      - int
                                    TotalTimesCompleted: int
                                DestroyedEnemyVehicles:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                EnemyKills:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                FlexibleStats:
                                  ImpulseStatCounts:
                                    - Count: int
                                      Id: guid
                                  ImpulseTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                  MedalStatCounts:
                                    - Count: int
                                      Id: guid
                                  MedalTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                Impulses:
                                  - Count: int
                                    Id: int
                                MedalAwards:
                                  - Count: int
                                    MedalId: int
                                MissionId: guid
                                SoloStats:
                                  int:
                                    AllSkullsOn: bool
                                    FastestCompletionTime: string
                                    HighestScore: int
                                    Skulls:
                                      - int
                                    TotalTimesCompleted: int
                                TotalAssassinations: int
                                TotalAssists: int
                                TotalDeaths: int
                                TotalGamesCompleted: int
                                TotalGamesLost: int
                                TotalGamesTied: int
                                TotalGamesWon: int
                                TotalGrenadeDamage: double
                                TotalGrenadeKills: int
                                TotalGroundPoundDamage: double
                                TotalGroundPoundKills: int
                                TotalHeadshots: int
                                TotalKills: int
                                TotalMeleeDamage: double
                                TotalMeleeKills: int
                                TotalPowerWeaponDamage: double
                                TotalPowerWeaponGrabs: int
                                TotalPowerWeaponKills: int
                                TotalPowerWeaponPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                TotalShoulderBashDamage: double
                                TotalShoulderBashKills: int
                                TotalSpartanKills: int
                                TotalTimePlayed: string
                                TotalWeaponDamage: double
                                WeaponStats:
                                  - TotalDamageDealt: double
                                    TotalHeadshots: int
                                    TotalKills: int
                                    TotalPossessionTime: string
                                    TotalShotsFired: int
                                    TotalShotsLanded: int
                                    WeaponId:
                                      Attachments:
                                        - int
                                      StockId: int
                                WeaponWithMostKills:
                                  TotalDamageDealt: double
                                  TotalHeadshots: int
                                  TotalKills: int
                                  TotalPossessionTime: string
                                  TotalShotsFired: int
                                  TotalShotsLanded: int
                                  WeaponId:
                                    Attachments:
                                      - int
                                    StockId: int
                            DestroyedEnemyVehicles:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            EnemyKills:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            Impulses:
                              - Count: int
                                Id: int
                            MedalAwards:
                              - Count: int
                                MedalId: int
                            TotalAssassinations: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalGamesCompleted: int
                            TotalGamesLost: int
                            TotalGamesTied: int
                            TotalGamesWon: int
                            TotalGrenadeDamage: double
                            TotalGrenadeKills: int
                            TotalGroundPoundDamage: double
                            TotalGroundPoundKills: int
                            TotalHeadshots: int
                            TotalKills: int
                            TotalMeleeDamage: double
                            TotalMeleeKills: int
                            TotalPowerWeaponDamage: double
                            TotalPowerWeaponGrabs: int
                            TotalPowerWeaponKills: int
                            TotalPowerWeaponPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            TotalShoulderBashDamage: double
                            TotalShoulderBashKills: int
                            TotalSpartanKills: int
                            TotalTimePlayed: string
                            TotalWeaponDamage: double
                            WeaponStats:
                              - TotalDamageDealt: double
                                TotalHeadshots: int
                                TotalKills: int
                                TotalPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                WeaponId:
                                  Attachments:
                                    - int
                                  StockId: int
                            WeaponWithMostKills:
                              TotalDamageDealt: double
                              TotalHeadshots: int
                              TotalKills: int
                              TotalPossessionTime: string
                              TotalShotsFired: int
                              TotalShotsLanded: int
                              WeaponId:
                                Attachments:
                                  - int
                                StockId: int
                          PlayerId:
                            GamerTag: string
                            Xuid: null
                          SpartanRank: int
                          Xp: int
                        ResultCode: int
        "404":
          description: One or more Gamertags don't pass validation rules.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Player Service Records - Campaign
  /h5/servicerecords/custom:
    get:
      description: >
        <p>Retrieves Service Records for the Custom Game Mode for one or more
        players. A Service Record contains a player's lifetime statistics in the
        Game Mode. Games with the Custom Game Mode are played on Xbox Live
        Servers. For games played on Local Servers, use the "Halo 5 - Player
        Service Records - Custom Local" Endpoint.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Service Record: Custom" to "Halo 5 - Player Service Records - Custom".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Service-Records-Custom
      parameters:
        - description: A comma-separated list of Gamertags. Up to 32 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Service Records for the requested
            player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: null
                    Results:
                      - Id: string
                        Result:
                          CustomStats:
                            CustomGameBaseVariantStats:
                              - DestroyedEnemyVehicles:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                EnemyKills:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                FlexibleStats:
                                  ImpulseStatCounts:
                                    - Count: int
                                      Id: guid
                                  ImpulseTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                  MedalStatCounts:
                                    - Count: int
                                      Id: guid
                                  MedalTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                GameBaseVariantId: guid
                                Impulses:
                                  - Count: int
                                    Id: int
                                MedalAwards:
                                  - Count: int
                                    MedalId: int
                                TotalAssassinations: int
                                TotalAssists: int
                                TotalDeaths: int
                                TotalGamesCompleted: int
                                TotalGamesLost: int
                                TotalGamesTied: int
                                TotalGamesWon: int
                                TotalGrenadeDamage: double
                                TotalGrenadeKills: int
                                TotalGroundPoundDamage: double
                                TotalGroundPoundKills: int
                                TotalHeadshots: int
                                TotalKills: int
                                TotalMeleeDamage: double
                                TotalMeleeKills: int
                                TotalPowerWeaponDamage: double
                                TotalPowerWeaponGrabs: int
                                TotalPowerWeaponKills: int
                                TotalPowerWeaponPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                TotalShoulderBashDamage: double
                                TotalShoulderBashKills: int
                                TotalSpartanKills: int
                                TotalTimePlayed: string
                                TotalWeaponDamage: double
                                WeaponStats:
                                  - TotalDamageDealt: double
                                    TotalHeadshots: int
                                    TotalKills: int
                                    TotalPossessionTime: string
                                    TotalShotsFired: int
                                    TotalShotsLanded: int
                                    WeaponId:
                                      Attachments:
                                        - int
                                      StockId: int
                                WeaponWithMostKills:
                                  TotalDamageDealt: double
                                  TotalHeadshots: int
                                  TotalKills: int
                                  TotalPossessionTime: string
                                  TotalShotsFired: int
                                  TotalShotsLanded: int
                                  WeaponId:
                                    Attachments:
                                      - int
                                    StockId: int
                            DestroyedEnemyVehicles:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            EnemyKills:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            Impulses:
                              - Count: int
                                Id: int
                            MedalAwards:
                              - Count: int
                                MedalId: int
                            TopGameBaseVariants:
                              - GameBaseVariantId: guid
                                GameBaseVariantRank: int
                                NumberOfMatchesCompleted: int
                                NumberOfMatchesWon: int
                            TotalAssassinations: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalGamesCompleted: int
                            TotalGamesLost: int
                            TotalGamesTied: int
                            TotalGamesWon: int
                            TotalGrenadeDamage: double
                            TotalGrenadeKills: int
                            TotalGroundPoundDamage: double
                            TotalGroundPoundKills: int
                            TotalHeadshots: int
                            TotalKills: int
                            TotalMeleeDamage: double
                            TotalMeleeKills: int
                            TotalPowerWeaponDamage: double
                            TotalPowerWeaponGrabs: int
                            TotalPowerWeaponKills: int
                            TotalPowerWeaponPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            TotalShoulderBashDamage: double
                            TotalShoulderBashKills: int
                            TotalSpartanKills: int
                            TotalTimePlayed: string
                            TotalWeaponDamage: double
                            WeaponStats:
                              - TotalDamageDealt: double
                                TotalHeadshots: int
                                TotalKills: int
                                TotalPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                WeaponId:
                                  Attachments:
                                    - int
                                  StockId: int
                            WeaponWithMostKills:
                              TotalDamageDealt: double
                              TotalHeadshots: int
                              TotalKills: int
                              TotalPossessionTime: string
                              TotalShotsFired: int
                              TotalShotsLanded: int
                              WeaponId:
                                Attachments:
                                  - int
                                StockId: int
                          PlayerId:
                            GamerTag: string
                            Xuid: null
                          SpartanRank: int
                          Xp: int
                        ResultCode: int
        "404":
          description: One or more Gamertags don't pass validation rules.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Player Service Records - Custom
  /h5/servicerecords/customlocal:
    get:
      description: >
        <p>Retrieves Service Records for the Custom Local Game Mode for one or
        more players. A Service Record contains a player's lifetime statistics
        in the Game Mode. Games with the Custom Local Game Mode are played on
        Local Servers. For games played on Xbox Live Servers, use the "Halo 5 -
        Player Service Records - Custom" Endpoint. A player's Custom Local
        Service Record summarizes games played on or after December 22,
        2017.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Service-Records-Custom-Local
      parameters:
        - description: A comma-separated list of Gamertags. Up to 32 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Service Records for the requested
            player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: null
                    Results:
                      - Id: string
                        Result:
                          CustomStats:
                            CustomGameBaseVariantStats:
                              - DestroyedEnemyVehicles:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                EnemyKills:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                FlexibleStats:
                                  ImpulseStatCounts:
                                    - Count: int
                                      Id: guid
                                  ImpulseTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                  MedalStatCounts:
                                    - Count: int
                                      Id: guid
                                  MedalTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                GameBaseVariantId: guid
                                Impulses:
                                  - Count: int
                                    Id: int
                                MedalAwards:
                                  - Count: int
                                    MedalId: int
                                TotalAssassinations: int
                                TotalAssists: int
                                TotalDeaths: int
                                TotalGamesCompleted: int
                                TotalGamesLost: int
                                TotalGamesTied: int
                                TotalGamesWon: int
                                TotalGrenadeDamage: double
                                TotalGrenadeKills: int
                                TotalGroundPoundDamage: double
                                TotalGroundPoundKills: int
                                TotalHeadshots: int
                                TotalKills: int
                                TotalMeleeDamage: double
                                TotalMeleeKills: int
                                TotalPowerWeaponDamage: double
                                TotalPowerWeaponGrabs: int
                                TotalPowerWeaponKills: int
                                TotalPowerWeaponPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                TotalShoulderBashDamage: double
                                TotalShoulderBashKills: int
                                TotalSpartanKills: int
                                TotalTimePlayed: string
                                TotalWeaponDamage: double
                                WeaponStats:
                                  - TotalDamageDealt: double
                                    TotalHeadshots: int
                                    TotalKills: int
                                    TotalPossessionTime: string
                                    TotalShotsFired: int
                                    TotalShotsLanded: int
                                    WeaponId:
                                      Attachments:
                                        - int
                                      StockId: int
                                WeaponWithMostKills:
                                  TotalDamageDealt: double
                                  TotalHeadshots: int
                                  TotalKills: int
                                  TotalPossessionTime: string
                                  TotalShotsFired: int
                                  TotalShotsLanded: int
                                  WeaponId:
                                    Attachments:
                                      - int
                                    StockId: int
                            DestroyedEnemyVehicles:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            EnemyKills:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            Impulses:
                              - Count: int
                                Id: int
                            MedalAwards:
                              - Count: int
                                MedalId: int
                            TopGameBaseVariants:
                              - GameBaseVariantId: guid
                                GameBaseVariantRank: int
                                NumberOfMatchesCompleted: int
                                NumberOfMatchesWon: int
                            TotalAssassinations: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalGamesCompleted: int
                            TotalGamesLost: int
                            TotalGamesTied: int
                            TotalGamesWon: int
                            TotalGrenadeDamage: double
                            TotalGrenadeKills: int
                            TotalGroundPoundDamage: double
                            TotalGroundPoundKills: int
                            TotalHeadshots: int
                            TotalKills: int
                            TotalMeleeDamage: double
                            TotalMeleeKills: int
                            TotalPowerWeaponDamage: double
                            TotalPowerWeaponGrabs: int
                            TotalPowerWeaponKills: int
                            TotalPowerWeaponPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            TotalShoulderBashDamage: double
                            TotalShoulderBashKills: int
                            TotalSpartanKills: int
                            TotalTimePlayed: string
                            TotalWeaponDamage: double
                            WeaponStats:
                              - TotalDamageDealt: double
                                TotalHeadshots: int
                                TotalKills: int
                                TotalPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                WeaponId:
                                  Attachments:
                                    - int
                                  StockId: int
                            WeaponWithMostKills:
                              TotalDamageDealt: double
                              TotalHeadshots: int
                              TotalKills: int
                              TotalPossessionTime: string
                              TotalShotsFired: int
                              TotalShotsLanded: int
                              WeaponId:
                                Attachments:
                                  - int
                                StockId: int
                          PlayerId:
                            GamerTag: string
                            Xuid: null
                          SpartanRank: int
                          Xp: int
                        ResultCode: int
        "404":
          description: One or more Gamertags don't pass validation rules.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Player Service Records - Custom Local
  /h5/servicerecords/warzone:
    get:
      description: >
        <p>Retrieves Service Records for the Warzone Game Mode for one or more
        players. A Service Record contains a player's lifetime statistics in the
        Game Mode.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Service Record: Warzone" to "Halo 5 - Player Service Records - Warzone".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>
      operationId: Halo-5-Player-Service-Records-Warzone
      parameters:
        - description: A comma-separated list of Gamertags. Up to 32 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Service Records for the requested
            player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: null
                    Results:
                      - Id: string
                        Result:
                          PlayerId:
                            GamerTag: string
                            Xuid: null
                          SpartanRank: int
                          WarzoneStat:
                            DestroyedEnemyVehicles:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            EnemyKills:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            Impulses:
                              - Count: int
                                Id: int
                            MedalAwards:
                              - Count: int
                                MedalId: int
                            ScenarioStats:
                              - DestroyedEnemyVehicles:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                EnemyKills:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                FlexibleStats:
                                  ImpulseStatCounts:
                                    - Count: int
                                      Id: guid
                                  ImpulseTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                  MedalStatCounts:
                                    - Count: int
                                      Id: guid
                                  MedalTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                GameBaseVariantId: guid
                                Impulses:
                                  - Count: int
                                    Id: int
                                MapId: guid
                                MedalAwards:
                                  - Count: int
                                    MedalId: int
                                TotalAssassinations: int
                                TotalAssists: int
                                TotalDeaths: int
                                TotalGamesCompleted: int
                                TotalGamesLost: int
                                TotalGamesTied: int
                                TotalGamesWon: int
                                TotalGrenadeDamage: double
                                TotalGrenadeKills: int
                                TotalGroundPoundDamage: double
                                TotalGroundPoundKills: int
                                TotalHeadshots: int
                                TotalKills: int
                                TotalMeleeDamage: double
                                TotalMeleeKills: int
                                TotalPiesEarned: int
                                TotalPowerWeaponDamage: double
                                TotalPowerWeaponGrabs: int
                                TotalPowerWeaponKills: int
                                TotalPowerWeaponPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                TotalShoulderBashDamage: double
                                TotalShoulderBashKills: int
                                TotalSpartanKills: int
                                TotalTimePlayed: string
                                TotalWeaponDamage: double
                                WeaponStats:
                                  - TotalDamageDealt: double
                                    TotalHeadshots: int
                                    TotalKills: int
                                    TotalPossessionTime: string
                                    TotalShotsFired: int
                                    TotalShotsLanded: int
                                    WeaponId:
                                      Attachments:
                                        - int
                                      StockId: int
                                WeaponWithMostKills:
                                  TotalDamageDealt: double
                                  TotalHeadshots: int
                                  TotalKills: int
                                  TotalPossessionTime: string
                                  TotalShotsFired: int
                                  TotalShotsLanded: int
                                  WeaponId:
                                    Attachments:
                                      - int
                                    StockId: int
                            TotalAssassinations: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalGamesCompleted: int
                            TotalGamesLost: int
                            TotalGamesTied: int
                            TotalGamesWon: int
                            TotalGrenadeDamage: double
                            TotalGrenadeKills: int
                            TotalGroundPoundDamage: double
                            TotalGroundPoundKills: int
                            TotalHeadshots: int
                            TotalKills: int
                            TotalMeleeDamage: double
                            TotalMeleeKills: int
                            TotalPiesEarned: int
                            TotalPowerWeaponDamage: double
                            TotalPowerWeaponGrabs: int
                            TotalPowerWeaponKills: int
                            TotalPowerWeaponPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            TotalShoulderBashDamage: double
                            TotalShoulderBashKills: int
                            TotalSpartanKills: int
                            TotalTimePlayed: string
                            TotalWeaponDamage: double
                            WeaponStats:
                              - TotalDamageDealt: double
                                TotalHeadshots: int
                                TotalKills: int
                                TotalPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                WeaponId:
                                  Attachments:
                                    - int
                                  StockId: int
                            WeaponWithMostKills:
                              TotalDamageDealt: double
                              TotalHeadshots: int
                              TotalKills: int
                              TotalPossessionTime: string
                              TotalShotsFired: int
                              TotalShotsLanded: int
                              WeaponId:
                                Attachments:
                                  - int
                                StockId: int
                          Xp: int
                        ResultCode: int
        "404":
          description: One or more Gamertags don't pass validation rules.
        "500":
          description: Internal Server Error
      summary: Halo 5 - Player Service Records - Warzone
  "/h5/warzone/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match with the Warzone Game
        Mode.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Post-Game Carnage Report: Warzone" to "Halo 5 - Match Result - Warzone".</li>
                <li>Removed "{title}" Request Parameter.</li>
                <li>Updated the documentation for "GameVariantResourceId" and "MapVariantResourceId" to reference the UGC API.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 16, 2016:</strong></p>
            <ul>
                <li>Documented HTTP 503 Response Code.</li>
                <li>Added documentation for the "MatchSpeedWinAmount", "ObjectivesCompletedAmount", and "BoostData" fields.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added documentation for the "GameVariantResourceId", "MapVariantResourceId", and "PlayerScore" fields.</li>
                <li>Updated the documentation for the "MapVariantId" and "GameVariantId" fields with the recommendation of using the "MapVariantResourceId" and "GameVariantResourceId" fields, respectively.</li>
            </ul>
        </div>
      operationId: Halo-5-Match-Result-Warzone
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    GameBaseVariantId: guid
                    GameVariantId: guid
                    GameVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 2
                    IsMatchOver: boolean
                    IsTeamGame: boolean
                    MapId: guid
                    MapVariantId: guid
                    MapVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 3
                    ObjectivesCompleted: int
                    PlayerStats:
                      - AvgLifeTimeOfPlayer: string
                        BoostData:
                          CardConsumed: bool
                          DefinitionId: guid
                        CreditsEarned:
                          BoostAmount: int
                          PlayerRankAmount: int
                          Result: int
                          SpartanRankModifier: double
                          TimePlayedAmount: double
                          TotalCreditsEarned: int
                        DNF: boolean
                        DestroyedEnemyVehicles:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        EnemyKills:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        FlexibleStats:
                          ImpulseStatCounts:
                            - Count: int
                              Id: guid
                          ImpulseTimelapses:
                            - Id: guid
                              Timelapse: string
                          MedalStatCounts:
                            - Count: int
                              Id: guid
                          MedalTimelapses:
                            - Id: guid
                              Timelapse: string
                        Impulses:
                          - Count: int
                            Id: int
                        KilledByOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        KilledOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        MedalAwards:
                          - Count: int
                            MedalId: int
                        MetaCommendationDeltas:
                          - Id: guid
                            MetRequirements:
                              - Data1: int
                                Data2: int
                                Data3: int
                                Data4: int
                            PreviousMetRequirements:
                              - Data1: int
                                Data2: int
                                Data3: int
                                Data4: int
                        Player:
                          Gamertag: string
                          Xuid: null
                        PlayerScore: null
                        PostMatchRatings: null
                        PreMatchRatings: null
                        ProgressiveCommendationDeltas:
                          - Id: guid
                            PreviousProgress: int
                            Progress: int
                        Rank: int
                        RewardSets:
                          - CommendationLevelId: guid
                            CommendationSource: guid
                            RewardSet: guid
                            RewardSourceType: int
                            SpartanRankSource: int
                        TeamId: int
                        TotalAssassinations: int
                        TotalAssists: int
                        TotalDeaths: int
                        TotalGamesCompleted: int
                        TotalGamesLost: int
                        TotalGamesTied: int
                        TotalGamesWon: int
                        TotalGrenadeDamage: double
                        TotalGrenadeKills: int
                        TotalGroundPoundDamage: double
                        TotalGroundPoundKills: int
                        TotalHeadshots: int
                        TotalKills: int
                        TotalMeleeDamage: double
                        TotalMeleeKills: int
                        TotalPiesEarned: int
                        TotalPowerWeaponDamage: double
                        TotalPowerWeaponGrabs: int
                        TotalPowerWeaponKills: int
                        TotalPowerWeaponPossessionTime: string
                        TotalShotsFired: int
                        TotalShotsLanded: int
                        TotalShoulderBashDamage: double
                        TotalShoulderBashKills: int
                        TotalSpartanKills: int
                        TotalTimePlayed: string
                        TotalWeaponDamage: double
                        WarzoneLevel: int
                        WeaponStats:
                          - TotalDamageDealt: double
                            TotalHeadshots: int
                            TotalKills: int
                            TotalPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            WeaponId:
                              Attachments:
                                - int
                              StockId: int
                        WeaponWithMostKills:
                          TotalDamageDealt: double
                          TotalHeadshots: int
                          TotalKills: int
                          TotalPossessionTime: string
                          TotalShotsFired: int
                          TotalShotsLanded: int
                          WeaponId:
                            Attachments:
                              - int
                            StockId: int
                        XpInfo:
                          BoostAmount: int
                          MatchSpeedWinAmount: int
                          ObjectivesCompletedAmount: int
                          PerformanceXP: int
                          PlayerRankXPAward: int
                          PlayerTimePerformanceXPAward: int
                          PrevSpartanRank: int
                          PrevTotalXP: int
                          SpartanRank: int
                          SpartanRankMatchXPScalar: double
                          TotalXP: int
                    PlaylistId: guid
                    SeasonId: null
                    TeamStats:
                      - Rank: int
                        RoundStats:
                          - Rank: int
                            RoundNumber: int
                            Score: uint32
                        Score: uint32
                        TeamId: int
                    TotalDuration: string
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 - Match Result - Warzone
  "/h5pc/custom/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match with the Custom Game Mode.
        Games with the Custom Game Mode are played on Xbox Live Servers. For
        games played on Local Servers, use the "Halo 5 - Match Result - Custom
        Local" Endpoint.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 12, 2018:</strong></p>
            <ul>
                <li>Updated the documentation for "PlayerScore".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
                <li>Added documentation for "PresentInMatch".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Post-Game Carnage Report: Custom" to "Halo 5 - Match Result - Custom".</li>
                <li>Removed "{title}" Request Parameter.</li>
                <li>Updated the documentation for "GameVariantResourceId" and "MapVariantResourceId" to reference the UGC API.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>May 16, 2016:</strong></p>
            <ul>
                <li>Documented HTTP 503 Response Code.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Added documentation for the "GameVariantResourceId", "MapVariantResourceId", and "PlayerScore" fields.</li>
                <li>Updated the documentation for the "MapVariantId" and "GameVariantId" fields with the recommendation of using the "MapVariantResourceId" and "GameVariantResourceId" fields, respectively.</li>
            </ul>
        </div>
      operationId: Halo-5-PC-Match-Result-Custom
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo 5 PC - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    GameBaseVariantId: guid
                    GameVariantId: guid
                    GameVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 2
                    IsMatchOver: boolean
                    IsTeamGame: boolean
                    MapId: guid
                    MapVariantId: guid
                    MapVariantResourceId:
                      Owner: string
                      OwnerType: int
                      ResourceId: guid
                      ResourceType: 3
                    PlayerStats:
                      - AvgLifeTimeOfPlayer: string
                        DNF: boolean
                        DestroyedEnemyVehicles:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        EnemyKills:
                          - Enemy:
                              Attachments:
                                - int
                              BaseId: int
                            TotalKills: int
                        FlexibleStats:
                          ImpulseStatCounts:
                            - Count: int
                              Id: guid
                          ImpulseTimelapses:
                            - Id: guid
                              Timelapse: string
                          MedalStatCounts:
                            - Count: int
                              Id: guid
                          MedalTimelapses:
                            - Id: guid
                              Timelapse: string
                        Impulses:
                          - Count: int
                            Id: int
                        KilledByOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        KilledOpponentDetails:
                          - GamerTag: string
                            TotalKills: int
                        MedalAwards:
                          - Count: int
                            MedalId: int
                        Player:
                          Gamertag: string
                          Xuid: null
                        PlayerScore: int
                        PostMatchRatings: null
                        PreMatchRatings: null
                        PresentInMatch: boolean
                        Rank: int
                        TeamId: int
                        TotalAssassinations: int
                        TotalAssists: int
                        TotalDeaths: int
                        TotalGamesCompleted: int
                        TotalGamesLost: int
                        TotalGamesTied: int
                        TotalGamesWon: int
                        TotalGrenadeDamage: double
                        TotalGrenadeKills: int
                        TotalGroundPoundDamage: double
                        TotalGroundPoundKills: int
                        TotalHeadshots: int
                        TotalKills: int
                        TotalMeleeDamage: double
                        TotalMeleeKills: int
                        TotalPowerWeaponDamage: double
                        TotalPowerWeaponGrabs: int
                        TotalPowerWeaponKills: int
                        TotalPowerWeaponPossessionTime: string
                        TotalShotsFired: int
                        TotalShotsLanded: int
                        TotalShoulderBashDamage: double
                        TotalShoulderBashKills: int
                        TotalSpartanKills: int
                        TotalTimePlayed: string
                        TotalWeaponDamage: double
                        WeaponStats:
                          - TotalDamageDealt: double
                            TotalHeadshots: int
                            TotalKills: int
                            TotalPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            WeaponId:
                              Attachments:
                                - int
                              StockId: int
                        WeaponWithMostKills:
                          TotalDamageDealt: double
                          TotalHeadshots: int
                          TotalKills: int
                          TotalPossessionTime: string
                          TotalShotsFired: int
                          TotalShotsLanded: int
                          WeaponId:
                            Attachments:
                              - int
                            StockId: int
                    PlaylistId: guid
                    SeasonId: null
                    TeamStats:
                      - Rank: int
                        RoundStats:
                          - Rank: int
                            RoundNumber: int
                            Score: uint32
                        Score: uint32
                        TeamId: int
                    TotalDuration: string
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 PC - Match Result - Custom
  "/h5pc/players/{player}/matches":
    get:
      description: >
        <p>Retrieves a list of Matches that the Player has participated in and
        which have completed processing. If the Player is currently in a match,
        it is not returned in this API.</p>

        <p>This endpoint will include games played on Local Servers with the Custom Local Game Mode for games that occurred or after December 22, 2017.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>February 1, 2019:</strong></p>
            <ul>
                <li>Enabled support for viewing the time component of the "MatchCompletedDate" via the "{include-times}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added support for the Custom Local Game mode.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Matches for Player" to "Halo 5 - Player Match History".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>April 20, 2016:</strong></p>
            <ul>
                <li>Clarified documentation for the "MapVariant" and "GameVariant" fields.</li>
                <li>Corrected "OwnerType" values for the "MapVariant" and "GameVariant" fields.</li>
            </ul>
        </div>
      operationId: Halo-5-PC-Player-Match-History
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
        - description: >-
            Indicates what Game Mode(s) the client is interested in getting
            Matches for (arena, campaign, custom, or warzone).


            When the parameter is omitted or empty, Matches from all modes are returned. When a client would like to receive Matches spanning multiple Modes, separate the Modes with a comma (e.g. "arena,custom"). There is no significance to the order the Modes are specified in this parameter.


            When an invalid Mode is specified, HTTP 400 ("Bad Request") is returned.


            When a valid Mode is specified more than once, HTTP 400 ("Bad Request") is returned.
          in: query
          name: modes
          schema:
            type: string
        - description: >-
            When specified, this indicates the starting index (0-based) for
            which the batch of results will begin at. For example, "start=0"
            indicates that the first qualifying result will be returned, no
            items are 'skipped'. Passing "start=10" indicates that the result
            will begin with the 11th item, the first 10 will be 'skipped'.


            When omitted, zero is assumed.


            When the value contains a non-digit, HTTP 400 ("Bad Request") is returned.
          in: query
          name: start
          schema:
            type: number
        - description: >-
            When specified, this indicates the maximum quantity of items the
            client would like returned in the response.


            When omitted, 25 is assumed.


            When the value contains a non-digit or is exactly "0", HTTP 400 ("Bad Request") is returned.


            When the value is greater than the allowed range [1,25], the maximum allowed value is used instead. The "Count" field in the response will confirm the actual value that was used.
          in: query
          name: count
          schema:
            type: number
        - description: >-
            When set to "true", this indicates that the time component of the
            "MatchCompletedDate" field should be populated.


            Otherwise, when set to "false" or when omitted, the time component will be set to "00:00:00".


            When the value contains a non-boolean, HTTP 400 ("Bad Request") is returned.
          in: query
          name: include-times
          schema:
            type: boolean
      responses:
        "200":
          description: The response body will contain the Player's recent Matches. An empty
            list will be returned if the Player has not played any Matches in
            the specified Game Mode(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Count: int
                    ResultCount: int
                    Results:
                      - GameBaseVariantId: guid
                        GameVariant:
                          Owner: string
                          OwnerType: int
                          ResourceId: guid
                          ResourceType: 2
                        HopperId: guid
                        Id:
                          GameMode: int
                          MatchId: guid
                        IsTeamGame: boolean
                        Links: links
                        MapId: guid
                        MapVariant:
                          Owner: string
                          OwnerType: int
                          ResourceId: guid
                          ResourceType: 3
                        MatchCompletedDate:
                          ISO8601Date: string
                        MatchCompletedDateFidelity: int
                        MatchDuration: string
                        Players:
                          - Player:
                              Gamertag: string
                              Xuid: null
                            PostMatchRatings: null
                            PreMatchRatings: null
                            Rank: int
                            Result: int
                            TeamId: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalKills: int
                        SeasonId: null
                        Teams:
                          - Id: int
                            Rank: int
                            Score: uint32
                    Start: int
        "400":
          description: An unsupported value was provided for a query string parameter.
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 PC - Player Match History
  /h5pc/servicerecords/custom:
    get:
      description: >
        <p>Retrieves Service Records for the Custom Game Mode for one or more
        players. A Service Record contains a player's lifetime statistics in the
        Game Mode. Games with the Custom Game Mode are played on Xbox Live
        Servers. For games played on Local Servers, use the "Halo 5 - Player
        Service Records - Custom Local" Endpoint.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>December 22, 2017:</strong></p>
            <ul>
                <li>Added Game Mode clarifications to the Endpoint description.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Renamed Endpoint from "Service Record: Custom" to "Halo 5 - Player Service Records - Custom".</li>
                <li>Removed "{title}" Request Parameter.</li>
            </ul>
        </div>
      operationId: Halo-5-PC-Player-Service-Records-Custom
      parameters:
        - description: A comma-separated list of Gamertags. Up to 32 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Service Records for the requested
            player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: null
                    Results:
                      - Id: string
                        Result:
                          CustomStats:
                            CustomGameBaseVariantStats:
                              - DestroyedEnemyVehicles:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                EnemyKills:
                                  - Enemy:
                                      Attachments:
                                        - int
                                      BaseId: int
                                    TotalKills: int
                                FlexibleStats:
                                  ImpulseStatCounts:
                                    - Count: int
                                      Id: guid
                                  ImpulseTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                  MedalStatCounts:
                                    - Count: int
                                      Id: guid
                                  MedalTimelapses:
                                    - Id: guid
                                      Timelapse: string
                                GameBaseVariantId: guid
                                Impulses:
                                  - Count: int
                                    Id: int
                                MedalAwards:
                                  - Count: int
                                    MedalId: int
                                TotalAssassinations: int
                                TotalAssists: int
                                TotalDeaths: int
                                TotalGamesCompleted: int
                                TotalGamesLost: int
                                TotalGamesTied: int
                                TotalGamesWon: int
                                TotalGrenadeDamage: double
                                TotalGrenadeKills: int
                                TotalGroundPoundDamage: double
                                TotalGroundPoundKills: int
                                TotalHeadshots: int
                                TotalKills: int
                                TotalMeleeDamage: double
                                TotalMeleeKills: int
                                TotalPowerWeaponDamage: double
                                TotalPowerWeaponGrabs: int
                                TotalPowerWeaponKills: int
                                TotalPowerWeaponPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                TotalShoulderBashDamage: double
                                TotalShoulderBashKills: int
                                TotalSpartanKills: int
                                TotalTimePlayed: string
                                TotalWeaponDamage: double
                                WeaponStats:
                                  - TotalDamageDealt: double
                                    TotalHeadshots: int
                                    TotalKills: int
                                    TotalPossessionTime: string
                                    TotalShotsFired: int
                                    TotalShotsLanded: int
                                    WeaponId:
                                      Attachments:
                                        - int
                                      StockId: int
                                WeaponWithMostKills:
                                  TotalDamageDealt: double
                                  TotalHeadshots: int
                                  TotalKills: int
                                  TotalPossessionTime: string
                                  TotalShotsFired: int
                                  TotalShotsLanded: int
                                  WeaponId:
                                    Attachments:
                                      - int
                                    StockId: int
                            DestroyedEnemyVehicles:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            EnemyKills:
                              - Enemy:
                                  Attachments:
                                    - int
                                  BaseId: int
                                TotalKills: int
                            Impulses:
                              - Count: int
                                Id: int
                            MedalAwards:
                              - Count: int
                                MedalId: int
                            TopGameBaseVariants:
                              - GameBaseVariantId: guid
                                GameBaseVariantRank: int
                                NumberOfMatchesCompleted: int
                                NumberOfMatchesWon: int
                            TotalAssassinations: int
                            TotalAssists: int
                            TotalDeaths: int
                            TotalGamesCompleted: int
                            TotalGamesLost: int
                            TotalGamesTied: int
                            TotalGamesWon: int
                            TotalGrenadeDamage: double
                            TotalGrenadeKills: int
                            TotalGroundPoundDamage: double
                            TotalGroundPoundKills: int
                            TotalHeadshots: int
                            TotalKills: int
                            TotalMeleeDamage: double
                            TotalMeleeKills: int
                            TotalPowerWeaponDamage: double
                            TotalPowerWeaponGrabs: int
                            TotalPowerWeaponKills: int
                            TotalPowerWeaponPossessionTime: string
                            TotalShotsFired: int
                            TotalShotsLanded: int
                            TotalShoulderBashDamage: double
                            TotalShoulderBashKills: int
                            TotalSpartanKills: int
                            TotalTimePlayed: string
                            TotalWeaponDamage: double
                            WeaponStats:
                              - TotalDamageDealt: double
                                TotalHeadshots: int
                                TotalKills: int
                                TotalPossessionTime: string
                                TotalShotsFired: int
                                TotalShotsLanded: int
                                WeaponId:
                                  Attachments:
                                    - int
                                  StockId: int
                            WeaponWithMostKills:
                              TotalDamageDealt: double
                              TotalHeadshots: int
                              TotalKills: int
                              TotalPossessionTime: string
                              TotalShotsFired: int
                              TotalShotsLanded: int
                              WeaponId:
                                Attachments:
                                  - int
                                StockId: int
                          PlayerId:
                            GamerTag: string
                            Xuid: null
                          SpartanRank: int
                          Xp: int
                        ResultCode: int
        "404":
          description: One or more Gamertags don't pass validation rules.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo 5 PC - Player Service Records - Custom
  "/hw2/matches/{matchId}":
    get:
      description: >
        <p>Retrieves detailed statistics for a Match. Matches can be retrieved
        before they are completed; however, the data for in-progress Matches is
        only updated every few minutes.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>September 5, 2017:</strong></p>
            <ul>
                <li>Documented new game mode "Terminus Firefight".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Match-Result
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo Wars 2 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Result.
          content:
            application/json:
              examples:
                response:
                  value:
                    GameMode: int
                    IsMatchComplete: bool
                    MapId: string
                    MatchDuration: string
                    MatchEndReason: int
                    MatchId: guid
                    MatchStartDate:
                      ISO8601Date: string
                    MatchType: int
                    Players:
                      int:
                        CardStats:
                          guid:
                            TotalPlays: int
                        ComputerDifficulty: int
                        ComputerPlayerId: int
                        HumanPlayerId:
                          Gamertag: string
                          Xuid: null
                        IsHuman: bool
                        LeaderId: int
                        LeaderPowerStats:
                          string:
                            TimesCast: int
                        PlayerCompletedMatch: bool
                        PlayerMatchOutcome: int
                        PointStats:
                          string:
                            TimesCaptured: int
                        RatingProgress:
                          PreviousCsr:
                            Designation: int
                            MeasurementMatchesRemaining: int
                            PercentToNextTier: int
                            Rank: int
                            Raw: int
                            Tier: int
                          PreviousMmr:
                            LastModifiedDate:
                              ISO8601Date: string
                            Rating: double
                            Variance: double
                          UpdatedCsr:
                            Designation: int
                            MeasurementMatchesRemaining: int
                            PercentToNextTier: int
                            Rank: int
                            Raw: int
                            Tier: int
                          UpdatedMmr:
                            LastModifiedDate:
                              ISO8601Date: string
                            Rating: double
                            Variance: double
                        TeamId: int
                        TeamPlayerIndex: int
                        TimeInMatch: string
                        UnitStats:
                          string:
                            TotalBuilt: int
                            TotalDestroyed: int
                            TotalLost: int
                        WaveStats:
                          int:
                            WaveDuration: string
                        XPProgress:
                          ChallengesXP: int
                          CompletedSpartanRanks:
                            - Id: guid
                              PacksAwarded:
                                - guid
                          GameplayXP: int
                          PreviousTotalXP: int
                          UpdatedTotalXP: int
                    PlaylistId: guid
                    SeasonId: guid
                    Teams:
                      int:
                        MatchOutcome: int
                        ObjectiveScore: int
                        TeamSize: int
                    VictoryCondition: int
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Match Result
  "/hw2/matches/{matchId}/events":
    get:
      description: >
        <p>Retrieves a set of Events related to the Match specified. Events are
        only available once the Match has completed. Events are not available
        for Matches played with the Custom Match Type.</p>

        <p>The set of Events may grow over time as data becomes available.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>September 5, 2017:</strong></p>
            <ul>
                <li>Documented new game mode "Terminus Firefight".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Match-Events
      parameters:
        - description: An ID that uniquely identifies a Match. Match IDs can be retrieved
            from the "Halo Wars 2 - Player Match History" Endpoint.
          in: path
          name: matchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Match Events.
          content:
            application/json:
              examples:
                response:
                  value: >
                    //

                    // Main Response

                    //

                    {
                      // Events that describe a match from start to completion. Events are reported in
                      // chronological order.
                      // Events can come in a variety of types indicated by the "EventName" field. Each event
                      // is documented in detail below the documentation for this return contract.
                      // Additional event types may be added in the future.
                      // When deserializing events, it is suggested to use a union of all of the fields
                      // across all of the different event types.
                      "GameEvents": [ "GameEvent" ],

                      // Whether this set of events accounts for the complete set of events from the match.
                      "IsCompleteSetOfEvents": "bool"
                    }


                    //

                    // BuildingConstructionQueued Event

                    //

                    // This event is fired for the following reasons:

                    //   - A player queues a building for construction.

                    //   - A building is provided by the scenario (for instance, the buildings a player

                    //     starts with at the beginning of the scenario). In this case, a subsequent

                    //     BuildingConstructionCompleted event will not be fired.

                    //   - A building is produced by a leader power.

                    //   - A building is built in an "upgraded" state. In this case, a

                    //     BuildingConstructionQueued event is fired for the the "upgraded" building rather

                    //     than firing a BuildingConstructionQueued event for the "non-upgraded" building

                    //     followed by a subsequent BuildingUpgraded event.

                    //

                    {
                      // Index of the player that will control building that was queued for construction.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the building. Buildings are available via the Metadata
                      // API as Game Objects.
                      "BuildingId": "string",

                      // Instance ID that identifies the building. The building will be referred to by this
                      // ID in subsequent events.
                      "InstanceId": "int",

                      // Location that the building will be created at.
                      "Location": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Supply cost paid to construct the building.
                      "SupplyCost": "int",

                      // Energy cost paid to construct the building.
                      "EnergyCost": "int",

                      // Length of the construction queue after enqueuing the building.
                      "QueueLength": "int",

                      // Whether the building was queued by the player or the scenario.
                      "ProvidedByScenario": "bool",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "EventName"  
                    }


                    //

                    // BuildingConstructionCompleted Event

                    //

                    // This event is fired when a building is successfully constructed.

                    //

                    {
                      // Index of the player that controls the building that was constructed.
                      "PlayerIndex": "int",

                      // Instance of the building that was constructed.
                      "InstanceId": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "BuildingConstructionCompleted"  
                    }


                    //

                    // BuildingRecycled Event

                    //

                    // This event is fired when a building is recycled.

                    //

                    {
                      // Index of the player that controls the building that was recycled.
                      "PlayerIndex": "int",

                      // Instance of the building that was recycled.
                      "InstanceId": "int",

                      // Supply earned from recycling the building.
                      "SupplyEarned": "int",

                      // Energy earned from recycling the building.
                      "EnergyEarned": "int",

                      // Whether the building was recycled by the player or the scenario.
                      "ProvidedByScenario": "bool",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "BuildingRecycled"  
                    }


                    //

                    // BuildingUpgraded Event

                    //

                    // This event is fired when a building is upgraded.

                    //

                    {
                      // Index of the player that controls the building that was upgraded.
                      "PlayerIndex": "int",

                      // ID that indicates the new type of the building. Buildings are available via the
                      // Metadata API as Game Objects.
                      "NewBuildingId": "string",

                      // Instance ID of the building that was upgraded.
                      "InstanceId": "int",

                      // Supply cost paid to upgrade the building.
                      "SupplyCost": "int",

                      // Energy cost paid to upgrade the building.
                      "EnergyCost": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "BuildingUpgraded"  
                    }


                    //

                    // CardCycled Event

                    //

                    // This event is fired when a card is cycled.

                    //

                    {
                      // Index of the player that cycled a card.
                      "PlayerIndex": "int",

                      // Mana cost paid to cycle the card.
                      "ManaCost": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "CardCycled"  
                    }


                    //

                    // CardPlayed Event

                    //

                    // This event is fired when a card is played.

                    //

                    {
                      // Index of the player that played a card.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the card. Cards are available via the Metadata API.
                      "CardId": "guid",

                      // Instance ID that identifies this cast of the card. This instance will be referred to
                      // by this ID in subsequent events.
                      "InstanceId": "int",

                      // Mana cost paid to play the card.
                      "ManaCost": "int",

                      // Location where the card was played.
                      "TargetLocation": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Whether the card was played in the base.
                      "SpawnAtBase": "bool",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "CardPlayed"  
                    }


                    //

                    // Death Event

                    //

                    // This event is fired when a building or unit is destroyed.

                    //

                    {
                      // Index of the player that controlled the building or unit that was destroyed.
                      "VictimPlayerIndex": "int",

                      // ID that indicates the type of the building or unit that was destroyed. Game Objects
                      // are available via the Metadata API.
                      "VictimObjectTypeId": "string",

                      // Instance ID of the building or unit that was destroyed.
                      "VictimInstanceId": "int",

                      // Whether the death was considered a suicide.
                      "IsSuicide": "bool",

                      // Participants that contributed to the destruction of the building or unit.
                      // Participants are grouped by player, then object, then combat stats.
                      "Participants": {

                        // Index of the player that participated in the destruction.
                        "int": {

                          // Objects that participated in the destruction that were owned by the given
                          // player. Object participants are grouped by object then combat stats.
                          "ObjectParticipants": {

                            // ID that indicates the type of the building or unit that participated in the
                            // destruction. Game Objects are available via the Metadata API.
                            "string": {

                              // Number of objects of the given type owned by the given player that
                              // participated in the destruction.
                              "Count": "int",

                              // Information about the combat stats across all the objects of the given type
                              // owned by the given player that participated in the destruction. Combat stats
                              // are grouped by damage type.
                              "CombatStats": {

                                // Damage type dealt by the object of the given type. This field will contain
                                // one of the following values:
                                //   Basic = 0,
                                //   LeaderPower = 1,
                                //   LeaderPowerNonFlying = 2,
                                //   AntiInfantry = 3,
                                //   Fire = 4,
                                //   AntiBuildingFire = 5,
                                //   SmallArms = 6,
                                //   AASmallArms = 7,
                                //   SmallArmsScouts = 8,
                                //   MediumArms = 9,
                                //   ChainGun = 10,
                                //   ArmorPiercing = 11,
                                //   AntiVehicle = 12,
                                //   FuelRod = 13,
                                //   BansheeFuelRod = 14,
                                //   AntiAir = 15,
                                //   Explosive = 16,
                                //   TankExplosive = 17,
                                //   Artillery = 18,
                                //   Missile = 19,
                                //   Grenade = 20,
                                //   Demolition = 21,
                                //   Beam = 22,
                                //   WarthogRam = 23,
                                //   GaussCannon = 24,
                                //   BruteShot = 25,
                                //   Melee = 26,
                                //   SuicideGrunt = 27,
                                //   SuicideGruntAV = 28,
                                //   SuperSentinel = 29,
                                //   Hero = 30,
                                //   CampaignHero = 31,
                                //   ScarabBeam = 32,
                                //   Unknown = 255
                                // Additional damage types may be added in the future.
                                "int": {

                                  // Number of attacks of the given damage type that were successfully landed
                                  // on the victim building or unit.
                                  "AttacksLanded": "int"
                                }
                              }
                            }
                          }
                        }
                      },

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "Death"  
                    }


                    //

                    // FirefightWaveCompleted Event

                    //

                    // This event is fired when a team successfully clears a Firefight wave.

                    //

                    {
                      // Wave number that was completed.
                      "WaveNumber": "int",

                      // Elapsed time, measured in milliseconds, that the team took to clear the wave.
                      "WaveDurationMilliseconds": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "FirefightWaveCompleted"  
                    }


                    //

                    // FirefightWaveSpawned Event

                    //

                    // This event is fired when a Firefight wave has been spawned.

                    //

                    {
                      // Wave number that was spawned.
                      "WaveNumber": "int",

                      // Instance IDs of the buildings and units that make up the wave.
                      "InstancesSpawned": [ "int" ],

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "FirefightWaveSpawned"  
                    }


                    //

                    // FirefightWaveStarted Event

                    //

                    // This event is fired when a Firefight wave has started.

                    //

                    {
                      // Wave number that was started.
                      "WaveNumber": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "FirefightWaveStarted"  
                    }


                    //

                    // LeaderPowerCast Event

                    //

                    // This event is fired when a leader power is cast.

                    //

                    {
                      // Index of the player that cast the leader power.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the leader power. Leader Powers are available via the
                      // Metadata API.
                      "PowerId": "string",

                      // Instance ID that identifies this cast of the leader power. This instance will be
                      // referred to by this ID in subsequent events.
                      "InstanceId": "int",

                      // Location where the leader power was cast.
                      "TargetLocation": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Supply cost paid to cast the leader power.
                      "SupplyCost": "int",

                      // Energy cost paid to cast the leader power.
                      "EnergyCost": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "LeaderPowerCast"  
                    }


                    //

                    // LeaderPowerUnlocked Event

                    //

                    // This event is fired when a leader power is unlocked.

                    //

                    {
                      // Index of the player that unlocked the leader power.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the leader power. Leader Powers are available via the
                      // Metadata API.
                      "PowerId": "string",

                      // Command point cost paid to unlock the leader power.
                      "CommandPointCost": "int",

                      // Whether the leader power was unlocked by the scenario.
                      "ProvidedByScenario": "bool",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "LeaderPowerUnlocked"  
                    }


                    //

                    // ManaOrbCollected Event

                    //

                    // This event is fired when a mana orb is collected.

                    //

                    {
                      // Index of the player that collected the mana orb.
                      "PlayerIndex": "int",

                      // Instance ID of the unit that collected the mana orb.
                      "CollectorInstanceId": "int",

                      // Increase to the player's mana generation rate.
                      "ManaRateIncrease": "int",

                      // Location of the mana orb that was collected.
                      "Location": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "ManaOrbCollected"  
                    }


                    //

                    // MatchEnd Event

                    //

                    // This event is fired when the match ends.

                    //

                    {
                      // Reason the match ended. This field will contain one of the following values:
                      //   Unknown = 0,
                      //   Completed = 1,
                      //   StartedNewMission = 2,
                      //   EveryoneDisconnected = 3,
                      //   InviteAccepted = 4
                      "MatchEndReason": "int",

                      // Reason the winning team achieved victory. This field will contain one of the
                      // following values:
                      //   EndedPrematurely = 0,
                      //   ObjectiveCompleted = 1,
                      //   OpponentsEliminated = 2,
                      //   Unknown = 255
                      "VictoryCondition": "int",

                      // Elapsed time, measured in milliseconds, spent playing the match.
                      "ActivePlaytimeMilliseconds": "int",

                      // Ending states for the teams in the match.
                      "TeamState": {

                        // Team ID.
                        "int": {

                          // Score for the team.
                          "ObjectiveScore": "int",

                          // Outcome for the team. This field will contain one of the following values:
                          //   Unknown = 0,
                          //   Win = 1,
                          //   Loss = 2,
                          //   Tie = 3
                          "MatchOutcome": "int"
                        }
                      },

                      // Ending states for the players in the match.
                      "PlayerState": {

                        // Player Index.
                        "int": {

                          // Score for the player.
                          "PersonalScore": "int"
                        }
                      },

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "MatchEnd"  
                    }


                    //

                    // MatchStart Event

                    //

                    // This event is fired when the match starts.

                    //

                    {
                      // ID of the match.
                      "MatchId": "guid",

                      // Game mode. This field will contain one of the following values:
                      //   Unknown = 0,
                      //   CampaignSolo = 1,
                      //   CampaignCooperative = 2,
                      //   Deathmatch = 3,
                      //   Domination = 4,
                      //   Strongholds = 5,
                      //   Blitz = 6,
                      //   Firefight = 7,
                      //   NormalTutorial = 8,
                      //   BlitzTutorial = 9,
                      //   TerminusFirefight = 10
                      "GameMode": "int",

                      // Match type. This field will contain one of the following values:
                      //   Unknown = 0,
                      //   Campaign = 1,
                      //   Custom = 2,
                      //   Matchmaking = 3
                      "MatchType": "int",

                      // ID of the map. Maps are available via the Metadata API.
                      "MapId": "string",

                      // Playlist the match occurred in if the match occurred in a playlist; otherwise, empty
                      // Guid.
                      "PlaylistId": "guid",

                      // Max team size for the match.
                      "TeamSize": "int",

                      // whether the match is using the default rule set.
                      "IsDefaultRuleSet": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "MatchStart"  
                    }


                    //

                    // PlayerEliminated Event

                    //

                    // This event is fired when a player is eliminated from the match.

                    //

                    {
                      // Index of the player that was eliminated.
                      "PlayerIndex": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "PlayerEliminated"  
                    }


                    //

                    // PlayerJoinedMatch Event

                    //

                    // This event is fired at the start of the match for each player in the match. This event

                    // is fired for the neutral players in addition to the Human and Computer players.

                    //

                    {
                      // Index of the player that joined the match. The player will be referred to by this
                      // index in subsequent events.
                      "PlayerIndex": "int",

                      // Type of the player that joined the match. This field will contain one of the
                      // following values:
                      //   Unknown = 0,
                      //   Human = 1,
                      //   Computer = 2,
                      //   NPC = 3
                      "PlayerType": "int",

                      // Identify of the player if this is a human player; otherwise, null.
                      "HumanPlayerId": {

                        // Gamertag of the player.
                        "Gamertag": "string",

                        // Internal use. This will always be null.
                        "Xuid": null
                      },

                      // ID of the computer player if this is a computer player; otherwise, null.
                      "ComputerPlayerId": "int",

                      // Difficulty of the computer player if this is a computer player; otherwise, null.
                      // Difficulties are available via the Metadata API.
                      "ComputerDifficulty": "int",

                      // Team the player is a member of.
                      "TeamId": "int",

                      // Leader the player is using. Leaders are available via the Metadata API.
                      "LeaderId": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "PlayerJoinedMatch"  
                    }


                    //

                    // PlayerLeftMatch Event

                    //

                    // This event is fired when a player leaves the match early for any reason. This is not

                    // to be confused with the PlayerEliminated event. If a player is eliminated, the

                    // PlayerEliminated event will be fired. The player may continue to spectate the match

                    // after being eliminated. If the player stops spectating the match, then this event will

                    // be fired.

                    //

                    {
                      // Index of the player that left the match.
                      "PlayerIndex": "int",

                      // Elapsed time, measured in milliseconds, the player spent playing the match.
                      "TimeInMatchMilliseconds": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "PlayerLeftMatch"  
                    }


                    //

                    // PointCaptured Event

                    //

                    // This event is fired when an objective is captured in all game modes besides Blitz.

                    //

                    {
                      // Index of the player that captured the objective.
                      "PlayerIndex": "int",

                      // Instance ID of the objective that was captured.
                      "InstanceId": "int",

                      // Instance ID of the unit that captured the objective.
                      "CapturerInstanceId": "int",

                      // Location of the unit that captured the objective.
                      "CapturerLocation": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // ID of the team that now owns the objective. If the objective is not owned by a team,
                      // this will be 0.
                      "NewOwningTeamId": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "PointCaptured"  
                    }


                    //

                    // PointCreated Event

                    //

                    // This event is fired at the start of the match for each objective that can be captured

                    // on the map.

                    //

                    {
                      // ID that indicates the type of the objective.
                      "PointId": "string",

                      // Instance ID that identifies the objective. The objective will be referred to by this
                      // ID in subsequent events.
                      "InstanceId": "int",

                      // Location of the objective.
                      "Location": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "PointCreated"  
                    }


                    //

                    // PointStatusChange Event

                    //

                    // This event is fired when an objective is captured in the Blitz game mode.

                    //

                    {
                      // Instance ID of the objective that was captured.
                      "InstanceId": "int",

                      // Updated status of the objective. This field will contain one of the following values:
                      //   Neutral = 0,
                      //   Contested = 1,
                      //   Captured = 2
                      "Status": "int",

                      // ID of the team that now owns the objective. If the objective is not owned by a team,
                      // this will be 255.
                      "OwningTeamId": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "PointStatusChange"  
                    }


                    //

                    // ResourceHeartbeat Event

                    //

                    // This event is fired at the start of a match and then at regular 5 seconds thereafter.

                    //

                    {
                      // Current resources for each team.
                      "TeamResources": {

                        // Team ID.
                        "int": {

                          // Current objective score for the team.
                          "ObjectiveScore": "int"
                        }
                      },

                      // Current resources for each player.
                      "PlayerResources": {

                        // Player Index.
                        "int": {

                          // Current supply balance for the player.
                          "Supply": "int",

                          // Total supply generated by the player throughout the match.
                          "TotalSupply": "int",

                          // Current energy balance for the player.
                          "Energy": "int",

                          // Total energy generated by the player throughout the match.
                          "TotalEnergy": "int",

                          // Current population count for the player.
                          "Population": "int",

                          // Current maximum population for the player.
                          "PopulationCap": "int",

                          // Current tech level for the player.
                          "TechLevel": "int",

                          // Current command point balance for the player.
                          "CommandPoints": "int",

                          // Total command points generated by the player throughout the match.
                          "TotalCommandPoints": "int",

                          // Current mana balance for the player.
                          "Mana": "int",

                          // Total mana generated by the player throughout the match.
                          "TotalMana": "int",

                          // Unused.
                          "ManaRate": "int",

                          // Current command XP for the player.
                          "CommandXP": "int"
                        }
                      },

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "EventName"  
                    }


                    //

                    // ResourceTransferred Event

                    //

                    // This event is fired when a player transfers resources to another player.

                    //

                    {
                      // Index of the player that sent the resources.
                      "SendingPlayerIndex": "int",

                      // Index of the player that received the resources.
                      "ReceivingPlayerIndex": "int",

                      // Supply cost paid by the sending player to send the resource.
                      "SupplyCost": "int",

                      // Energy cost paid by the sending player to send the resource.
                      "EnergyCost": "int",

                      // Supply earned by the receiving player.
                      "SupplyEarned": "int",

                      // Energy earned by the receiving player.
                      "EnergyEarned": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "ResourceTransferred"  
                    }


                    //

                    // TechResearched Event

                    //

                    // This event is fired when a tech is researched.

                    //

                    {
                      // Index of the player that received the researched tech.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the tech that was researched. Techs are available via
                      // the Metadata API.
                      "TechId": "string",

                      // ID of the instance that researched the tech.
                      "ResearcherInstanceId": "int",

                      // Supply cost paid to research the tech.
                      "SupplyCost": "int",

                      // Energy cost paid to research the tech.
                      "EnergyCost": "int",

                      // Whether the tech was researched by the player or the scenario.
                      "ProvidedByScenario": "bool",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "TechResearched"  
                    }


                    //

                    // UnitControlTransferred Event

                    //

                    // This event is fired when control of a unit is transferred from a player to another

                    // player.

                    //

                    {
                      // Index of the player that lost control of the unit.
                      "OldPlayerIndex": "int",

                      // Index of the player that gained control of the unit.
                      "NewPlayerIndex": "int",

                      // ID that indicates the type of the unit that was transferred. Units are available via
                      // the Metadata API as Game Objects.
                      "SquadId": "string",

                      // ID of the instance that was transferred.
                      "InstanceId": "int",

                      // ID of the instance that caused the transfer of the unit, if appropriate; otherwise,
                      // 0.
                      "CapturerInstanceId": "int",

                      // Location of the unit when control was transferred.
                      "Location": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Population consumed by the transferred unit.
                      "PopulationCost": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "UnitControlTransferred"  
                    }


                    //

                    // UnitPromoted Event

                    //

                    // This event is fired when a unit is promoted.

                    //

                    {
                      // Index of the player that controls the unit that was promoted.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the unit that was promoted. Units are available via
                      // the Metadata API as Game Objects.
                      "SquadId": "string",

                      // ID of the instance that was promoted.
                      "InstanceId": "int",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "UnitPromoted"  
                    }


                    //

                    // UnitTrained Event

                    //

                    // This event is fired for the following reasons:

                    //   - A player trains a unit from a building.

                    //   - A unit is produced by a leader power or card.

                    //   - A unit is provided by the scenario (for instance, the units a player starts with

                    //     at the beginning of the scenario).

                    //

                    {
                      // Index of the player that controls the unit that was trained.
                      "PlayerIndex": "int",

                      // ID that indicates the type of the unit that was trained. Units are available via the
                      // Metadata API as Game Objects.
                      "SquadId": "string",

                      // Instance ID that identifies the unit. The unit will be referred to by this ID in
                      // subsequent events.
                      "InstanceId": "int",

                      // ID of the instance that trained the unit, if appropriate; otherwise, 0.
                      "CreatorInstanceId": "int",

                      // Location of the unit when it spawned.
                      "SpawnLocation": {

                        "x": "double",

                        "y": "double",

                        "z": "double"
                      },

                      // Supply cost paid to train the unit.
                      "SupplyCost": "int",

                      // Energy cost paid to train the unit.
                      "EnergyCost": "int",

                      // Population cost paid to train the unit.
                      "PopulationCost": "int",

                      // Whether the unit that was trained was cloned by a leader power.
                      "IsClone": "bool",

                      // Whether the unit was trained by the player or the scenario.
                      "ProvidedByScenario": "bool",

                      // Elapsed time, measured in milliseconds, since the point when the match started.
                      "TimeSinceStartMilliseconds": "int",

                      // Name of the event.
                      "EventName": "UnitTrained"  
                    }
        "404":
          description: The specified Match could not be found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Match Events
  "/hw2/player-leaderboards/csr/{seasonId}/{playlistId}":
    get:
      description: >
        <p>Retrieves the Leaderboard for Player CSRs. The Leaderboard consists
        of the top Players with a CSR of 1800 or above for a given Playlist in a
        Season.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>March 6, 2018:</strong></p>
            <ul>
                <li>Fixed documentation typos for the names of the "Player" and "Gamertag" properties.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>July 31, 2017:</strong></p>
            <ul>
                <li>Clarified documentation for which players are included in the leaderboard.</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>July 14, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Leaderboard-Player-CSR
      parameters:
        - description: The ID for the Season.
          in: path
          name: seasonId
          required: true
          schema:
            type: string
        - description: The ID for the Playlist.
          in: path
          name: playlistId
          required: true
          schema:
            type: string
        - description: >-
            When specified, this indicates the maximum quantity of items the
            client would like returned in the response.


            When omitted, 200 is assumed.


            When the value contains a non-digit or is exactly "0", HTTP 400 ("Bad Request") is returned.


            When the value is greater than the allowed range [1,250], the maximum allowed value is used instead.


            The "Count" field in the response will confirm the actual value that was used.
          in: query
          name: count
          schema:
            type: number
      responses:
        "200":
          description: The response body will contain the Players in the Leaderboard. An
            empty list will be returned if no Players are in the Leaderboard.
          content:
            application/json:
              examples:
                response:
                  value:
                    Count: int
                    Links: links
                    ResultCount: int
                    Results:
                      - Player:
                          Gamertag: string
                          Xuid: null
                        Rank: int
                        Score:
                          Csr: int
                          DesignationId: int
                          PercentToNextTier: int
                          Rank: int
                          Tier: int
                    Start: int
        "404":
          description: The Season does not exist, or the Playlist either does not exist or
            is not part of the given Season.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Leaderboard - Player CSR
  "/hw2/players/{player}/campaign-progress":
    get:
      description: |
        <p>Retrieves the Campaign Progress state for a Player.</p>
        <br />
        <h4>Changelog</h4>
        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Player-Campaign-Progress
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Campaign Progress for the Player.
          content:
            application/json:
              examples:
                response:
                  value:
                    CampaignXP: int
                    Levels:
                      int:
                        FirstCompletionDate:
                          ISO8601Date: string
                        SkullsUnlocked:
                          - int
                        SoloCompletion:
                          int:
                            BestCompletionTime: string
                            BestScore: int
                            BonusObjectivesCompleted:
                              - int
                            CriticalObjectivesCompleted:
                              - int
                            OptionalObjectivesCompleted:
                              - int
                        TotalCooperativePlayTime: string
                        TotalSoloPlayTime: string
                    LogsUnlocked:
                      - int
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Player Campaign Progress
  "/hw2/players/{player}/matches":
    get:
      description: >
        <p>Retrieves a list of Matches that the Player has participated in. If
        the Player is currently in a Match, it is not returned in this API.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>September 5, 2017:</strong></p>
            <ul>
                <li>Documented new game mode "Terminus Firefight".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Player-Match-History
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
        - description: >-
            Indicates what Match Type the client is interested in getting
            Matches for ("custom" or "matchmaking").


            When the parameter is omitted or empty, Matches from all Match Types are returned.


            When an invalid Mode is specified, HTTP 400 ("Bad Request") is returned.
          in: query
          name: matchType
          schema:
            type: string
        - description: >-
            When specified, this indicates the starting index (0-based) for
            which the batch of results will begin at. For example, "start=0"
            indicates that the first qualifying result will be returned, no
            items are 'skipped'. Passing "start=10" indicates that the result
            will begin with the 11th item, the first 10 will be 'skipped'.


            When omitted, zero is assumed.


            When the value contains a non-digit, HTTP 400 ("Bad Request") is returned.
          in: query
          name: start
          schema:
            type: number
        - description: >-
            When specified, this indicates the maximum quantity of items the
            client would like returned in the response.


            When omitted, 25 is assumed.


            When the value contains a non-digit or is exactly "0", HTTP 400 ("Bad Request") is returned.


            When the value is greater than the allowed range [1,25], the maximum allowed value is used instead. The "Count" field in the response will confirm the actual value that was used.
          in: query
          name: count
          schema:
            type: number
      responses:
        "200":
          description: The response body will contain the Match History for the Player.
          content:
            application/json:
              examples:
                response:
                  value:
                    Count: int
                    Links: {}
                    ResultCount: int
                    Results:
                      - GameMode: int
                        LeaderId: int
                        MapId: string
                        MatchId: guid
                        MatchStartDate:
                          ISO8601Date: string
                        MatchType: int
                        PlayerCompletedMatch: bool
                        PlayerIndex: int
                        PlayerMatchDuration: string
                        PlayerMatchOutcome: int
                        PlaylistId: guid
                        RatingProgress:
                          PreviousCsr:
                            Designation: int
                            MeasurementMatchesRemaining: int
                            PercentToNextTier: int
                            Rank: int
                            Raw: int
                            Tier: int
                          PreviousMmr:
                            LastModifiedDate:
                              ISO8601Date: string
                            Rating: double
                            Variance: double
                          UpdatedCsr:
                            Designation: int
                            MeasurementMatchesRemaining: int
                            PercentToNextTier: int
                            Rank: int
                            Raw: int
                            Tier: int
                          UpdatedMmr:
                            LastModifiedDate:
                              ISO8601Date: string
                            Rating: double
                            Variance: double
                        SeasonId: guid
                        TeamId: int
                        TeamPlayerIndex: int
                        Teams:
                          int:
                            TeamSize: int
                        XPProgress:
                          ChallengesXP: int
                          CompletedSpartanRanks:
                            - Id: guid
                              PacksAwarded:
                                - guid
                          GameplayXP: int
                          PreviousTotalXP: int
                          UpdatedTotalXP: int
                    Start: int
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Player Match History
  "/hw2/players/{player}/stats":
    get:
      description: >
        <p>Retrieves high-level aggregations across the lifetime of a
        Player.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>September 5, 2017:</strong></p>
            <ul>
                <li>Added additional fields: "GameMode" and "HighestObjectiveScoreByTeamSize".</li>
                <li>Documented new game mode "Terminus Firefight".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Player-Stats-Summary
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Stats Summary for the Player.
          content:
            application/json:
              examples:
                response:
                  value: >
                    //

                    // Main Response

                    //

                    {
                      // Summary of activity across all Custom matches that the player has participated in.
                      "CustomSummary": {

                        // Summary of activity across all Skirmish matches (player(s) vs. AI(s)) that the
                        // player has participated in.
                        "SkirmishStats": {

                          // Summary of activity across all Skirmish matches that contained only the player.
                          // This will contain a single Summary. The Summary contract is documented in detail
                          // below the documentation for the Main Response.
                          "SinglePlayerStats": "Summary",

                          // Summary of activity across all Skirmish matches that contained two or more human
                          // players that the player has participated in. This will contain a single Summary.
                          // The Summary contract is documented in detail below the documentation for the
                          // Main Response.
                          "MultiplayerStats": "Summary",

                          // Summary of activity across all Skirmish matches that contained only the player,
                          // separated by game mode. This will contain multiple Summary entries, one for each
                          // game mode. The Summary contract is documented in detail below the documentation
                          // for the Main Response.
                          "SinglePlayerModeStats": [ "Summary" ],

                          // Summary of activity across all Skirmish matches that contained two or more human
                          // players that the player has participated in. This will contain multiple Summary
                          // entries, one for each game mode. The Summary contract is documented in detail
                          // below the documentation for the Main Response.
                          "MultiplayerModeStats": [ "Summary" ],

                        },

                        // Summary of activity across all non-Skirmish matches that the player has
                        // participated in. This will contain a single Summary. The Summary contract is
                        // documented in detail below the documentation for the Main Response.
                        "CustomStats": "Summary",

                        // Summary of activity across all non-Skirmish matches that the player has
                        // participated in, separated by game mode. This will contain multiple Summary
                        // entries, one for each game mode. The Summary contract is documented in detail
                        // below the documentation for the Main Response.
                        "CustomModeStats": [ "Summary" ]
                      },

                      // Summary across all matchmade matches that the player has participated in. This
                      // includes both social and ranked matches, matches from all seasons, and matches from
                      // all game modes.
                      "MatchmakingSummary": {

                        // Summary across all matches in social (unranked) playlists. This may include
                        // summary information from playlists that are no longer playable. Playlists that the
                        // player has never played in are omitted from this collection. Note that is possible
                        // for a playlist to go between social and ranked. Consumers of this endpoint should
                        // be careful about the possibility that a playlist appears in both collections. This
                        // will contain a Summary entry for each playlist. The Summary contract is documented
                        // in detail below the documentation for the Main Response.
                        "SocialPlaylistStats": [ "Summary" ],

                        // Summary across all matches in ranked playlists. This may include summary
                        // information from playlists that are no longer playable. Playlists that the player
                        // has never played in are omitted from this collection. Note that is possible for a
                        // playlist to go between social and ranked. Consumers of this endpoint should be
                        // careful about the possibility that a playlist appears in both collections. The
                        // Summary contract is documented in detail below the documentation for the Main
                        // Response.
                        "RankedPlaylistStats": [ "Summary" ],

                        // Summary across all matches in social (unranked) playlists, separated by game mode.
                        // This may include summary information from playlists that are no longer playable.
                        // Playlists that the player has never played in are omitted from this collection.
                        // Note that is possible for a playlist to go between social and ranked. Consumers of
                        // this endpoint should be careful about the possibility that a playlist appears in
                        // both collections. This will contain multiple Summary entries, one for each
                        // playlist and game mode combination. The Summary contract is documented in detail
                        // below the documentation for the Main Response.
                        "SocialModeStats": [ "Summary" ],

                        // Summary across all matches in ranked playlists, separated by game mode. This may
                        // include summary information from playlists that are no longer playable. Playlists
                        // that the player has never played in are omitted from this collection. Note that is
                        // possible for a playlist to go between social and ranked. Consumers of this
                        // endpoint should be careful about the possibility that a playlist appears in both
                        // collections. This will contain multiple Summary entries, one for each playlist and
                        // game mode combination. The Summary contract is documented in detail below the
                        // documentation for the Main Response.
                        "RankedModeStats": [ "Summary" ],

                      }
                    }


                    //

                    // Summary

                    //

                    {
                      // Playlist ID that this entry summarizes. If this entry summarizes Custom matches,
                      // this will be null. Playlists are available via the Metadata API.
                      "PlaylistId": "guid",

                      // When summarizing a set of matches that took place in a common playlist, this field
                      // provides the current classification. This field will contain one of the following
                      // values:
                      //   General Stats = 0,
                      //   Blitz Stats = 1,
                      //   Firefight Stats = 2
                      // If this entry summarizes Custom matches, this will be null.
                      "PlaylistClassification": "int",

                      // Highest Competitive Skill Ranking (CSR) achieved by the player in the playlist. If
                      // the player has never finished the measurement matches on this playlist, this field
                      // will be null. If this entry does not summarize ranked matches, this will be null.
                      "HighestCsr": {

                        // CSR Tier. CSR Tiers are designation-specific. If the player is still in
                        // measurement matches, this field will be null. CSR Tiers are referenced by CSR
                        // Designations, which are available via the Metadata API.
                        "Tier": "int",

                        // CSR Designation. If the player is still in measurement matches, this field will be
                        // null. CSR Designations are available via the Metadata API.
                        "Designation": "int",

                        // Raw CSR value. If the player is still in measurement matches, this field will be
                        // null. If the player is not in a high enough designation, this will be zero.
                        "Raw": "int",

                        // Percentage of progress towards the next CSR tier. If the player is still in
                        // measurement matches, this field will be null.
                        "PercentToNextTier": "int",

                        // Number of measurement matches remaining until the player earns a CSR. If this
                        // field is greater than zero, the player does not have a CSR yet and the other
                        // components of the CSR will be null.
                        "MeasurementMatchesRemaining": "int",

                        // Player's ranking on the CSR leaderboard. If the player is still in measurement
                        // matches, this field will be null. If the player is not in a high enough
                        // designation, this will be zero.
                        "Rank": "int"
                      },

                      // Total amount of time the player spent in matches. This includes time spent observing
                      // the match after being eliminated. This is expressed as an ISO 8601 Duration.
                      "TotalTimePlayed": "string",

                      // Total number of matches that the player participated in.
                      "TotalMatchesStarted": "int",

                      // Total number of matches where the player was present until the match ended.
                      "TotalMatchesCompleted": "int",

                      // Total number of matches that the player won.
                      "TotalMatchesWon": "int",

                      // Total number of matches that the player lost.
                      "TotalMatchesLost": "int",

                      // Total number of times the player has captured a point.
                      "TotalPointCaptures": "int",

                      // Total number of units trained by the player.
                      "TotalUnitsBuilt": "int",

                      // Total number of units trained by the player that were later destroyed.
                      "TotalUnitsLost": "int",

                      // Total number of units that the player participated in destroying.
                      "TotalUnitsDestroyed": "int",

                      // Total number of times the player played a card, if applicable; otherwise, 0.
                      "TotalCardPlays": "int",

                      // Highest wave completed while the player was still present in a match, if applicable;
                      // otherwise, 0.
                      "HighestWaveCompleted": "int",

                      // Summary for all leaders used by the player.
                      "LeaderStats": {

                        // Leader ID. Leaders are available via the Metadata API.
                        "string": {

                          // Total amount of time the player spent in matches with this leader. This includes
                          // time spent observing the match after being eliminated. This is expressed as an
                          // ISO 8601 Duration.
                          "TotalTimePlayed": "string",

                          // Total number of matches that the player participated in with this leader.
                          "TotalMatchesStarted": "int",

                          // Total number of matches where the player was present until the match ended with
                          // this leader.
                          "TotalMatchesCompleted": "int",

                          // Total number of matches that the player won with this leader.
                          "TotalMatchesWon": "int",

                          // Total number of matches that the player lost with this leader.
                          "TotalMatchesLost": "int",

                          // Total number of times the player used this leader's active leader power.
                          "TotalLeaderPowersCast": "int"
                        }
                      },

                      // Game mode that this entry summarizes. If this entry is not summarizing a game mode
                      // pivot, this field will be null. Otherwise, this field will contain one of the
                      // following values:
                      //   Unknown = 0,
                      //   CampaignSolo = 1,
                      //   CampaignCooperative = 2,
                      //   Deathmatch = 3,
                      //   Domination = 4,
                      //   Strongholds = 5,
                      //   Blitz = 6,
                      //   Firefight = 7,
                      //   NormalTutorial = 8,
                      //   BlitzTutorial = 9,
                      //   TerminusFirefight = 10
                      "GameMode": "int",

                      // Highest objective score that the player has ever achieved in matches summarized by
                      // this entry. This field is a mapping from the team size to the highest objective
                      // score achieved.
                      "HighestObjectiveScoreByTeamSize": {

                        "int": "int",

                      }
                    }
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Player Stats Summary
  "/hw2/players/{player}/stats/seasons/{seasonId}":
    get:
      description: >
        <p>Retrieves high-level aggregations across a Season for a Player.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>September 5, 2017:</strong></p>
            <ul>
                <li>Added additional pivots of data: "CustomModeStats", "SinglePlayerModeStats", "MultiplayerModeStats", "SocialModeStats", and "RankedModeStats".</li>
                <li>Added additional fields to the "Summary" contract: "GameMode" and "HighestObjectiveScoreByTeamSize".</li>
                <li>Documented new game mode "Terminus Firefight".</li>
            </ul>
        </div>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Player-Season-Stats-Summary
      parameters:
        - description: The Player's Gamertag.
          in: path
          name: player
          required: true
          schema:
            type: string
        - description: A Season ID or "current" for the current Season. Seasons are
            available via the Metadata API.
          in: path
          name: seasonId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Stats Summary for the Player.
          content:
            application/json:
              examples:
                response:
                  value:
                    RankedPlaylistStats:
                      - GameMode: int
                        HighestCsr:
                          Designation: int
                          MeasurementMatchesRemaining: int
                          PercentToNextTier: int
                          Rank: int
                          Raw: int
                          Tier: int
                        HighestObjectiveScoreByTeamSize:
                          int: int
                        HighestWaveCompleted: int
                        LeaderStats:
                          string:
                            TotalLeaderPowersCast: int
                            TotalMatchesCompleted: int
                            TotalMatchesLost: int
                            TotalMatchesStarted: int
                            TotalMatchesWon: int
                            TotalTimePlayed: string
                        PlaylistClassification: int
                        PlaylistId: guid
                        TotalCardPlays: int
                        TotalMatchesCompleted: int
                        TotalMatchesLost: int
                        TotalMatchesStarted: int
                        TotalMatchesWon: int
                        TotalPointCaptures: int
                        TotalTimePlayed: string
                        TotalUnitsBuilt: int
                        TotalUnitsDestroyed: int
                        TotalUnitsLost: int
                    SeasonId: guid
        "404":
          description: Specified Player was not found.
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Player Season Stats Summary
  "/hw2/playlist/{playlistId}/rating":
    get:
      description: >
        <p>Retrieves Playlist Ratings in the current season for one or more
        Players.</p>

        <br />

        <h4>Changelog</h4>

        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Player-Playlist-Ratings
      parameters:
        - description: The ID of the Playlist to get Ratings for.
          in: path
          name: playlistId
          required: true
          schema:
            type: string
        - description: A comma-separated list of Gamertags. Up to 6 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the Playlist Ratings for the
            Player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: {}
                    Results:
                      - Id: string
                        Result:
                          Csr:
                            Designation: int
                            MeasurementMatchesRemaining: int
                            PercentToNextTier: int
                            Rank: int
                            Raw: int
                            Tier: int
                          Mmr:
                            LastModifiedDate:
                              ISO8601Date: ""
                            Rating: double
                            Variance: double
                        ResultCode: int
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Player Playlist Ratings
  /hw2/xp:
    get:
      description: |
        <p>Retrieves XP and Rank information for one or more players.</p>
        <br />
        <h4>Changelog</h4>
        <div class="panel-body">
            <p><strong>February 21, 2017:</strong></p>
            <ul>
                <li>Added Endpoint.</li>
            </ul>
        </div>
      operationId: Halo-Wars-2-Player-XPs
      parameters:
        - description: A comma-separated list of Gamertags. Up to 6 Gamertags may be
            specified.
          in: query
          name: players
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The response body will contain the XPs for the Player(s).
          content:
            application/json:
              examples:
                response:
                  value:
                    Links: {}
                    Results:
                      - Id: string
                        Result:
                          CampaignXp: int
                          LastUpdatedDateUtc:
                            ISO8601Date: string
                          MultiplayerXp: int
                          SpartanRankId: guid
                          TotalXp: int
                        ResultCode: int
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
      summary: Halo Wars 2 - Player XPs
servers:
  - url: https://www.haloapi.com/stats
components:
  securitySchemes:
    apiKeyHeader:
      in: header
      name: Ocp-Apim-Subscription-Key
      type: apiKey
    apiKeyQuery:
      in: query
      name: subscription-key
      type: apiKey
