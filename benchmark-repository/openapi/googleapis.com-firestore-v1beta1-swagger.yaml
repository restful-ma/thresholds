openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: >
    Accesses the NoSQL document database built for automatic scaling, high
    performance, and ease of application development.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Cloud Firestore
  version: v1beta1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - backend
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://firestore.googleapis.com/$discovery/rest?version=v1beta1
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: firestore
externalDocs:
  url: https://cloud.google.com/firestore
tags:
  - name: projects
paths:
  "/v1beta1/{database}/documents:batchGet":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Gets multiple documents.


        Documents returned by this method are not guaranteed to be returned in the

        same order that they were requested.
      operationId: firestore.projects.databases.documents.batchGet
      parameters:
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetDocumentsRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BatchGetDocumentsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{database}/documents:beginTransaction":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Starts a new transaction.
      operationId: firestore.projects.databases.documents.beginTransaction
      parameters:
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeginTransactionRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BeginTransactionResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{database}/documents:commit":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Commits a transaction, while optionally updating documents.
      operationId: firestore.projects.databases.documents.commit
      parameters:
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/CommitResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{database}/documents:listen":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Listens to changes.
      operationId: firestore.projects.databases.documents.listen
      parameters:
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListenRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListenResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{database}/documents:rollback":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Rolls back a transaction.
      operationId: firestore.projects.databases.documents.rollback
      parameters:
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollbackRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{database}/documents:write":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Streams batches of document updates and deletes, in order.
      operationId: firestore.projects.databases.documents.write
      parameters:
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
            This is only required in the first message.
          in: path
          name: database
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WriteRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/WriteResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{name}":
    delete:
      description: Deletes an index.
      operationId: firestore.projects.databases.indexes.delete
      parameters:
        - description: |-
            When set to `true`, the target document must exist.
            When set to `false`, the target document must not exist.
          in: query
          name: currentDocument.exists
          schema:
            type: boolean
        - description: >-
            When set, the target document must exist and have been last updated
            at

            that time.
          in: query
          name: currentDocument.updateTime
          schema:
            type: string
        - description: |-
            The index name. For example:
            `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
    get:
      description: Gets an index.
      operationId: firestore.projects.databases.indexes.get
      parameters:
        - description: |-
            The list of field paths in the mask. See Document.fields for a field
            path syntax reference.
          in: query
          name: mask.fieldPaths
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: |-
            The name of the index. For example:
            `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            Reads the version of the document at the given time.
            This may not be older than 60 seconds.
          in: query
          name: readTime
          schema:
            type: string
        - description: Reads the document in a transaction.
          in: query
          name: transaction
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Index"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    patch:
      description: Updates or inserts a document.
      operationId: firestore.projects.databases.documents.patch
      parameters:
        - description: |-
            When set to `true`, the target document must exist.
            When set to `false`, the target document must not exist.
          in: query
          name: currentDocument.exists
          schema:
            type: boolean
        - description: >-
            When set, the target document must exist and have been last updated
            at

            that time.
          in: query
          name: currentDocument.updateTime
          schema:
            type: string
        - description: |-
            The list of field paths in the mask. See Document.fields for a field
            path syntax reference.
          in: query
          name: mask.fieldPaths
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            The resource name of the document, for example

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            The list of field paths in the mask. See Document.fields for a field
            path syntax reference.
          in: query
          name: updateMask.fieldPaths
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        $ref: "#/components/requestBodies/Document"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Document"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{name}:exportDocuments":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Exports a copy of all or a subset of documents from Google Cloud
        Firestore

        to another storage system, such as Google Cloud Storage. Recent updates to

        documents may not be reflected in the export. The export occurs in the

        background and its progress can be monitored and managed via the

        Operation resource that is created. The output of an export may only be

        used once the associated operation is done. If an export operation is

        cancelled before completion it may leave partial data behind in Google

        Cloud Storage.
      operationId: firestore.projects.databases.exportDocuments
      parameters:
        - description: |-
            Database to export. Should be of the form:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1ExportDocument\
                sRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{name}:importDocuments":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Imports documents into Google Cloud Firestore. Existing documents with
        the

        same name are overwritten. The import occurs in the background and its

        progress can be monitored and managed via the Operation resource that is

        created. If an ImportDocuments operation is cancelled, it is possible

        that a subset of the data has already been imported to Cloud Firestore.
      operationId: firestore.projects.databases.importDocuments
      parameters:
        - description: |-
            Database to import into. Should be of the form:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1ImportDocument\
                sRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{parent}/indexes":
    get:
      description: Lists the indexes that match the specified filters.
      operationId: firestore.projects.databases.indexes.list
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - description: The standard List page size.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The standard List page token.
          in: query
          name: pageToken
          schema:
            type: string
        - description: |-
            The database name. For example:
            `projects/{project_id}/databases/{database_id}`
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1ListIndexesR\
                  esponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Creates the specified index.

        A newly created index's initial state is `CREATING`. On completion of the

        returned google.longrunning.Operation, the state will be `READY`.

        If the index already exists, the call will return an `ALREADY_EXISTS`

        status.


        During creation, the process could result in an error, in which case the

        index will move to the `ERROR` state. The process can be recovered by

        fixing the data that caused the error, removing the index with

        delete, then re-creating the index with

        create.


        Indexes with a single field cannot be created.
      operationId: firestore.projects.databases.indexes.create
      parameters:
        - description: |-
            The name of the database this index will apply to. For example:
            `projects/{project_id}/databases/{database_id}`
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Index"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GoogleLongrunningOperation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{parent}/{collectionId}":
    get:
      description: Lists documents.
      operationId: firestore.projects.databases.documents.list
      parameters:
        - description: >-
            The collection ID, relative to `parent`, to list. For example:
            `chatrooms`

            or `messages`.
          in: path
          name: collectionId
          required: true
          schema:
            type: string
        - description: |-
            The list of field paths in the mask. See Document.fields for a field
            path syntax reference.
          in: query
          name: mask.fieldPaths
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: "The order to sort results by. For example: `priority desc, name`."
          in: query
          name: orderBy
          schema:
            type: string
        - description: The maximum number of documents to return.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The `next_page_token` value returned from a previous List request,
            if any.
          in: query
          name: pageToken
          schema:
            type: string
        - description: >-
            The parent resource name. In the format:

            `projects/{project_id}/databases/{database_id}/documents` or

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents` or

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            Reads documents as they were at the given time.
            This may not be older than 60 seconds.
          in: query
          name: readTime
          schema:
            type: string
        - description: >-
            If the list should show missing documents. A missing document is a

            document that does not exist but has sub-documents. These documents will

            be returned with a key but will not have fields, Document.create_time,

            or Document.update_time set.


            Requests with `show_missing` may not specify `where` or

            `order_by`.
          in: query
          name: showMissing
          schema:
            type: boolean
        - description: Reads documents in a transaction.
          in: query
          name: transaction
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Creates a new document.
      operationId: firestore.projects.databases.documents.createDocument
      parameters:
        - description: "The collection ID, relative to `parent`, to list. For example:
            `chatrooms`."
          in: path
          name: collectionId
          required: true
          schema:
            type: string
        - description: |-
            The client-assigned document ID to use for this document.

            Optional. If not specified, an ID will be assigned by the service.
          in: query
          name: documentId
          schema:
            type: string
        - description: |-
            The list of field paths in the mask. See Document.fields for a field
            path syntax reference.
          in: query
          name: mask.fieldPaths
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            The parent resource. For example:

            `projects/{project_id}/databases/{database_id}/documents` or

            `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Document"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Document"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{parent}:listCollectionIds":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Lists all the collection IDs underneath a document.
      operationId: firestore.projects.databases.documents.listCollectionIds
      parameters:
        - description: >-
            The parent document. In the format:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCollectionIdsRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListCollectionIdsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta1/{parent}:runQuery":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Runs a query.
      operationId: firestore.projects.databases.documents.runQuery
      parameters:
        - description: >-
            The parent resource name. In the format:

            `projects/{project_id}/databases/{database_id}/documents` or

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents` or

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunQueryRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/RunQueryResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
servers:
  - url: https://firestore.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  requestBodies:
    Document:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Document"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
            https://www.googleapis.com/auth/datastore: View and manage your Google Cloud Datastore data
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
            https://www.googleapis.com/auth/datastore: View and manage your Google Cloud Datastore data
  schemas:
    ArrayValue:
      description: An array value.
      properties:
        values:
          description: Values in the array.
          items:
            $ref: "#/components/schemas/Value"
          type: array
      type: object
    BatchGetDocumentsRequest:
      description: The request for Firestore.BatchGetDocuments.
      properties:
        documents:
          description: >-
            The names of the documents to retrieve. In the format:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            The request will fail if any of the document is not a child resource of the

            given `database`. Duplicate names will be elided.
          items:
            type: string
          type: array
        mask:
          $ref: "#/components/schemas/DocumentMask"
        newTransaction:
          $ref: "#/components/schemas/TransactionOptions"
        readTime:
          description: |-
            Reads documents as they were at the given time.
            This may not be older than 60 seconds.
          format: google-datetime
          type: string
        transaction:
          description: Reads documents in a transaction.
          format: byte
          type: string
      type: object
    BatchGetDocumentsResponse:
      description: The streamed response for Firestore.BatchGetDocuments.
      properties:
        found:
          $ref: "#/components/schemas/Document"
        missing:
          description: >-
            A document name that was requested but does not exist. In the
            format:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
          type: string
        readTime:
          description: >-
            The time at which the document was read.

            This may be monotically increasing, in this case the previous documents in

            the result stream are guaranteed not to have changed between their

            read_time and this one.
          format: google-datetime
          type: string
        transaction:
          description: |-
            The transaction that was started as part of this request.
            Will only be set in the first response, and only if
            BatchGetDocumentsRequest.new_transaction was set in the request.
          format: byte
          type: string
      type: object
    BeginTransactionRequest:
      description: The request for Firestore.BeginTransaction.
      properties:
        options:
          $ref: "#/components/schemas/TransactionOptions"
      type: object
    BeginTransactionResponse:
      description: The response for Firestore.BeginTransaction.
      properties:
        transaction:
          description: The transaction that was started.
          format: byte
          type: string
      type: object
    CollectionSelector:
      description: A selection of a collection, such as `messages as m1`.
      properties:
        allDescendants:
          description: |-
            When false, selects only collections that are immediate children of
            the `parent` specified in the containing `RunQueryRequest`.
            When true, selects all descendant collections.
          type: boolean
        collectionId:
          description: |-
            The collection ID.
            When set, selects only collections with this ID.
          type: string
      type: object
    CommitRequest:
      description: The request for Firestore.Commit.
      properties:
        transaction:
          description: If set, applies all writes in this transaction, and commits it.
          format: byte
          type: string
        writes:
          description: |-
            The writes to apply.

            Always executed atomically and in order.
          items:
            $ref: "#/components/schemas/Write"
          type: array
      type: object
    CommitResponse:
      description: The response for Firestore.Commit.
      properties:
        commitTime:
          description: The time at which the commit occurred.
          format: google-datetime
          type: string
        writeResults:
          description: |-
            The result of applying the writes.

            This i-th write result corresponds to the i-th write in the
            request.
          items:
            $ref: "#/components/schemas/WriteResult"
          type: array
      type: object
    CompositeFilter:
      description: A filter that merges multiple other filters using the given operator.
      properties:
        filters:
          description: |-
            The list of filters to combine.
            Must contain at least one filter.
          items:
            $ref: "#/components/schemas/Filter"
          type: array
        op:
          description: The operator for combining multiple filters.
          enum:
            - OPERATOR_UNSPECIFIED
            - AND
          type: string
      type: object
    Cursor:
      description: A position in a query result set.
      properties:
        before:
          description: >-
            If the position is just before or just after the given values,
            relative

            to the sort order defined by the query.
          type: boolean
        values:
          description: |-
            The values that represent a position, in the order they appear in
            the order by clause of a query.

            Can contain fewer values than specified in the order by clause.
          items:
            $ref: "#/components/schemas/Value"
          type: array
      type: object
    Document:
      description: |-
        A Firestore document.

        Must not exceed 1 MiB - 4 bytes.
      properties:
        createTime:
          description: >-
            Output only. The time at which the document was created.


            This value increases monotonically when a document is deleted then

            recreated. It can also be compared to values from other documents and

            the `read_time` of a query.
          format: google-datetime
          type: string
        fields:
          additionalProperties:
            $ref: "#/components/schemas/Value"
          description: >-
            The document's fields.


            The map keys represent field names.


            A simple field name contains only characters `a` to `z`, `A` to `Z`,

            `0` to `9`, or `_`, and must not start with `0` to `9`. For example,

            `foo_bar_17`.


            Field names matching the regular expression `__.*__` are reserved. Reserved

            field names are forbidden except in certain documented contexts. The map

            keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be

            empty.


            Field paths may be used in other contexts to refer to structured fields

            defined here. For `map_value`, the field path is represented by the simple

            or quoted field names of the containing fields, delimited by `.`. For

            example, the structured field

            `"foo" : { map_value: { "x&y" : { string_value: "hello" }}}` would be

            represented by the field path `foo.x&y`.


            Within a field path, a quoted field name starts and ends with `` ` `` and

            may contain any character. Some characters, including `` ` ``, must be

            escaped using a `\`. For example, `` `x&y` `` represents `x&y` and

            `` `bak\`tik` `` represents `` bak`tik ``.
          type: object
        name:
          description: >-
            The resource name of the document, for example

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
          type: string
        updateTime:
          description: >-
            Output only. The time at which the document was last changed.


            This value is initially set to the `create_time` then increases

            monotonically with each change to the document. It can also be

            compared to values from other documents and the `read_time` of a query.
          format: google-datetime
          type: string
      type: object
    DocumentChange:
      description: |-
        A Document has changed.

        May be the result of multiple writes, including deletes, that
        ultimately resulted in a new value for the Document.

        Multiple DocumentChange messages may be returned for the same logical
        change, if multiple targets are affected.
      properties:
        document:
          $ref: "#/components/schemas/Document"
        removedTargetIds:
          description: A set of target IDs for targets that no longer match this document.
          items:
            format: int32
            type: integer
          type: array
        targetIds:
          description: A set of target IDs of targets that match this document.
          items:
            format: int32
            type: integer
          type: array
      type: object
    DocumentDelete:
      description: |-
        A Document has been deleted.

        May be the result of multiple writes, including updates, the
        last of which deleted the Document.

        Multiple DocumentDelete messages may be returned for the same logical
        delete, if multiple targets are affected.
      properties:
        document:
          description: The resource name of the Document that was deleted.
          type: string
        readTime:
          description: |-
            The read timestamp at which the delete was observed.

            Greater or equal to the `commit_time` of the delete.
          format: google-datetime
          type: string
        removedTargetIds:
          description: A set of target IDs for targets that previously matched this entity.
          items:
            format: int32
            type: integer
          type: array
      type: object
    DocumentMask:
      description: >-
        A set of field paths on a document.

        Used to restrict a get or update operation on a document to a subset of its

        fields.

        This is different from standard field masks, as this is always scoped to a

        Document, and takes in account the dynamic nature of Value.
      properties:
        fieldPaths:
          description: |-
            The list of field paths in the mask. See Document.fields for a field
            path syntax reference.
          items:
            type: string
          type: array
      type: object
    DocumentRemove:
      description: >-
        A Document has been removed from the view of the targets.


        Sent if the document is no longer relevant to a target and is out of view.

        Can be sent instead of a DocumentDelete or a DocumentChange if the server

        can not send the new value of the document.


        Multiple DocumentRemove messages may be returned for the same logical

        write or delete, if multiple targets are affected.
      properties:
        document:
          description: The resource name of the Document that has gone out of view.
          type: string
        readTime:
          description: |-
            The read timestamp at which the remove was observed.

            Greater or equal to the `commit_time` of the change/delete/remove.
          format: google-datetime
          type: string
        removedTargetIds:
          description: A set of target IDs for targets that previously matched this
            document.
          items:
            format: int32
            type: integer
          type: array
      type: object
    DocumentTransform:
      description: A transformation of a document.
      properties:
        document:
          description: The name of the document to transform.
          type: string
        fieldTransforms:
          description: >-
            The list of transformations to apply to the fields of the document,
            in

            order.

            This must not be empty.
          items:
            $ref: "#/components/schemas/FieldTransform"
          type: array
      type: object
    DocumentsTarget:
      description: A target specified by a set of documents names.
      properties:
        documents:
          description: >-
            The names of the documents to retrieve. In the format:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            The request will fail if any of the document is not a child resource of

            the given `database`. Duplicate names will be elided.
          items:
            type: string
          type: array
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    ExistenceFilter:
      description: A digest of all the documents that match a given target.
      properties:
        count:
          description: >-
            The total count of documents that match target_id.


            If different from the count of documents in the client that match, the

            client must manually determine which documents no longer match the target.
          format: int32
          type: integer
        targetId:
          description: The target ID to which this filter applies.
          format: int32
          type: integer
      type: object
    FieldFilter:
      description: A filter on a specific field.
      properties:
        field:
          $ref: "#/components/schemas/FieldReference"
        op:
          description: The operator to filter by.
          enum:
            - OPERATOR_UNSPECIFIED
            - LESS_THAN
            - LESS_THAN_OR_EQUAL
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL
            - EQUAL
            - ARRAY_CONTAINS
          type: string
        value:
          $ref: "#/components/schemas/Value"
      type: object
    FieldReference:
      description: A reference to a field, such as `max(messages.time) as max_time`.
      properties:
        fieldPath:
          type: string
      type: object
    FieldTransform:
      description: A transformation of a field of the document.
      properties:
        appendMissingElements:
          $ref: "#/components/schemas/ArrayValue"
        fieldPath:
          description: |-
            The path of the field. See Document.fields for the field path syntax
            reference.
          type: string
        increment:
          $ref: "#/components/schemas/Value"
        maximum:
          $ref: "#/components/schemas/Value"
        minimum:
          $ref: "#/components/schemas/Value"
        removeAllFromArray:
          $ref: "#/components/schemas/ArrayValue"
        setToServerValue:
          description: Sets the field to the given server value.
          enum:
            - SERVER_VALUE_UNSPECIFIED
            - REQUEST_TIME
          type: string
      type: object
    Filter:
      description: A filter.
      properties:
        compositeFilter:
          $ref: "#/components/schemas/CompositeFilter"
        fieldFilter:
          $ref: "#/components/schemas/FieldFilter"
        unaryFilter:
          $ref: "#/components/schemas/UnaryFilter"
      type: object
    GoogleFirestoreAdminV1beta1ExportDocumentsMetadata:
      description: Metadata for ExportDocuments operations.
      properties:
        collectionIds:
          description: Which collection ids are being exported.
          items:
            type: string
          type: array
        endTime:
          description: >-
            The time the operation ended, either successfully or otherwise.
            Unset if

            the operation is still active.
          format: google-datetime
          type: string
        operationState:
          description: The state of the export operation.
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          type: string
        outputUriPrefix:
          description: Where the entities are being exported to.
          type: string
        progressBytes:
          $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Progress"
        progressDocuments:
          $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Progress"
        startTime:
          description: The time that work began on the operation.
          format: google-datetime
          type: string
      type: object
    GoogleFirestoreAdminV1beta1ExportDocumentsRequest:
      description: The request for FirestoreAdmin.ExportDocuments.
      properties:
        collectionIds:
          description: Which collection ids to export. Unspecified means all collections.
          items:
            type: string
          type: array
        outputUriPrefix:
          description: >-
            The output URI. Currently only supports Google Cloud Storage URIs of
            the

            form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name

            of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional

            Google Cloud Storage namespace path. When

            choosing a name, be sure to consider Google Cloud Storage naming

            guidelines: https://cloud.google.com/storage/docs/naming.

            If the URI is a bucket (without a namespace path), a prefix will be

            generated based on the start time.
          type: string
      type: object
    GoogleFirestoreAdminV1beta1ExportDocumentsResponse:
      description: Returned in the google.longrunning.Operation response field.
      properties:
        outputUriPrefix:
          description: >-
            Location of the output files. This can be used to begin an import

            into Cloud Firestore (this project or another project) after the operation

            completes successfully.
          type: string
      type: object
    GoogleFirestoreAdminV1beta1ImportDocumentsMetadata:
      description: Metadata for ImportDocuments operations.
      properties:
        collectionIds:
          description: Which collection ids are being imported.
          items:
            type: string
          type: array
        endTime:
          description: >-
            The time the operation ended, either successfully or otherwise.
            Unset if

            the operation is still active.
          format: google-datetime
          type: string
        inputUriPrefix:
          description: The location of the documents being imported.
          type: string
        operationState:
          description: The state of the import operation.
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          type: string
        progressBytes:
          $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Progress"
        progressDocuments:
          $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Progress"
        startTime:
          description: The time that work began on the operation.
          format: google-datetime
          type: string
      type: object
    GoogleFirestoreAdminV1beta1ImportDocumentsRequest:
      description: The request for FirestoreAdmin.ImportDocuments.
      properties:
        collectionIds:
          description: >-
            Which collection ids to import. Unspecified means all collections
            included

            in the import.
          items:
            type: string
          type: array
        inputUriPrefix:
          description: >-
            Location of the exported files.

            This must match the output_uri_prefix of an ExportDocumentsResponse from

            an export that has completed successfully.

            See:

            google.firestore.admin.v1beta1.ExportDocumentsResponse.output_uri_prefix.
          type: string
      type: object
    GoogleFirestoreAdminV1beta1Index:
      description: An index definition.
      properties:
        collectionId:
          description: The collection ID to which this index applies. Required.
          type: string
        fields:
          description: The fields to index.
          items:
            $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1IndexField"
          type: array
        name:
          description: |-
            The resource name of the index.
            Output only.
          type: string
        state:
          description: |-
            The state of the index.
            Output only.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - READY
            - ERROR
          type: string
      type: object
    GoogleFirestoreAdminV1beta1IndexField:
      description: A field of an index.
      properties:
        fieldPath:
          description: >-
            The path of the field. Must match the field path specification
            described

            by google.firestore.v1beta1.Document.fields.

            Special field path `__name__` may be used by itself or at the end of a

            path. `__type__` may be used only at the end of path.
          type: string
        mode:
          description: The field's mode.
          enum:
            - MODE_UNSPECIFIED
            - ASCENDING
            - DESCENDING
            - ARRAY_CONTAINS
          type: string
      type: object
    GoogleFirestoreAdminV1beta1IndexOperationMetadata:
      description: |-
        Metadata for index operations. This metadata populates
        the metadata field of google.longrunning.Operation.
      properties:
        cancelled:
          description: |-
            True if the [google.longrunning.Operation] was cancelled. If the
            cancellation is in progress, cancelled will be true but
            google.longrunning.Operation.done will be false.
          type: boolean
        documentProgress:
          $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Progress"
        endTime:
          description: >-
            The time the operation ended, either successfully or otherwise.
            Unset if

            the operation is still active.
          format: google-datetime
          type: string
        index:
          description: |-
            The index resource that this operation is acting on. For example:
            `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
          type: string
        operationType:
          description: The type of index operation.
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - CREATING_INDEX
          type: string
        startTime:
          description: The time that work began on the operation.
          format: google-datetime
          type: string
      type: object
    GoogleFirestoreAdminV1beta1ListIndexesResponse:
      description: The response for FirestoreAdmin.ListIndexes.
      properties:
        indexes:
          description: The indexes.
          items:
            $ref: "#/components/schemas/GoogleFirestoreAdminV1beta1Index"
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
    GoogleFirestoreAdminV1beta1LocationMetadata:
      description: The metadata message for google.cloud.location.Location.metadata.
      properties: {}
      type: object
    GoogleFirestoreAdminV1beta1Progress:
      description: Measures the progress of a particular metric.
      properties:
        workCompleted:
          description: >-
            An estimate of how much work has been completed. Note that this may
            be

            greater than `work_estimated`.
          format: int64
          type: string
        workEstimated:
          description: |-
            An estimate of how much work needs to be performed. Zero if the
            work estimate is unavailable. May change as work progresses.
          format: int64
          type: string
      type: object
    GoogleLongrunningOperation:
      description: >-
        This resource represents a long-running operation that is the result of
        a

        network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress.

            If `true`, the operation is completed, and either `error` or `response` is

            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation.  It
            typically

            contains progress information and common metadata such as create time.

            Some services might not provide such metadata.  Any method that returns a

            long-running operation should document the metadata type, if any.
          type: object
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that

            originally returns it. If you use the default HTTP mapping, the

            `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The normal response of the operation in case of success.  If the
            original

            method returns no data on success, such as `Delete`, the response is

            `google.protobuf.Empty`.  If the original method is standard

            `Get`/`Create`/`Update`, the response should be the resource.  For other

            methods, the response should have the type `XxxResponse`, where `Xxx`

            is the original method name.  For example, if the original method name

            is `TakeSnapshot()`, the inferred response type is

            `TakeSnapshotResponse`.
          type: object
      type: object
    LatLng:
      description: >-
        An object representing a latitude/longitude pair. This is expressed as a
        pair

        of doubles representing degrees latitude and degrees longitude. Unless

        specified otherwise, this must conform to the

        <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84

        standard</a>. Values must be within normalized ranges.
      properties:
        latitude:
          description: The latitude in degrees. It must be in the range [-90.0, +90.0].
          format: double
          type: number
        longitude:
          description: The longitude in degrees. It must be in the range [-180.0, +180.0].
          format: double
          type: number
      type: object
    ListCollectionIdsRequest:
      description: The request for Firestore.ListCollectionIds.
      properties:
        pageSize:
          description: The maximum number of results to return.
          format: int32
          type: integer
        pageToken:
          description: |-
            A page token. Must be a value from
            ListCollectionIdsResponse.
          type: string
      type: object
    ListCollectionIdsResponse:
      description: The response from Firestore.ListCollectionIds.
      properties:
        collectionIds:
          description: The collection ids.
          items:
            type: string
          type: array
        nextPageToken:
          description: A page token that may be used to continue the list.
          type: string
      type: object
    ListDocumentsResponse:
      description: The response for Firestore.ListDocuments.
      properties:
        documents:
          description: The Documents found.
          items:
            $ref: "#/components/schemas/Document"
          type: array
        nextPageToken:
          description: The next page token.
          type: string
      type: object
    ListenRequest:
      description: A request for Firestore.Listen
      properties:
        addTarget:
          $ref: "#/components/schemas/Target"
        labels:
          additionalProperties:
            type: string
          description: Labels associated with this target change.
          type: object
        removeTarget:
          description: The ID of a target to remove from this stream.
          format: int32
          type: integer
      type: object
    ListenResponse:
      description: The response for Firestore.Listen.
      properties:
        documentChange:
          $ref: "#/components/schemas/DocumentChange"
        documentDelete:
          $ref: "#/components/schemas/DocumentDelete"
        documentRemove:
          $ref: "#/components/schemas/DocumentRemove"
        filter:
          $ref: "#/components/schemas/ExistenceFilter"
        targetChange:
          $ref: "#/components/schemas/TargetChange"
      type: object
    MapValue:
      description: A map value.
      properties:
        fields:
          additionalProperties:
            $ref: "#/components/schemas/Value"
          description: >-
            The map's fields.


            The map keys represent field names. Field names matching the regular

            expression `__.*__` are reserved. Reserved field names are forbidden except

            in certain documented contexts. The map keys, represented as UTF-8, must

            not exceed 1,500 bytes and cannot be empty.
          type: object
      type: object
    Order:
      description: An order on a field.
      properties:
        direction:
          description: The direction to order by. Defaults to `ASCENDING`.
          enum:
            - DIRECTION_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          type: string
        field:
          $ref: "#/components/schemas/FieldReference"
      type: object
    Precondition:
      description: A precondition on a document, used for conditional operations.
      properties:
        exists:
          description: |-
            When set to `true`, the target document must exist.
            When set to `false`, the target document must not exist.
          type: boolean
        updateTime:
          description: >-
            When set, the target document must exist and have been last updated
            at

            that time.
          format: google-datetime
          type: string
      type: object
    Projection:
      description: The projection of document's fields to return.
      properties:
        fields:
          description: |-
            The fields to return.

            If empty, all fields are returned. To only return the name
            of the document, use `['__name__']`.
          items:
            $ref: "#/components/schemas/FieldReference"
          type: array
      type: object
    QueryTarget:
      description: A target specified by a query.
      properties:
        parent:
          description: >-
            The parent resource name. In the format:

            `projects/{project_id}/databases/{database_id}/documents` or

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents` or

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          type: string
        structuredQuery:
          $ref: "#/components/schemas/StructuredQuery"
      type: object
    ReadOnly:
      description: Options for a transaction that can only be used to read documents.
      properties:
        readTime:
          description: |-
            Reads documents at the given time.
            This may not be older than 60 seconds.
          format: google-datetime
          type: string
      type: object
    ReadWrite:
      description: Options for a transaction that can be used to read and write documents.
      properties:
        retryTransaction:
          description: An optional transaction to retry.
          format: byte
          type: string
      type: object
    RollbackRequest:
      description: The request for Firestore.Rollback.
      properties:
        transaction:
          description: The transaction to roll back.
          format: byte
          type: string
      type: object
    RunQueryRequest:
      description: The request for Firestore.RunQuery.
      properties:
        newTransaction:
          $ref: "#/components/schemas/TransactionOptions"
        readTime:
          description: |-
            Reads documents as they were at the given time.
            This may not be older than 60 seconds.
          format: google-datetime
          type: string
        structuredQuery:
          $ref: "#/components/schemas/StructuredQuery"
        transaction:
          description: Reads documents in a transaction.
          format: byte
          type: string
      type: object
    RunQueryResponse:
      description: The response for Firestore.RunQuery.
      properties:
        document:
          $ref: "#/components/schemas/Document"
        readTime:
          description: >-
            The time at which the document was read. This may be monotonically

            increasing; in this case, the previous documents in the result stream are

            guaranteed not to have changed between their `read_time` and this one.


            If the query returns no results, a response with `read_time` and no

            `document` will be sent, and this represents the time at which the query

            was run.
          format: google-datetime
          type: string
        skippedResults:
          description: >-
            The number of results that have been skipped due to an offset
            between

            the last response and the current response.
          format: int32
          type: integer
        transaction:
          description: |-
            The transaction that was started as part of this request.
            Can only be set in the first response, and only if
            RunQueryRequest.new_transaction was set in the request.
            If set, no other fields will be set in this response.
          format: byte
          type: string
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    StructuredQuery:
      description: A Firestore query.
      properties:
        endAt:
          $ref: "#/components/schemas/Cursor"
        from:
          description: The collections to query.
          items:
            $ref: "#/components/schemas/CollectionSelector"
          type: array
        limit:
          description: |-
            The maximum number of results to return.

            Applies after all other constraints.
            Must be >= 0 if specified.
          format: int32
          type: integer
        offset:
          description: >-
            The number of results to skip.


            Applies before limit, but after all other constraints. Must be >= 0 if

            specified.
          format: int32
          type: integer
        orderBy:
          description: >-
            The order to apply to the query results.


            Firestore guarantees a stable ordering through the following rules:

             * Any field required to appear in `order_by`, that is not already
               specified in `order_by`, is appended to the order in field name order
               by default.
             * If an order on `__name__` is not specified, it is appended by default.

            Fields are appended with the same sort direction as the last order

            specified, or 'ASCENDING' if no order was specified. For example:

             * `SELECT * FROM Foo ORDER BY A` becomes
               `SELECT * FROM Foo ORDER BY A, __name__`
             * `SELECT * FROM Foo ORDER BY A DESC` becomes
               `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`
             * `SELECT * FROM Foo WHERE A > 1` becomes
               `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
          items:
            $ref: "#/components/schemas/Order"
          type: array
        select:
          $ref: "#/components/schemas/Projection"
        startAt:
          $ref: "#/components/schemas/Cursor"
        where:
          $ref: "#/components/schemas/Filter"
      type: object
    Target:
      description: A specification of a set of documents to listen to.
      properties:
        documents:
          $ref: "#/components/schemas/DocumentsTarget"
        once:
          description: If the target should be removed once it is current and consistent.
          type: boolean
        query:
          $ref: "#/components/schemas/QueryTarget"
        readTime:
          description: |-
            Start listening after a specific `read_time`.

            The client must know the state of matching documents at this time.
          format: google-datetime
          type: string
        resumeToken:
          description: >-
            A resume token from a prior TargetChange for an identical target.


            Using a resume token with a different target is unsupported and may fail.
          format: byte
          type: string
        targetId:
          description: >-
            The target ID that identifies the target on the stream. Must be a
            positive

            number and non-zero.
          format: int32
          type: integer
      type: object
    TargetChange:
      description: Targets being watched have changed.
      properties:
        cause:
          $ref: "#/components/schemas/Status"
        readTime:
          description: >-
            The consistent `read_time` for the given `target_ids` (omitted when
            the

            target_ids are not at a consistent snapshot).


            The stream is guaranteed to send a `read_time` with `target_ids` empty

            whenever the entire stream reaches a new consistent snapshot. ADD,

            CURRENT, and RESET messages are guaranteed to (eventually) result in a

            new consistent snapshot (while NO_CHANGE and REMOVE messages are not).


            For a given stream, `read_time` is guaranteed to be monotonically

            increasing.
          format: google-datetime
          type: string
        resumeToken:
          description: >-
            A token that can be used to resume the stream for the given
            `target_ids`,

            or all targets if `target_ids` is empty.


            Not set on every target change.
          format: byte
          type: string
        targetChangeType:
          description: The type of change that occurred.
          enum:
            - NO_CHANGE
            - ADD
            - REMOVE
            - CURRENT
            - RESET
          type: string
        targetIds:
          description: |-
            The target IDs of targets that have changed.

            If empty, the change applies to all targets.

            The order of the target IDs is not defined.
          items:
            format: int32
            type: integer
          type: array
      type: object
    TransactionOptions:
      description: Options for creating a new transaction.
      properties:
        readOnly:
          $ref: "#/components/schemas/ReadOnly"
        readWrite:
          $ref: "#/components/schemas/ReadWrite"
      type: object
    UnaryFilter:
      description: A filter with a single operand.
      properties:
        field:
          $ref: "#/components/schemas/FieldReference"
        op:
          description: The unary operator to apply.
          enum:
            - OPERATOR_UNSPECIFIED
            - IS_NAN
            - IS_NULL
          type: string
      type: object
    Value:
      description: A message that can hold any of the supported value types.
      properties:
        arrayValue:
          $ref: "#/components/schemas/ArrayValue"
        booleanValue:
          description: A boolean value.
          type: boolean
        bytesValue:
          description: |-
            A bytes value.

            Must not exceed 1 MiB - 89 bytes.
            Only the first 1,500 bytes are considered by queries.
          format: byte
          type: string
        doubleValue:
          description: A double value.
          format: double
          type: number
        geoPointValue:
          $ref: "#/components/schemas/LatLng"
        integerValue:
          description: An integer value.
          format: int64
          type: string
        mapValue:
          $ref: "#/components/schemas/MapValue"
        nullValue:
          description: A null value.
          enum:
            - NULL_VALUE
          type: string
        referenceValue:
          description: >-
            A reference to a document. For example:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
          type: string
        stringValue:
          description: >-
            A string value.


            The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes.

            Only the first 1,500 bytes of the UTF-8 representation are considered by

            queries.
          type: string
        timestampValue:
          description: >-
            A timestamp value.


            Precise only to microseconds. When stored, any additional precision is

            rounded down.
          format: google-datetime
          type: string
      type: object
    Write:
      description: A write on a document.
      properties:
        currentDocument:
          $ref: "#/components/schemas/Precondition"
        delete:
          description: >-
            A document name to delete. In the format:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
          type: string
        transform:
          $ref: "#/components/schemas/DocumentTransform"
        update:
          $ref: "#/components/schemas/Document"
        updateMask:
          $ref: "#/components/schemas/DocumentMask"
      type: object
    WriteRequest:
      description: >-
        The request for Firestore.Write.


        The first request creates a stream, or resumes an existing one from a token.


        When creating a new stream, the server replies with a response containing

        only an ID and a token, to use in the next request.


        When resuming a stream, the server first streams any responses later than the

        given token, then a response containing only an up-to-date token, to use in

        the next request.
      properties:
        labels:
          additionalProperties:
            type: string
          description: Labels associated with this write request.
          type: object
        streamId:
          description: >-
            The ID of the write stream to resume.

            This may only be set in the first message. When left empty, a new write

            stream will be created.
          type: string
        streamToken:
          description: >-
            A stream token that was previously sent by the server.


            The client should set this field to the token from the most recent

            WriteResponse it has received. This acknowledges that the client has

            received responses up to this token. After sending this token, earlier

            tokens may not be used anymore.


            The server may close the stream if there are too many unacknowledged

            responses.


            Leave this field unset when creating a new stream. To resume a stream at

            a specific point, set this field and the `stream_id` field.


            Leave this field unset when creating a new stream.
          format: byte
          type: string
        writes:
          description: |-
            The writes to apply.

            Always executed atomically and in order.
            This must be empty on the first request.
            This may be empty on the last request.
            This must not be empty on all other requests.
          items:
            $ref: "#/components/schemas/Write"
          type: array
      type: object
    WriteResponse:
      description: The response for Firestore.Write.
      properties:
        commitTime:
          description: The time at which the commit occurred.
          format: google-datetime
          type: string
        streamId:
          description: |-
            The ID of the stream.
            Only set on the first message, when a new stream was created.
          type: string
        streamToken:
          description: |-
            A token that represents the position of this response in the stream.
            This can be used by a client to resume the stream at this point.

            This field is always set.
          format: byte
          type: string
        writeResults:
          description: |-
            The result of applying the writes.

            This i-th write result corresponds to the i-th write in the
            request.
          items:
            $ref: "#/components/schemas/WriteResult"
          type: array
      type: object
    WriteResult:
      description: The result of applying a write.
      properties:
        transformResults:
          description: >-
            The results of applying each DocumentTransform.FieldTransform, in
            the

            same order.
          items:
            $ref: "#/components/schemas/Value"
          type: array
        updateTime:
          description: >-
            The last update time of the document after applying the write. Not
            set

            after a `delete`.


            If the write did not actually change the document, this will be the

            previous update_time.
          format: google-datetime
          type: string
      type: object
