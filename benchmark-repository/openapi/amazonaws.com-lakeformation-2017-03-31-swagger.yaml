openapi: 3.0.0
info:
  version: 2017-03-31
  x-release: v4
  title: AWS Lake Formation
  description: <fullname>AWS Lake Formation</fullname> <p>Defines the public endpoint for
    the AWS Lake Formation service.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: lakeformation
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lakeformation-2017-03-31.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lakeformation/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AWSLakeFormation.BatchGrantPermissions:
    post:
      operationId: BatchGrantPermissions
      description: Batch operation to grant permissions to the principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGrantPermissionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.BatchGrantPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGrantPermissionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.BatchRevokePermissions:
    post:
      operationId: BatchRevokePermissions
      description: Batch operation to revoke permissions from the principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchRevokePermissionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.BatchRevokePermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchRevokePermissionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.DeregisterResource:
    post:
      operationId: DeregisterResource
      description: <p>Deregisters the resource as managed by the Data Catalog.</p> <p>When
        you deregister a path, Lake Formation removes the path from the inline
        policy attached to your service-linked role.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeregisterResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.DeregisterResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeregisterResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.DescribeResource:
    post:
      operationId: DescribeResource
      description: Retrieves the current data access role for the given resource registered
        in AWS Lake Formation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.DescribeResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.GetDataLakeSettings:
    post:
      operationId: GetDataLakeSettings
      description: The AWS Lake Formation principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataLakeSettingsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.GetDataLakeSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDataLakeSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.GetEffectivePermissionsForPath:
    post:
      operationId: GetEffectivePermissionsForPath
      description: Returns the permissions for a specified table or database resource
        located at a path in Amazon S3.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEffectivePermissionsForPathResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.GetEffectivePermissionsForPath
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetEffectivePermissionsForPathRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.GrantPermissions:
    post:
      operationId: GrantPermissions
      description: <p>Grants permissions to the principal to access metadata in the Data
        Catalog and data organized in underlying data storage such as Amazon
        S3.</p> <p>For information about permissions, see <a
        href="https://docs-aws.amazon.com/michigan/latest/dg/security-data-access.html">Security
        and Access Control to Metadata and Data</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GrantPermissionsResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.GrantPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GrantPermissionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.ListPermissions:
    post:
      operationId: ListPermissions
      description: <p>Returns a list of the principal permissions on the resource, filtered
        by the permissions of the caller. For example, if you are granted an
        ALTER permission, you are able to see only the principal permissions for
        ALTER.</p> <p>This operation returns only those permissions that have
        been explicitly granted.</p> <p>For information about permissions, see
        <a
        href="https://docs-aws.amazon.com/michigan/latest/dg/security-data-access.html">Security
        and Access Control to Metadata and Data</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPermissionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.ListPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListPermissionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.ListResources:
    post:
      operationId: ListResources
      description: Lists the resources registered to be managed by the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResourcesResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.ListResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListResourcesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.PutDataLakeSettings:
    post:
      operationId: PutDataLakeSettings
      description: The AWS Lake Formation principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutDataLakeSettingsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.PutDataLakeSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutDataLakeSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.RegisterResource:
    post:
      operationId: RegisterResource
      description: <p>Registers the resource as managed by the Data Catalog.</p> <p>To add
        or update data, Lake Formation needs read/write access to the chosen
        Amazon S3 path. Choose a role that you know has permission to do this,
        or choose the AWSServiceRoleForLakeFormationDataAccess service-linked
        role. When you register the first Amazon S3 path, the service-linked
        role and a new inline policy are created on your behalf. Lake Formation
        adds the first path to the inline policy and attaches it to the
        service-linked role. When you register subsequent paths, Lake Formation
        adds the path to the existing policy.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.RegisterResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.RevokePermissions:
    post:
      operationId: RevokePermissions
      description: Revokes permissions to the principal to access metadata in the Data
        Catalog and data organized in underlying data storage such as Amazon S3.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevokePermissionsResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.RevokePermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokePermissionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSLakeFormation.UpdateResource:
    post:
      operationId: UpdateResource
      description: "Updates the data access role used for vending access to the given
        (registered) resource in AWS Lake Formation. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSLakeFormation.UpdateResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://lakeformation.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Lake Formation multi-region endpoint
  - url: https://lakeformation.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Lake Formation multi-region endpoint
  - url: http://lakeformation.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Lake Formation endpoint for China (Beijing) and China (Ningxia)
  - url: https://lakeformation.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Lake Formation endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchGrantPermissionsResponse:
      type: object
      properties:
        Failures:
          $ref: "#/components/schemas/BatchPermissionsFailureList"
    BatchGrantPermissionsRequest:
      type: object
      required:
        - Entries
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Entries:
          $ref: "#/components/schemas/BatchPermissionsRequestEntryList"
    InvalidInputException: {}
    OperationTimeoutException: {}
    BatchRevokePermissionsResponse:
      type: object
      properties:
        Failures:
          $ref: "#/components/schemas/BatchPermissionsFailureList"
    BatchRevokePermissionsRequest:
      type: object
      required:
        - Entries
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Entries:
          $ref: "#/components/schemas/BatchPermissionsRequestEntryList"
    DeregisterResourceResponse:
      type: object
      properties: {}
    DeregisterResourceRequest:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
    InternalServiceException: {}
    EntityNotFoundException: {}
    DescribeResourceResponse:
      type: object
      properties:
        ResourceInfo:
          $ref: "#/components/schemas/ResourceInfo"
    DescribeResourceRequest:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
    GetDataLakeSettingsResponse:
      type: object
      properties:
        DataLakeSettings:
          $ref: "#/components/schemas/DataLakeSettings"
    GetDataLakeSettingsRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
    GetEffectivePermissionsForPathResponse:
      type: object
      properties:
        Permissions:
          $ref: "#/components/schemas/PrincipalResourcePermissionsList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetEffectivePermissionsForPathRequest:
      type: object
      required:
        - ResourceArn
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GrantPermissionsResponse:
      type: object
      properties: {}
    GrantPermissionsRequest:
      type: object
      required:
        - Principal
        - Resource
        - Permissions
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        Resource:
          $ref: "#/components/schemas/Resource"
        Permissions:
          $ref: "#/components/schemas/PermissionList"
        PermissionsWithGrantOption:
          $ref: "#/components/schemas/PermissionList"
    ConcurrentModificationException: {}
    ListPermissionsResponse:
      type: object
      properties:
        PrincipalResourcePermissions:
          $ref: "#/components/schemas/PrincipalResourcePermissionsList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListPermissionsRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        ResourceType:
          $ref: "#/components/schemas/DataLakeResourceType"
        Resource:
          $ref: "#/components/schemas/Resource"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    ListResourcesResponse:
      type: object
      properties:
        ResourceInfoList:
          $ref: "#/components/schemas/ResourceInfoList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListResourcesRequest:
      type: object
      properties:
        FilterConditionList:
          $ref: "#/components/schemas/FilterConditionList"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/Token"
    PutDataLakeSettingsResponse:
      type: object
      properties: {}
    PutDataLakeSettingsRequest:
      type: object
      required:
        - DataLakeSettings
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DataLakeSettings:
          $ref: "#/components/schemas/DataLakeSettings"
    RegisterResourceResponse:
      type: object
      properties: {}
    RegisterResourceRequest:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
        UseServiceLinkedRole:
          $ref: "#/components/schemas/NullableBoolean"
        RoleArn:
          $ref: "#/components/schemas/IAMRoleArn"
    AlreadyExistsException: {}
    RevokePermissionsResponse:
      type: object
      properties: {}
    RevokePermissionsRequest:
      type: object
      required:
        - Principal
        - Resource
        - Permissions
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        Resource:
          $ref: "#/components/schemas/Resource"
        Permissions:
          $ref: "#/components/schemas/PermissionList"
        PermissionsWithGrantOption:
          $ref: "#/components/schemas/PermissionList"
    UpdateResourceResponse:
      type: object
      properties: {}
    UpdateResourceRequest:
      type: object
      required:
        - RoleArn
        - ResourceArn
      properties:
        RoleArn:
          $ref: "#/components/schemas/IAMRoleArn"
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
    CatalogIdString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    BatchPermissionsRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/BatchPermissionsRequestEntry"
    BatchPermissionsFailureList:
      type: array
      items:
        $ref: "#/components/schemas/BatchPermissionsFailureEntry"
    BatchPermissionsRequestEntry:
      type: object
      required:
        - Id
      properties:
        Id:
          $ref: "#/components/schemas/Identifier"
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        Resource:
          $ref: "#/components/schemas/Resource"
        Permissions:
          $ref: "#/components/schemas/PermissionList"
        PermissionsWithGrantOption:
          $ref: "#/components/schemas/PermissionList"
      description: A permission to a resource granted by batch operation to the principal.
    ErrorDetail:
      type: object
      properties:
        ErrorCode:
          $ref: "#/components/schemas/NameString"
        ErrorMessage:
          $ref: "#/components/schemas/DescriptionString"
      description: Contains details about an error.
    BatchPermissionsFailureEntry:
      type: object
      properties:
        RequestEntry:
          $ref: "#/components/schemas/BatchPermissionsRequestEntry"
        Error:
          $ref: "#/components/schemas/ErrorDetail"
      description: A list of failures when performing a batch grant or batch revoke
        operation.
    Identifier:
      type: string
      minLength: 1
      maxLength: 255
    DataLakePrincipal:
      type: object
      properties:
        DataLakePrincipalIdentifier:
          $ref: "#/components/schemas/DataLakePrincipalString"
      description: The AWS Lake Formation principal.
    Resource:
      type: object
      properties:
        Catalog:
          $ref: "#/components/schemas/CatalogResource"
        Database:
          $ref: "#/components/schemas/DatabaseResource"
        Table:
          $ref: "#/components/schemas/TableResource"
        TableWithColumns:
          $ref: "#/components/schemas/TableWithColumnsResource"
        DataLocation:
          $ref: "#/components/schemas/DataLocationResource"
      description: A structure for the resource.
    PermissionList:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
    CatalogResource:
      type: object
      properties: {}
      description: A structure for the catalog object.
    NameString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    ColumnNames:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    ColumnWildcard:
      type: object
      properties:
        ExcludedColumnNames:
          $ref: "#/components/schemas/ColumnNames"
      description: A wildcard object, consisting of an optional list of excluded column
        names or indexes.
    ComparisonOperator:
      type: string
      enum:
        - EQ
        - NE
        - LE
        - LT
        - GE
        - GT
        - CONTAINS
        - NOT_CONTAINS
        - BEGINS_WITH
        - IN
        - BETWEEN
    DataLakePrincipalString:
      type: string
      minLength: 1
      maxLength: 255
    DataLakePrincipalList:
      type: array
      items:
        $ref: "#/components/schemas/DataLakePrincipal"
      minItems: 0
      maxItems: 10
    DataLakeResourceType:
      type: string
      enum:
        - CATALOG
        - DATABASE
        - TABLE
        - DATA_LOCATION
    PrincipalPermissionsList:
      type: array
      items:
        $ref: "#/components/schemas/PrincipalPermissions"
    DataLakeSettings:
      type: object
      properties:
        DataLakeAdmins:
          $ref: "#/components/schemas/DataLakePrincipalList"
        CreateDatabaseDefaultPermissions:
          $ref: "#/components/schemas/PrincipalPermissionsList"
        CreateTableDefaultPermissions:
          $ref: "#/components/schemas/PrincipalPermissionsList"
      description: The AWS Lake Formation principal.
    ResourceArnString:
      type: string
    DataLocationResource:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
      description: "A structure for a data location object where permissions are granted or
        revoked. "
    DatabaseResource:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
      description: A structure for the database object.
    ResourceInfo:
      type: object
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
        RoleArn:
          $ref: "#/components/schemas/IAMRoleArn"
        LastModified:
          $ref: "#/components/schemas/LastModifiedTimestamp"
      description: A structure containing information about an AWS Lake Formation resource.
    DescriptionString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    FieldNameString:
      type: string
      enum:
        - RESOURCE_ARN
        - ROLE_ARN
        - LAST_MODIFIED
    StringValueList:
      type: array
      items:
        $ref: "#/components/schemas/StringValue"
    FilterCondition:
      type: object
      properties:
        Field:
          $ref: "#/components/schemas/FieldNameString"
        ComparisonOperator:
          $ref: "#/components/schemas/ComparisonOperator"
        StringValueList:
          $ref: "#/components/schemas/StringValueList"
      description: This structure describes the filtering of columns in a table based on a
        filter condition.
    FilterConditionList:
      type: array
      items:
        $ref: "#/components/schemas/FilterCondition"
      minItems: 1
      maxItems: 20
    Token:
      type: string
    PageSize:
      type: integer
      minimum: 1
      maximum: 1000
    PrincipalResourcePermissionsList:
      type: array
      items:
        $ref: "#/components/schemas/PrincipalResourcePermissions"
    IAMRoleArn:
      type: string
      pattern: arn:aws:iam::[0-9]*:role/.*
    LastModifiedTimestamp:
      type: string
      format: date-time
    ResourceInfoList:
      type: array
      items:
        $ref: "#/components/schemas/ResourceInfo"
    NullableBoolean:
      type: boolean
    Permission:
      type: string
      enum:
        - ALL
        - SELECT
        - ALTER
        - DROP
        - DELETE
        - INSERT
        - CREATE_DATABASE
        - CREATE_TABLE
        - DATA_LOCATION_ACCESS
    PrincipalPermissions:
      type: object
      properties:
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        Permissions:
          $ref: "#/components/schemas/PermissionList"
      description: Permissions granted to a principal.
    PrincipalResourcePermissions:
      type: object
      properties:
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        Resource:
          $ref: "#/components/schemas/Resource"
        Permissions:
          $ref: "#/components/schemas/PermissionList"
        PermissionsWithGrantOption:
          $ref: "#/components/schemas/PermissionList"
      description: The permissions granted or revoked on a resource.
    TableResource:
      type: object
      required:
        - DatabaseName
        - Name
      properties:
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Name:
          $ref: "#/components/schemas/NameString"
      description: "A structure for the table object. A table is a metadata definition that
        represents your data. You can Grant and Revoke table privileges to a
        principal. "
    TableWithColumnsResource:
      type: object
      properties:
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Name:
          $ref: "#/components/schemas/NameString"
        ColumnNames:
          $ref: "#/components/schemas/ColumnNames"
        ColumnWildcard:
          $ref: "#/components/schemas/ColumnWildcard"
      description: <p>A structure for a table with columns object. This object is only used
        when granting a SELECT permission.</p> <p>This object must take a value
        for at least one of <code>ColumnsNames</code>,
        <code>ColumnsIndexes</code>, or <code>ColumnsWildcard</code>.</p>
    StringValue:
      type: string
