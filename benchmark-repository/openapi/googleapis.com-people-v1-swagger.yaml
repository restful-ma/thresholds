openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: Provides access to information about profiles and contacts.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: People
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - social
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://people.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: people
externalDocs:
  url: https://developers.google.com/people/
tags:
  - name: contactGroups
  - name: people
paths:
  /v1/contactGroups:
    get:
      description: |-
        List all contact groups owned by the authenticated user. Members of the
        contact groups are not populated.
      operationId: people.contactGroups.list
      parameters:
        - description: The maximum number of resources to return.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: |-
            The next_page_token value returned from a previous call to
            [ListContactGroups](/people/api/rest/v1/contactgroups/list).
            Requests the next page of resources.
          in: query
          name: pageToken
          schema:
            type: string
        - description: >-
            A sync token, returned by a previous call to `contactgroups.list`.

            Only resources changed since the sync token was created will be returned.
          in: query
          name: syncToken
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListContactGroupsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      tags:
        - contactGroups
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Create a new contact group owned by the authenticated user.
      operationId: people.contactGroups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContactGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ContactGroup"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - contactGroups
  /v1/contactGroups:batchGet:
    get:
      description: >-
        Get a list of contact groups owned by the authenticated user by
        specifying

        a list of contact group resource names.
      operationId: people.contactGroups.batchGet
      parameters:
        - description: Specifies the maximum number of members to return for each group.
          in: query
          name: maxMembers
          schema:
            type: integer
        - description: The resource names of the contact groups to get.
          in: query
          name: resourceNames
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BatchGetContactGroupsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      tags:
        - contactGroups
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  /v1/people:batchGet:
    get:
      description: >-
        Provides information about a list of specific people by specifying a
        list

        of requested resource names. Use `people/me` to indicate the authenticated

        user.

        <br>

        The request throws a 400 error if 'personFields' is not specified.
      operationId: people.people.getBatchGet
      parameters:
        - description: >-
            **Required.** A field mask to restrict which fields on each person
            are

            returned. Multiple fields can be specified by separating them with commas.

            Valid values are:


            * addresses

            * ageRanges

            * biographies

            * birthdays

            * braggingRights

            * coverPhotos

            * emailAddresses

            * events

            * genders

            * imClients

            * interests

            * locales

            * memberships

            * metadata

            * names

            * nicknames

            * occupations

            * organizations

            * phoneNumbers

            * photos

            * relations

            * relationshipInterests

            * relationshipStatuses

            * residences

            * sipAddresses

            * skills

            * taglines

            * urls

            * userDefined
          in: query
          name: personFields
          schema:
            type: string
        - description: >-
            **Required.** Comma-separated list of person fields to be included
            in the

            response. Each path should start with `person.`: for example,

            `person.names` or `person.photos`.
          in: query
          name: requestMask.includeField
          schema:
            type: string
        - description: >-
            The resource names of the people to provide information about.


            - To get information about the authenticated user, specify `people/me`.

            - To get information about a google account, specify
              `people/`<var>account_id</var>.
            - To get information about a contact, specify the resource name that
              identifies the contact as returned by
            [`people.connections.list`](/people/api/rest/v1/people.connections/list).


            You can include up to 50 resource names in one request.
          in: query
          name: resourceNames
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GetPeopleResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/user.addresses.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.addresses.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.birthday.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.birthday.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.emails.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.emails.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.phonenumbers.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.phonenumbers.read
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.email
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.email
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.profile
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.profile
      tags:
        - people
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  /v1/people:createContact:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Create a new contact and return the person resource for that contact.
      operationId: people.people.createContact
      parameters:
        - description: The resource name of the owning person resource.
          in: query
          name: parent
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Person"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Person"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - people
  "/v1/{resourceName}":
    delete:
      description: |-
        Delete an existing contact group owned by the authenticated user by
        specifying a contact group resource name.
      operationId: people.contactGroups.delete
      parameters:
        - description: Set to true to also delete the contacts in the specified group.
          in: query
          name: deleteContacts
          schema:
            type: boolean
        - description: The resource name of the contact group to delete.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - contactGroups
    get:
      description: >-
        Get a specific contact group owned by the authenticated user by
        specifying

        a contact group resource name.
      operationId: people.contactGroups.get
      parameters:
        - description: Specifies the maximum number of members to return.
          in: query
          name: maxMembers
          schema:
            type: integer
        - description: >-
            **Required.** Comma-separated list of person fields to be included
            in the

            response. Each path should start with `person.`: for example,

            `person.names` or `person.photos`.
          in: query
          name: requestMask.includeField
          schema:
            type: string
        - description: The resource name of the contact group to get.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ContactGroup"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/user.addresses.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.addresses.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.birthday.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.birthday.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.emails.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.emails.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.phonenumbers.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.phonenumbers.read
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.email
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.email
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.profile
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.profile
      tags:
        - contactGroups
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    put:
      description: |-
        Update the name of an existing contact group owned by the authenticated
        user.
      operationId: people.contactGroups.update
      parameters:
        - description: >-
            The resource name for the contact group, assigned by the server. An
            ASCII

            string, in the form of `contactGroups/`<var>contact_group_id</var>.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContactGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ContactGroup"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - contactGroups
  "/v1/{resourceName}/connections":
    get:
      description: |-
        Provides a list of the authenticated user's contacts merged with any
        connected profiles.
        <br>
        The request throws a 400 error if 'personFields' is not specified.
      operationId: people.people.connections.list
      parameters:
        - description: >-
            The number of connections to include in the response. Valid values
            are

            between 1 and 2000, inclusive. Defaults to 100.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The token of the page to be returned.
          in: query
          name: pageToken
          schema:
            type: string
        - description: >-
            **Required.** A field mask to restrict which fields on each person
            are

            returned. Multiple fields can be specified by separating them with commas.

            Valid values are:


            * addresses

            * ageRanges

            * biographies

            * birthdays

            * braggingRights

            * coverPhotos

            * emailAddresses

            * events

            * genders

            * imClients

            * interests

            * locales

            * memberships

            * metadata

            * names

            * nicknames

            * occupations

            * organizations

            * phoneNumbers

            * photos

            * relations

            * relationshipInterests

            * relationshipStatuses

            * residences

            * sipAddresses

            * skills

            * taglines

            * urls

            * userDefined
          in: query
          name: personFields
          schema:
            type: string
        - description: >-
            **Required.** Comma-separated list of person fields to be included
            in the

            response. Each path should start with `person.`: for example,

            `person.names` or `person.photos`.
          in: query
          name: requestMask.includeField
          schema:
            type: string
        - description: >-
            Whether the response should include a sync token, which can be used
            to get

            all changes since the last request. For subsequent sync requests use the

            `sync_token` param instead. Initial sync requests that specify

            `request_sync_token` have an additional rate limit.
          in: query
          name: requestSyncToken
          schema:
            type: boolean
        - description: The resource name to return connections for. Only `people/me` is
            valid.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: |-
            The order in which the connections should be sorted. Defaults to
            `LAST_MODIFIED_ASCENDING`.
          in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - LAST_MODIFIED_ASCENDING
              - LAST_MODIFIED_DESCENDING
              - FIRST_NAME_ASCENDING
              - LAST_NAME_ASCENDING
        - description: >-
            A sync token returned by a previous call to
            `people.connections.list`.

            Only resources changed since the sync token was created will be returned.

            Sync requests that specify `sync_token` have an additional rate limit.
          in: query
          name: syncToken
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListConnectionsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      tags:
        - people
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{resourceName}/members:modify":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: |-
        Modify the members of a contact group owned by the authenticated user.
        <br>
        The only system contact groups that can have members added are
        `contactGroups/myContacts` and `contactGroups/starred`. Other system
        contact groups are deprecated and can only have contacts removed.
      operationId: people.contactGroups.members.modify
      parameters:
        - description: The resource name of the contact group to modify.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyContactGroupMembersRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ModifyContactGroupMembersResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - contactGroups
  "/v1/{resourceName}:deleteContact":
    delete:
      description: Delete a contact person. Any non-contact data will not be deleted.
      operationId: people.people.deleteContact
      parameters:
        - description: The resource name of the contact to delete.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - people
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{resourceName}:deleteContactPhoto":
    delete:
      description: Delete a contact's photo.
      operationId: people.people.deleteContactPhoto
      parameters:
        - description: >-
            **Optional.** Not specifying any fields will skip the post mutate
            read.

            A field mask to restrict which fields on the person are

            returned. Multiple fields can be specified by separating them with commas.

            Valid values are:


            * addresses

            * ageRanges

            * biographies

            * birthdays

            * braggingRights

            * coverPhotos

            * emailAddresses

            * events

            * genders

            * imClients

            * interests

            * locales

            * memberships

            * metadata

            * names

            * nicknames

            * occupations

            * organizations

            * phoneNumbers

            * photos

            * relations

            * relationshipInterests

            * relationshipStatuses

            * residences

            * sipAddresses

            * skills

            * taglines

            * urls

            * userDefined
          in: query
          name: personFields
          schema:
            type: string
        - description: The resource name of the contact whose photo will be deleted.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/DeleteContactPhotoResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - people
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{resourceName}:updateContact":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    patch:
      description: >-
        Update contact data for an existing contact person. Any non-contact data

        will not be modified.


        The request throws a 400 error if `updatePersonFields` is not specified.

        <br>

        The request throws a 400 error if `person.metadata.sources` is not

        specified for the contact to be updated.

        <br>

        The request throws a 400 error with an error with reason

        `"failedPrecondition"` if `person.metadata.sources.etag` is different than

        the contact's etag, which indicates the contact has changed since its data

        was read. Clients should get the latest person and re-apply their updates

        to the latest person.
      operationId: people.people.updateContact
      parameters:
        - description: >-
            The resource name for the person, assigned by the server. An ASCII
            string

            with a max length of 27 characters, in the form of

            `people/`<var>person_id</var>.
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: >-
            **Required.** A field mask to restrict which fields on the person
            are

            updated. Multiple fields can be specified by separating them with commas.

            All updated fields will be replaced. Valid values are:


            * addresses

            * biographies

            * birthdays

            * emailAddresses

            * events

            * genders

            * imClients

            * interests

            * locales

            * memberships

            * names

            * nicknames

            * occupations

            * organizations

            * phoneNumbers

            * relations

            * residences

            * sipAddresses

            * urls

            * userDefined
          in: query
          name: updatePersonFields
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Person"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Person"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - people
  "/v1/{resourceName}:updateContactPhoto":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    patch:
      description: Update a contact's photo.
      operationId: people.people.updateContactPhoto
      parameters:
        - description: Person resource name
          in: path
          name: resourceName
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContactPhotoRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UpdateContactPhotoResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      tags:
        - people
servers:
  - url: https://people.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  requestBodies:
    Person:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Person"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/contacts: See, edit, download, and permanently delete your contacts
            https://www.googleapis.com/auth/contacts.readonly: See and download your contacts
            https://www.googleapis.com/auth/user.addresses.read: View your street addresses
            https://www.googleapis.com/auth/user.birthday.read: View your complete date of birth
            https://www.googleapis.com/auth/user.emails.read: View your email addresses
            https://www.googleapis.com/auth/user.phonenumbers.read: View your phone numbers
            https://www.googleapis.com/auth/userinfo.email: View your email address
            https://www.googleapis.com/auth/userinfo.profile: See your personal info, including any personal info you've made
              publicly available
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/contacts: See, edit, download, and permanently delete your contacts
            https://www.googleapis.com/auth/contacts.readonly: See and download your contacts
            https://www.googleapis.com/auth/user.addresses.read: View your street addresses
            https://www.googleapis.com/auth/user.birthday.read: View your complete date of birth
            https://www.googleapis.com/auth/user.emails.read: View your email addresses
            https://www.googleapis.com/auth/user.phonenumbers.read: View your phone numbers
            https://www.googleapis.com/auth/userinfo.email: View your email address
            https://www.googleapis.com/auth/userinfo.profile: See your personal info, including any personal info you've made
              publicly available
  schemas:
    Address:
      description: >-
        A person's physical address. May be a P.O. box or street address. All
        fields

        are optional.
      properties:
        city:
          description: The city of the address.
          type: string
        country:
          description: The country of the address.
          type: string
        countryCode:
          description: >-
            The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm)
            country

            code of the address.
          type: string
        extendedAddress:
          description: The extended address of the address; for example, the apartment
            number.
          type: string
        formattedType:
          description: >-
            The read-only type of the address translated and formatted in the
            viewer's

            account locale or the `Accept-Language` HTTP header locale.
          type: string
        formattedValue:
          description: >-
            The unstructured value of the address. If this is not set by the
            user it

            will be automatically constructed from structured values.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        poBox:
          description: The P.O. box of the address.
          type: string
        postalCode:
          description: The postal code of the address.
          type: string
        region:
          description: The region of the address; for example, the state or province.
          type: string
        streetAddress:
          description: The street address.
          type: string
        type:
          description: >-
            The type of the address. The type can be custom or one of these
            predefined

            values:


            * `home`

            * `work`

            * `other`
          type: string
      type: object
    AgeRangeType:
      description: A person's age range.
      properties:
        ageRange:
          description: The age range.
          enum:
            - AGE_RANGE_UNSPECIFIED
            - LESS_THAN_EIGHTEEN
            - EIGHTEEN_TO_TWENTY
            - TWENTY_ONE_OR_OLDER
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
      type: object
    BatchGetContactGroupsResponse:
      description: The response to a batch get contact groups request.
      properties:
        responses:
          description: The list of responses for each requested contact group resource.
          items:
            $ref: "#/components/schemas/ContactGroupResponse"
          type: array
      type: object
    Biography:
      description: A person's short biography.
      properties:
        contentType:
          description: The content type of the biography.
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - TEXT_PLAIN
            - TEXT_HTML
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The short biography.
          type: string
      type: object
    Birthday:
      description: |-
        A person's birthday. At least one of the `date` and `text` fields are
        specified. The `date` and `text` fields typically represent the same
        date, but are not guaranteed to.
      properties:
        date:
          $ref: "#/components/schemas/Date"
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        text:
          description: A free-form string representing the user's birthday.
          type: string
      type: object
    BraggingRights:
      description: A person's bragging rights.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The bragging rights; for example, `climbed mount everest`.
          type: string
      type: object
    ContactGroup:
      description: A contact group.
      properties:
        etag:
          description: >-
            The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of
            the

            resource. Used for web cache validation.
          type: string
        formattedName:
          description: >-
            The read-only name translated and formatted in the viewer's account
            locale

            or the `Accept-Language` HTTP header locale for system groups names.

            Group names set by the owner are the same as name.
          type: string
        groupType:
          description: The read-only contact group type.
          enum:
            - GROUP_TYPE_UNSPECIFIED
            - USER_CONTACT_GROUP
            - SYSTEM_CONTACT_GROUP
          type: string
        memberCount:
          description: >-
            The total number of contacts in the group irrespective of max
            members in

            specified in the request.
          format: int32
          type: integer
        memberResourceNames:
          description: >-
            The list of contact person resource names that are members of the
            contact

            group. The field is not populated for LIST requests and can only be updated

            through the

            [ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify).
          items:
            type: string
          type: array
        metadata:
          $ref: "#/components/schemas/ContactGroupMetadata"
        name:
          description: >-
            The contact group name set by the group owner or a system provided
            name

            for system groups.
          type: string
        resourceName:
          description: >-
            The resource name for the contact group, assigned by the server. An
            ASCII

            string, in the form of `contactGroups/`<var>contact_group_id</var>.
          type: string
      type: object
    ContactGroupMembership:
      description: A Google contact group membership.
      properties:
        contactGroupId:
          description: The read-only contact group ID for the contact group membership.
          type: string
        contactGroupResourceName:
          description: >-
            The resource name for the contact group, assigned by the server. An
            ASCII

            string, in the form of `contactGroups/`<var>contact_group_id</var>.

            Only contact_group_resource_name can be used for modifying memberships.

            Any contact group membership can be removed, but only user group or

            "myContacts" or "starred" system groups memberships can be added. A

            contact must always have at least one contact group membership.
          type: string
      type: object
    ContactGroupMetadata:
      description: The read-only metadata about a contact group.
      properties:
        deleted:
          description: >-
            True if the contact group resource has been deleted. Populated only
            for

            [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests

            that include a sync token.
          type: boolean
        updateTime:
          description: The time the group was last updated.
          format: google-datetime
          type: string
      type: object
    ContactGroupResponse:
      description: The response for a specific contact group.
      properties:
        contactGroup:
          $ref: "#/components/schemas/ContactGroup"
        requestedResourceName:
          description: The original requested resource name.
          type: string
        status:
          $ref: "#/components/schemas/Status"
      type: object
    CoverPhoto:
      description: |-
        A person's read-only cover photo. A large image shown on the person's
        profile page that represents who they are or what they care about.
      properties:
        default:
          description: |-
            True if the cover photo is the default cover photo;
            false if the cover photo is a user-provided cover photo.
          type: boolean
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        url:
          description: The URL of the cover photo.
          type: string
      type: object
    CreateContactGroupRequest:
      description: A request to create a new contact group.
      properties:
        contactGroup:
          $ref: "#/components/schemas/ContactGroup"
      type: object
    Date:
      description: >-
        Represents a whole or partial calendar date, e.g. a birthday. The time
        of day

        and time zone are either specified elsewhere or are not significant. The date

        is relative to the Proleptic Gregorian Calendar. This can represent:


        * A full date, with non-zero year, month and day values

        * A month and day value, with a zero year, e.g. an anniversary

        * A year on its own, with zero month and day values

        * A year and month value, with a zero day, e.g. a credit card expiration date


        Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
      properties:
        day:
          description: >-
            Day of month. Must be from 1 to 31 and valid for the year and month,
            or 0

            if specifying a year by itself or a year and month where the day is not

            significant.
          format: int32
          type: integer
        month:
          description: >-
            Month of year. Must be from 1 to 12, or 0 if specifying a year
            without a

            month and day.
          format: int32
          type: integer
        year:
          description: >-
            Year of date. Must be from 1 to 9999, or 0 if specifying a date
            without

            a year.
          format: int32
          type: integer
      type: object
    DeleteContactPhotoResponse:
      description: The response for deleteing a contact's photo.
      properties:
        person:
          $ref: "#/components/schemas/Person"
      type: object
    DomainMembership:
      description: A read-only G Suite Domain membership.
      properties:
        inViewerDomain:
          description: True if the person is in the viewer's G Suite domain.
          type: boolean
      type: object
    EmailAddress:
      description: A person's email address.
      properties:
        displayName:
          description: The display name of the email.
          type: string
        formattedType:
          description: >-
            The read-only type of the email address translated and formatted in
            the

            viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        type:
          description: >-
            The type of the email address. The type can be custom or one of
            these

            predefined values:


            * `home`

            * `work`

            * `other`
          type: string
        value:
          description: The email address.
          type: string
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    Event:
      description: An event related to the person.
      properties:
        date:
          $ref: "#/components/schemas/Date"
        formattedType:
          description: |-
            The read-only type of the event translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        type:
          description: >-
            The type of the event. The type can be custom or one of these
            predefined

            values:


            * `anniversary`

            * `other`
          type: string
      type: object
    FieldMetadata:
      description: Metadata about a field.
      properties:
        primary:
          description: >-
            True if the field is the primary field; false if the field is a
            secondary

            field.
          type: boolean
        source:
          $ref: "#/components/schemas/Source"
        verified:
          description: |-
            True if the field is verified; false if the field is unverified. A
            verified field is typically a name, email address, phone number, or
            website that has been confirmed to be owned by the person.
          type: boolean
      type: object
    Gender:
      description: A person's gender.
      properties:
        formattedValue:
          description: >-
            The read-only value of the gender translated and formatted in the
            viewer's

            account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: |-
            The gender for the person. The gender can be custom or one of these
            predefined values:

            * `male`
            * `female`
            * `other`
            * `unknown`
          type: string
      type: object
    GetPeopleResponse:
      properties:
        responses:
          description: The response for each requested resource name.
          items:
            $ref: "#/components/schemas/PersonResponse"
          type: array
      type: object
    ImClient:
      description: A person's instant messaging client.
      properties:
        formattedProtocol:
          description: >-
            The read-only protocol of the IM client formatted in the viewer's
            account

            locale or the `Accept-Language` HTTP header locale.
          type: string
        formattedType:
          description: |-
            The read-only type of the IM client translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        protocol:
          description: >-
            The protocol of the IM client. The protocol can be custom or one of
            these

            predefined values:


            * `aim`

            * `msn`

            * `yahoo`

            * `skype`

            * `qq`

            * `googleTalk`

            * `icq`

            * `jabber`

            * `netMeeting`
          type: string
        type:
          description: |-
            The type of the IM client. The type can be custom or one of these
            predefined values:

            * `home`
            * `work`
            * `other`
          type: string
        username:
          description: The user name used in the IM client.
          type: string
      type: object
    Interest:
      description: One of the person's interests.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The interest; for example, `stargazing`.
          type: string
      type: object
    ListConnectionsResponse:
      properties:
        connections:
          description: The list of people that the requestor is connected to.
          items:
            $ref: "#/components/schemas/Person"
          type: array
        nextPageToken:
          description: The token that can be used to retrieve the next page of results.
          type: string
        nextSyncToken:
          description: The token that can be used to retrieve changes since the last
            request.
          type: string
        totalItems:
          description: The total number of items in the list without pagination.
          format: int32
          type: integer
        totalPeople:
          description: |-
            **DEPRECATED** (Please use totalItems)
            The total number of people in the list without pagination.
          format: int32
          type: integer
      type: object
    ListContactGroupsResponse:
      description: The response to a list contact groups request.
      properties:
        contactGroups:
          description: |-
            The list of contact groups. Members of the contact groups are not
            populated.
          items:
            $ref: "#/components/schemas/ContactGroup"
          type: array
        nextPageToken:
          description: The token that can be used to retrieve the next page of results.
          type: string
        nextSyncToken:
          description: The token that can be used to retrieve changes since the last
            request.
          type: string
        totalItems:
          description: The total number of items in the list without pagination.
          format: int32
          type: integer
      type: object
    Locale:
      description: A person's locale preference.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: |-
            The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)
            language tag representing the locale.
          type: string
      type: object
    Membership:
      description: |-
        A person's membership in a group. Only contact group memberships can be
        modified.
      properties:
        contactGroupMembership:
          $ref: "#/components/schemas/ContactGroupMembership"
        domainMembership:
          $ref: "#/components/schemas/DomainMembership"
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
      type: object
    ModifyContactGroupMembersRequest:
      description: |-
        A request to modify an existing contact group's members. Contacts can be
        removed from any group but they can only be added to a user group or
        "myContacts" or "starred" system groups.
      properties:
        resourceNamesToAdd:
          description: >-
            The resource names of the contact people to add in the form of in
            the form

            `people/`<var>person_id</var>.
          items:
            type: string
          type: array
        resourceNamesToRemove:
          description: >-
            The resource names of the contact people to remove in the form of in
            the

            form of `people/`<var>person_id</var>.
          items:
            type: string
          type: array
      type: object
    ModifyContactGroupMembersResponse:
      description: The response to a modify contact group members request.
      properties:
        canNotRemoveLastContactGroupResourceNames:
          description: |-
            The contact people resource names that cannot be removed from their
            last contact group.
          items:
            type: string
          type: array
        notFoundResourceNames:
          description: The contact people resource names that were not found.
          items:
            type: string
          type: array
      type: object
    Name:
      description: A person's name. If the name is a mononym, the family name is empty.
      properties:
        displayName:
          description: >-
            The read-only display name formatted according to the locale
            specified by

            the viewer's account or the `Accept-Language` HTTP header.
          type: string
        displayNameLastFirst:
          description: >-
            The read-only display name with the last name first formatted
            according to

            the locale specified by the viewer's account or the

            `Accept-Language` HTTP header.
          type: string
        familyName:
          description: The family name.
          type: string
        givenName:
          description: The given name.
          type: string
        honorificPrefix:
          description: The honorific prefixes, such as `Mrs.` or `Dr.`
          type: string
        honorificSuffix:
          description: The honorific suffixes, such as `Jr.`
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        middleName:
          description: The middle name(s).
          type: string
        phoneticFamilyName:
          description: The family name spelled as it sounds.
          type: string
        phoneticFullName:
          description: The full name spelled as it sounds.
          type: string
        phoneticGivenName:
          description: The given name spelled as it sounds.
          type: string
        phoneticHonorificPrefix:
          description: The honorific prefixes spelled as they sound.
          type: string
        phoneticHonorificSuffix:
          description: The honorific suffixes spelled as they sound.
          type: string
        phoneticMiddleName:
          description: The middle name(s) spelled as they sound.
          type: string
      type: object
    Nickname:
      description: A person's nickname.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        type:
          description: The type of the nickname.
          enum:
            - DEFAULT
            - MAIDEN_NAME
            - INITIALS
            - GPLUS
            - OTHER_NAME
          type: string
        value:
          description: The nickname.
          type: string
      type: object
    Occupation:
      description: A person's occupation.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The occupation; for example, `carpenter`.
          type: string
      type: object
    Organization:
      description: |-
        A person's past or current organization. Overlapping date ranges are
        permitted.
      properties:
        current:
          description: |-
            True if the organization is the person's current organization;
            false if the organization is a past organization.
          type: boolean
        department:
          description: The person's department at the organization.
          type: string
        domain:
          description: |-
            The domain name associated with the organization; for example,
            `google.com`.
          type: string
        endDate:
          $ref: "#/components/schemas/Date"
        formattedType:
          description: >-
            The read-only type of the organization translated and formatted in
            the

            viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        jobDescription:
          description: The person's job description at the organization.
          type: string
        location:
          description: The location of the organization office the person works at.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        name:
          description: The name of the organization.
          type: string
        phoneticName:
          description: The phonetic name of the organization.
          type: string
        startDate:
          $ref: "#/components/schemas/Date"
        symbol:
          description: >-
            The symbol associated with the organization; for example, a stock
            ticker

            symbol, abbreviation, or acronym.
          type: string
        title:
          description: The person's job title at the organization.
          type: string
        type:
          description: >-
            The type of the organization. The type can be custom or  one of
            these

            predefined values:


            * `work`

            * `school`
          type: string
      type: object
    Person:
      description: >-
        Information about a person merged from various data sources such as the

        authenticated user's contacts and profile data.


        Most fields can have multiple items. The items in a field have no guaranteed

        order, but each non-empty field is guaranteed to have exactly one field with

        `metadata.primary` set to true.
      properties:
        addresses:
          description: The person's street addresses.
          items:
            $ref: "#/components/schemas/Address"
          type: array
        ageRange:
          description: |-
            **DEPRECATED** (Please use `person.ageRanges` instead)**

            The person's read-only age range.
          enum:
            - AGE_RANGE_UNSPECIFIED
            - LESS_THAN_EIGHTEEN
            - EIGHTEEN_TO_TWENTY
            - TWENTY_ONE_OR_OLDER
          type: string
        ageRanges:
          description: The person's read-only age ranges.
          items:
            $ref: "#/components/schemas/AgeRangeType"
          type: array
        biographies:
          description: The person's biographies.
          items:
            $ref: "#/components/schemas/Biography"
          type: array
        birthdays:
          description: The person's birthdays.
          items:
            $ref: "#/components/schemas/Birthday"
          type: array
        braggingRights:
          description: The person's bragging rights.
          items:
            $ref: "#/components/schemas/BraggingRights"
          type: array
        coverPhotos:
          description: The person's read-only cover photos.
          items:
            $ref: "#/components/schemas/CoverPhoto"
          type: array
        emailAddresses:
          description: The person's email addresses.
          items:
            $ref: "#/components/schemas/EmailAddress"
          type: array
        etag:
          description: >-
            The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of
            the

            resource. Used for web cache validation.
          type: string
        events:
          description: The person's events.
          items:
            $ref: "#/components/schemas/Event"
          type: array
        genders:
          description: The person's genders.
          items:
            $ref: "#/components/schemas/Gender"
          type: array
        imClients:
          description: The person's instant messaging clients.
          items:
            $ref: "#/components/schemas/ImClient"
          type: array
        interests:
          description: The person's interests.
          items:
            $ref: "#/components/schemas/Interest"
          type: array
        locales:
          description: The person's locale preferences.
          items:
            $ref: "#/components/schemas/Locale"
          type: array
        memberships:
          description: The person's group memberships.
          items:
            $ref: "#/components/schemas/Membership"
          type: array
        metadata:
          $ref: "#/components/schemas/PersonMetadata"
        names:
          description: The person's names.
          items:
            $ref: "#/components/schemas/Name"
          type: array
        nicknames:
          description: The person's nicknames.
          items:
            $ref: "#/components/schemas/Nickname"
          type: array
        occupations:
          description: The person's occupations.
          items:
            $ref: "#/components/schemas/Occupation"
          type: array
        organizations:
          description: The person's past or current organizations.
          items:
            $ref: "#/components/schemas/Organization"
          type: array
        phoneNumbers:
          description: The person's phone numbers.
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        photos:
          description: The person's read-only photos.
          items:
            $ref: "#/components/schemas/Photo"
          type: array
        relations:
          description: The person's relations.
          items:
            $ref: "#/components/schemas/Relation"
          type: array
        relationshipInterests:
          description: The person's read-only relationship interests.
          items:
            $ref: "#/components/schemas/RelationshipInterest"
          type: array
        relationshipStatuses:
          description: The person's read-only relationship statuses.
          items:
            $ref: "#/components/schemas/RelationshipStatus"
          type: array
        residences:
          description: The person's residences.
          items:
            $ref: "#/components/schemas/Residence"
          type: array
        resourceName:
          description: >-
            The resource name for the person, assigned by the server. An ASCII
            string

            with a max length of 27 characters, in the form of

            `people/`<var>person_id</var>.
          type: string
        sipAddresses:
          description: The person's SIP addresses.
          items:
            $ref: "#/components/schemas/SipAddress"
          type: array
        skills:
          description: The person's skills.
          items:
            $ref: "#/components/schemas/Skill"
          type: array
        taglines:
          description: The person's read-only taglines.
          items:
            $ref: "#/components/schemas/Tagline"
          type: array
        urls:
          description: The person's associated URLs.
          items:
            $ref: "#/components/schemas/Url"
          type: array
        userDefined:
          description: The person's user defined data.
          items:
            $ref: "#/components/schemas/UserDefined"
          type: array
      type: object
    PersonMetadata:
      description: The read-only metadata about a person.
      properties:
        deleted:
          description: >-
            True if the person resource has been deleted. Populated only for

            [`connections.list`](/people/api/rest/v1/people.connections/list) requests

            that include a sync token.
          type: boolean
        linkedPeopleResourceNames:
          description: Resource names of people linked to this resource.
          items:
            type: string
          type: array
        objectType:
          description: |-
            **DEPRECATED** (Please use
            `person.metadata.sources.profileMetadata.objectType` instead)

            The type of the person object.
          enum:
            - OBJECT_TYPE_UNSPECIFIED
            - PERSON
            - PAGE
          type: string
        previousResourceNames:
          description: >-
            Any former resource names this person has had. Populated only for

            [`connections.list`](/people/api/rest/v1/people.connections/list) requests

            that include a sync token.


            The resource name may change when adding or removing fields that link a

            contact and profile such as a verified email, verified phone number, or

            profile URL.
          items:
            type: string
          type: array
        sources:
          description: The sources of data for the person.
          items:
            $ref: "#/components/schemas/Source"
          type: array
      type: object
    PersonResponse:
      description: The response for a single person
      properties:
        httpStatusCode:
          description: |-
            **DEPRECATED** (Please use status instead)

            [HTTP 1.1 status code]
            (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
          format: int32
          type: integer
        person:
          $ref: "#/components/schemas/Person"
        requestedResourceName:
          description: >-
            The original requested resource name. May be different than the
            resource

            name on the returned person.


            The resource name can change when adding or removing fields that link a

            contact and profile such as a verified email, verified phone number, or a

            profile URL.
          type: string
        status:
          $ref: "#/components/schemas/Status"
      type: object
    PhoneNumber:
      description: A person's phone number.
      properties:
        canonicalForm:
          description: >-
            The read-only canonicalized [ITU-T

            E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)

            form of the phone number.
          type: string
        formattedType:
          description: >-
            The read-only type of the phone number translated and formatted in
            the

            viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        type:
          description: |-
            The type of the phone number. The type can be custom or one of these
            predefined values:

            * `home`
            * `work`
            * `mobile`
            * `homeFax`
            * `workFax`
            * `otherFax`
            * `pager`
            * `workMobile`
            * `workPager`
            * `main`
            * `googleVoice`
            * `other`
          type: string
        value:
          description: The phone number.
          type: string
      type: object
    Photo:
      description: |-
        A person's read-only photo. A picture shown next to the person's name to
        help others recognize the person.
      properties:
        default:
          description: |-
            True if the photo is a default photo;
            false if the photo is a user-provided photo.
          type: boolean
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        url:
          description: >-
            The URL of the photo. You can change the desired size by appending a
            query

            parameter `sz=`<var>size</var> at the end of the url. Example:

            `https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50`
          type: string
      type: object
    ProfileMetadata:
      description: The read-only metadata about a profile.
      properties:
        objectType:
          description: The profile object type.
          enum:
            - OBJECT_TYPE_UNSPECIFIED
            - PERSON
            - PAGE
          type: string
        userTypes:
          description: The user types.
          items:
            enum:
              - USER_TYPE_UNKNOWN
              - GOOGLE_USER
              - GPLUS_USER
              - GOOGLE_APPS_USER
            type: string
          type: array
      type: object
    Relation:
      description: A person's relation to another person.
      properties:
        formattedType:
          description: >-
            The type of the relation translated and formatted in the viewer's
            account

            locale or the locale specified in the Accept-Language HTTP header.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        person:
          description: The name of the other person this relation refers to.
          type: string
        type:
          description: >-
            The person's relation to the other person. The type can be custom or
            one of

            these predefined values:


            * `spouse`

            * `child`

            * `mother`

            * `father`

            * `parent`

            * `brother`

            * `sister`

            * `friend`

            * `relative`

            * `domesticPartner`

            * `manager`

            * `assistant`

            * `referredBy`

            * `partner`
          type: string
      type: object
    RelationshipInterest:
      description: A person's read-only relationship interest .
      properties:
        formattedValue:
          description: >-
            The value of the relationship interest translated and formatted in
            the

            viewer's account locale or the locale specified in the Accept-Language

            HTTP header.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: >-
            The kind of relationship the person is looking for. The value can be
            custom

            or one of these predefined values:


            * `friend`

            * `date`

            * `relationship`

            * `networking`
          type: string
      type: object
    RelationshipStatus:
      description: A person's read-only relationship status.
      properties:
        formattedValue:
          description: >-
            The read-only value of the relationship status translated and
            formatted in

            the viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: |-
            The relationship status. The value can be custom or one of these
            predefined values:

            * `single`
            * `inARelationship`
            * `engaged`
            * `married`
            * `itsComplicated`
            * `openRelationship`
            * `widowed`
            * `inDomesticPartnership`
            * `inCivilUnion`
          type: string
      type: object
    Residence:
      description: A person's past or current residence.
      properties:
        current:
          description: |-
            True if the residence is the person's current residence;
            false if the residence is a past residence.
          type: boolean
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The address of the residence.
          type: string
      type: object
    SipAddress:
      description: >-
        A person's SIP address. Session Initial Protocol addresses are used for
        VoIP

        communications to make voice or video calls over the internet.
      properties:
        formattedType:
          description: >-
            The read-only type of the SIP address translated and formatted in
            the

            viewer's account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        type:
          description: >-
            The type of the SIP address. The type can be custom or or one of
            these

            predefined values:


            * `home`

            * `work`

            * `mobile`

            * `other`
          type: string
        value:
          description: >-
            The SIP address in the

            [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI

            format.
          type: string
      type: object
    Skill:
      description: A skill that the person has.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The skill; for example, `underwater basket weaving`.
          type: string
      type: object
    Source:
      description: The source of a field.
      properties:
        etag:
          description: >-
            **Only populated in `person.metadata.sources`.**


            The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the

            source. Used for web cache validation.
          type: string
        id:
          description: The unique identifier within the source type generated by the server.
          type: string
        profileMetadata:
          $ref: "#/components/schemas/ProfileMetadata"
        type:
          description: The source type.
          enum:
            - SOURCE_TYPE_UNSPECIFIED
            - ACCOUNT
            - PROFILE
            - DOMAIN_PROFILE
            - CONTACT
          type: string
        updateTime:
          description: |-
            **Only populated in `person.metadata.sources`.**

            Last update timestamp of this source.
          format: google-datetime
          type: string
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    Tagline:
      description: A read-only brief one-line description of the person.
      properties:
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The tagline.
          type: string
      type: object
    UpdateContactGroupRequest:
      description: >-
        A request to update an existing user contact group. All updated fields
        will

        be replaced.
      properties:
        contactGroup:
          $ref: "#/components/schemas/ContactGroup"
      type: object
    UpdateContactPhotoRequest:
      description: |-
        A request to update an existing contact's photo.
        All requests must have a valid photo format: JPEG or PNG.
      properties:
        personFields:
          description: >-
            **Optional.** Not specifying any fields will skip the post mutate
            read.

            A field mask to restrict which fields on the person are

            returned. Multiple fields can be specified by separating them with commas.

            Valid values are:


            * addresses

            * ageRanges

            * biographies

            * birthdays

            * braggingRights

            * coverPhotos

            * emailAddresses

            * events

            * genders

            * imClients

            * interests

            * locales

            * memberships

            * metadata

            * names

            * nicknames

            * occupations

            * organizations

            * phoneNumbers

            * photos

            * relations

            * relationshipInterests

            * relationshipStatuses

            * residences

            * sipAddresses

            * skills

            * taglines

            * urls

            * userDefined
          format: google-fieldmask
          type: string
        photoBytes:
          description: Raw photo bytes
          format: byte
          type: string
      type: object
    UpdateContactPhotoResponse:
      description: The response for updating a contact's photo.
      properties:
        person:
          $ref: "#/components/schemas/Person"
      type: object
    Url:
      description: A person's associated URLs.
      properties:
        formattedType:
          description: >-
            The read-only type of the URL translated and formatted in the
            viewer's

            account locale or the `Accept-Language` HTTP header locale.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        type:
          description: >-
            The type of the URL. The type can be custom or one of these
            predefined

            values:


            * `home`

            * `work`

            * `blog`

            * `profile`

            * `homePage`

            * `ftp`

            * `reservations`

            * `appInstallPage`: website for a Google+ application.

            * `other`
          type: string
        value:
          description: The URL.
          type: string
      type: object
    UserDefined:
      description: Arbitrary user data that is populated by the end users.
      properties:
        key:
          description: The end user specified key of the user defined data.
          type: string
        metadata:
          $ref: "#/components/schemas/FieldMetadata"
        value:
          description: The end user specified value of the user defined data.
          type: string
      type: object
