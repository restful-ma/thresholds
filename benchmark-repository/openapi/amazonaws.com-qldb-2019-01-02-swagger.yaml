openapi: 3.0.0
info:
  version: 2019-01-02
  x-release: v4
  title: Amazon QLDB
  description: The control plane for Amazon QLDB
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: qldb
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/qldb-2019-01-02.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/qldb/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /ledgers:
    post:
      operationId: CreateLedger
      description: Creates a new ledger in your AWS account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLedgerResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - Name
                - PermissionsMode
              properties:
                Name:
                  description: The name of the ledger that you want to create. The name
                    must be unique among all of your ledgers in the current AWS
                    Region.
                  type: string
                  pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
                  minLength: 1
                  maxLength: 32
                Tags:
                  description: The key-value pairs to add as tags to the ledger that you
                    want to create. Tag keys are case sensitive. Tag values are
                    case sensitive and can be null.
                  type: object
                  minProperties: 0
                  maxProperties: 200
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                PermissionsMode:
                  description: The permissions mode to assign to the ledger that you want
                    to create.
                  type: string
                  enum:
                    - ALLOW_ALL
                DeletionProtection:
                  description: <p>The flag that prevents a ledger from being deleted by any
                    user. If not provided on ledger creation, this feature is
                    enabled (<code>true</code>) by default.</p> <p>If deletion
                    protection is enabled, you must first disable it before you
                    can delete the ledger using the QLDB API or the AWS Command
                    Line Interface (AWS CLI). You can disable it by calling the
                    <code>UpdateLedger</code> operation to set the flag to
                    <code>false</code>. The QLDB console disables deletion
                    protection for you when you use it to delete a ledger.</p>
                  type: boolean
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListLedgers
      description: <p>Returns an array of ledger summaries that are associated with the
        current AWS account and Region.</p> <p>This action returns a maximum of
        100 items and is paginated so that you can retrieve all the items by
        calling <code>ListLedgers</code> multiple times.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLedgersResponse"
      parameters:
        - name: max_results
          in: query
          required: false
          description: The maximum number of results to return in a single
            <code>ListLedgers</code> request. (The actual number of results
            returned might be fewer.)
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: next_token
          in: query
          required: false
          description: A pagination token, indicating that you want to retrieve the next
            page of results. If you received a value for <code>NextToken</code>
            in the response from a previous <code>ListLedgers</code> call, then
            you should use that value as input here.
          schema:
            type: string
            minLength: 4
            maxLength: 1024
            pattern: ^[A-Za-z-0-9+/=]+$
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
  "/ledgers/{name}":
    delete:
      operationId: DeleteLedger
      description: <p>Deletes a ledger and all of its contents. This action is
        irreversible.</p> <p>If deletion protection is enabled, you must first
        disable it before you can delete the ledger using the QLDB API or the
        AWS Command Line Interface (AWS CLI). You can disable it by calling the
        <code>UpdateLedger</code> operation to set the flag to
        <code>false</code>. The QLDB console disables deletion protection for
        you when you use it to delete a ledger.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "483":
          description: ResourcePreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePreconditionNotMetException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger that you want to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeLedger
      description: Returns information about a ledger, including its state and when it was
        created.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeLedgerResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger that you want to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
    patch:
      operationId: UpdateLedger
      description: Updates properties on a ledger.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateLedgerResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                DeletionProtection:
                  description: <p>The flag that prevents a ledger from being deleted by any
                    user. If not provided on ledger creation, this feature is
                    enabled (<code>true</code>) by default.</p> <p>If deletion
                    protection is enabled, you must first disable it before you
                    can delete the ledger using the QLDB API or the AWS Command
                    Line Interface (AWS CLI). You can disable it by calling the
                    <code>UpdateLedger</code> operation to set the flag to
                    <code>false</code>. The QLDB console disables deletion
                    protection for you when you use it to delete a ledger.</p>
                  type: boolean
        required: true
  "/ledgers/{name}/journal-s3-exports/{exportId}":
    get:
      operationId: DescribeJournalS3Export
      description: <p>Returns information about a journal export job, including the ledger
        name, export ID, when it was created, current status, and its start and
        end time export parameters.</p> <p>If the export job with the given
        <code>ExportId</code> doesn't exist, then throws
        <code>ResourceNotFoundException</code>.</p> <p>If the ledger with the
        given <code>Name</code> doesn't exist, then throws
        <code>ResourceNotFoundException</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeJournalS3ExportResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
        - name: exportId
          in: path
          required: true
          description: The unique ID of the journal export job that you want to describe.
          schema:
            type: string
            minLength: 22
            maxLength: 22
            pattern: ^[A-Za-z-0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/ledgers/{name}/journal-s3-exports":
    post:
      operationId: ExportJournalToS3
      description: <p>Exports journal contents within a date and time range from a ledger
        into a specified Amazon Simple Storage Service (Amazon S3) bucket. The
        data is written as files in Amazon Ion format.</p> <p>If the ledger with
        the given <code>Name</code> doesn't exist, then throws
        <code>ResourceNotFoundException</code>.</p> <p>If the ledger with the
        given <code>Name</code> is in <code>CREATING</code> status, then throws
        <code>ResourcePreconditionNotMetException</code>.</p> <p>You can
        initiate up to two concurrent journal export requests for each ledger.
        Beyond this limit, journal export requests throw
        <code>LimitExceededException</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportJournalToS3Response"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourcePreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePreconditionNotMetException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - InclusiveStartTime
                - ExclusiveEndTime
                - S3ExportConfiguration
                - RoleArn
              properties:
                InclusiveStartTime:
                  description: "<p>The inclusive start date and time for the range of
                    journal contents that you want to export.</p> <p>The
                    <code>InclusiveStartTime</code> must be in <code>ISO
                    8601</code> date and time format and in Universal
                    Coordinated Time (UTC). For example:
                    <code>2019-06-13T21:36:34Z</code> </p> <p>The
                    <code>InclusiveStartTime</code> must be before
                    <code>ExclusiveEndTime</code>.</p> <p>If you provide an
                    <code>InclusiveStartTime</code> that is before the ledger's
                    <code>CreationDateTime</code>, Amazon QLDB defaults it to
                    the ledger's <code>CreationDateTime</code>.</p>"
                  type: string
                  format: date-time
                ExclusiveEndTime:
                  description: "<p>The exclusive end date and time for the range of journal
                    contents that you want to export.</p> <p>The
                    <code>ExclusiveEndTime</code> must be in <code>ISO
                    8601</code> date and time format and in Universal
                    Coordinated Time (UTC). For example:
                    <code>2019-06-13T21:36:34Z</code> </p> <p>The
                    <code>ExclusiveEndTime</code> must be less than or equal to
                    the current UTC date and time.</p>"
                  type: string
                  format: date-time
                S3ExportConfiguration:
                  description: The Amazon Simple Storage Service (Amazon S3) bucket
                    location in which a journal export job writes the journal
                    contents.
                  type: object
                  properties:
                    Bucket:
                      $ref: "#/components/schemas/S3Bucket"
                    Prefix:
                      $ref: "#/components/schemas/S3Prefix"
                    EncryptionConfiguration:
                      $ref: "#/components/schemas/S3EncryptionConfiguration"
                RoleArn:
                  description: <p>The Amazon Resource Name (ARN) of the IAM role that
                    grants QLDB permissions for a journal export job to do the
                    following:</p> <ul> <li> <p>Write objects into your Amazon
                    Simple Storage Service (Amazon S3) bucket.</p> </li> <li>
                    <p>(Optional) Use your customer master key (CMK) in AWS Key
                    Management Service (AWS KMS) for server-side encryption of
                    your exported data.</p> </li> </ul>
                  type: string
                  minLength: 20
                  maxLength: 1600
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListJournalS3ExportsForLedger
      description: <p>Returns an array of journal export job descriptions for a specified
        ledger.</p> <p>This action returns a maximum of <code>MaxResults</code>
        items, and is paginated so that you can retrieve all the items by
        calling <code>ListJournalS3ExportsForLedger</code> multiple times.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJournalS3ExportsForLedgerResponse"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
        - name: max_results
          in: query
          required: false
          description: The maximum number of results to return in a single
            <code>ListJournalS3ExportsForLedger</code> request. (The actual
            number of results returned might be fewer.)
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: next_token
          in: query
          required: false
          description: A pagination token, indicating that you want to retrieve the next
            page of results. If you received a value for <code>NextToken</code>
            in the response from a previous
            <code>ListJournalS3ExportsForLedger</code> call, then you should use
            that value as input here.
          schema:
            type: string
            minLength: 4
            maxLength: 1024
            pattern: ^[A-Za-z-0-9+/=]+$
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
  "/ledgers/{name}/block":
    post:
      operationId: GetBlock
      description: <p>Returns a journal block object at a specified address in a ledger.
        Also returns a proof of the specified block for verification if
        <code>DigestTipAddress</code> is provided.</p> <p>If the specified
        ledger doesn't exist or is in <code>DELETING</code> status, then throws
        <code>ResourceNotFoundException</code>.</p> <p>If the specified ledger
        is in <code>CREATING</code> status, then throws
        <code>ResourcePreconditionNotMetException</code>.</p> <p>If no block
        exists with the specified address, then throws
        <code>InvalidParameterException</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBlockResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourcePreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePreconditionNotMetException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - BlockAddress
              properties:
                BlockAddress:
                  description: A structure that can contain an Amazon Ion value in multiple
                    encoding formats.
                  type: object
                  properties:
                    IonText:
                      $ref: "#/components/schemas/IonText"
                DigestTipAddress:
                  description: A structure that can contain an Amazon Ion value in multiple
                    encoding formats.
                  type: object
                  properties:
                    IonText:
                      $ref: "#/components/schemas/IonText"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/ledgers/{name}/digest":
    post:
      operationId: GetDigest
      description: Returns the digest of a ledger at the latest committed block in the
        journal. The response includes a 256-bit hash value and a block address.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDigestResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourcePreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePreconditionNotMetException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/ledgers/{name}/revision":
    post:
      operationId: GetRevision
      description: Returns a revision data object for a specified document ID and block
        address. Also returns a proof of the specified revision for verification
        if <code>DigestTipAddress</code> is provided.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRevisionResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourcePreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePreconditionNotMetException"
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the ledger.
          schema:
            type: string
            minLength: 1
            maxLength: 32
            pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - BlockAddress
                - DocumentId
              properties:
                BlockAddress:
                  description: A structure that can contain an Amazon Ion value in multiple
                    encoding formats.
                  type: object
                  properties:
                    IonText:
                      $ref: "#/components/schemas/IonText"
                DocumentId:
                  description: The unique ID of the document to be verified.
                  type: string
                  pattern: ^[A-Za-z-0-9]+$
                  minLength: 22
                  maxLength: 22
                DigestTipAddress:
                  description: A structure that can contain an Amazon Ion value in multiple
                    encoding formats.
                  type: object
                  properties:
                    IonText:
                      $ref: "#/components/schemas/IonText"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /journal-s3-exports:
    get:
      operationId: ListJournalS3Exports
      description: <p>Returns an array of journal export job descriptions for all ledgers
        that are associated with the current AWS account and Region.</p> <p>This
        action returns a maximum of <code>MaxResults</code> items, and is
        paginated so that you can retrieve all the items by calling
        <code>ListJournalS3Exports</code> multiple times.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJournalS3ExportsResponse"
      parameters:
        - name: max_results
          in: query
          required: false
          description: The maximum number of results to return in a single
            <code>ListJournalS3Exports</code> request. (The actual number of
            results returned might be fewer.)
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: next_token
          in: query
          required: false
          description: A pagination token, indicating that you want to retrieve the next
            page of results. If you received a value for <code>NextToken</code>
            in the response from a previous <code>ListJournalS3Exports</code>
            call, then you should use that value as input here.
          schema:
            type: string
            minLength: 4
            maxLength: 1024
            pattern: ^[A-Za-z-0-9+/=]+$
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{resourceArn}":
    get:
      operationId: ListTagsForResource
      description: Returns all tags for a specified Amazon QLDB resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: <p>The Amazon Resource Name (ARN) for which you want to list the
            tags. For example:</p> <p>
            <code>arn:aws:qldb:us-east-1:123456789012:ledger/exampleLedger</code>
            </p>
          schema:
            type: string
            minLength: 20
            maxLength: 1600
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: <p>Adds one or more tags to a specified Amazon QLDB resource.</p> <p>A
        resource can have up to 50 tags. If you try to create more than 50 tags
        for a resource, your request fails and returns an error.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: <p>The Amazon Resource Name (ARN) to which you want to add the tags.
            For example:</p> <p>
            <code>arn:aws:qldb:us-east-1:123456789012:ledger/exampleLedger</code>
            </p>
          schema:
            type: string
            minLength: 20
            maxLength: 1600
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - Tags
              properties:
                Tags:
                  description: The key-value pairs to add as tags to the specified QLDB
                    resource. Tag keys are case sensitive. If you specify a key
                    that already exists for the resource, your request fails and
                    returns an error. Tag values are case sensitive and can be
                    null.
                  type: object
                  minProperties: 0
                  maxProperties: 200
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
        required: true
  "/tags/{resourceArn}#tagKeys":
    delete:
      operationId: UntagResource
      description: Removes one or more tags from a specified Amazon QLDB resource. You can
        specify up to 50 tag keys to remove.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: <p>The Amazon Resource Name (ARN) from which you want to remove the
            tags. For example:</p> <p>
            <code>arn:aws:qldb:us-east-1:123456789012:ledger/exampleLedger</code>
            </p>
          schema:
            type: string
            minLength: 20
            maxLength: 1600
        - name: tagKeys
          in: query
          required: true
          description: The list of tag keys that you want to remove.
          schema:
            type: array
            items:
              type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://qldb.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The QLDB multi-region endpoint
  - url: https://qldb.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The QLDB multi-region endpoint
  - url: http://qldb.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The QLDB endpoint for China (Beijing) and China (Ningxia)
  - url: https://qldb.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The QLDB endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateLedgerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/LedgerName"
        Arn:
          $ref: "#/components/schemas/Arn"
        State:
          $ref: "#/components/schemas/LedgerState"
        CreationDateTime:
          $ref: "#/components/schemas/Timestamp"
        DeletionProtection:
          $ref: "#/components/schemas/DeletionProtection"
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    InvalidParameterException: {}
    ResourceAlreadyExistsException: {}
    LimitExceededException: {}
    ResourceInUseException: {}
    ResourceNotFoundException: {}
    ResourcePreconditionNotMetException: {}
    DescribeJournalS3ExportResponse:
      type: object
      required:
        - ExportDescription
      properties:
        ExportDescription:
          $ref: "#/components/schemas/JournalS3ExportDescription"
    DescribeLedgerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/LedgerName"
        Arn:
          $ref: "#/components/schemas/Arn"
        State:
          $ref: "#/components/schemas/LedgerState"
        CreationDateTime:
          $ref: "#/components/schemas/Timestamp"
        DeletionProtection:
          $ref: "#/components/schemas/DeletionProtection"
    ExportJournalToS3Response:
      type: object
      required:
        - ExportId
      properties:
        ExportId:
          $ref: "#/components/schemas/UniqueId"
    S3Bucket:
      type: string
      pattern: ^[A-Za-z-0-9-_.]+$
      minLength: 3
      maxLength: 255
    S3Prefix:
      type: string
      minLength: 0
      maxLength: 128
    S3EncryptionConfiguration:
      type: object
      required:
        - ObjectEncryptionType
      properties:
        ObjectEncryptionType:
          $ref: "#/components/schemas/S3ObjectEncryptionType"
        KmsKeyArn:
          $ref: "#/components/schemas/Arn"
      description: The encryption settings that are used by a journal export job to write
        data in an Amazon Simple Storage Service (Amazon S3) bucket.
    GetBlockResponse:
      type: object
      required:
        - Block
      properties:
        Block:
          $ref: "#/components/schemas/ValueHolder"
        Proof:
          $ref: "#/components/schemas/ValueHolder"
    IonText:
      type: string
      minLength: 1
      maxLength: 1048576
      format: password
    GetDigestResponse:
      type: object
      required:
        - Digest
        - DigestTipAddress
      properties:
        Digest:
          $ref: "#/components/schemas/Digest"
        DigestTipAddress:
          $ref: "#/components/schemas/ValueHolder"
    GetRevisionResponse:
      type: object
      required:
        - Revision
      properties:
        Proof:
          $ref: "#/components/schemas/ValueHolder"
        Revision:
          $ref: "#/components/schemas/ValueHolder"
    ListJournalS3ExportsResponse:
      type: object
      properties:
        JournalS3Exports:
          $ref: "#/components/schemas/JournalS3ExportList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListJournalS3ExportsForLedgerResponse:
      type: object
      properties:
        JournalS3Exports:
          $ref: "#/components/schemas/JournalS3ExportList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListLedgersResponse:
      type: object
      properties:
        Ledgers:
          $ref: "#/components/schemas/LedgerList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/Tags"
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    UpdateLedgerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/LedgerName"
        Arn:
          $ref: "#/components/schemas/Arn"
        State:
          $ref: "#/components/schemas/LedgerState"
        CreationDateTime:
          $ref: "#/components/schemas/Timestamp"
        DeletionProtection:
          $ref: "#/components/schemas/DeletionProtection"
    Arn:
      type: string
      minLength: 20
      maxLength: 1600
    LedgerName:
      type: string
      pattern: (?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$
      minLength: 1
      maxLength: 32
    Tags:
      type: object
      minProperties: 0
      maxProperties: 200
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    PermissionsMode:
      type: string
      enum:
        - ALLOW_ALL
    DeletionProtection:
      type: boolean
    CreateLedgerRequest:
      type: object
      required:
        - Name
        - PermissionsMode
      properties:
        Name:
          $ref: "#/components/schemas/LedgerName"
        Tags:
          $ref: "#/components/schemas/Tags"
        PermissionsMode:
          $ref: "#/components/schemas/PermissionsMode"
        DeletionProtection:
          $ref: "#/components/schemas/DeletionProtection"
    LedgerState:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
        - DELETED
    Timestamp:
      type: string
      format: date-time
    DeleteLedgerRequest:
      type: object
      properties: {}
    UniqueId:
      type: string
      pattern: ^[A-Za-z-0-9]+$
      minLength: 22
      maxLength: 22
    DescribeJournalS3ExportRequest:
      type: object
      properties: {}
    JournalS3ExportDescription:
      type: object
      required:
        - LedgerName
        - ExportId
        - ExportCreationTime
        - Status
        - InclusiveStartTime
        - ExclusiveEndTime
        - S3ExportConfiguration
        - RoleArn
      properties:
        LedgerName:
          $ref: "#/components/schemas/LedgerName"
        ExportId:
          $ref: "#/components/schemas/UniqueId"
        ExportCreationTime:
          $ref: "#/components/schemas/Timestamp"
        Status:
          $ref: "#/components/schemas/ExportStatus"
        InclusiveStartTime:
          $ref: "#/components/schemas/Timestamp"
        ExclusiveEndTime:
          $ref: "#/components/schemas/Timestamp"
        S3ExportConfiguration:
          $ref: "#/components/schemas/S3ExportConfiguration"
        RoleArn:
          $ref: "#/components/schemas/Arn"
      description: The information about a journal export job, including the ledger name,
        export ID, when it was created, current status, and its start and end
        time export parameters.
    DescribeLedgerRequest:
      type: object
      properties: {}
    Digest:
      type: string
      minLength: 32
      maxLength: 32
    S3ExportConfiguration:
      type: object
      required:
        - Bucket
        - Prefix
        - EncryptionConfiguration
      properties:
        Bucket:
          $ref: "#/components/schemas/S3Bucket"
        Prefix:
          $ref: "#/components/schemas/S3Prefix"
        EncryptionConfiguration:
          $ref: "#/components/schemas/S3EncryptionConfiguration"
      description: The Amazon Simple Storage Service (Amazon S3) bucket location in which a
        journal export job writes the journal contents.
    ExportJournalToS3Request:
      type: object
      required:
        - InclusiveStartTime
        - ExclusiveEndTime
        - S3ExportConfiguration
        - RoleArn
      properties:
        InclusiveStartTime:
          $ref: "#/components/schemas/Timestamp"
        ExclusiveEndTime:
          $ref: "#/components/schemas/Timestamp"
        S3ExportConfiguration:
          $ref: "#/components/schemas/S3ExportConfiguration"
        RoleArn:
          $ref: "#/components/schemas/Arn"
    ExportStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED
    ValueHolder:
      type: object
      properties:
        IonText:
          $ref: "#/components/schemas/IonText"
      description: A structure that can contain an Amazon Ion value in multiple encoding
        formats.
    GetBlockRequest:
      type: object
      required:
        - BlockAddress
      properties:
        BlockAddress:
          $ref: "#/components/schemas/ValueHolder"
        DigestTipAddress:
          $ref: "#/components/schemas/ValueHolder"
    GetDigestRequest:
      type: object
      properties: {}
    GetRevisionRequest:
      type: object
      required:
        - BlockAddress
        - DocumentId
      properties:
        BlockAddress:
          $ref: "#/components/schemas/ValueHolder"
        DocumentId:
          $ref: "#/components/schemas/UniqueId"
        DigestTipAddress:
          $ref: "#/components/schemas/ValueHolder"
    JournalS3ExportList:
      type: array
      items:
        $ref: "#/components/schemas/JournalS3ExportDescription"
    LedgerSummary:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/LedgerName"
        State:
          $ref: "#/components/schemas/LedgerState"
        CreationDateTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about a ledger, including its name, state, and when it was
        created.
    LedgerList:
      type: array
      items:
        $ref: "#/components/schemas/LedgerSummary"
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      pattern: ^[A-Za-z-0-9+/=]+$
      minLength: 4
      maxLength: 1024
    ListJournalS3ExportsForLedgerRequest:
      type: object
      properties: {}
    ListJournalS3ExportsRequest:
      type: object
      properties: {}
    ListLedgersRequest:
      type: object
      properties: {}
    ListTagsForResourceRequest:
      type: object
      properties: {}
    S3ObjectEncryptionType:
      type: string
      enum:
        - SSE_KMS
        - SSE_S3
        - NO_ENCRYPTION
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 0
      maxItems: 200
    TagResourceRequest:
      type: object
      required:
        - Tags
      properties:
        Tags:
          $ref: "#/components/schemas/Tags"
    UntagResourceRequest:
      type: object
      properties: {}
    UpdateLedgerRequest:
      type: object
      properties:
        DeletionProtection:
          $ref: "#/components/schemas/DeletionProtection"
