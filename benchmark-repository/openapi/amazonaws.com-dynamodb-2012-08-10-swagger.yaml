openapi: 3.0.0
info:
  version: 2012-08-10
  x-release: v4
  title: Amazon DynamoDB
  description: <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed
    NoSQL database service that provides fast and predictable performance with
    seamless scalability. DynamoDB lets you offload the administrative burdens
    of operating and scaling a distributed database, so that you don't have to
    worry about hardware provisioning, setup and configuration, replication,
    software patching, or cluster scaling.</p> <p>With DynamoDB, you can create
    database tables that can store and retrieve any amount of data, and serve
    any level of request traffic. You can scale up or scale down your tables'
    throughput capacity without downtime or performance degradation, and use the
    AWS Management Console to monitor resource utilization and performance
    metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your
    tables over a sufficient number of servers to handle your throughput and
    storage requirements, while maintaining consistent and fast performance. All
    of your data is stored on solid state disks (SSDs) and automatically
    replicated across multiple Availability Zones in an AWS region, providing
    built-in high availability and data durability. </p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: dynamodb
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dynamodb-2012-08-10.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/dynamodb/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=DynamoDB_20120810.BatchGetItem:
    post:
      operationId: BatchGetItem
      description: <p>The <code>BatchGetItem</code> operation returns the attributes of one
        or more items from one or more tables. You identify requested items by
        primary key.</p> <p>A single operation can retrieve up to 16 MB of data,
        which can contain as many as 100 items. <code>BatchGetItem</code>
        returns a partial result if the response size limit is exceeded, the
        table's provisioned throughput is exceeded, or an internal processing
        failure occurs. If a partial result is returned, the operation returns a
        value for <code>UnprocessedKeys</code>. You can use this value to retry
        the operation starting with the next item to get.</p> <important> <p>If
        you request more than 100 items, <code>BatchGetItem</code> returns a
        <code>ValidationException</code> with the message "Too many items
        requested for the BatchGetItem call."</p> </important> <p>For example,
        if you ask to retrieve 100 items, but each individual item is 300 KB in
        size, the system returns 52 items (so as not to exceed the 16 MB limit).
        It also returns an appropriate <code>UnprocessedKeys</code> value so you
        can get the next page of results. If desired, your application can
        include its own logic to assemble the pages of results into one
        dataset.</p> <p>If <i>none</i> of the items can be processed due to
        insufficient provisioned throughput on all of the tables in the request,
        then <code>BatchGetItem</code> returns a
        <code>ProvisionedThroughputExceededException</code>. If <i>at least
        one</i> of the items is successfully processed, then
        <code>BatchGetItem</code> completes successfully, while returning the
        keys of the unread items in <code>UnprocessedKeys</code>.</p>
        <important> <p>If DynamoDB returns any unprocessed items, you should
        retry the batch operation on those items. However, <i>we strongly
        recommend that you use an exponential backoff algorithm</i>. If you
        retry the batch operation immediately, the underlying read or write
        requests can still fail due to throttling on the individual tables. If
        you delay the batch operation using exponential backoff, the individual
        requests in the batch are much more likely to succeed.</p> <p>For more
        information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch
        Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer
        Guide</i>.</p> </important> <p>By default, <code>BatchGetItem</code>
        performs eventually consistent reads on every table in the request. If
        you want strongly consistent reads instead, you can set
        <code>ConsistentRead</code> to <code>true</code> for any or all
        tables.</p> <p>In order to minimize response latency,
        <code>BatchGetItem</code> retrieves items in parallel.</p> <p>When
        designing your application, keep in mind that DynamoDB does not return
        items in any particular order. To help parse the response by item,
        include the primary key values for the items in your request in the
        <code>ProjectionExpression</code> parameter.</p> <p>If a requested item
        does not exist, it is not returned in the result. Requests for
        nonexistent items consume the minimum read capacity units according to
        the type of read. For more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Working
        with Tables</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetItemOutput"
        "480":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: RequestItems
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.BatchGetItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetItemInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.BatchWriteItem:
    post:
      operationId: BatchWriteItem
      description: <p>The <code>BatchWriteItem</code> operation puts or deletes multiple
        items in one or more tables. A single call to
        <code>BatchWriteItem</code> can write up to 16 MB of data, which can
        comprise as many as 25 put or delete requests. Individual items to be
        written can be as large as 400 KB.</p> <note> <p>
        <code>BatchWriteItem</code> cannot update items. To update items, use
        the <code>UpdateItem</code> action.</p> </note> <p>The individual
        <code>PutItem</code> and <code>DeleteItem</code> operations specified in
        <code>BatchWriteItem</code> are atomic; however
        <code>BatchWriteItem</code> as a whole is not. If any requested
        operations fail because the table's provisioned throughput is exceeded
        or an internal processing failure occurs, the failed operations are
        returned in the <code>UnprocessedItems</code> response parameter. You
        can investigate and optionally resend the requests. Typically, you would
        call <code>BatchWriteItem</code> in a loop. Each iteration would check
        for unprocessed items and submit a new <code>BatchWriteItem</code>
        request with those unprocessed items until all items have been
        processed.</p> <p>If <i>none</i> of the items can be processed due to
        insufficient provisioned throughput on all of the tables in the request,
        then <code>BatchWriteItem</code> returns a
        <code>ProvisionedThroughputExceededException</code>.</p> <important>
        <p>If DynamoDB returns any unprocessed items, you should retry the batch
        operation on those items. However, <i>we strongly recommend that you use
        an exponential backoff algorithm</i>. If you retry the batch operation
        immediately, the underlying read or write requests can still fail due to
        throttling on the individual tables. If you delay the batch operation
        using exponential backoff, the individual requests in the batch are much
        more likely to succeed.</p> <p>For more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#Programming.Errors.BatchOperations">Batch
        Operations and Error Handling</a> in the <i>Amazon DynamoDB Developer
        Guide</i>.</p> </important> <p>With <code>BatchWriteItem</code>, you can
        efficiently write or delete large amounts of data, such as from Amazon
        EMR, or copy data from another database into DynamoDB. In order to
        improve performance with these large-scale operations,
        <code>BatchWriteItem</code> does not behave in the same way as
        individual <code>PutItem</code> and <code>DeleteItem</code> calls would.
        For example, you cannot specify conditions on individual put and delete
        requests, and <code>BatchWriteItem</code> does not return deleted items
        in the response.</p> <p>If you use a programming language that supports
        concurrency, you can use threads to write items in parallel. Your
        application must include the necessary logic to manage the threads. With
        languages that don't support threading, you must update or delete the
        specified items one at a time. In both situations,
        <code>BatchWriteItem</code> performs the specified put and delete
        operations in parallel, giving you the power of the thread pool approach
        without having to introduce complexity into your application.</p>
        <p>Parallel processing reduces latency, but each specified put and
        delete request consumes the same number of write capacity units whether
        it is processed in parallel or not. Delete operations on nonexistent
        items consume one write capacity unit.</p> <p>If one or more of the
        following is true, DynamoDB rejects the entire batch write
        operation:</p> <ul> <li> <p>One or more tables specified in the
        <code>BatchWriteItem</code> request does not exist.</p> </li> <li>
        <p>Primary key attributes specified on an item in the request do not
        match those in the corresponding table's primary key schema.</p> </li>
        <li> <p>You try to perform multiple operations on the same item in the
        same <code>BatchWriteItem</code> request. For example, you cannot put
        and delete the same item in the same <code>BatchWriteItem</code>
        request. </p> </li> <li> <p> Your request contains at least two items
        with identical hash and range keys (which essentially is two put
        operations). </p> </li> <li> <p>There are more than 25 requests in the
        batch.</p> </li> <li> <p>Any individual item in a batch exceeds 400
        KB.</p> </li> <li> <p>The total request size exceeds 16 MB.</p> </li>
        </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchWriteItemOutput"
        "480":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ItemCollectionSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCollectionSizeLimitExceededException"
        "483":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "484":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.BatchWriteItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchWriteItemInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.CreateBackup:
    post:
      operationId: CreateBackup
      description: "<p>Creates a backup for an existing table.</p> <p> Each time you create
        an on-demand backup, the entire table data is backed up. There is no
        limit to the number of on-demand backups that can be taken. </p> <p>
        When you create an on-demand backup, a time marker of the request is
        cataloged, and the backup is created asynchronously, by applying all
        changes until the time of the request to the last full table snapshot.
        Backup requests are processed instantaneously and become available for
        restore within minutes. </p> <p>You can call <code>CreateBackup</code>
        at a maximum rate of 50 times per second.</p> <p>All backups in DynamoDB
        work without consuming any provisioned throughput on the table.</p> <p>
        If you submit a backup request on 2018-12-14 at 14:25:00, the backup is
        guaranteed to contain all data committed to the table up to 14:24:00,
        and data committed after 14:26:00 will not be. The backup might contain
        data modifications made between 14:24:00 and 14:26:00. On-demand backup
        does not support causal consistency. </p> <p> Along with data, the
        following are also included on the backups: </p> <ul> <li> <p>Global
        secondary indexes (GSIs)</p> </li> <li> <p>Local secondary indexes
        (LSIs)</p> </li> <li> <p>Streams</p> </li> <li> <p>Provisioned read and
        write capacity</p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBackupOutput"
        "480":
          description: TableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableNotFoundException"
        "481":
          description: TableInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInUseException"
        "482":
          description: ContinuousBackupsUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContinuousBackupsUnavailableException"
        "483":
          description: BackupInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupInUseException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.CreateBackup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBackupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.CreateGlobalTable:
    post:
      operationId: CreateGlobalTable
      description: "<p>Creates a global table from an existing table. A global table
        creates a replication relationship between two or more DynamoDB tables
        with the same table name in the provided Regions. </p> <p>If you want to
        add a new replica table to a global table, each of the following
        conditions must be true:</p> <ul> <li> <p>The table must have the same
        primary key as all of the other replicas.</p> </li> <li> <p>The table
        must have the same name as all of the other replicas.</p> </li> <li>
        <p>The table must have DynamoDB Streams enabled, with the stream
        containing both the new and the old images of the item.</p> </li> <li>
        <p>None of the replica tables in the global table can contain any
        data.</p> </li> </ul> <p> If global secondary indexes are specified,
        then the following conditions must also be met: </p> <ul> <li> <p> The
        global secondary indexes must have the same name. </p> </li> <li> <p>
        The global secondary indexes must have the same hash key and sort key
        (if present). </p> </li> </ul> <important> <p> Write capacity settings
        should be set consistently across your replica tables and secondary
        indexes. DynamoDB strongly recommends enabling auto scaling to manage
        the write capacity settings for all of your global tables replicas and
        indexes. </p> <p> If you prefer to manage write capacity settings
        manually, you should provision equal replicated write capacity units to
        your replica tables. You should also provision equal replicated write
        capacity units to matching secondary indexes across your global table.
        </p> </important>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGlobalTableOutput"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "482":
          description: GlobalTableAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalTableAlreadyExistsException"
        "483":
          description: TableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.CreateGlobalTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGlobalTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.CreateTable:
    post:
      operationId: CreateTable
      description: <p>The <code>CreateTable</code> operation adds a new table to your
        account. In an AWS account, table names must be unique within each
        Region. That is, you can have two tables with same name if you create
        the tables in different Regions.</p> <p> <code>CreateTable</code> is an
        asynchronous operation. Upon receiving a <code>CreateTable</code>
        request, DynamoDB immediately returns a response with a
        <code>TableStatus</code> of <code>CREATING</code>. After the table is
        created, DynamoDB sets the <code>TableStatus</code> to
        <code>ACTIVE</code>. You can perform read and write operations only on
        an <code>ACTIVE</code> table. </p> <p>You can optionally define
        secondary indexes on the new table, as part of the
        <code>CreateTable</code> operation. If you want to create multiple
        tables with secondary indexes on them, you must create the tables
        sequentially. Only one table with secondary indexes can be in the
        <code>CREATING</code> state at any given time.</p> <p>You can use the
        <code>DescribeTable</code> action to check the table status.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTableOutput"
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.CreateTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DeleteBackup:
    post:
      operationId: DeleteBackup
      description: <p>Deletes an existing backup of a table.</p> <p>You can call
        <code>DeleteBackup</code> at a maximum rate of 10 times per second.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteBackupOutput"
        "480":
          description: BackupNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupNotFoundException"
        "481":
          description: BackupInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupInUseException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DeleteBackup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBackupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DeleteItem:
    post:
      operationId: DeleteItem
      description: <p>Deletes a single item in a table by primary key. You can perform a
        conditional delete operation that deletes the item if it exists, or if
        it has an expected attribute value.</p> <p>In addition to deleting an
        item, you can also return the item's attribute values in the same
        operation, using the <code>ReturnValues</code> parameter.</p> <p>Unless
        you specify conditions, the <code>DeleteItem</code> is an idempotent
        operation; running it multiple times on the same item or attribute does
        <i>not</i> result in an error response.</p> <p>Conditional deletes are
        useful for deleting items only if specific conditions are met. If those
        conditions are met, DynamoDB performs the delete. Otherwise, the item is
        not deleted.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteItemOutput"
        "480":
          description: ConditionalCheckFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionalCheckFailedException"
        "481":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ItemCollectionSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCollectionSizeLimitExceededException"
        "484":
          description: TransactionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionConflictException"
        "485":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "486":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DeleteItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteItemInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DeleteTable:
    post:
      operationId: DeleteTable
      description: <p>The <code>DeleteTable</code> operation deletes a table and all of its
        items. After a <code>DeleteTable</code> request, the specified table is
        in the <code>DELETING</code> state until DynamoDB completes the
        deletion. If the table is in the <code>ACTIVE</code> state, you can
        delete it. If a table is in <code>CREATING</code> or
        <code>UPDATING</code> states, then DynamoDB returns a
        <code>ResourceInUseException</code>. If the specified table does not
        exist, DynamoDB returns a <code>ResourceNotFoundException</code>. If
        table is already in the <code>DELETING</code> state, no error is
        returned. </p> <note> <p>DynamoDB might continue to accept data read and
        write operations, such as <code>GetItem</code> and <code>PutItem</code>,
        on a table in the <code>DELETING</code> state until the table deletion
        is complete.</p> </note> <p>When you delete a table, any indexes on that
        table are also deleted.</p> <p>If you have DynamoDB Streams enabled on
        the table, then the corresponding stream on that table goes into the
        <code>DISABLED</code> state, and the stream is automatically deleted
        after 24 hours.</p> <p>Use the <code>DescribeTable</code> action to
        check the status of the table. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTableOutput"
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DeleteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeBackup:
    post:
      operationId: DescribeBackup
      description: <p>Describes an existing backup of a table.</p> <p>You can call
        <code>DescribeBackup</code> at a maximum rate of 10 times per
        second.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeBackupOutput"
        "480":
          description: BackupNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeBackup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeBackupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeContinuousBackups:
    post:
      operationId: DescribeContinuousBackups
      description: <p>Checks the status of continuous backups and point in time recovery on
        the specified table. Continuous backups are <code>ENABLED</code> on all
        tables at table creation. If point in time recovery is enabled,
        <code>PointInTimeRecoveryStatus</code> will be set to ENABLED.</p> <p>
        After continuous backups and point in time recovery are enabled, you can
        restore to any point in time within
        <code>EarliestRestorableDateTime</code> and
        <code>LatestRestorableDateTime</code>. </p> <p>
        <code>LatestRestorableDateTime</code> is typically 5 minutes before the
        current time. You can restore your table to any point in time during the
        last 35 days. </p> <p>You can call
        <code>DescribeContinuousBackups</code> at a maximum rate of 10 times per
        second.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeContinuousBackupsOutput"
        "480":
          description: TableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeContinuousBackups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeContinuousBackupsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeEndpoints:
    post:
      operationId: DescribeEndpoints
      description: Returns the regional endpoint information.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeEndpointsResponse"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeEndpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeEndpointsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeGlobalTable:
    post:
      operationId: DescribeGlobalTable
      description: Returns information about the specified global table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeGlobalTableOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "481":
          description: GlobalTableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalTableNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeGlobalTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeGlobalTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeGlobalTableSettings:
    post:
      operationId: DescribeGlobalTableSettings
      description: Describes Region-specific settings for a global table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeGlobalTableSettingsOutput"
        "480":
          description: GlobalTableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalTableNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeGlobalTableSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeGlobalTableSettingsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeLimits:
    post:
      operationId: DescribeLimits
      description: <p>Returns the current provisioned-capacity limits for your AWS account
        in a Region, both for the Region as a whole and for any one DynamoDB
        table that you create there.</p> <p>When you establish an AWS account,
        the account has initial limits on the maximum read capacity units and
        write capacity units that you can provision across all of your DynamoDB
        tables in a given Region. Also, there are per-table limits that apply
        when you create a table there. For more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
        page in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>Although you
        can increase these limits by filing a case at <a
        href="https://console.aws.amazon.com/support/home#/">AWS Support
        Center</a>, obtaining the increase is not instantaneous. The
        <code>DescribeLimits</code> action lets you write code to compare the
        capacity you are currently using to those limits imposed by your account
        so that you have enough time to apply for an increase before you hit a
        limit.</p> <p>For example, you could use one of the AWS SDKs to do the
        following:</p> <ol> <li> <p>Call <code>DescribeLimits</code> for a
        particular Region to obtain your current account limits on provisioned
        capacity there.</p> </li> <li> <p>Create a variable to hold the
        aggregate read capacity units provisioned for all your tables in that
        Region, and one to hold the aggregate write capacity units. Zero them
        both.</p> </li> <li> <p>Call <code>ListTables</code> to obtain a list of
        all your DynamoDB tables.</p> </li> <li> <p>For each table name listed
        by <code>ListTables</code>, do the following:</p> <ul> <li> <p>Call
        <code>DescribeTable</code> with the table name.</p> </li> <li> <p>Use
        the data returned by <code>DescribeTable</code> to add the read capacity
        units and write capacity units provisioned for the table itself to your
        variables.</p> </li> <li> <p>If the table has one or more global
        secondary indexes (GSIs), loop over these GSIs and add their provisioned
        capacity values to your variables as well.</p> </li> </ul> </li> <li>
        <p>Report the account limits for that Region returned by
        <code>DescribeLimits</code>, along with the total current provisioned
        capacity levels you have calculated.</p> </li> </ol> <p>This will let
        you see whether you are getting close to your account-level limits.</p>
        <p>The per-table limits apply only when you are creating a new table.
        They restrict the sum of the provisioned capacity of the new table
        itself and all its global secondary indexes.</p> <p>For existing tables
        and their GSIs, DynamoDB doesn't let you increase provisioned capacity
        extremely rapidly. But the only upper limit that applies is that the
        aggregate provisioned capacity over all your tables and GSIs cannot
        exceed either of the per-account limits.</p> <note> <p>
        <code>DescribeLimits</code> should only be called periodically. You can
        expect throttling errors if you call it more than once in a minute.</p>
        </note> <p>The <code>DescribeLimits</code> Request element has no
        content.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeLimitsOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeLimits
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeLimitsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeTable:
    post:
      operationId: DescribeTable
      description: <p>Returns information about the table, including the current status of
        the table, when it was created, the primary key schema, and any indexes
        on the table.</p> <note> <p>If you issue a <code>DescribeTable</code>
        request immediately after a <code>CreateTable</code> request, DynamoDB
        might return a <code>ResourceNotFoundException</code>. This is because
        <code>DescribeTable</code> uses an eventually consistent query, and the
        metadata for your table might not be available at that moment. Wait for
        a few seconds, and then try the <code>DescribeTable</code> request
        again.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTableOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.DescribeTimeToLive:
    post:
      operationId: DescribeTimeToLive
      description: "Gives a description of the Time to Live (TTL) status on the specified
        table. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTimeToLiveOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.DescribeTimeToLive
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeTimeToLiveInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.GetItem:
    post:
      operationId: GetItem
      description: <p>The <code>GetItem</code> operation returns a set of attributes for
        the item with the given primary key. If there is no matching item,
        <code>GetItem</code> does not return any data and there will be no
        <code>Item</code> element in the response.</p> <p> <code>GetItem</code>
        provides an eventually consistent read by default. If your application
        requires a strongly consistent read, set <code>ConsistentRead</code> to
        <code>true</code>. Although a strongly consistent read might take more
        time than an eventually consistent read, it always returns the last
        updated value.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetItemOutput"
        "480":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.GetItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetItemInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.ListBackups:
    post:
      operationId: ListBackups
      description: <p>List backups associated with an AWS account. To list backups for a
        given table, specify <code>TableName</code>. <code>ListBackups</code>
        returns a paginated list of results with at most 1 MB worth of items in
        a page. You can also specify a limit for the maximum number of entries
        to be returned in a page. </p> <p>In the request, start time is
        inclusive, but end time is exclusive. Note that these limits are for the
        time at which the original backup was requested.</p> <p>You can call
        <code>ListBackups</code> a maximum of five times per second.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBackupsOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.ListBackups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListBackupsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.ListGlobalTables:
    post:
      operationId: ListGlobalTables
      description: Lists all global tables that have a replica in the specified Region.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGlobalTablesOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.ListGlobalTables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListGlobalTablesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.ListTables:
    post:
      operationId: ListTables
      description: Returns an array of table names associated with the current account and
        endpoint. The output from <code>ListTables</code> is paginated, with
        each page returning a maximum of 100 table names.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTablesOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: ExclusiveStartTableName
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.ListTables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTablesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.ListTagsOfResource:
    post:
      operationId: ListTagsOfResource
      description: <p>List all tags on an Amazon DynamoDB resource. You can call
        ListTagsOfResource up to 10 times per second, per account.</p> <p>For an
        overview on tagging DynamoDB resources, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
        for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsOfResourceOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.ListTagsOfResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsOfResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.PutItem:
    post:
      operationId: PutItem
      description: <p>Creates a new item, or replaces an old item with a new item. If an
        item that has the same primary key as the new item already exists in the
        specified table, the new item completely replaces the existing item. You
        can perform a conditional put operation (add a new item if one with the
        specified primary key doesn't exist), or replace an existing item if it
        has certain attribute values. You can return the item's attribute values
        in the same operation, using the <code>ReturnValues</code>
        parameter.</p> <important> <p>This topic provides general information
        about the <code>PutItem</code> API.</p> <p>For information on how to
        call the <code>PutItem</code> API using the AWS SDK in specific
        languages, see the following:</p> <ul> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS Command Line Interface</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for .NET</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for C++</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for Go</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for Java</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for JavaScript</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for PHP V3</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for Python</a> </p> </li> <li> <p> <a
        href="http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem">
        PutItem in the AWS SDK for Ruby V2</a> </p> </li> </ul> </important>
        <p>When you add an item, the primary key attributes are the only
        required attributes. Attribute values cannot be null. String and Binary
        type attributes must have lengths greater than zero. Set type attributes
        cannot be empty. Requests with empty values will be rejected with a
        <code>ValidationException</code> exception.</p> <note> <p>To prevent a
        new item from replacing an existing item, use a conditional expression
        that contains the <code>attribute_not_exists</code> function with the
        name of the attribute being used as the partition key for the table.
        Since every record must contain that attribute, the
        <code>attribute_not_exists</code> function will only succeed if no
        matching item exists.</p> </note> <p>For more information about
        <code>PutItem</code>, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working
        with Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutItemOutput"
        "480":
          description: ConditionalCheckFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionalCheckFailedException"
        "481":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ItemCollectionSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCollectionSizeLimitExceededException"
        "484":
          description: TransactionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionConflictException"
        "485":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "486":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.PutItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutItemInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.Query:
    post:
      operationId: Query
      description: <p>The <code>Query</code> operation finds items based on primary key
        values. You can query any table or secondary index that has a composite
        primary key (a partition key and a sort key). </p> <p>Use the
        <code>KeyConditionExpression</code> parameter to provide a specific
        value for the partition key. The <code>Query</code> operation will
        return all of the items from the table or index with that partition key
        value. You can optionally narrow the scope of the <code>Query</code>
        operation by specifying a sort key value and a comparison operator in
        <code>KeyConditionExpression</code>. To further refine the
        <code>Query</code> results, you can optionally provide a
        <code>FilterExpression</code>. A <code>FilterExpression</code>
        determines which items within the results should be returned to you. All
        of the other results are discarded. </p> <p> A <code>Query</code>
        operation always returns a result set. If no matching items are found,
        the result set will be empty. Queries that do not return results consume
        the minimum number of read capacity units for that type of read
        operation. </p> <note> <p> DynamoDB calculates the number of read
        capacity units consumed based on item size, not on the amount of data
        that is returned to an application. The number of capacity units
        consumed will be the same whether you request all of the attributes (the
        default behavior) or just some of them (using a projection expression).
        The number will also be the same whether or not you use a
        <code>FilterExpression</code>. </p> </note> <p> <code>Query</code>
        results are always sorted by the sort key value. If the data type of the
        sort key is Number, the results are returned in numeric order;
        otherwise, the results are returned in order of UTF-8 bytes. By default,
        the sort order is ascending. To reverse the order, set the
        <code>ScanIndexForward</code> parameter to false. </p> <p> A single
        <code>Query</code> operation will read up to the maximum number of items
        set (if using the <code>Limit</code> parameter) or a maximum of 1 MB of
        data and then apply any filtering to the results using
        <code>FilterExpression</code>. If <code>LastEvaluatedKey</code> is
        present in the response, you will need to paginate the result set. For
        more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination">Paginating
        the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p> <p>
        <code>FilterExpression</code> is applied after a <code>Query</code>
        finishes, but before the results are returned. A
        <code>FilterExpression</code> cannot contain partition key or sort key
        attributes. You need to specify those attributes in the
        <code>KeyConditionExpression</code>. </p> <note> <p> A
        <code>Query</code> operation can return an empty result set and a
        <code>LastEvaluatedKey</code> if all the items read for the page of
        results are filtered out. </p> </note> <p>You can query a table, a local
        secondary index, or a global secondary index. For a query on a table or
        on a local secondary index, you can set the <code>ConsistentRead</code>
        parameter to <code>true</code> and obtain a strongly consistent result.
        Global secondary indexes support eventually consistent reads only, so do
        not specify <code>ConsistentRead</code> when querying a global secondary
        index.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryOutput"
        "480":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: ExclusiveStartKey
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.Query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.RestoreTableFromBackup:
    post:
      operationId: RestoreTableFromBackup
      description: <p>Creates a new table from an existing backup. Any number of users can
        execute up to 4 concurrent restores (any type of restore) in a given
        account. </p> <p>You can call <code>RestoreTableFromBackup</code> at a
        maximum rate of 10 times per second.</p> <p>You must manually set up the
        following on the restored table:</p> <ul> <li> <p>Auto scaling
        policies</p> </li> <li> <p>IAM policies</p> </li> <li> <p>Amazon
        CloudWatch metrics and alarms</p> </li> <li> <p>Tags</p> </li> <li>
        <p>Stream settings</p> </li> <li> <p>Time to Live (TTL) settings</p>
        </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestoreTableFromBackupOutput"
        "480":
          description: TableAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableAlreadyExistsException"
        "481":
          description: TableInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInUseException"
        "482":
          description: BackupNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupNotFoundException"
        "483":
          description: BackupInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupInUseException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.RestoreTableFromBackup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreTableFromBackupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.RestoreTableToPointInTime:
    post:
      operationId: RestoreTableToPointInTime
      description: "<p>Restores the specified table to the specified point in time within
        <code>EarliestRestorableDateTime</code> and
        <code>LatestRestorableDateTime</code>. You can restore your table to any
        point in time during the last 35 days. Any number of users can execute
        up to 4 concurrent restores (any type of restore) in a given account.
        </p> <p> When you restore using point in time recovery, DynamoDB
        restores your table data to the state based on the selected date and
        time (day:hour:minute:second) to a new table. </p> <p> Along with data,
        the following are also included on the new restored table using point in
        time recovery: </p> <ul> <li> <p>Global secondary indexes (GSIs)</p>
        </li> <li> <p>Local secondary indexes (LSIs)</p> </li> <li>
        <p>Provisioned read and write capacity</p> </li> <li> <p>Encryption
        settings</p> <important> <p> All these settings come from the current
        settings of the source table at the time of restore. </p> </important>
        </li> </ul> <p>You must manually set up the following on the restored
        table:</p> <ul> <li> <p>Auto scaling policies</p> </li> <li> <p>IAM
        policies</p> </li> <li> <p>Amazon CloudWatch metrics and alarms</p>
        </li> <li> <p>Tags</p> </li> <li> <p>Stream settings</p> </li> <li>
        <p>Time to Live (TTL) settings</p> </li> <li> <p>Point in time recovery
        settings</p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestoreTableToPointInTimeOutput"
        "480":
          description: TableAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableAlreadyExistsException"
        "481":
          description: TableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableNotFoundException"
        "482":
          description: TableInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInUseException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: InvalidRestoreTimeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRestoreTimeException"
        "485":
          description: PointInTimeRecoveryUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PointInTimeRecoveryUnavailableException"
        "486":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.RestoreTableToPointInTime
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreTableToPointInTimeInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.Scan:
    post:
      operationId: Scan
      description: <p>The <code>Scan</code> operation returns one or more items and item
        attributes by accessing every item in a table or a secondary index. To
        have DynamoDB return fewer items, you can provide a
        <code>FilterExpression</code> operation.</p> <p>If the total number of
        scanned items exceeds the maximum dataset size limit of 1 MB, the scan
        stops and results are returned to the user as a
        <code>LastEvaluatedKey</code> value to continue the scan in a subsequent
        operation. The results also include the number of items exceeding the
        limit. A scan can result in no table data meeting the filter criteria.
        </p> <p>A single <code>Scan</code> operation reads up to the maximum
        number of items set (if using the <code>Limit</code> parameter) or a
        maximum of 1 MB of data and then apply any filtering to the results
        using <code>FilterExpression</code>. If <code>LastEvaluatedKey</code> is
        present in the response, you need to paginate the result set. For more
        information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating
        the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p> <p>
        <code>Scan</code> operations proceed sequentially; however, for faster
        performance on a large table or secondary index, applications can
        request a parallel <code>Scan</code> operation by providing the
        <code>Segment</code> and <code>TotalSegments</code> parameters. For more
        information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
        Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>
        <code>Scan</code> uses eventually consistent reads when accessing the
        data in a table; therefore, the result set might not include the changes
        to data in the table immediately before the operation began. If you need
        a consistent copy of the data, as of the time that the <code>Scan</code>
        begins, you can set the <code>ConsistentRead</code> parameter to
        <code>true</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScanOutput"
        "480":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: Limit
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: ExclusiveStartKey
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.Scan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScanInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.TagResource:
    post:
      operationId: TagResource
      description: <p>Associate a set of tags with an Amazon DynamoDB resource. You can
        then activate these user-defined tags so that they appear on the Billing
        and Cost Management console for cost allocation tracking. You can call
        TagResource up to five times per second, per account. </p> <p>For an
        overview on tagging DynamoDB resources, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
        for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "483":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.TransactGetItems:
    post:
      operationId: TransactGetItems
      description: "<p> <code>TransactGetItems</code> is a synchronous operation that
        atomically retrieves multiple items from one or more tables (but not
        from indexes) in a single account and Region. A
        <code>TransactGetItems</code> call can contain up to 25
        <code>TransactGetItem</code> objects, each of which contains a
        <code>Get</code> structure that specifies an item to retrieve from a
        table in the account and Region. A call to <code>TransactGetItems</code>
        cannot retrieve items from tables in more than one AWS account or
        Region. The aggregate size of the items in the transaction cannot exceed
        4 MB.</p> <note> <p>All AWS Regions and AWS GovCloud (US) support up to
        25 items per transaction with up to 4 MB of data, except the following
        AWS Regions: </p> <ul> <li> <p>China (Beijing)</p> </li> <li> <p>China
        (Ningxia)</p> </li> </ul> <p>The China (Beijing) and China (Ningxia)
        Regions support up to 10 items per transaction with up to 4 MB of data.
        </p> </note> <p>DynamoDB rejects the entire
        <code>TransactGetItems</code> request if any of the following is
        true:</p> <ul> <li> <p>A conflicting operation is in the process of
        updating an item to be read.</p> </li> <li> <p>There is insufficient
        provisioned capacity for the transaction to be completed.</p> </li> <li>
        <p>There is a user error, such as an invalid data format.</p> </li> <li>
        <p>The aggregate size of the items in the transaction cannot exceed 4
        MB.</p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactGetItemsOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "482":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.TransactGetItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactGetItemsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.TransactWriteItems:
    post:
      operationId: TransactWriteItems
      description: "<p> <code>TransactWriteItems</code> is a synchronous write operation
        that groups up to 25 action requests. These actions can target items in
        different tables, but not in different AWS accounts or Regions, and no
        two actions can target the same item. For example, you cannot both
        <code>ConditionCheck</code> and <code>Update</code> the same item. The
        aggregate size of the items in the transaction cannot exceed 4 MB.</p>
        <note> <p>All AWS Regions and AWS GovCloud (US) support up to 25 items
        per transaction with up to 4 MB of data, except the following AWS
        Regions: </p> <ul> <li> <p>China (Beijing)</p> </li> <li> <p>China
        (Ningxia)</p> </li> </ul> <p>The China (Beijing) and China (Ningxia)
        Regions support up to 10 items per transaction with up to 4 MB of data.
        </p> </note> <p>The actions are completed atomically so that either all
        of them succeed, or all of them fail. They are defined by the following
        objects:</p> <ul> <li> <p> <code>Put</code>  &#x97;   Initiates a
        <code>PutItem</code> operation to write a new item. This structure
        specifies the primary key of the item to be written, the name of the
        table to write it in, an optional condition expression that must be
        satisfied for the write to succeed, a list of the item's attributes, and
        a field indicating whether to retrieve the item's attributes if the
        condition is not met.</p> </li> <li> <p> <code>Update</code>  &#x97;  
        Initiates an <code>UpdateItem</code> operation to update an existing
        item. This structure specifies the primary key of the item to be
        updated, the name of the table where it resides, an optional condition
        expression that must be satisfied for the update to succeed, an
        expression that defines one or more attributes to be updated, and a
        field indicating whether to retrieve the item's attributes if the
        condition is not met.</p> </li> <li> <p> <code>Delete</code>  &#x97;  
        Initiates a <code>DeleteItem</code> operation to delete an existing
        item. This structure specifies the primary key of the item to be
        deleted, the name of the table where it resides, an optional condition
        expression that must be satisfied for the deletion to succeed, and a
        field indicating whether to retrieve the item's attributes if the
        condition is not met.</p> </li> <li> <p> <code>ConditionCheck</code>
         &#x97;   Applies a condition to an item that is not being modified by
        the transaction. This structure specifies the primary key of the item to
        be checked, the name of the table where it resides, a condition
        expression that must be satisfied for the transaction to succeed, and a
        field indicating whether to retrieve the item's attributes if the
        condition is not met.</p> </li> </ul> <p>DynamoDB rejects the entire
        <code>TransactWriteItems</code> request if any of the following is
        true:</p> <ul> <li> <p>A condition in one of the condition expressions
        is not met.</p> </li> <li> <p>An ongoing operation is in the process of
        updating the same item.</p> </li> <li> <p>There is insufficient
        provisioned capacity for the transaction to be completed.</p> </li> <li>
        <p>An item size becomes too large (bigger than 400 KB), a local
        secondary index (LSI) becomes too large, or a similar validation error
        occurs because of changes made by the transaction.</p> </li> <li> <p>The
        aggregate size of the items in the transaction exceeds 4 MB.</p> </li>
        <li> <p>There is a user error, such as an invalid data format.</p> </li>
        </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactWriteItemsOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "482":
          description: TransactionInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInProgressException"
        "483":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "484":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "485":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.TransactWriteItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactWriteItemsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UntagResource:
    post:
      operationId: UntagResource
      description: <p>Removes the association of tags from an Amazon DynamoDB resource. You
        can call <code>UntagResource</code> up to five times per second, per
        account. </p> <p>For an overview on tagging DynamoDB resources, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
        for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "483":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UpdateContinuousBackups:
    post:
      operationId: UpdateContinuousBackups
      description: <p> <code>UpdateContinuousBackups</code> enables or disables point in
        time recovery for the specified table. A successful
        <code>UpdateContinuousBackups</code> call returns the current
        <code>ContinuousBackupsDescription</code>. Continuous backups are
        <code>ENABLED</code> on all tables at table creation. If point in time
        recovery is enabled, <code>PointInTimeRecoveryStatus</code> will be set
        to ENABLED.</p> <p> Once continuous backups and point in time recovery
        are enabled, you can restore to any point in time within
        <code>EarliestRestorableDateTime</code> and
        <code>LatestRestorableDateTime</code>. </p> <p>
        <code>LatestRestorableDateTime</code> is typically 5 minutes before the
        current time. You can restore your table to any point in time during the
        last 35 days. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateContinuousBackupsOutput"
        "480":
          description: TableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableNotFoundException"
        "481":
          description: ContinuousBackupsUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContinuousBackupsUnavailableException"
        "482":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UpdateContinuousBackups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContinuousBackupsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UpdateGlobalTable:
    post:
      operationId: UpdateGlobalTable
      description: "<p>Adds or removes replicas in the specified global table. The global
        table must already exist to be able to use this operation. Any replica
        to be added must be empty, have the same name as the global table, have
        the same key schema, have DynamoDB Streams enabled, and have the same
        provisioned and maximum write capacity units.</p> <note> <p>Although you
        can use <code>UpdateGlobalTable</code> to add replicas and remove
        replicas in a single request, for simplicity we recommend that you issue
        separate requests for adding or removing replicas.</p> </note> <p> If
        global secondary indexes are specified, then the following conditions
        must also be met: </p> <ul> <li> <p> The global secondary indexes must
        have the same name. </p> </li> <li> <p> The global secondary indexes
        must have the same hash key and sort key (if present). </p> </li> <li>
        <p> The global secondary indexes must have the same provisioned and
        maximum write capacity units. </p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGlobalTableOutput"
        "480":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "481":
          description: GlobalTableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalTableNotFoundException"
        "482":
          description: ReplicaAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaAlreadyExistsException"
        "483":
          description: ReplicaNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaNotFoundException"
        "484":
          description: TableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UpdateGlobalTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGlobalTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UpdateGlobalTableSettings:
    post:
      operationId: UpdateGlobalTableSettings
      description: Updates settings for a global table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGlobalTableSettingsOutput"
        "480":
          description: GlobalTableNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalTableNotFoundException"
        "481":
          description: ReplicaNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaNotFoundException"
        "482":
          description: IndexNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexNotFoundException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "485":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UpdateGlobalTableSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGlobalTableSettingsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UpdateItem:
    post:
      operationId: UpdateItem
      description: <p>Edits an existing item's attributes, or adds a new item to the table
        if it does not already exist. You can put, delete, or add attribute
        values. You can also perform a conditional update on an existing item
        (insert a new attribute name-value pair if it doesn't exist, or replace
        an existing name-value pair if it has certain expected attribute
        values).</p> <p>You can also return the item's attribute values in the
        same <code>UpdateItem</code> operation using the
        <code>ReturnValues</code> parameter.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateItemOutput"
        "480":
          description: ConditionalCheckFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionalCheckFailedException"
        "481":
          description: ProvisionedThroughputExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionedThroughputExceededException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ItemCollectionSizeLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCollectionSizeLimitExceededException"
        "484":
          description: TransactionConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionConflictException"
        "485":
          description: RequestLimitExceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestLimitExceeded"
        "486":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UpdateItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateItemInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UpdateTable:
    post:
      operationId: UpdateTable
      description: <p>Modifies the provisioned throughput settings, global secondary
        indexes, or DynamoDB Streams settings for a given table.</p> <p>You can
        only perform one of the following operations at once:</p> <ul> <li>
        <p>Modify the provisioned throughput settings of the table.</p> </li>
        <li> <p>Enable or disable DynamoDB Streams on the table.</p> </li> <li>
        <p>Remove a global secondary index from the table.</p> </li> <li>
        <p>Create a new global secondary index on the table. After the index
        begins backfilling, you can use <code>UpdateTable</code> to perform
        other operations.</p> </li> </ul> <p> <code>UpdateTable</code> is an
        asynchronous operation; while it is executing, the table status changes
        from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
        <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code>
        request. When the table returns to the <code>ACTIVE</code> state, the
        <code>UpdateTable</code> operation is complete.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTableOutput"
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UpdateTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTableInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=DynamoDB_20120810.UpdateTimeToLive:
    post:
      operationId: UpdateTimeToLive
      description: <p>The <code>UpdateTimeToLive</code> method enables or disables Time to
        Live (TTL) for the specified table. A successful
        <code>UpdateTimeToLive</code> call returns the current
        <code>TimeToLiveSpecification</code>. It can take up to one hour for the
        change to fully process. Any additional <code>UpdateTimeToLive</code>
        calls for the same table during this one hour duration result in a
        <code>ValidationException</code>. </p> <p>TTL compares the current time
        in epoch time format to the time stored in the TTL attribute of an item.
        If the epoch time value stored in the attribute is less than the current
        time, the item is marked as expired and subsequently deleted.</p> <note>
        <p> The epoch time format is the number of seconds elapsed since
        12:00:00 AM January 1, 1970 UTC. </p> </note> <p>DynamoDB deletes
        expired items on a best-effort basis to ensure availability of
        throughput for other data operations. </p> <important> <p>DynamoDB
        typically deletes expired items within two days of expiration. The exact
        duration within which an item gets deleted after expiration is specific
        to the nature of the workload. Items that have expired and not been
        deleted will still show up in reads, queries, and scans.</p>
        </important> <p>As items are deleted, they are removed from any local
        secondary index and global secondary index immediately in the same
        eventually consistent way as a standard delete operation.</p> <p>For
        more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html">Time
        To Live</a> in the Amazon DynamoDB Developer Guide. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTimeToLiveOutput"
        "480":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - DynamoDB_20120810.UpdateTimeToLive
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTimeToLiveInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://dynamodb.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The DynamoDB multi-region endpoint
  - url: https://dynamodb.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The DynamoDB multi-region endpoint
  - url: http://dynamodb.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The DynamoDB endpoint for China (Beijing) and China (Ningxia)
  - url: https://dynamodb.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The DynamoDB endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchGetItemOutput:
      type: object
      example:
        Responses:
          Music:
            - AlbumTitle:
                S: Somewhat Famous
            - AlbumTitle:
                S: Blue Sky Blues
            - AlbumTitle:
                S: Louder Than Ever
      properties:
        Responses:
          $ref: "#/components/schemas/BatchGetResponseMap"
        UnprocessedKeys:
          $ref: "#/components/schemas/BatchGetRequestMap"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacityMultiple"
      description: Represents the output of a <code>BatchGetItem</code> operation.
    BatchGetItemInput:
      type: object
      required:
        - RequestItems
      properties:
        RequestItems:
          $ref: "#/components/schemas/BatchGetRequestMap"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
      description: Represents the input of a <code>BatchGetItem</code> operation.
    ProvisionedThroughputExceededException: {}
    ResourceNotFoundException: {}
    RequestLimitExceeded: {}
    InternalServerError: {}
    BatchWriteItemOutput:
      type: object
      example: {}
      properties:
        UnprocessedItems:
          $ref: "#/components/schemas/BatchWriteItemRequestMap"
        ItemCollectionMetrics:
          $ref: "#/components/schemas/ItemCollectionMetricsPerTable"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacityMultiple"
      description: Represents the output of a <code>BatchWriteItem</code> operation.
    BatchWriteItemInput:
      type: object
      required:
        - RequestItems
      properties:
        RequestItems:
          $ref: "#/components/schemas/BatchWriteItemRequestMap"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ReturnItemCollectionMetrics:
          $ref: "#/components/schemas/ReturnItemCollectionMetrics"
      description: Represents the input of a <code>BatchWriteItem</code> operation.
    ItemCollectionSizeLimitExceededException: {}
    CreateBackupOutput:
      type: object
      properties:
        BackupDetails:
          $ref: "#/components/schemas/BackupDetails"
    CreateBackupInput:
      type: object
      required:
        - TableName
        - BackupName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        BackupName:
          $ref: "#/components/schemas/BackupName"
    TableNotFoundException: {}
    TableInUseException: {}
    ContinuousBackupsUnavailableException: {}
    BackupInUseException: {}
    LimitExceededException: {}
    CreateGlobalTableOutput:
      type: object
      properties:
        GlobalTableDescription:
          $ref: "#/components/schemas/GlobalTableDescription"
    CreateGlobalTableInput:
      type: object
      required:
        - GlobalTableName
        - ReplicationGroup
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
        ReplicationGroup:
          $ref: "#/components/schemas/ReplicaList"
    GlobalTableAlreadyExistsException: {}
    CreateTableOutput:
      type: object
      example:
        TableDescription:
          AttributeDefinitions:
            - AttributeName: Artist
              AttributeType: S
            - AttributeName: SongTitle
              AttributeType: S
          CreationDateTime: "1421866952.062"
          ItemCount: 0
          KeySchema:
            - AttributeName: Artist
              KeyType: HASH
            - AttributeName: SongTitle
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          TableName: Music
          TableSizeBytes: 0
          TableStatus: CREATING
      properties:
        TableDescription:
          $ref: "#/components/schemas/TableDescription"
      description: Represents the output of a <code>CreateTable</code> operation.
    CreateTableInput:
      type: object
      required:
        - AttributeDefinitions
        - TableName
        - KeySchema
      properties:
        AttributeDefinitions:
          $ref: "#/components/schemas/AttributeDefinitions"
        TableName:
          $ref: "#/components/schemas/TableName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        LocalSecondaryIndexes:
          $ref: "#/components/schemas/LocalSecondaryIndexList"
        GlobalSecondaryIndexes:
          $ref: "#/components/schemas/GlobalSecondaryIndexList"
        BillingMode:
          $ref: "#/components/schemas/BillingMode"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
        StreamSpecification:
          $ref: "#/components/schemas/StreamSpecification"
        SSESpecification:
          $ref: "#/components/schemas/SSESpecification"
        Tags:
          $ref: "#/components/schemas/TagList"
      description: Represents the input of a <code>CreateTable</code> operation.
    ResourceInUseException: {}
    DeleteBackupOutput:
      type: object
      properties:
        BackupDescription:
          $ref: "#/components/schemas/BackupDescription"
    DeleteBackupInput:
      type: object
      required:
        - BackupArn
      properties:
        BackupArn:
          $ref: "#/components/schemas/BackupArn"
    BackupNotFoundException: {}
    DeleteItemOutput:
      type: object
      example:
        ConsumedCapacity:
          CapacityUnits: 1
          TableName: Music
      properties:
        Attributes:
          $ref: "#/components/schemas/AttributeMap"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacity"
        ItemCollectionMetrics:
          $ref: "#/components/schemas/ItemCollectionMetrics"
      description: Represents the output of a <code>DeleteItem</code> operation.
    DeleteItemInput:
      type: object
      required:
        - TableName
        - Key
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        Key:
          $ref: "#/components/schemas/Key"
        Expected:
          $ref: "#/components/schemas/ExpectedAttributeMap"
        ConditionalOperator:
          $ref: "#/components/schemas/ConditionalOperator"
        ReturnValues:
          $ref: "#/components/schemas/ReturnValue"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ReturnItemCollectionMetrics:
          $ref: "#/components/schemas/ReturnItemCollectionMetrics"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
      description: Represents the input of a <code>DeleteItem</code> operation.
    ConditionalCheckFailedException: {}
    TransactionConflictException: {}
    DeleteTableOutput:
      type: object
      example:
        TableDescription:
          ItemCount: 0
          ProvisionedThroughput:
            NumberOfDecreasesToday: 1
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          TableName: Music
          TableSizeBytes: 0
          TableStatus: DELETING
      properties:
        TableDescription:
          $ref: "#/components/schemas/TableDescription"
      description: Represents the output of a <code>DeleteTable</code> operation.
    DeleteTableInput:
      type: object
      required:
        - TableName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
      description: Represents the input of a <code>DeleteTable</code> operation.
    DescribeBackupOutput:
      type: object
      properties:
        BackupDescription:
          $ref: "#/components/schemas/BackupDescription"
    DescribeBackupInput:
      type: object
      required:
        - BackupArn
      properties:
        BackupArn:
          $ref: "#/components/schemas/BackupArn"
    DescribeContinuousBackupsOutput:
      type: object
      properties:
        ContinuousBackupsDescription:
          $ref: "#/components/schemas/ContinuousBackupsDescription"
    DescribeContinuousBackupsInput:
      type: object
      required:
        - TableName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
    DescribeEndpointsResponse:
      type: object
      required:
        - Endpoints
      properties:
        Endpoints:
          $ref: "#/components/schemas/Endpoints"
    DescribeEndpointsRequest:
      type: object
      properties: {}
    DescribeGlobalTableOutput:
      type: object
      properties:
        GlobalTableDescription:
          $ref: "#/components/schemas/GlobalTableDescription"
    DescribeGlobalTableInput:
      type: object
      required:
        - GlobalTableName
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
    GlobalTableNotFoundException: {}
    DescribeGlobalTableSettingsOutput:
      type: object
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
        ReplicaSettings:
          $ref: "#/components/schemas/ReplicaSettingsDescriptionList"
    DescribeGlobalTableSettingsInput:
      type: object
      required:
        - GlobalTableName
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
    DescribeLimitsOutput:
      type: object
      example:
        AccountMaxReadCapacityUnits: 20000
        AccountMaxWriteCapacityUnits: 20000
        TableMaxReadCapacityUnits: 10000
        TableMaxWriteCapacityUnits: 10000
      properties:
        AccountMaxReadCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        AccountMaxWriteCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        TableMaxReadCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        TableMaxWriteCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
      description: Represents the output of a <code>DescribeLimits</code> operation.
    DescribeLimitsInput:
      type: object
      properties: {}
      description: Represents the input of a <code>DescribeLimits</code> operation. Has no
        content.
    DescribeTableOutput:
      type: object
      example:
        Table:
          AttributeDefinitions:
            - AttributeName: Artist
              AttributeType: S
            - AttributeName: SongTitle
              AttributeType: S
          CreationDateTime: "1421866952.062"
          ItemCount: 0
          KeySchema:
            - AttributeName: Artist
              KeyType: HASH
            - AttributeName: SongTitle
              KeyType: RANGE
          ProvisionedThroughput:
            NumberOfDecreasesToday: 1
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          TableName: Music
          TableSizeBytes: 0
          TableStatus: ACTIVE
      properties:
        Table:
          $ref: "#/components/schemas/TableDescription"
      description: Represents the output of a <code>DescribeTable</code> operation.
    DescribeTableInput:
      type: object
      required:
        - TableName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
      description: Represents the input of a <code>DescribeTable</code> operation.
    DescribeTimeToLiveOutput:
      type: object
      properties:
        TimeToLiveDescription:
          $ref: "#/components/schemas/TimeToLiveDescription"
    DescribeTimeToLiveInput:
      type: object
      required:
        - TableName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
    GetItemOutput:
      type: object
      example:
        Item:
          AlbumTitle:
            S: Songs About Life
          Artist:
            S: Acme Band
          SongTitle:
            S: Happy Day
      properties:
        Item:
          $ref: "#/components/schemas/AttributeMap"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacity"
      description: Represents the output of a <code>GetItem</code> operation.
    GetItemInput:
      type: object
      required:
        - TableName
        - Key
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        Key:
          $ref: "#/components/schemas/Key"
        AttributesToGet:
          $ref: "#/components/schemas/AttributeNameList"
        ConsistentRead:
          $ref: "#/components/schemas/ConsistentRead"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ProjectionExpression:
          $ref: "#/components/schemas/ProjectionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
      description: Represents the input of a <code>GetItem</code> operation.
    ListBackupsOutput:
      type: object
      properties:
        BackupSummaries:
          $ref: "#/components/schemas/BackupSummaries"
        LastEvaluatedBackupArn:
          $ref: "#/components/schemas/BackupArn"
    ListBackupsInput:
      type: object
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        Limit:
          $ref: "#/components/schemas/BackupsInputLimit"
        TimeRangeLowerBound:
          $ref: "#/components/schemas/TimeRangeLowerBound"
        TimeRangeUpperBound:
          $ref: "#/components/schemas/TimeRangeUpperBound"
        ExclusiveStartBackupArn:
          $ref: "#/components/schemas/BackupArn"
        BackupType:
          $ref: "#/components/schemas/BackupTypeFilter"
    ListGlobalTablesOutput:
      type: object
      properties:
        GlobalTables:
          $ref: "#/components/schemas/GlobalTableList"
        LastEvaluatedGlobalTableName:
          $ref: "#/components/schemas/TableName"
    ListGlobalTablesInput:
      type: object
      properties:
        ExclusiveStartGlobalTableName:
          $ref: "#/components/schemas/TableName"
        Limit:
          $ref: "#/components/schemas/PositiveIntegerObject"
        RegionName:
          $ref: "#/components/schemas/RegionName"
    ListTablesOutput:
      type: object
      example:
        TableNames:
          - Forum
          - ProductCatalog
          - Reply
          - Thread
      properties:
        TableNames:
          $ref: "#/components/schemas/TableNameList"
        LastEvaluatedTableName:
          $ref: "#/components/schemas/TableName"
      description: Represents the output of a <code>ListTables</code> operation.
    ListTablesInput:
      type: object
      properties:
        ExclusiveStartTableName:
          $ref: "#/components/schemas/TableName"
        Limit:
          $ref: "#/components/schemas/ListTablesInputLimit"
      description: Represents the input of a <code>ListTables</code> operation.
    ListTagsOfResourceOutput:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
        NextToken:
          $ref: "#/components/schemas/NextTokenString"
    ListTagsOfResourceInput:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
        NextToken:
          $ref: "#/components/schemas/NextTokenString"
    PutItemOutput:
      type: object
      example:
        ConsumedCapacity:
          CapacityUnits: 1
          TableName: Music
      properties:
        Attributes:
          $ref: "#/components/schemas/AttributeMap"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacity"
        ItemCollectionMetrics:
          $ref: "#/components/schemas/ItemCollectionMetrics"
      description: Represents the output of a <code>PutItem</code> operation.
    PutItemInput:
      type: object
      required:
        - TableName
        - Item
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        Item:
          $ref: "#/components/schemas/PutItemInputAttributeMap"
        Expected:
          $ref: "#/components/schemas/ExpectedAttributeMap"
        ReturnValues:
          $ref: "#/components/schemas/ReturnValue"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ReturnItemCollectionMetrics:
          $ref: "#/components/schemas/ReturnItemCollectionMetrics"
        ConditionalOperator:
          $ref: "#/components/schemas/ConditionalOperator"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
      description: Represents the input of a <code>PutItem</code> operation.
    QueryOutput:
      type: object
      example:
        ConsumedCapacity: {}
        Count: 2
        Items:
          - SongTitle:
              S: Call Me Today
        ScannedCount: 2
      properties:
        Items:
          $ref: "#/components/schemas/ItemList"
        Count:
          $ref: "#/components/schemas/Integer"
        ScannedCount:
          $ref: "#/components/schemas/Integer"
        LastEvaluatedKey:
          $ref: "#/components/schemas/Key"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacity"
      description: Represents the output of a <code>Query</code> operation.
    QueryInput:
      type: object
      required:
        - TableName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        IndexName:
          $ref: "#/components/schemas/IndexName"
        Select:
          $ref: "#/components/schemas/Select"
        AttributesToGet:
          $ref: "#/components/schemas/AttributeNameList"
        Limit:
          $ref: "#/components/schemas/PositiveIntegerObject"
        ConsistentRead:
          $ref: "#/components/schemas/ConsistentRead"
        KeyConditions:
          $ref: "#/components/schemas/KeyConditions"
        QueryFilter:
          $ref: "#/components/schemas/FilterConditionMap"
        ConditionalOperator:
          $ref: "#/components/schemas/ConditionalOperator"
        ScanIndexForward:
          $ref: "#/components/schemas/BooleanObject"
        ExclusiveStartKey:
          $ref: "#/components/schemas/Key"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ProjectionExpression:
          $ref: "#/components/schemas/ProjectionExpression"
        FilterExpression:
          $ref: "#/components/schemas/ConditionExpression"
        KeyConditionExpression:
          $ref: "#/components/schemas/KeyExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
      description: Represents the input of a <code>Query</code> operation.
    RestoreTableFromBackupOutput:
      type: object
      properties:
        TableDescription:
          $ref: "#/components/schemas/TableDescription"
    RestoreTableFromBackupInput:
      type: object
      required:
        - TargetTableName
        - BackupArn
      properties:
        TargetTableName:
          $ref: "#/components/schemas/TableName"
        BackupArn:
          $ref: "#/components/schemas/BackupArn"
    TableAlreadyExistsException: {}
    RestoreTableToPointInTimeOutput:
      type: object
      properties:
        TableDescription:
          $ref: "#/components/schemas/TableDescription"
    RestoreTableToPointInTimeInput:
      type: object
      required:
        - SourceTableName
        - TargetTableName
      properties:
        SourceTableName:
          $ref: "#/components/schemas/TableName"
        TargetTableName:
          $ref: "#/components/schemas/TableName"
        UseLatestRestorableTime:
          $ref: "#/components/schemas/BooleanObject"
        RestoreDateTime:
          $ref: "#/components/schemas/Date"
    InvalidRestoreTimeException: {}
    PointInTimeRecoveryUnavailableException: {}
    ScanOutput:
      type: object
      example:
        ConsumedCapacity: {}
        Count: 2
        Items:
          - AlbumTitle:
              S: Somewhat Famous
            SongTitle:
              S: Call Me Today
          - AlbumTitle:
              S: Blue Sky Blues
            SongTitle:
              S: Scared of My Shadow
        ScannedCount: 3
      properties:
        Items:
          $ref: "#/components/schemas/ItemList"
        Count:
          $ref: "#/components/schemas/Integer"
        ScannedCount:
          $ref: "#/components/schemas/Integer"
        LastEvaluatedKey:
          $ref: "#/components/schemas/Key"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacity"
      description: Represents the output of a <code>Scan</code> operation.
    ScanInput:
      type: object
      required:
        - TableName
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        IndexName:
          $ref: "#/components/schemas/IndexName"
        AttributesToGet:
          $ref: "#/components/schemas/AttributeNameList"
        Limit:
          $ref: "#/components/schemas/PositiveIntegerObject"
        Select:
          $ref: "#/components/schemas/Select"
        ScanFilter:
          $ref: "#/components/schemas/FilterConditionMap"
        ConditionalOperator:
          $ref: "#/components/schemas/ConditionalOperator"
        ExclusiveStartKey:
          $ref: "#/components/schemas/Key"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        TotalSegments:
          $ref: "#/components/schemas/ScanTotalSegments"
        Segment:
          $ref: "#/components/schemas/ScanSegment"
        ProjectionExpression:
          $ref: "#/components/schemas/ProjectionExpression"
        FilterExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
        ConsistentRead:
          $ref: "#/components/schemas/ConsistentRead"
      description: Represents the input of a <code>Scan</code> operation.
    TagResourceInput:
      type: object
      required:
        - ResourceArn
        - Tags
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
        Tags:
          $ref: "#/components/schemas/TagList"
    TransactGetItemsOutput:
      type: object
      properties:
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacityMultiple"
        Responses:
          $ref: "#/components/schemas/ItemResponseList"
    TransactGetItemsInput:
      type: object
      required:
        - TransactItems
      properties:
        TransactItems:
          $ref: "#/components/schemas/TransactGetItemList"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
    TransactionCanceledException: {}
    TransactWriteItemsOutput:
      type: object
      properties:
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacityMultiple"
        ItemCollectionMetrics:
          $ref: "#/components/schemas/ItemCollectionMetricsPerTable"
    TransactWriteItemsInput:
      type: object
      required:
        - TransactItems
      properties:
        TransactItems:
          $ref: "#/components/schemas/TransactWriteItemList"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ReturnItemCollectionMetrics:
          $ref: "#/components/schemas/ReturnItemCollectionMetrics"
        ClientRequestToken:
          $ref: "#/components/schemas/ClientRequestToken"
    TransactionInProgressException: {}
    IdempotentParameterMismatchException: {}
    UntagResourceInput:
      type: object
      required:
        - ResourceArn
        - TagKeys
      properties:
        ResourceArn:
          $ref: "#/components/schemas/ResourceArnString"
        TagKeys:
          $ref: "#/components/schemas/TagKeyList"
    UpdateContinuousBackupsOutput:
      type: object
      properties:
        ContinuousBackupsDescription:
          $ref: "#/components/schemas/ContinuousBackupsDescription"
    UpdateContinuousBackupsInput:
      type: object
      required:
        - TableName
        - PointInTimeRecoverySpecification
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        PointInTimeRecoverySpecification:
          $ref: "#/components/schemas/PointInTimeRecoverySpecification"
    UpdateGlobalTableOutput:
      type: object
      properties:
        GlobalTableDescription:
          $ref: "#/components/schemas/GlobalTableDescription"
    UpdateGlobalTableInput:
      type: object
      required:
        - GlobalTableName
        - ReplicaUpdates
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
        ReplicaUpdates:
          $ref: "#/components/schemas/ReplicaUpdateList"
    ReplicaAlreadyExistsException: {}
    ReplicaNotFoundException: {}
    UpdateGlobalTableSettingsOutput:
      type: object
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
        ReplicaSettings:
          $ref: "#/components/schemas/ReplicaSettingsDescriptionList"
    UpdateGlobalTableSettingsInput:
      type: object
      required:
        - GlobalTableName
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
        GlobalTableBillingMode:
          $ref: "#/components/schemas/BillingMode"
        GlobalTableProvisionedWriteCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate:
          $ref: "#/components/schemas/AutoScalingSettingsUpdate"
        GlobalTableGlobalSecondaryIndexSettingsUpdate:
          $ref: "#/components/schemas/GlobalTableGlobalSecondaryIndexSettingsUpdate\
            List"
        ReplicaSettingsUpdate:
          $ref: "#/components/schemas/ReplicaSettingsUpdateList"
    IndexNotFoundException: {}
    UpdateItemOutput:
      type: object
      example:
        Attributes:
          AlbumTitle:
            S: Louder Than Ever
          Artist:
            S: Acme Band
          SongTitle:
            S: Happy Day
          Year:
            N: "2015"
      properties:
        Attributes:
          $ref: "#/components/schemas/AttributeMap"
        ConsumedCapacity:
          $ref: "#/components/schemas/ConsumedCapacity"
        ItemCollectionMetrics:
          $ref: "#/components/schemas/ItemCollectionMetrics"
      description: Represents the output of an <code>UpdateItem</code> operation.
    UpdateItemInput:
      type: object
      required:
        - TableName
        - Key
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        Key:
          $ref: "#/components/schemas/Key"
        AttributeUpdates:
          $ref: "#/components/schemas/AttributeUpdates"
        Expected:
          $ref: "#/components/schemas/ExpectedAttributeMap"
        ConditionalOperator:
          $ref: "#/components/schemas/ConditionalOperator"
        ReturnValues:
          $ref: "#/components/schemas/ReturnValue"
        ReturnConsumedCapacity:
          $ref: "#/components/schemas/ReturnConsumedCapacity"
        ReturnItemCollectionMetrics:
          $ref: "#/components/schemas/ReturnItemCollectionMetrics"
        UpdateExpression:
          $ref: "#/components/schemas/UpdateExpression"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
      description: Represents the input of an <code>UpdateItem</code> operation.
    UpdateTableOutput:
      type: object
      example:
        TableDescription:
          AttributeDefinitions:
            - AttributeName: Artist
              AttributeType: S
            - AttributeName: SongTitle
              AttributeType: S
          CreationDateTime: "1421866952.062"
          ItemCount: 0
          KeySchema:
            - AttributeName: Artist
              KeyType: HASH
            - AttributeName: SongTitle
              KeyType: RANGE
          ProvisionedThroughput:
            LastIncreaseDateTime: "1421874759.194"
            NumberOfDecreasesToday: 1
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: MusicCollection
          TableSizeBytes: 0
          TableStatus: UPDATING
      properties:
        TableDescription:
          $ref: "#/components/schemas/TableDescription"
      description: Represents the output of an <code>UpdateTable</code> operation.
    UpdateTableInput:
      type: object
      required:
        - TableName
      properties:
        AttributeDefinitions:
          $ref: "#/components/schemas/AttributeDefinitions"
        TableName:
          $ref: "#/components/schemas/TableName"
        BillingMode:
          $ref: "#/components/schemas/BillingMode"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
        GlobalSecondaryIndexUpdates:
          $ref: "#/components/schemas/GlobalSecondaryIndexUpdateList"
        StreamSpecification:
          $ref: "#/components/schemas/StreamSpecification"
        SSESpecification:
          $ref: "#/components/schemas/SSESpecification"
      description: Represents the input of an <code>UpdateTable</code> operation.
    UpdateTimeToLiveOutput:
      type: object
      properties:
        TimeToLiveSpecification:
          $ref: "#/components/schemas/TimeToLiveSpecification"
    UpdateTimeToLiveInput:
      type: object
      required:
        - TableName
        - TimeToLiveSpecification
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        TimeToLiveSpecification:
          $ref: "#/components/schemas/TimeToLiveSpecification"
      description: Represents the input of an <code>UpdateTimeToLive</code> operation.
    AttributeAction:
      type: string
      enum:
        - ADD
        - PUT
        - DELETE
    KeySchemaAttributeName:
      type: string
      minLength: 1
      maxLength: 255
    ScalarAttributeType:
      type: string
      enum:
        - S
        - N
        - B
    AttributeDefinition:
      type: object
      required:
        - AttributeName
        - AttributeType
      properties:
        AttributeName:
          $ref: "#/components/schemas/KeySchemaAttributeName"
        AttributeType:
          $ref: "#/components/schemas/ScalarAttributeType"
      description: Represents an attribute for describing the key schema for the table and
        indexes.
    AttributeDefinitions:
      type: array
      items:
        $ref: "#/components/schemas/AttributeDefinition"
    AttributeValue:
      type: object
      properties:
        S:
          $ref: "#/components/schemas/StringAttributeValue"
        N:
          $ref: "#/components/schemas/NumberAttributeValue"
        B:
          $ref: "#/components/schemas/BinaryAttributeValue"
        SS:
          $ref: "#/components/schemas/StringSetAttributeValue"
        NS:
          $ref: "#/components/schemas/NumberSetAttributeValue"
        BS:
          $ref: "#/components/schemas/BinarySetAttributeValue"
        M:
          $ref: "#/components/schemas/MapAttributeValue"
        L:
          $ref: "#/components/schemas/ListAttributeValue"
        "NULL":
          $ref: "#/components/schemas/NullAttributeValue"
        BOOL:
          $ref: "#/components/schemas/BooleanAttributeValue"
      description: <p>Represents the data for an attribute.</p> <p>Each attribute value is
        described as a name-value pair. The name is the data type, and the value
        is the data itself.</p> <p>For more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data
        Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    AttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    AttributeName:
      type: string
      maxLength: 65535
    AttributeNameList:
      type: array
      items:
        $ref: "#/components/schemas/AttributeName"
      minItems: 1
    AttributeValueUpdate:
      type: object
      properties:
        Value:
          $ref: "#/components/schemas/AttributeValue"
        Action:
          $ref: "#/components/schemas/AttributeAction"
      description: <p>For the <code>UpdateItem</code> operation, represents the attributes
        to be modified, the action to perform on each, and the new value for
        each.</p> <note> <p>You cannot use <code>UpdateItem</code> to update any
        primary key attributes. Instead, you will need to delete the item, and
        then use <code>PutItem</code> to create a new item with new
        attributes.</p> </note> <p>Attribute values cannot be null; string and
        binary type attributes must have lengths greater than zero; and set type
        attributes must not be empty. Requests with empty values will be
        rejected with a <code>ValidationException</code> exception.</p>
    AttributeUpdates:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValueUpdate"
    StringAttributeValue:
      type: string
    NumberAttributeValue:
      type: string
    BinaryAttributeValue:
      type: string
    StringSetAttributeValue:
      type: array
      items:
        $ref: "#/components/schemas/StringAttributeValue"
    NumberSetAttributeValue:
      type: array
      items:
        $ref: "#/components/schemas/NumberAttributeValue"
    BinarySetAttributeValue:
      type: array
      items:
        $ref: "#/components/schemas/BinaryAttributeValue"
    MapAttributeValue:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    ListAttributeValue:
      type: array
      items:
        $ref: "#/components/schemas/AttributeValue"
    NullAttributeValue:
      type: boolean
    BooleanAttributeValue:
      type: boolean
    AttributeValueList:
      type: array
      items:
        $ref: "#/components/schemas/AttributeValue"
    AutoScalingPolicyName:
      type: string
      pattern: \p{Print}+
      minLength: 1
      maxLength: 256
    AutoScalingTargetTrackingScalingPolicyConfigurationDescription:
      type: object
      required:
        - TargetValue
      properties:
        DisableScaleIn:
          $ref: "#/components/schemas/BooleanObject"
        ScaleInCooldown:
          $ref: "#/components/schemas/IntegerObject"
        ScaleOutCooldown:
          $ref: "#/components/schemas/IntegerObject"
        TargetValue:
          $ref: "#/components/schemas/Double"
      description: Represents the properties of a target tracking scaling policy.
    AutoScalingPolicyDescription:
      type: object
      properties:
        PolicyName:
          $ref: "#/components/schemas/AutoScalingPolicyName"
        TargetTrackingScalingPolicyConfiguration:
          $ref: "#/components/schemas/AutoScalingTargetTrackingScalingPolicyConfigu\
            rationDescription"
      description: Represents the properties of the scaling policy.
    AutoScalingPolicyDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/AutoScalingPolicyDescription"
    AutoScalingTargetTrackingScalingPolicyConfigurationUpdate:
      type: object
      required:
        - TargetValue
      properties:
        DisableScaleIn:
          $ref: "#/components/schemas/BooleanObject"
        ScaleInCooldown:
          $ref: "#/components/schemas/IntegerObject"
        ScaleOutCooldown:
          $ref: "#/components/schemas/IntegerObject"
        TargetValue:
          $ref: "#/components/schemas/Double"
      description: Represents the settings of a target tracking scaling policy that will be
        modified.
    AutoScalingPolicyUpdate:
      type: object
      required:
        - TargetTrackingScalingPolicyConfiguration
      properties:
        PolicyName:
          $ref: "#/components/schemas/AutoScalingPolicyName"
        TargetTrackingScalingPolicyConfiguration:
          $ref: "#/components/schemas/AutoScalingTargetTrackingScalingPolicyConfigu\
            rationUpdate"
      description: Represents the autoscaling policy to be modified.
    AutoScalingRoleArn:
      type: string
      minLength: 1
      maxLength: 1600
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    PositiveLongObject:
      type: integer
      minimum: 1
    BooleanObject:
      type: boolean
    String:
      type: string
    AutoScalingSettingsDescription:
      type: object
      properties:
        MinimumUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        MaximumUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        AutoScalingDisabled:
          $ref: "#/components/schemas/BooleanObject"
        AutoScalingRoleArn:
          $ref: "#/components/schemas/String"
        ScalingPolicies:
          $ref: "#/components/schemas/AutoScalingPolicyDescriptionList"
      description: Represents the autoscaling settings for a global table or global
        secondary index.
    AutoScalingSettingsUpdate:
      type: object
      properties:
        MinimumUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        MaximumUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        AutoScalingDisabled:
          $ref: "#/components/schemas/BooleanObject"
        AutoScalingRoleArn:
          $ref: "#/components/schemas/AutoScalingRoleArn"
        ScalingPolicyUpdate:
          $ref: "#/components/schemas/AutoScalingPolicyUpdate"
      description: Represents the autoscaling settings to be modified for a global table or
        global secondary index.
    IntegerObject:
      type: integer
    Double:
      type: number
      format: double
    Backfilling:
      type: boolean
    BackupArn:
      type: string
      minLength: 37
      maxLength: 1024
    BackupCreationDateTime:
      type: string
      format: date-time
    BackupDetails:
      type: object
      required:
        - BackupArn
        - BackupName
        - BackupStatus
        - BackupType
        - BackupCreationDateTime
      properties:
        BackupArn:
          $ref: "#/components/schemas/BackupArn"
        BackupName:
          $ref: "#/components/schemas/BackupName"
        BackupSizeBytes:
          $ref: "#/components/schemas/BackupSizeBytes"
        BackupStatus:
          $ref: "#/components/schemas/BackupStatus"
        BackupType:
          $ref: "#/components/schemas/BackupType"
        BackupCreationDateTime:
          $ref: "#/components/schemas/BackupCreationDateTime"
        BackupExpiryDateTime:
          $ref: "#/components/schemas/Date"
      description: Contains the details of the backup created for the table.
    SourceTableDetails:
      type: object
      required:
        - TableName
        - TableId
        - KeySchema
        - TableCreationDateTime
        - ProvisionedThroughput
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        TableId:
          $ref: "#/components/schemas/TableId"
        TableArn:
          $ref: "#/components/schemas/TableArn"
        TableSizeBytes:
          $ref: "#/components/schemas/Long"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        TableCreationDateTime:
          $ref: "#/components/schemas/TableCreationDateTime"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
        ItemCount:
          $ref: "#/components/schemas/ItemCount"
        BillingMode:
          $ref: "#/components/schemas/BillingMode"
      description: "Contains the details of the table when the backup was created. "
    SourceTableFeatureDetails:
      type: object
      properties:
        LocalSecondaryIndexes:
          $ref: "#/components/schemas/LocalSecondaryIndexes"
        GlobalSecondaryIndexes:
          $ref: "#/components/schemas/GlobalSecondaryIndexes"
        StreamDescription:
          $ref: "#/components/schemas/StreamSpecification"
        TimeToLiveDescription:
          $ref: "#/components/schemas/TimeToLiveDescription"
        SSEDescription:
          $ref: "#/components/schemas/SSEDescription"
      description: "Contains the details of the features enabled on the table when the
        backup was created. For example, LSIs, GSIs, streams, TTL. "
    BackupDescription:
      type: object
      properties:
        BackupDetails:
          $ref: "#/components/schemas/BackupDetails"
        SourceTableDetails:
          $ref: "#/components/schemas/SourceTableDetails"
        SourceTableFeatureDetails:
          $ref: "#/components/schemas/SourceTableFeatureDetails"
      description: Contains the description of the backup created for the table.
    BackupName:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 3
      maxLength: 255
    BackupSizeBytes:
      type: integer
      minimum: 0
    BackupStatus:
      type: string
      enum:
        - CREATING
        - DELETED
        - AVAILABLE
    BackupType:
      type: string
      enum:
        - USER
        - SYSTEM
        - AWS_BACKUP
    Date:
      type: string
      format: date-time
    BackupSummary:
      type: object
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        TableId:
          $ref: "#/components/schemas/TableId"
        TableArn:
          $ref: "#/components/schemas/TableArn"
        BackupArn:
          $ref: "#/components/schemas/BackupArn"
        BackupName:
          $ref: "#/components/schemas/BackupName"
        BackupCreationDateTime:
          $ref: "#/components/schemas/BackupCreationDateTime"
        BackupExpiryDateTime:
          $ref: "#/components/schemas/Date"
        BackupStatus:
          $ref: "#/components/schemas/BackupStatus"
        BackupType:
          $ref: "#/components/schemas/BackupType"
        BackupSizeBytes:
          $ref: "#/components/schemas/BackupSizeBytes"
      description: Contains details for the backup.
    BackupSummaries:
      type: array
      items:
        $ref: "#/components/schemas/BackupSummary"
    TableName:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 3
      maxLength: 255
    TableId:
      type: string
      pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
    TableArn:
      type: string
    BackupTypeFilter:
      type: string
      enum:
        - USER
        - SYSTEM
        - AWS_BACKUP
        - ALL
    BackupsInputLimit:
      type: integer
      minimum: 1
      maximum: 100
    BatchGetRequestMap:
      type: object
      minProperties: 1
      maxProperties: 100
      additionalProperties:
        $ref: "#/components/schemas/KeysAndAttributes"
    ReturnConsumedCapacity:
      type: string
      enum:
        - INDEXES
        - TOTAL
        - NONE
      description: <p>Determines the level of detail about provisioned throughput
        consumption that is returned in the response:</p> <ul> <li> <p>
        <code>INDEXES</code> - The response includes the aggregate
        <code>ConsumedCapacity</code> for the operation, together with
        <code>ConsumedCapacity</code> for each table and secondary index that
        was accessed.</p> <p>Note that some operations, such as
        <code>GetItem</code> and <code>BatchGetItem</code>, do not access any
        indexes at all. In these cases, specifying <code>INDEXES</code> will
        only return <code>ConsumedCapacity</code> information for table(s).</p>
        </li> <li> <p> <code>TOTAL</code> - The response includes only the
        aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>
        <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details
        are included in the response.</p> </li> </ul>
    BatchGetResponseMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ItemList"
    ConsumedCapacityMultiple:
      type: array
      items:
        $ref: "#/components/schemas/ConsumedCapacity"
    KeysAndAttributes:
      type: object
      required:
        - Keys
      properties:
        Keys:
          $ref: "#/components/schemas/KeyList"
        AttributesToGet:
          $ref: "#/components/schemas/AttributeNameList"
        ConsistentRead:
          $ref: "#/components/schemas/ConsistentRead"
        ProjectionExpression:
          $ref: "#/components/schemas/ProjectionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
      description: <p>Represents a set of primary keys and, for each key, the attributes to
        retrieve from the table.</p> <p>For each primary key, you must provide
        <i>all</i> of the key attributes. For example, with a simple primary
        key, you only need to provide the partition key. For a composite primary
        key, you must provide <i>both</i> the partition key and the sort
        key.</p>
    ItemList:
      type: array
      items:
        $ref: "#/components/schemas/AttributeMap"
    BatchWriteItemRequestMap:
      type: object
      minProperties: 1
      maxProperties: 25
      additionalProperties:
        $ref: "#/components/schemas/WriteRequests"
    ReturnItemCollectionMetrics:
      type: string
      enum:
        - SIZE
        - NONE
    ItemCollectionMetricsPerTable:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ItemCollectionMetricsMultiple"
    WriteRequests:
      type: array
      items:
        $ref: "#/components/schemas/WriteRequest"
      minItems: 1
      maxItems: 25
    BillingMode:
      type: string
      enum:
        - PROVISIONED
        - PAY_PER_REQUEST
    BillingModeSummary:
      type: object
      properties:
        BillingMode:
          $ref: "#/components/schemas/BillingMode"
        LastUpdateToPayPerRequestDateTime:
          $ref: "#/components/schemas/Date"
      description: Contains the details for the read/write capacity mode.
    ConsumedCapacityUnits:
      type: number
      format: double
    Capacity:
      type: object
      properties:
        ReadCapacityUnits:
          $ref: "#/components/schemas/ConsumedCapacityUnits"
        WriteCapacityUnits:
          $ref: "#/components/schemas/ConsumedCapacityUnits"
        CapacityUnits:
          $ref: "#/components/schemas/ConsumedCapacityUnits"
      description: Represents the amount of provisioned throughput capacity consumed on a
        table or an index.
    ClientRequestToken:
      type: string
      minLength: 1
      maxLength: 36
    ComparisonOperator:
      type: string
      enum:
        - EQ
        - NE
        - IN
        - LE
        - LT
        - GE
        - GT
        - BETWEEN
        - NOT_NULL
        - "NULL"
        - CONTAINS
        - NOT_CONTAINS
        - BEGINS_WITH
    Condition:
      type: object
      required:
        - ComparisonOperator
      properties:
        AttributeValueList:
          $ref: "#/components/schemas/AttributeValueList"
        ComparisonOperator:
          $ref: "#/components/schemas/ComparisonOperator"
      description: <p>Represents the selection criteria for a <code>Query</code> or
        <code>Scan</code> operation:</p> <ul> <li> <p>For a <code>Query</code>
        operation, <code>Condition</code> is used for specifying the
        <code>KeyConditions</code> to use when querying a table or an index. For
        <code>KeyConditions</code>, only the following comparison operators are
        supported:</p> <p> <code>EQ | LE | LT | GE | GT | BEGINS_WITH |
        BETWEEN</code> </p> <p> <code>Condition</code> is also used in a
        <code>QueryFilter</code>, which evaluates the query results and returns
        only the desired values.</p> </li> <li> <p>For a <code>Scan</code>
        operation, <code>Condition</code> is used in a <code>ScanFilter</code>,
        which evaluates the scan results and returns only the desired
        values.</p> </li> </ul>
    Key:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    ConditionExpression:
      type: string
    ExpressionAttributeNameMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeName"
    ExpressionAttributeValueMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    ReturnValuesOnConditionCheckFailure:
      type: string
      enum:
        - ALL_OLD
        - NONE
    ConditionCheck:
      type: object
      required:
        - Key
        - TableName
        - ConditionExpression
      properties:
        Key:
          $ref: "#/components/schemas/Key"
        TableName:
          $ref: "#/components/schemas/TableName"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
        ReturnValuesOnConditionCheckFailure:
          $ref: "#/components/schemas/ReturnValuesOnConditionCheckFailure"
      description: Represents a request to perform a check that an item exists or to check
        the condition of specific attributes of the item..
    ConditionalOperator:
      type: string
      enum:
        - AND
        - OR
    ConsistentRead:
      type: boolean
    SecondaryIndexesCapacityMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Capacity"
    ConsumedCapacity:
      type: object
      properties:
        TableName:
          $ref: "#/components/schemas/TableName"
        CapacityUnits:
          $ref: "#/components/schemas/ConsumedCapacityUnits"
        ReadCapacityUnits:
          $ref: "#/components/schemas/ConsumedCapacityUnits"
        WriteCapacityUnits:
          $ref: "#/components/schemas/ConsumedCapacityUnits"
        Table:
          $ref: "#/components/schemas/Capacity"
        LocalSecondaryIndexes:
          $ref: "#/components/schemas/SecondaryIndexesCapacityMap"
        GlobalSecondaryIndexes:
          $ref: "#/components/schemas/SecondaryIndexesCapacityMap"
      description: The capacity units consumed by an operation. The data returned includes
        the total provisioned throughput consumed, along with statistics for the
        table and any indexes involved in the operation.
        <code>ConsumedCapacity</code> is only returned if the request asked for
        it. For more information, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
        Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    ContinuousBackupsStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    PointInTimeRecoveryDescription:
      type: object
      properties:
        PointInTimeRecoveryStatus:
          $ref: "#/components/schemas/PointInTimeRecoveryStatus"
        EarliestRestorableDateTime:
          $ref: "#/components/schemas/Date"
        LatestRestorableDateTime:
          $ref: "#/components/schemas/Date"
      description: The description of the point in time settings applied to the table.
    ContinuousBackupsDescription:
      type: object
      required:
        - ContinuousBackupsStatus
      properties:
        ContinuousBackupsStatus:
          $ref: "#/components/schemas/ContinuousBackupsStatus"
        PointInTimeRecoveryDescription:
          $ref: "#/components/schemas/PointInTimeRecoveryDescription"
      description: Represents the continuous backups and point in time recovery settings on
        the table.
    IndexName:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 3
      maxLength: 255
    KeySchema:
      type: array
      items:
        $ref: "#/components/schemas/KeySchemaElement"
      minItems: 1
      maxItems: 2
    Projection:
      type: object
      properties:
        ProjectionType:
          $ref: "#/components/schemas/ProjectionType"
        NonKeyAttributes:
          $ref: "#/components/schemas/NonKeyAttributeNameList"
      description: Represents attributes that are copied (projected) from the table into an
        index. These are in addition to the primary key attributes and index key
        attributes, which are automatically projected.
    ProvisionedThroughput:
      type: object
      required:
        - ReadCapacityUnits
        - WriteCapacityUnits
      properties:
        ReadCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        WriteCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
      description: <p>Represents the provisioned throughput settings for a specified table
        or index. The settings can be modified using the
        <code>UpdateTable</code> operation.</p> <p>For current minimum and
        maximum provisioned throughput values, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Limits</a>
        in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    CreateGlobalSecondaryIndexAction:
      type: object
      required:
        - IndexName
        - KeySchema
        - Projection
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
      description: Represents a new global secondary index to be added to an existing table.
    ReplicaList:
      type: array
      items:
        $ref: "#/components/schemas/Replica"
    GlobalTableDescription:
      type: object
      properties:
        ReplicationGroup:
          $ref: "#/components/schemas/ReplicaDescriptionList"
        GlobalTableArn:
          $ref: "#/components/schemas/GlobalTableArnString"
        CreationDateTime:
          $ref: "#/components/schemas/Date"
        GlobalTableStatus:
          $ref: "#/components/schemas/GlobalTableStatus"
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
      description: Contains details about the global table.
    RegionName:
      type: string
    CreateReplicaAction:
      type: object
      required:
        - RegionName
      properties:
        RegionName:
          $ref: "#/components/schemas/RegionName"
      description: Represents a replica to be added.
    LocalSecondaryIndexList:
      type: array
      items:
        $ref: "#/components/schemas/LocalSecondaryIndex"
    GlobalSecondaryIndexList:
      type: array
      items:
        $ref: "#/components/schemas/GlobalSecondaryIndex"
    StreamSpecification:
      type: object
      properties:
        StreamEnabled:
          $ref: "#/components/schemas/StreamEnabled"
        StreamViewType:
          $ref: "#/components/schemas/StreamViewType"
      description: Represents the DynamoDB Streams configuration for a table in DynamoDB.
    SSESpecification:
      type: object
      properties:
        Enabled:
          $ref: "#/components/schemas/SSEEnabled"
        SSEType:
          $ref: "#/components/schemas/SSEType"
        KMSMasterKeyId:
          $ref: "#/components/schemas/KMSMasterKeyId"
      description: Represents the settings used to enable server-side encryption.
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    TableDescription:
      type: object
      properties:
        AttributeDefinitions:
          $ref: "#/components/schemas/AttributeDefinitions"
        TableName:
          $ref: "#/components/schemas/TableName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        TableStatus:
          $ref: "#/components/schemas/TableStatus"
        CreationDateTime:
          $ref: "#/components/schemas/Date"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughputDescription"
        TableSizeBytes:
          $ref: "#/components/schemas/Long"
        ItemCount:
          $ref: "#/components/schemas/Long"
        TableArn:
          $ref: "#/components/schemas/String"
        TableId:
          $ref: "#/components/schemas/TableId"
        BillingModeSummary:
          $ref: "#/components/schemas/BillingModeSummary"
        LocalSecondaryIndexes:
          $ref: "#/components/schemas/LocalSecondaryIndexDescriptionList"
        GlobalSecondaryIndexes:
          $ref: "#/components/schemas/GlobalSecondaryIndexDescriptionList"
        StreamSpecification:
          $ref: "#/components/schemas/StreamSpecification"
        LatestStreamLabel:
          $ref: "#/components/schemas/String"
        LatestStreamArn:
          $ref: "#/components/schemas/StreamArn"
        RestoreSummary:
          $ref: "#/components/schemas/RestoreSummary"
        SSEDescription:
          $ref: "#/components/schemas/SSEDescription"
      description: Represents the properties of a table.
    Delete:
      type: object
      required:
        - Key
        - TableName
      properties:
        Key:
          $ref: "#/components/schemas/Key"
        TableName:
          $ref: "#/components/schemas/TableName"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
        ReturnValuesOnConditionCheckFailure:
          $ref: "#/components/schemas/ReturnValuesOnConditionCheckFailure"
      description: Represents a request to perform a <code>DeleteItem</code> operation.
    DeleteGlobalSecondaryIndexAction:
      type: object
      required:
        - IndexName
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
      description: Represents a global secondary index to be deleted from an existing table.
    ExpectedAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ExpectedAttributeValue"
    ReturnValue:
      type: string
      enum:
        - NONE
        - ALL_OLD
        - UPDATED_OLD
        - ALL_NEW
        - UPDATED_NEW
    ItemCollectionMetrics:
      type: object
      properties:
        ItemCollectionKey:
          $ref: "#/components/schemas/ItemCollectionKeyAttributeMap"
        SizeEstimateRangeGB:
          $ref: "#/components/schemas/ItemCollectionSizeEstimateRange"
      description: Information about item collections, if any, that were affected by the
        operation. <code>ItemCollectionMetrics</code> is only returned if the
        request asked for it. If the table does not have any local secondary
        indexes, this information is not returned in the response.
    DeleteReplicaAction:
      type: object
      required:
        - RegionName
      properties:
        RegionName:
          $ref: "#/components/schemas/RegionName"
      description: Represents a replica to be removed.
    DeleteRequest:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: "#/components/schemas/Key"
      description: Represents a request to perform a <code>DeleteItem</code> operation on
        an item.
    Endpoints:
      type: array
      items:
        $ref: "#/components/schemas/Endpoint"
    ReplicaSettingsDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/ReplicaSettingsDescription"
    TimeToLiveDescription:
      type: object
      properties:
        TimeToLiveStatus:
          $ref: "#/components/schemas/TimeToLiveStatus"
        AttributeName:
          $ref: "#/components/schemas/TimeToLiveAttributeName"
      description: "The description of the Time to Live (TTL) status on the specified
        table. "
    Long:
      type: integer
    Endpoint:
      type: object
      required:
        - Address
        - CachePeriodInMinutes
      properties:
        Address:
          $ref: "#/components/schemas/String"
        CachePeriodInMinutes:
          $ref: "#/components/schemas/Long"
      description: An endpoint information details.
    ExpectedAttributeValue:
      type: object
      properties:
        Value:
          $ref: "#/components/schemas/AttributeValue"
        Exists:
          $ref: "#/components/schemas/BooleanObject"
        ComparisonOperator:
          $ref: "#/components/schemas/ComparisonOperator"
        AttributeValueList:
          $ref: "#/components/schemas/AttributeValueList"
      description: <p>Represents a condition to be compared with an attribute value. This
        condition can be used with <code>DeleteItem</code>, <code>PutItem</code>
        or <code>UpdateItem</code> operations; if the comparison evaluates to
        true, the operation succeeds; if not, the operation fails. You can use
        <code>ExpectedAttributeValue</code> in one of two different ways:</p>
        <ul> <li> <p>Use <code>AttributeValueList</code> to specify one or more
        values to compare against an attribute. Use
        <code>ComparisonOperator</code> to specify how you want to perform the
        comparison. If the comparison evaluates to true, then the conditional
        operation succeeds.</p> </li> <li> <p>Use <code>Value</code> to specify
        a value that DynamoDB will compare against an attribute. If the values
        match, then <code>ExpectedAttributeValue</code> evaluates to true and
        the conditional operation succeeds. Optionally, you can also set
        <code>Exists</code> to false, indicating that you <i>do not</i> expect
        to find the attribute value in the table. In this case, the conditional
        operation succeeds only if the comparison evaluates to false.</p> </li>
        </ul> <p> <code>Value</code> and <code>Exists</code> are incompatible
        with <code>AttributeValueList</code> and
        <code>ComparisonOperator</code>. Note that if you use both sets of
        parameters at once, DynamoDB will return a
        <code>ValidationException</code> exception.</p>
    ExpressionAttributeNameVariable:
      type: string
    ExpressionAttributeValueVariable:
      type: string
    FilterConditionMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Condition"
    ProjectionExpression:
      type: string
    Get:
      type: object
      required:
        - Key
        - TableName
      properties:
        Key:
          $ref: "#/components/schemas/Key"
        TableName:
          $ref: "#/components/schemas/TableName"
        ProjectionExpression:
          $ref: "#/components/schemas/ProjectionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
      description: Specifies an item and related attribute values to retrieve in a
        <code>TransactGetItem</code> object.
    GlobalSecondaryIndex:
      type: object
      required:
        - IndexName
        - KeySchema
        - Projection
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
      description: Represents the properties of a global secondary index.
    IndexStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
    ProvisionedThroughputDescription:
      type: object
      properties:
        LastIncreaseDateTime:
          $ref: "#/components/schemas/Date"
        LastDecreaseDateTime:
          $ref: "#/components/schemas/Date"
        NumberOfDecreasesToday:
          $ref: "#/components/schemas/PositiveLongObject"
        ReadCapacityUnits:
          $ref: "#/components/schemas/NonNegativeLongObject"
        WriteCapacityUnits:
          $ref: "#/components/schemas/NonNegativeLongObject"
      description: Represents the provisioned throughput settings for the table, consisting
        of read and write capacity units, along with data about increases and
        decreases.
    GlobalSecondaryIndexDescription:
      type: object
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
        IndexStatus:
          $ref: "#/components/schemas/IndexStatus"
        Backfilling:
          $ref: "#/components/schemas/Backfilling"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughputDescription"
        IndexSizeBytes:
          $ref: "#/components/schemas/Long"
        ItemCount:
          $ref: "#/components/schemas/Long"
        IndexArn:
          $ref: "#/components/schemas/String"
      description: Represents the properties of a global secondary index.
    GlobalSecondaryIndexDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/GlobalSecondaryIndexDescription"
    GlobalSecondaryIndexInfo:
      type: object
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
      description: Represents the properties of a global secondary index for the table when
        the backup was created.
    UpdateGlobalSecondaryIndexAction:
      type: object
      required:
        - IndexName
        - ProvisionedThroughput
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        ProvisionedThroughput:
          $ref: "#/components/schemas/ProvisionedThroughput"
      description: Represents the new provisioned throughput settings to be applied to a
        global secondary index.
    GlobalSecondaryIndexUpdate:
      type: object
      properties:
        Update:
          $ref: "#/components/schemas/UpdateGlobalSecondaryIndexAction"
        Create:
          $ref: "#/components/schemas/CreateGlobalSecondaryIndexAction"
        Delete:
          $ref: "#/components/schemas/DeleteGlobalSecondaryIndexAction"
      description: <p>Represents one of the following:</p> <ul> <li> <p>A new global
        secondary index to be added to an existing table.</p> </li> <li> <p>New
        provisioned throughput parameters for an existing global secondary
        index.</p> </li> <li> <p>An existing global secondary index to be
        removed from an existing table.</p> </li> </ul>
    GlobalSecondaryIndexUpdateList:
      type: array
      items:
        $ref: "#/components/schemas/GlobalSecondaryIndexUpdate"
    GlobalSecondaryIndexes:
      type: array
      items:
        $ref: "#/components/schemas/GlobalSecondaryIndexInfo"
    GlobalTable:
      type: object
      properties:
        GlobalTableName:
          $ref: "#/components/schemas/TableName"
        ReplicationGroup:
          $ref: "#/components/schemas/ReplicaList"
      description: Represents the properties of a global table.
    GlobalTableArnString:
      type: string
    ReplicaDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/ReplicaDescription"
    GlobalTableStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
        - UPDATING
    GlobalTableGlobalSecondaryIndexSettingsUpdate:
      type: object
      required:
        - IndexName
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        ProvisionedWriteCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        ProvisionedWriteCapacityAutoScalingSettingsUpdate:
          $ref: "#/components/schemas/AutoScalingSettingsUpdate"
      description: Represents the settings of a global secondary index for a global table
        that will be modified.
    GlobalTableGlobalSecondaryIndexSettingsUpdateList:
      type: array
      items:
        $ref: "#/components/schemas/GlobalTableGlobalSecondaryIndexSettingsUpdate"
      minItems: 1
      maxItems: 20
    GlobalTableList:
      type: array
      items:
        $ref: "#/components/schemas/GlobalTable"
    Integer:
      type: integer
    ItemCollectionKeyAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    ItemCollectionSizeEstimateRange:
      type: array
      items:
        $ref: "#/components/schemas/ItemCollectionSizeEstimateBound"
    ItemCollectionMetricsMultiple:
      type: array
      items:
        $ref: "#/components/schemas/ItemCollectionMetrics"
    ItemCollectionSizeEstimateBound:
      type: number
      format: double
    ItemCount:
      type: integer
      minimum: 0
    ItemResponse:
      type: object
      properties:
        Item:
          $ref: "#/components/schemas/AttributeMap"
      description: Details for the requested item.
    ItemResponseList:
      type: array
      items:
        $ref: "#/components/schemas/ItemResponse"
      minItems: 1
      maxItems: 10
    KMSMasterKeyArn:
      type: string
    KMSMasterKeyId:
      type: string
    KeyConditions:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Condition"
    KeyExpression:
      type: string
    KeyList:
      type: array
      items:
        $ref: "#/components/schemas/Key"
      minItems: 1
      maxItems: 100
    KeySchemaElement:
      type: object
      required:
        - AttributeName
        - KeyType
      properties:
        AttributeName:
          $ref: "#/components/schemas/KeySchemaAttributeName"
        KeyType:
          $ref: "#/components/schemas/KeyType"
      description: <p>Represents <i>a single element</i> of a key schema. A key schema
        specifies the attributes that make up the primary key of a table, or the
        key attributes of an index.</p> <p>A <code>KeySchemaElement</code>
        represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one
        <code>KeySchemaElement</code> (for the partition key). A composite
        primary key would require one <code>KeySchemaElement</code> for the
        partition key, and another <code>KeySchemaElement</code> for the sort
        key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level
        attribute (not a nested attribute). The data type must be one of String,
        Number, or Binary. The attribute cannot be nested within a List or a
        Map.</p>
    KeyType:
      type: string
      enum:
        - HASH
        - RANGE
    TimeRangeLowerBound:
      type: string
      format: date-time
    TimeRangeUpperBound:
      type: string
      format: date-time
    PositiveIntegerObject:
      type: integer
      minimum: 1
    ListTablesInputLimit:
      type: integer
      minimum: 1
      maximum: 100
    TableNameList:
      type: array
      items:
        $ref: "#/components/schemas/TableName"
    ResourceArnString:
      type: string
      minLength: 1
      maxLength: 1283
    NextTokenString:
      type: string
    LocalSecondaryIndex:
      type: object
      required:
        - IndexName
        - KeySchema
        - Projection
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
      description: Represents the properties of a local secondary index.
    LocalSecondaryIndexDescription:
      type: object
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
        IndexSizeBytes:
          $ref: "#/components/schemas/Long"
        ItemCount:
          $ref: "#/components/schemas/Long"
        IndexArn:
          $ref: "#/components/schemas/String"
      description: Represents the properties of a local secondary index.
    LocalSecondaryIndexDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/LocalSecondaryIndexDescription"
    LocalSecondaryIndexInfo:
      type: object
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        KeySchema:
          $ref: "#/components/schemas/KeySchema"
        Projection:
          $ref: "#/components/schemas/Projection"
      description: Represents the properties of a local secondary index for the table when
        the backup was created.
    LocalSecondaryIndexes:
      type: array
      items:
        $ref: "#/components/schemas/LocalSecondaryIndexInfo"
    NonKeyAttributeName:
      type: string
      minLength: 1
      maxLength: 255
    NonKeyAttributeNameList:
      type: array
      items:
        $ref: "#/components/schemas/NonKeyAttributeName"
      minItems: 1
      maxItems: 20
    NonNegativeLongObject:
      type: integer
      minimum: 0
    PointInTimeRecoveryStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    PointInTimeRecoverySpecification:
      type: object
      required:
        - PointInTimeRecoveryEnabled
      properties:
        PointInTimeRecoveryEnabled:
          $ref: "#/components/schemas/BooleanObject"
      description: Represents the settings used to enable point in time recovery.
    ProjectionType:
      type: string
      enum:
        - ALL
        - KEYS_ONLY
        - INCLUDE
    PutItemInputAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/AttributeValue"
    Put:
      type: object
      required:
        - Item
        - TableName
      properties:
        Item:
          $ref: "#/components/schemas/PutItemInputAttributeMap"
        TableName:
          $ref: "#/components/schemas/TableName"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
        ReturnValuesOnConditionCheckFailure:
          $ref: "#/components/schemas/ReturnValuesOnConditionCheckFailure"
      description: Represents a request to perform a <code>PutItem</code> operation.
    PutRequest:
      type: object
      required:
        - Item
      properties:
        Item:
          $ref: "#/components/schemas/PutItemInputAttributeMap"
      description: Represents a request to perform a <code>PutItem</code> operation on an
        item.
    Select:
      type: string
      enum:
        - ALL_ATTRIBUTES
        - ALL_PROJECTED_ATTRIBUTES
        - SPECIFIC_ATTRIBUTES
        - COUNT
    Replica:
      type: object
      properties:
        RegionName:
          $ref: "#/components/schemas/RegionName"
      description: Represents the properties of a replica.
    ReplicaDescription:
      type: object
      properties:
        RegionName:
          $ref: "#/components/schemas/RegionName"
      description: Contains the details of the replica.
    ReplicaGlobalSecondaryIndexSettingsDescription:
      type: object
      required:
        - IndexName
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        IndexStatus:
          $ref: "#/components/schemas/IndexStatus"
        ProvisionedReadCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        ProvisionedReadCapacityAutoScalingSettings:
          $ref: "#/components/schemas/AutoScalingSettingsDescription"
        ProvisionedWriteCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        ProvisionedWriteCapacityAutoScalingSettings:
          $ref: "#/components/schemas/AutoScalingSettingsDescription"
      description: Represents the properties of a global secondary index.
    ReplicaGlobalSecondaryIndexSettingsDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/ReplicaGlobalSecondaryIndexSettingsDescription"
    ReplicaGlobalSecondaryIndexSettingsUpdate:
      type: object
      required:
        - IndexName
      properties:
        IndexName:
          $ref: "#/components/schemas/IndexName"
        ProvisionedReadCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        ProvisionedReadCapacityAutoScalingSettingsUpdate:
          $ref: "#/components/schemas/AutoScalingSettingsUpdate"
      description: Represents the settings of a global secondary index for a global table
        that will be modified.
    ReplicaGlobalSecondaryIndexSettingsUpdateList:
      type: array
      items:
        $ref: "#/components/schemas/ReplicaGlobalSecondaryIndexSettingsUpdate"
      minItems: 1
      maxItems: 20
    ReplicaStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
    ReplicaSettingsDescription:
      type: object
      required:
        - RegionName
      properties:
        RegionName:
          $ref: "#/components/schemas/RegionName"
        ReplicaStatus:
          $ref: "#/components/schemas/ReplicaStatus"
        ReplicaBillingModeSummary:
          $ref: "#/components/schemas/BillingModeSummary"
        ReplicaProvisionedReadCapacityUnits:
          $ref: "#/components/schemas/NonNegativeLongObject"
        ReplicaProvisionedReadCapacityAutoScalingSettings:
          $ref: "#/components/schemas/AutoScalingSettingsDescription"
        ReplicaProvisionedWriteCapacityUnits:
          $ref: "#/components/schemas/NonNegativeLongObject"
        ReplicaProvisionedWriteCapacityAutoScalingSettings:
          $ref: "#/components/schemas/AutoScalingSettingsDescription"
        ReplicaGlobalSecondaryIndexSettings:
          $ref: "#/components/schemas/ReplicaGlobalSecondaryIndexSettingsDescriptio\
            nList"
      description: Represents the properties of a replica.
    ReplicaSettingsUpdate:
      type: object
      required:
        - RegionName
      properties:
        RegionName:
          $ref: "#/components/schemas/RegionName"
        ReplicaProvisionedReadCapacityUnits:
          $ref: "#/components/schemas/PositiveLongObject"
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate:
          $ref: "#/components/schemas/AutoScalingSettingsUpdate"
        ReplicaGlobalSecondaryIndexSettingsUpdate:
          $ref: "#/components/schemas/ReplicaGlobalSecondaryIndexSettingsUpdateList"
      description: Represents the settings for a global table in a region that will be
        modified.
    ReplicaSettingsUpdateList:
      type: array
      items:
        $ref: "#/components/schemas/ReplicaSettingsUpdate"
      minItems: 1
      maxItems: 50
    ReplicaUpdate:
      type: object
      properties:
        Create:
          $ref: "#/components/schemas/CreateReplicaAction"
        Delete:
          $ref: "#/components/schemas/DeleteReplicaAction"
      description: <p>Represents one of the following:</p> <ul> <li> <p>A new replica to be
        added to an existing global table.</p> </li> <li> <p>New parameters for
        an existing replica.</p> </li> <li> <p>An existing replica to be removed
        from an existing global table.</p> </li> </ul>
    ReplicaUpdateList:
      type: array
      items:
        $ref: "#/components/schemas/ReplicaUpdate"
    RestoreInProgress:
      type: boolean
    RestoreSummary:
      type: object
      required:
        - RestoreDateTime
        - RestoreInProgress
      properties:
        SourceBackupArn:
          $ref: "#/components/schemas/BackupArn"
        SourceTableArn:
          $ref: "#/components/schemas/TableArn"
        RestoreDateTime:
          $ref: "#/components/schemas/Date"
        RestoreInProgress:
          $ref: "#/components/schemas/RestoreInProgress"
      description: Contains details for the restore.
    SSEStatus:
      type: string
      enum:
        - ENABLING
        - ENABLED
        - DISABLING
        - DISABLED
        - UPDATING
    SSEType:
      type: string
      enum:
        - AES256
        - KMS
    SSEDescription:
      type: object
      properties:
        Status:
          $ref: "#/components/schemas/SSEStatus"
        SSEType:
          $ref: "#/components/schemas/SSEType"
        KMSMasterKeyArn:
          $ref: "#/components/schemas/KMSMasterKeyArn"
      description: The description of the server-side encryption status on the specified
        table.
    SSEEnabled:
      type: boolean
    ScanTotalSegments:
      type: integer
      minimum: 1
      maximum: 1000000
    ScanSegment:
      type: integer
      minimum: 0
      maximum: 999999
    TableCreationDateTime:
      type: string
      format: date-time
    StreamArn:
      type: string
      minLength: 37
      maxLength: 1024
    StreamEnabled:
      type: boolean
    StreamViewType:
      type: string
      enum:
        - NEW_IMAGE
        - OLD_IMAGE
        - NEW_AND_OLD_IMAGES
        - KEYS_ONLY
    TableStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
    TagKeyString:
      type: string
      minLength: 1
      maxLength: 128
    TagValueString:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: "#/components/schemas/TagKeyString"
        Value:
          $ref: "#/components/schemas/TagValueString"
      description: <p>Describes a tag. A tag is a key-value pair. You can add up to 50 tags
        to a single DynamoDB table. </p> <p> AWS-assigned tag names and values
        are automatically assigned the <code>aws:</code> prefix, which the user
        cannot assign. AWS-assigned tag names do not count towards the tag limit
        of 50. User-assigned tag names have the prefix <code>user:</code> in the
        Cost Allocation Report. You cannot backdate the application of a tag.
        </p> <p>For an overview on tagging DynamoDB resources, see <a
        href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging
        for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKeyString"
    TimeToLiveAttributeName:
      type: string
      minLength: 1
      maxLength: 255
    TimeToLiveStatus:
      type: string
      enum:
        - ENABLING
        - DISABLING
        - ENABLED
        - DISABLED
    TimeToLiveEnabled:
      type: boolean
    TimeToLiveSpecification:
      type: object
      required:
        - Enabled
        - AttributeName
      properties:
        Enabled:
          $ref: "#/components/schemas/TimeToLiveEnabled"
        AttributeName:
          $ref: "#/components/schemas/TimeToLiveAttributeName"
      description: Represents the settings used to enable or disable Time to Live (TTL) for
        the specified table.
    TransactGetItem:
      type: object
      required:
        - Get
      properties:
        Get:
          $ref: "#/components/schemas/Get"
      description: Specifies an item to be retrieved as part of the transaction.
    TransactGetItemList:
      type: array
      items:
        $ref: "#/components/schemas/TransactGetItem"
      minItems: 1
      maxItems: 10
    Update:
      type: object
      required:
        - Key
        - UpdateExpression
        - TableName
      properties:
        Key:
          $ref: "#/components/schemas/Key"
        UpdateExpression:
          $ref: "#/components/schemas/UpdateExpression"
        TableName:
          $ref: "#/components/schemas/TableName"
        ConditionExpression:
          $ref: "#/components/schemas/ConditionExpression"
        ExpressionAttributeNames:
          $ref: "#/components/schemas/ExpressionAttributeNameMap"
        ExpressionAttributeValues:
          $ref: "#/components/schemas/ExpressionAttributeValueMap"
        ReturnValuesOnConditionCheckFailure:
          $ref: "#/components/schemas/ReturnValuesOnConditionCheckFailure"
      description: Represents a request to perform an <code>UpdateItem</code> operation.
    TransactWriteItem:
      type: object
      properties:
        ConditionCheck:
          $ref: "#/components/schemas/ConditionCheck"
        Put:
          $ref: "#/components/schemas/Put"
        Delete:
          $ref: "#/components/schemas/Delete"
        Update:
          $ref: "#/components/schemas/Update"
      description: A list of requests that can perform update, put, delete, or check
        operations on multiple items in one or more tables atomically.
    TransactWriteItemList:
      type: array
      items:
        $ref: "#/components/schemas/TransactWriteItem"
      minItems: 1
      maxItems: 10
    UpdateExpression:
      type: string
    WriteRequest:
      type: object
      properties:
        PutRequest:
          $ref: "#/components/schemas/PutRequest"
        DeleteRequest:
          $ref: "#/components/schemas/DeleteRequest"
      description: Represents an operation to perform - either <code>DeleteItem</code> or
        <code>PutItem</code>. You can only request one of these operations, not
        both, in a single <code>WriteRequest</code>. If you do need to perform
        both of these operations, you will need to provide two separate
        <code>WriteRequest</code> objects.
