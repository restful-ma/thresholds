openapi: 3.0.0
info:
  description: Service Fabric REST Client APIs allows management of Service Fabric
    clusters, applications and services.
  title: Service Fabric Client APIs
  version: 6.5.0.36
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/servicefabric/data-plane/Microsoft.ServiceFabric/stable/6.5/servicefabric.json
      version: "2.0"
  x-preferred: true
  x-providerName: azure.com
  x-serviceName: servicefabric
  x-tags:
    - Azure
    - Microsoft
paths:
  /$/CancelRepairTask:
    post:
      description: This API supports the Service Fabric platform; it is not meant to be
        used directly from your code.
      operationId: CancelRepairTask
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepairTaskCancelDescription"
        description: Describes the repair task to be cancelled.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: >-
            A successful operation will return 200 status code.

            The response body provides information about the updated repair task.

            Success indicates that the cancellation request was recorded, but does not guarantee that the repair task will be cancelled.

            Clients may use the State property of the repair task to determine the current state of the repair task.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepairTaskUpdateInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Requests the cancellation of the given repair task.
      tags:
        - RepairManagement
  /$/CreateRepairTask:
    post:
      description: >-
        For clusters that have the Repair Manager Service configured,

        this API provides a way to create repair tasks that run automatically or manually.

        For repair tasks that run automatically, an appropriate repair executor

        must be running for each repair action to run automatically.

        These are currently only available in specially-configured Azure Cloud Services.


        To create a manual repair task, provide the set of impacted node names and the

        expected impact. When the state of the created repair task changes to approved,

        you can safely perform repair actions on those nodes.


        This API supports the Service Fabric platform; it is not meant to be used directly from your code.
      operationId: CreateRepairTask
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/RepairTask"
      responses:
        "200":
          description: >-
            A successful operation will return 200 status code.

            The response body provides information about the created repair task.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepairTaskUpdateInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates a new repair task.
      tags:
        - RepairManagement
  /$/DeleteRepairTask:
    post:
      description: This API supports the Service Fabric platform; it is not meant to be
        used directly from your code.
      operationId: DeleteRepairTask
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepairTaskDeleteDescription"
        description: Describes the repair task to be deleted.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes a completed repair task.
      tags:
        - RepairManagement
  /$/ForceApproveRepairTask:
    post:
      description: This API supports the Service Fabric platform; it is not meant to be
        used directly from your code.
      operationId: ForceApproveRepairTask
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepairTaskApproveDescription"
        description: Describes the repair task to be approved.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: >-
            A successful operation will return 200 status code.

            The response body provides information about the updated repair task.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepairTaskUpdateInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Forces the approval of the given repair task.
      tags:
        - RepairManagement
  /$/GetAadMetadata:
    get:
      description: >-
        Gets the Azure Active Directory metadata used for secured connection to
        cluster.

        This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
      operationId: GetAadMetadata
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the Azure
            Active Directory metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AadMetadataObject"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Azure Active Directory metadata used for secured connection to
        cluster.
      tags:
        - Cluster
  /$/GetClusterConfiguration:
    get:
      description: >-
        The cluster configuration contains properties of the cluster that
        include different node types on the cluster,

        security configurations, fault, and upgrade domain topologies, etc.
      operationId: GetClusterConfiguration
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ConfigurationApiVersionRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster configuration information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterConfiguration"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the Service Fabric standalone cluster configuration.
      tags:
        - Cluster
  /$/GetClusterConfigurationUpgradeStatus:
    get:
      description: Get the cluster configuration upgrade status details of a Service Fabric
        standalone cluster.
      operationId: GetClusterConfigurationUpgradeStatus
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster configuration upgrade status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterConfigurationUpgradeStatusInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the cluster configuration upgrade status of a Service Fabric
        standalone cluster.
      tags:
        - Cluster
  /$/GetClusterHealth:
    get:
      description: >-
        Use EventsHealthStateFilter to filter the collection of health events
        reported on the cluster based on the health state.

        Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
      operationId: GetClusterHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodesHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ApplicationsHealthStateFilterOptionalQuery\
            Param"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/IncludeSystemApplicationHealthStatisticsOp\
            tionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric cluster.
      tags:
        - Cluster
    post:
      description: >-
        Use EventsHealthStateFilter to filter the collection of health events
        reported on the cluster based on the health state.

        Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.

        Use ClusterHealthPolicies to override the health policies used to evaluate the health.
      operationId: GetClusterHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodesHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ApplicationsHealthStateFilterOptionalQuery\
            Param"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/IncludeSystemApplicationHealthStatisticsOp\
            tionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterHealthPolicies"
        description: >-
          Describes the health policies used to evaluate the cluster health.

          If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.

          By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.

          If the application health policy map is specified, and it has an entry for an application, the specified application health policy

          is used to evaluate the application health.
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric cluster using the specified policy.
      tags:
        - Cluster
  /$/GetClusterHealthChunk:
    get:
      description: >-
        Gets the health of a Service Fabric cluster using health chunks.
        Includes the aggregated health state of the cluster, but none of the
        cluster entities.

        To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
      operationId: GetClusterHealthChunk
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster health chunk information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterHealthChunk"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric cluster using health chunks.
      tags:
        - Cluster
    post:
      description: >-
        Gets the health of a Service Fabric cluster using health chunks. The
        health evaluation is done based on the input cluster health chunk query
        description.

        The query description allows users to specify health policies for evaluating the cluster and its children.

        Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy.

        The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return

        only services that are in Error or Warning, and all partitions and replicas for one of these services.
      operationId: GetClusterHealthChunkUsingPolicyAndAdvancedFilters
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterHealthChunkQueryDescription"
        description: >-
          Describes the cluster and application health policies used to evaluate
          the cluster health and the filters to select which cluster entities to
          be returned.

          If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy.

          By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest.

          If the application health policy map is specified, and it has an entry for an application, the specified application health policy

          is used to evaluate the application health.

          Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy.

          The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return

          only services that are in Error or Warning, and all partitions and replicas for one of these services.
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster health chunk information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterHealthChunk"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric cluster using health chunks.
      tags:
        - Cluster
  /$/GetClusterManifest:
    get:
      description: >-
        Get the Service Fabric cluster manifest. The cluster manifest contains
        properties of the cluster that include different node types on the
        cluster,

        security configurations, fault, and upgrade domain topologies, etc.


        These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest

        is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).


        The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
      operationId: GetClusterManifest
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster manifest information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterManifest"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the Service Fabric cluster manifest.
      tags:
        - Cluster
  /$/GetClusterVersion:
    get:
      description: If a cluster upgrade is happening, then this API will return the lowest
        (older) version of the current and target cluster runtime versions.
      operationId: GetClusterVersion
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster version information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterVersion"
              examples:
                Get cluster version:
                  $ref: "#/components/examples/Get_cluster_version"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the current Service Fabric cluster version.
      tags:
        - Cluster
  /$/GetLoadInformation:
    get:
      description: Retrieves the load information of a Service Fabric cluster for all the
        metrics that have load or capacity defined.
      operationId: GetClusterLoad
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster load information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterLoadInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the load of a Service Fabric cluster.
      tags:
        - Cluster
  /$/GetProvisionedCodeVersions:
    get:
      description: Gets a list of information about fabric code versions that are
        provisioned in the cluster. The parameter CodeVersion can be used to
        optionally filter the output to only that particular version.
      operationId: GetProvisionedFabricCodeVersionInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/CodeVersionOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            provisioned code versions information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricCodeVersionInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a list of fabric code versions that are provisioned in a Service
        Fabric cluster.
      tags:
        - Cluster
  /$/GetProvisionedConfigVersions:
    get:
      description: Gets a list of information about fabric config versions that are
        provisioned in the cluster. The parameter ConfigVersion can be used to
        optionally filter the output to only that particular version.
      operationId: GetProvisionedFabricConfigVersionInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ConfigVersionOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            provisioned config versions information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricConfigVersionInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a list of fabric config versions that are provisioned in a Service
        Fabric cluster.
      tags:
        - Cluster
  /$/GetRepairTaskList:
    get:
      description: This API supports the Service Fabric platform; it is not meant to be
        used directly from your code.
      operationId: GetRepairTaskList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/RepairTaskIdFilterOptionalQueryParam"
        - $ref: "#/components/parameters/RepairTaskStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/RepairTaskExecutorFilterOptionalQueryParam"
      responses:
        "200":
          description: >-
            A successful operation will return 200 status code.

            The response body provides a list of repair tasks matching all of the given filters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepairTaskList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a list of repair tasks matching the given filters.
      tags:
        - RepairManagement
  /$/GetUpgradeOrchestrationServiceState:
    get:
      description: Get the service state of Service Fabric Upgrade Orchestration Service.
        This API is internally used for support purposes.
      operationId: GetUpgradeOrchestrationServiceState
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            service state of Service Fabric Upgrade Orchestration Service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpgradeOrchestrationServiceState"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the service state of Service Fabric Upgrade Orchestration Service.
      tags:
        - Cluster
  /$/GetUpgradeProgress:
    get:
      description: Gets the current progress of the ongoing cluster upgrade. If no upgrade
        is currently in progress, get the last state of the previous cluster
        upgrade.
      operationId: GetClusterUpgradeProgress
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            cluster upgrade progress.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterUpgradeProgressObject"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the progress of the current cluster upgrade.
      tags:
        - Cluster
  /$/InvokeInfrastructureCommand:
    post:
      description: >-
        For clusters that have one or more instances of the Infrastructure
        Service configured,

        this API provides a way to send infrastructure-specific commands to a particular

        instance of the Infrastructure Service.


        Available commands and their corresponding response formats vary depending upon

        the infrastructure on which the cluster is running.


        This API supports the Service Fabric platform; it is not meant to be used directly from your code.
      operationId: InvokeInfrastructureCommand
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/InfrastructureCommandRequiredQueryParam"
        - $ref: "#/components/parameters/InfrastructureServiceIdOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: >-
            The response from the infrastructure service. The response format is
            a JSON stream.

            The contents of the response depend on which command was issued.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfrastructureServiceResponse"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Invokes an administrative command on the given Infrastructure Service
        instance.
      tags:
        - Infrastructure
  /$/InvokeInfrastructureQuery:
    get:
      description: >-
        For clusters that have one or more instances of the Infrastructure
        Service configured,

        this API provides a way to send infrastructure-specific queries to a particular

        instance of the Infrastructure Service.


        Available commands and their corresponding response formats vary depending upon

        the infrastructure on which the cluster is running.


        This API supports the Service Fabric platform; it is not meant to be used directly from your code.
      operationId: InvokeInfrastructureQuery
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/InfrastructureCommandRequiredQueryParam"
        - $ref: "#/components/parameters/InfrastructureServiceIdOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: >-
            The response from the infrastructure service. The response format is
            a JSON stream.

            The contents of the response depend on which command was issued.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfrastructureServiceResponse"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Invokes a read-only query on the given infrastructure service instance.
      tags:
        - Infrastructure
  /$/MoveToNextUpgradeDomain:
    post:
      description: Make the cluster code or configuration upgrade move on to the next
        upgrade domain if appropriate.
      operationId: ResumeClusterUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResumeClusterUpgradeDescription"
        description: Describes the parameters for resuming a cluster upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the cluster upgrade has moved on to
            the next upgrade domain.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Make the cluster upgrade move on to the next upgrade domain.
      tags:
        - Cluster
  /$/Provision:
    post:
      description: Validate and provision the code or configuration packages of a Service
        Fabric cluster.
      operationId: ProvisionCluster
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisionFabricDescription"
        description: Describes the parameters for provisioning a cluster.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the code or configuration packages
            have been provisioned.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Provision the code or configuration packages of a Service Fabric cluster.
      tags:
        - Cluster
  /$/RecoverAllPartitions:
    post:
      description: This operation should only be performed if it is known that the replicas
        that are down cannot be recovered. Incorrect use of this API can cause
        potential data loss.
      operationId: RecoverAllPartitions
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Indicates to the Service Fabric cluster that it should attempt to
        recover any services (including system services) which are currently
        stuck in quorum loss.
      tags:
        - Partition
  /$/RecoverSystemPartitions:
    post:
      description: Indicates to the Service Fabric cluster that it should attempt to
        recover the system services that are currently stuck in quorum loss.
        This operation should only be performed if it is known that the replicas
        that are down cannot be recovered. Incorrect use of this API can cause
        potential data loss.
      operationId: RecoverSystemPartitions
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Indicates to the Service Fabric cluster that it should attempt to
        recover the system services that are currently stuck in quorum loss.
      tags:
        - Partition
  /$/ReportClusterHealth:
    post:
      description: >-
        Sends a health report on a Service Fabric cluster. The report must
        contain the information about the source of the health report and
        property on which it is reported.

        The report is sent to a Service Fabric gateway node, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
      operationId: ReportClusterHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code when the cluster
            health report is accepted for processing.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric cluster.
      tags:
        - Cluster
  /$/RollbackUpgrade:
    post:
      description: Roll back the code or configuration upgrade of a Service Fabric cluster.
      operationId: RollbackClusterUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A successful response means that the rollback of a cluster upgrade
            has been initiated.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Roll back the upgrade of a Service Fabric cluster.
      tags:
        - Cluster
  /$/SetUpgradeOrchestrationServiceState:
    post:
      description: Update the service state of Service Fabric Upgrade Orchestration
        Service. This API is internally used for support purposes.
      operationId: SetUpgradeOrchestrationServiceState
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpgradeOrchestrationServiceState"
        description: Service state of Service Fabric Upgrade Orchestration Service.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the service state of Service Fabric
            Upgrade Orchestration Service has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpgradeOrchestrationServiceStateSummary"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Update the service state of Service Fabric Upgrade Orchestration Service.
      tags:
        - Cluster
  /$/StartClusterConfigurationUpgrade:
    post:
      description: Validate the supplied configuration upgrade parameters and start
        upgrading the cluster configuration if the parameters are valid.
      operationId: StartClusterConfigurationUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterConfigurationUpgradeDescription"
        description: Parameters for a standalone cluster configuration upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A successful response means that the cluster configuration upgrade
            has started. Use GetClusterConfigurationUpgradeStatus operation to
            get the status of the upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Start upgrading the configuration of a Service Fabric standalone cluster.
      tags:
        - Cluster
  /$/ToggleVerboseServicePlacementHealthReporting:
    post:
      description: >-
        If verbosity is set to true, then detailed health reports will be
        generated when replicas cannot be placed or dropped.

        If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or dropped.
      operationId: ToggleVerboseServicePlacementHealthReporting
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/VerboseServicePlacementHealthReportingParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful response means that the verbosity of service placement
            health reporting was updated.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Changes the verbosity of service placement health reporting.
      tags:
        - Cluster
  /$/Unprovision:
    post:
      description: It is supported to unprovision code and configuration separately.
      operationId: UnprovisionCluster
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnprovisionFabricDescription"
        description: Describes the parameters for unprovisioning a cluster.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the code or configuration packages
            have been unprovisioned.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Unprovision the code or configuration packages of a Service Fabric
        cluster.
      tags:
        - Cluster
  /$/UpdateRepairExecutionState:
    post:
      description: This API supports the Service Fabric platform; it is not meant to be
        used directly from your code.
      operationId: UpdateRepairExecutionState
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/RepairTask"
      responses:
        "200":
          description: >-
            A successful operation will return 200 status code.

            The response body provides information about the updated repair task.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepairTaskUpdateInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Updates the execution state of a repair task.
      tags:
        - RepairManagement
  /$/UpdateRepairTaskHealthPolicy:
    post:
      description: This API supports the Service Fabric platform; it is not meant to be
        used directly from your code.
      operationId: UpdateRepairTaskHealthPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepairTaskUpdateHealthPolicyDescription"
        description: Describes the repair task healthy policy to be updated.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: >-
            A successful operation will return 200 status code.

            The response body provides information about the updated repair task.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepairTaskUpdateInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Updates the health policy of the given repair task.
      tags:
        - RepairManagement
  /$/UpdateUpgrade:
    post:
      description: Update the upgrade parameters used during a Service Fabric cluster
        upgrade.
      operationId: UpdateClusterUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClusterUpgradeDescription"
        description: Parameters for updating a cluster upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation returns 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Update the upgrade parameters of a Service Fabric cluster upgrade.
      tags:
        - Cluster
  /$/Upgrade:
    post:
      description: Validate the supplied upgrade parameters and start upgrading the code or
        configuration version of a Service Fabric cluster if the parameters are
        valid.
      operationId: StartClusterUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartClusterUpgradeDescription"
        description: Describes the parameters for starting a cluster upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A successful response means that the cluster code or configuration
            upgrade has started. Use GetUpgradeProgress operation to get the
            status of the upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Start upgrading the code or configuration version of a Service Fabric
        cluster.
      tags:
        - Cluster
  /ApplicationTypes:
    get:
      description: Returns the information about the application types that are provisioned
        or in the process of being provisioned in the Service Fabric cluster.
        Each version of an application type is returned as one application type.
        The response includes the name, version, status, and other details about
        the application type. This is a paged query, meaning that if not all of
        the application types fit in a page, one page of results is returned as
        well as a continuation token, which can be used to get the next page.
        For example, if there are 10 application types but a page only fits the
        first three application types, or if max results is set to 3, then three
        is returned. To access the rest of the results, retrieve subsequent
        pages by using the returned continuation token in the next query. An
        empty continuation token is returned if there are no subsequent pages.
      operationId: GetApplicationTypeInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeDefinitionKindFilterOptiona\
            lQueryParam"
        - $ref: "#/components/parameters/ExcludeApplicationParametersOptionalQueryP\
            aram"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of application types in the cluster.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedApplicationTypeInfoList"
              examples:
                Exclude application parameters from the result:
                  $ref: "#/components/examples/Exclude_application_parameters_from_\
                    the_result"
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of application types in the Service Fabric cluster.
      tags:
        - ApplicationType
  /ApplicationTypes/$/Provision:
    post:
      description: >-
        Provisions a Service Fabric application type with the cluster. The
        provision is required before any new applications can be instantiated.

        The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
      operationId: ProvisionApplicationType
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisionApplicationTypeDescriptionBase"
        description: The base type of provision application type description which supports
          either image store-based provision or external store-based provision.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful provision will return 200 status code.
        "202":
          description: A 202 status code indicates the operation was accepted and the
            provision operation has been initiated.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Provisions or registers a Service Fabric application type with the
        cluster using the '.sfpkg' package in the external store or using the
        application package in the image store.
      tags:
        - ApplicationType
  "/ApplicationTypes/{applicationTypeName}":
    get:
      description: Returns the information about the application types that are provisioned
        or in the process of being provisioned in the Service Fabric cluster.
        These results are of application types whose name match exactly the one
        specified as the parameter, and which comply with the given query
        parameters. All versions of the application type matching the
        application type name are returned, with each version returned as one
        application type. The response includes the name, version, status, and
        other details about the application type. This is a paged query, meaning
        that if not all of the application types fit in a page, one page of
        results is returned as well as a continuation token, which can be used
        to get the next page. For example, if there are 10 application types but
        a page only fits the first three application types, or if max results is
        set to 3, then three is returned. To access the rest of the results,
        retrieve subsequent pages by using the returned continuation token in
        the next query. An empty continuation token is returned if there are no
        subsequent pages.
      operationId: GetApplicationTypeInfoListByName
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationTypeVersionOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeApplicationParametersOptionalQueryP\
            aram"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of application types in the cluster.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedApplicationTypeInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of application types in the Service Fabric cluster
        matching exactly the specified name.
      tags:
        - ApplicationType
  "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest":
    get:
      description: The response contains the application manifest XML as a string.
      operationId: GetApplicationManifest
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationTypeVersionRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the node.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationTypeManifest"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the manifest describing an application type.
      tags:
        - ApplicationType
  "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest":
    get:
      description: Gets the manifest describing a service type. The response contains the
        service manifest XML as a string.
      operationId: GetServiceManifest
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationTypeVersionRequiredQueryParam"
        - $ref: "#/components/parameters/ServiceManifestNameRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the service type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeManifest"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the manifest describing a service type.
      tags:
        - ServiceType
  "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes":
    get:
      description: Gets the list containing the information about service types that are
        supported by a provisioned application type in a Service Fabric cluster.
        The provided application type must exist. Otherwise, a 404 status is
        returned.
      operationId: GetServiceTypeInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationTypeVersionRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of service types that are supported by a provisioned
            application type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeInfoList"
              examples:
                Get information about all nodes.:
                  $ref: "#/components/examples/Get_information_about_all_nodes."
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list containing the information about service types that are
        supported by a provisioned application type in a Service Fabric cluster.
      tags:
        - ServiceType
  "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}":
    get:
      description: Gets the information about a specific service type that is supported by
        a provisioned application type in a Service Fabric cluster. The provided
        application type must exist. Otherwise, a 404 status is returned. A 204
        response is returned if the specified service type is not found in the
        cluster.
      operationId: GetServiceTypeInfoByName
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationTypeVersionRequiredQueryParam"
        - $ref: "#/components/parameters/ServiceTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A specific service type which supported by a provisioned application
            type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeInfo"
              examples:
                Get information about all nodes.:
                  $ref: "#/components/examples/Get_information_about_all_nodes."
        "204":
          description: A 204 response is returned if the specified service type is not
            found in the cluster.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about a specific service type that is supported by
        a provisioned application type in a Service Fabric cluster.
      tags:
        - ServiceType
  "/ApplicationTypes/{applicationTypeName}/$/Unprovision":
    post:
      description: This operation can only be performed if all application instances of the
        application type have been deleted. Once the application type is
        unregistered, no new application instances can be created for this
        particular application type.
      operationId: UnprovisionApplicationType
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnprovisionApplicationTypeDescriptionInfo"
        description: The relative path for the application package in the image store
          specified during the prior copy operation.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful provision will return 200 status code.
        "202":
          description: A 202 status code indicates the operation was accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Removes or unregisters a Service Fabric application type from the
        cluster.
      tags:
        - ApplicationType
  /Applications:
    get:
      description: Gets the information about the applications that were created or in the
        process of being created in the Service Fabric cluster and match the
        specified filters. The response includes the name, type, status,
        parameters, and other details about the application. If the applications
        do not fit in a page, one page of results is returned as well as a
        continuation token, which can be used to get the next page. Filters
        ApplicationTypeName and ApplicationDefinitionKindFilter cannot be
        specified at the same time.
      operationId: GetApplicationInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-1_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationDefinitionKindFilterOptionalQue\
            ryParam"
        - $ref: "#/components/parameters/ApplicationTypeNameOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeApplicationParametersOptionalQueryP\
            aram"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of applications created in the cluster.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedApplicationInfoList"
              examples:
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of applications created in the Service Fabric cluster that
        match the specified filters.
      tags:
        - Application
  /Applications/$/Create:
    post:
      description: Creates a Service Fabric application using the specified description.
      operationId: CreateApplication
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationDescription"
        description: Description for creating an application.
        required: true
        x-ms-parameter-location: method
      responses:
        "201":
          description: A successful response means that the application creation has been
            started. Use GetApplication operation to get the status of the
            application. Once GetApplicationInfo successfully returns
            application information, the application is created. If the
            application has default services those may be in the process of
            being created. Use GetServiceInfo operation to get the status of the
            service within the application.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates a Service Fabric application.
      tags:
        - Application
  "/Applications/{applicationId}":
    get:
      description: Returns the information about the application that was created or in the
        process of being created in the Service Fabric cluster and whose name
        matches the one specified as the parameter. The response includes the
        name, type, status, parameters, and other details about the application.
      operationId: GetApplicationInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ExcludeApplicationParametersOptionalQueryP\
            aram"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationInfo"
              examples:
                Get a specific application by application id:
                  $ref: "#/components/examples/Get_a_specific_application_by_applic\
                    ation_id"
        "204":
          description: An empty response is returned if the specified applicationId is not
            found in the cluster.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets information about a Service Fabric application.
      tags:
        - Application
  "/Applications/{applicationId}/$/Delete":
    post:
      description: An application must be created before it can be deleted. Deleting an
        application will delete all services that are part of that application.
        By default, Service Fabric will try to close service replicas in a
        graceful manner and then delete the service. However, if a service is
        having issues closing the replica gracefully, the delete operation may
        take a long time or get stuck. Use the optional ForceRemove flag to skip
        the graceful close sequence and forcefully delete the application and
        all of its services.
      operationId: DeleteApplication
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ForceRemoveOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes an existing Service Fabric application.
      tags:
        - Application
  "/Applications/{applicationId}/$/DisableBackup":
    post:
      description: Disables periodic backup of Service Fabric application which was
        previously enabled.
      operationId: DisableApplicationBackup
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/DisableBackupDescription"
      responses:
        "202":
          description: A 202 status code indicates the request to disable application
            backup has been accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Disables periodic backup of Service Fabric application.
      tags:
        - BackupRestore
  "/Applications/{applicationId}/$/EnableBackup":
    post:
      description: >-
        Enables periodic backup of stateful partitions which are part of this
        Service Fabric application. Each partition is backed up individually as
        per the specified backup policy description. 

        Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
      operationId: EnableApplicationBackup
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/EnableBackupDescription"
      responses:
        "202":
          description: A 202 status code indicates the request to enable application backup
            has been accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Enables periodic backup of stateful partitions under this Service Fabric
        application.
      tags:
        - BackupRestore
  "/Applications/{applicationId}/$/GetBackupConfigurationInfo":
    get:
      description: Gets the Service Fabric backup configuration information for the
        application and the services and partitions under this application.
      operationId: GetApplicationBackupConfigurationInfo
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of backup configuration information for the application, and the
            services and partitions under this application, for which backup
            configuration has been overridden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupConfigurationInfoList"
              examples:
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Service Fabric application backup configuration information.
      tags:
        - BackupRestore
  "/Applications/{applicationId}/$/GetBackups":
    get:
      description: Returns a list of backups available for every partition in this Service
        Fabric application. The server enumerates all the backups available at
        the backup location configured in the backup policy. It also allows
        filtering of the result based on start and end datetime or just fetching
        the latest available backup for every partition.
      operationId: GetApplicationBackupList
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/LatestOptionalQueryParam"
        - $ref: "#/components/parameters/StartDateTimeFilterOptionalQueryParam"
        - $ref: "#/components/parameters/EndDateTimeFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of backup information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupInfoList"
              examples:
                Get application backups within a time range:
                  $ref: "#/components/examples/Get_application_backups_within_a_tim\
                    e_range"
                Get latest backup:
                  $ref: "#/components/examples/Get_latest_backup"
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of backups available for every partition in this
        application.
      tags:
        - BackupRestore
  "/Applications/{applicationId}/$/GetHealth":
    get:
      description: Returns the heath state of the service fabric application. The response
        reports either Ok, Error or Warning health state. If the entity is not
        found in the health store, it will return Error.
      operationId: GetApplicationHealth
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/DeployedApplicationsHealthStateFilterOptio\
            nalQueryParam"
        - $ref: "#/components/parameters/ServicesHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            application health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of the service fabric application.
      tags:
        - Application
    post:
      description: Gets the health of a Service Fabric application. Use
        EventsHealthStateFilter to filter the collection of health events
        reported on the node based on the health state. Use
        ClusterHealthPolicies to override the health policies used to evaluate
        the health.
      operationId: GetApplicationHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/DeployedApplicationsHealthStateFilterOptio\
            nalQueryParam"
        - $ref: "#/components/parameters/ServicesHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/ApplicationHealthPolicy"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            node health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric application using the specified
        policy.
      tags:
        - Application
  "/Applications/{applicationId}/$/GetLoadInformation":
    get:
      description: Returns the load information about the application that was created or
        in the process of being created in the Service Fabric cluster and whose
        name matches the one specified as the parameter. The response includes
        the name, minimum nodes, maximum nodes, the number of nodes the
        application is occupying currently, and application load metric
        information about the application.
      operationId: GetApplicationLoadInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the application load.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationLoadInfo"
        "204":
          description: An empty response is returned if the specified applicationId is not
            found in the cluster.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets load information about a Service Fabric application.
      tags:
        - Application
  "/Applications/{applicationId}/$/GetServices":
    get:
      description: Returns the information about all services belonging to the application
        specified by the application ID.
      operationId: GetServiceInfoList
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServiceTypeNameOptionalQueryParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of services in the cluster for the specified application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedServiceInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about all services belonging to the application
        specified by the application ID.
      tags:
        - Service
  "/Applications/{applicationId}/$/GetServices/$/Create":
    post:
      description: This api allows creating a new Service Fabric stateless or stateful
        service under a specified Service Fabric application. The description
        for creating the service includes partitioning information and optional
        properties for placement and load balancing. Some of the properties can
        later be modified using `UpdateService` API.
      operationId: CreateService
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceDescription"
        description: The information necessary to create a service.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A successful operation will return 202 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates the specified Service Fabric service.
      tags:
        - Service
  "/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate":
    post:
      description: Creates a Service Fabric service from the service template defined in
        the application manifest. A service template contains the properties
        that will be same for the service instance of the same type. The API
        allows overriding the properties that are usually different for
        different services of the same service type.
      operationId: CreateServiceFromTemplate
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceFromTemplateDescription"
        description: Describes the service that needs to be created from the template
          defined in the application manifest.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A successful operation will return 202 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates a Service Fabric service from the service template.
      tags:
        - Service
  "/Applications/{applicationId}/$/GetServices/{serviceId}":
    get:
      description: Returns the information about the specified service belonging to the
        specified Service Fabric application.
      operationId: GetServiceInfo
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the specified service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInfo"
        "204":
          description: An empty response is returned if the specified service is not part
            of the specified application.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about the specific service belonging to the Service
        Fabric application.
      tags:
        - Service
  "/Applications/{applicationId}/$/GetUpgradeProgress":
    get:
      description: Returns information about the state of the latest application upgrade
        along with details to aid debugging application health issues.
      operationId: GetApplicationUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: The application upgrade details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationUpgradeProgressInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets details for the latest upgrade performed on this application.
      tags:
        - Application
  "/Applications/{applicationId}/$/MoveToNextUpgradeDomain":
    post:
      description: Resumes an unmonitored manual Service Fabric application upgrade.
        Service Fabric upgrades one upgrade domain at a time. For unmonitored
        manual upgrades, after Service Fabric finishes an upgrade domain, it
        waits for you to call this API before proceeding to the next upgrade
        domain.
      operationId: ResumeApplicationUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResumeApplicationUpgradeDescription"
        description: Describes the parameters for resuming an application upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the application upgrade has been
            resumed in the specified upgrade domain. Use GetApplicationUpgrade
            operation to get the status of the upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Resumes upgrading an application in the Service Fabric cluster.
      tags:
        - Application
  "/Applications/{applicationId}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the specified Service Fabric application. The
        report must contain the information about the source of the health
        report and property on which it is reported.

        The report is sent to a Service Fabric gateway Application, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
      operationId: ReportApplicationHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric application.
      tags:
        - Application
  "/Applications/{applicationId}/$/ResumeBackup":
    post:
      description: The previously suspended Service Fabric application resumes taking
        periodic backup as per the backup policy currently configured for the
        same.
      operationId: ResumeApplicationBackup
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            application backup will be resumed.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Resumes periodic backup of a Service Fabric application which was
        previously suspended.
      tags:
        - BackupRestore
  "/Applications/{applicationId}/$/RollbackUpgrade":
    post:
      description: Starts rolling back the current application upgrade to the previous
        version. This API can only be used to roll back the current in-progress
        upgrade that is rolling forward to new version. If the application is
        not currently being upgraded use StartApplicationUpgrade API to upgrade
        it to desired version, including rolling back to a previous version.
      operationId: RollbackApplicationUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful response means that the application has started to roll
            back. Use GetApplicationUpgrade operation to get the status of the
            upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Starts rolling back the currently on-going upgrade of an application in
        the Service Fabric cluster.
      tags:
        - Application
  "/Applications/{applicationId}/$/SuspendBackup":
    post:
      description: The application which is configured to take periodic backups, is
        suspended for taking further backups till it is resumed again. This
        operation applies to the entire application's hierarchy. It means all
        the services and partitions under this application are now suspended for
        backup.
      operationId: SuspendApplicationBackup
      parameters:
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            application backup will be suspended.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Suspends periodic backup for the specified Service Fabric application.
      tags:
        - BackupRestore
  "/Applications/{applicationId}/$/UpdateUpgrade":
    post:
      description: Updates the parameters of an ongoing application upgrade from the ones
        specified at the time of starting the application upgrade. This may be
        required to mitigate stuck application upgrades due to incorrect
        parameters or issues in the application to make progress.
      operationId: UpdateApplicationUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpgradeUpdateDescription"
        description: Parameters for updating an existing application upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the application upgrade has updated
            with the specified parameters. Use GetApplicationUpgrade operation
            to get the status of the upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Updates an ongoing application upgrade in the Service Fabric cluster.
      tags:
        - Application
  "/Applications/{applicationId}/$/Upgrade":
    post:
      description: Validates the supplied application upgrade parameters and starts
        upgrading the application if the parameters are valid.
      operationId: StartApplicationUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpgradeDescription"
        description: Parameters for an application upgrade.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the application upgrade has
            started. Use GetApplicationUpgrade operation to get the status of
            the upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Starts upgrading an application in the Service Fabric cluster.
      tags:
        - Application
  /BackupRestore/$/GetBackups:
    post:
      description: Gets the list of backups available for the specified backed up entity
        (Application, Service or Partition) at the specified backup location
        (FileShare or Azure Blob Storage).
      operationId: GetBackupsFromBackupLocation
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetBackupByStorageQueryDescription"
        description: Describes the filters and backup storage details to be used for
          enumerating backups.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of backup information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupInfoList"
              examples:
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of backups available for the specified backed up entity at
        the specified backup location.
      tags:
        - BackupRestore
  /BackupRestore/BackupPolicies:
    get:
      description: Get a list of all the backup policies configured.
      operationId: GetBackupPolicyList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and paged list of
            backup policies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupPolicyDescriptionList"
              examples:
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all the backup policies configured.
      tags:
        - BackupRestore
  /BackupRestore/BackupPolicies/$/Create:
    post:
      description: Creates a backup policy which can be associated later with a Service
        Fabric application, service or a partition for periodic backup.
      operationId: CreateBackupPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/BackupPolicyDescription"
      responses:
        "201":
          description: A successful operation returns 201 status code and creates a new
            backup policy.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates a backup policy.
      tags:
        - BackupRestore
  "/BackupRestore/BackupPolicies/{backupPolicyName}":
    get:
      description: Gets a particular backup policy identified by {backupPolicyName}
      operationId: GetBackupPolicyByName
      parameters:
        - $ref: "#/components/parameters/BackupPolicyNameRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the backup
            policy description.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupPolicyDescription"
              examples:
                Get backup policy by name:
                  $ref: "#/components/examples/Get_backup_policy_by_name"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a particular backup policy by name.
      tags:
        - BackupRestore
  "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete":
    post:
      description: Deletes an existing backup policy. A backup policy must be created
        before it can be deleted. A currently active backup policy, associated
        with any Service Fabric application, service or partition, cannot be
        deleted without first deleting the mapping.
      operationId: DeleteBackupPolicy
      parameters:
        - $ref: "#/components/parameters/BackupPolicyNameRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation returns 200 status code and deletes the
            backup policy.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the backup policy.
      tags:
        - BackupRestore
  "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities":
    get:
      description: Returns a list of Service Fabric application, service or partition which
        are associated with this backup policy.
      operationId: GetAllEntitiesBackedUpByPolicy
      parameters:
        - $ref: "#/components/parameters/BackupPolicyNameRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of Service Fabric entities that are associated with this policy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupEntityList"
              examples:
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of backup entities that are associated with this policy.
      tags:
        - BackupRestore
  "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update":
    post:
      description: Updates the backup policy identified by {backupPolicyName}
      operationId: UpdateBackupPolicy
      parameters:
        - $ref: "#/components/parameters/BackupPolicyNameRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/BackupPolicyDescription"
      responses:
        "200":
          description: A successful operation returns 200 status code and updates the
            backup policy description.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Updates the backup policy.
      tags:
        - BackupRestore
  /ComposeDeployments:
    get:
      description: Gets the status about the compose deployments that were created or in
        the process of being created in the Service Fabric cluster. The response
        includes the name, status, and other details about the compose
        deployments. If the list of deployments do not fit in a page, one page
        of results is returned as well as a continuation token, which can be
        used to get the next page.
      operationId: GetComposeDeploymentStatusList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of status of compose deployments in the cluster.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedComposeDeploymentStatusInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of compose deployments created in the Service Fabric
        cluster.
      tags:
        - Compose Deployment
  /ComposeDeployments/$/Create:
    put:
      description: Compose is a file format that describes multi-container applications.
        This API allows deploying container based applications defined in
        compose format in a Service Fabric cluster. Once the deployment is
        created, its status can be tracked via the `GetComposeDeploymentStatus`
        API.
      operationId: CreateComposeDeployment
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateComposeDeploymentDescription"
        description: Describes the compose deployment that needs to be created.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A successful operation will return 202 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates a Service Fabric compose deployment.
      tags:
        - Compose Deployment
  "/ComposeDeployments/{deploymentName}":
    get:
      description: Returns the status of the compose deployment that was created or in the
        process of being created in the Service Fabric cluster and whose name
        matches the one specified as the parameter. The response includes the
        name, status, and other details about the deployment.
      operationId: GetComposeDeploymentStatus
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/DeploymentNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the compose deployment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComposeDeploymentStatusInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets information about a Service Fabric compose deployment.
      tags:
        - Compose Deployment
  "/ComposeDeployments/{deploymentName}/$/Delete":
    post:
      description: Deletes an existing Service Fabric compose deployment.
      operationId: RemoveComposeDeployment
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/DeploymentNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A successful operation will return 202 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes an existing Service Fabric compose deployment from cluster.
      tags:
        - Compose Deployment
  "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress":
    get:
      description: Returns the information about the state of the compose deployment
        upgrade along with details to aid debugging application health issues.
      operationId: GetComposeDeploymentUpgradeProgress
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/DeploymentNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Details about the compose deployment upgrade.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComposeDeploymentUpgradeProgressInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets details for the latest upgrade performed on this Service Fabric
        compose deployment.
      tags:
        - Compose Deployment
  "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade":
    post:
      description: Rollback a service fabric compose deployment upgrade.
      operationId: StartRollbackComposeDeploymentUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/DeploymentNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful response means that the rollback has started. Use
            GetComposeDeploymentUpgrade operation to get the status of the
            rollback.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Starts rolling back a compose deployment upgrade in the Service Fabric
        cluster.
      tags:
        - Compose Deployment
  "/ComposeDeployments/{deploymentName}/$/Upgrade":
    post:
      description: Validates the supplied upgrade parameters and starts upgrading the
        deployment if the parameters are valid.
      operationId: StartComposeDeploymentUpgrade
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/DeploymentNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComposeDeploymentUpgradeDescription"
        description: Parameters for upgrading compose deployment.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A successful response means that the upgrade has started. Use
            GetComposeDeploymentUpgrade operation to get the status of the
            upgrade.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Starts upgrading a compose deployment in the Service Fabric cluster.
      tags:
        - Compose Deployment
  /EventsStore/Applications/Events:
    get:
      description: The response is list of ApplicationEvent objects.
      operationId: GetApplicationsEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ApplicationEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationEventList"
              examples:
                Get Applications-related events:
                  $ref: "#/components/examples/Get_Applications-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Applications-related events.
      tags:
        - EventsStore
  "/EventsStore/Applications/{applicationId}/$/Events":
    get:
      description: The response is list of ApplicationEvent objects.
      operationId: GetApplicationEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ApplicationEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationEventList"
              examples:
                Get Application-related events:
                  $ref: "#/components/examples/Get_Application-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets an Application-related events.
      tags:
        - EventsStore
  /EventsStore/Cluster/Events:
    get:
      description: The response is list of ClusterEvent objects.
      operationId: GetClusterEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ClusterEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterEventList"
              examples:
                Get Cluster-related events:
                  $ref: "#/components/examples/Get_Cluster-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Cluster-related events.
      tags:
        - EventsStore
  /EventsStore/Containers/Events:
    get:
      description: The response is list of ContainerInstanceEvent objects.
      operationId: GetContainersEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ContainerInstanceEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInstanceEventList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Containers-related events.
      tags:
        - EventsStore
  "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events":
    get:
      description: The response is list of FabricEvents.
      operationId: GetCorrelatedEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/EventInstanceIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type FabricEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventList"
              examples:
                Get Correlated events:
                  $ref: "#/components/examples/Get_Correlated_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all correlated events for a given event.
      tags:
        - EventsStore
  /EventsStore/Nodes/Events:
    get:
      description: The response is list of NodeEvent objects.
      operationId: GetNodesEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type NodeEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEventList"
              examples:
                Get Nodes-related events:
                  $ref: "#/components/examples/Get_Nodes-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Nodes-related Events.
      tags:
        - EventsStore
  "/EventsStore/Nodes/{nodeName}/$/Events":
    get:
      description: The response is list of NodeEvent objects.
      operationId: GetNodeEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type NodeEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEventList"
              examples:
                Get Node-related events:
                  $ref: "#/components/examples/Get_Node-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a Node-related events.
      tags:
        - EventsStore
  /EventsStore/Partitions/Events:
    get:
      description: The response is list of PartitionEvent objects.
      operationId: GetPartitionsEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type PartitionEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionEventList"
              examples:
                Get Partitions-related events:
                  $ref: "#/components/examples/Get_Partitions-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Partitions-related events.
      tags:
        - EventsStore
  "/EventsStore/Partitions/{partitionId}/$/Events":
    get:
      description: The response is list of PartitionEvent objects.
      operationId: GetPartitionEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type PartitionEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionEventList"
              examples:
                Get Partition-related events:
                  $ref: "#/components/examples/Get_Partition-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a Partition-related events.
      tags:
        - EventsStore
  "/EventsStore/Partitions/{partitionId}/$/Replicas/Events":
    get:
      description: The response is list of ReplicaEvent objects.
      operationId: GetPartitionReplicasEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ReplicaEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaEventList"
              examples:
                Get Partition Replicas-related events:
                  $ref: "#/components/examples/Get_Partition_Replicas-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Replicas-related events for a Partition.
      tags:
        - EventsStore
  "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events":
    get:
      description: The response is list of ReplicaEvent objects.
      operationId: GetPartitionReplicaEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ReplicaEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaEventList"
              examples:
                Get Partition Replica-related events:
                  $ref: "#/components/examples/Get_Partition_Replica-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a Partition Replica-related events.
      tags:
        - EventsStore
  /EventsStore/Services/Events:
    get:
      description: The response is list of ServiceEvent objects.
      operationId: GetServicesEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ServiceEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceEventList"
              examples:
                Get Services-related events:
                  $ref: "#/components/examples/Get_Services-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets all Services-related events.
      tags:
        - EventsStore
  "/EventsStore/Services/{serviceId}/$/Events":
    get:
      description: The response is list of ServiceEvent objects.
      operationId: GetServiceEventList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcRequiredQueryParam"
        - $ref: "#/components/parameters/EventsTypesFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeAnalysisEventsOptionalQueryParam"
        - $ref: "#/components/parameters/SkipCorrelationLookupOptionalQueryParam"
      responses:
        "200":
          description: List of events objects with base type ServiceEvent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceEventList"
              examples:
                Get Service-related events:
                  $ref: "#/components/examples/Get_Service-related_events"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a Service-related events.
      tags:
        - EventsStore
  /Faults/:
    get:
      description: Gets the list of user-induced fault operations filtered by provided
        input.
      operationId: GetFaultOperationList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TypeFilterRequiredQueryParam"
        - $ref: "#/components/parameters/StateFilterRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationStatusList"
              examples:
                Gets information on fault operations:
                  $ref: "#/components/examples/Gets_information_on_fault_operations"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets a list of user-induced fault operations filtered by provided input.
      tags:
        - Faults
  /Faults/$/Cancel:
    post:
      description: >-
        The following APIs start fault operations that may be cancelled by using
        CancelOperation: StartDataLoss, StartQuorumLoss, StartPartitionRestart,
        StartNodeTransition.


        If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state

        may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already

        been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack.

        Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal system state caused by executing the command.  It will not restore data if the

        test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command.

        It will not restore the target partition's data, if the command progressed far enough to cause data loss.


        Important note:  if this API is invoked with force==true, internal state may be left behind.
      operationId: CancelOperation
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/ForceRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Cancels a user-induced fault operation.
      tags:
        - Faults
  "/Faults/Nodes/{nodeName}/$/GetTransitionProgress":
    get:
      description: Gets the progress of an operation started with StartNodeTransition using
        the provided OperationId.
      operationId: GetNodeTransitionProgress
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the progress of a node transition operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeTransitionProgress"
              examples:
                Gets information about a completed NodeTransition operation:
                  $ref: "#/components/examples/Gets_information_about_a_completed_N\
                    odeTransition_operation"
                Gets information about a running NodeTransition operation:
                  $ref: "#/components/examples/Gets_information_about_a_running_Nod\
                    eTransition_operation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the progress of an operation started using StartNodeTransition.
      tags:
        - Faults
  "/Faults/Nodes/{nodeName}/$/StartTransition/":
    post:
      description: >-
        Starts or stops a cluster node.  A cluster node is a process, not the OS
        instance itself.  To start a node, pass in "Start" for the
        NodeTransitionType parameter.

        To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet.

        Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
      operationId: StartNodeTransition
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/NodeTransitionTypeRequiredQueryParam"
        - $ref: "#/components/parameters/NodeInstanceIdRequiredQueryParam"
        - $ref: "#/components/parameters/StopDurationInSecondsRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation was accepted.  Call the
            GetNodeTransitionProgress API to get the progress.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Starts or stops a cluster node.
      tags:
        - Faults
  "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress":
    get:
      description: Gets the progress of a data loss operation started with StartDataLoss,
        using the OperationId.
      operationId: GetDataLossProgress
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the progress of the partition data loss operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionDataLossProgress"
              examples:
                Get information about a partition data loss operation.  In this case the operation is a State of Running:
                  $ref: "#/components/examples/Get_information_about_a_partition_da\
                    ta_loss_operation._In_this_case_the_operation_is_a_State_of\
                    _Running"
                Gets information about a partition data loss operation.  In this case the operation has a State of Completed:
                  $ref: "#/components/examples/Gets_information_about_a_partition_d\
                    ata_loss_operation._In_this_case_the_operation_has_a_State_\
                    of_Completed"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the progress of a partition data loss operation started using the
        StartDataLoss API.
      tags:
        - Faults
  "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress":
    get:
      description: Gets the progress of a quorum loss operation started with
        StartQuorumLoss, using the provided OperationId.
      operationId: GetQuorumLossProgress
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the progress of a partition quorum loss operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionQuorumLossProgress"
              examples:
                Gets information about a completed quorum loss operation:
                  $ref: "#/components/examples/Gets_information_about_a_completed_q\
                    uorum_loss_operation"
                Gets information about a running quorum operation operation:
                  $ref: "#/components/examples/Gets_information_about_a_running_quo\
                    rum_operation_operation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the progress of a quorum loss operation on a partition started
        using the StartQuorumLoss API.
      tags:
        - Faults
  "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress":
    get:
      description: Gets the progress of a PartitionRestart started with
        StartPartitionRestart using the provided OperationId.
      operationId: GetPartitionRestartProgress
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the progress of a partition restart operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionRestartProgress"
              examples:
                Get information a completed PartitionRestart operation:
                  $ref: "#/components/examples/Get_information_a_completed_Partitio\
                    nRestart_operation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the progress of a PartitionRestart operation started using
        StartPartitionRestart.
      tags:
        - Faults
  "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss":
    post:
      description: >-
        This API will induce data loss for the specified partition. It will
        trigger a call to the OnDataLoss API of the partition.

        Actual data loss will depend on the specified DataLossMode.


        - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication.

        - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.


        This API should only be called with a stateful service as the target.


        Calling this API with a system service as the target is not advised.


        Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state.

        It will not restore data if the command has progressed far enough to cause data loss.


        Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API.
      operationId: StartDataLoss
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/DataLossModeRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation was accepted.  Call the
            GetDataLossProgress API to get the progress.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: This API will induce data loss for the specified partition. It will
        trigger a call to the OnDataLossAsync API of the partition.
      tags:
        - Faults
  "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss":
    post:
      description: >-
        This API is useful for a temporary quorum loss situation on your
        service.


        Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.


        This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services.
      operationId: StartQuorumLoss
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/QuorumLossModeRequiredQueryParam"
        - $ref: "#/components/parameters/QuorumLossDurationRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation was accepted.  Call the
            GetQuorumLossProgress API to get the progress.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Induces quorum loss for a given stateful service partition.
      tags:
        - Faults
  "/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart":
    post:
      description: >-
        This API is useful for testing failover.


        If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.


        Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
      operationId: StartPartitionRestart
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/FaultOperationIdRequiredQueryParam"
        - $ref: "#/components/parameters/RestartPartitionModeRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation was accepted.  Call the
            GetPartitionRestartProgress API to get the progress.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: This API will restart some or all replicas or instances of the specified
        partition.
      tags:
        - Faults
  /ImageStore:
    get:
      description: Returns the information about the image store content at the root of the
        image store.
      operationId: GetImageStoreRootContent
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            image store content information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageStoreContent"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the content information at the root of the image store.
      tags:
        - ImageStore
  /ImageStore/$/CommitUploadSession:
    post:
      description: "When all file chunks have been uploaded, the upload session needs to be
        committed explicitly to complete the upload. Image store preserves the
        upload session until the expiration time, which is 30 minutes after the
        last chunk received. "
      operationId: CommitImageStoreUploadSession
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/UploadSessionIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: If the commit request succeeds, the server returns the HTTP 200 OK
            status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Commit an image store upload session.
      tags:
        - ImageStore
  /ImageStore/$/Copy:
    post:
      description: Copies the image store content from the source image store relative path
        to the destination image store relative path.
      operationId: CopyImageStoreContent
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageStoreCopyDescription"
        description: Describes the copy description for the image store.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Copies image store content internally
      tags:
        - ImageStore
  /ImageStore/$/DeleteUploadSession:
    delete:
      description: The DELETE request will cause the existing upload session to expire and
        remove any previously uploaded file chunks.
      operationId: DeleteImageStoreUploadSession
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/UploadSessionIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Cancels an image store upload session.
      tags:
        - ImageStore
  /ImageStore/$/FolderSize:
    get:
      description: Returns the total size of files at the root and children folders in
        image store.
      operationId: GetImageStoreRootFolderSize
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-5_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            folder size in image store.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderSizeInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the folder size at the root of the image store.
      tags:
        - ImageStore
  /ImageStore/$/GetUploadSession:
    get:
      description: "Gets the image store upload session identified by the given ID. User
        can query the upload session at any time during uploading. "
      operationId: GetImageStoreUploadSessionById
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/UploadSessionIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            image store upload session information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadSession"
              examples:
                Get information about image store upload session by a given ID:
                  $ref: "#/components/examples/Get_information_about_image_store_up\
                    load_session_by_a_given_ID"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the image store upload session by ID.
      tags:
        - ImageStore
  "/ImageStore/{contentPath}":
    delete:
      description: Deletes existing image store content being found within the given image
        store relative path. This command can be used to delete uploaded
        application packages once they are provisioned.
      operationId: DeleteImageStoreContent
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ImageStoreContentPathRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes existing image store content.
      tags:
        - ImageStore
    get:
      description: Returns the information about the image store content at the specified
        contentPath. The contentPath is relative to the root of the image store.
      operationId: GetImageStoreContent
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/ImageStoreContentPathRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            image store content information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageStoreContent"
              examples:
                Get information about image store content under a given relative path:
                  $ref: "#/components/examples/Get_information_about_image_store_co\
                    ntent_under_a_given_relative_path"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the image store content information.
      tags:
        - ImageStore
    put:
      description: Uploads contents of the file to the image store. Use this API if the
        file is small enough to upload again if the connection fails. The file's
        data needs to be added to the request body. The contents will be
        uploaded to the specified path. Image store service uses a mark file to
        indicate the availability of the folder. The mark file is an empty file
        named "_.dir". The mark file is generated by the image store service
        when all files in a folder are uploaded. When using File-by-File
        approach to upload application package in REST, the image store service
        isn't aware of the file hierarchy of the application package; you need
        to create a mark file per folder and upload it last, to let the image
        store service know that the folder is complete.
      operationId: UploadFile
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ImageStoreContentPathRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: If the upload request succeeds, the server returns the HTTP 200 OK
            status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Uploads contents of the file to the image store.
      tags:
        - ImageStore
  "/ImageStore/{contentPath}/$/FolderSize":
    get:
      description: Gets the total size of file under a image store folder, specified by
        contentPath. The contentPath is relative to the root of the image store.
      operationId: GetImageStoreFolderSize
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-5_RequiredQueryParam"
        - $ref: "#/components/parameters/ImageStoreContentPathRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            folder size in image store.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderSizeInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the size of a folder in image store
      tags:
        - ImageStore
  "/ImageStore/{contentPath}/$/GetUploadSession":
    get:
      description: "Gets the image store upload session associated with the given image
        store relative path. User can query the upload session at any time
        during uploading. "
      operationId: GetImageStoreUploadSessionByPath
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ImageStoreContentPathRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            image store upload session information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadSession"
              examples:
                Get information about image store upload session by a given relative path:
                  $ref: "#/components/examples/Get_information_about_image_store_up\
                    load_session_by_a_given_relative_path"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the image store upload session by relative path.
      tags:
        - ImageStore
  "/ImageStore/{contentPath}/$/UploadChunk":
    put:
      description: >-
        Uploads a file chunk to the image store with the specified upload
        session ID and image store relative path. This API allows user to resume
        the file upload operation. user doesn't have to restart the file upload
        from scratch whenever there is a network interruption. Use this option
        if the file size is large.


        To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
      operationId: UploadFileChunk
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ImageStoreContentPathRequiredPathParam"
        - $ref: "#/components/parameters/UploadSessionIdRequiredQueryParam"
        - $ref: "#/components/parameters/UploadFileChunkContentRangeHeaderParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return the HTTP 200 OK status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Uploads a file chunk to the image store relative path.
      tags:
        - ImageStore
  /Names/$/Create:
    post:
      description: Creates the specified Service Fabric name.
      operationId: CreateName
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NameDescription"
        description: Describes the Service Fabric name to be created.
        required: true
        x-ms-parameter-location: method
      responses:
        "201":
          description: A successful response means that the name has been created.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates a Service Fabric name.
      tags:
        - Property Management
  "/Names/{nameId}":
    delete:
      description: Deletes the specified Service Fabric name. A name must be created before
        it can be deleted. Deleting a name with child properties will fail.
      operationId: DeleteName
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful response means that the Service Fabric name has been
            deleted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes a Service Fabric name.
      tags:
        - Property Management
    get:
      description: Returns whether the specified Service Fabric name exists.
      operationId: GetNameExistsInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful response means that the Service Fabric name exists.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Returns whether the Service Fabric name exists.
      tags:
        - Property Management
  "/Names/{nameId}/$/GetProperties":
    get:
      description: A Service Fabric name can have one or more named properties that store
        custom information. This operation gets the information about these
        properties in a paged list. The information includes name, value, and
        metadata about each of the properties.
      operationId: GetPropertyInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/IncludeValuesOptionalQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A paged list of Service Fabric properties.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedPropertyInfoList"
              examples:
                Get property info list:
                  $ref: "#/components/examples/Get_property_info_list"
                Get property info list with values:
                  $ref: "#/components/examples/Get_property_info_list_with_values"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets information on all Service Fabric properties under a given name.
      tags:
        - Property Management
  "/Names/{nameId}/$/GetProperties/$/SubmitBatch":
    post:
      description: Submits a batch of property operations. Either all or none of the
        operations will be committed.
      operationId: SubmitPropertyBatch
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyBatchDescriptionList"
        description: Describes the property batch operations to be submitted.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the property batch succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfulPropertyBatchInfo"
              examples:
                Property batch operation:
                  $ref: "#/components/examples/Property_batch_operation"
        "409":
          description: A 409 response means that one of the property batch operations
            failed, and contains more information about the failure. None of the
            operations were committed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedPropertyBatchInfo"
              examples:
                Property batch operation:
                  $ref: "#/components/examples/Property_batch_operation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Submits a property batch.
      tags:
        - Property Management
  "/Names/{nameId}/$/GetProperty":
    delete:
      description: Deletes the specified Service Fabric property under a given name. A
        property must be created before it can be deleted.
      operationId: DeleteProperty
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/PropertyNameRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful response means that the property has been deleted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the specified Service Fabric property.
      tags:
        - Property Management
    get:
      description: Gets the specified Service Fabric property under a given name. This will
        always return both value and metadata.
      operationId: GetPropertyInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/PropertyNameRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Details on the Service Fabric property.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyInfo"
              examples:
                Get property info:
                  $ref: "#/components/examples/Get_property_info"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the specified Service Fabric property.
      tags:
        - Property Management
    put:
      description: Creates or updates the specified Service Fabric property under a given
        name.
      operationId: PutProperty
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyDescription"
        description: Describes the Service Fabric property to be created.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful response means that the property has been created or
            updated.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates or updates a Service Fabric property.
      tags:
        - Property Management
  "/Names/{nameId}/$/GetSubNames":
    get:
      description: Enumerates all the Service Fabric names under a given name. If the
        subnames do not fit in a page, one page of results is returned as well
        as a continuation token, which can be used to get the next page.
        Querying a name that doesn't exist will fail.
      operationId: GetSubNameInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NameIdRequiredPathParam"
        - $ref: "#/components/parameters/RecursiveOptionalQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A paged list of Service Fabric names.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedSubNameInfoList"
              examples:
                Get sub names:
                  $ref: "#/components/examples/Get_sub_names"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
                Recursively search sub names:
                  $ref: "#/components/examples/Recursively_search_sub_names"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Enumerates all the Service Fabric names under a given name.
      tags:
        - Property Management
  /Nodes:
    get:
      description: The response includes the name, status, ID, health, uptime, and other
        details about the nodes.
      operationId: GetNodeInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-3_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/NodeStatusFilterOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of nodes in the cluster.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedNodeInfoList"
              examples:
                Get information about all nodes:
                  $ref: "#/components/examples/Get_information_about_all_nodes"
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of nodes in the Service Fabric cluster.
      tags:
        - Node
  "/Nodes/{nodeName}":
    get:
      description: The response includes the name, status, ID, health, uptime, and other
        details about the node.
      operationId: GetNodeInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return information about the node with
            the specified nodeName.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeInfo"
              examples:
                Get a specific node by node name:
                  $ref: "#/components/examples/Get_a_specific_node_by_node_name"
        "204":
          description: An empty response is returned if the specified nodeName is not found.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about a specific node in the Service Fabric cluster.
      tags:
        - Node
  "/Nodes/{nodeName}/$/Activate":
    post:
      description: Activates a Service Fabric cluster node that is currently deactivated.
        Once activated, the node will again become a viable target for placing
        new replicas, and any deactivated replicas remaining on the node will be
        reactivated.
      operationId: EnableNode
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Activate a Service Fabric cluster node that is currently deactivated.
      tags:
        - Node
  "/Nodes/{nodeName}/$/Deactivate":
    post:
      description: Deactivate a Service Fabric cluster node with the specified deactivation
        intent. Once the deactivation is in progress, the deactivation intent
        can be increased, but not decreased (for example, a node that is
        deactivated with the Pause intent can be deactivated further with
        Restart, but not the other way around. Nodes may be reactivated using
        the Activate a node operation any time after they are deactivated. If
        the deactivation is not complete, this will cancel the deactivation. A
        node that goes down and comes back up while deactivated will still need
        to be reactivated before services will be placed on that node.
      operationId: DisableNode
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeactivationIntentDescription"
        description: Describes the intent or reason for deactivating the node.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deactivate a Service Fabric cluster node with the specified deactivation
        intent.
      tags:
        - Node
  "/Nodes/{nodeName}/$/DeployServicePackage":
    post:
      description: This API provides a way to download code packages including the
        container images on a specific node outside of the normal application
        deployment and upgrade path. This is useful for the large code packages
        and container images to be present on the node before the actual
        application deployment and upgrade, thus significantly reducing the
        total time required for the deployment or upgrade.
      operationId: DeployServicePackageToNode
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeployServicePackageToNodeDescription"
        description: Describes information for deploying a service package to a Service
          Fabric node.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Downloads all of the code packages associated with specified service
        manifest on the specified node.
      tags:
        - Service Package
  "/Nodes/{nodeName}/$/GetApplications":
    get:
      description: Gets the list of applications deployed on a Service Fabric node. The
        results do not include information about deployed system applications
        unless explicitly queried for by ID. Results encompass deployed
        applications in active, activating, and downloading states. This query
        requires that the node name corresponds to a node on the cluster. The
        query fails if the provided node name does not point to any active
        Service Fabric nodes on the cluster.
      operationId: GetDeployedApplicationInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-1_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/IncludeHealthStateOptionalQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed application information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedDeployedApplicationInfoList"
              examples:
                Include health state in the result:
                  $ref: "#/components/examples/Include_health_state_in_the_result"
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of applications deployed on a Service Fabric node.
      tags:
        - Application
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}":
    get:
      description: This query returns system application information if the application ID
        provided is for system application. Results encompass deployed
        applications in active, activating, and downloading states. This query
        requires that the node name corresponds to a node on the cluster. The
        query fails if the provided node name does not point to any active
        Service Fabric nodes on the cluster.
      operationId: GetDeployedApplicationInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-1_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/IncludeHealthStateOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the
            information about the deployed application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedApplicationInfo"
              examples:
                Get a specific deployed application by application ID and include the health state in the result:
                  $ref: "#/components/examples/Get_a_specific_deployed_application_\
                    by_application_ID_and_include_the_health_state_in_the_resul\
                    t"
        "204":
          description: An empty response is returned if the specified application is not
            deployed on the node.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about an application deployed on a Service Fabric
        node.
      tags:
        - Application
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages":
    get:
      description: Gets the list of code packages deployed on a Service Fabric node for the
        given application.
      operationId: GetDeployedCodePackageInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServiceManifestNameOptionalQueryParam"
        - $ref: "#/components/parameters/CodePackageNameOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed code packages information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedCodePackageInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of code packages deployed on a Service Fabric node.
      tags:
        - Code Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi":
    post:
      description: Invoke container API on a container deployed on a Service Fabric node
        for the given code package.
      operationId: InvokeContainerApi
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServiceManifestNameRequiredQueryParam"
        - $ref: "#/components/parameters/CodePackageNameRequiredQueryParam"
        - $ref: "#/components/parameters/CodePackageInstanceIdRequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContainerApiRequestBody"
        description: Parameters for making container API call
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code and container API
            response for a container deployed on a Service Fabric node for the
            given code package.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerApiResponse"
              examples:
                Get container logs:
                  $ref: "#/components/examples/Get_container_logs"
                Update container:
                  $ref: "#/components/examples/Update_container"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Invoke container API on a container deployed on a Service Fabric node.
      tags:
        - Code Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs":
    get:
      description: Gets the container logs for container deployed on a Service Fabric node
        for the given code package.
      operationId: GetContainerLogsDeployedOnNode
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServiceManifestNameRequiredQueryParam"
        - $ref: "#/components/parameters/CodePackageNameRequiredQueryParam"
        - $ref: "#/components/parameters/TailOptionalQueryParam"
        - $ref: "#/components/parameters/PreviousOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the container
            logs for container deployed on a Service Fabric node for the given
            code package.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerLogs"
              examples:
                Get container logs for given code package:
                  $ref: "#/components/examples/Get_container_logs_for_given_code_pa\
                    ckage"
                Get container logs of previous dead container for given code package:
                  $ref: "#/components/examples/Get_container_logs_of_previous_dead_\
                    container_for_given_code_package"
                Get last 10 lines of container logs:
                  $ref: "#/components/examples/Get_last_10_lines_of_container_logs"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the container logs for container deployed on a Service Fabric node.
      tags:
        - Code Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart":
    post:
      description: Restarts a code package deployed on a Service Fabric node in a cluster.
        This aborts the code package process, which will restart all the user
        service replicas hosted in that process.
      operationId: RestartDeployedCodePackage
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestartDeployedCodePackageDescription"
        description: Describes the deployed code package on Service Fabric node to restart.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Restarts a code package deployed on a Service Fabric node in a cluster.
      tags:
        - Code Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth":
    get:
      description: Gets the information about health of an application deployed on a
        Service Fabric node. Use EventsHealthStateFilter to optionally filter
        for the collection of HealthEvent objects reported on the deployed
        application based on health state. Use
        DeployedServicePackagesHealthStateFilter to optionally filter for
        DeployedServicePackageHealth children based on health state.
      operationId: GetDeployedApplicationHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/DeployedServicePackagesHealthStateFilterOp\
            tionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information of the deployed application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedApplicationHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about health of an application deployed on a
        Service Fabric node.
      tags:
        - Application
    post:
      description: Gets the information about health of an application deployed on a
        Service Fabric node using the specified policy. Use
        EventsHealthStateFilter to optionally filter for the collection of
        HealthEvent objects reported on the deployed application based on health
        state. Use DeployedServicePackagesHealthStateFilter to optionally filter
        for DeployedServicePackageHealth children based on health state. Use
        ApplicationHealthPolicy to optionally override the health policies used
        to evaluate the health. This API only uses 'ConsiderWarningAsError'
        field of the ApplicationHealthPolicy. The rest of the fields are ignored
        while evaluating the health of the deployed application.
      operationId: GetDeployedApplicationHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/DeployedServicePackagesHealthStateFilterOp\
            tionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/ApplicationHealthPolicy"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information of the deployed application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedApplicationHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about health of an application deployed on a
        Service Fabric node. using the specified policy.
      tags:
        - Application
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas":
    get:
      description: Gets the list containing the information about replicas deployed on a
        Service Fabric node. The information include partition ID, replica ID,
        status of the replica, name of the service, name of the service type,
        and other information. Use PartitionId or ServiceManifestName query
        parameters to return information about the deployed replicas matching
        the specified values for those parameters.
      operationId: GetDeployedServiceReplicaInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdOptionalQueryParam"
        - $ref: "#/components/parameters/ServiceManifestNameOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed service replica information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServiceReplicaInfoList"
        "204":
          description: An empty response is returned if the specified applicationId is not
            found on the specified node. An empty response is also returned if
            there are no replicas matching the specified filter values for
            PartitionId or ServiceManifestName query parameters.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of replicas deployed on a Service Fabric node.
      tags:
        - Replica
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages":
    get:
      description: Returns the information about the service packages deployed on a Service
        Fabric node for the given application.
      operationId: GetDeployedServicePackageInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed service packages information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServicePackageInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of service packages deployed on a Service Fabric node.
      tags:
        - Service Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}":
    get:
      description: Returns the information about the service packages deployed on a Service
        Fabric node for the given application. These results are of service
        packages whose name match exactly the service package name specified as
        the parameter.
      operationId: GetDeployedServicePackageInfoListByName
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServicePackageNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed service packages information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServicePackageInfoList"
        "204":
          description: An empty response is returned if the specified service package from
            the application is not deployed on the node.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of service packages deployed on a Service Fabric node
        matching exactly the specified name.
      tags:
        - Service Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth":
    get:
      description: Gets the information about health of a service package for a specific
        application deployed on a Service Fabric node. Use
        EventsHealthStateFilter to optionally filter for the collection of
        HealthEvent objects reported on the deployed service package based on
        health state.
      operationId: GetDeployedServicePackageHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServicePackageNameRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information of the deployed service package for a specific node and
            application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServicePackageHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about health of a service package for a specific
        application deployed for a Service Fabric node and application.
      tags:
        - Service Package
    post:
      description: Gets the information about health of a service package for a specific
        application deployed on a Service Fabric node. using the specified
        policy. Use EventsHealthStateFilter to optionally filter for the
        collection of HealthEvent objects reported on the deployed service
        package based on health state. Use ApplicationHealthPolicy to optionally
        override the health policies used to evaluate the health. This API only
        uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The
        rest of the fields are ignored while evaluating the health of the
        deployed service package.
      operationId: GetDeployedServicePackageHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServicePackageNameRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/ApplicationHealthPolicy"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information of the deployed service package for a specific node and
            application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServicePackageHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about health of service package for a specific
        application deployed on a Service Fabric node using the specified
        policy.
      tags:
        - Service Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the service package of the application deployed
        on a Service Fabric node. The report must contain the information about
        the source of the health report and property on which it is reported.

        The report is sent to a Service Fabric gateway Service, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
      operationId: ReportDeployedServicePackageHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServicePackageNameRequiredPathParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric deployed service package.
      tags:
        - Service Package
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes":
    get:
      description: Gets the list containing the information about service types from the
        applications deployed on a node in a Service Fabric cluster. The
        response includes the name of the service type, its registration status,
        the code package that registered it and activation ID of the service
        package.
      operationId: GetDeployedServiceTypeInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/DeployedServiceType_ServiceManifestNameOpt\
            ionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of information about service types of an application deployed
            on a node.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServiceTypeInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list containing the information about service types from the
        applications deployed on a node in a Service Fabric cluster.
      tags:
        - ServiceType
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}":
    get:
      description: Gets the list containing the information about a specific service type
        from the applications deployed on a node in a Service Fabric cluster.
        The response includes the name of the service type, its registration
        status, the code package that registered it and activation ID of the
        service package. Each entry represents one activation of a service type,
        differentiated by the activation ID.
      operationId: GetDeployedServiceTypeInfoByName
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ServiceTypeNameRequiredPathParam"
        - $ref: "#/components/parameters/DeployedServiceType_ServiceManifestNameOpt\
            ionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about service types of an application deployed on a node.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServiceTypeInfoList"
        "204":
          description: An empty response is returned if the specified service type of the
            application is not deployed on the node.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about a specified service type of the application
        deployed on a node in a Service Fabric cluster.
      tags:
        - ServiceType
  "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the application deployed on a Service Fabric
        node. The report must contain the information about the source of the
        health report and property on which it is reported.

        The report is sent to a Service Fabric gateway Service, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
      operationId: ReportDeployedApplicationHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ApplicationIdRequiredPathParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric application deployed on a
        Service Fabric node.
      tags:
        - Application
  "/Nodes/{nodeName}/$/GetHealth":
    get:
      description: Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
        filter the collection of health events reported on the node based on the
        health state. If the node that you specify by name does not exist in the
        health store, this returns an error.
      operationId: GetNodeHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            node health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric node.
      tags:
        - Node
    post:
      description: Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
        filter the collection of health events reported on the node based on the
        health state. Use ClusterHealthPolicy in the POST body to override the
        health policies used to evaluate the health. If the node that you
        specify by name does not exist in the health store, this returns an
        error.
      operationId: GetNodeHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterHealthPolicy"
        description: Describes the health policies used to evaluate the health of a cluster
          or node. If not present, the health evaluation uses the health policy
          from cluster manifest or the default health policy.
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            node health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric node, by using the specified health
        policy.
      tags:
        - Node
  "/Nodes/{nodeName}/$/GetLoadInformation":
    get:
      description: Retrieves the load information of a Service Fabric node for all the
        metrics that have load or capacity defined.
      operationId: GetNodeLoadInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            node load information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeLoadInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the load information of a Service Fabric node.
      tags:
        - Node
  "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas":
    get:
      description: Gets the details of the replica deployed on a Service Fabric node. The
        information includes service kind, service name, current service
        operation, current service operation start date time, partition ID,
        replica/instance ID, reported load, and other information.
      operationId: GetDeployedServiceReplicaDetailInfoByPartitionId
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed service replica information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServiceReplicaDetailInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the details of replica deployed on a Service Fabric node.
      tags:
        - Replica
  "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete":
    post:
      description: This API simulates a Service Fabric replica failure by removing a
        replica from a Service Fabric cluster. The removal closes the replica,
        transitions the replica to the role None, and then removes all of the
        state information of the replica from the cluster. This API tests the
        replica state removal path, and simulates the report fault permanent
        path through client APIs. Warning - There are no safety checks performed
        when this API is used. Incorrect use of this API can lead to data loss
        for stateful services. In addition, the forceRemove flag impacts all
        other replicas hosted in the same process.
      operationId: RemoveReplica
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/ForceRemoveReplicaOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code. A successful
            operation means that the restart command was received by the replica
            on the node and it is in the process of restarting.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Removes a service replica running on a node.
      tags:
        - Replica
  "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail":
    get:
      description: Gets the details of the replica deployed on a Service Fabric node. The
        information includes service kind, service name, current service
        operation, current service operation start date time, partition ID,
        replica/instance ID, reported load, and other information.
      operationId: GetDeployedServiceReplicaDetailInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the list of
            deployed service replica information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedServiceReplicaDetailInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the details of replica deployed on a Service Fabric node.
      tags:
        - Replica
  "/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart":
    post:
      description: Restarts a service replica of a persisted service running on a node.
        Warning - There are no safety checks performed when this API is used.
        Incorrect use of this API can lead to availability loss for stateful
        services.
      operationId: RestartReplica
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code. A successful
            operation means that the restart command was received by the replica
            on the node and it is in the process of restarting.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Restarts a service replica of a persisted service running on a node.
      tags:
        - Replica
  "/Nodes/{nodeName}/$/RemoveNodeState":
    post:
      description: This implies that it is not possible to recover the persisted state of
        that node. This generally happens if a hard disk has been wiped clean,
        or if a hard disk crashes. The node has to be down for this operation to
        be successful. This operation lets Service Fabric know that the replicas
        on that node no longer exist, and that Service Fabric should stop
        waiting for those replicas to come back up. Do not run this cmdlet if
        the state on the node has not been removed and the node can come back up
        with its state intact. Starting from Service Fabric 6.5, in order to use
        this API for seed nodes, please change the seed nodes to regular
        (non-seed) nodes and then invoke this API to remove the node state. If
        the cluster is running on Azure, after the seed node goes down, Service
        Fabric will try to change it to a non-seed node automatically. To make
        this happen, make sure the number of non-seed nodes in the primary node
        type is no less than the number of Down seed nodes. If necessary, add
        more nodes to the primary node type to achieve this. For standalone
        cluster, if the Down seed node is not expected to come back up with its
        state intact, please remove the node from the cluster, see
        https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
      operationId: RemoveNodeState
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Notifies Service Fabric that the persisted state on a node has been
        permanently removed or lost.
      tags:
        - Node
  "/Nodes/{nodeName}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the specified Service Fabric node. The report
        must contain the information about the source of the health report and
        property on which it is reported.

        The report is sent to a Service Fabric gateway node, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
      operationId: ReportNodeHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric node.
      tags:
        - Node
  "/Nodes/{nodeName}/$/Restart":
    post:
      description: Restarts a Service Fabric cluster node that is already started.
      operationId: RestartNode
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/NodeNameRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestartNodeDescription"
        description: The instance of the node to be restarted and a flag indicating the
          need to take dump of the fabric process.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code. A successful
            operation means that the restart command was received by the node
            and it is in the process of restarting. Check the status of the node
            by calling GetNode operation.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Restarts a Service Fabric cluster node.
      tags:
        - Node
  "/Partitions/{partitionId}":
    get:
      description: Gets the information about the specified partition. The response
        includes the partition ID, partitioning scheme information, keys
        supported by the partition, status, health, and other details about the
        partition.
      operationId: GetPartitionInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the specified partition.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePartitionInfo"
        "204":
          description: An empty response is returned if the specified partitionId is not
            found in the cluster.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about a Service Fabric partition.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/Backup":
    post:
      description: >-
        Creates a backup of the stateful persisted partition's state. In case
        the partition is already being periodically backed up, then by default
        the new backup is created at the same backup storage. One can also
        override the same by specifying the backup storage details as part of
        the request body. Once the backup is initiated, its progress can be
        tracked using the GetBackupProgress operation. 

        In case, the operation times out, specify a greater backup timeout value in the query parameter.
      operationId: BackupPartition
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/BackupTimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupPartitionDescription"
        description: Describes the parameters to backup the partition now. If not present,
          backup operation uses default parameters from the backup policy
          current associated with this partition.
        x-ms-parameter-location: method
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            backup will be initiated. Use GetPartitionBackupProgress operation
            to get the status of the backup operation.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Triggers backup of the partition's state.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/DisableBackup":
    post:
      description: >-
        Disables periodic backup of partition which was previously enabled.
        Backup must be explicitly enabled before it can be disabled. 

        In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
      operationId: DisablePartitionBackup
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/DisableBackupDescription"
      responses:
        "202":
          description: A 202 status code indicates the request to disable partition backup
            has been accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Disables periodic backup of Service Fabric partition which was
        previously enabled.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/EnableBackup":
    post:
      description: >-
        Enables periodic backup of stateful persisted partition. Each partition
        is backed up as per the specified backup policy description. In case the
        application or service, which is partition is part of, is already
        enabled for backup then this operation would override the policy being
        used to take the periodic backup of this partition.

        Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
      operationId: EnablePartitionBackup
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/EnableBackupDescription"
      responses:
        "202":
          description: A 202 status code indicates the request to enable partition backup
            has been accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Enables periodic backup of the stateful persisted partition.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/GetBackupConfigurationInfo":
    get:
      description: Gets the Service Fabric Backup configuration information for the
        specified partition.
      operationId: GetPartitionBackupConfigurationInfo
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and gets the
            partition's backup configuration information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionBackupConfigurationInfo"
              examples:
                Get partition backup configuration information:
                  $ref: "#/components/examples/Get_partition_backup_configuration_i\
                    nformation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the partition backup configuration information
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/GetBackupProgress":
    get:
      description: Returns information about the state of the latest backup along with
        details or failure reason in case of completion.
      operationId: GetPartitionBackupProgress
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation returns 200 status code and backup progress
            details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupProgressInfo"
              examples:
                Get backup operation progress:
                  $ref: "#/components/examples/Get_backup_operation_progress"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets details for the latest backup triggered for this partition.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/GetBackups":
    get:
      description: Returns a list of backups available for the specified partition. The
        server enumerates all the backups available in the backup store
        configured in the backup policy. It also allows filtering of the result
        based on start and end datetime or just fetching the latest available
        backup for the partition.
      operationId: GetPartitionBackupList
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/LatestOptionalQueryParam"
        - $ref: "#/components/parameters/StartDateTimeFilterOptionalQueryParam"
        - $ref: "#/components/parameters/EndDateTimeFilterOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of backup information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupInfoList"
              examples:
                Get application backups within a time range:
                  $ref: "#/components/examples/Get_application_backups_within_a_tim\
                    e_range"
                Get latest backup:
                  $ref: "#/components/examples/Get_latest_backup"
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of backups available for the specified partition.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/GetHealth":
    get:
      description: >-
        Use EventsHealthStateFilter to filter the collection of health events
        reported on the service based on the health state.

        Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition.

        If you specify a partition that does not exist in the health store, this request returns an error.
      operationId: GetPartitionHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ReplicasHealthStateFilerOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information about the specified partition.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of the specified Service Fabric partition.
      tags:
        - Partition
    post:
      description: >-
        Gets the health information of the specified partition.

        If the application health policy is specified, the health evaluation uses it to get the aggregated health state.

        If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.

        Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state.

        Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health.

        If you specify a partition that does not exist in the health store, this request returns an error.
      operationId: GetPartitionHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ReplicasHealthStateFilerOptionalQueryParam"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/ApplicationHealthPolicy"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information about the specified partition.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of the specified Service Fabric partition, by using the
        specified health policy.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/GetLoadInformation":
    get:
      description: >-
        Returns information about the load of a specified partition.

        The response includes a list of load reports for a Service Fabric partition.

        Each report includes the load metric name, value, and last reported time in UTC.
      operationId: GetPartitionLoadInformation
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the specified partition's last reported load
            metrics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartitionLoadInformation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the load information of the specified Service Fabric partition.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/GetReplicas":
    get:
      description: The GetReplicas endpoint returns information about the replicas of the
        specified partition. The response includes the ID, role, status, health,
        node name, uptime, and other details about the replica.
      operationId: GetReplicaInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the replicas of the specified partition.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedReplicaInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about replicas of a Service Fabric service
        partition.
      tags:
        - Replica
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}":
    get:
      description: The response includes the ID, role, status, health, node name, uptime,
        and other details about the replica.
      operationId: GetReplicaInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the specified replicas of the specified partition
            of a Service Fabric service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaInfo"
        "204":
          description: An empty response is returned if the specified replicaId is not a
            replica of the specified partition.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about a replica of a Service Fabric partition.
      tags:
        - Replica
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth":
    get:
      description: >-
        Gets the health of a Service Fabric replica.

        Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
      operationId: GetReplicaHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            replica health.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric stateful service replica or
        stateless service instance.
      tags:
        - Replica
    post:
      description: >-
        Gets the health of a Service Fabric stateful service replica or
        stateless service instance.

        Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state.

        Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
      operationId: GetReplicaHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/ApplicationHealthPolicy"
      responses:
        "200":
          description: A successful operation will return 200 status code and the requested
            replica health information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplicaHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of a Service Fabric stateful service replica or
        stateless service instance using the specified policy.
      tags:
        - Replica
  "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the specified Service Fabric replica. The report
        must contain the information about the source of the health report and
        property on which it is reported.

        The report is sent to a Service Fabric gateway Replica, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
      operationId: ReportReplicaHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaIdRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaHealthReportServiceKindRequiredQuer\
            yParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric replica.
      tags:
        - Replica
  "/Partitions/{partitionId}/$/GetRestoreProgress":
    get:
      description: Returns information about the state of the latest restore operation
        along with details or failure reason in case of completion.
      operationId: GetPartitionRestoreProgress
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation returns 200 status code and restore progress
            details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestoreProgressInfo"
              examples:
                Get restore operation progress:
                  $ref: "#/components/examples/Get_restore_operation_progress"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets details for the latest restore operation triggered for this
        partition.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/GetServiceName":
    get:
      description: Gets name of the service for the specified partition. A 404 error is
        returned if the partition ID does not exist in the cluster.
      operationId: GetServiceNameInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the name of the service for the specified
            partition.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceNameInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the name of the Service Fabric service for a partition.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/MovePrimaryReplica":
    post:
      description: >-
        This command moves the primary replica of a partition of a stateful
        service, respecting all constraints.

        If NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it).

        If NodeName parameter is not specified, primary replica will be moved to a random node in the cluster.

        If IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the constraints.
      operationId: MovePrimaryReplica
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-5_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/NodeNameOptionalParam"
        - $ref: "#/components/parameters/IgnoreConstraintsOptionalParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Moves the primary replica of a partition of a stateful service.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/MoveSecondaryReplica":
    post:
      description: >-
        This command moves the secondary replica of a partition of a stateful
        service, respecting all constraints.

        CurrentNodeName parameter must be specified to identify the replica that is moved.

        Source node name must be specified, but new node name can be omitted, and in that case replica is moved to a random node.

        If IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the constraints.
      operationId: MoveSecondaryReplica
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-5_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/CurrentNodeNameRequiredParam"
        - $ref: "#/components/parameters/NewNodeNameOptionalParam"
        - $ref: "#/components/parameters/IgnoreConstraintsOptionalParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Moves the secondary replica of a partition of a stateful service.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/Recover":
    post:
      description: This operation should only be performed if it is known that the replicas
        that are down cannot be recovered. Incorrect use of this API can cause
        potential data loss.
      operationId: RecoverPartition
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Indicates to the Service Fabric cluster that it should attempt to
        recover a specific partition that is currently stuck in quorum loss.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the specified Service Fabric partition. The
        report must contain the information about the source of the health
        report and property on which it is reported.

        The report is sent to a Service Fabric gateway Partition, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section.
      operationId: ReportPartitionHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric partition.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/ResetLoad":
    post:
      description: Resets the current load of a Service Fabric partition to the default
        load for the service.
      operationId: ResetPartitionLoad
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Resets the current load of a Service Fabric partition.
      tags:
        - Partition
  "/Partitions/{partitionId}/$/Restore":
    post:
      description: >-
        Restores the state of a of the stateful persisted partition using the
        specified backup point. In case the partition is already being
        periodically backed up, then by default the backup point is looked for
        in the storage specified in backup policy. One can also override the
        same by specifying the backup storage details as part of the restore
        partition description in body. Once the restore is initiated, its
        progress can be tracked using the GetRestoreProgress operation. 

        In case, the operation times out, specify a greater restore timeout value in the query parameter.
      operationId: RestorePartition
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/RestoreTimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestorePartitionDescription"
        description: Describes the parameters to restore the partition.
        required: true
        x-ms-parameter-location: method
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            restore will be initiated. Use GetPartitionRestoreProgress operation
            to get the status of the restore operation.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Triggers restore of the state of the partition using the specified
        restore partition description.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/ResumeBackup":
    post:
      description: The previously suspended partition resumes taking periodic backup as per
        the backup policy currently configured for the same.
      operationId: ResumePartitionBackup
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            partition backup will be resumed.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Resumes periodic backup of partition which was previously suspended.
      tags:
        - BackupRestore
  "/Partitions/{partitionId}/$/SuspendBackup":
    post:
      description: The partition which is configured to take periodic backups, is suspended
        for taking further backups till it is resumed again.
      operationId: SuspendPartitionBackup
      parameters:
        - $ref: "#/components/parameters/PartitionIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            partition backup will be suspended.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Suspends periodic backup for the specified partition.
      tags:
        - BackupRestore
  /Resources/Applications:
    get:
      description: Gets the information about all application resources in a given resource
        group. The information include the description and other properties of
        the Application.
      operationId: MeshApplication_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedApplicationResourceDescriptionList"
              examples:
                ListMeshApplications:
                  $ref: "#/components/examples/ListMeshApplications"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the application resources.
      tags:
        - MeshApplications
  "/Resources/Applications/{applicationResourceName}":
    delete:
      description: Deletes the Application resource identified by the name.
      operationId: MeshApplication_Delete
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content - the specified application was not found.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the Application resource.
      tags:
        - MeshApplications
    get:
      description: Gets the information about the Application resource with the given name.
        The information include the description and other properties of the
        Application.
      operationId: MeshApplication_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResourceDescription"
              examples:
                GetApplicationResource:
                  $ref: "#/components/examples/GetApplicationResource"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Application resource with the given name.
      tags:
        - MeshApplications
    put:
      description: Creates a Application resource with the specified name, description and
        properties. If Application resource with the same name exists, then it
        is updated with the specified description and properties.
      operationId: MeshApplication_CreateOrUpdate
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationResourceDescription"
        description: Description for creating a Application resource.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResourceDescription"
              examples:
                CreateOrUpdateMeshApplication:
                  $ref: "#/components/examples/CreateOrUpdateMeshApplication"
                CreateOrUpdateMeshApplicationWithAutoScale:
                  $ref: "#/components/examples/CreateOrUpdateMeshApplicationWithAut\
                    oScale"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResourceDescription"
              examples:
                CreateOrUpdateMeshApplication:
                  $ref: "#/components/examples/CreateOrUpdateMeshApplication"
                CreateOrUpdateMeshApplicationWithAutoScale:
                  $ref: "#/components/examples/CreateOrUpdateMeshApplicationWithAut\
                    oScale"
        "202":
          description: Accepted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates or updates a Application resource.
      tags:
        - MeshApplications
  "/Resources/Applications/{applicationResourceName}/Services":
    get:
      description: Gets the information about all services of an application resource. The
        information include the description and other properties of the Service.
      operationId: MeshService_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedServiceResourceDescriptionList"
              examples:
                ListMeshServices:
                  $ref: "#/components/examples/ListMeshServices"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the service resources.
      tags:
        - MeshServices
  "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}":
    get:
      description: Gets the information about the Service resource with the given name. The
        information include the description and other properties of the Service.
      operationId: MeshService_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/ServiceResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResourceDescription"
              examples:
                GetServiceResource:
                  $ref: "#/components/examples/GetServiceResource"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Service resource with the given name.
      tags:
        - MeshServices
  "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas":
    get:
      description: Gets the information about all replicas of a service. The information
        include the description and other properties of the service replica.
      operationId: MeshServiceReplica_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/ServiceResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedServiceReplicaDescriptionList"
              examples:
                ListMeshServiceReplicas:
                  $ref: "#/components/examples/ListMeshServiceReplicas"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the replicas of a service.
      tags:
        - MeshServiceReplicas
  "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}":
    get:
      description: Gets the information about the service replica with the given name. The
        information include the description and other properties of the service
        replica.
      operationId: MeshServiceReplica_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/ServiceResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceReplicaDescription"
              examples:
                GetServiceReplica:
                  $ref: "#/components/examples/GetServiceReplica"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the given replica of the service of an application.
      tags:
        - MeshServiceReplicas
  "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs":
    get:
      description: Gets the logs for the container of the specified code package of the
        service replica.
      operationId: MeshCodePackage_GetContainerLogs
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/ApplicationResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/ServiceResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/ReplicaNameRequiredPathParam"
        - $ref: "#/components/parameters/CodePackageNameRequiredPathParam"
        - $ref: "#/components/parameters/TailOptionalQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerLogs"
              examples:
                GetContainerLogs:
                  $ref: "#/components/examples/GetContainerLogs"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the logs from the container.
      tags:
        - MeshCodePackages
  /Resources/Gateways:
    get:
      description: Gets the information about all gateway resources in a given resource
        group. The information include the description and other properties of
        the Gateway.
      operationId: MeshGateway_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedGatewayResourceDescriptionList"
              examples:
                ListMeshGateways:
                  $ref: "#/components/examples/ListMeshGateways"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the gateway resources.
      tags:
        - MeshGateways
  "/Resources/Gateways/{gatewayResourceName}":
    delete:
      description: Deletes the Gateway resource identified by the name.
      operationId: MeshGateway_Delete
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/GatewayResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content - the specified gateway was not found.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the Gateway resource.
      tags:
        - MeshGateways
    get:
      description: Gets the information about the Gateway resource with the given name. The
        information include the description and other properties of the Gateway.
      operationId: MeshGateway_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/GatewayResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResourceDescription"
              examples:
                GetGatewayResource:
                  $ref: "#/components/examples/GetGatewayResource"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Gateway resource with the given name.
      tags:
        - MeshGateways
    put:
      description: Creates a Gateway resource with the specified name, description and
        properties. If Gateway resource with the same name exists, then it is
        updated with the specified description and properties. Use Gateway
        resource to provide public connectivity to application services.
      operationId: MeshGateway_CreateOrUpdate
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/GatewayResourceNameRequiredPathParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GatewayResourceDescription"
        description: Description for creating a Gateway resource.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResourceDescription"
              examples:
                CreateOrUpdateMeshGateway:
                  $ref: "#/components/examples/CreateOrUpdateMeshGateway"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayResourceDescription"
              examples:
                CreateOrUpdateMeshGateway:
                  $ref: "#/components/examples/CreateOrUpdateMeshGateway"
        "202":
          description: Accepted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates or updates a Gateway resource.
      tags:
        - MeshGateways
  /Resources/Networks:
    get:
      description: Gets the information about all network resources in a given resource
        group. The information include the description and other properties of
        the Network.
      operationId: MeshNetwork_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedNetworkResourceDescriptionList"
              examples:
                ListMeshNetworks:
                  $ref: "#/components/examples/ListMeshNetworks"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the network resources.
      tags:
        - MeshNetworks
  "/Resources/Networks/{networkResourceName}":
    delete:
      description: Deletes the Network resource identified by the name.
      operationId: MeshNetwork_Delete
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/NetworkResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content - the specified network was not found.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the Network resource.
      tags:
        - MeshNetworks
    get:
      description: Gets the information about the Network resource with the given name. The
        information include the description and other properties of the Network.
      operationId: MeshNetwork_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/NetworkResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkResourceDescription"
              examples:
                GetNetworkResource:
                  $ref: "#/components/examples/GetNetworkResource"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Network resource with the given name.
      tags:
        - MeshNetworks
    put:
      description: Creates a Network resource with the specified name, description and
        properties. If Network resource with the same name exists, then it is
        updated with the specified description and properties. Network resource
        provides connectivity between application services.
      operationId: MeshNetwork_CreateOrUpdate
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/NetworkResourceNameRequiredPathParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkResourceDescription"
        description: Description for creating a Network resource.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkResourceDescription"
              examples:
                CreateOrUpdateMeshNetwork:
                  $ref: "#/components/examples/CreateOrUpdateMeshNetwork"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkResourceDescription"
              examples:
                CreateOrUpdateMeshNetwork:
                  $ref: "#/components/examples/CreateOrUpdateMeshNetwork"
        "202":
          description: Accepted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates or updates a Network resource.
      tags:
        - MeshNetworks
  /Resources/Secrets:
    get:
      description: Gets the information about all secret resources in a given resource
        group. The information include the description and other properties of
        the Secret.
      operationId: MeshSecret_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedSecretResourceDescriptionList"
              examples:
                ListMeshSecrets:
                  $ref: "#/components/examples/ListMeshSecrets"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the secret resources.
      tags:
        - MeshSecrets
  "/Resources/Secrets/{secretResourceName}":
    delete:
      description: Deletes the specified Secret resource and all of its named values.
      operationId: MeshSecret_Delete
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content - the specified secret was not found.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the Secret resource.
      tags:
        - MeshSecrets
    get:
      description: Gets the information about the Secret resource with the given name. The
        information include the description and other properties of the Secret.
      operationId: MeshSecret_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretResourceDescription"
              examples:
                GetSecretResource:
                  $ref: "#/components/examples/GetSecretResource"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Secret resource with the given name.
      tags:
        - MeshSecrets
    put:
      description: Creates a Secret resource with the specified name, description and
        properties. If Secret resource with the same name exists, then it is
        updated with the specified description and properties. Once created, the
        kind and contentType of a secret resource cannot be updated.
      operationId: MeshSecret_CreateOrUpdate
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretResourceDescription"
        description: Description for creating a secret resource.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretResourceDescription"
              examples:
                CreateOrUpdateMeshSecret:
                  $ref: "#/components/examples/CreateOrUpdateMeshSecret"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretResourceDescription"
              examples:
                CreateOrUpdateMeshSecret:
                  $ref: "#/components/examples/CreateOrUpdateMeshSecret"
        "202":
          description: Accepted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates or updates a Secret resource.
      tags:
        - MeshSecrets
  "/Resources/Secrets/{secretResourceName}/values":
    get:
      description: Gets information about all secret value resources of the specified
        secret resource. The information includes the names of the secret value
        resources, but not the actual values.
      operationId: MeshSecretValue_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedSecretValueResourceDescriptionList"
              examples:
                ListMeshSecretValues:
                  $ref: "#/components/examples/ListMeshSecretValues"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: List names of all values of the specified secret resource.
      tags:
        - MeshSecretValues
  "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}":
    delete:
      description: Deletes the secret value resource identified by the name. The name of
        the resource is typically the version associated with that value.
        Deletion will fail if the specified value is in use.
      operationId: MeshSecretValue_Delete
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/SecretValueResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content - the specified secret value was not found.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the specified  value of the named secret resource.
      tags:
        - MeshSecretValues
    get:
      description: Get the information about the specified named secret value resources.
        The information does not include the actual value of the secret.
      operationId: MeshSecretValue_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/SecretValueResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretValueResourceDescription"
              examples:
                GetMeshSecretValue:
                  $ref: "#/components/examples/GetMeshSecretValue"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the specified secret value resource.
      tags:
        - MeshSecretValues
    put:
      description: Creates a new value of the specified secret resource. The name of the
        value is typically the version identifier. Once created the value cannot
        be changed.
      operationId: MeshSecretValue_AddValue
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/SecretValueResourceNameRequiredPathParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretValueResourceDescription"
        description: Description for creating a value of a secret resource.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretValueResourceDescription"
              examples:
                CreateMeshSecretValue:
                  $ref: "#/components/examples/CreateMeshSecretValue"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretValueResourceDescription"
              examples:
                CreateMeshSecretValue:
                  $ref: "#/components/examples/CreateMeshSecretValue"
        "202":
          description: Accepted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Adds the specified value as a new version of the specified secret
        resource.
      tags:
        - MeshSecretValues
  "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value":
    post:
      description: Lists the decrypted value of the specified named value of the secret
        resource. This is a privileged operation.
      operationId: MeshSecretValue_Show
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/SecretResourceNameRequiredPathParam"
        - $ref: "#/components/parameters/SecretValueResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretValue"
              examples:
                ListMeshSecretValue:
                  $ref: "#/components/examples/ListMeshSecretValue"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists the specified value of the secret resource.
      tags:
        - MeshSecretValues
  /Resources/Volumes:
    get:
      description: Gets the information about all volume resources in a given resource
        group. The information include the description and other properties of
        the Volume.
      operationId: MeshVolume_List
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedVolumeResourceDescriptionList"
              examples:
                ListMeshVolumes:
                  $ref: "#/components/examples/ListMeshVolumes"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Lists all the volume resources.
      tags:
        - MeshVolumes
  "/Resources/Volumes/{volumeResourceName}":
    delete:
      description: Deletes the Volume resource identified by the name.
      operationId: MeshVolume_Delete
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/VolumeResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content - the specified volume was not found.
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes the Volume resource.
      tags:
        - MeshVolumes
    get:
      description: Gets the information about the Volume resource with the given name. The
        information include the description and other properties of the Volume.
      operationId: MeshVolume_Get
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/VolumeResourceNameRequiredPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeResourceDescription"
              examples:
                GetVolumeResource:
                  $ref: "#/components/examples/GetVolumeResource"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Volume resource with the given name.
      tags:
        - MeshVolumes
    put:
      description: Creates a Volume resource with the specified name, description and
        properties. If Volume resource with the same name exists, then it is
        updated with the specified description and properties.
      operationId: MeshVolume_CreateOrUpdate
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4-Preview_RequiredQueryParam"
        - $ref: "#/components/parameters/VolumeResourceNameRequiredPathParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeResourceDescription"
        description: Description for creating a Volume resource.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeResourceDescription"
              examples:
                CreateOrUpdateMeshVolume:
                  $ref: "#/components/examples/CreateOrUpdateMeshVolume"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeResourceDescription"
              examples:
                CreateOrUpdateMeshVolume:
                  $ref: "#/components/examples/CreateOrUpdateMeshVolume"
        "202":
          description: Accepted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Creates or updates a Volume resource.
      tags:
        - MeshVolumes
  "/Services/$/{serviceId}/$/GetPartitions/$/Recover":
    post:
      description: Indicates to the Service Fabric cluster that it should attempt to
        recover the specified service that is currently stuck in quorum loss.
        This operation should only be performed if it is known that the replicas
        that are down cannot be recovered. Incorrect use of this API can cause
        potential data loss.
      operationId: RecoverServicePartitions
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation request will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Indicates to the Service Fabric cluster that it should attempt to
        recover the specified service that is currently stuck in quorum loss.
      tags:
        - Partition
  "/Services/{serviceId}/$/Delete":
    post:
      description: A service must be created before it can be deleted. By default, Service
        Fabric will try to close service replicas in a graceful manner and then
        delete the service. However, if the service is having issues closing the
        replica gracefully, the delete operation may take a long time or get
        stuck. Use the optional ForceRemove flag to skip the graceful close
        sequence and forcefully delete the service.
      operationId: DeleteService
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ForceRemoveOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Deletes an existing Service Fabric service.
      tags:
        - Service
  "/Services/{serviceId}/$/DisableBackup":
    post:
      description: >-
        Disables periodic backup of Service Fabric service which was previously
        enabled. Backup must be explicitly enabled before it can be disabled.

        In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
      operationId: DisableServiceBackup
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/DisableBackupDescription"
      responses:
        "202":
          description: A 202 status code indicates the request to disable service backup
            has been accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Disables periodic backup of Service Fabric service which was previously
        enabled.
      tags:
        - BackupRestore
  "/Services/{serviceId}/$/EnableBackup":
    post:
      description: >-
        Enables periodic backup of stateful partitions which are part of this
        Service Fabric service. Each partition is backed up individually as per
        the specified backup policy description. In case the application, which
        the service is part of, is already enabled for backup then this
        operation would override the policy being used to take the periodic
        backup for this service and its partitions (unless explicitly overridden
        at the partition level).

        Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
      operationId: EnableServiceBackup
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/EnableBackupDescription"
      responses:
        "202":
          description: A 202 status code indicates the request to enable service backup has
            been accepted.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Enables periodic backup of stateful partitions under this Service Fabric
        service.
      tags:
        - BackupRestore
  "/Services/{serviceId}/$/GetApplicationName":
    get:
      description: Gets the name of the application for the specified service. A 404
        FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the
        provided service ID does not exist.
      operationId: GetApplicationNameInfo
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the name of the application for the specified
            service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationNameInfo"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the name of the Service Fabric application for a service.
      tags:
        - Service
  "/Services/{serviceId}/$/GetBackupConfigurationInfo":
    get:
      description: Gets the Service Fabric backup configuration information for the service
        and the partitions under this service.
      operationId: GetServiceBackupConfigurationInfo
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of backup configuration information for the service, and the
            partitions under this service, for which backup configuration has
            been overridden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupConfigurationInfoList"
              examples:
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the Service Fabric service backup configuration information.
      tags:
        - BackupRestore
  "/Services/{serviceId}/$/GetBackups":
    get:
      description: Returns a list of backups available for every partition in this Service
        Fabric service. The server enumerates all the backups available in the
        backup store configured in the backup policy. It also allows filtering
        of the result based on start and end datetime or just fetching the
        latest available backup for every partition.
      operationId: GetServiceBackupList
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
        - $ref: "#/components/parameters/LatestOptionalQueryParam"
        - $ref: "#/components/parameters/StartDateTimeFilterOptionalQueryParam"
        - $ref: "#/components/parameters/EndDateTimeFilterOptionalQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and a paged list
            of backup information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedBackupInfoList"
              examples:
                Get application backups within a time range:
                  $ref: "#/components/examples/Get_application_backups_within_a_tim\
                    e_range"
                Get latest backup:
                  $ref: "#/components/examples/Get_latest_backup"
                Limit maximum results:
                  $ref: "#/components/examples/Limit_maximum_results"
                Page using continuation token:
                  $ref: "#/components/examples/Page_using_continuation_token"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of backups available for every partition in this service.
      tags:
        - BackupRestore
  "/Services/{serviceId}/$/GetDescription":
    get:
      description: Gets the description of an existing Service Fabric service. A service
        must be created before its description can be obtained.
      operationId: GetServiceDescription
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceDescription"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the description of an existing Service Fabric service.
      tags:
        - Service
  "/Services/{serviceId}/$/GetHealth":
    get:
      description: >-
        Gets the health information of the specified service.

        Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.

        Use PartitionsHealthStateFilter to filter the collection of partitions returned.

        If you specify a service that does not exist in the health store, this request returns an error.
      operationId: GetServiceHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/PartitionsHealthStateFilterOptionalQueryPa\
            ram"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information of the specified service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of the specified Service Fabric service.
      tags:
        - Service
    post:
      description: >-
        Gets the health information of the specified service.

        If the application health policy is specified, the health evaluation uses it to get the aggregated health state.

        If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest.

        Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state.

        Use PartitionsHealthStateFilter to filter the collection of partitions returned.

        If you specify a service that does not exist in the health store, this request returns an error.
      operationId: GetServiceHealthUsingPolicy
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/EventsHealthStateFilterOptionalQueryParam"
        - $ref: "#/components/parameters/PartitionsHealthStateFilterOptionalQueryPa\
            ram"
        - $ref: "#/components/parameters/ExcludeHealthStatisticsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/ApplicationHealthPolicy"
      responses:
        "200":
          description: A successful operation will return 200 status code and the health
            information of the specified service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceHealth"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the health of the specified Service Fabric service, by using the
        specified health policy.
      tags:
        - Service
  "/Services/{serviceId}/$/GetPartitions":
    get:
      description: The response includes the partition ID, partitioning scheme information,
        keys supported by the partition, status, health, and other details about
        the partition.
      operationId: GetPartitionInfoList
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: List of partitions of a Service Fabric service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedServicePartitionInfoList"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the list of partitions of a Service Fabric service.
      tags:
        - Partition
  "/Services/{serviceId}/$/GetUnplacedReplicaInformation":
    get:
      description: >-
        Returns the information about the unplaced replicas of the service.

        If PartitionId is specified, then result will contain information only about unplaced replicas for that partition.

        If PartitionId is not specified, then result will contain information about unplaced replicas for all partitions of that service.

        If OnlyQueryPrimaries is set to true, then result will contain information only about primary replicas, and will ignore unplaced secondary replicas.
      operationId: GetUnplacedReplicaInformation
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionIdOptionalQueryParam"
        - $ref: "#/components/parameters/OnlyQueryPrimariesOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Information about the specified service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnplacedReplicaInformation"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the information about unplaced replica of the service.
      tags:
        - Service
  "/Services/{serviceId}/$/ReportHealth":
    post:
      description: >-
        Reports health state of the specified Service Fabric service. The report
        must contain the information about the source of the health report and
        property on which it is reported.

        The report is sent to a Service Fabric gateway Service, which forwards to the health store.

        The report may be accepted by the gateway, but rejected by the health store after extra validation.

        For example, the health store may reject the report because of an invalid parameter, like a stale sequence number.

        To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
      operationId: ReportServiceHealth
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ImmediateOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/HealthInformation"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Sends a health report on the Service Fabric service.
      tags:
        - Service
  "/Services/{serviceId}/$/ResolvePartition":
    get:
      description: Resolve a Service Fabric service partition to get the endpoints of the
        service replicas.
      operationId: ResolveService
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/PartitionKeyTypeOptionalQueryParam"
        - $ref: "#/components/parameters/PartitionKeyValueOptionalQueryParam"
        - $ref: "#/components/parameters/PreviousRspVersionOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResolvedServicePartition"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Resolve a Service Fabric partition.
      tags:
        - Service
  "/Services/{serviceId}/$/ResumeBackup":
    post:
      description: The previously suspended Service Fabric service resumes taking periodic
        backup as per the backup policy currently configured for the same.
      operationId: ResumeServiceBackup
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            service backup will be resumed.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Resumes periodic backup of a Service Fabric service which was previously
        suspended.
      tags:
        - BackupRestore
  "/Services/{serviceId}/$/SuspendBackup":
    post:
      description: The service which is configured to take periodic backups, is suspended
        for taking further backups till it is resumed again. This operation
        applies to the entire service's hierarchy. It means all the partitions
        under this service are now suspended for backup.
      operationId: SuspendServiceBackup
      parameters:
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/ApiVersion_6-4_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "202":
          description: A 202 status code indicates the operation request was accepted and
            service backup will be suspended.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Suspends periodic backup for the specified Service Fabric service.
      tags:
        - BackupRestore
  "/Services/{serviceId}/$/Update":
    post:
      description: This API allows updating properties of a running Service Fabric service.
        The set of properties that can be updated are a subset of the properties
        that were specified at the time of creating the service. The current set
        of properties can be obtained using `GetServiceDescription` API. Note
        that updating the properties of a running service is different than
        upgrading your application using `StartApplicationUpgrade` API. The
        upgrade is a long running background operation that involves moving the
        application from one version to another, one upgrade domain at a time,
        whereas update applies the new properties immediately to the service.
      operationId: UpdateService
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/ServiceIdRequiredPathParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceUpdateDescription"
        description: The information necessary to update a service.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 202 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Updates a Service Fabric service using the specified update description.
      tags:
        - Service
  /Tools/Chaos:
    get:
      description: Get the status of Chaos indicating whether or not Chaos is running, the
        Chaos parameters used for running Chaos and the status of the Chaos
        Schedule.
      operationId: GetChaos
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the status of
            Chaos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chaos"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the status of Chaos.
      tags:
        - Chaos
  /Tools/Chaos/$/Start:
    post:
      description: >-
        If Chaos is not already running in the cluster, it starts Chaos with the
        passed in Chaos parameters.

        If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING.

        Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
      operationId: StartChaos
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChaosParameters"
        description: Describes all the parameters to configure a Chaos run.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Starts Chaos in the cluster.
      tags:
        - Chaos
  /Tools/Chaos/$/Stop:
    post:
      description: >-
        Stops Chaos from executing new faults. In-flight faults will continue to
        execute until they are complete. The current Chaos Schedule is put into
        a stopped state.

        Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
      operationId: StopChaos
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-0_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Stops Chaos if it is running in the cluster and put the Chaos Schedule
        in a stopped state.
      tags:
        - Chaos
  /Tools/Chaos/Events:
    get:
      description: >-
        To get the next segment of the Chaos events, you can specify the
        ContinuationToken. To get the start of a new segment of Chaos events,
        you can specify the time range

        through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call.

        When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
      operationId: GetChaosEvents
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/ContinuationTokenOptionalQueryParam"
        - $ref: "#/components/parameters/StartTimeUtcOptionalQueryParam"
        - $ref: "#/components/parameters/EndTimeUtcOptionalQueryParam"
        - $ref: "#/components/parameters/MaxResultsOptionalQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: Next segment of Chaos events.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaosEventsSegment"
              examples:
                Get Chaos events given a time range:
                  $ref: "#/components/examples/Get_Chaos_events_given_a_time_range"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Gets the next segment of the Chaos events based on the continuation
        token or the time range.
      tags:
        - Chaos
  /Tools/Chaos/Schedule:
    get:
      description: Gets the version of the Chaos Schedule in use and the Chaos Schedule
        that defines when and how to run Chaos.
      operationId: GetChaosSchedule
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      responses:
        "200":
          description: A successful operation will return 200 status code and the schedule
            description including a Chaos Schedule used by Chaos and the version
            the Chaos Schedule is on.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChaosScheduleDescription"
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Get the Chaos Schedule defining when and how to run Chaos.
      tags:
        - Chaos
    post:
      description: >-
        Chaos will automatically schedule runs based on the Chaos Schedule.

        The Chaos Schedule will be updated if the provided version matches the version on the server.

        When updating the Chaos Schedule, the version on the server is incremented by 1.

        The version on the server will wrap back to 0 after reaching a large number.

        If Chaos is running when this call is made, the call will fail.
      operationId: PostChaosSchedule
      parameters:
        - $ref: "#/components/parameters/ApiVersion_6-2_RequiredQueryParam"
        - $ref: "#/components/parameters/TimeoutOptionalQueryParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChaosScheduleDescription"
        description: Describes the schedule used by Chaos.
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: A successful operation will return 200 status code.
        default:
          description: The detailed error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FabricError"
      summary: Set the schedule used by Chaos.
      tags:
        - Chaos
servers:
  - url: http://azure.local:19080
  - url: https://azure.local:19080
components:
  examples:
    Get_cluster_version:
      value:
        Version: 6.4.514.9494
    Exclude_application_parameters_from_the_result:
      value:
        ContinuationToken: ""
        Items:
          - DefaultParameterList: []
            Name: CalculatorApp
            Status: Available
            Version: "1.0"
          - DefaultParameterList: []
            Name: CalculatorApp
            Status: Available
            Version: "2.0"
          - DefaultParameterList: []
            Name: GatewayApp
            Status: Available
            Version: "1.0"
          - DefaultParameterList: []
            Name: PersistentQueueApp
            Status: Available
            Version: "1.0"
          - DefaultParameterList: []
            Name: PersistentQueueApp
            Status: Available
            Version: "2.0"
          - DefaultParameterList: []
            Name: VolatileQueueApp
            Status: Available
            Version: "1.0"
          - DefaultParameterList: []
            Name: VolatileQueueApp
            Status: Available
            Version: "2.0"
    Limit_maximum_results:
      value:
        ContinuationToken: fabric:/CalcApp/CalcService#1daae3f5-7fd6-42e9-b1ba-8c05f873994d#7903dc2a-228d-44b0-b7c8-a13a6c9b46bd
        Items:
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupLocation: CalcApp\CalcService\1daae3f5-7fd6-42e9-b1ba-8c05f873994d\2018-01-01
              09.00.55.zip
            BackupType: Full
            CreationTimeUtc: 2018-01-01T09:00:55Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "261"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupId: 7903dc2a-228d-44b0-b7c8-a13a6c9b46bd
            BackupLocation: CalcApp\CalcService\1daae3f5-7fd6-42e9-b1ba-8c05f873994d\2018-01-01
              17.01.02.zip
            BackupType: Incremental
            CreationTimeUtc: 2018-01-01T17:01:02Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "446"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
    Page_using_continuation_token:
      value:
        ContinuationToken: ""
        Items:
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupLocation: CalcApp\CalcService\81645ec7-d260-4c59-9533-8f129bde8e83\2018-01-01
              09.01.02.zip
            BackupType: Full
            CreationTimeUtc: 2018-01-01T09:01:02Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "161"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 81645ec7-d260-4c59-9533-8f129bde8e83
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupId: d55a2d98-258b-4a34-8fe5-2063e81af9dc
            BackupLocation: CalcApp\CalcService\81645ec7-d260-4c59-9533-8f129bde8e83\2018-01-01
              17.00.34.zip
            BackupType: Incremental
            CreationTimeUtc: 2018-01-01T17:00:34Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "246"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 81645ec7-d260-4c59-9533-8f129bde8e83
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
    Get_information_about_all_nodes.:
      value:
        IsServiceGroup: false
        ServiceManifestName: Actor1Pkg
        ServiceManifestVersion: 1.0.0
        ServiceTypeDescription:
          Extensions:
            - Key: __GeneratedServiceType__
              Value: "<GeneratedNames
                xmlns=\"http://schemas.microsoft.com/2015/03/fabact-no-schema\">\
                \r

                \            <DefaultService
                Name=\"Actor1ActorService\" />\r

                \            <ReplicatorEndpoint
                Name=\"Actor1ActorServiceReplicatorEndpoint\" />\r

                \            <ReplicatorConfigSection
                Name=\"Actor1ActorServiceReplicatorConfig\" />\r

                \            <ReplicatorSecurityConfigSection
                Name=\"Actor1ActorServiceReplicatorSecurityConfig\" />\r

                \            <StoreConfigSection
                Name=\"Actor1ActorServiceLocalStoreConfig\" />\r

                \            <ServiceEndpointV2
                Name=\"Actor1ActorServiceEndpointV2\" />\r

                \          </GeneratedNames>"
          HasPersistedState: true
          IsStateful: true
          Kind: Stateful
          LoadMetrics: []
          PlacementConstraints: ""
          ServicePlacementPolicies: []
          ServiceTypeName: Actor1ActorServiceType
    Get_a_specific_application_by_application_id:
      value:
        ApplicationDefinitionKind: ServiceFabricApplicationDescription
        HealthState: Ok
        Id: samples~CalculatorApp
        Name: fabric:/samples/CalculatorApp
        Parameters: []
        Status: Ready
        TypeName: CalculatorApp
        TypeVersion: "1.0"
    Get_application_backups_within_a_time_range:
      value:
        ContinuationToken: ""
        Items:
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupLocation: CalcApp\CalcService\1daae3f5-7fd6-42e9-b1ba-8c05f873994d\2018-01-01
              09.00.55.zip
            BackupType: Full
            CreationTimeUtc: 2018-01-01T09:00:55Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "261"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupId: 7903dc2a-228d-44b0-b7c8-a13a6c9b46bd
            BackupLocation: CalcApp\CalcService\1daae3f5-7fd6-42e9-b1ba-8c05f873994d\2018-01-01
              17.01.02.zip
            BackupType: Incremental
            CreationTimeUtc: 2018-01-01T17:01:02Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "446"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupLocation: CalcApp\CalcService\81645ec7-d260-4c59-9533-8f129bde8e83\2018-01-01
              09.01.02.zip
            BackupType: Full
            CreationTimeUtc: 2018-01-01T09:01:02Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "161"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 81645ec7-d260-4c59-9533-8f129bde8e83
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupId: d55a2d98-258b-4a34-8fe5-2063e81af9dc
            BackupLocation: CalcApp\CalcService\81645ec7-d260-4c59-9533-8f129bde8e83\2018-01-01
              17.00.34.zip
            BackupType: Incremental
            CreationTimeUtc: 2018-01-01T17:00:34Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "246"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 81645ec7-d260-4c59-9533-8f129bde8e83
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
    Get_latest_backup:
      value:
        ContinuationToken: ""
        Items:
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 3a056ac9-7206-43c3-8424-6f6103003eba
            BackupId: 7903dc2a-228d-44b0-b7c8-a13a6c9b46bd
            BackupLocation: CalcApp\CalcService\1daae3f5-7fd6-42e9-b1ba-8c05f873994d\2018-01-01
              17.01.02.zip
            BackupType: Incremental
            CreationTimeUtc: 2018-01-01T17:01:02Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "446"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
          - ApplicationName: fabric:/CalcApp
            BackupChainId: 0ff4fdbe-131c-4dfb-8249-7b4029ddc014
            BackupId: d55a2d98-258b-4a34-8fe5-2063e81af9dc
            BackupLocation: CalcApp\CalcService\81645ec7-d260-4c59-9533-8f129bde8e83\2018-01-01
              17.00.34.zip
            BackupType: Incremental
            CreationTimeUtc: 2018-01-01T17:00:34Z
            EpochOfLastBackupRecord:
              ConfigurationVersion: "8589934592"
              DataLossVersion: "131462452931584510"
            LsnOfLastBackupRecord: "246"
            PartitionInformation:
              HighKey: "9223372036854775807"
              Id: 81645ec7-d260-4c59-9533-8f129bde8e83
              LowKey: "-9223372036854775808"
              ServicePartitionKind: Int64Range
            ServiceManifestVersion: 1.0.0
            ServiceName: fabric:/CalcApp/CalcService
    Get_backup_policy_by_name:
      value:
        AutoRestoreOnDataLoss: false
        MaxIncrementalBackups: 3
        Name: DailyAzureBackupPolicy
        RetentionPolicy:
          MinimumNumberOfBackups: 20
          RetentionDuration: P20D
          RetentionPolicyType: Basic
        Schedule:
          RunTimes:
            - 0001-01-01T09:00:00Z
            - 0001-01-01T17:00:00Z
          ScheduleFrequencyType: Daily
          ScheduleKind: TimeBased
        Storage:
          ConnectionString: DefaultEndpointsProtocol=https;AccountName=storagesample;AccountKey=<PutYourAccountKeyHere>
          ContainerName: BackupContainer
          StorageKind: AzureBlobStore
    Get_Applications-related_events:
      value:
        - ApplicationDefinitionKind: ServiceFabricApplicationDescription
          ApplicationId: app1
          ApplicationTypeName: App1Type
          ApplicationTypeVersion: 1.0.1
          EventInstanceId: 8a7a0c42-67ca-4cd3-9160-edcdb822db10
          HasCorrelatedEvents: false
          Kind: ApplicationCreated
          TimeStamp: 2018-04-03T20:21:23.5774199Z
        - ApplicationDefinitionKind: ServiceFabricApplicationDescription
          ApplicationId: app2
          ApplicationTypeName: App2Type
          ApplicationTypeVersion: 4.0.1
          EventInstanceId: d50574bc-6a31-4945-8275-7639bec7a0b3
          HasCorrelatedEvents: false
          Kind: ApplicationCreated
          TimeStamp: 2018-04-03T20:21:59.74842Z
    Get_Application-related_events:
      value:
        - ApplicationDefinitionKind: ServiceFabricApplicationDescription
          ApplicationId: app1
          ApplicationTypeName: App1Type
          ApplicationTypeVersion: 1.0.1
          EventInstanceId: 8a7a0c42-67ca-4cd3-9160-edcdb822db10
          HasCorrelatedEvents: false
          Kind: ApplicationCreated
          TimeStamp: 2018-04-03T20:21:23.5774199Z
    Get_Cluster-related_events:
      value:
        - CurrentClusterVersion: "0.0.0.0:"
          EventInstanceId: 090add3c-8f56-4d35-8d57-a855745b6064
          FailureAction: Manual
          HasCorrelatedEvents: false
          Kind: ClusterUpgradeStarted
          RollingUpgradeMode: UnmonitoredAuto
          TargetClusterVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:18:59.4313064Z
          UpgradeType: Rolling
        - EventInstanceId: 090add3c-8f56-4d35-8d57-a855745b6064
          HasCorrelatedEvents: false
          Kind: ClusterUpgradeDomainCompleted
          TargetClusterVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:19:59.5729953Z
          UpgradeDomainElapsedTimeInMs: 78.5288
          UpgradeDomains: (0 1 2)
          UpgradeState: RollingForward
        - EventInstanceId: 090add3c-8f56-4d35-8d57-a855745b6064
          HasCorrelatedEvents: false
          Kind: ClusterUpgradeDomainCompleted
          TargetClusterVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:20:59.6271949Z
          UpgradeDomainElapsedTimeInMs: 0
          UpgradeDomains: (3 4)
          UpgradeState: RollingForward
        - EventInstanceId: 090add3c-8f56-4d35-8d57-a855745b6064
          HasCorrelatedEvents: false
          Kind: ClusterUpgradeCompleted
          OverallUpgradeElapsedTimeInMs: 120196.5212
          TargetClusterVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:20:59.8134457Z
    Get_Correlated_events:
      value:
        - CurrentNode: node1(cf68563e16a44f808e86197a9cf83de5)
          EventInstanceId: 59dde2bc-a833-412e-a56d-8f6ada0c7963
          HasCorrelatedEvents: true
          Kind: PartitionPrimaryMoveAnalysis
          Metadata:
            Delay: 00:00:20
            Duration: 00:01:59
          MoveReason: ApplicationHostDown
          PartitionId: f2a6a893-39be-4c7d-b07f-72bc2d36de89
          PreviousNode: node3(b9d52c016a15a8f57673d3b8041e2d35)
          RelevantTraces: ""
          TimeStamp: 2018-04-03T20:07:55.966073Z
          WhenMoveCompleted: 2018-04-03T20:06:55.966073Z
    Get_Nodes-related_events:
      value:
        - EventInstanceId: ecbce04a-a42b-4b70-a800-dfc6bc4f9b89
          FaultDomain: fd:/0
          HasCorrelatedEvents: false
          Hostname: RD0003FF5089AA
          IpAddressOrFQDN: 100.78.240.56
          IsSeedNode: false
          Kind: NodeOpenSucceeded
          NodeId: ba001a8bb353543e646be031afb10f1e
          NodeInstance: 131672596159209220
          NodeName: node1
          NodeVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:06:55.966073Z
          UpgradeDomain: "0"
        - EventInstanceId: 67730c48-752c-4209-bf28-3c121555a4c0
          FaultDomain: fd:/3
          HasCorrelatedEvents: false
          Hostname: RD0003FF6047A8
          IpAddressOrFQDN: 100.72.76.122
          IsSeedNode: false
          Kind: NodeOpenSucceeded
          NodeId: ba03ef91259835c54d674889849a7cee
          NodeInstance: 131672596186027900
          NodeName: node2
          NodeVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:06:58.6357365Z
          UpgradeDomain: "3"
    Get_Node-related_events:
      value:
        - EventInstanceId: ecbce04a-a42b-4b70-a800-dfc6bc4f9b89
          FaultDomain: fd:/0
          HasCorrelatedEvents: false
          Hostname: RD0003FF5089AA
          IpAddressOrFQDN: 100.78.240.56
          IsSeedNode: false
          Kind: NodeOpenSucceeded
          NodeId: ba001a8bb353543e646be031afb10f1e
          NodeInstance: 131672596159209220
          NodeName: node1
          NodeVersion: 6.2:1.0
          TimeStamp: 2018-04-03T20:06:55.966073Z
          UpgradeDomain: "0"
    Get_Partitions-related_events:
      value:
        - CcEpochConfigVersion: 8589934595
          CcEpochDataLossVersion: 131672604833413100
          EventInstanceId: e00fa5b7-f747-40dd-9e09-f5a031e96de4
          HasCorrelatedEvents: true
          Kind: PartitionReconfigured
          NodeInstanceId: ba001a8bb353543e646be031afb10f1e
          NodeName: node1
          PartitionId: f2a6a893-39be-4c7d-b07f-72bc2d36de89
          Phase0DurationMs: 0
          Phase1DurationMs: 0
          Phase2DurationMs: 203.1935
          Phase3DurationMs: 0.0262
          Phase4DurationMs: 628.8527
          ReconfigType: Other
          Result: Completed
          ServiceType: Svc1Type
          TimeStamp: 2018-04-03T20:21:47.3778996Z
          TotalDurationMs: 832.0724
        - CcEpochConfigVersion: 8589934596
          CcEpochDataLossVersion: 131672604833413100
          EventInstanceId: 9aeb234a-16ef-4e8a-974e-26c60d6f2b86
          HasCorrelatedEvents: false
          Kind: PartitionReconfigured
          NodeInstanceId: ba0459d257b028296deba8bd5add33cb
          NodeName: node2
          PartitionId: e12acfb3-2a43-4a1a-a252-aa5388ef1aec
          Phase0DurationMs: 0
          Phase1DurationMs: 0
          Phase2DurationMs: 205.667
          Phase3DurationMs: 407.7781
          Phase4DurationMs: 630.0935
          ReconfigType: Other
          Result: Completed
          ServiceType: Svc1Type
          TimeStamp: 2018-04-03T20:21:49.5155104Z
          TotalDurationMs: 1243.5386
    Get_Partition-related_events:
      value:
        - CcEpochConfigVersion: 8589934595
          CcEpochDataLossVersion: 131672604833413100
          EventInstanceId: e00fa5b7-f747-40dd-9e09-f5a031e96de4
          HasCorrelatedEvents: true
          Kind: PartitionReconfigured
          NodeInstanceId: ba001a8bb353543e646be031afb10f1e
          NodeName: node1
          PartitionId: f2a6a893-39be-4c7d-b07f-72bc2d36de89
          Phase0DurationMs: 0
          Phase1DurationMs: 0
          Phase2DurationMs: 203.1935
          Phase3DurationMs: 0.0262
          Phase4DurationMs: 628.8527
          ReconfigType: Other
          Result: Completed
          ServiceType: Svc1Type
          TimeStamp: 2018-04-03T20:21:47.3778996Z
          TotalDurationMs: 832.0724
    Get_Partition_Replicas-related_events:
      value:
        - Description: ""
          EventInstanceId: b2684da3-df81-4add-8baa-201f73e9195d
          HasCorrelatedEvents: false
          HealthState: Error
          Kind: StatefulReplicaNewHealthReport
          PartitionId: f2a6a893-39be-4c7d-b07f-72bc2d36de89
          Property: ""
          RemoveWhenExpired: false
          ReplicaId: 131672608994209140
          ReplicaInstanceId: 131672608994209140
          SequenceNumber: 131672654189677800
          SourceId: TestSource
          SourceUtcTimestamp: 2018-04-03T21:43:38Z
          TimeStamp: 2018-04-03T21:43:38.8904013Z
          TimeToLiveMs: 922337203685477
        - Description: ""
          EventInstanceId: 4a8851d8-35a3-4618-b4ac-03ffa191c350
          HasCorrelatedEvents: false
          HealthState: Error
          Kind: StatefulReplicaNewHealthReport
          PartitionId: f549f3b3-08c2-4ec4-adb4-415e024cb0ef
          Property: ""
          RemoveWhenExpired: false
          ReplicaId: 177872608994339550
          ReplicaInstanceId: 177872608994339550
          SequenceNumber: 131672654189677800
          SourceId: TestSource
          SourceUtcTimestamp: 2018-04-03T21:44:38Z
          TimeStamp: 2018-04-03T21:44:38.8904013Z
          TimeToLiveMs: 922337203685477
    Get_Partition_Replica-related_events:
      value:
        - Description: ""
          EventInstanceId: b2684da3-df81-4add-8baa-201f73e9195d
          HasCorrelatedEvents: false
          HealthState: Error
          Kind: StatefulReplicaNewHealthReport
          PartitionId: f2a6a893-39be-4c7d-b07f-72bc2d36de89
          Property: ""
          RemoveWhenExpired: false
          ReplicaId: 131672608994209140
          ReplicaInstanceId: 131672608994209140
          SequenceNumber: 131672654189677800
          SourceId: TestSource
          SourceUtcTimestamp: 2018-04-03T21:43:38Z
          TimeStamp: 2018-04-03T21:43:38.8904013Z
          TimeToLiveMs: 922337203685477
    Get_Services-related_events:
      value:
        - ApplicationName: fabric:/app1
          ApplicationTypeName: App1Type
          EventInstanceId: 8ba26506-4a93-4b8c-ae14-29a2841b3003
          HasCorrelatedEvents: false
          IsStateful: true
          Kind: ServiceCreated
          MinReplicaSetSize: 2
          PartitionCount: 2
          PartitionId: bd936249-183d-4e29-94ab-2e198e4e2e87
          ServiceId: app1/svc1
          ServiceInstance: 131672605579916060
          ServicePackageVersion: 1.0:1.0
          ServiceTypeName: Svc1Type
          TargetReplicaSetSize: 3
          TimeStamp: 2018-04-03T20:22:38.0560496Z
        - ApplicationName: fabric:/app1
          ApplicationTypeName: App1Type
          EventInstanceId: 03246d3b-77f5-4ca2-b065-7b8671711318
          HasCorrelatedEvents: false
          IsStateful: true
          Kind: ServiceCreated
          MinReplicaSetSize: 2
          PartitionCount: 2
          PartitionId: 87413d64-0134-4b23-a439-c2692c4e3ec3
          ServiceId: app1/svc2
          ServiceInstance: 131672605579916060
          ServicePackageVersion: 1.0:1.0
          ServiceTypeName: Svc2Type
          TargetReplicaSetSize: 3
          TimeStamp: 2018-04-03T20:22:38.056197Z
    Get_Service-related_events:
      value:
        - ApplicationName: fabric:/app1
          ApplicationTypeName: App1Type
          EventInstanceId: 8ba26506-4a93-4b8c-ae14-29a2841b3003
          HasCorrelatedEvents: false
          IsStateful: true
          Kind: ServiceCreated
          MinReplicaSetSize: 2
          PartitionCount: 2
          PartitionId: bd936249-183d-4e29-94ab-2e198e4e2e87
          ServiceId: app1/svc1
          ServiceInstance: 131672605579916060
          ServicePackageVersion: 1.0:1.0
          ServiceTypeName: Svc1Type
          TargetReplicaSetSize: 3
          TimeStamp: 2018-04-03T20:22:38.0560496Z
    Gets_information_on_fault_operations:
      value:
        - OperationId: 00000000-0000-0000-0000-000000000010
          State: Completed
          Type: PartitionDataLoss
        - OperationId: 00000000-0000-0000-0000-000000000020
          State: Completed
          Type: PartitionQuorumLoss
        - OperationId: 00000000-0000-0000-0000-000000000030
          State: Completed
          Type: PartitionRestart
        - OperationId: 00000000-0000-0000-0000-000000000500
          State: Faulted
          Type: NodeTransition
        - OperationId: 00000000-0000-0000-0000-000000000700
          State: Completed
          Type: NodeTransition
        - OperationId: 00000000-0000-0000-0000-000000000710
          State: Completed
          Type: NodeTransition
        - OperationId: 88ef90f9-0b94-46b0-b817-a6ea20c07f8a
          State: Completed
          Type: PartitionRestart
    Gets_information_about_a_completed_NodeTransition_operation:
      value:
        NodeTransitionResult:
          ErrorCode: 0
          NodeResult:
            NodeInstanceId: "131366982707950527"
            NodeName: N0060
        State: Completed
    Gets_information_about_a_running_NodeTransition_operation:
      value:
        State: Running
    Get_information_about_a_partition_data_loss_operation._In_this_case_the_operation_is_a_State_of_Running:
      value:
        State: Running
    Gets_information_about_a_partition_data_loss_operation._In_this_case_the_operation_has_a_State_of_Completed:
      value:
        InvokeDataLossResult:
          ErrorCode: 0
          SelectedPartition:
            PartitionId: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
            ServiceName: fabric:/myapp/myservice
        State: Completed
    Gets_information_about_a_completed_quorum_loss_operation:
      value:
        InvokeQuorumLossResult:
          ErrorCode: 0
          SelectedPartition:
            PartitionId: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
            ServiceName: fabric:/myapp/myservice
        State: Completed
    Gets_information_about_a_running_quorum_operation_operation:
      value:
        State: Running
    Get_information_a_completed_PartitionRestart_operation:
      value:
        RestartPartitionResult:
          ErrorCode: 0
          SelectedPartition:
            PartitionId: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
            ServiceName: fabric:/myapp/myservice
        State: Completed
    Get_information_about_image_store_upload_session_by_a_given_ID:
      value:
        UploadSessions:
          - ExpectedRanges:
              - EndPosition: "402128"
                StartPosition: "0"
              - EndPosition: "2097151"
                StartPosition: "730105"
            FileSize: "2097152"
            ModifiedDate: 2017-09-28T17:06:37.260Z
            SessionId: 4a2340e8-d8d8-497c-95fe-cdaa1052f33b
            StoreRelativePath: SwaggerTest\Common.dll
    Get_information_about_image_store_content_under_a_given_relative_path:
      value:
        StoreFiles:
          - FileSize: "897"
            FileVersion:
              EpochConfigurationNumber: "25769803776"
              EpochDataLossNumber: "131510254310497004"
              VersionNumber: "23"
            ModifiedDate: 2017-09-28T17:44:22.609Z
            StoreRelativePath: Store\CalcServiceApp\ApplicationManifest.2.0.xml
          - FileSize: "66"
            FileVersion:
              EpochConfigurationNumber: "25769803776"
              EpochDataLossNumber: "131510254310497004"
              VersionNumber: "25"
            ModifiedDate: 2017-09-28T17:44:22.468Z
            StoreRelativePath: Store\CalcServiceApp\CalcService.Code.2.0.checksum
          - FileSize: "66"
            FileVersion:
              EpochConfigurationNumber: "25769803776"
              EpochDataLossNumber: "131510254310497004"
              VersionNumber: "26"
            ModifiedDate: 2017-09-28T17:44:22.468Z
            StoreRelativePath: Store\CalcServiceApp\CalcService.Config.1.0.checksum
          - FileSize: "66"
            FileVersion:
              EpochConfigurationNumber: "25769803776"
              EpochDataLossNumber: "131510254310497004"
              VersionNumber: "27"
            ModifiedDate: 2017-09-28T17:44:22.468Z
            StoreRelativePath: Store\CalcServiceApp\CalcService.Data.2.0.checksum
          - FileSize: "744"
            FileVersion:
              EpochConfigurationNumber: "25769803776"
              EpochDataLossNumber: "131510254310497004"
              VersionNumber: "19"
            ModifiedDate: 2017-09-28T17:44:22.578Z
            StoreRelativePath: Store\CalcServiceApp\CalcService.Manifest.2.0.xml
          - FileSize: "66"
            FileVersion:
              EpochConfigurationNumber: "25769803776"
              EpochDataLossNumber: "131510254310497004"
              VersionNumber: "24"
            ModifiedDate: 2017-09-28T17:44:22.484Z
            StoreRelativePath: Store\CalcServiceApp\CalcService.Manifest.2.0.xml.checksum
        StoreFolders:
          - FileCount: "2"
            StoreRelativePath: Store\CalcServiceApp\CalcService.Code.2.0
          - FileCount: "2"
            StoreRelativePath: Store\CalcServiceApp\CalcService.Config.1.0
          - FileCount: "2"
            StoreRelativePath: Store\CalcServiceApp\CalcService.Data.2.0
    Get_information_about_image_store_upload_session_by_a_given_relative_path:
      value:
        UploadSessions:
          - ExpectedRanges:
              - EndPosition: "207615"
                StartPosition: "0"
              - EndPosition: "2097151"
                StartPosition: "626977"
            FileSize: "2097152"
            ModifiedDate: 2017-09-28T17:28:11.627Z
            SessionId: 2032ac6c-a348-4594-86da-dab0f2bb1ae1
            StoreRelativePath: SwaggerTest\Common.dll
          - ExpectedRanges:
              - EndPosition: "616947"
                StartPosition: "0"
              - EndPosition: "2097151"
                StartPosition: "1087529"
            FileSize: "2097152"
            ModifiedDate: 2017-09-28T17:28:11.643Z
            SessionId: fb2da2b2-7cb4-45d2-a2e6-c4888d205bc5
            StoreRelativePath: SwaggerTest\Common.dll
    Get_property_info_list:
      value:
        ContinuationToken: PersistentQueueAppData$131439231986491349
        IsConsistent: true
        Properties:
          - Metadata:
              CustomTypeId: ""
              LastModifiedUtcTimestamp: 2017-07-17T04:27:19.049Z
              Parent: fabric:/samples/apps
              SequenceNumber: "10"
              SizeInBytes: 5
              TypeId: Int64
            Name: CalculatorAppData
          - Metadata:
              CustomTypeId: InitializationDataType
              LastModifiedUtcTimestamp: 2017-07-17T04:36:19.049Z
              Parent: fabric:/samples/apps
              SequenceNumber: "12"
              SizeInBytes: 5
              TypeId: Binary
            Name: PersistentQueueAppData
    Get_property_info_list_with_values:
      value:
        ContinuationToken: PersistentQueueAppData$131439231986491349
        IsConsistent: true
        Properties:
          - Metadata:
              CustomTypeId: ""
              LastModifiedUtcTimestamp: 2017-07-17T04:27:19.049Z
              Parent: fabric:/samples/apps
              SequenceNumber: "10"
              SizeInBytes: 8
              TypeId: Int64
            Name: CalculatorAppData
            Value:
              Data: "4534"
              Kind: Int64
          - Metadata:
              CustomTypeId: InitializationDataType
              LastModifiedUtcTimestamp: 2017-07-17T04:36:19.049Z
              Parent: fabric:/samples/apps
              SequenceNumber: "12"
              SizeInBytes: 5
              TypeId: Binary
            Name: PersistentQueueAppData
            Value:
              Data:
                - 6
                - 7
                - 8
                - 9
                - 10
              Kind: Binary
    Property_batch_operation:
      value:
        ErrorMessage: FABRIC_E_PROPERTY_CHECK_FAILED
        Kind: Failed
        OperationIndex: 1
    Get_property_info:
      value:
        Metadata:
          CustomTypeId: EquationType
          LastModifiedUtcTimestamp: 2017-07-17T04:27:19.049Z
          Parent: fabric:/samples/apps
          SequenceNumber: "12"
          SizeInBytes: 12
          TypeId: String
        Name: CalculatorAppData
        Value:
          Data: 1+2=3
          Kind: String
    Get_sub_names:
      value:
        ContinuationToken: ""
        IsConsistent: true
        SubNames:
          - fabric:/samples/CalculatorApp
          - fabric:/samples/mynames
    Recursively_search_sub_names:
      value:
        ContinuationToken: ""
        IsConsistent: true
        SubNames:
          - fabric:/samples/apps
          - fabric:/samples/data
          - fabric:/samples/CalculatorApp
          - fabric:/samples/CalculatorApp/CalculatorService
          - fabric:/samples/CalculatorApp/CalculatorService/Name-1
          - fabric:/samples/CalculatorApp/CalculatorService/Name-2
          - fabric:/samples/mynames/name-1
    Get_information_about_all_nodes:
      value:
        ContinuationToken: ""
        Items:
          - CodeVersion: 6.3.139.9494
            ConfigVersion: "5"
            FaultDomain: fd:/1
            HealthState: Ok
            Id:
              Id: ebd986a1134b3643a8117fb41b259bf
            InstanceId: "131738274982501335"
            IpAddressOrFQDN: 10.0.0.5
            IsSeedNode: true
            IsStopped: false
            Name: _Node_1
            NodeDeactivationInfo:
              NodeDeactivationIntent: Invalid
              NodeDeactivationStatus: None
              NodeDeactivationTask: []
              PendingSafetyChecks: []
            NodeDownAt: 2018-06-18T20:31:37.374Z
            NodeDownTimeInSeconds: "0"
            NodeStatus: Up
            NodeUpAt: 2018-06-18T20:31:39.842Z
            NodeUpTimeInSeconds: "15275"
            Type: testnode
            UpgradeDomain: "1"
          - CodeVersion: 6.3.139.9494
            ConfigVersion: "5"
            FaultDomain: fd:/0
            HealthState: Ok
            Id:
              Id: 2acb9f55540659b1c95f27cc128ab326
            InstanceId: "131738240209152398"
            IpAddressOrFQDN: 10.0.0.4
            IsSeedNode: true
            IsStopped: false
            Name: _Node_0
            NodeDeactivationInfo:
              NodeDeactivationIntent: Invalid
              NodeDeactivationStatus: None
              NodeDeactivationTask: []
              PendingSafetyChecks: []
            NodeDownAt: 2018-06-18T19:33:39.514Z
            NodeDownTimeInSeconds: "0"
            NodeStatus: Up
            NodeUpAt: 2018-06-18T19:33:52.944Z
            NodeUpTimeInSeconds: "18742"
            Type: testnode
            UpgradeDomain: "0"
          - CodeVersion: 6.3.139.9494
            ConfigVersion: "5"
            FaultDomain: fd:/4
            HealthState: Ok
            Id:
              Id: ba9383d728221add7fa996bf67b757fb
            InstanceId: "131737415865259763"
            IpAddressOrFQDN: 10.0.0.8
            IsSeedNode: true
            IsStopped: false
            Name: _Node_4
            NodeDeactivationInfo:
              NodeDeactivationIntent: Invalid
              NodeDeactivationStatus: None
              NodeDeactivationTask: []
              PendingSafetyChecks: []
            NodeDownAt: 2018-06-17T20:33:11.877Z
            NodeDownTimeInSeconds: "0"
            NodeStatus: Up
            NodeUpAt: 2018-06-17T20:40:07.378Z
            NodeUpTimeInSeconds: "101168"
            Type: testnode
            UpgradeDomain: "4"
          - CodeVersion: 6.3.139.9494
            ConfigVersion: "5"
            FaultDomain: fd:/3
            HealthState: Ok
            Id:
              Id: d6a18a0935a3e39aeae2a049eb97255d
            InstanceId: "131738275300526952"
            IpAddressOrFQDN: 10.0.0.7
            IsSeedNode: true
            IsStopped: false
            Name: _Node_3
            NodeDeactivationInfo:
              NodeDeactivationIntent: Invalid
              NodeDeactivationStatus: None
              NodeDeactivationTask: []
              PendingSafetyChecks: []
            NodeDownAt: 2018-06-18T20:31:59.128Z
            NodeDownTimeInSeconds: "0"
            NodeStatus: Up
            NodeUpAt: 2018-06-18T20:32:18.884Z
            NodeUpTimeInSeconds: "15236"
            Type: testnode
            UpgradeDomain: "3"
          - CodeVersion: 6.3.139.9494
            ConfigVersion: "5"
            FaultDomain: fd:/2
            HealthState: Ok
            Id:
              Id: f2af91e5e9c8254dedb75b1424a9e3fc
            InstanceId: "131738233282843485"
            IpAddressOrFQDN: 10.0.0.6
            IsSeedNode: true
            IsStopped: false
            Name: _Node_2
            NodeDeactivationInfo:
              NodeDeactivationIntent: Invalid
              NodeDeactivationStatus: None
              NodeDeactivationTask: []
              PendingSafetyChecks: []
            NodeDownAt: 2018-06-18T19:22:02.740Z
            NodeDownTimeInSeconds: "0"
            NodeStatus: Up
            NodeUpAt: 2018-06-18T19:22:15.272Z
            NodeUpTimeInSeconds: "19440"
            Type: testnode
            UpgradeDomain: "2"
    Get_a_specific_node_by_node_name:
      value:
        CodeVersion: 6.3.139.9494
        ConfigVersion: "5"
        FaultDomain: fd:/0
        HealthState: Ok
        Id:
          Id: 2acb9f55540659b1c95f27cc128ab326
        InstanceId: "131738240209152398"
        IpAddressOrFQDN: 10.0.0.4
        IsSeedNode: true
        IsStopped: false
        Name: _testnode_0
        NodeDeactivationInfo:
          NodeDeactivationIntent: Invalid
          NodeDeactivationStatus: None
          NodeDeactivationTask: []
          PendingSafetyChecks: []
        NodeDownAt: 2018-06-18T19:33:39.514Z
        NodeDownTimeInSeconds: "0"
        NodeStatus: Up
        NodeUpAt: 2018-06-18T19:33:52.944Z
        NodeUpTimeInSeconds: "18688"
        Type: testnode
        UpgradeDomain: "0"
    Include_health_state_in_the_result:
      value:
        ContinuationToken: ""
        Items:
          - HealthState: Ok
            Id: samples~CalculatorApp
            LogDirectory: C:\SfDevCluster\Data\_App\_Node_0\CalculatorApp_App0\log
            Name: fabric:/samples/CalculatorApp
            Status: Active
            TempDirectory: C:\SfDevCluster\Data\_App\_Node_0\CalculatorApp_App0\temp
            TypeName: CalculatorApp
            WorkDirectory: C:\SfDevCluster\Data\_App\_Node_0\CalculatorApp_App0\work
          - HealthState: Ok
            Id: samples~PQueueApp1
            LogDirectory: C:\SfDevCluster\Data\_App\_Node_0\PersistentQueueApp_App1\log
            Name: fabric:/samples/PQueueApp1
            Status: Active
            TempDirectory: C:\SfDevCluster\Data\_App\_Node_0\PersistentQueueApp_App1\temp
            TypeName: PersistentQueueApp
            WorkDirectory: C:\SfDevCluster\Data\_App\_Node_0\PersistentQueueApp_App1\work
          - HealthState: Ok
            Id: samples~VQueueApp1
            LogDirectory: C:\SfDevCluster\Data\_App\_Node_0\VolatileQueueApp_App2\log
            Name: fabric:/samples/VQueueApp1
            Status: Active
            TempDirectory: C:\SfDevCluster\Data\_App\_Node_0\VolatileQueueApp_App2\temp
            TypeName: VolatileQueueApp
            WorkDirectory: C:\SfDevCluster\Data\_App\_Node_0\VolatileQueueApp_App2\work
    Get_a_specific_deployed_application_by_application_ID_and_include_the_health_state_in_the_result:
      value:
        HealthState: Ok
        Id: samples~CalculatorApp
        LogDirectory: C:\SfDevCluster\Data\_App\_Node_1\CalculatorApp_App0\log
        Name: fabric:/samples/CalculatorApp
        Status: Active
        TempDirectory: C:\SfDevCluster\Data\_App\_Node_1\CalculatorApp_App0\temp
        TypeName: CalculatorApp
        WorkDirectory: C:\SfDevCluster\Data\_App\_Node_1\CalculatorApp_App0\work
    Get_container_logs:
      value:
        ContainerApiResult:
          Body: |
            vEthernet (Container NIC ec5c19b2) 172.17.201.44
          Content-Type: text/plain; charset=utf-8
          Status: 200
    Update_container:
      value:
        ContainerApiResult:
          Body: |
            {"Warnings":null}
          Content-Type: application/json
          Status: 200
    Get_container_logs_for_given_code_package:
      value:
        Content: "HTTP Server started listening on port 8080\r\n"
    Get_container_logs_of_previous_dead_container_for_given_code_package:
      value:
        Content: "Exception encountered: System.Net.Http.HttpRequestException: Response
          status code does not indicate success: 500 (Internal Server Error).\r

          \tat
          System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n"
    Get_last_10_lines_of_container_logs:
      value:
        Content: "UTC Time Now: 04/02/2018 22:06:31\r

          UTC Time Now: 04/02/2018 22:06:32\r

          UTC Time Now: 04/02/2018 22:06:33\r

          UTC Time Now: 04/02/2018 22:06:344\r

          UTC Time Now: 04/02/2018 22:06:35\r

          UTC Time Now: 04/02/2018 22:06:36\r

          UTC Time Now: 04/02/2018 22:06:37\r

          UTC Time Now: 04/02/2018 22:06:38\r

          UTC Time Now: 04/02/2018 22:06:39\r

          UTC Time Now: 04/02/2018 22:06:40\r\n"
    Get_partition_backup_configuration_information:
      value:
        Kind: Partition
        PartitionId: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        PolicyInheritedFrom: Service
        PolicyName: BackupPolicy2
        ServiceName: fabric:/CalcApp/CalcService
        SuspensionInfo:
          IsSuspended: true
          SuspensionInheritedFrom: Partition
    Get_backup_operation_progress:
      value:
        BackupId: 3a056ac9-7206-43c3-8424-6f6103003eba
        BackupLocation: CalcApp\CalcService\1daae3f5-7fd6-42e9-b1ba-8c05f873994d\2018-01-01
          09.00.55.zip
        BackupState: Success
        EpochOfLastBackupRecord:
          ConfigurationVersion: "8589934592"
          DataLossVersion: "131462452931584510"
        LsnOfLastBackupRecord: "261"
        TimeStampUtc: 2018-01-01T09:00:55Z
    Get_restore_operation_progress:
      value:
        RestoreState: Success
        RestoredEpoch:
          ConfigurationVersion: "8589934592"
          DataLossVersion: "131462452931584510"
        RestoredLsn: "261"
        TimeStampUtc: 2018-01-01T09:00:55Z
    ListMeshApplications:
      value:
        ContinuationToken: ""
        Items:
          - identity:
              principalId: 84DFA616-1F44-4D63-BC08-43B5F758D16C
              tenantId: D47A6CD5-E870-4ADF-8C00-1C0B758BC567
              tokenServiceEndpoint: http://tokenservice
              type: SystemAssigned,UserAssigned
              userAssignedIdentities:
                /subscriptions/c1089427-83d3-4286-9f35-5af546a6eb67/resourcegroups/myGroup/providers/Microsoft.Identity/Identities/identity1:
                  clientId: 5287A675-78D2-4E49-BF09-D3BFE02493D4
                  principalId: 7D6F0B1C-AF9F-4E21-9B3C-AE22F4D926F8
                /subscriptions/c1089427-83d3-4286-9f35-5af546a6eb67/resourcegroups/myGroup/providers/Microsoft.Identity/Identities/identity2:
                  clientId: AF1509EC-9B5F-43CC-8A6F-FA7CC84AEBE1
                  principalId: 31144ACF-46F4-4639-A711-A257229EE0C0
            name: sampleApplication
            properties:
              description: Service Fabric Mesh sample application.
              healthState: Ok
              serviceNames:
                - helloWorldService
              status: Ready
    GetApplicationResource:
      value:
        identity:
          principalId: 84DFA616-1F44-4D63-BC08-43B5F758D16C
          tenantId: D47A6CD5-E870-4ADF-8C00-1C0B758BC567
          tokenServiceEndpoint: http://tokenservice
          type: SystemAssigned,UserAssigned
          userAssignedIdentities:
            /subscriptions/c1089427-83d3-4286-9f35-5af546a6eb67/resourcegroups/myGroup/providers/Microsoft.Identity/Identities/identity1:
              clientId: 5287A675-78D2-4E49-BF09-D3BFE02493D4
              principalId: 7D6F0B1C-AF9F-4E21-9B3C-AE22F4D926F8
            /subscriptions/c1089427-83d3-4286-9f35-5af546a6eb67/resourcegroups/myGroup/providers/Microsoft.Identity/Identities/identity2:
              clientId: AF1509EC-9B5F-43CC-8A6F-FA7CC84AEBE1
              principalId: 31144ACF-46F4-4639-A711-A257229EE0C0
        name: sampleApplication
        properties:
          description: Service Fabric Mesh sample application.
          healthState: Ok
          serviceNames:
            - helloWorldService
          status: Ready
    CreateOrUpdateMeshApplication:
      value:
        identity:
          principalId: 84DFA616-1F44-4D63-BC08-43B5F758D16C
          tenantId: D47A6CD5-E870-4ADF-8C00-1C0B758BC567
          tokenServiceEndpoint: http://tokenservice
          type: SystemAssigned,UserAssigned
          userAssignedIdentities:
            /subscriptions/c1089427-83d3-4286-9f35-5af546a6eb67/resourcegroups/myGroup/providers/Microsoft.Identity/Identities/identity1:
              clientId: 5287A675-78D2-4E49-BF09-D3BFE02493D4
              principalId: 7D6F0B1C-AF9F-4E21-9B3C-AE22F4D926F8
            /subscriptions/c1089427-83d3-4286-9f35-5af546a6eb67/resourcegroups/myGroup/providers/Microsoft.Identity/Identities/identity2:
              clientId: AF1509EC-9B5F-43CC-8A6F-FA7CC84AEBE1
              principalId: 31144ACF-46F4-4639-A711-A257229EE0C0
        name: sampleApplication
        properties:
          description: Service Fabric Mesh sample application.
          healthState: Unknown
          serviceNames:
            - helloWorldService
          status: Creating
    CreateOrUpdateMeshApplicationWithAutoScale:
      value:
        name: sampleApplication
        properties:
          description: Service Fabric Mesh sample application.
          healthState: Unknown
          serviceNames:
            - helloWorldService
          status: Creating
    ListMeshServices:
      value:
        ContinuationToken: ""
        Items:
          - name: helloWorldService
            properties:
              codePackages:
                - endpoints:
                    - name: helloWorldListener
                      port: 80
                  image: seabreeze/sbz-helloworld:1.0-alpine
                  name: helloWorldCode
                  resources:
                    requests:
                      cpu: 1
                      memoryInGB: 1
              description: SeaBreeze Hello World Service.
              healthState: Ok
              networkRefs:
                - endpointRefs:
                    - name: helloWorldListener
                  name: sampleNetwork
              osType: Linux
              replicaCount: 1
              status: Ready
    GetServiceResource:
      value:
        name: helloWorldService
        properties:
          codePackages:
            - endpoints:
                - name: helloWorldListener
                  port: 80
              image: seabreeze/sbz-helloworld:1.0-alpine
              name: helloWorldCode
              resources:
                requests:
                  cpu: 1
                  memoryInGB: 1
          description: SeaBreeze Hello World Service.
          healthState: Ok
          networkRefs:
            - endpointRefs:
                - name: helloWorldListener
              name: sampleNetwork
          osType: Linux
          replicaCount: 1
          status: Ready
    ListMeshServiceReplicas:
      value:
        ContinuationToken: ""
        Items:
          - codePackages:
              - endpoints:
                  - name: helloWorldListener
                    port: 80
                image: seabreeze/sbz-helloworld:1.0-alpine
                instanceView:
                  currentState:
                    exitCode: "0"
                    state: Running
                  previousState:
                    exitCode: "0"
                    state: NotSpecified
                  restartCount: 1
                name: helloWorldCode
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
            networkRefs:
              - endpointRefs:
                  - name: helloWorldListener
                name: sampleNetwork
            osType: Linux
            replicaName: "0"
          - codePackages:
              - endpoints:
                  - name: helloWorldListener
                    port: 80
                image: seabreeze/sbz-helloworld:1.0-alpine
                instanceView:
                  currentState:
                    exitCode: "0"
                    state: Running
                  previousState:
                    exitCode: "0"
                    state: NotSpecified
                  restartCount: 1
                name: helloWorldCode
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
            networkRefs:
              - endpointRefs:
                  - name: helloWorldListener
                name: sampleNetwork
            osType: Linux
            replicaName: "1"
    GetServiceReplica:
      value:
        codePackages:
          - endpoints:
              - name: helloWorldListener
                port: 80
            image: seabreeze/sbz-helloworld:1.0-alpine
            instanceView:
              currentState:
                exitCode: "0"
                state: Running
              previousState:
                exitCode: "0"
                state: NotSpecified
              restartCount: 1
            name: helloWorldCode
            resources:
              requests:
                cpu: 1
                memoryInGB: 1
        networkRefs:
          - endpointRefs:
              - name: helloWorldListener
            name: sampleNetwork
        osType: Linux
        replicaName: "0"
    GetContainerLogs:
      value:
        Content: >2
           * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
           * Downloading style https://assets-cdn.github.com/assets/frameworks-8f281eb0a8d2308ceb36e714ba3c3aec.css
           * Downloading style https://assets-cdn.github.com/assets/github-a698da0d53574b056d3c79ac732d4a70.css
           * Downloading style https://assets-cdn.github.com/assets/site-83dc1f7ebc9c7461fe1eab799b56c4c4.css
           * Cached all downloads in /root/.grip/cache-4.5.2
          167.220.0.83 - - [06/Apr/2018 07:16:02] "GET / HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:02] "GET /__/grip/asset/frameworks-8f281eb0a8d2308ceb36e714ba3c3aec.css HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:02] "GET /__/grip/asset/site-83dc1f7ebc9c7461fe1eab799b56c4c4.css HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:02] "GET /__/grip/asset/github-a698da0d53574b056d3c79ac732d4a70.css HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:02] "GET /__/grip/static/octicons/octicons.css HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:03] "GET /__/grip/static/octicons/octicons.woff2?ef21c39f0ca9b1b5116e5eb7ac5eabe6 HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:03] "GET /__/grip/static/favicon.ico HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:05] "GET /seabreeze-index.md HTTP/1.1" 200 -

          167.220.0.83 - - [06/Apr/2018 07:16:09] "GET /seabreeze-api-application_get.md HTTP/1.1" 200 -
    ListMeshGateways:
      value:
        ContinuationToken: ""
        Items:
          - name: sampleGateway
            properties:
              description: Service Fabric Mesh sample gateway.
              destinationNetwork:
                name: helloWorldNetwork
              http:
                - hosts:
                    - name: contoso.com
                      routes:
                        - destination:
                            applicationName: httpHelloWorldApp
                            endpointName: indexHttpEndpoint
                            serviceName: indexService
                          match:
                            headers:
                              - name: accept
                                type: exact
                                value: application/json
                            path:
                              rewrite: /
                              type: prefix
                              value: /index
                          name: index
                  name: contosoWebsite
                  port: 8081
              ipAddress: 192.168.1.1
              sourceNetwork:
                name: Open
              status: Ready
              tcp:
                - destination:
                    applicationName: helloWorldApp
                    endpointName: helloWorldListener
                    serviceName: helloWorldService
                  name: web
                  port: 80
    GetGatewayResource:
      value:
        name: sampleGateway
        properties:
          description: Service Fabric Mesh sample gateway.
          destinationNetwork:
            name: helloWorldNetwork
          http:
            - hosts:
                - name: contoso.com
                  routes:
                    - destination:
                        applicationName: httpHelloWorldApp
                        endpointName: indexHttpEndpoint
                        serviceName: indexService
                      match:
                        headers:
                          - name: accept
                            type: exact
                            value: application/json
                        path:
                          rewrite: /
                          type: prefix
                          value: /index
                      name: index
              name: contosoWebsite
              port: 8081
          ipAddress: 192.168.1.1
          sourceNetwork:
            name: Open
          status: Ready
          tcp:
            - destination:
                applicationName: helloWorldApp
                endpointName: helloWorldListener
                serviceName: helloWorldService
              name: web
              port: 80
    CreateOrUpdateMeshGateway:
      value:
        name: sampleGateway
        properties:
          description: Service Fabric Mesh Hello World sample gateway.
          destinationNetwork:
            name: helloWorldNetwork
          http:
            - hosts:
                - name: contoso.com
                  routes:
                    - destination:
                        applicationName: httpHelloWorldApp
                        endpointName: indexHttpEndpoint
                        serviceName: indexService
                      match:
                        headers:
                          - name: accept
                            type: exact
                            value: application/json
                        path:
                          rewrite: /
                          type: prefix
                          value: /index
                      name: index
              name: contosoWebsite
              port: 8081
          ipAddress: ""
          sourceNetwork:
            name: Open
          status: Creating
          tcp:
            - destination:
                applicationName: helloWorldApp
                endpointName: helloWorldListener
                serviceName: helloWorldService
              name: web
              port: 80
    ListMeshNetworks:
      value:
        ContinuationToken: ""
        Items:
          - name: sampleNetwork
            properties:
              description: Service Fabric Mesh sample network.
              kind: Local
              networkAddressPrefix: 2.0.0.0/16
              status: Ready
    GetNetworkResource:
      value:
        name: sampleNetwork
        properties:
          description: Service Fabric Mesh sample network.
          kind: Local
          networkAddressPrefix: 2.0.0.0/16
          status: Ready
    CreateOrUpdateMeshNetwork:
      value:
        name: sampleNetwork
        properties:
          description: Service Fabric Mesh sample network.
          kind: Local
          networkAddressPrefix: 2.0.0.0/16
          status: Creating
    ListMeshSecrets:
      value:
        ContinuationToken: ""
        Items:
          - name: dbConnectionString
            properties:
              contentType: text/plain
              description: Mongo DB connection string for backend database!
              kind: inlinedValue
              status: Ready
          - name: contosoServiceApiKey
            properties:
              contentType: text/plain
              description: API Key to access contoso service APIs
              kind: inlinedValue
              status: Ready
    GetSecretResource:
      value:
        name: dbConnectionString
        properties:
          contentType: text/plain
          description: Mongo DB connection string for backend database!
          kind: inlinedValue
          status: Ready
    CreateOrUpdateMeshSecret:
      value:
        name: dbConnectionString
        properties:
          contentType: text/plain
          description: Mongo DB connection string for backend database!
          kind: inlinedValue
          status: Creating
    ListMeshSecretValues:
      value:
        ContinuationToken: ""
        Items:
          - name: v1
            properties: {}
          - name: v2
            properties: {}
    GetMeshSecretValue:
      value:
        name: v1
        properties: {}
    CreateMeshSecretValue:
      value:
        name: v1
        properties: {}
    ListMeshSecretValue:
      value:
        value: mongodb://contoso123:0Fc3IolnL12312asdfawejunASDF@asdfYXX2t8a97kghVcUzcDv98hawelufhawefafnoQRGwNj2nMPL1Y9qsIr9Srdw==@contoso123.documents.azure.com:10255/mydatabase?ssl=true
    ListMeshVolumes:
      value:
        ContinuationToken: ""
        Items:
          - name: sampleVolume
            properties:
              azureFileParameters:
                accountName: sbzdemoaccount
                shareName: sharel
              description: Service Fabric Mesh sample volume.
              provider: SFAzureFile
              status: Ready
    GetVolumeResource:
      value:
        name: sampleVolume
        properties:
          azureFileParameters:
            accountName: sbzdemoaccount
            shareName: sharel
          description: Service Fabric Mesh sample volume.
          provider: SFAzureFile
          status: Ready
    CreateOrUpdateMeshVolume:
      value:
        name: sampleVolume
        properties:
          azureFileParameters:
            accountName: sbzdemoaccount
            shareName: sharel
          description: Service Fabric Mesh Hello World sample volume.
          provider: SFAzureFile
          status: Creating
    Get_Chaos_events_given_a_time_range:
      value:
        ContinuationToken: ""
        History:
          - ChaosEvent:
              ChaosParameters:
                ClusterHealthPolicy:
                  ApplicationTypeHealthPolicyMap:
                    - Key: myapp
                      Value: 3
                  ConsiderWarningAsError: true
                  MaxPercentUnhealthyApplications: 10
                  MaxPercentUnhealthyNodes: 0
                Context:
                  Map:
                    k1: v1
                    k2: v2
                    k3: v5
                EnableMoveReplicaFaults: true
                MaxClusterStabilizationTimeoutInSeconds: 30
                MaxConcurrentFaults: 3
                TimeToRunInSeconds: "3600"
                WaitTimeBetweenFaultsInSeconds: 1
                WaitTimeBetweenIterationsInSeconds: 10
              Kind: Started
              TimeStampUtc: 2017-04-14T04:27:19.049Z
          - ChaosEvent:
              Faults:
                - "ActionType: RestartReplica, ServiceUri:
                  fabric:/TestApp1/PersistServ_6R_1, PartitionId:
                  6a91b09a-bd76-45da-afaa-ed0fd9bfe7d2, ReplicaId:
                  131366172775684622"
                - "ActionType: CodePackageRestart, NodeName: N0050,
                  ApplicationName: fabric:/TestApp1, ServiceManifestName: SP1,
                  ServiceManifestName: , CodePackageName: CP1."
                - "ActionType: RestartReplica, ServiceUri:
                  fabric:/TestApp1/PersistServ_6R_3, PartitionId:
                  baa3a51e-5c42-435e-89d3-6e97b2164661, ReplicaId:
                  131366172988968762"
              Kind: ExecutingFaults
              TimeStampUtc: 2017-04-14T04:27:20.667Z
  parameters:
    ApiVersion_6-0-Preview_RequiredQueryParam:
      description: The version of the API. This parameter is required and its value must be
        '"6.0-preview'.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-0-Preview_RequiredQueryParam
        values:
          - description: The version number for the preview functionality of 6.0 runtime.
            value: 6.0-preview
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - 6.0-preview
        default: 6.0-preview
    ApiVersion_6-0_RequiredQueryParam:
      description: >-
        The version of the API. This parameter is required and its value must be
        '6.0'.


        Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


        Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-0_RequiredQueryParam
        values:
          - description: The 6.0 version of the API.
            value: "6.0"
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - "6.0"
        default: "6.0"
      examples:
        Start upgrading the configuration of a Service Fabric standalone cluster:
          value: "6.0"
        Exclude application parameters from the result:
          value: "6.0"
        Limit maximum results:
          value: "6.0"
        Page using continuation token:
          value: "6.0"
        Get information about all nodes.:
          value: "6.0"
        Create application.:
          value: "6.0"
        Get a specific application by application id:
          value: "6.0"
        Basic stateful service:
          value: "6.0"
        Basic stateless service:
          value: "6.0"
        Stateful service with named partitions and auto scaling:
          value: "6.0"
        Stateless service with dns name and auto scaling:
          value: "6.0"
        Gets information on fault operations:
          value: "6.0"
        Gets information about a completed NodeTransition operation:
          value: "6.0"
        Gets information about a running NodeTransition operation:
          value: "6.0"
        Get information about a partition data loss operation.  In this case the operation is a State of Running:
          value: "6.0"
        Gets information about a partition data loss operation.  In this case the operation has a State of Completed:
          value: "6.0"
        Gets information about a completed quorum loss operation:
          value: "6.0"
        Gets information about a running quorum operation operation:
          value: "6.0"
        Get information a completed PartitionRestart operation:
          value: "6.0"
        Get information about image store upload session by a given ID:
          value: "6.0"
        Get information about image store upload session by a given relative path:
          value: "6.0"
        Create new name:
          value: "6.0"
        Get property info list:
          value: "6.0"
        Get property info list with values:
          value: "6.0"
        Property batch operation:
          value: "6.0"
        Get property info:
          value: "6.0"
        Put custom property:
          value: "6.0"
        Put property:
          value: "6.0"
        Get sub names:
          value: "6.0"
        Recursively search sub names:
          value: "6.0"
        Get a specific node by node name:
          value: "6.0"
        Stateful service:
          value: "6.0"
        Stateless service:
          value: "6.0"
    ApiVersion_6-1_RequiredQueryParam:
      description: >-
        The version of the API. This parameter is required and its value must be
        '6.1'.


        Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


        Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-1_RequiredQueryParam
        values:
          - description: The 6.1 version of the API.
            value: "6.1"
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - "6.1"
        default: "6.1"
      examples:
        Limit maximum results:
          value: "6.1"
        Page using continuation token:
          value: "6.1"
        Include health state in the result:
          value: "6.1"
        Get a specific deployed application by application ID and include the health state in the result:
          value: "6.1"
    ApiVersion_6-2-Preview_RequiredQueryParam:
      description: The version of the API. This parameter is required and its value must be
        '6.2-preview'.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-2-Preview_RequiredQueryParam
        values:
          - description: The version number for the preview functionality of 6.2 runtime
            value: 6.2-preview
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - 6.2-preview
        default: 6.2-preview
    ApiVersion_6-2_RequiredQueryParam:
      description: >-
        The version of the API. This parameter is required and its value must be
        '6.2'.


        Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


        Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-2_RequiredQueryParam
        values:
          - description: The 6.2 version of the API.
            value: "6.2"
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - "6.2"
        default: "6.2"
      examples:
        Get information about image store content under a given relative path:
          value: "6.2"
        Get container logs:
          value: "6.2"
        Update container:
          value: "6.2"
        Get container logs for given code package:
          value: "6.2"
        Get container logs of previous dead container for given code package:
          value: "6.2"
        Get last 10 lines of container logs:
          value: "6.2"
        Get Chaos events given a time range:
          value: "6.2"
    ApiVersion_6-3-Preview_RequiredQueryParam:
      description: The version of the API. This parameter is required and its value must be
        '6.3-preview'.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-3-Preview_RequiredQueryParam
        values:
          - description: The version number for the preview functionality of 6.3 runtime
            value: 6.3-preview
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - 6.3-preview
        default: 6.3-preview
    ApiVersion_6-3_RequiredQueryParam:
      description: >-
        The version of the API. This parameter is required and its value must be
        '6.3'.


        Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


        Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-3_RequiredQueryParam
        values:
          - description: The 6.3 version of the API.
            value: "6.3"
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - "6.3"
        default: "6.3"
      examples:
        Get information about all nodes:
          value: "6.3"
        Limit maximum results:
          value: "6.3"
        Page using continuation token:
          value: "6.3"
    ApiVersion_6-4-Preview_RequiredQueryParam:
      description: The version of the API. This parameter is required and its value must be
        '6.4-preview'.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-4-Preview_RequiredQueryParam
        values:
          - description: The version number for the preview functionality of 6.4 runtime
            value: 6.4-preview
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - 6.4-preview
        default: 6.4-preview
      examples:
        ListMeshApplications:
          value: 6.4-preview
        DeleteApplicationResource:
          value: 6.4-preview
        GetApplicationResource:
          value: 6.4-preview
        CreateOrUpdateMeshApplication:
          value: 6.4-preview
        CreateOrUpdateMeshApplicationWithAutoScale:
          value: 6.4-preview
        ListMeshServices:
          value: 6.4-preview
        GetServiceResource:
          value: 6.4-preview
        ListMeshServiceReplicas:
          value: 6.4-preview
        GetServiceReplica:
          value: 6.4-preview
        GetContainerLogs:
          value: 6.4-preview
        ListMeshGateways:
          value: 6.4-preview
        DeleteGatewayResource:
          value: 6.4-preview
        GetGatewayResource:
          value: 6.4-preview
        CreateOrUpdateMeshGateway:
          value: 6.4-preview
        ListMeshNetworks:
          value: 6.4-preview
        DeleteNetworkResource:
          value: 6.4-preview
        GetNetworkResource:
          value: 6.4-preview
        CreateOrUpdateMeshNetwork:
          value: 6.4-preview
        ListMeshSecrets:
          value: 6.4-preview
        DeleteSecretResource:
          value: 6.4-preview
        GetSecretResource:
          value: 6.4-preview
        CreateOrUpdateMeshSecret:
          value: 6.4-preview
        ListMeshSecretValues:
          value: 6.4-preview
        DeleteSecretValue:
          value: 6.4-preview
        GetMeshSecretValue:
          value: 6.4-preview
        CreateMeshSecretValue:
          value: 6.4-preview
        ListMeshSecretValue:
          value: 6.4-preview
        ListMeshVolumes:
          value: 6.4-preview
        DeleteVolumeResource:
          value: 6.4-preview
        GetVolumeResource:
          value: 6.4-preview
        CreateOrUpdateMeshVolume:
          value: 6.4-preview
    ApiVersion_6-4_RequiredQueryParam:
      description: >-
        The version of the API. This parameter is required and its value must be
        '6.4'.


        Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


        Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-4_RequiredQueryParam
        values:
          - description: The 6.4 version of the API.
            value: "6.4"
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - "6.4"
        default: "6.4"
      examples:
        Get cluster version:
          value: "6.4"
        Disable application backup:
          value: "6.4"
        Enable application backup:
          value: "6.4"
        Limit maximum results:
          value: "6.4"
        Page using continuation token:
          value: "6.4"
        Get application backups within a time range:
          value: "6.4"
        Get latest backup:
          value: "6.4"
        Resume application backup:
          value: "6.4"
        Suspend application backup:
          value: "6.4"
        Create a frequency based backup policy with file share as backup location:
          value: "6.4"
        Create a time based backup policy with Azure as backup location:
          value: "6.4"
        Get backup policy by name:
          value: "6.4"
        Delete backup policy:
          value: "6.4"
        Update backup policy:
          value: "6.4"
        Get Applications-related events:
          value: "6.4"
        Get Application-related events:
          value: "6.4"
        Get Cluster-related events:
          value: "6.4"
        Get Correlated events:
          value: "6.4"
        Get Nodes-related events:
          value: "6.4"
        Get Node-related events:
          value: "6.4"
        Get Partitions-related events:
          value: "6.4"
        Get Partition-related events:
          value: "6.4"
        Get Partition Replicas-related events:
          value: "6.4"
        Get Partition Replica-related events:
          value: "6.4"
        Get Services-related events:
          value: "6.4"
        Get Service-related events:
          value: "6.4"
        Backup partition:
          value: "6.4"
        Backup partition to a specific Azure storage account:
          value: "6.4"
        Backup partition to a specific on-premise file share:
          value: "6.4"
        Disable partition backup:
          value: "6.4"
        Enable partition backup:
          value: "6.4"
        Get partition backup configuration information:
          value: "6.4"
        Get backup operation progress:
          value: "6.4"
        Get restore operation progress:
          value: "6.4"
        Trigger partition restore:
          value: "6.4"
        Resume partition backup:
          value: "6.4"
        Suspend partition backup:
          value: "6.4"
        Disable service backup:
          value: "6.4"
        Enable service backup:
          value: "6.4"
        Resume service backup:
          value: "6.4"
        Suspend service backup:
          value: "6.4"
    ApiVersion_6-5_RequiredQueryParam:
      description: >-
        The version of the API. This parameter is required and its value must be
        '6.5'.


        Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.


        Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
      in: query
      name: api-version
      required: true
      x-ms-enum:
        modelAsString: true
        name: ApiVersion_6-5_RequiredQueryParam
        values:
          - description: The 6.5 version of the API.
            value: "6.5"
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - "6.5"
        default: "6.5"
    ApplicationDefinitionKindFilterOptionalQueryParam:
      description: >-
        Used to filter on ApplicationDefinitionKind, which is the mechanism used
        to define a Service Fabric application.

        - Default - Default value, which performs the same function as selecting "All". The value is 0.

        - All - Filter that matches input with any ApplicationDefinitionKind value. The value is 65535.

        - ServiceFabricApplicationDescription - Filter that matches input with ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1.

        - Compose - Filter that matches input with ApplicationDefinitionKind value Compose. The value is 2.
      in: query
      name: ApplicationDefinitionKindFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    ApplicationIdRequiredPathParam:
      description: >-
        The identity of the application. This is typically the full name of the
        application without the 'fabric:' URI scheme.

        Starting from version 6.0, hierarchical names are delimited with the "~" character.

        For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
      in: path
      name: applicationId
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        Get a specific application by application id:
          value: samples~CalculatorApp
        Disable application backup:
          value: CalcApp
        Enable application backup:
          value: CalcApp
        Limit maximum results:
          value: CalcApp
        Page using continuation token:
          value: CalcApp
        Get application backups within a time range:
          value: CalcApp
        Get latest backup:
          value: CalcApp
        Basic stateful service:
          value: test
        Basic stateless service:
          value: test
        Stateful service with named partitions and auto scaling:
          value: test
        Stateless service with dns name and auto scaling:
          value: test
        Resume application backup:
          value: CalcApp
        Suspend application backup:
          value: CalcApp
        Get Application-related events:
          value: app1
        Get a specific deployed application by application ID and include the health state in the result:
          value: samples~CalculatorApp
        Get container logs:
          value: samples/winnodejs
        Update container:
          value: samples/nodejs1
        Get container logs for given code package:
          value: SimpleHttpServerApp
        Get container logs of previous dead container for given code package:
          value: SimpleHttpServerApp
        Get last 10 lines of container logs:
          value: SimpleHttpServerApp
    ApplicationNameRequiredQueryParam:
      description: The name of application to create from compose file. This is typically
        the full name of the application including 'fabric:' URI scheme.
      in: query
      name: ApplicationName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    ApplicationResourceNameRequiredPathParam:
      description: The identity of the application.
      in: path
      name: applicationResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        DeleteApplicationResource:
          value: sampleApplication
        GetApplicationResource:
          value: sampleApplication
        CreateOrUpdateMeshApplication:
          value: sampleApplication
        CreateOrUpdateMeshApplicationWithAutoScale:
          value: sampleApplication
        ListMeshServices:
          value: sampleApplication
        GetServiceResource:
          value: sampleApplication
        ListMeshServiceReplicas:
          value: sampleApplication
        GetServiceReplica:
          value: sampleApplication
        GetContainerLogs:
          value: sbzDocApp
    ApplicationTypeDefinitionKindFilterOptionalQueryParam:
      description: >-
        Used to filter on ApplicationTypeDefinitionKind which is the mechanism
        used to define a Service Fabric application type.

        - Default - Default value, which performs the same function as selecting "All". The value is 0.

        - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535.

        - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1.

        - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
      in: query
      name: ApplicationTypeDefinitionKindFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    ApplicationTypeNameOptionalQueryParam:
      description: The application type name used to filter the applications to query for.
        This value should not contain the application type version.
      in: query
      name: ApplicationTypeName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ApplicationTypeNameRequiredPathParam:
      description: The name of the application type.
      in: path
      name: applicationTypeName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get information about all nodes.:
          value: Application2Type
    ApplicationTypeVersionOptionalQueryParam:
      description: The version of the application type.
      in: query
      name: ApplicationTypeVersion
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ApplicationTypeVersionRequiredQueryParam:
      description: The version of the application type.
      in: query
      name: ApplicationTypeVersion
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get information about all nodes.:
          value: 1.0.0
    ApplicationsHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering of the application health state objects returned in the
        result of cluster health

        query based on their health state.

        The possible values for this parameter include integer value obtained from members or bitwise operations

        on members of HealthStateFilter enumeration. Only applications that match the filter are returned.

        All applications are used to evaluate the aggregated health state. If not specified, all entries are returned.

        The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

        For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: ApplicationsHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    BackupPolicyNameRequiredPathParam:
      description: The name of the backup policy.
      in: path
      name: backupPolicyName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get backup policy by name:
          value: DailyAzureBackupPolicy
        Delete backup policy:
          value: SampleBackupPolicy
        Limit maximum results:
          value: DailyAzureBackupPolicy
        Page using continuation token:
          value: DailyAzureBackupPolicy
        Update backup policy:
          value: DailyAzureBackupPolicy
    BackupTimeoutOptionalQueryParam:
      description: Specifies the maximum amount of time, in minutes, to wait for the backup
        operation to complete. Post that, the operation completes with timeout
        error. However, in certain corner cases it could be that though the
        operation returns back timeout, the backup actually goes through. In
        case of timeout error, its recommended to invoke this operation again
        with a greater timeout value. The default value for the same is 10
        minutes.
      in: query
      name: BackupTimeout
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 10
    CodePackageInstanceIdRequiredQueryParam:
      description: ID that uniquely identifies a code package instance deployed on a
        service fabric node.
      in: query
      name: CodePackageInstanceId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get container logs:
          value: "131668159770315380"
        Update container:
          value: "131673596679688285"
    CodePackageNameOptionalQueryParam:
      description: The name of code package specified in service manifest registered as
        part of an application type in a Service Fabric cluster.
      in: query
      name: CodePackageName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    CodePackageNameRequiredPathParam:
      description: The name of code package of the service.
      in: path
      name: codePackageName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        GetContainerLogs:
          value: sbzDocCode
    CodePackageNameRequiredQueryParam:
      description: The name of code package specified in service manifest registered as
        part of an application type in a Service Fabric cluster.
      in: query
      name: CodePackageName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get container logs:
          value: NodeService.Code
        Update container:
          value: Code
        Get container logs for given code package:
          value: Code
        Get container logs of previous dead container for given code package:
          value: Code
        Get last 10 lines of container logs:
          value: Code
    CodeVersionOptionalQueryParam:
      description: The product version of Service Fabric.
      in: query
      name: CodeVersion
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ConfigVersionOptionalQueryParam:
      description: The config version of Service Fabric.
      in: query
      name: ConfigVersion
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ConfigurationApiVersionRequiredQueryParam:
      description: The API version of the Standalone cluster json configuration.
      in: query
      name: ConfigurationApiVersion
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    ContinuationTokenOptionalQueryParam:
      description: The continuation token parameter is used to obtain next set of results.
        A continuation token with a non-empty value is included in the response
        of the API when the results from the system do not fit in a single
        response. When this value is passed to the next API call, the API
        returns next set of results. If there are no further results, then the
        continuation token does not contain a value. The value of this parameter
        should not be URL encoded.
      in: query
      name: ContinuationToken
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      allowReserved: true
      examples:
        Page using continuation token:
          value: fabric:/CalcApp/CalcService#1daae3f5-7fd6-42e9-b1ba-8c05f873994d#7903dc2a-228d-44b0-b7c8-a13a6c9b46bd
    CurrentNodeNameRequiredParam:
      description: The name of the source node for secondary replica move.
      in: query
      name: CurrentNodeName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    DataLossModeRequiredQueryParam:
      description: This enum is passed to the StartDataLoss API to indicate what type of
        data loss to induce.
      in: query
      name: DataLossMode
      required: true
      x-ms-enum:
        modelAsString: true
        name: DataLossMode
        values:
          - description: Reserved.  Do not pass into API.
            value: Invalid
          - description: PartialDataLoss option will cause a quorum of replicas to go down,
              triggering an OnDataLoss event in the system for the given
              partition.
            value: PartialDataLoss
          - description: FullDataLoss option will drop all the replicas which means that
              all the data will be lost.
            value: FullDataLoss
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - Invalid
          - PartialDataLoss
          - FullDataLoss
    DeployedApplicationsHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering of the deployed applications health state objects
        returned in the result of application health query based on their health
        state.

        The possible values for this parameter include integer value of one of the following health states. Only deployed applications that match the filter will be returned.

        All deployed applications are used to evaluate the aggregated health state. If not specified, all entries are returned.

        The state values are flag-based enumeration, so the value could be a combination of these values, obtained using bitwise 'OR' operator.

        For example, if the provided value is 6 then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: DeployedApplicationsHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    DeployedServicePackagesHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering of the deployed service package health state objects
        returned in the result of deployed application health query based on
        their health state.

        The possible values for this parameter include integer value of one of the following health states.

        Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the aggregated health state of the deployed application.

        If not specified, all entries are returned.

        The state values are flag-based enumeration, so the value can be a combination of these values, obtained using the bitwise 'OR' operator.

        For example, if the provided value is 6 then health state of service packages with HealthState value of OK (2) and Warning (4) are returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: DeployedServicePackagesHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    DeployedServiceType_ServiceManifestNameOptionalQueryParam:
      description: The name of the service manifest to filter the list of deployed service
        type information. If specified, the response will only contain the
        information about service types that are defined in this service
        manifest.
      in: query
      name: ServiceManifestName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    DeploymentNameRequiredPathParam:
      description: The identity of the deployment.
      in: path
      name: deploymentName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
    EndDateTimeFilterOptionalQueryParam:
      description: Specify the end date time till which to enumerate backups, in datetime
        format. The date time must be specified in ISO8601 format. This is an
        optional parameter. If not specified, enumeration is done till the most
        recent backup.
      in: query
      name: EndDateTimeFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
        format: date-time
      examples:
        Get application backups within a time range:
          value: 2018-01-01T23:59:59Z
    EndTimeUtcOptionalQueryParam:
      description: The Windows file time representing the end time of the time range for
        which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc
        Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx)
        for details.
      in: query
      name: EndTimeUtc
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Chaos events given a time range:
          value: "3155378975999999999"
    EndTimeUtcRequiredQueryParam:
      description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
      in: query
      name: EndTimeUtc
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Applications-related events:
          value: 2018-04-04T18:00:00Z
        Get Application-related events:
          value: 2018-04-04T18:00:00Z
        Get Cluster-related events:
          value: 2018-04-04T18:00:00Z
        Get Nodes-related events:
          value: 2018-04-04T18:00:00Z
        Get Node-related events:
          value: 2018-04-04T18:00:00Z
        Get Partitions-related events:
          value: 2018-04-04T18:00:00Z
        Get Partition-related events:
          value: 2018-04-04T18:00:00Z
        Get Partition Replicas-related events:
          value: 2018-04-04T18:00:00Z
        Get Partition Replica-related events:
          value: 2018-04-04T18:00:00Z
        Get Services-related events:
          value: 2018-04-04T18:00:00Z
        Get Service-related events:
          value: 2018-04-04T18:00:00Z
    EventInstanceIdRequiredPathParam:
      description: The EventInstanceId.
      in: path
      name: eventInstanceId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Correlated events:
          value: e00fa5b7-f747-40dd-9e09-f5a031e96de4
    EventsHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering the collection of HealthEvent objects returned based on
        health state.

        The possible values for this parameter include integer value of one of the following health states.

        Only events that match the filter are returned. All events are used to evaluate the aggregated health state.

        If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: EventsHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    EventsTypesFilterOptionalQueryParam:
      description: This is a comma separated string specifying the types of FabricEvents
        that should only be included in the response.
      in: query
      name: EventsTypesFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ExcludeAnalysisEventsOptionalQueryParam:
      description: This param disables the retrieval of AnalysisEvents if true is passed.
      in: query
      name: ExcludeAnalysisEvents
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
    ExcludeApplicationParametersOptionalQueryParam:
      description: The flag that specifies whether application parameters will be excluded
        from the result.
      in: query
      name: ExcludeApplicationParameters
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Exclude application parameters from the result:
          value: true
    ExcludeHealthStatisticsOptionalQueryParam:
      description: >-
        Indicates whether the health statistics should be returned as part of
        the query result. False by default.

        The statistics show the number of children entities in health state Ok, Warning, and Error.
      in: query
      name: ExcludeHealthStatistics
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
    FaultOperationIdRequiredQueryParam:
      description: A GUID that identifies a call of this API.  This is passed into the
        corresponding GetProgress API
      in: query
      name: OperationId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
      examples:
        Gets information about a completed NodeTransition operation:
          value: a9c24269-88e9-4812-b4ad-a0bf2b724ad4
        Gets information about a running NodeTransition operation:
          value: ed903556-acf1-489c-9f33-b484c31f9087
        Get information about a partition data loss operation.  In this case the operation is a State of Running:
          value: 7216486c-1ee9-4b00-99b2-92b26fcb07f5
        Gets information about a partition data loss operation.  In this case the operation has a State of Completed:
          value: 7216486c-1ee9-4b00-99b2-92b26fcb07f5
        Gets information about a completed quorum loss operation:
          value: 81fbaee7-4f49-44bb-a350-4cb2b51dbf26
        Gets information about a running quorum operation operation:
          value: 81fbaee7-4f49-44bb-a350-4cb2b51dbf26
        Get information a completed PartitionRestart operation:
          value: 6eb7f0d3-49ca-4cb1-81b7-ac2d56b5c5d1
    ForceRemoveOptionalQueryParam:
      description: Remove a Service Fabric application or service forcefully without going
        through the graceful shutdown sequence. This parameter can be used to
        forcefully delete an application or service for which delete is timing
        out due to issues in the service code that prevents graceful close of
        replicas.
      in: query
      name: ForceRemove
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
    ForceRemoveReplicaOptionalQueryParam:
      description: Remove a Service Fabric application or service forcefully without going
        through the graceful shutdown sequence. This parameter can be used to
        forcefully delete an application or service for which delete is timing
        out due to issues in the service code that prevents graceful close of
        replicas.
      in: query
      name: ForceRemove
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
    ForceRequiredQueryParam:
      description: Indicates whether to gracefully roll back and clean up internal system
        state modified by executing the user-induced operation.
      in: query
      name: Force
      required: true
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
    GatewayResourceNameRequiredPathParam:
      description: The identity of the gateway.
      in: path
      name: gatewayResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        DeleteGatewayResource:
          value: sampleGateway
        GetGatewayResource:
          value: sampleGateway
        CreateOrUpdateMeshGateway:
          value: sampleGateway
    IgnoreConstraintsOptionalParam:
      description: Ignore constraints when moving a replica. If this parameter is not
        specified, all constraints are honored.
      in: query
      name: IgnoreConstraints
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
    ImageStoreContentPathRequiredPathParam:
      description: Relative path to file or folder in the image store from its root.
      in: path
      name: contentPath
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get information about image store content under a given relative path:
          value: Store\CalcServiceApp
        Get information about image store upload session by a given relative path:
          value: SwaggerTest\Common.dll
    ImmediateOptionalQueryParam:
      description: >-
        A flag that indicates whether the report should be sent immediately.

        A health report is sent to a Service Fabric gateway Application, which forwards to the health store.

        If Immediate is set to true, the report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings that the HTTP Gateway Application is using.

        This is useful for critical reports that should be sent as soon as possible.

        Depending on timing and other conditions, sending the report may still fail, for example if the HTTP Gateway is closed or the message doesn't reach the Gateway.

        If Immediate is set to false, the report is sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration.

        This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing.

        By default, reports are not sent immediately.
      in: query
      name: Immediate
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
    IncludeHealthStateOptionalQueryParam:
      description: >-
        Include the health state of an entity.

        If this parameter is false or not specified, then the health state returned is "Unknown".

        When set to true, the query goes in parallel to the node and the health system service before the results are merged.

        As a result, the query is more expensive and may take a longer time.
      in: query
      name: IncludeHealthState
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Include health state in the result:
          value: true
        Get a specific deployed application by application ID and include the health state in the result:
          value: true
    IncludeSystemApplicationHealthStatisticsOptionalQueryParam:
      description: >-
        Indicates whether the health statistics should include the
        fabric:/System application health statistics. False by default.

        If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application.

        Otherwise, the query result includes health statistics only for user applications.

        The health statistics must be included in the query result for this parameter to be applied.
      in: query
      name: IncludeSystemApplicationHealthStatistics
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
    IncludeValuesOptionalQueryParam:
      description: Allows specifying whether to include the values of the properties
        returned. True if values should be returned with the metadata; False to
        return only property metadata.
      in: query
      name: IncludeValues
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Get property info list with values:
          value: true
        Page using continuation token:
          value: true
    InfrastructureCommandRequiredQueryParam:
      description: The text of the command to be invoked. The content of the command is
        infrastructure-specific.
      in: query
      name: Command
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    InfrastructureServiceIdOptionalQueryParam:
      description: The identity of the infrastructure service. This is the full name of the
        infrastructure service without the 'fabric:' URI scheme. This parameter
        required only for the cluster that has more than one instance of
        infrastructure service running.
      in: query
      name: ServiceId
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    LatestOptionalQueryParam:
      description: Specifies whether to get only the most recent backup available for a
        partition for the specified time range.
      in: query
      name: Latest
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Get latest backup:
          value: true
    MaxResultsOptionalQueryParam:
      description: The maximum number of results to be returned as part of the paged
        queries. This parameter defines the upper bound on the number of results
        returned. The results returned can be less than the specified maximum
        results if they do not fit in the message as per the max message size
        restrictions defined in the configuration. If this parameter is zero or
        not specified, the paged query includes as many results as possible that
        fit in the return message.
      in: query
      name: MaxResults
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        format: int64
        minimum: 0
        default: 0
      examples:
        Limit maximum results:
          value: 2
        Page using continuation token:
          value: 2
    NameIdRequiredPathParam:
      description: The Service Fabric name, without the 'fabric:' URI scheme.
      in: path
      name: nameId
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        Get property info list:
          value: samples/apps
        Get property info list with values:
          value: samples/apps
        Page using continuation token:
          value: samples
        Property batch operation:
          value: samples/apps
        Get property info:
          value: samples/apps
        Put custom property:
          value: samples/apps/CalculatorApp
        Put property:
          value: samples/apps/CalculatorApp
        Get sub names:
          value: samples
        Recursively search sub names:
          value: samples
    NetworkResourceNameRequiredPathParam:
      description: The identity of the network.
      in: path
      name: networkResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        DeleteNetworkResource:
          value: sampleNetwork
        GetNetworkResource:
          value: sampleNetwork
        CreateOrUpdateMeshNetwork:
          value: sampleNetwork
    NewNodeNameOptionalParam:
      description: The name of the target node for secondary replica move. If not
        specified, replica is moved to a random node.
      in: query
      name: NewNodeName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    NodeInstanceIdRequiredQueryParam:
      description: The node instance ID of the target node.  This can be determined through
        GetNodeInfo API.
      in: query
      name: NodeInstanceId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    NodeNameOptionalParam:
      description: The name of the node.
      in: query
      name: NodeName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    NodeNameRequiredPathParam:
      description: The name of the node.
      in: path
      name: nodeName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Node-related events:
          value: node1
        Gets information about a completed NodeTransition operation:
          value: N0060
        Gets information about a running NodeTransition operation:
          value: N0060
        Get a specific node by node name:
          value: _Node_1
        Include health state in the result:
          value: _Node_0
        Limit maximum results:
          value: _Node_0
        Page using continuation token:
          value: _Node_0
        Get a specific deployed application by application ID and include the health state in the result:
          value: _Node_0
        Get container logs:
          value: Node01
        Update container:
          value: N0020
        Get container logs for given code package:
          value: _Node_0
        Get container logs of previous dead container for given code package:
          value: _Node_0
        Get last 10 lines of container logs:
          value: _Node_0
    NodeStatusFilterOptionalQueryParam:
      description: Allows filtering the nodes based on the NodeStatus. Only the nodes that
        are matching the specified filter value will be returned. The filter
        value can be one of the following.
      in: query
      name: NodeStatusFilter
      required: false
      x-ms-enum:
        modelAsString: true
        name: NodeStatusFilter
        values:
          - description: This filter value will match all of the nodes excepts the ones
              with status as Unknown or Removed.
            value: default
          - description: This filter value will match all of the nodes.
            value: all
          - description: This filter value will match nodes that are Up.
            value: up
          - description: This filter value will match nodes that are Down.
            value: down
          - description: This filter value will match nodes that are in the process of
              being enabled with status as Enabling.
            value: enabling
          - description: This filter value will match nodes that are in the process of
              being disabled with status as Disabling.
            value: disabling
          - description: This filter value will match nodes that are Disabled.
            value: disabled
          - description: This filter value will match nodes whose status is Unknown. A node
              would be in Unknown state if Service Fabric does not have
              authoritative information about that node. This can happen if the
              system learns about a node at runtime.
            value: unknown
          - description: This filter value will match nodes whose status is Removed. These
              are the nodes that are removed from the cluster using the
              RemoveNodeState API.
            value: removed
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - default
          - all
          - up
          - down
          - enabling
          - disabling
          - disabled
          - unknown
          - removed
        default: default
    NodeTransitionTypeRequiredQueryParam:
      description: Indicates the type of transition to perform.  NodeTransitionType.Start
        will start a stopped node.  NodeTransitionType.Stop will stop a node
        that is up.
      in: query
      name: NodeTransitionType
      required: true
      x-ms-enum:
        modelAsString: true
        name: NodeTransitionType
        values:
          - description: Reserved.  Do not pass into API.
            value: Invalid
          - description: Transition a stopped node to up.
            value: Start
          - description: Transition an up node to stopped.
            value: Stop
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - Invalid
          - Start
          - Stop
    NodesHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering of the node health state objects returned in the result
        of cluster health query

        based on their health state. The possible values for this parameter include integer value of one of the

        following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state.

        If not specified, all entries are returned.

        The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

        For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: NodesHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    OnlyQueryPrimariesOptionalQueryParam:
      description: Indicates that unplaced replica information will be queries only for
        primary replicas.
      in: query
      name: OnlyQueryPrimaries
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
    PartitionIdOptionalQueryParam:
      description: The identity of the partition.
      in: query
      name: PartitionId
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
    PartitionIdRequiredPathParam:
      description: The identity of the partition.
      in: path
      name: partitionId
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
        format: uuid
      examples:
        Get Partition-related events:
          value: f2a6a893-39be-4c7d-b07f-72bc2d36de89
        Get Partition Replicas-related events:
          value: f2a6a893-39be-4c7d-b07f-72bc2d36de89
        Get Partition Replica-related events:
          value: f2a6a893-39be-4c7d-b07f-72bc2d36de89
        Get information about a partition data loss operation.  In this case the operation is a State of Running:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Gets information about a partition data loss operation.  In this case the operation has a State of Completed:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Gets information about a completed quorum loss operation:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Gets information about a running quorum operation operation:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Get information a completed PartitionRestart operation:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Backup partition:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Backup partition to a specific Azure storage account:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Backup partition to a specific on-premise file share:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Disable partition backup:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Enable partition backup:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Get partition backup configuration information:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Get backup operation progress:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Get application backups within a time range:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Get latest backup:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Limit maximum results:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Page using continuation token:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Get restore operation progress:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Trigger partition restore:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Resume partition backup:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
        Suspend partition backup:
          value: 1daae3f5-7fd6-42e9-b1ba-8c05f873994d
    PartitionKeyTypeOptionalQueryParam:
      description: >-
        Key type for the partition. This parameter is required if the partition
        scheme for the service is Int64Range or Named. The possible values are
        following.

        - None (1) - Indicates that the PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as Singleton. This is the default value. The value is 1.

        - Int64Range (2) - Indicates that the PartitionKeyValue parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range. The value is 2.

        - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This is valid for the partitions with partitioning scheme as Named. The value is 3.
      in: query
      name: PartitionKeyType
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
    PartitionKeyValueOptionalQueryParam:
      description: >-
        Partition key. This is required if the partition scheme for the service
        is Int64Range or Named. 

        This is not the partition ID, but rather, either the integer key value, or the name of the partition ID.

        For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would be an

        integer in that range. Query service description to see the range or name.
      in: query
      name: PartitionKeyValue
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      allowReserved: true
    PartitionsHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering of the partitions health state objects returned in the
        result of service health query based on their health state.

        The possible values for this parameter include integer value of one of the following health states.

        Only partitions that match the filter are returned. All partitions are used to evaluate the aggregated health state.

        If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these value

        obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with HealthState value of OK (2) and Warning (4) will be returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: PartitionsHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    PasswordEncryptedOptionalQueryParam:
      description: Indicates that supplied container repository password is encrypted.
      in: query
      name: PasswordEncrypted
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
    PreviousOptionalQueryParam:
      description: Specifies whether to get container logs from exited/dead containers of
        the code package instance.
      in: query
      name: Previous
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Get container logs of previous dead container for given code package:
          value: true
    PreviousRspVersionOptionalQueryParam:
      description: The value in the Version field of the response that was received
        previously. This is required if the user knows that the result that was
        gotten previously is stale.
      in: query
      name: PreviousRspVersion
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      allowReserved: true
    PropertyNameRequiredQueryParam:
      description: Specifies the name of the property to get.
      in: query
      name: PropertyName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get property info:
          value: AppData
    QuorumLossDurationRequiredQueryParam:
      description: The amount of time for which the partition will be kept in quorum
        loss.  This must be specified in seconds.
      in: query
      name: QuorumLossDuration
      required: true
      x-ms-parameter-location: method
      schema:
        type: integer
    QuorumLossModeRequiredQueryParam:
      description: This enum is passed to the StartQuorumLoss API to indicate what type of
        quorum loss to induce.
      in: query
      name: QuorumLossMode
      required: true
      x-ms-enum:
        modelAsString: true
        name: QuorumLossMode
        values:
          - description: Reserved.  Do not pass into API.
            value: Invalid
          - description: "Partial Quorum loss mode : Minimum number of replicas for a
              partition will be down that will cause a quorum loss."
            value: QuorumReplicas
          - value: AllReplicas
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - Invalid
          - QuorumReplicas
          - AllReplicas
    RecursiveOptionalQueryParam:
      description: Allows specifying that the search performed should be recursive.
      in: query
      name: Recursive
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Page using continuation token:
          value: true
        Recursively search sub names:
          value: true
    RepairTaskExecutorFilterOptionalQueryParam:
      description: The name of the repair executor whose claimed tasks should be included
        in the list.
      in: query
      name: ExecutorFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    RepairTaskIdFilterOptionalQueryParam:
      description: The repair task ID prefix to be matched.
      in: query
      name: TaskIdFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    RepairTaskStateFilterOptionalQueryParam:
      description: >-
        A bitwise-OR of the following values, specifying which task states
        should be included in the result list.


        - 1 - Created

        - 2 - Claimed

        - 4 - Preparing

        - 8 - Approved

        - 16 - Executing

        - 32 - Restoring

        - 64 - Completed
      in: query
      name: StateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
    ReplicaHealthReportServiceKindRequiredQueryParam:
      description: The kind of service replica (Stateless or Stateful) for which the health
        is being reported. Following are the possible values.
      in: query
      name: ServiceKind
      required: true
      x-ms-enum:
        modelAsString: true
        name: ReplicaHealthReportServiceKind
        values:
          - description: Does not use Service Fabric to make its state highly available or
              reliable. The value is 1
            value: Stateless
          - description: Uses Service Fabric to make its state or part of its state highly
              available and reliable. The value is 2.
            value: Stateful
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - Stateless
          - Stateful
        default: Stateful
    ReplicaIdRequiredPathParam:
      description: The identifier of the replica.
      in: path
      name: replicaId
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        Get Partition Replica-related events:
          value: 131672608994209140
    ReplicaNameRequiredPathParam:
      description: Service Fabric replica name.
      in: path
      name: replicaName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        GetServiceReplica:
          value: "0"
        GetContainerLogs:
          value: "0"
    ReplicasHealthStateFilerOptionalQueryParam:
      description: >-
        Allows filtering the collection of ReplicaHealthState objects on the
        partition. The value can be obtained from members or bitwise operations
        on members of HealthStateFilter. Only replicas that match the filter
        will be returned. All replicas will be used to evaluate the aggregated
        health state. If not specified, all entries will be returned.The state
        values are flag-based enumeration, so the value could be a combination
        of these values obtained using bitwise 'OR' operator. For example, If
        the provided value is 6 then all of the events with HealthState value of
        OK (2) and Warning (4) will be returned. The possible values for this
        parameter include integer value of one of the following health states.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: ReplicasHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    RepositoryPasswordOptionalQueryParam:
      description: The password for supplied username to connect to container repository.
      in: query
      name: RepositoryPassword
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    RepositoryUserNameOptionalQueryParam:
      description: The user name to connect to container repository.
      in: query
      name: RepositoryUserName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    RestartPartitionModeRequiredQueryParam:
      description: Describe which partitions to restart.
      in: query
      name: RestartPartitionMode
      required: true
      x-ms-enum:
        modelAsString: true
        name: RestartPartitionMode
        values:
          - description: Reserved.  Do not pass into API.
            value: Invalid
          - description: All replicas or instances in the partition are restarted at once.
            value: AllReplicasOrInstances
          - description: Only the secondary replicas are restarted.
            value: OnlyActiveSecondaries
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - Invalid
          - AllReplicasOrInstances
          - OnlyActiveSecondaries
    RestoreTimeoutOptionalQueryParam:
      description: Specifies the maximum amount of time to wait, in minutes, for the
        restore operation to complete. Post that, the operation returns back
        with timeout error. However, in certain corner cases it could be that
        the restore operation goes through even though it completes with
        timeout. In case of timeout error, its recommended to invoke this
        operation again with a greater timeout value. the default value for the
        same is 10 minutes.
      in: query
      name: RestoreTimeout
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 10
    SecretResourceNameRequiredPathParam:
      description: The name of the secret resource.
      in: path
      name: secretResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        DeleteSecretResource:
          value: dbConnectionString
        GetSecretResource:
          value: dbConnectionString
        CreateOrUpdateMeshSecret:
          value: dbConnectionString
        ListMeshSecretValues:
          value: dbConnectionString
        DeleteSecretValue:
          value: dbConnectionString
        GetMeshSecretValue:
          value: dbConnectionString
        CreateMeshSecretValue:
          value: dbConnectionString
        ListMeshSecretValue:
          value: dbConnectionString
    SecretValueResourceNameRequiredPathParam:
      description: The name of the secret resource value which is typically the version
        identifier for the value.
      in: path
      name: secretValueResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        DeleteSecretValue:
          value: v1
        GetMeshSecretValue:
          value: v1
        CreateMeshSecretValue:
          value: v1
        ListMeshSecretValue:
          value: v1
    ServiceIdRequiredPathParam:
      description: >-
        The identity of the service. This ID is typically the full name of the
        service without the 'fabric:' URI scheme.

        Starting from version 6.0, hierarchical names are delimited with the "~" character.

        For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
      in: path
      name: serviceId
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        Get Service-related events:
          value: app1~svc1
        Get information about a partition data loss operation.  In this case the operation is a State of Running:
          value: fabric:/myapp/myservice
        Gets information about a partition data loss operation.  In this case the operation has a State of Completed:
          value: fabric:/myapp/myservice
        Gets information about a completed quorum loss operation:
          value: fabric:/myapp/myservice
        Gets information about a running quorum operation operation:
          value: fabric:/myapp/myservice
        Get information a completed PartitionRestart operation:
          value: fabric:/myapp/myservice
        Disable service backup:
          value: CalcApp/CalcService
        Enable service backup:
          value: CalcApp/CalcService
        Limit maximum results:
          value: CalcApp/CalcService
        Page using continuation token:
          value: CalcApp/CalcService
        Get application backups within a time range:
          value: CalcApp/CalcService
        Get latest backup:
          value: CalcApp/CalcService
        Resume service backup:
          value: CalcApp/CalcService
        Suspend service backup:
          value: CalcApp/CalcService
        Stateful service:
          value: test~test2
        Stateless service:
          value: test~test1
    ServiceManifestNameOptionalQueryParam:
      description: The name of a service manifest registered as part of an application type
        in a Service Fabric cluster.
      in: query
      name: ServiceManifestName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ServiceManifestNameRequiredQueryParam:
      description: The name of a service manifest registered as part of an application type
        in a Service Fabric cluster.
      in: query
      name: ServiceManifestName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get container logs:
          value: NodeServicePackage
        Update container:
          value: NodeOnSF
        Get container logs for given code package:
          value: SimpleHttpServerSvcPkg
        Get container logs of previous dead container for given code package:
          value: SimpleHttpServerSvcPkg
        Get last 10 lines of container logs:
          value: SimpleHttpServerSvcPkg
    ServicePackageNameRequiredPathParam:
      description: The name of the service package.
      in: path
      name: servicePackageName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
    ServiceResourceNameRequiredPathParam:
      description: The identity of the service.
      in: path
      name: serviceResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        GetServiceResource:
          value: helloWorldService
        ListMeshServiceReplicas:
          value: helloWorldService
        GetServiceReplica:
          value: helloWorldService
        GetContainerLogs:
          value: sbzDocService
    ServiceTypeNameOptionalQueryParam:
      description: The service type name used to filter the services to query for.
      in: query
      name: ServiceTypeName
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    ServiceTypeNameRequiredPathParam:
      description: Specifies the name of a Service Fabric service type.
      in: path
      name: serviceTypeName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        Get information about all nodes.:
          value: Actor1ActorServiceType
    ServicesHealthStateFilterOptionalQueryParam:
      description: >-
        Allows filtering of the services health state objects returned in the
        result of services health query based on their health state.

        The possible values for this parameter include integer value of one of the following health states.

        Only services that match the filter are returned. All services are used to evaluate the aggregated health state.

        If not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a combination of these values,

        obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState value of OK (2) and Warning (4) will be returned.


        - Default - Default value. Matches any HealthState. The value is zero.

        - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

        - Ok - Filter that matches input with HealthState value Ok. The value is 2.

        - Warning - Filter that matches input with HealthState value Warning. The value is 4.

        - Error - Filter that matches input with HealthState value Error. The value is 8.

        - All - Filter that matches input with any HealthState value. The value is 65535.
      in: query
      name: ServicesHealthStateFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 0
    SkipCorrelationLookupOptionalQueryParam:
      description: This param disables the search of CorrelatedEvents information if true
        is passed. otherwise the CorrelationEvents get processed and
        HasCorrelatedEvents field in every FabricEvent gets populated.
      in: query
      name: SkipCorrelationLookup
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
    StartDateTimeFilterOptionalQueryParam:
      description: Specify the start date time from which to enumerate backups, in datetime
        format. The date time must be specified in ISO8601 format. This is an
        optional parameter. If not specified, all backups from the beginning are
        enumerated.
      in: query
      name: StartDateTimeFilter
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
        format: date-time
      examples:
        Get application backups within a time range:
          value: 2018-01-01T00:00:00Z
    StartTimeUtcOptionalQueryParam:
      description: The Windows file time representing the start time of the time range for
        which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc
        Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx)
        for details.
      in: query
      name: StartTimeUtc
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Chaos events given a time range:
          value: "0"
    StartTimeUtcRequiredQueryParam:
      description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
      in: query
      name: StartTimeUtc
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Applications-related events:
          value: 2018-04-03T18:00:00Z
        Get Application-related events:
          value: 2018-04-03T18:00:00Z
        Get Cluster-related events:
          value: 2018-04-03T18:00:00Z
        Get Nodes-related events:
          value: 2018-04-03T18:00:00Z
        Get Node-related events:
          value: 2018-04-03T18:00:00Z
        Get Partitions-related events:
          value: 2018-04-03T18:00:00Z
        Get Partition-related events:
          value: 2018-04-03T18:00:00Z
        Get Partition Replicas-related events:
          value: 2018-04-03T18:00:00Z
        Get Partition Replica-related events:
          value: 2018-04-03T18:00:00Z
        Get Services-related events:
          value: 2018-04-03T18:00:00Z
        Get Service-related events:
          value: 2018-04-03T18:00:00Z
    StateFilterRequiredQueryParam:
      description: |-
        Used to filter on OperationState's for user-induced operations.

        - 65535 - select All
        - 1 - select Running
        - 2 - select RollingBack
        - 8 - select Completed
        - 16 - select Faulted
        - 32 - select Cancelled
        - 64 - select ForceCancelled
      in: query
      name: StateFilter
      required: true
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 65535
      examples:
        Gets information on fault operations:
          value: "0xFF"
    StopDurationInSecondsRequiredQueryParam:
      description: The duration, in seconds, to keep the node stopped.  The minimum value
        is 600, the maximum is 14400.  After this time expires, the node will
        automatically come back up.
      in: query
      name: StopDurationInSeconds
      required: true
      x-ms-parameter-location: method
      schema:
        type: integer
        format: int32
        minimum: 0
    TailOptionalQueryParam:
      description: Number of lines to show from the end of the logs. Default is 100. 'all'
        to show the complete logs.
      in: query
      name: Tail
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get last 10 lines of container logs:
          value: "10"
    TimeoutOptionalQueryParam:
      description: The server timeout for performing the operation in seconds. This timeout
        specifies the time duration that the client is willing to wait for the
        requested operation to complete. The default value for this parameter is
        60 seconds.
      in: query
      name: timeout
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
        format: int64
        minimum: 1
        maximum: 4294967295
        default: 60
    TypeFilterRequiredQueryParam:
      description: |-
        Used to filter on OperationType for user-induced operations.

        - 65535 - select all
        - 1 - select PartitionDataLoss.
        - 2 - select PartitionQuorumLoss.
        - 4 - select PartitionRestart.
        - 8 - select NodeTransition.
      in: query
      name: TypeFilter
      required: true
      x-ms-parameter-location: method
      schema:
        type: integer
        default: 65535
      examples:
        Gets information on fault operations:
          value: "0xFF"
    UploadFileChunkContentRangeHeaderParam:
      description: When uploading file chunks to the image store, the Content-Range header
        field need to be configured and sent with a request. The format should
        looks like "bytes
        {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example,
        Content-Range:bytes 300-5000/20000 indicates that user is sending bytes
        300 through 5,000 and the total file length is 20,000 bytes.
      in: header
      name: Content-Range
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    UploadSessionIdRequiredQueryParam:
      description: A GUID generated by the user for a file uploading. It identifies an
        image store upload session which keeps track of all file chunks until it
        is committed.
      in: query
      name: session-id
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        format: uuid
      examples:
        Get information about image store upload session by a given ID:
          value: 4a2340e8-d8d8-497c-95fe-cdaa1052f33b
    VerboseServicePlacementHealthReportingParam:
      description: The verbosity of service placement health reporting.
      in: query
      name: Enabled
      required: true
      x-ms-parameter-location: method
      schema:
        type: boolean
    VolumeResourceNameRequiredPathParam:
      description: The identity of the volume.
      in: path
      name: volumeResourceName
      required: true
      x-ms-parameter-location: method
      x-ms-skip-url-encoding: true
      schema:
        type: string
      examples:
        DeleteVolumeResource:
          value: sampleVolume
        GetVolumeResource:
          value: sampleVolume
        CreateOrUpdateMeshVolume:
          value: sampleVolume
  requestBodies:
    DisableBackupDescription:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DisableBackupDescription"
      description: Specifies the parameters to disable backup for any backup entity.
      x-ms-parameter-location: method
    HealthInformation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HealthInformation"
      description: Describes the health information for the health report. This information
        needs to be present in all of the health reports sent to the health
        manager.
      required: true
      x-ms-parameter-location: method
    RepairTask:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RepairTask"
      description: Describes the repair task to be created or updated.
      required: true
      x-ms-parameter-location: method
    EnableBackupDescription:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnableBackupDescription"
      description: Specifies the parameters for enabling backup.
      required: true
      x-ms-parameter-location: method
    ApplicationHealthPolicy:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApplicationHealthPolicy"
      description: >-
        Describes the health policies used to evaluate the health of an
        application or one of its children.

        If not present, the health evaluation uses the health policy from application manifest or the default health policy.
      x-ms-parameter-location: method
    BackupPolicyDescription:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BackupPolicyDescription"
      description: Describes the backup policy.
      required: true
      x-ms-parameter-location: method
  schemas:
    AadMetadata:
      description: Azure Active Directory metadata used for secured connection to cluster.
      properties:
        authority:
          description: The AAD authority url.
          type: string
        client:
          description: The AAD client application Id.
          type: string
        cluster:
          description: The AAD cluster application Id.
          type: string
        login:
          description: The AAD login url.
          type: string
        redirect:
          description: The client application redirect address.
          type: string
        tenant:
          description: The AAD tenant Id.
          type: string
    AadMetadataObject:
      description: Azure Active Directory metadata object used for secured connection to
        cluster.
      properties:
        metadata:
          $ref: "#/components/schemas/AadMetadata"
        type:
          description: The client authentication method.
          type: string
    AddRemoveIncrementalNamedPartitionScalingMechanism:
      allOf:
        - $ref: "#/components/schemas/ScalingMechanismDescription"
      description: Represents a scaling mechanism for adding or removing named partitions
        of a stateless service. Partition names are in the format '0','1''N-1'
      properties:
        MaxPartitionCount:
          description: Maximum number of named partitions of the service.
          type: integer
        MinPartitionCount:
          description: Minimum number of named partitions of the service.
          type: integer
        ScaleIncrement:
          description: The number of instances to add or remove during a scaling operation.
          type: integer
      required:
        - MinPartitionCount
        - MaxPartitionCount
        - ScaleIncrement
      x-ms-discriminator-value: AddRemoveIncrementalNamedPartition
    AddRemoveReplicaScalingMechanism:
      allOf:
        - $ref: "#/components/schemas/AutoScalingMechanism"
        - type: object
      description: Describes the horizontal auto scaling mechanism that adds or removes
        replicas (containers or container groups).
      properties:
        maxCount:
          description: Maximum number of containers (scale up won't be performed above this
            number).
          type: integer
        minCount:
          description: Minimum number of containers (scale down won't be performed below
            this number).
          type: integer
        scaleIncrement:
          description: Each time auto scaling is performed, this number of containers will
            be added or removed.
          type: integer
      required:
        - minCount
        - maxCount
        - scaleIncrement
      x-ms-discriminator-value: AddRemoveReplica
    AnalysisEventMetadata:
      description: Metadata about an Analysis Event.
      properties:
        Delay:
          description: The analysis delay.
          format: duration
          type: string
        Duration:
          description: The duration of analysis.
          format: duration
          type: string
    ApplicationBackupConfigurationInfo:
      allOf:
        - $ref: "#/components/schemas/BackupConfigurationInfo"
      description: Backup configuration information for a specific Service Fabric
        application specifying what backup policy is being applied and suspend
        description, if any.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
      x-ms-discriminator-value: Application
    ApplicationBackupEntity:
      allOf:
        - $ref: "#/components/schemas/BackupEntity"
      description: Identifies the Service Fabric application which is being backed up.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
      x-ms-discriminator-value: Application
    ApplicationCapacityDescription:
      description: >-
        Describes capacity information for services of this application. This
        description can be used for describing the following.

        - Reserving the capacity for the services on the nodes

        - Limiting the total number of nodes that services of this application can run on

        - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application
      properties:
        ApplicationMetrics:
          $ref: "#/components/schemas/ApplicationMetricDescriptionList"
        MaximumNodes:
          default: 0
          description: The maximum number of nodes where Service Fabric will reserve
            capacity for this application. Note that this does not mean that the
            services of this application will be placed on all of those nodes.
            By default, the value of this property is zero and it means that the
            services can be placed on any node.
          format: int64
          minimum: 0
          type: integer
        MinimumNodes:
          description: The minimum number of nodes where Service Fabric will reserve
            capacity for this application. Note that this does not mean that the
            services of this application will be placed on all of those nodes.
            If this property is set to zero, no capacity will be reserved. The
            value of this property cannot be more than the value of the
            MaximumNodes property.
          format: int64
          minimum: 0
          type: integer
    ApplicationContainerInstanceExitedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Container Exited event.
      properties:
        CodePackageName:
          description: Name of Code package.
          type: string
        ContainerName:
          description: Name of Container.
          type: string
        EntryPointType:
          description: Type of EntryPoint.
          type: string
        ExitCode:
          description: Exit code of process.
          format: int64
          type: integer
        HostId:
          description: Host Id.
          type: string
        ImageName:
          description: Name of Container image.
          type: string
        IsExclusive:
          description: Indicates IsExclusive flag.
          type: boolean
        ServiceName:
          description: Name of Service.
          type: string
        ServicePackageActivationId:
          description: Activation Id of Service package.
          type: string
        ServicePackageName:
          description: Name of Service package.
          type: string
        StartTime:
          description: Start time of process.
          format: date-time
          type: string
        UnexpectedTermination:
          description: Indicates if termination is unexpected.
          type: boolean
      required:
        - ServiceName
        - ServicePackageName
        - ServicePackageActivationId
        - IsExclusive
        - CodePackageName
        - EntryPointType
        - ImageName
        - ContainerName
        - HostId
        - ExitCode
        - UnexpectedTermination
        - StartTime
      x-ms-discriminator-value: ApplicationContainerInstanceExited
    ApplicationCreatedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Created event.
      properties:
        ApplicationDefinitionKind:
          description: Application definition kind.
          type: string
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Application type version.
          type: string
      required:
        - ApplicationTypeName
        - ApplicationTypeVersion
        - ApplicationDefinitionKind
      x-ms-discriminator-value: ApplicationCreated
    ApplicationDefinitionKind:
      description: The mechanism used to define a Service Fabric application.
      enum:
        - Invalid
        - ServiceFabricApplicationDescription
        - Compose
      type: string
      x-ms-enum:
        modelAsString: true
        name: ApplicationDefinitionKind
        values:
          - description: Indicates the application definition kind is invalid. All Service
              Fabric enumerations have the invalid type. The value is 65535.
            value: Invalid
          - description: Indicates the application is defined by a Service Fabric
              application description. The value is 0.
            value: ServiceFabricApplicationDescription
          - description: Indicates the application is defined by compose file(s). The value
              is 1.
            value: Compose
    ApplicationDeletedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Deleted event.
      properties:
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Application type version.
          type: string
      required:
        - ApplicationTypeName
        - ApplicationTypeVersion
      x-ms-discriminator-value: ApplicationDeleted
    ApplicationDescription:
      description: Describes a Service Fabric application.
      properties:
        ApplicationCapacity:
          $ref: "#/components/schemas/ApplicationCapacityDescription"
        ManagedApplicationIdentity:
          $ref: "#/components/schemas/ManagedApplicationIdentityDescription"
        Name:
          $ref: "#/components/schemas/ApplicationName"
        ParameterList:
          $ref: "#/components/schemas/ApplicationParameterList"
        TypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        TypeVersion:
          $ref: "#/components/schemas/ApplicationTypeVersion"
      required:
        - Name
        - TypeName
        - TypeVersion
    ApplicationEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Application Events.
      properties:
        ApplicationId:
          $ref: "#/components/schemas/ApplicationId"
      required:
        - ApplicationId
      x-ms-discriminator-value: ApplicationEvent
    ApplicationEventList:
      description: A list of ApplicationEvent objects.
      items:
        $ref: "#/components/schemas/ApplicationEvent"
      type: array
    ApplicationHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: Represents the health of the application. Contains the application
        aggregated health state and the service and deployed application health
        states.
      properties:
        DeployedApplicationHealthStates:
          description: Deployed application health states as found in the health store.
          items:
            $ref: "#/components/schemas/DeployedApplicationHealthState"
          type: array
        Name:
          $ref: "#/components/schemas/ApplicationName"
        ServiceHealthStates:
          description: Service health states as found in the health store.
          items:
            $ref: "#/components/schemas/ServiceHealthState"
          type: array
    ApplicationHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for an application, containing information
        about the data and the algorithm used by the health store to evaluate
        health.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Application
    ApplicationHealthPolicies:
      description: Defines the application health policy map used to evaluate the health of
        an application or one of its children entities.
      properties:
        ApplicationHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationHealthPolicyMap"
    ApplicationHealthPolicy:
      description: Defines a health policy used to evaluate the health of an application or
        one of its children entities.
      properties:
        ConsiderWarningAsError:
          default: false
          description: Indicates whether warnings are treated with the same severity as
            errors.
          type: boolean
        DefaultServiceTypeHealthPolicy:
          $ref: "#/components/schemas/ServiceTypeHealthPolicy"
        MaxPercentUnhealthyDeployedApplications:
          default: 0
          description: >-
            The maximum allowed percentage of unhealthy deployed applications.
            Allowed values are Byte values from zero to 100.

            The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.

            This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.

            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
          type: integer
        ServiceTypeHealthPolicyMap:
          $ref: "#/components/schemas/ServiceTypeHealthPolicyMap"
    ApplicationHealthPolicyMap:
      description: >-
        Defines a map that contains specific application health policies for
        different applications.

        Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.

        If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest).

        The map is empty by default.
      items:
        $ref: "#/components/schemas/ApplicationHealthPolicyMapItem"
      type: array
    ApplicationHealthPolicyMapItem:
      description: Defines an item in ApplicationHealthPolicyMap.
      properties:
        Key:
          $ref: "#/components/schemas/ApplicationName"
        Value:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
      required:
        - Key
        - Value
    ApplicationHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Health Report Expired event.
      properties:
        ApplicationInstanceId:
          description: Id of Application instance.
          format: int64
          type: integer
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ApplicationInstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: ApplicationHealthReportExpired
    ApplicationHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents the health state of an application, which contains the
        application identifier and the aggregated health state.
      properties:
        Name:
          $ref: "#/components/schemas/ApplicationName"
    ApplicationHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: >-
        Represents the health state chunk of a application.

        The application health state chunk contains the application name, its aggregated health state and any children services and deployed applications that respect the filters in cluster health chunk query description.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        ApplicationTypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        DeployedApplicationHealthStateChunks:
          $ref: "#/components/schemas/DeployedApplicationHealthStateChunkList"
        ServiceHealthStateChunks:
          $ref: "#/components/schemas/ServiceHealthStateChunkList"
    ApplicationHealthStateChunkList:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunkList"
      description: The list of application health state chunks in the cluster that respect
        the input filters in the chunk query. Returned by get cluster health
        state chunks query.
      properties:
        Items:
          description: The list of application health state chunks that respect the input
            filters in the chunk query.
          items:
            $ref: "#/components/schemas/ApplicationHealthStateChunk"
          type: array
    ApplicationHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a application should be
        included in the cluster health chunk.

        One filter can match zero, one or multiple applications, depending on its properties.
      properties:
        ApplicationNameFilter:
          description: >-
            The name of the application that matches the filter, as a fabric
            uri. The filter is applied only to the specified application, if it
            exists.

            If the application doesn't exist, no application is returned in the cluster health chunk based on this filter.

            If the application exists, it is included in the cluster health chunk if it respects the other filter properties.

            If not specified, all applications are matched against the other filter members, like health state filter.
          type: string
        ApplicationTypeNameFilter:
          description: >-
            The name of the application type that matches the filter.

            If specified, the filter is applied only to applications of the selected application type, if any exists.

            If no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter.

            Each application of the specified application type is included in the cluster health chunk if it respects the other filter properties.

            If not specified, all applications are matched against the other filter members, like health state filter.
          type: string
        DeployedApplicationFilters:
          description: >-
            Defines a list of filters that specify which deployed applications
            to be included in the returned cluster health chunk as children of
            the application. The deployed applications are returned only if the
            parent application matches a filter.

            If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters.

            The application filter may specify multiple deployed application filters.

            For example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node.
          items:
            $ref: "#/components/schemas/DeployedApplicationHealthStateFilter"
          type: array
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the applications. It allows
            selecting applications if they match the desired health states.

            The possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state.

            If not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        ServiceFilters:
          description: >-
            Defines a list of filters that specify which services to be included
            in the returned cluster health chunk as children of the application.
            The services are returned only if the parent application matches a
            filter.

            If the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters.

            The application filter may specify multiple service filters.

            For example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name.
          items:
            $ref: "#/components/schemas/ServiceHealthStateFilter"
          type: array
    ApplicationId:
      description: >-
        The identity of the application. This is an encoded representation of
        the application name. This is used in the REST APIs to identify the
        application resource.

        Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the application name is "fabric:/myapp/app1",

        the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in previous versions.
      type: string
    ApplicationInfo:
      description: Information about a Service Fabric application.
      properties:
        ApplicationDefinitionKind:
          $ref: "#/components/schemas/ApplicationDefinitionKind"
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          $ref: "#/components/schemas/ApplicationId"
        Name:
          $ref: "#/components/schemas/ApplicationName"
        Parameters:
          $ref: "#/components/schemas/ApplicationParameterList"
        Status:
          $ref: "#/components/schemas/ApplicationStatus"
        TypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        TypeVersion:
          $ref: "#/components/schemas/ApplicationTypeVersion"
    ApplicationLoadInfo:
      description: Load Information about a Service Fabric application.
      properties:
        ApplicationLoadMetricInformation:
          $ref: "#/components/schemas/ApplicationMetricDescriptionList"
        Id:
          $ref: "#/components/schemas/ApplicationId"
        MaximumNodes:
          description: >-
            The maximum number of nodes where this application can be
            instantiated.

            It is the number of nodes this application is allowed to span.

            For applications that do not have application capacity defined this value will be zero.
          format: int64
          type: integer
        MinimumNodes:
          description: >-
            The minimum number of nodes for this application.

            It is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad * MinimumNodes for this Application instance.

            For applications that do not have application capacity defined this value will be zero.
          format: int64
          type: integer
        NodeCount:
          description: >-
            The number of nodes on which this application is instantiated.

            For applications that do not have application capacity defined this value will be zero.
          format: int64
          type: integer
    ApplicationMetricDescription:
      description: Describes capacity information for a custom resource balancing metric.
        This can be used to limit the total consumption of this metric by the
        services of this application.
      properties:
        MaximumCapacity:
          description: >-
            The maximum node capacity for Service Fabric application.

            This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.

            If set to zero, capacity for this metric is unlimited on each node.

            When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.

            When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
          format: int64
          type: integer
        Name:
          description: The name of the metric.
          type: string
        ReservationCapacity:
          description: >-
            The node reservation capacity for Service Fabric application.

            This is the amount of load which is reserved on nodes which have instances of this application.

            If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.

            If set to zero, no capacity is reserved for this metric.

            When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
          format: int64
          type: integer
        TotalApplicationCapacity:
          description: >-
            The total metric capacity for Service Fabric application.

            This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.

            When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
          format: int64
          type: integer
    ApplicationMetricDescriptionList:
      description: List of application capacity metric description.
      items:
        $ref: "#/components/schemas/ApplicationMetricDescription"
      type: array
    ApplicationName:
      description: The name of the application, including the 'fabric:' URI scheme.
      type: string
    ApplicationNameInfo:
      description: Information about the application name.
      properties:
        Id:
          $ref: "#/components/schemas/ApplicationId"
        Name:
          $ref: "#/components/schemas/ApplicationName"
    ApplicationNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Health Report Created event.
      properties:
        ApplicationInstanceId:
          description: Id of Application instance.
          format: int64
          type: integer
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ApplicationInstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: ApplicationNewHealthReport
    ApplicationPackageCleanupPolicy:
      description: The kind of action that needs to be taken for cleaning up the
        application package after successful provision.
      enum:
        - Invalid
        - Default
        - Automatic
        - Manual
      type: string
      x-ms-enum:
        modelAsString: true
        name: ApplicationPackageCleanupPolicy
        values:
          - description: Indicates that the application package cleanup policy is invalid.
              This value is default. The value is zero.
            value: Invalid
          - description: Indicates that the cleanup policy of application packages is based
              on the cluster setting
              "CleanupApplicationPackageOnProvisionSuccess." The value is 1.
            value: Default
          - description: Indicates that the service fabric runtime determines when to do
              the application package cleanup. By default, cleanup is done on
              successful provision. The value is 2.
            value: Automatic
          - description: Indicates that the user has to explicitly clean up the application
              package. The value is 3.
            value: Manual
    ApplicationParameter:
      description: Describes an application parameter override to be applied when creating
        or upgrading an application.
      properties:
        Key:
          description: The name of the parameter.
          type: string
        Value:
          description: The value of the parameter.
          type: string
      required:
        - Key
        - Value
    ApplicationParameterList:
      description: List of application parameters with overridden values from their default
        values specified in the application manifest.
      items:
        $ref: "#/components/schemas/ApplicationParameter"
      type: array
    ApplicationProcessExitedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Process Exited event.
      properties:
        CodePackageName:
          description: Name of Code package.
          type: string
        EntryPointType:
          description: Type of EntryPoint.
          type: string
        ExeName:
          description: Name of executable.
          type: string
        ExitCode:
          description: Exit code of process.
          format: int64
          type: integer
        HostId:
          description: Host Id.
          type: string
        IsExclusive:
          description: Indicates IsExclusive flag.
          type: boolean
        ProcessId:
          description: Process Id.
          format: int64
          type: integer
        ServiceName:
          description: Name of Service.
          type: string
        ServicePackageActivationId:
          description: Activation Id of Service package.
          type: string
        ServicePackageName:
          description: Name of Service package.
          type: string
        StartTime:
          description: Start time of process.
          format: date-time
          type: string
        UnexpectedTermination:
          description: Indicates if termination is unexpected.
          type: boolean
      required:
        - ServiceName
        - ServicePackageName
        - ServicePackageActivationId
        - IsExclusive
        - CodePackageName
        - EntryPointType
        - ExeName
        - ProcessId
        - HostId
        - ExitCode
        - UnexpectedTermination
        - StartTime
      x-ms-discriminator-value: ApplicationProcessExited
    ApplicationProperties:
      description: Describes properties of a application resource.
      properties:
        debugParams:
          description: Internal - used by Visual Studio to setup the debugging session on
            the local development environment.
          type: string
        description:
          description: User readable description of the application.
          type: string
        diagnostics:
          $ref: "#/components/schemas/DiagnosticsDescription"
        healthState:
          $ref: "#/components/schemas/HealthState"
        serviceNames:
          description: Names of the services in the application.
          items:
            type: string
          readOnly: true
          type: array
        services:
          description: Describes the services in the application. This property is used to
            create or modify services of the application. On get only the name
            of the service is returned. The service description can be obtained
            by querying for the service resource.
          items:
            $ref: "#/components/schemas/ServiceResourceDescription"
          type: array
        status:
          $ref: "#/components/schemas/ResourceStatus"
        statusDetails:
          description: Gives additional information about the current status of the
            application.
          readOnly: true
          type: string
        unhealthyEvaluation:
          description: When the application's health state is not 'Ok', this additional
            details from service fabric Health Manager for the user to know why
            the application is marked unhealthy.
          readOnly: true
          type: string
    ApplicationResourceDescription:
      description: This type describes a application resource.
      properties:
        identity:
          $ref: "#/components/schemas/IdentityDescription"
        name:
          $ref: "#/components/schemas/ApplicationResourceName"
        properties:
          $ref: "#/components/schemas/ApplicationProperties"
      required:
        - name
        - properties
    ApplicationResourceName:
      description: Name of the Application resource.
      type: string
    ApplicationScopedVolume:
      allOf:
        - $ref: "#/components/schemas/VolumeReference"
      description: Describes a volume whose lifetime is scoped to the application's
        lifetime.
      properties:
        creationParameters:
          $ref: "#/components/schemas/ApplicationScopedVolumeCreationParameters"
      required:
        - creationParameters
    ApplicationScopedVolumeCreationParameters:
      description: Describes parameters for creating application-scoped volumes.
      discriminator:
        propertyName: kind
      properties:
        description:
          description: User readable description of the volume.
          type: string
        kind:
          $ref: "#/components/schemas/ApplicationScopedVolumeKind"
      required:
        - kind
      type: object
    ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk:
      allOf:
        - $ref: "#/components/schemas/ApplicationScopedVolumeCreationParameters"
      description: Describes parameters for creating application-scoped volumes provided by
        Service Fabric Volume Disks
      properties:
        sizeDisk:
          description: Volume size
          enum:
            - Small
            - Medium
            - Large
          type: string
          x-ms-enum:
            modelAsString: true
            name: SizeTypes
      required:
        - sizeDisk
      x-ms-discriminator-value: ServiceFabricVolumeDisk
    ApplicationScopedVolumeKind:
      description: Specifies the application-scoped volume kind.
      enum:
        - ServiceFabricVolumeDisk
      type: string
      x-ms-enum:
        modelAsString: true
        name: ApplicationScopedVolumeKind
        values:
          - description: Provides Service Fabric High Availability Volume Disk
            value: ServiceFabricVolumeDisk
    ApplicationStatus:
      description: The status of the application.
      enum:
        - Invalid
        - Ready
        - Upgrading
        - Creating
        - Deleting
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: ApplicationStatus
        values:
          - description: Indicates the application status is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates the application status is ready. The value is 1.
            value: Ready
          - description: Indicates the application status is upgrading. The value is 2.
            value: Upgrading
          - description: Indicates the application status is creating. The value is 3.
            value: Creating
          - description: Indicates the application status is deleting. The value is 4.
            value: Deleting
          - description: Indicates the creation or deletion of application was terminated
              due to persistent failures. Another create/delete request can be
              accepted to resume a failed application. The value is 5.
            value: Failed
    ApplicationTypeApplicationsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for applications of a particular
        application type. The application type applications evaluation can be
        returned when cluster health evaluation returns unhealthy aggregated
        health state, either Error or Warning. It contains health evaluations
        for each unhealthy application of the included application type that
        impacted current aggregated health state.
      properties:
        ApplicationTypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        MaxPercentUnhealthyApplications:
          description: Maximum allowed percentage of unhealthy applications for the
            application type, specified as an entry in
            ApplicationTypeHealthPolicyMap.
          type: integer
        TotalCount:
          description: Total number of applications of the application type found in the
            health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: ApplicationTypeApplications
    ApplicationTypeDefinitionKind:
      description: The mechanism used to define a Service Fabric application type.
      enum:
        - Invalid
        - ServiceFabricApplicationPackage
        - Compose
      type: string
      x-ms-enum:
        modelAsString: true
        name: ApplicationTypeDefinitionKind
        values:
          - description: Indicates the application type definition kind is invalid. All
              Service Fabric enumerations have the invalid type. The value is 0.
            value: Invalid
          - description: Indicates the application type is defined and created by a Service
              Fabric application package provided by the user. The value is 1.
            value: ServiceFabricApplicationPackage
          - description: Indicates the application type is defined and created implicitly
              as part of a compose deployment. The value is 2.
            value: Compose
    ApplicationTypeHealthPolicyMap:
      description: >-
        Defines a map with max percentage unhealthy applications for specific
        application types.

        Each entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.


        The application type health policy map can be used during cluster health evaluation to describe special application types.

        The application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy.

        The applications of application types specified in the map are not counted against the global pool of applications.

        For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type

        and assign it a value of 0% (that is, do not tolerate any failures).

        All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances.

        The application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.
      items:
        $ref: "#/components/schemas/ApplicationTypeHealthPolicyMapItem"
      type: array
    ApplicationTypeHealthPolicyMapItem:
      description: Defines an item in ApplicationTypeHealthPolicyMap.
      properties:
        Key:
          description: The key of the application type health policy map item. This is the
            name of the application type.
          type: string
        Value:
          description: >-
            The value of the application type health policy map item.

            The max percent unhealthy applications allowed for the application type. Must be between zero and 100.
          type: integer
      required:
        - Key
        - Value
    ApplicationTypeImageStorePath:
      description: Path description for the application package in the image store
        specified during the prior copy operation.
      properties:
        ApplicationTypeBuildPath:
          description: The relative image store path to the application package.
          type: string
      required:
        - ApplicationTypeBuildPath
    ApplicationTypeInfo:
      description: Information about an application type.
      properties:
        ApplicationTypeDefinitionKind:
          $ref: "#/components/schemas/ApplicationTypeDefinitionKind"
        DefaultParameterList:
          $ref: "#/components/schemas/ApplicationTypeParameterList"
        Name:
          $ref: "#/components/schemas/ApplicationTypeName"
        Status:
          $ref: "#/components/schemas/ApplicationTypeStatus"
        StatusDetails:
          description: Additional detailed information about the status of the application
            type.
          type: string
        Version:
          $ref: "#/components/schemas/ApplicationTypeVersion"
    ApplicationTypeManifest:
      description: Contains the manifest describing an application type registered in a
        Service Fabric cluster.
      properties:
        Manifest:
          description: The XML manifest as a string.
          type: string
    ApplicationTypeName:
      description: The application type name as defined in the application manifest.
      type: string
    ApplicationTypeParameterList:
      description: List of application type parameters that can be overridden when creating
        or updating the application.
      items:
        $ref: "#/components/schemas/ApplicationParameter"
      type: array
    ApplicationTypeStatus:
      description: The status of the application type.
      enum:
        - Invalid
        - Provisioning
        - Available
        - Unprovisioning
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: ApplicationTypeStatus
        values:
          - description: Indicates the application type status is invalid. All Service
              Fabric enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the application type is being provisioned in the
              cluster. The value is 1.
            value: Provisioning
          - description: Indicates that the application type is fully provisioned and is
              available for use. An application of this type and version can be
              created. The value is 2.
            value: Available
          - description: Indicates that the application type is in process of being
              unprovisioned from the cluster. The value is 3.
            value: Unprovisioning
          - description: Indicates that the application type provisioning failed and it is
              unavailable for use. The failure details can be obtained from the
              application type information query. The failed application type
              information remains in the cluster until it is unprovisioned or
              reprovisioned successfully. The value is 4.
            value: Failed
    ApplicationTypeVersion:
      description: The version of the application type as defined in the application
        manifest.
      type: string
    ApplicationUnhealthyEvaluations:
      description: List of health evaluations that resulted in the current aggregated
        health state.
      items:
        $ref: "#/components/schemas/HealthEvaluationWrapper"
      type: array
    ApplicationUpgradeCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Upgrade Completed event.
      properties:
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Application type version.
          type: string
        OverallUpgradeElapsedTimeInMs:
          description: Overall upgrade time in milli-seconds.
          format: double
          type: number
      required:
        - ApplicationTypeName
        - ApplicationTypeVersion
        - OverallUpgradeElapsedTimeInMs
      x-ms-discriminator-value: ApplicationUpgradeCompleted
    ApplicationUpgradeDescription:
      description: Describes the parameters for an application upgrade. Note that upgrade
        description replaces the existing application description. This means
        that if the parameters are not specified, the existing parameters on the
        applications will be overwritten with the empty parameters list. This
        would result in the application using the default value of the
        parameters from the application manifest. If you do not want to change
        any existing parameter values, please get the application parameters
        first using the GetApplicationInfo query and then supply those values as
        Parameters in this ApplicationUpgradeDescription.
      properties:
        ApplicationHealthPolicy:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
        ForceRestart:
          $ref: "#/components/schemas/ForceRestart"
        MonitoringPolicy:
          $ref: "#/components/schemas/MonitoringPolicyDescription"
        Name:
          $ref: "#/components/schemas/TargetApplicationName"
        Parameters:
          $ref: "#/components/schemas/ApplicationParameterList"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        SortOrder:
          $ref: "#/components/schemas/UpgradeSortOrder"
        TargetApplicationTypeVersion:
          $ref: "#/components/schemas/TargetApplicationTypeVersion"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeKind"
        UpgradeReplicaSetCheckTimeoutInSeconds:
          $ref: "#/components/schemas/UpgradeReplicaSetCheckTimeout"
      required:
        - Name
        - TargetApplicationTypeVersion
        - UpgradeKind
    ApplicationUpgradeDomainCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Upgrade Domain Completed event.
      properties:
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Target Application type version.
          type: string
        CurrentApplicationTypeVersion:
          description: Current Application type version.
          type: string
        UpgradeDomainElapsedTimeInMs:
          description: Upgrade time of domain in milli-seconds.
          format: double
          type: number
        UpgradeDomains:
          description: Upgrade domains.
          type: string
        UpgradeState:
          description: State of upgrade.
          type: string
      required:
        - ApplicationTypeName
        - CurrentApplicationTypeVersion
        - ApplicationTypeVersion
        - UpgradeState
        - UpgradeDomains
        - UpgradeDomainElapsedTimeInMs
      x-ms-discriminator-value: ApplicationUpgradeDomainCompleted
    ApplicationUpgradeProgressInfo:
      description: Describes the parameters for an application upgrade.
      properties:
        CurrentUpgradeDomainProgress:
          $ref: "#/components/schemas/CurrentUpgradeDomainProgressInfo"
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        FailureTimestampUtc:
          description: The estimated UTC datetime when the upgrade failed and FailureAction
            was executed.
          type: string
        Name:
          $ref: "#/components/schemas/TargetApplicationName"
        NextUpgradeDomain:
          $ref: "#/components/schemas/NextUpgradeDomain"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        StartTimestampUtc:
          description: The estimated UTC datetime when the upgrade started.
          type: string
        TargetApplicationTypeVersion:
          $ref: "#/components/schemas/TargetApplicationTypeVersion"
        TypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
        UpgradeDescription:
          $ref: "#/components/schemas/ApplicationUpgradeDescription"
        UpgradeDomainDurationInMilliseconds:
          description: The estimated total amount of time spent processing the current
            upgrade domain.
          type: string
        UpgradeDomainProgressAtFailure:
          $ref: "#/components/schemas/FailureUpgradeDomainProgressInfo"
        UpgradeDomains:
          $ref: "#/components/schemas/UpgradeDomainInfoList"
        UpgradeDurationInMilliseconds:
          description: The estimated total amount of time spent processing the overall
            upgrade.
          type: string
        UpgradeState:
          $ref: "#/components/schemas/UpgradeState"
        UpgradeStatusDetails:
          description: Additional detailed information about the status of the pending
            upgrade.
          type: string
    ApplicationUpgradeRollbackCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Upgrade Rollback Completed event.
      properties:
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Application type version.
          type: string
        FailureReason:
          description: Describes reason of failure.
          type: string
        OverallUpgradeElapsedTimeInMs:
          description: Overall upgrade time in milli-seconds.
          format: double
          type: number
      required:
        - ApplicationTypeName
        - ApplicationTypeVersion
        - FailureReason
        - OverallUpgradeElapsedTimeInMs
      x-ms-discriminator-value: ApplicationUpgradeRollbackCompleted
    ApplicationUpgradeRollbackStartedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Upgrade Rollback Started event.
      properties:
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Target Application type version.
          type: string
        CurrentApplicationTypeVersion:
          description: Current Application type version.
          type: string
        FailureReason:
          description: Describes reason of failure.
          type: string
        OverallUpgradeElapsedTimeInMs:
          description: Overall upgrade time in milli-seconds.
          format: double
          type: number
      required:
        - ApplicationTypeName
        - CurrentApplicationTypeVersion
        - ApplicationTypeVersion
        - FailureReason
        - OverallUpgradeElapsedTimeInMs
      x-ms-discriminator-value: ApplicationUpgradeRollbackStarted
    ApplicationUpgradeStartedEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Application Upgrade Started event.
      properties:
        ApplicationTypeName:
          description: Application type name.
          type: string
        ApplicationTypeVersion:
          description: Target Application type version.
          type: string
        CurrentApplicationTypeVersion:
          description: Current Application type version.
          type: string
        FailureAction:
          description: Action if failed.
          type: string
        RollingUpgradeMode:
          description: Mode of upgrade.
          type: string
        UpgradeType:
          description: Type of upgrade.
          type: string
      required:
        - ApplicationTypeName
        - CurrentApplicationTypeVersion
        - ApplicationTypeVersion
        - UpgradeType
        - RollingUpgradeMode
        - FailureAction
      x-ms-discriminator-value: ApplicationUpgradeStarted
    ApplicationUpgradeUpdateDescription:
      description: Describes the parameters for updating an ongoing application upgrade.
      properties:
        ApplicationHealthPolicy:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
        Name:
          $ref: "#/components/schemas/ApplicationName"
        UpdateDescription:
          $ref: "#/components/schemas/RollingUpgradeUpdateDescription"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeKind"
      required:
        - Name
        - UpgradeKind
    ApplicationsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for applications, containing health
        evaluations for each unhealthy application that impacted current
        aggregated health state.
      properties:
        MaxPercentUnhealthyApplications:
          description: Maximum allowed percentage of unhealthy applications from the
            ClusterHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of applications from the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Applications
    AutoScalingMechanism:
      description: Describes the mechanism for performing auto scaling operation. Derived
        classes will describe the actual mechanism.
      discriminator:
        propertyName: kind
      properties:
        kind:
          $ref: "#/components/schemas/AutoScalingMechanismKind"
      required:
        - kind
      type: object
    AutoScalingMechanismKind:
      description: Enumerates the mechanisms for auto scaling.
      enum:
        - AddRemoveReplica
      type: string
      x-ms-enum:
        modelAsString: true
        name: AutoScalingMechanismKind
        values:
          - description: Indicates that scaling should be performed by adding or removing
              replicas.
            value: AddRemoveReplica
    AutoScalingMetric:
      description: Describes the metric that is used for triggering auto scaling operation.
        Derived classes will describe resources or metrics.
      discriminator:
        propertyName: kind
      properties:
        kind:
          $ref: "#/components/schemas/AutoScalingMetricKind"
      required:
        - kind
      type: object
    AutoScalingMetricKind:
      description: Enumerates the metrics that are used for triggering auto scaling.
      enum:
        - Resource
      type: string
      x-ms-enum:
        modelAsString: true
        name: AutoScalingMetricKind
        values:
          - description: Indicates that the metric is one of resources, like cpu or memory.
            value: Resource
    AutoScalingPolicy:
      description: Describes the auto scaling policy
      properties:
        mechanism:
          $ref: "#/components/schemas/AutoScalingMechanism"
        name:
          description: The name of the auto scaling policy.
          type: string
        trigger:
          $ref: "#/components/schemas/AutoScalingTrigger"
      required:
        - name
        - trigger
        - mechanism
      type: object
    AutoScalingResourceMetric:
      allOf:
        - $ref: "#/components/schemas/AutoScalingMetric"
        - type: object
      description: Describes the resource that is used for triggering auto scaling.
      properties:
        name:
          $ref: "#/components/schemas/AutoScalingResourceMetricName"
      required:
        - name
      x-ms-discriminator-value: Resource
    AutoScalingResourceMetricName:
      description: Enumerates the resources that are used for triggering auto scaling.
      enum:
        - cpu
        - memoryInGB
      type: string
      x-ms-enum:
        modelAsString: true
        name: AutoScalingResourceMetricName
        values:
          - description: Indicates that the resource is CPU cores.
            value: cpu
          - description: Indicates that the resource is memory in GB.
            value: memoryInGB
    AutoScalingTrigger:
      description: Describes the trigger for performing auto scaling operation.
      discriminator:
        propertyName: kind
      properties:
        kind:
          $ref: "#/components/schemas/AutoScalingTriggerKind"
      required:
        - kind
      type: object
    AutoScalingTriggerKind:
      description: Enumerates the triggers for auto scaling.
      enum:
        - AverageLoad
      type: string
      x-ms-enum:
        modelAsString: true
        name: AutoScalingTriggerKind
        values:
          - description: Indicates that scaling should be performed based on average load
              of all replicas in the service.
            value: AverageLoad
    AverageLoadScalingTrigger:
      allOf:
        - $ref: "#/components/schemas/AutoScalingTrigger"
        - type: object
      description: Describes the average load trigger used for auto scaling.
      properties:
        lowerLoadThreshold:
          description: Lower load threshold (if average load is below this threshold,
            service will scale down).
          format: double
          type: number
        metric:
          $ref: "#/components/schemas/AutoScalingMetric"
        scaleIntervalInSeconds:
          description: Scale interval that indicates how often will this trigger be checked.
          minimum: 60
          type: integer
        upperLoadThreshold:
          description: Upper load threshold (if average load is above this threshold,
            service will scale up).
          format: double
          type: number
      required:
        - metric
        - lowerLoadThreshold
        - upperLoadThreshold
        - scaleIntervalInSeconds
      x-ms-discriminator-value: AverageLoad
    AveragePartitionLoadScalingTrigger:
      allOf:
        - $ref: "#/components/schemas/ScalingTriggerDescription"
      description: Represents a scaling trigger related to an average load of a
        metric/resource of a partition.
      properties:
        LowerLoadThreshold:
          description: The lower limit of the load below which a scale in operation should
            be performed.
          format: double
          type: string
        MetricName:
          description: The name of the metric for which usage should be tracked.
          type: string
        ScaleIntervalInSeconds:
          description: The period in seconds on which a decision is made whether to scale
            or not.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        UpperLoadThreshold:
          description: The upper limit of the load beyond which a scale out operation
            should be performed.
          format: double
          type: string
      required:
        - MetricName
        - LowerLoadThreshold
        - UpperLoadThreshold
        - ScaleIntervalInSeconds
      x-ms-discriminator-value: AveragePartitionLoad
    AverageServiceLoadScalingTrigger:
      allOf:
        - $ref: "#/components/schemas/ScalingTriggerDescription"
      description: Represents a scaling policy related to an average load of a
        metric/resource of a service.
      properties:
        LowerLoadThreshold:
          description: The lower limit of the load below which a scale in operation should
            be performed.
          format: double
          type: string
        MetricName:
          description: The name of the metric for which usage should be tracked.
          type: string
        ScaleIntervalInSeconds:
          description: The period in seconds on which a decision is made whether to scale
            or not.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        UpperLoadThreshold:
          description: The upper limit of the load beyond which a scale out operation
            should be performed.
          format: double
          type: string
      required:
        - MetricName
        - LowerLoadThreshold
        - UpperLoadThreshold
        - ScaleIntervalInSeconds
      x-ms-discriminator-value: AverageServiceLoad
    AzureBlobBackupStorageDescription:
      allOf:
        - $ref: "#/components/schemas/BackupStorageDescription"
      description: Describes the parameters for Azure blob store used for storing and
        enumerating backups.
      properties:
        ConnectionString:
          description: The connection string to connect to the Azure blob store.
          type: string
        ContainerName:
          description: The name of the container in the blob store to store and enumerate
            backups from.
          type: string
      required:
        - ConnectionString
        - ContainerName
      x-ms-discriminator-value: AzureBlobStore
    AzureInternalMonitoringPipelineSinkDescription:
      allOf:
        - $ref: "#/components/schemas/DiagnosticsSinkProperties"
      description: Diagnostics settings for Geneva.
      properties:
        accountName:
          description: Azure Internal monitoring pipeline account.
          type: string
        autoKeyConfigUrl:
          description: Azure Internal monitoring pipeline autokey associated with the
            certificate.
          type: string
        fluentdConfigUrl:
          description: Azure Internal monitoring agent fluentd configuration.
          type: string
        maConfigUrl:
          description: Azure Internal monitoring agent configuration.
          type: string
        namespace:
          description: Azure Internal monitoring pipeline account namespace.
          type: string
      x-ms-discriminator-value: AzureInternalMonitoringPipeline
    BackupConfigurationInfo:
      description: Describes the backup configuration information.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/BackupEntityKind"
        PolicyInheritedFrom:
          $ref: "#/components/schemas/BackupPolicyScope"
        PolicyName:
          description: The name of the backup policy which is applicable to this Service
            Fabric application or service or partition.
          type: string
        SuspensionInfo:
          $ref: "#/components/schemas/BackupSuspensionInfo"
      required:
        - Kind
    BackupEntity:
      description: Describes the Service Fabric entity that is configured for backup.
      discriminator:
        propertyName: EntityKind
      properties:
        EntityKind:
          $ref: "#/components/schemas/BackupEntityKind"
      required:
        - EntityKind
    BackupEntityKind:
      description: The entity type of a Service Fabric entity such as Application, Service
        or a Partition where periodic backups can be enabled.
      enum:
        - Invalid
        - Partition
        - Service
        - Application
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupEntityKind
        values:
          - description: Indicates an invalid entity kind. All Service Fabric enumerations
              have the invalid type.
            value: Invalid
          - description: Indicates the entity is a Service Fabric partition.
            value: Partition
          - description: Indicates the entity is a Service Fabric service.
            value: Service
          - description: Indicates the entity is a Service Fabric application.
            value: Application
    BackupInfo:
      description: Represents a backup point which can be used to trigger a restore.
      properties:
        ApplicationName:
          description: Name of the Service Fabric application this partition backup belongs
            to.
          type: string
        BackupChainId:
          description: Unique backup chain ID. All backups part of the same chain has the
            same backup chain id. A backup chain is comprised of 1 full backup
            and multiple incremental backups.
          format: uuid
          type: string
        BackupId:
          description: Unique backup ID .
          format: uuid
          type: string
        BackupLocation:
          description: Location of the backup, relative to the backup store.
          type: string
        BackupType:
          $ref: "#/components/schemas/BackupType"
        CreationTimeUtc:
          description: The date time when this backup was taken.
          format: date-time
          type: string
        EpochOfLastBackupRecord:
          $ref: "#/components/schemas/Epoch"
        FailureError:
          $ref: "#/components/schemas/FabricErrorError"
        LsnOfLastBackupRecord:
          description: LSN of the last record in this backup.
          type: string
        PartitionInformation:
          $ref: "#/components/schemas/PartitionInformation"
        ServiceManifestVersion:
          description: Manifest Version of the service this partition backup belongs to.
          type: string
        ServiceName:
          description: Name of the Service Fabric service this partition backup belongs to.
          type: string
    BackupPartitionDescription:
      description: Describes the parameters for triggering partition's backup.
      properties:
        BackupStorage:
          $ref: "#/components/schemas/BackupStorageDescription"
    BackupPolicyDescription:
      description: Describes a backup policy for configuring periodic backup.
      properties:
        AutoRestoreOnDataLoss:
          description: Specifies whether to trigger restore automatically using the latest
            available backup in case the partition experiences a data loss
            event.
          type: boolean
        MaxIncrementalBackups:
          description: >-
            Defines the maximum number of incremental backups to be taken
            between two full backups. This is just the upper limit. A full
            backup may be taken before specified number of incremental backups
            are completed in one of the following conditions

            - The replica has never taken a full backup since it has become primary,

            - Some of the log records since the last backup has been truncated, or

            - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
          maximum: 255
          minimum: 0
          type: integer
        Name:
          description: The unique name identifying this backup policy.
          type: string
        RetentionPolicy:
          $ref: "#/components/schemas/RetentionPolicyDescription"
        Schedule:
          $ref: "#/components/schemas/BackupScheduleDescription"
        Storage:
          $ref: "#/components/schemas/BackupStorageDescription"
      required:
        - Name
        - AutoRestoreOnDataLoss
        - Schedule
        - MaxIncrementalBackups
        - Storage
    BackupPolicyScope:
      description: Specifies the scope at which the backup policy is applied.
      enum:
        - Invalid
        - Partition
        - Service
        - Application
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupPolicyScope
        values:
          - description: Indicates an invalid backup policy scope type. All Service Fabric
              enumerations have the invalid type.
            value: Invalid
          - description: Indicates the backup policy is applied at partition level. Hence
              overriding any policy which may have applied at partition's
              service or application level.
            value: Partition
          - description: Indicates the backup policy is applied at service level. All
              partitions of the service inherit this policy unless explicitly
              overridden at partition level.
            value: Service
          - description: Indicates the backup policy is applied at application level. All
              services and partitions of the application inherit this policy
              unless explicitly overridden at service or partition level.
            value: Application
    BackupProgressInfo:
      description: Describes the progress of a partition's backup.
      properties:
        BackupId:
          description: Unique ID of the newly created backup.
          format: uuid
          type: string
        BackupLocation:
          description: Location, relative to the backup store, of the newly created backup.
          type: string
        BackupState:
          $ref: "#/components/schemas/BackupState"
        EpochOfLastBackupRecord:
          $ref: "#/components/schemas/Epoch"
        FailureError:
          $ref: "#/components/schemas/FabricErrorError"
        LsnOfLastBackupRecord:
          description: The LSN of last record included in backup.
          type: string
        TimeStampUtc:
          description: TimeStamp in UTC when operation succeeded or failed.
          format: date-time
          type: string
    BackupScheduleDescription:
      description: Describes the backup schedule parameters.
      discriminator:
        propertyName: ScheduleKind
      properties:
        ScheduleKind:
          $ref: "#/components/schemas/BackupScheduleKind"
      required:
        - ScheduleKind
    BackupScheduleFrequencyType:
      description: Describes the frequency with which to run the time based backup schedule.
      enum:
        - Invalid
        - Daily
        - Weekly
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupScheduleFrequencyType
        values:
          - description: Indicates an invalid backup schedule frequency type. All Service
              Fabric enumerations have the invalid type.
            value: Invalid
          - description: Indicates that the time based backup schedule is repeated at a
              daily frequency.
            value: Daily
          - description: Indicates that the time based backup schedule is repeated at a
              weekly frequency.
            value: Weekly
    BackupScheduleKind:
      description: The kind of backup schedule, time based or frequency based.
      enum:
        - Invalid
        - TimeBased
        - FrequencyBased
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupScheduleKind
        values:
          - description: Indicates an invalid backup schedule kind. All Service Fabric
              enumerations have the invalid type.
            value: Invalid
          - description: Indicates a time-based backup schedule.
            value: TimeBased
          - description: Indicates a frequency-based backup schedule.
            value: FrequencyBased
    BackupState:
      description: Represents the current state of the partition backup operation.
      enum:
        - Invalid
        - Accepted
        - BackupInProgress
        - Success
        - Failure
        - Timeout
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupState
        values:
          - description: Indicates an invalid backup state. All Service Fabric enumerations
              have the invalid type.
            value: Invalid
          - description: Operation has been validated and accepted. Backup is yet to be
              triggered.
            value: Accepted
          - description: Backup operation has been triggered and is under process.
            value: BackupInProgress
          - description: Operation completed with success.
            value: Success
          - description: Operation completed with failure.
            value: Failure
          - description: Operation timed out.
            value: Timeout
    BackupStorageDescription:
      description: Describes the parameters for the backup storage.
      discriminator:
        propertyName: StorageKind
      properties:
        FriendlyName:
          description: Friendly name for this backup storage.
          type: string
        StorageKind:
          $ref: "#/components/schemas/BackupStorageKind"
      required:
        - StorageKind
    BackupStorageKind:
      description: The kind of backup storage, where backups are saved.
      enum:
        - Invalid
        - FileShare
        - AzureBlobStore
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupStorageKind
        values:
          - description: Indicates an invalid backup storage kind. All Service Fabric
              enumerations have the invalid type.
            value: Invalid
          - description: Indicates file/ SMB share to be used as backup storage.
            value: FileShare
          - description: Indicates Azure blob store to be used as backup storage.
            value: AzureBlobStore
    BackupSuspensionInfo:
      description: Describes the backup suspension details.
      properties:
        IsSuspended:
          description: Indicates whether periodic backup is suspended at this level or not.
          type: boolean
        SuspensionInheritedFrom:
          $ref: "#/components/schemas/BackupSuspensionScope"
    BackupSuspensionScope:
      description: Specifies the scope at which the backup suspension was applied.
      enum:
        - Invalid
        - Partition
        - Service
        - Application
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupSuspensionScope
        values:
          - description: Indicates an invalid backup suspension scope type also indicating
              entity is not suspended. All Service Fabric enumerations have the
              invalid type.
            value: Invalid
          - description: Indicates the backup suspension is applied at partition level.
            value: Partition
          - description: Indicates the backup suspension is applied at service level. All
              partitions of the service are hence suspended for backup.
            value: Service
          - description: Indicates the backup suspension is applied at application level.
              All services and partitions of the application are hence suspended
              for backup.
            value: Application
    BackupType:
      description: Describes the type of backup, whether its full or incremental.
      enum:
        - Invalid
        - Full
        - Incremental
      type: string
      x-ms-enum:
        modelAsString: true
        name: BackupType
        values:
          - description: Indicates an invalid backup type. All Service Fabric enumerations
              have the invalid type.
            value: Invalid
          - description: Indicates a full backup.
            value: Full
          - description: Indicates an incremental backup. A backup chain is comprised of a
              full backup followed by 0 or more incremental backups.
            value: Incremental
    BasicRetentionPolicyDescription:
      allOf:
        - $ref: "#/components/schemas/RetentionPolicyDescription"
      description: Describes basic retention policy.
      properties:
        MinimumNumberOfBackups:
          description: It is the minimum number of backups to be retained at any point of
            time. If specified with a non zero value, backups will not be
            deleted even if the backups have gone past retention duration and
            have number of backups less than or equal to it.
          minimum: 0
          type: integer
        RetentionDuration:
          description: It is the minimum duration for which a backup created, will remain
            stored in the storage and might get deleted after that span of time.
            It should be specified in ISO8601 format.
          format: duration
          type: string
      required:
        - RetentionDuration
      x-ms-discriminator-value: Basic
    BinaryPropertyValue:
      allOf:
        - $ref: "#/components/schemas/PropertyValue"
      description: Describes a Service Fabric property value of type Binary.
      properties:
        Data:
          $ref: "#/components/schemas/ByteArray"
      required:
        - Data
      x-ms-discriminator-value: Binary
    ByteArray:
      description: Array of bytes to be sent as an integer array. Each element of array is
        a number between 0 and 255.
      items:
        type: integer
      type: array
    Chaos:
      description: Contains a description of Chaos.
      properties:
        ChaosParameters:
          $ref: "#/components/schemas/ChaosParameters"
        ScheduleStatus:
          $ref: "#/components/schemas/ChaosScheduleStatus"
        Status:
          $ref: "#/components/schemas/ChaosStatus"
    ChaosCodePackageRestartScheduledEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Chaos Restart Code Package Fault Scheduled event.
      properties:
        CodePackageName:
          description: Code package name.
          type: string
        FaultGroupId:
          description: Id of fault group.
          format: uuid
          type: string
        FaultId:
          description: Id of fault.
          format: uuid
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        ServiceManifestName:
          description: Service manifest name.
          type: string
        ServicePackageActivationId:
          description: Id of Service package activation.
          type: string
      required:
        - FaultGroupId
        - FaultId
        - NodeName
        - ServiceManifestName
        - CodePackageName
        - ServicePackageActivationId
      x-ms-discriminator-value: ChaosCodePackageRestartScheduled
    ChaosContext:
      description: >-
        Describes a map, which is a collection of (string, string) type
        key-value pairs. The map can be used to record information about

        the Chaos run. There cannot be more than 100 such pairs and each string (key or value) can be at most 4095 characters long.

        This map is set by the starter of the Chaos run to optionally store the context about the specific run.
      properties:
        Map:
          $ref: "#/components/schemas/ChaosContextMap"
    ChaosContextMap:
      additionalProperties:
        type: string
      description: Describes a map that contains a collection of ChaosContextMapItem's.
    ChaosEvent:
      description: Represents an event generated during a Chaos run.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/ChaosEventKind"
        TimeStampUtc:
          description: The UTC timestamp when this Chaos event was generated.
          format: date-time
          type: string
      required:
        - Kind
        - TimeStampUtc
    ChaosEventHistory:
      description: An list of Chaos events that were generated during the time range passed
        into the GetChaosReport API call.
      items:
        $ref: "#/components/schemas/ChaosEventWrapper"
      type: array
    ChaosEventKind:
      description: The kind of Chaos event.
      enum:
        - Invalid
        - Started
        - ExecutingFaults
        - Waiting
        - ValidationFailed
        - TestError
        - Stopped
      type: string
      x-ms-enum:
        modelAsString: true
        name: ChaosEventKind
        values:
          - description: Indicates an invalid Chaos event kind. All Service Fabric
              enumerations have the invalid type.
            value: Invalid
          - description: Indicates a Chaos event that gets generated when Chaos is started.
            value: Started
          - description: Indicates a Chaos event that gets generated when Chaos has decided
              on the faults for an iteration. This Chaos event contains the
              details of the faults as a list of strings.
            value: ExecutingFaults
          - description: Indicates a Chaos event that gets generated when Chaos is waiting
              for the cluster to become ready for faulting, for example, Chaos
              may be waiting for the on-going upgrade to finish.
            value: Waiting
          - description: Indicates a Chaos event that gets generated when the cluster
              entities do not become stable and healthy within
              ChaosParameters.MaxClusterStabilizationTimeoutInSeconds.
            value: ValidationFailed
          - description: Indicates a Chaos event that gets generated when an unexpected
              event has occurred in the Chaos engine, for example, due to the
              cluster snapshot being inconsistent, while faulting a faultable
              entity Chaos found that the entity was already faulted.
            value: TestError
          - description: Indicates a Chaos event that gets generated when Chaos stops
              because either the user issued a stop or the time to run was up.
            value: Stopped
    ChaosEventWrapper:
      description: Wrapper object for Chaos event.
      properties:
        ChaosEvent:
          $ref: "#/components/schemas/ChaosEvent"
    ChaosEventsSegment:
      description: Contains the list of Chaos events and the continuation token to get the
        next segment.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        History:
          $ref: "#/components/schemas/ChaosEventHistory"
    ChaosNodeRestartScheduledEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Chaos Restart Node Fault Scheduled event.
      properties:
        FaultGroupId:
          description: Id of fault group.
          format: uuid
          type: string
        FaultId:
          description: Id of fault.
          format: uuid
          type: string
        NodeInstanceId:
          description: Id of Node instance.
          format: int64
          type: integer
      required:
        - NodeInstanceId
        - FaultGroupId
        - FaultId
      x-ms-discriminator-value: ChaosNodeRestartScheduled
    ChaosParameters:
      description: Defines all the parameters to configure a Chaos run.
      properties:
        ChaosTargetFilter:
          $ref: "#/components/schemas/ChaosTargetFilter"
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
        Context:
          $ref: "#/components/schemas/ChaosContext"
        EnableMoveReplicaFaults:
          default: true
          description: Enables or disables the move primary and move secondary faults.
          type: boolean
        MaxClusterStabilizationTimeoutInSeconds:
          default: 60
          description: >-
            The maximum amount of time to wait for all cluster entities to
            become stable and healthy. Chaos executes in iterations and at the
            start of each iteration it validates the health of cluster entities.

            During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        MaxConcurrentFaults:
          default: 1
          description: >-
            MaxConcurrentFaults is the maximum number of concurrent faults
            induced per iteration.

            Chaos executes in iterations and two consecutive iterations are separated by a validation phase.

            The higher the concurrency, the more aggressive the injection of faults, leading to inducing more complex series of states to uncover bugs.

            The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        TimeToRunInSeconds:
          default: "4294967295"
          description: Total time (in seconds) for which Chaos will run before
            automatically stopping. The maximum allowed value is 4,294,967,295
            (System.UInt32.MaxValue).
          type: string
        WaitTimeBetweenFaultsInSeconds:
          default: 20
          description: >-
            Wait time (in seconds) between consecutive faults within a single
            iteration.

            The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through.

            The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        WaitTimeBetweenIterationsInSeconds:
          default: 30
          description: >-
            Time-separation (in seconds) between two consecutive iterations of
            Chaos.

            The larger the value, the lower the fault injection rate.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
    ChaosParametersDictionaryItem:
      description: Defines an item in ChaosParametersDictionary of the Chaos Schedule.
      properties:
        Key:
          description: The key identifying the Chaos Parameter in the dictionary. This key
            is referenced by Chaos Schedule Jobs.
          type: string
        Value:
          $ref: "#/components/schemas/ChaosParameters"
      required:
        - Key
        - Value
    ChaosPartitionPrimaryMoveScheduledEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionEvent"
      description: Chaos Move Primary Fault Scheduled event.
      properties:
        FaultGroupId:
          description: Id of fault group.
          format: uuid
          type: string
        FaultId:
          description: Id of fault.
          format: uuid
          type: string
        ForcedMove:
          description: Indicates a forced move.
          type: boolean
        NodeTo:
          $ref: "#/components/schemas/NodeName"
        ServiceName:
          description: Service name.
          type: string
      required:
        - FaultGroupId
        - FaultId
        - ServiceName
        - NodeTo
        - ForcedMove
      x-ms-discriminator-value: ChaosPartitionPrimaryMoveScheduled
    ChaosPartitionSecondaryMoveScheduledEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionEvent"
      description: Chaos Move Secondary Fault Scheduled event.
      properties:
        DestinationNode:
          $ref: "#/components/schemas/NodeName"
        FaultGroupId:
          description: Id of fault group.
          format: uuid
          type: string
        FaultId:
          description: Id of fault.
          format: uuid
          type: string
        ForcedMove:
          description: Indicates a forced move.
          type: boolean
        ServiceName:
          description: Service name.
          type: string
        SourceNode:
          $ref: "#/components/schemas/NodeName"
      required:
        - FaultGroupId
        - FaultId
        - ServiceName
        - SourceNode
        - DestinationNode
        - ForcedMove
      x-ms-discriminator-value: ChaosPartitionSecondaryMoveScheduled
    ChaosReplicaRemovalScheduledEvent:
      allOf:
        - $ref: "#/components/schemas/ReplicaEvent"
      description: Chaos Remove Replica Fault Scheduled event.
      properties:
        FaultGroupId:
          description: Id of fault group.
          format: uuid
          type: string
        FaultId:
          description: Id of fault.
          format: uuid
          type: string
        ServiceUri:
          description: Service name.
          type: string
      required:
        - FaultGroupId
        - FaultId
        - ServiceUri
      x-ms-discriminator-value: ChaosReplicaRemovalScheduled
    ChaosReplicaRestartScheduledEvent:
      allOf:
        - $ref: "#/components/schemas/ReplicaEvent"
      description: Chaos Restart Replica Fault Scheduled event.
      properties:
        FaultGroupId:
          description: Id of fault group.
          format: uuid
          type: string
        FaultId:
          description: Id of fault.
          format: uuid
          type: string
        ServiceUri:
          description: Service name.
          type: string
      required:
        - FaultGroupId
        - FaultId
        - ServiceUri
      x-ms-discriminator-value: ChaosReplicaRestartScheduled
    ChaosSchedule:
      description: Defines the schedule used by Chaos.
      properties:
        ChaosParametersDictionary:
          description: A mapping of string names to Chaos Parameters to be referenced by
            Chaos Schedule Jobs.
          items:
            $ref: "#/components/schemas/ChaosParametersDictionaryItem"
          type: array
        ExpiryDate:
          default: 9999-12-31T23:59:59.999Z
          description: The date and time Chaos will continue to use this schedule until.
          format: date-time
          type: string
        Jobs:
          description: A list of all Chaos Schedule Jobs that will be automated by the
            schedule.
          items:
            $ref: "#/components/schemas/ChaosScheduleJob"
          type: array
        StartDate:
          default: 1601-01-01T00:00:00Z
          description: The date and time Chaos will start using this schedule.
          format: date-time
          type: string
    ChaosScheduleDescription:
      description: Defines the Chaos Schedule used by Chaos and the version of the Chaos
        Schedule. The version value wraps back to 0 after surpassing
        2,147,483,647.
      properties:
        Schedule:
          $ref: "#/components/schemas/ChaosSchedule"
        Version:
          description: The version number of the Schedule.
          format: int32
          minimum: 0
          type: integer
    ChaosScheduleJob:
      description: Defines a repetition rule and parameters of Chaos to be used with the
        Chaos Schedule.
      properties:
        ChaosParameters:
          description: A reference to which Chaos Parameters of the Chaos Schedule to use.
          type: string
        Days:
          $ref: "#/components/schemas/ChaosScheduleJobActiveDaysOfWeek"
        Times:
          description: A list of Time Ranges that specify when during active days that this
            job will run. The times are interpreted as UTC.
          items:
            $ref: "#/components/schemas/TimeRange"
          type: array
    ChaosScheduleJobActiveDaysOfWeek:
      description: Defines the days of the week that a Chaos Schedule Job will run for.
      properties:
        Friday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Friday
          type: boolean
        Monday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Monday
          type: boolean
        Saturday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Saturday
          type: boolean
        Sunday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Sunday
          type: boolean
        Thursday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Thursday
          type: boolean
        Tuesday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Tuesday
          type: boolean
        Wednesday:
          default: false
          description: Indicates if the Chaos Schedule Job will run on Wednesday
          type: boolean
    ChaosScheduleStatus:
      description: Current status of the schedule.
      enum:
        - Invalid
        - Stopped
        - Active
        - Expired
        - Pending
      type: string
      x-ms-enum:
        modelAsString: true
        name: ChaosScheduleStatus
        values:
          - description: Indicates an invalid Chaos Schedule status. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the schedule is stopped and not being used to
              schedule runs of chaos. The value is one.
            value: Stopped
          - description: Indicates that the schedule is active and is being used to
              schedule runs of Chaos. The value is two.
            value: Active
          - description: Indicates that the schedule is expired and will no longer be used
              to schedule runs of Chaos. The value is three.
            value: Expired
          - description: Indicates that the schedule is pending and is not yet being used
              to schedule runs of Chaos but will be used when the start time is
              passed. The value is four.
            value: Pending
    ChaosStartedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Chaos Started event.
      properties:
        ChaosContext:
          description: Chaos Context.
          type: string
        ClusterHealthPolicy:
          description: Health policy.
          type: string
        IncludedApplicationList:
          description: List of included Applications.
          type: string
        IncludedNodeTypeList:
          description: List of included Node types.
          type: string
        MaxClusterStabilizationTimeoutInSeconds:
          description: Maximum timeout for cluster stabilization in seconds.
          format: double
          type: number
        MaxConcurrentFaults:
          description: Maximum number of concurrent faults.
          format: int64
          type: integer
        MoveReplicaFaultEnabled:
          description: Indicates MoveReplica fault is enabled.
          type: boolean
        TimeToRunInSeconds:
          description: Time to run in seconds.
          format: double
          type: number
        WaitTimeBetweenFaultsInSeconds:
          description: Wait time between faults in seconds.
          format: double
          type: number
        WaitTimeBetweenIterationsInSeconds:
          description: Wait time between iterations in seconds.
          format: double
          type: number
      required:
        - MaxConcurrentFaults
        - TimeToRunInSeconds
        - MaxClusterStabilizationTimeoutInSeconds
        - WaitTimeBetweenIterationsInSeconds
        - WaitTimeBetweenFaultsInSeconds
        - MoveReplicaFaultEnabled
        - IncludedNodeTypeList
        - IncludedApplicationList
        - ClusterHealthPolicy
        - ChaosContext
      x-ms-discriminator-value: ChaosStarted
    ChaosStatus:
      description: Current status of the Chaos run.
      enum:
        - Invalid
        - Running
        - Stopped
      type: string
      x-ms-enum:
        modelAsString: true
        name: ChaosStatus
        values:
          - description: Indicates an invalid Chaos status. All Service Fabric enumerations
              have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that Chaos is not stopped. The value is one.
            value: Running
          - description: Indicates that Chaos is not scheduling further faults. The value
              is two.
            value: Stopped
    ChaosStoppedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Chaos Stopped event.
      properties:
        Reason:
          description: Describes reason.
          type: string
      required:
        - Reason
      x-ms-discriminator-value: ChaosStopped
    ChaosTargetFilter:
      description: >-
        Defines all filters for targeted Chaos faults, for example, faulting
        only certain node types or faulting only certain applications.

        If ChaosTargetFilter is not used, Chaos faults all cluster entities. If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter

        specification. NodeTypeInclusionList and ApplicationInclusionList allow a union semantics only. It is not possible to specify an intersection

        of NodeTypeInclusionList and ApplicationInclusionList. For example, it is not possible to specify "fault this application only when it is on that node type."

        Once an entity is included in either NodeTypeInclusionList or ApplicationInclusionList, that entity cannot be excluded using ChaosTargetFilter. Even if

        applicationX does not appear in ApplicationInclusionList, in some Chaos iteration applicationX can be faulted because it happens to be on a node of nodeTypeY that is included

        in NodeTypeInclusionList. If both NodeTypeInclusionList and ApplicationInclusionList are null or empty, an ArgumentException is thrown.
      properties:
        ApplicationInclusionList:
          description: >-
            A list of application URIs to include in Chaos faults.

            All replicas belonging to services of these applications are amenable to replica faults (restart replica, remove replica, move primary, and move secondary) by Chaos.

            Chaos may restart a code package only if the code package hosts replicas of these applications only.

            If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application ends up on a node of a node type that is included in NodeTypeInclusionList.

            However, if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be faulted.

            At most 1000 application names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfApplicationsInChaosEntityFilter configuration.
          items:
            $ref: "#/components/schemas/ApplicationName"
          type: array
        NodeTypeInclusionList:
          description: >-
            A list of node types to include in Chaos faults.

            All types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move secondary) are enabled for the nodes of these node types.

            If a node type (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like NodeRestart) will never be enabled for the nodes of

            NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the ApplicationInclusionList.

            happens to reside on a node of NodeTypeX.

            At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfNodeTypesInChaosEntityFilter configuration.
          items:
            $ref: "#/components/schemas/NodeType"
          type: array
    CheckExistsPropertyBatchOperation:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchOperation"
      description: >-
        Represents a PropertyBatchOperation that compares the Boolean existence
        of a property with the Exists argument.

        The PropertyBatchOperation operation fails if the property's existence is not equal to the Exists argument.

        The CheckExistsPropertyBatchOperation is generally used as a precondition for the write operations in the batch.

        Note that if one PropertyBatchOperation in a PropertyBatch fails,

        the entire batch fails and cannot be committed in a transactional manner.
      properties:
        Exists:
          description: Whether or not the property should exist for the operation to pass.
          type: boolean
      required:
        - Exists
      x-ms-discriminator-value: CheckExists
    CheckSequencePropertyBatchOperation:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchOperation"
      description: >-
        Compares the Sequence Number of a property with the SequenceNumber
        argument.

        A property's sequence number can be thought of as that property's version.

        Every time the property is modified, its sequence number is increased.

        The sequence number can be found in a property's metadata.

        The comparison fails if the sequence numbers are not equal.

        CheckSequencePropertyBatchOperation is generally used as a precondition for the write operations in the batch.

        Note that if one PropertyBatchOperation in a PropertyBatch fails,

        the entire batch fails and cannot be committed in a transactional manner.
      properties:
        SequenceNumber:
          description: The expected sequence number.
          type: string
      required:
        - SequenceNumber
      x-ms-discriminator-value: CheckSequence
    CheckValuePropertyBatchOperation:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchOperation"
      description: >-
        Represents a PropertyBatchOperation that compares the value of the
        property with the expected value.

        The CheckValuePropertyBatchOperation is generally used as a precondition for the write operations in the batch.

        Note that if one PropertyBatchOperation in a PropertyBatch fails,

        the entire batch fails and cannot be committed in a transactional manner.
      properties:
        Value:
          $ref: "#/components/schemas/PropertyValue"
      required:
        - Value
      x-ms-discriminator-value: CheckValue
    ClusterConfiguration:
      description: Information about the standalone cluster configuration.
      properties:
        ClusterConfiguration:
          description: The contents of the cluster configuration file.
          type: string
    ClusterConfigurationUpgradeDescription:
      description: Describes the parameters for a standalone cluster configuration upgrade.
      properties:
        ApplicationHealthPolicies:
          $ref: "#/components/schemas/ApplicationHealthPolicies"
        ClusterConfig:
          description: The cluster configuration as a JSON string. For example, [this
            file](https://github.com/Azure-Samples/service-fabric-dotnet-standalone-cluster-configuration/blob/master/Samples/ClusterConfig.Unsecure.DevCluster.json)
            contains JSON describing the [nodes and other properties of the
            cluster](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-manifest).
          type: string
        HealthCheckRetryTimeout:
          default: PT0H0M0S
          description: The length of time between attempts to perform health checks if the
            application or cluster is not healthy.
          format: duration
          type: string
        HealthCheckStableDurationInSeconds:
          default: PT0H0M0S
          description: The length of time that the application or cluster must remain
            healthy before the upgrade proceeds to the next upgrade domain.
          format: duration
          type: string
        HealthCheckWaitDurationInSeconds:
          default: PT0H0M0S
          description: The length of time to wait after completing an upgrade domain before
            starting the health checks process.
          format: duration
          type: string
        MaxPercentDeltaUnhealthyNodes:
          default: 0
          description: The maximum allowed percentage of delta health degradation during
            the upgrade. Allowed values are integer values from zero to 100.
          type: integer
        MaxPercentUnhealthyApplications:
          default: 0
          description: The maximum allowed percentage of unhealthy applications during the
            upgrade. Allowed values are integer values from zero to 100.
          type: integer
        MaxPercentUnhealthyNodes:
          default: 0
          description: The maximum allowed percentage of unhealthy nodes during the
            upgrade. Allowed values are integer values from zero to 100.
          type: integer
        MaxPercentUpgradeDomainDeltaUnhealthyNodes:
          default: 0
          description: The maximum allowed percentage of upgrade domain delta health
            degradation during the upgrade. Allowed values are integer values
            from zero to 100.
          type: integer
        UpgradeDomainTimeoutInSeconds:
          default: PT0H0M0S
          description: The timeout for the upgrade domain.
          format: duration
          type: string
        UpgradeTimeoutInSeconds:
          default: PT0H0M0S
          description: The upgrade timeout.
          format: duration
          type: string
      required:
        - ClusterConfig
    ClusterConfigurationUpgradeStatusInfo:
      description: Information about a standalone cluster configuration upgrade status.
      properties:
        ConfigVersion:
          description: The cluster configuration version.
          type: string
        Details:
          description: The cluster upgrade status details.
          type: string
        ProgressStatus:
          description: The cluster manifest version.
          type: integer
        UpgradeState:
          $ref: "#/components/schemas/UpgradeState"
    ClusterEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Cluster Events.
      x-ms-discriminator-value: ClusterEvent
    ClusterEventList:
      description: A list of ClusterEvent objects.
      items:
        $ref: "#/components/schemas/ClusterEvent"
      type: array
    ClusterFabricCodeVersionString:
      description: The ServiceFabric code version of the cluster.
      type: string
    ClusterFabricConfigVersionString:
      description: The cluster configuration version (specified in the cluster manifest).
      type: string
    ClusterHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: >-
        Represents the health of the cluster.

        Contains the cluster aggregated health state, the cluster application and node health states as well as the health events and the unhealthy evaluations.
      properties:
        ApplicationHealthStates:
          description: Cluster application health states as found in the health store.
          items:
            $ref: "#/components/schemas/ApplicationHealthState"
          type: array
        NodeHealthStates:
          description: Cluster node health states as found in the health store.
          items:
            $ref: "#/components/schemas/NodeHealthState"
          type: array
    ClusterHealthChunk:
      description: >-
        Represents the health chunk of the cluster.

        Contains the cluster aggregated health state, and the cluster entities that respect the input filter.
      properties:
        ApplicationHealthStateChunks:
          $ref: "#/components/schemas/ApplicationHealthStateChunkList"
        HealthState:
          $ref: "#/components/schemas/HealthState"
        NodeHealthStateChunks:
          $ref: "#/components/schemas/NodeHealthStateChunkList"
    ClusterHealthChunkQueryDescription:
      description: The cluster health chunk query description, which can specify the health
        policies to evaluate cluster health and very expressive filters to
        select which cluster entities to include in response.
      properties:
        ApplicationFilters:
          description: >-
            Defines a list of filters that specify which applications to be
            included in the returned cluster health chunk.

            If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters.

            The cluster health chunk query may specify multiple application filters.

            For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.
          items:
            $ref: "#/components/schemas/ApplicationHealthStateFilter"
          type: array
        ApplicationHealthPolicies:
          $ref: "#/components/schemas/ApplicationHealthPolicies"
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
        NodeFilters:
          description: >-
            Defines a list of filters that specify which nodes to be included in
            the returned cluster health chunk.

            If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters.

            The cluster health chunk query may specify multiple node filters.

            For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.
          items:
            $ref: "#/components/schemas/NodeHealthStateFilter"
          type: array
    ClusterHealthPolicies:
      description: Health policies to evaluate cluster health.
      properties:
        ApplicationHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationHealthPolicyMap"
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
    ClusterHealthPolicy:
      description: Defines a health policy used to evaluate the health of the cluster or of
        a cluster node.
      properties:
        ApplicationTypeHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationTypeHealthPolicyMap"
        ConsiderWarningAsError:
          default: false
          description: Indicates whether warnings are treated with the same severity as
            errors.
          type: boolean
        MaxPercentUnhealthyApplications:
          default: 0
          description: >-
            The maximum allowed percentage of unhealthy applications before
            reporting an error. For example, to allow 10% of applications to be
            unhealthy, this value would be 10.


            The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.

            The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
          type: integer
        MaxPercentUnhealthyNodes:
          default: 0
          description: >-
            The maximum allowed percentage of unhealthy nodes before reporting
            an error. For example, to allow 10% of nodes to be unhealthy, this
            value would be 10.


            The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.

            If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.

            The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.


            In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
          type: integer
    ClusterHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: ClusterHealthReportExpired
    ClusterLoadInfo:
      description: Information about load in a Service Fabric cluster. It holds a summary
        of all metrics and their load in a cluster.
      properties:
        LastBalancingEndTimeUtc:
          description: The end time of last resource balancing run.
          format: date-time
          type: string
        LastBalancingStartTimeUtc:
          description: The starting time of last resource balancing run.
          format: date-time
          type: string
        LoadMetricInformation:
          description: List that contains metrics and their load information in this
            cluster.
          items:
            $ref: "#/components/schemas/LoadMetricInformation"
          type: array
    ClusterManifest:
      description: Information about the cluster manifest.
      properties:
        Manifest:
          description: The contents of the cluster manifest file.
          type: string
    ClusterNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: ClusterNewHealthReport
    ClusterUpgradeCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Upgrade Completed event.
      properties:
        OverallUpgradeElapsedTimeInMs:
          description: Overall duration of upgrade in milli-seconds.
          format: double
          type: number
        TargetClusterVersion:
          description: Target Cluster version.
          type: string
      required:
        - TargetClusterVersion
        - OverallUpgradeElapsedTimeInMs
      x-ms-discriminator-value: ClusterUpgradeCompleted
    ClusterUpgradeDescriptionObject:
      description: Represents a ServiceFabric cluster upgrade
      properties:
        ApplicationHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationHealthPolicyMap"
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
        ClusterUpgradeHealthPolicy:
          $ref: "#/components/schemas/ClusterUpgradeHealthPolicyObject"
        CodeVersion:
          $ref: "#/components/schemas/ClusterFabricCodeVersionString"
        ConfigVersion:
          $ref: "#/components/schemas/ClusterFabricConfigVersionString"
        EnableDeltaHealthEvaluation:
          $ref: "#/components/schemas/DeltaHealthEvaluationBool"
        ForceRestart:
          $ref: "#/components/schemas/ForceRestart"
        MonitoringPolicy:
          $ref: "#/components/schemas/MonitoringPolicyDescription"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        SortOrder:
          $ref: "#/components/schemas/UpgradeSortOrder"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeKind"
        UpgradeReplicaSetCheckTimeoutInSeconds:
          $ref: "#/components/schemas/UpgradeReplicaSetCheckTimeout"
    ClusterUpgradeDomainCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Upgrade Domain Completed event.
      properties:
        TargetClusterVersion:
          description: Target Cluster version.
          type: string
        UpgradeDomainElapsedTimeInMs:
          description: Duration of domain upgrade in milli-seconds.
          format: double
          type: number
        UpgradeDomains:
          description: Upgrade domains.
          type: string
        UpgradeState:
          description: State of upgrade.
          type: string
      required:
        - TargetClusterVersion
        - UpgradeState
        - UpgradeDomains
        - UpgradeDomainElapsedTimeInMs
      x-ms-discriminator-value: ClusterUpgradeDomainCompleted
    ClusterUpgradeHealthPolicyObject:
      description: Defines a health policy used to evaluate the health of the cluster
        during a cluster upgrade.
      properties:
        MaxPercentDeltaUnhealthyNodes:
          description: The maximum allowed percentage of nodes health degradation allowed
            during cluster upgrades. The delta is measured between the state of
            the nodes at the beginning of upgrade and the state of the nodes at
            the time of the health evaluation. The check is performed after
            every upgrade domain upgrade completion to make sure the global
            state of the cluster is within tolerated limits. The default value
            is 10%.
          maximum: 100
          minimum: 0
          type: integer
        MaxPercentUpgradeDomainDeltaUnhealthyNodes:
          description: The maximum allowed percentage of upgrade domain nodes health
            degradation allowed during cluster upgrades. The delta is measured
            between the state of the upgrade domain nodes at the beginning of
            upgrade and the state of the upgrade domain nodes at the time of the
            health evaluation. The check is performed after every upgrade domain
            upgrade completion for all completed upgrade domains to make sure
            the state of the upgrade domains is within tolerated limits. The
            default value is 15%.
          maximum: 100
          minimum: 0
          type: integer
    ClusterUpgradeProgressObject:
      description: Information about a cluster upgrade.
      properties:
        CodeVersion:
          $ref: "#/components/schemas/ClusterFabricCodeVersionString"
        ConfigVersion:
          $ref: "#/components/schemas/ClusterFabricConfigVersionString"
        CurrentUpgradeDomainProgress:
          $ref: "#/components/schemas/CurrentUpgradeDomainProgressInfo"
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        FailureTimestampUtc:
          $ref: "#/components/schemas/UpgradeFailureTimeUTCString"
        NextUpgradeDomain:
          $ref: "#/components/schemas/NextUpgradeDomain"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        StartTimestampUtc:
          $ref: "#/components/schemas/UpgradeStartTimeUTCString"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
        UpgradeDescription:
          $ref: "#/components/schemas/ClusterUpgradeDescriptionObject"
        UpgradeDomainDurationInMilliseconds:
          $ref: "#/components/schemas/UpgradeDomainDurationString"
        UpgradeDomainProgressAtFailure:
          $ref: "#/components/schemas/FailedUpgradeDomainProgressObject"
        UpgradeDomains:
          $ref: "#/components/schemas/UpgradeDomainInfoList"
        UpgradeDurationInMilliseconds:
          $ref: "#/components/schemas/UpgradeDurationString"
        UpgradeState:
          $ref: "#/components/schemas/UpgradeState"
    ClusterUpgradeRollbackCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Upgrade Rollback Completed event.
      properties:
        FailureReason:
          description: Describes failure.
          type: string
        OverallUpgradeElapsedTimeInMs:
          description: Overall duration of upgrade in milli-seconds.
          format: double
          type: number
        TargetClusterVersion:
          description: Target Cluster version.
          type: string
      required:
        - TargetClusterVersion
        - FailureReason
        - OverallUpgradeElapsedTimeInMs
      x-ms-discriminator-value: ClusterUpgradeRollbackCompleted
    ClusterUpgradeRollbackStartedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Upgrade Rollback Started event.
      properties:
        FailureReason:
          description: Describes failure.
          type: string
        OverallUpgradeElapsedTimeInMs:
          description: Overall duration of upgrade in milli-seconds.
          format: double
          type: number
        TargetClusterVersion:
          description: Target Cluster version.
          type: string
      required:
        - TargetClusterVersion
        - FailureReason
        - OverallUpgradeElapsedTimeInMs
      x-ms-discriminator-value: ClusterUpgradeRollbackStarted
    ClusterUpgradeStartedEvent:
      allOf:
        - $ref: "#/components/schemas/ClusterEvent"
      description: Cluster Upgrade Started event.
      properties:
        CurrentClusterVersion:
          description: Current Cluster version.
          type: string
        FailureAction:
          description: Action if failed.
          type: string
        RollingUpgradeMode:
          description: Mode of upgrade.
          type: string
        TargetClusterVersion:
          description: Target Cluster version.
          type: string
        UpgradeType:
          description: Type of upgrade.
          type: string
      required:
        - CurrentClusterVersion
        - TargetClusterVersion
        - UpgradeType
        - RollingUpgradeMode
        - FailureAction
      x-ms-discriminator-value: ClusterUpgradeStarted
    ClusterVersion:
      description: The cluster version.
      properties:
        Version:
          description: The Service Fabric cluster runtime version.
          type: string
    CodePackageEntryPoint:
      description: Information about setup or main entry point of a code package deployed
        on a Service Fabric node.
      properties:
        CodePackageEntryPointStatistics:
          $ref: "#/components/schemas/CodePackageEntryPointStatistics"
        EntryPointLocation:
          description: The location of entry point executable on the node.
          type: string
        InstanceId:
          $ref: "#/components/schemas/CodePackageInstanceId"
        NextActivationTime:
          description: The time (in UTC) when the entry point executable will be run next.
          format: date-time
          type: string
        ProcessId:
          description: The process ID of the entry point.
          type: string
        RunAsUserName:
          description: The user name under which entry point executable is run on the node.
          type: string
        Status:
          $ref: "#/components/schemas/EntryPointStatus"
    CodePackageEntryPointStatistics:
      description: Statistics about setup or main entry point  of a code package deployed
        on a Service Fabric node.
      properties:
        ActivationCount:
          description: Number of times the entry point has run.
          type: string
        ActivationFailureCount:
          description: Number of times the entry point failed to run.
          type: string
        ContinuousActivationFailureCount:
          description: Number of times the entry point continuously failed to run.
          type: string
        ContinuousExitFailureCount:
          description: Number of times the entry point continuously failed to exit
            gracefully.
          type: string
        ExitCount:
          description: Number of times the entry point finished running.
          type: string
        ExitFailureCount:
          description: Number of times the entry point failed to exit gracefully.
          type: string
        LastActivationTime:
          description: The last time (in UTC) when Service Fabric attempted to run the
            entry point.
          format: date-time
          type: string
        LastExitCode:
          description: The last exit code of the entry point.
          type: string
        LastExitTime:
          description: The last time (in UTC) when the entry point finished running.
          format: date-time
          type: string
        LastSuccessfulActivationTime:
          description: The last time (in UTC) when the entry point ran successfully.
          format: date-time
          type: string
        LastSuccessfulExitTime:
          description: The last time (in UTC) when the entry point finished running
            gracefully.
          format: date-time
          type: string
    CodePackageInstanceId:
      description: The instance ID for current running entry point. For a code package
        setup entry point (if specified) runs first and after it finishes main
        entry point is started. Each time entry point executable is run, its
        instance id will change.
      type: string
    CodePackageName:
      description: The name of the code package defined in the service manifest.
      type: string
    ComposeDeploymentStatus:
      description: The status of the compose deployment.
      enum:
        - Invalid
        - Provisioning
        - Creating
        - Ready
        - Unprovisioning
        - Deleting
        - Failed
        - Upgrading
      type: string
      x-ms-enum:
        modelAsString: true
        name: ComposeDeploymentStatus
        values:
          - description: Indicates that the compose deployment status is invalid. The value
              is zero.
            value: Invalid
          - description: Indicates that the compose deployment is being provisioned in
              background. The value is 1.
            value: Provisioning
          - description: Indicates that the compose deployment is being created in
              background. The value is 2.
            value: Creating
          - description: Indicates that the compose deployment has been successfully
              created or upgraded. The value is 3.
            value: Ready
          - description: Indicates that the compose deployment is being unprovisioned in
              background. The value is 4.
            value: Unprovisioning
          - description: Indicates that the compose deployment is being deleted in
              background. The value is 5.
            value: Deleting
          - description: Indicates that the compose deployment was terminated due to
              persistent failures. The value is 6.
            value: Failed
          - description: Indicates that the compose deployment is being upgraded in the
              background. The value is 7.
            value: Upgrading
    ComposeDeploymentStatusInfo:
      description: Information about a Service Fabric compose deployment.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        Name:
          $ref: "#/components/schemas/DeploymentName"
        Status:
          $ref: "#/components/schemas/ComposeDeploymentStatus"
        StatusDetails:
          description: The status details of compose deployment including failure message.
          type: string
    ComposeDeploymentUpgradeDescription:
      description: Describes the parameters for a compose deployment upgrade.
      properties:
        ApplicationHealthPolicy:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
        ComposeFileContent:
          description: The content of the compose file that describes the deployment to
            create.
          type: string
        DeploymentName:
          $ref: "#/components/schemas/DeploymentName"
        ForceRestart:
          $ref: "#/components/schemas/ForceRestart"
        MonitoringPolicy:
          $ref: "#/components/schemas/MonitoringPolicyDescription"
        RegistryCredential:
          $ref: "#/components/schemas/RegistryCredential"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeKind"
        UpgradeReplicaSetCheckTimeoutInSeconds:
          $ref: "#/components/schemas/UpgradeReplicaSetCheckTimeout"
      required:
        - DeploymentName
        - ComposeFileContent
        - UpgradeKind
    ComposeDeploymentUpgradeProgressInfo:
      description: Describes the parameters for a compose deployment upgrade.
      properties:
        ApplicationHealthPolicy:
          $ref: "#/components/schemas/ApplicationHealthPolicy"
        ApplicationName:
          $ref: "#/components/schemas/TargetApplicationName"
        ApplicationUnhealthyEvaluations:
          $ref: "#/components/schemas/ApplicationUnhealthyEvaluations"
        ApplicationUpgradeStatusDetails:
          description: Additional details of application upgrade including failure message.
          type: string
        CurrentUpgradeDomainDuration:
          $ref: "#/components/schemas/CurrentUpgradeDomainDuration"
        CurrentUpgradeDomainProgress:
          $ref: "#/components/schemas/CurrentUpgradeDomainProgressInfo"
        DeploymentName:
          $ref: "#/components/schemas/TargetDeploymentName"
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        FailureTimestampUtc:
          description: The estimated UTC datetime when the upgrade failed and FailureAction
            was executed.
          type: string
        ForceRestart:
          $ref: "#/components/schemas/ForceRestart"
        MonitoringPolicy:
          $ref: "#/components/schemas/MonitoringPolicyDescription"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        StartTimestampUtc:
          description: The estimated UTC datetime when the upgrade started.
          type: string
        TargetApplicationTypeVersion:
          $ref: "#/components/schemas/TargetApplicationTypeVersion"
        UpgradeDomainProgressAtFailure:
          $ref: "#/components/schemas/FailureUpgradeDomainProgressInfo"
        UpgradeDuration:
          $ref: "#/components/schemas/UpgradeDuration"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeKind"
        UpgradeReplicaSetCheckTimeoutInSeconds:
          $ref: "#/components/schemas/UpgradeReplicaSetCheckTimeout"
        UpgradeState:
          $ref: "#/components/schemas/ComposeDeploymentUpgradeState"
        UpgradeStatusDetails:
          description: Additional detailed information about the status of the pending
            upgrade.
          type: string
    ComposeDeploymentUpgradeState:
      description: The state of the compose deployment upgrade.
      enum:
        - Invalid
        - ProvisioningTarget
        - RollingForwardInProgress
        - RollingForwardPending
        - UnprovisioningCurrent
        - RollingForwardCompleted
        - RollingBackInProgress
        - UnprovisioningTarget
        - RollingBackCompleted
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: ComposeDeploymentUpgradeState
        values:
          - description: Indicates the upgrade state is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade is in the progress of provisioning target application
              type version. The value is 1.
            value: ProvisioningTarget
          - description: The upgrade is rolling forward to the target version but is not
              complete yet. The value is 2.
            value: RollingForwardInProgress
          - description: The current upgrade domain has finished upgrading. The overall
              upgrade is waiting for an explicit move next request in
              UnmonitoredManual mode or performing health checks in Monitored
              mode. The value is 3
            value: RollingForwardPending
          - description: The upgrade is in the progress of unprovisioning current
              application type version and rolling forward to the target version
              is completed. The value is 4.
            value: UnprovisioningCurrent
          - description: The upgrade has finished rolling forward. The value is 5.
            value: RollingForwardCompleted
          - description: The upgrade is rolling back to the previous version but is not
              complete yet. The value is 6.
            value: RollingBackInProgress
          - description: The upgrade is in the progress of unprovisioning target
              application type version and rolling back to the current version
              is completed. The value is 7.
            value: UnprovisioningTarget
          - description: The upgrade has finished rolling back. The value is 8.
            value: RollingBackCompleted
          - description: The upgrade has failed and is unable to execute FailureAction. The
              value is 9.
            value: Failed
    ContainerApiRequestBody:
      description: parameters for making container API call.
      properties:
        Body:
          description: HTTP request body of container REST API
          type: string
        Content-Type:
          description: Content type of container REST API request, defaults to
            "application/json"
          type: string
        HttpVerb:
          description: HTTP verb of container REST API, defaults to "GET"
          type: string
        UriPath:
          description: URI path of container REST API
          type: string
      required:
        - UriPath
    ContainerApiResponse:
      description: Response body that wraps container API result.
      properties:
        ContainerApiResult:
          $ref: "#/components/schemas/ContainerApiResult"
      required:
        - ContainerApiResult
    ContainerApiResult:
      description: Container API result.
      properties:
        Body:
          description: container API result body
          type: string
        Content-Encoding:
          description: HTTP content encoding
          type: string
        Content-Type:
          description: HTTP content type
          type: string
        Status:
          description: HTTP status code returned by the target container API
          type: integer
      required:
        - Status
    ContainerCodePackageProperties:
      description: Describes a container and its runtime properties.
      properties:
        commands:
          description: Command array to execute within the container in exec form.
          items:
            type: string
          type: array
        diagnostics:
          $ref: "#/components/schemas/DiagnosticsRef"
        endpoints:
          description: The endpoints exposed by this container.
          items:
            $ref: "#/components/schemas/EndpointProperties"
          type: array
        entrypoint:
          description: Override for the default entry point in the container.
          type: string
        environmentVariables:
          description: The environment variables to set in this container
          items:
            $ref: "#/components/schemas/EnvironmentVariable"
          type: array
        image:
          description: The Container image to use.
          type: string
        imageRegistryCredential:
          $ref: "#/components/schemas/ImageRegistryCredential"
        instanceView:
          $ref: "#/components/schemas/ContainerInstanceView"
        labels:
          description: The labels to set in this container.
          items:
            $ref: "#/components/schemas/ContainerLabel"
          type: array
        name:
          description: The name of the code package.
          type: string
        reliableCollectionsRefs:
          description: A list of ReliableCollection resources used by this particular code
            package. Please refer to ReliableCollectionsRef for more details.
          items:
            $ref: "#/components/schemas/ReliableCollectionsRef"
          type: array
        resources:
          $ref: "#/components/schemas/ResourceRequirements"
        settings:
          description: The settings to set in this container. The setting file path can be
            fetched from environment variable "Fabric_SettingPath". The path for
            Windows container is "C:\\secrets". The path for Linux container is
            "/var/secrets".
          items:
            $ref: "#/components/schemas/Setting"
          type: array
        volumeRefs:
          description: Volumes to be attached to the container. The lifetime of these
            volumes is independent of the application's lifetime.
          items:
            $ref: "#/components/schemas/VolumeReference"
          type: array
        volumes:
          description: Volumes to be attached to the container. The lifetime of these
            volumes is scoped to the application's lifetime.
          items:
            $ref: "#/components/schemas/ApplicationScopedVolume"
          type: array
      required:
        - name
        - image
        - resources
    ContainerEvent:
      description: A container event.
      properties:
        count:
          description: The count of the event.
          type: integer
        firstTimestamp:
          description: Date/time of the first event.
          type: string
        lastTimestamp:
          description: Date/time of the last event.
          type: string
        message:
          description: The event message
          type: string
        name:
          description: The name of the container event.
          type: string
        type:
          description: The event type.
          type: string
    ContainerInstanceEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Container Events.
      x-ms-discriminator-value: ContainerInstanceEvent
    ContainerInstanceEventList:
      description: A list of ContainerInstanceEvent objects.
      items:
        $ref: "#/components/schemas/ContainerInstanceEvent"
      type: array
    ContainerInstanceView:
      description: Runtime information of a container instance.
      properties:
        currentState:
          $ref: "#/components/schemas/ContainerState"
        events:
          description: The events of this container instance.
          items:
            $ref: "#/components/schemas/ContainerEvent"
          type: array
        previousState:
          $ref: "#/components/schemas/ContainerState"
        restartCount:
          description: The number of times the container has been restarted.
          type: integer
    ContainerLabel:
      description: Describes a container label.
      properties:
        name:
          description: The name of the container label.
          type: string
        value:
          description: The value of the container label.
          type: string
      required:
        - name
        - value
    ContainerLogs:
      description: Container logs.
      properties:
        Content:
          description: Container logs.
          type: string
    ContainerState:
      description: The container state.
      properties:
        detailStatus:
          description: Human-readable status of this state.
          type: string
        exitCode:
          description: The container exit code.
          type: string
        finishTime:
          description: Date/time when the container state finished.
          format: date-time
          type: string
        startTime:
          description: Date/time when the container state started.
          format: date-time
          type: string
        state:
          description: The state of this container
          type: string
    ContinuationToken:
      description: The continuation token parameter is used to obtain next set of results.
        The continuation token is included in the response of the API when the
        results from the system do not fit in a single response. When this value
        is passed to the next API call, the API returns next set of results. If
        there are no further results, then the continuation token is not
        included in the response.
      type: string
    CorrelationSchemeList:
      description: A list that describes the correlation of the service with other services.
      items:
        $ref: "#/components/schemas/ServiceCorrelationDescription"
      type: array
    CreateComposeDeploymentDescription:
      description: Defines description for creating a Service Fabric compose deployment.
      properties:
        ComposeFileContent:
          description: The content of the compose file that describes the deployment to
            create.
          type: string
        DeploymentName:
          $ref: "#/components/schemas/DeploymentName"
        RegistryCredential:
          $ref: "#/components/schemas/RegistryCredential"
      required:
        - DeploymentName
        - ComposeFileContent
    CurrentUpgradeDomainDuration:
      default: PT0H2M0S
      description: The estimated amount of time spent processing current Upgrade Domain. It
        is first interpreted as a string representing an ISO 8601 duration. If
        that fails, then it is interpreted as a number representing the total
        number of milliseconds.
      type: string
    CurrentUpgradeDomainProgressInfo:
      description: Information about the current in-progress upgrade domain.
      properties:
        DomainName:
          $ref: "#/components/schemas/UpgradeDomainName"
        NodeUpgradeProgressList:
          $ref: "#/components/schemas/NodeUpgradeProgressInfoList"
    DayOfWeek:
      description: Describes the days in a week.
      enum:
        - Sunday
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
      type: string
      x-ms-enum:
        modelAsString: true
        name: DayOfWeek
        values:
          - description: Indicates the Day referred is Sunday.
            value: Sunday
          - description: Indicates the Day referred is Monday.
            value: Monday
          - description: Indicates the Day referred is Tuesday.
            value: Tuesday
          - description: Indicates the Day referred is Wednesday.
            value: Wednesday
          - description: Indicates the Day referred is Thursday.
            value: Thursday
          - description: Indicates the Day referred is Friday.
            value: Friday
          - description: Indicates the Day referred is Saturday.
            value: Saturday
    DayOfWeekList:
      description: List of days of a week when to trigger the periodic backup. This is
        valid only when the backup schedule frequency type is weekly.
      items:
        $ref: "#/components/schemas/DayOfWeek"
      type: array
    DeactivationIntentDescription:
      description: Describes the intent or reason for deactivating the node.
      properties:
        DeactivationIntent:
          description: Describes the intent or reason for deactivating the node. The
            possible values are following.
          enum:
            - Pause
            - Restart
            - RemoveData
          type: string
          x-ms-enum:
            modelAsString: true
            name: DeactivationIntent
            values:
              - description: Indicates that the node should be paused. The value is 1.
                value: Pause
              - description: Indicates that the intent is for the node to be restarted
                  after a short period of time. The value is 2.
                value: Restart
              - description: Indicates the intent is for the node to remove data. The value
                  is 3.
                value: RemoveData
    DeletePropertyBatchOperation:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchOperation"
      description: >-
        Represents a PropertyBatchOperation that deletes a specified property if
        it exists.

        Note that if one PropertyBatchOperation in a PropertyBatch fails,

        the entire batch fails and cannot be committed in a transactional manner.
      x-ms-discriminator-value: Delete
    DeltaHealthEvaluationBool:
      description: When true, enables delta health evaluation rather than absolute health
        evaluation after completion of each upgrade domain.
      type: boolean
    DeltaNodesCheckHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: >-
        Represents health evaluation for delta nodes, containing health
        evaluations for each unhealthy node that impacted current aggregated
        health state.

        Can be returned during cluster upgrade when the aggregated health state of the cluster is Warning or Error.
      properties:
        BaselineErrorCount:
          description: Number of nodes with aggregated heath state Error in the health
            store at the beginning of the cluster upgrade.
          format: int64
          type: integer
        BaselineTotalCount:
          description: Total number of nodes in the health store at the beginning of the
            cluster upgrade.
          format: int64
          type: integer
        MaxPercentDeltaUnhealthyNodes:
          description: Maximum allowed percentage of delta unhealthy nodes from the
            ClusterUpgradeHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of nodes in the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: DeltaNodesCheck
    DeployServicePackageToNodeDescription:
      description: Defines description for downloading packages associated with a service
        manifest to image cache on a Service Fabric node.
      properties:
        ApplicationTypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        ApplicationTypeVersion:
          $ref: "#/components/schemas/ApplicationTypeVersion"
        NodeName:
          $ref: "#/components/schemas/NodeName"
        PackageSharingPolicy:
          $ref: "#/components/schemas/PackageSharingPolicyInfoList"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
      required:
        - ServiceManifestName
        - ApplicationTypeName
        - ApplicationTypeVersion
        - NodeName
    DeployedApplicationHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: Information about the health of an application deployed on a Service
        Fabric node.
      properties:
        DeployedServicePackageHealthStates:
          $ref: "#/components/schemas/DeployedServicePackageHealthStateList"
        Name:
          $ref: "#/components/schemas/ApplicationName"
        NodeName:
          $ref: "#/components/schemas/NodeName"
    DeployedApplicationHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for a deployed application, containing
        information about the data and the algorithm used by the health store to
        evaluate health.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        NodeName:
          $ref: "#/components/schemas/NodeName"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: DeployedApplication
    DeployedApplicationHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Deployed Application Health Report Expired event.
      properties:
        ApplicationInstanceId:
          description: Id of Application instance.
          format: int64
          type: integer
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ApplicationInstanceId
        - NodeName
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: DeployedApplicationHealthReportExpired
    DeployedApplicationHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents the health state of a deployed application, which contains
        the entity identifier and the aggregated health state.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        NodeName:
          $ref: "#/components/schemas/NodeName"
    DeployedApplicationHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: Represents the health state chunk of a deployed application, which
        contains the node where the application is deployed, the aggregated
        health state and any deployed service packages that respect the chunk
        query description filters.
      properties:
        DeployedServicePackageHealthStateChunks:
          $ref: "#/components/schemas/DeployedServicePackageHealthStateChunkList"
        NodeName:
          description: The name of node where the application is deployed.
          type: string
    DeployedApplicationHealthStateChunkList:
      description: The list of deployed application health state chunks that respect the
        input filters in the chunk query. Returned by get cluster health state
        chunks query.
      properties:
        Items:
          description: The list of deployed application health state chunks that respect
            the input filters in the chunk query.
          items:
            $ref: "#/components/schemas/DeployedApplicationHealthStateChunk"
          type: array
    DeployedApplicationHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a deployed application
        should be included as a child of an application in the cluster health
        chunk.

        The deployed applications are only returned if the parent application matches a filter specified in the cluster health chunk query description.

        One filter can match zero, one or multiple deployed applications, depending on its properties.
      properties:
        DeployedServicePackageFilters:
          description: >-
            Defines a list of filters that specify which deployed service
            packages to be included in the returned cluster health chunk as
            children of the parent deployed application. The deployed service
            packages are returned only if the parent deployed application
            matches a filter.

            If the list is empty, no deployed service packages are returned. All the deployed service packages are used to evaluate the parent deployed application aggregated health state, regardless of the input filters.

            The deployed application filter may specify multiple deployed service package filters.

            For example, it can specify a filter to return all deployed service packages with health state Error and another filter to always include a deployed service package on a node.
          items:
            $ref: "#/components/schemas/DeployedServicePackageHealthStateFilter"
          type: array
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the deployed applications. It
            allows selecting deployed applications if they match the desired
            health states.

            The possible values are integer value of one of the following health states. Only deployed applications that match the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state.

            If not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching deployed application is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        NodeNameFilter:
          description: >-
            The name of the node where the application is deployed in order to
            match the filter.

            If specified, the filter is applied only to the application deployed on the specified node.

            If the application is not deployed on the node with the specified name, no deployed application is returned in the cluster health chunk based on this filter.

            Otherwise, the deployed application is included in the cluster health chunk if it respects the other filter properties.

            If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
          type: string
    DeployedApplicationInfo:
      description: Information about application deployed on the node.
      properties:
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          $ref: "#/components/schemas/ApplicationId"
        LogDirectory:
          description: The log directory of the application on the node. The log directory
            can be used to store application logs.
          type: string
        Name:
          $ref: "#/components/schemas/ApplicationName"
        Status:
          $ref: "#/components/schemas/DeployedApplicationStatus"
        TempDirectory:
          description: The temp directory of the application on the node. The code packages
            belonging to the application are forked with this directory set as
            their temporary directory.
          type: string
        TypeName:
          $ref: "#/components/schemas/ApplicationTypeName"
        WorkDirectory:
          description: The work directory of the application on the node. The work
            directory can be used to store application data.
          type: string
    DeployedApplicationInfoList:
      description: List of deployed application information.
      items:
        $ref: "#/components/schemas/DeployedApplicationInfo"
      type: array
    DeployedApplicationNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Deployed Application Health Report Created event.
      properties:
        ApplicationInstanceId:
          description: Id of Application instance.
          format: int64
          type: integer
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ApplicationInstanceId
        - NodeName
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: DeployedApplicationNewHealthReport
    DeployedApplicationStatus:
      description: The status of the application deployed on the node. Following are the
        possible values.
      enum:
        - Invalid
        - Downloading
        - Activating
        - Active
        - Upgrading
        - Deactivating
      type: string
      x-ms-enum:
        modelAsString: true
        name: DeployedApplicationStatus
        values:
          - description: Indicates that deployment status is not valid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the package is downloading from the ImageStore. The
              value is 1.
            value: Downloading
          - description: Indicates that the package is activating. The value is 2.
            value: Activating
          - description: Indicates that the package is active. The value is 3.
            value: Active
          - description: Indicates that the package is upgrading. The value is 4.
            value: Upgrading
          - description: Indicates that the package is deactivating. The value is 5.
            value: Deactivating
    DeployedApplicationsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: >-
        Represents health evaluation for deployed applications, containing
        health evaluations for each unhealthy deployed application that impacted
        current aggregated health state.

        Can be returned when evaluating application health and the aggregated health state is either Error or Warning.
      properties:
        MaxPercentUnhealthyDeployedApplications:
          description: Maximum allowed percentage of unhealthy deployed applications from
            the ApplicationHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of deployed applications of the application in the
            health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: DeployedApplications
    DeployedCodePackageInfo:
      description: Information about code package deployed on a Service Fabric node.
      properties:
        HostIsolationMode:
          $ref: "#/components/schemas/HostIsolationMode"
        HostType:
          $ref: "#/components/schemas/HostType"
        MainEntryPoint:
          $ref: "#/components/schemas/CodePackageEntryPoint"
        Name:
          $ref: "#/components/schemas/CodePackageName"
        RunFrequencyInterval:
          description: The interval at which code package is run. This is used for periodic
            code package.
          type: string
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
        SetupEntryPoint:
          $ref: "#/components/schemas/CodePackageEntryPoint"
        Status:
          $ref: "#/components/schemas/DeploymentStatus"
        Version:
          description: The version of the code package specified in service manifest.
          type: string
    DeployedCodePackageInfoList:
      description: List of deployed code package information.
      items:
        $ref: "#/components/schemas/DeployedCodePackageInfo"
      type: array
    DeployedServicePackageHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: Information about the health of a service package for a specific
        application deployed on a Service Fabric node.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        NodeName:
          $ref: "#/components/schemas/NodeName"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
    DeployedServicePackageHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for a deployed service package, containing
        information about the data and the algorithm used by health store to
        evaluate health. The evaluation is returned only when the aggregated
        health state is either Error or Warning.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        NodeName:
          $ref: "#/components/schemas/NodeName"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: DeployedServicePackage
    DeployedServicePackageHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Deployed Service Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        ServiceManifest:
          description: Service manifest name.
          type: string
        ServicePackageActivationId:
          description: Id of Service package activation.
          type: string
        ServicePackageInstanceId:
          description: Id of Service package instance.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ServiceManifest
        - ServicePackageInstanceId
        - ServicePackageActivationId
        - NodeName
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: DeployedServicePackageHealthReportExpired
    DeployedServicePackageHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents the health state of a deployed service package, containing
        the entity identifier and the aggregated health state.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        NodeName:
          $ref: "#/components/schemas/NodeName"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
    DeployedServicePackageHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: Represents the health state chunk of a deployed service package, which
        contains the service manifest name and the service package aggregated
        health state.
      properties:
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
    DeployedServicePackageHealthStateChunkList:
      description: The list of deployed service package health state chunks that respect
        the input filters in the chunk query. Returned by get cluster health
        state chunks query.
      properties:
        Items:
          description: The list of deployed service package health state chunks that
            respect the input filters in the chunk query.
          items:
            $ref: "#/components/schemas/DeployedServicePackageHealthStateChunk"
          type: array
    DeployedServicePackageHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a deployed service
        package should be included as a child of a deployed application in the
        cluster health chunk.

        The deployed service packages are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent deployed application and its parent application must be included in the cluster health chunk.

        One filter can match zero, one or multiple deployed service packages, depending on its properties.
      properties:
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the deployed service packages. It
            allows selecting deployed service packages if they match the desired
            health states.

            The possible values are integer value of one of the following health states. Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the parent deployed application aggregated health state.

            If not specified, default value is None, unless the deployed service package ID is specified. If the filter has default value and deployed service package ID is specified, the matching deployed service package is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        ServiceManifestNameFilter:
          description: >-
            The name of the service manifest which identifies the deployed
            service packages that matches the filter.

            If specified, the filter is applied only to the specified deployed service packages, if any.

            If no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk based on this filter.

            If any deployed service package exists, they are included in the cluster health chunk if it respects the other filter properties.

            If not specified, all deployed service packages that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
          type: string
        ServicePackageActivationIdFilter:
          description: >-
            The activation ID of a deployed service package that matches the
            filter.

            If not specified, the filter applies to all deployed service packages that match the other parameters.

            If specified, the filter matches only the deployed service package with the specified activation ID.
          type: string
    DeployedServicePackageHealthStateList:
      description: List of health states for a service package deployed on a Service Fabric
        node.
      items:
        $ref: "#/components/schemas/DeployedServicePackageHealthState"
      type: array
    DeployedServicePackageInfo:
      description: Information about service package deployed on a Service Fabric node.
      properties:
        Name:
          $ref: "#/components/schemas/ServiceManifestName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
        Status:
          $ref: "#/components/schemas/DeploymentStatus"
        Version:
          description: The version of the service package specified in service manifest.
          type: string
    DeployedServicePackageInfoList:
      description: List of deployed service package information.
      items:
        $ref: "#/components/schemas/DeployedServicePackageInfo"
      type: array
    DeployedServicePackageNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ApplicationEvent"
      description: Deployed Service Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        ServiceManifestName:
          description: Service manifest name.
          type: string
        ServicePackageActivationId:
          description: Id of Service package activation.
          type: string
        ServicePackageInstanceId:
          description: Id of Service package instance.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ServiceManifestName
        - ServicePackageInstanceId
        - ServicePackageActivationId
        - NodeName
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: DeployedServicePackageNewHealthReport
    DeployedServicePackagesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for deployed service packages, containing
        health evaluations for each unhealthy deployed service package that
        impacted current aggregated health state. Can be returned when
        evaluating deployed application health and the aggregated health state
        is either Error or Warning.
      properties:
        TotalCount:
          description: Total number of deployed service packages of the deployed
            application in the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: DeployedServicePackages
    DeployedServiceReplicaDetailInfo:
      description: Information about a Service Fabric service replica deployed on a node.
      discriminator:
        propertyName: ServiceKind
      properties:
        CurrentServiceOperation:
          $ref: "#/components/schemas/ServiceOperationName"
        CurrentServiceOperationStartTimeUtc:
          description: The start time of the current service operation in UTC format.
          format: date-time
          type: string
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ReportedLoad:
          $ref: "#/components/schemas/LoadMetricReportInfoList"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
      required:
        - ServiceKind
    DeployedServiceReplicaInfo:
      description: Information about a Service Fabric service replica deployed on a node.
      discriminator:
        propertyName: ServiceKind
      properties:
        Address:
          description: The last address returned by the replica in Open or ChangeRole.
          type: string
        CodePackageName:
          $ref: "#/components/schemas/CodePackageName"
        HostProcessId:
          description: Host process ID of the process that is hosting the replica. This
            will be zero if the replica is down. In hyper-v containers this host
            process ID will be from different kernel.
          type: string
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ReplicaStatus:
          $ref: "#/components/schemas/ReplicaStatus"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
        ServiceTypeName:
          $ref: "#/components/schemas/ServiceTypeName"
      required:
        - ServiceKind
    DeployedServiceReplicaInfoList:
      description: List of deployed service replica information.
      items:
        $ref: "#/components/schemas/DeployedServiceReplicaInfo"
      type: array
    DeployedServiceTypeInfo:
      description: Information about service type deployed on a node, information such as
        the status of the service type registration on a node.
      properties:
        CodePackageName:
          $ref: "#/components/schemas/CodePackageName"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
        ServiceTypeName:
          $ref: "#/components/schemas/ServiceTypeName"
        Status:
          $ref: "#/components/schemas/ServiceTypeRegistrationStatus"
    DeployedServiceTypeInfoList:
      description: List of information about service type deployed on a node.
      items:
        $ref: "#/components/schemas/DeployedServiceTypeInfo"
      type: array
    DeployedStatefulServiceReplicaDetailInfo:
      allOf:
        - $ref: "#/components/schemas/DeployedServiceReplicaDetailInfo"
      description: Information about a stateful replica running in a code package. Note
        DeployedServiceReplicaQueryResult will contain duplicate data like
        ServiceKind, ServiceName, PartitionId and replicaId.
      properties:
        CurrentReplicatorOperation:
          $ref: "#/components/schemas/ReplicatorOperationName"
        DeployedServiceReplicaQueryResult:
          $ref: "#/components/schemas/DeployedStatefulServiceReplicaInfo"
        ReadStatus:
          $ref: "#/components/schemas/PartitionAccessStatus"
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
        ReplicaStatus:
          $ref: "#/components/schemas/KeyValueStoreReplicaStatus"
        ReplicatorStatus:
          $ref: "#/components/schemas/ReplicatorStatus"
        WriteStatus:
          $ref: "#/components/schemas/PartitionAccessStatus"
      x-ms-discriminator-value: Stateful
    DeployedStatefulServiceReplicaInfo:
      allOf:
        - $ref: "#/components/schemas/DeployedServiceReplicaInfo"
      description: Information about a stateful service replica deployed on a node.
      properties:
        ReconfigurationInformation:
          $ref: "#/components/schemas/ReconfigurationInformation"
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
        ReplicaRole:
          $ref: "#/components/schemas/ReplicaRole"
      x-ms-discriminator-value: Stateful
    DeployedStatelessServiceInstanceDetailInfo:
      allOf:
        - $ref: "#/components/schemas/DeployedServiceReplicaDetailInfo"
      description: Information about a stateless instance running in a code package. Note
        that DeployedServiceReplicaQueryResult will contain duplicate data like
        ServiceKind, ServiceName, PartitionId and InstanceId.
      properties:
        DeployedServiceReplicaQueryResult:
          $ref: "#/components/schemas/DeployedStatelessServiceInstanceInfo"
        InstanceId:
          $ref: "#/components/schemas/InstanceId"
      x-ms-discriminator-value: Stateless
    DeployedStatelessServiceInstanceInfo:
      allOf:
        - $ref: "#/components/schemas/DeployedServiceReplicaInfo"
      description: Information about a stateless service instance deployed on a node.
      properties:
        InstanceId:
          $ref: "#/components/schemas/InstanceId"
      x-ms-discriminator-value: Stateless
    DeploymentName:
      description: The name of the deployment.
      type: string
    DeploymentStatus:
      description: Specifies the status of a deployed application or service package on a
        Service Fabric node.
      enum:
        - Invalid
        - Downloading
        - Activating
        - Active
        - Upgrading
        - Deactivating
      type: string
      x-ms-enum:
        modelAsString: true
        name: DeploymentStatus
        values:
          - description: Indicates status of the application or service package is not
              known or invalid. The value is 0.
            value: Invalid
          - description: Indicates the application or service package is being downloaded
              to the node from the ImageStore. The value is 1.
            value: Downloading
          - description: Indicates the application or service package is being activated.
              The value is 2.
            value: Activating
          - description: Indicates the application or service package is active the node.
              The value is 3.
            value: Active
          - description: Indicates the application or service package is being upgraded.
              The value is 4.
            value: Upgrading
          - description: Indicates the application or service package is being deactivated.
              The value is 5.
            value: Deactivating
    DiagnosticsDescription:
      description: Describes the diagnostics options available
      properties:
        defaultSinkRefs:
          description: The sinks to be used if diagnostics is enabled. Sink choices can be
            overridden at the service and code package level.
          items:
            type: string
          type: array
        enabled:
          description: Status of whether or not sinks are enabled.
          type: boolean
        sinks:
          description: List of supported sinks that can be referenced.
          items:
            $ref: "#/components/schemas/DiagnosticsSinkProperties"
          type: array
    DiagnosticsRef:
      description: Reference to sinks in DiagnosticsDescription.
      properties:
        enabled:
          description: Status of whether or not sinks are enabled.
          type: boolean
        sinkRefs:
          description: List of sinks to be used if enabled. References the list of sinks in
            DiagnosticsDescription.
          items:
            type: string
          type: array
    DiagnosticsSinkKind:
      description: The kind of DiagnosticsSink.
      enum:
        - Invalid
        - AzureInternalMonitoringPipeline
      type: string
      x-ms-enum:
        modelAsString: true
        name: DiagnosticsSinkKind
        values:
          - description: Indicates an invalid sink kind. All Service Fabric enumerations
              have the invalid type.
            value: Invalid
          - description: Diagnostics settings for Geneva.
            value: AzureInternalMonitoringPipeline
    DiagnosticsSinkProperties:
      description: Properties of a DiagnosticsSink.
      discriminator:
        propertyName: kind
      properties:
        description:
          description: A description of the sink.
          type: string
        kind:
          $ref: "#/components/schemas/DiagnosticsSinkKind"
        name:
          description: Name of the sink. This value is referenced by
            DiagnosticsReferenceDescription
          type: string
      required:
        - kind
    DisableBackupDescription:
      description: It describes the body parameters while disabling backup of a backup
        entity(Application/Service/Partition).
      properties:
        CleanBackup:
          description: Boolean flag to delete backups. It can be set to true for deleting
            all the backups which were created for the backup entity that is
            getting disabled for backup.
          type: boolean
      required:
        - CleanBackup
    DoublePropertyValue:
      allOf:
        - $ref: "#/components/schemas/PropertyValue"
      description: Describes a Service Fabric property value of type Double.
      properties:
        Data:
          description: The data of the property value.
          format: double
          type: number
      required:
        - Data
      x-ms-discriminator-value: Double
    EnableBackupDescription:
      description: Specifies the parameters needed to enable periodic backup.
      properties:
        BackupPolicyName:
          description: Name of the backup policy to be used for enabling periodic backups.
          type: string
      required:
        - BackupPolicyName
    EndpointProperties:
      description: Describes a container endpoint.
      properties:
        name:
          description: The name of the endpoint.
          type: string
        port:
          description: Port used by the container.
          type: integer
      required:
        - name
    EndpointRef:
      description: Describes a reference to a service endpoint.
      properties:
        name:
          description: Name of the endpoint.
          type: string
    EnsureAvailabilitySafetyCheck:
      allOf:
        - $ref: "#/components/schemas/PartitionSafetyCheck"
      description: Safety check that waits to ensure the availability of the partition. It
        waits until there are replicas available such that bringing down this
        replica will not cause availability loss for the partition.
      x-ms-discriminator-value: EnsureAvailability
    EnsurePartitionQuorumSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/PartitionSafetyCheck"
      description: Safety check that ensures that a quorum of replicas are not lost for a
        partition.
      x-ms-discriminator-value: EnsurePartitionQuorum
    EntityHealth:
      description: Health information common to all entities in the cluster. It contains
        the aggregated health state, health events and unhealthy evaluation.
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        HealthEvents:
          description: The list of health events reported on the entity.
          items:
            $ref: "#/components/schemas/HealthEvent"
          type: array
        HealthStatistics:
          $ref: "#/components/schemas/HealthStatistics"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
    EntityHealthState:
      description: A base type for the health state of various entities in the cluster. It
        contains the aggregated health state.
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
    EntityHealthStateChunk:
      description: A base type for the health state chunk of various entities in the
        cluster. It contains the aggregated health state.
      properties:
        HealthState:
          $ref: "#/components/schemas/HealthState"
    EntityHealthStateChunkList:
      description: A base type for the list of health state chunks found in the cluster. It
        contains the total number of health states that match the input filters.
      properties:
        TotalCount:
          description: Total number of entity health state objects that match the specified
            filters from the cluster health chunk query description.
          format: int64
          type: integer
    EntityKind:
      description: The entity type of a Service Fabric entity such as Cluster, Node,
        Application, Service, Partition, Replica etc.
      enum:
        - Invalid
        - Node
        - Partition
        - Service
        - Application
        - Replica
        - DeployedApplication
        - DeployedServicePackage
        - Cluster
      type: string
      x-ms-enum:
        modelAsString: true
        name: EntityKind
        values:
          - description: Indicates an invalid entity kind. All Service Fabric enumerations
              have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates the entity is a Service Fabric node. The value is 1.
            value: Node
          - description: Indicates the entity is a Service Fabric partition. The value is 2.
            value: Partition
          - description: Indicates the entity is a Service Fabric service. The value is 3.
            value: Service
          - description: Indicates the entity is a Service Fabric application. The value is
              4.
            value: Application
          - description: Indicates the entity is a Service Fabric replica. The value is 5.
            value: Replica
          - description: Indicates the entity is a Service Fabric deployed application. The
              value is 6.
            value: DeployedApplication
          - description: Indicates the entity is a Service Fabric deployed service package.
              The value is 7.
            value: DeployedServicePackage
          - description: Indicates the entity is a Service Fabric cluster. The value is 8.
            value: Cluster
    EntityKindHealthStateCount:
      description: Represents health state count for entities of the specified entity kind.
      properties:
        EntityKind:
          $ref: "#/components/schemas/EntityKind"
        HealthStateCount:
          $ref: "#/components/schemas/HealthStateCount"
    EntryPointStatus:
      description: Specifies the status of the code package entry point deployed on a
        Service Fabric node.
      enum:
        - Invalid
        - Pending
        - Starting
        - Started
        - Stopping
        - Stopped
      type: string
      x-ms-enum:
        modelAsString: true
        name: EntryPointStatus
        values:
          - description: Indicates status of entry point is not known or invalid. The value
              is 0.
            value: Invalid
          - description: Indicates the entry point is scheduled to be started. The value is
              1.
            value: Pending
          - description: Indicates the entry point is being started. The value is 2.
            value: Starting
          - description: Indicates the entry point was started successfully and is running.
              The value is 3.
            value: Started
          - description: Indicates the entry point is being stopped. The value is 4.
            value: Stopping
          - description: Indicates the entry point is not running. The value is 5.
            value: Stopped
    EnvironmentVariable:
      description: Describes an environment variable for the container.
      properties:
        name:
          description: The name of the environment variable.
          type: string
        value:
          description: The value of the environment variable.
          type: string
    Epoch:
      description: An Epoch is a configuration number for the partition as a whole. When
        the configuration of the replica set changes, for example when the
        Primary replica changes, the operations that are replicated from the new
        Primary replica are said to be a new Epoch from the ones which were sent
        by the old Primary replica.
      properties:
        ConfigurationVersion:
          description: The current configuration number of this Epoch. The configuration
            number is an increasing value that is updated whenever the
            configuration of this replica set changes.
          type: string
        DataLossVersion:
          description: The current data loss number of this Epoch. The data loss number
            property is an increasing value which is updated whenever data loss
            is suspected, as when loss of a quorum of replicas in the replica
            set that includes the Primary replica.
          type: string
    EventHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: >-
        Represents health evaluation of a HealthEvent that was reported on the
        entity.

        The health evaluation is returned when evaluating health of an entity results in Error or Warning.
      properties:
        ConsiderWarningAsError:
          description: Indicates whether warnings are treated with the same severity as
            errors. The field is specified in the health policy used to evaluate
            the entity.
          type: boolean
        UnhealthyEvent:
          $ref: "#/components/schemas/HealthEvent"
      x-ms-discriminator-value: Event
    EventList:
      description: A list of FabricEvent objects.
      items:
        $ref: "#/components/schemas/FabricEvent"
      type: array
    ExecutingFaultsChaosEvent:
      allOf:
        - $ref: "#/components/schemas/ChaosEvent"
      description: Describes a Chaos event that gets generated when Chaos has decided on
        the faults for an iteration. This Chaos event contains the details of
        the faults as a list of strings.
      properties:
        Faults:
          description: List of string description of the faults that Chaos decided to
            execute in an iteration.
          items:
            type: string
          type: array
      x-ms-discriminator-value: ExecutingFaults
    ExternalStoreProvisionApplicationTypeDescription:
      allOf:
        - $ref: "#/components/schemas/ProvisionApplicationTypeDescriptionBase"
      description: Describes the operation to register or provision an application type
        using an application package from an external store instead of a package
        uploaded to the Service Fabric image store.
      properties:
        ApplicationPackageDownloadUri:
          description: The path to the '.sfpkg' application package from where the
            application package can be downloaded using HTTP or HTTPS protocols.
            The application package can be stored in an external store that
            provides GET operation to download the file. Supported protocols are
            HTTP and HTTPS, and the path must allow READ access.
          type: string
        ApplicationTypeName:
          description: The application type name represents the name of the application
            type found in the application manifest.
          type: string
        ApplicationTypeVersion:
          description: The application type version represents the version of the
            application type found in the application manifest.
          type: string
      required:
        - ApplicationPackageDownloadUri
        - ApplicationTypeName
        - ApplicationTypeVersion
      x-ms-discriminator-value: ExternalStore
    FabricCodeVersionInfo:
      description: Information about a Service Fabric code version.
      properties:
        CodeVersion:
          description: The product version of Service Fabric.
          type: string
    FabricCodeVersionInfoList:
      description: List of all Service Fabric code versions.
      items:
        $ref: "#/components/schemas/FabricCodeVersionInfo"
      type: array
    FabricConfigVersionInfo:
      description: Information about a Service Fabric config version.
      properties:
        ConfigVersion:
          description: The config version of Service Fabric.
          type: string
    FabricConfigVersionInfoList:
      description: List of all Service Fabric config versions.
      items:
        $ref: "#/components/schemas/FabricConfigVersionInfo"
      type: array
    FabricError:
      description: The REST API operations for Service Fabric return standard HTTP status
        codes. This type defines the additional information returned from the
        Service Fabric API operations that are not successful.
      properties:
        Error:
          $ref: "#/components/schemas/FabricErrorError"
      required:
        - Error
    FabricErrorCodes:
      description: >-
        Defines the fabric error codes that be returned as part of the error
        object in response to Service Fabric API operations that are not
        successful. Following are the error code values that can be returned for
        a specific HTTP status code.

          - Possible values of the error code for HTTP status code 400 (Bad Request)
            - "FABRIC_E_INVALID_PARTITION_KEY"
            - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
            - "FABRIC_E_INVALID_ADDRESS"
            - "FABRIC_E_APPLICATION_NOT_UPGRADING"
            - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
            - "FABRIC_E_FABRIC_NOT_UPGRADING"
            - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
            - "FABRIC_E_INVALID_CONFIGURATION"
            - "FABRIC_E_INVALID_NAME_URI"
            - "FABRIC_E_PATH_TOO_LONG"
            - "FABRIC_E_KEY_TOO_LARGE"
            - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
            - "FABRIC_E_INVALID_ATOMIC_GROUP"
            - "FABRIC_E_VALUE_EMPTY"
            - "FABRIC_E_BACKUP_IS_ENABLED"
            - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
            - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
            - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
            - "E_INVALIDARG"

          - Possible values of the error code for HTTP status code 404 (Not Found)
            - "FABRIC_E_NODE_NOT_FOUND"
            - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
            - "FABRIC_E_APPLICATION_NOT_FOUND"
            - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
            - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
            - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
            - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
            - "FABRIC_E_PARTITION_NOT_FOUND"
            - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
            - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
            - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
            - "FABRIC_E_DIRECTORY_NOT_FOUND"
            - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
            - "FABRIC_E_FILE_NOT_FOUND"
            - "FABRIC_E_NAME_DOES_NOT_EXIST"
            - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
            - "FABRIC_E_ENUMERATION_COMPLETED"
            - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
            - "FABRIC_E_KEY_NOT_FOUND"
            - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
            - "FABRIC_E_BACKUP_NOT_ENABLED"
            - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
            - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
            - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"

          - Possible values of the error code for HTTP status code 409 (Conflict)
            - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
            - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
            - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
            - "FABRIC_E_SERVICE_ALREADY_EXISTS"
            - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
            - "FABRIC_E_APPLICATION_TYPE_IN_USE"
            - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
            - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
            - "FABRIC_E_FABRIC_VERSION_IN_USE"
            - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
            - "FABRIC_E_NAME_ALREADY_EXISTS"
            - "FABRIC_E_NAME_NOT_EMPTY"
            - "FABRIC_E_PROPERTY_CHECK_FAILED"
            - "FABRIC_E_SERVICE_METADATA_MISMATCH"
            - "FABRIC_E_SERVICE_TYPE_MISMATCH"
            - "FABRIC_E_HEALTH_STALE_REPORT"
            - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
            - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
            - "FABRIC_E_INSTANCE_ID_MISMATCH"
            - "FABRIC_E_BACKUP_IN_PROGRESS"
            - "FABRIC_E_RESTORE_IN_PROGRESS"
            - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"

          - Possible values of the error code for HTTP status code 413 (Request Entity Too Large)
            - "FABRIC_E_VALUE_TOO_LARGE"

          - Possible values of the error code for HTTP status code 500 (Internal Server Error)
            - "FABRIC_E_NODE_IS_UP"
            - "E_FAIL"
            - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
            - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
            - "FABRIC_E_VOLUME_ALREADY_EXISTS"
            - "FABRIC_E_VOLUME_NOT_FOUND"
            - "SerializationError"

          - Possible values of the error code for HTTP status code 503 (Service Unavailable)
            - "FABRIC_E_NO_WRITE_QUORUM"
            - "FABRIC_E_NOT_PRIMARY"
            - "FABRIC_E_NOT_READY"
            - "FABRIC_E_RECONFIGURATION_PENDING"
            - "FABRIC_E_SERVICE_OFFLINE"
            - "E_ABORT"
            - "FABRIC_E_VALUE_TOO_LARGE"

          - Possible values of the error code for HTTP status code 504 (Gateway Timeout)
            - "FABRIC_E_COMMUNICATION_ERROR"
            - "FABRIC_E_OPERATION_NOT_COMPLETE"
            - "FABRIC_E_TIMEOUT"
      enum:
        - FABRIC_E_INVALID_PARTITION_KEY
        - FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR
        - FABRIC_E_INVALID_ADDRESS
        - FABRIC_E_APPLICATION_NOT_UPGRADING
        - FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR
        - FABRIC_E_FABRIC_NOT_UPGRADING
        - FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR
        - FABRIC_E_INVALID_CONFIGURATION
        - FABRIC_E_INVALID_NAME_URI
        - FABRIC_E_PATH_TOO_LONG
        - FABRIC_E_KEY_TOO_LARGE
        - FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED
        - FABRIC_E_INVALID_ATOMIC_GROUP
        - FABRIC_E_VALUE_EMPTY
        - FABRIC_E_NODE_NOT_FOUND
        - FABRIC_E_APPLICATION_TYPE_NOT_FOUND
        - FABRIC_E_APPLICATION_NOT_FOUND
        - FABRIC_E_SERVICE_TYPE_NOT_FOUND
        - FABRIC_E_SERVICE_DOES_NOT_EXIST
        - FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND
        - FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND
        - FABRIC_E_PARTITION_NOT_FOUND
        - FABRIC_E_REPLICA_DOES_NOT_EXIST
        - FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST
        - FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND
        - FABRIC_E_DIRECTORY_NOT_FOUND
        - FABRIC_E_FABRIC_VERSION_NOT_FOUND
        - FABRIC_E_FILE_NOT_FOUND
        - FABRIC_E_NAME_DOES_NOT_EXIST
        - FABRIC_E_PROPERTY_DOES_NOT_EXIST
        - FABRIC_E_ENUMERATION_COMPLETED
        - FABRIC_E_SERVICE_MANIFEST_NOT_FOUND
        - FABRIC_E_KEY_NOT_FOUND
        - FABRIC_E_HEALTH_ENTITY_NOT_FOUND
        - FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS
        - FABRIC_E_APPLICATION_ALREADY_EXISTS
        - FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION
        - FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS
        - FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS
        - FABRIC_E_SERVICE_ALREADY_EXISTS
        - FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS
        - FABRIC_E_APPLICATION_TYPE_IN_USE
        - FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION
        - FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS
        - FABRIC_E_FABRIC_VERSION_IN_USE
        - FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS
        - FABRIC_E_NAME_ALREADY_EXISTS
        - FABRIC_E_NAME_NOT_EMPTY
        - FABRIC_E_PROPERTY_CHECK_FAILED
        - FABRIC_E_SERVICE_METADATA_MISMATCH
        - FABRIC_E_SERVICE_TYPE_MISMATCH
        - FABRIC_E_HEALTH_STALE_REPORT
        - FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED
        - FABRIC_E_NODE_HAS_NOT_STOPPED_YET
        - FABRIC_E_INSTANCE_ID_MISMATCH
        - FABRIC_E_VALUE_TOO_LARGE
        - FABRIC_E_NO_WRITE_QUORUM
        - FABRIC_E_NOT_PRIMARY
        - FABRIC_E_NOT_READY
        - FABRIC_E_RECONFIGURATION_PENDING
        - FABRIC_E_SERVICE_OFFLINE
        - E_ABORT
        - FABRIC_E_COMMUNICATION_ERROR
        - FABRIC_E_OPERATION_NOT_COMPLETE
        - FABRIC_E_TIMEOUT
        - FABRIC_E_NODE_IS_UP
        - E_FAIL
        - FABRIC_E_BACKUP_IS_ENABLED
        - FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH
        - FABRIC_E_INVALID_FOR_STATELESS_SERVICES
        - FABRIC_E_BACKUP_NOT_ENABLED
        - FABRIC_E_BACKUP_POLICY_NOT_EXISTING
        - FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING
        - FABRIC_E_BACKUP_IN_PROGRESS
        - FABRIC_E_RESTORE_IN_PROGRESS
        - FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING
        - FABRIC_E_INVALID_SERVICE_SCALING_POLICY
        - E_INVALIDARG
        - FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS
        - FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND
        - FABRIC_E_VOLUME_ALREADY_EXISTS
        - FABRIC_E_VOLUME_NOT_FOUND
        - SerializationError
        - FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR
      type: string
      x-ms-enum:
        modelAsString: true
        name: FabricErrorCodes
        values:
          - value: FABRIC_E_INVALID_PARTITION_KEY
          - value: FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR
          - value: FABRIC_E_INVALID_ADDRESS
          - value: FABRIC_E_APPLICATION_NOT_UPGRADING
          - value: FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR
          - value: FABRIC_E_FABRIC_NOT_UPGRADING
          - value: FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR
          - value: FABRIC_E_INVALID_CONFIGURATION
          - value: FABRIC_E_INVALID_NAME_URI
          - value: FABRIC_E_PATH_TOO_LONG
          - value: FABRIC_E_KEY_TOO_LARGE
          - value: FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED
          - value: FABRIC_E_INVALID_ATOMIC_GROUP
          - value: FABRIC_E_VALUE_EMPTY
          - value: FABRIC_E_NODE_NOT_FOUND
          - value: FABRIC_E_APPLICATION_TYPE_NOT_FOUND
          - value: FABRIC_E_APPLICATION_NOT_FOUND
          - value: FABRIC_E_SERVICE_TYPE_NOT_FOUND
          - value: FABRIC_E_SERVICE_DOES_NOT_EXIST
          - value: FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND
          - value: FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND
          - value: FABRIC_E_PARTITION_NOT_FOUND
          - value: FABRIC_E_REPLICA_DOES_NOT_EXIST
          - value: FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST
          - value: FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND
          - value: FABRIC_E_DIRECTORY_NOT_FOUND
          - value: FABRIC_E_FABRIC_VERSION_NOT_FOUND
          - value: FABRIC_E_FILE_NOT_FOUND
          - value: FABRIC_E_NAME_DOES_NOT_EXIST
          - value: FABRIC_E_PROPERTY_DOES_NOT_EXIST
          - value: FABRIC_E_ENUMERATION_COMPLETED
          - value: FABRIC_E_SERVICE_MANIFEST_NOT_FOUND
          - value: FABRIC_E_KEY_NOT_FOUND
          - value: FABRIC_E_HEALTH_ENTITY_NOT_FOUND
          - value: FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS
          - value: FABRIC_E_APPLICATION_ALREADY_EXISTS
          - value: FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION
          - value: FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS
          - value: FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS
          - value: FABRIC_E_SERVICE_ALREADY_EXISTS
          - value: FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS
          - value: FABRIC_E_APPLICATION_TYPE_IN_USE
          - value: FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION
          - value: FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS
          - value: FABRIC_E_FABRIC_VERSION_IN_USE
          - value: FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS
          - value: FABRIC_E_NAME_ALREADY_EXISTS
          - value: FABRIC_E_NAME_NOT_EMPTY
          - value: FABRIC_E_PROPERTY_CHECK_FAILED
          - value: FABRIC_E_SERVICE_METADATA_MISMATCH
          - value: FABRIC_E_SERVICE_TYPE_MISMATCH
          - value: FABRIC_E_HEALTH_STALE_REPORT
          - value: FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED
          - value: FABRIC_E_NODE_HAS_NOT_STOPPED_YET
          - value: FABRIC_E_INSTANCE_ID_MISMATCH
          - value: FABRIC_E_VALUE_TOO_LARGE
          - value: FABRIC_E_NO_WRITE_QUORUM
          - value: FABRIC_E_NOT_PRIMARY
          - value: FABRIC_E_NOT_READY
          - value: FABRIC_E_RECONFIGURATION_PENDING
          - value: FABRIC_E_SERVICE_OFFLINE
          - value: E_ABORT
          - value: FABRIC_E_COMMUNICATION_ERROR
          - value: FABRIC_E_OPERATION_NOT_COMPLETE
          - value: FABRIC_E_TIMEOUT
          - value: FABRIC_E_NODE_IS_UP
          - value: E_FAIL
          - value: FABRIC_E_BACKUP_IS_ENABLED
          - value: FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH
          - value: FABRIC_E_INVALID_FOR_STATELESS_SERVICES
          - value: FABRIC_E_BACKUP_NOT_ENABLED
          - value: FABRIC_E_BACKUP_POLICY_NOT_EXISTING
          - value: FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING
          - value: FABRIC_E_BACKUP_IN_PROGRESS
          - value: FABRIC_E_RESTORE_IN_PROGRESS
          - value: FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING
          - value: FABRIC_E_INVALID_SERVICE_SCALING_POLICY
          - value: E_INVALIDARG
          - value: FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS
          - value: FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND
          - value: FABRIC_E_VOLUME_ALREADY_EXISTS
          - value: FABRIC_E_VOLUME_NOT_FOUND
          - value: SerializationError
          - value: FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR
    FabricErrorError:
      description: Error object containing error code and error message.
      properties:
        Code:
          $ref: "#/components/schemas/FabricErrorCodes"
        Message:
          description: Error message.
          type: string
      required:
        - Code
    FabricEvent:
      description: Represents the base for all Fabric Events.
      discriminator:
        propertyName: Kind
      properties:
        Category:
          description: The category of event.
          type: string
        EventInstanceId:
          description: The identifier for the FabricEvent instance.
          format: uuid
          type: string
        HasCorrelatedEvents:
          description: Shows there is existing related events available.
          type: boolean
        Kind:
          $ref: "#/components/schemas/FabricEventKind"
        TimeStamp:
          description: The time event was logged.
          format: date-time
          type: string
      required:
        - Kind
        - EventInstanceId
        - TimeStamp
    FabricEventKind:
      description: The kind of FabricEvent.
      enum:
        - ClusterEvent
        - ContainerInstanceEvent
        - NodeEvent
        - ApplicationEvent
        - ServiceEvent
        - PartitionEvent
        - ReplicaEvent
        - PartitionAnalysisEvent
        - ApplicationCreated
        - ApplicationDeleted
        - ApplicationNewHealthReport
        - ApplicationHealthReportExpired
        - ApplicationUpgradeCompleted
        - ApplicationUpgradeDomainCompleted
        - ApplicationUpgradeRollbackCompleted
        - ApplicationUpgradeRollbackStarted
        - ApplicationUpgradeStarted
        - DeployedApplicationNewHealthReport
        - DeployedApplicationHealthReportExpired
        - ApplicationProcessExited
        - ApplicationContainerInstanceExited
        - NodeAborted
        - NodeAddedToCluster
        - NodeClosed
        - NodeDeactivateCompleted
        - NodeDeactivateStarted
        - NodeDown
        - NodeNewHealthReport
        - NodeHealthReportExpired
        - NodeOpenSucceeded
        - NodeOpenFailed
        - NodeRemovedFromCluster
        - NodeUp
        - PartitionNewHealthReport
        - PartitionHealthReportExpired
        - PartitionReconfigured
        - PartitionPrimaryMoveAnalysis
        - ServiceCreated
        - ServiceDeleted
        - ServiceNewHealthReport
        - ServiceHealthReportExpired
        - DeployedServicePackageNewHealthReport
        - DeployedServicePackageHealthReportExpired
        - StatefulReplicaNewHealthReport
        - StatefulReplicaHealthReportExpired
        - StatelessReplicaNewHealthReport
        - StatelessReplicaHealthReportExpired
        - ClusterNewHealthReport
        - ClusterHealthReportExpired
        - ClusterUpgradeCompleted
        - ClusterUpgradeDomainCompleted
        - ClusterUpgradeRollbackCompleted
        - ClusterUpgradeRollbackStarted
        - ClusterUpgradeStarted
        - ChaosStopped
        - ChaosStarted
        - ChaosCodePackageRestartScheduled
        - ChaosReplicaRemovalScheduled
        - ChaosPartitionSecondaryMoveScheduled
        - ChaosPartitionPrimaryMoveScheduled
        - ChaosReplicaRestartScheduled
        - ChaosNodeRestartScheduled
      type: string
      x-ms-enum:
        modelAsString: true
        name: FabricEventKind
        values:
          - value: ClusterEvent
          - value: ContainerInstanceEvent
          - value: NodeEvent
          - value: ApplicationEvent
          - value: ServiceEvent
          - value: PartitionEvent
          - value: ReplicaEvent
          - value: PartitionAnalysisEvent
          - value: ApplicationCreated
          - value: ApplicationDeleted
          - value: ApplicationNewHealthReport
          - value: ApplicationHealthReportExpired
          - value: ApplicationUpgradeCompleted
          - value: ApplicationUpgradeDomainCompleted
          - value: ApplicationUpgradeRollbackCompleted
          - value: ApplicationUpgradeRollbackStarted
          - value: ApplicationUpgradeStarted
          - value: DeployedApplicationNewHealthReport
          - value: DeployedApplicationHealthReportExpired
          - value: ApplicationProcessExited
          - value: ApplicationContainerInstanceExited
          - value: NodeAborted
          - value: NodeAddedToCluster
          - value: NodeClosed
          - value: NodeDeactivateCompleted
          - value: NodeDeactivateStarted
          - value: NodeDown
          - value: NodeNewHealthReport
          - value: NodeHealthReportExpired
          - value: NodeOpenSucceeded
          - value: NodeOpenFailed
          - value: NodeRemovedFromCluster
          - value: NodeUp
          - value: PartitionNewHealthReport
          - value: PartitionHealthReportExpired
          - value: PartitionReconfigured
          - value: PartitionPrimaryMoveAnalysis
          - value: ServiceCreated
          - value: ServiceDeleted
          - value: ServiceNewHealthReport
          - value: ServiceHealthReportExpired
          - value: DeployedServicePackageNewHealthReport
          - value: DeployedServicePackageHealthReportExpired
          - value: StatefulReplicaNewHealthReport
          - value: StatefulReplicaHealthReportExpired
          - value: StatelessReplicaNewHealthReport
          - value: StatelessReplicaHealthReportExpired
          - value: ClusterNewHealthReport
          - value: ClusterHealthReportExpired
          - value: ClusterUpgradeCompleted
          - value: ClusterUpgradeDomainCompleted
          - value: ClusterUpgradeRollbackCompleted
          - value: ClusterUpgradeRollbackStarted
          - value: ClusterUpgradeStarted
          - value: ChaosStopped
          - value: ChaosStarted
          - value: ChaosCodePackageRestartScheduled
          - value: ChaosReplicaRemovalScheduled
          - value: ChaosPartitionSecondaryMoveScheduled
          - value: ChaosPartitionPrimaryMoveScheduled
          - value: ChaosReplicaRestartScheduled
          - value: ChaosNodeRestartScheduled
    FabricName:
      description: The Service Fabric name, including the 'fabric:' URI scheme.
      type: string
    FabricReplicaStatus:
      description: Specifies the status of the replica.
      enum:
        - Invalid
        - Down
        - Up
      type: string
      x-ms-enum:
        modelAsString: true
        name: FabricReplicaStatus
        values:
          - description: Indicates that the read or write operation access status is not
              valid. This value is not returned to the caller.
            value: Invalid
          - description: Indicates that the replica is down.
            value: Down
          - description: Indicates that the replica is up.
            value: Up
    FailedPropertyBatchInfo:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchInfo"
      description: Derived from PropertyBatchInfo. Represents the property batch failing.
        Contains information about the specific batch failure.
      properties:
        ErrorMessage:
          description: The error message of the failed operation. Describes the exception
            thrown due to the first unsuccessful operation in the property
            batch.
          type: string
        OperationIndex:
          description: The index of the unsuccessful operation in the property batch.
          type: integer
      x-ms-discriminator-value: Failed
    FailedUpgradeDomainProgressObject:
      description: The detailed upgrade progress for nodes in the current upgrade domain at
        the point of failure.
      properties:
        DomainName:
          $ref: "#/components/schemas/UpgradeDomainName"
        NodeUpgradeProgressList:
          $ref: "#/components/schemas/NodeUpgradeProgressInfoList"
    FailureAction:
      description: >-
        The compensating action to perform when a Monitored upgrade encounters
        monitoring policy or health policy violations.

        Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically.

        Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
      enum:
        - Invalid
        - Rollback
        - Manual
      type: string
      x-ms-enum:
        modelAsString: true
        name: FailureAction
        values:
          - description: Indicates the failure action is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade will start rolling back automatically. The value is 1
            value: Rollback
          - description: The upgrade will switch to UnmonitoredManual upgrade mode. The
              value is 2
            value: Manual
    FailureReason:
      description: The cause of an upgrade failure that resulted in FailureAction being
        executed.
      enum:
        - None
        - Interrupted
        - HealthCheck
        - UpgradeDomainTimeout
        - OverallUpgradeTimeout
      type: string
      x-ms-enum:
        modelAsString: true
        name: FailureReason
        values:
          - description: Indicates the reason is invalid or unknown. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: None
          - description: There was an external request to roll back the upgrade. The value
              is 1
            value: Interrupted
          - description: The upgrade failed due to health policy violations. The value is 2
            value: HealthCheck
          - description: An upgrade domain took longer than the allowed upgrade domain
              timeout to process. The value is 3
            value: UpgradeDomainTimeout
          - description: The overall upgrade took longer than the allowed upgrade timeout
              to process. The value is 4
            value: OverallUpgradeTimeout
    FailureUpgradeDomainProgressInfo:
      description: Information about the upgrade domain progress at the time of upgrade
        failure.
      properties:
        DomainName:
          $ref: "#/components/schemas/UpgradeDomainName"
        NodeUpgradeProgressList:
          $ref: "#/components/schemas/NodeUpgradeProgressInfoList"
    FileInfo:
      description: Information about a image store file.
      properties:
        FileSize:
          description: The size of file in bytes.
          type: string
        FileVersion:
          $ref: "#/components/schemas/FileVersion"
        ModifiedDate:
          description: The date and time when the image store file was last modified.
          format: date-time
          type: string
        StoreRelativePath:
          description: The file path relative to the image store root path.
          type: string
    FileShareBackupStorageDescription:
      allOf:
        - $ref: "#/components/schemas/BackupStorageDescription"
      description: Describes the parameters for file share storage used for storing or
        enumerating backups.
      properties:
        Path:
          description: UNC path of the file share where to store or enumerate backups from.
          type: string
        PrimaryPassword:
          description: Primary password to access the share location.
          type: string
        PrimaryUserName:
          description: Primary user name to access the file share.
          type: string
        SecondaryPassword:
          description: Secondary password to access the share location
          type: string
        SecondaryUserName:
          description: Secondary user name to access the file share.
          type: string
      required:
        - Path
      x-ms-discriminator-value: FileShare
    FileVersion:
      description: Information about the version of image store file.
      properties:
        EpochConfigurationNumber:
          description: The epoch configuration version number of the image store replica
            when this file entry was created or updated.
          type: string
        EpochDataLossNumber:
          description: The epoch data loss number of image store replica when this file
            entry was updated or created.
          type: string
        VersionNumber:
          description: The current image store version number for the file is used in image
            store for checking whether it need to be updated.
          type: string
    FolderInfo:
      description: Information about a image store folder. It includes how many files this
        folder contains and its image store relative path.
      properties:
        FileCount:
          description: The number of files from within the image store folder.
          type: string
        StoreRelativePath:
          $ref: "#/components/schemas/ImageStoreRelativePath"
    FolderSizeInfo:
      description: Information of a image store folder size
      properties:
        FolderSize:
          description: The size of folder in bytes.
          type: string
        StoreRelativePath:
          $ref: "#/components/schemas/ImageStoreRelativePath"
    ForceRestart:
      default: false
      description: If true, then processes are forcefully restarted during upgrade even
        when the code version has not changed (the upgrade only changes
        configuration or data).
      type: boolean
    FrequencyBasedBackupScheduleDescription:
      allOf:
        - $ref: "#/components/schemas/BackupScheduleDescription"
      description: Describes the frequency based backup schedule.
      properties:
        Interval:
          description: Defines the interval with which backups are periodically taken. It
            should be specified in ISO8601 format. Timespan in seconds is not
            supported and will be ignored while creating the policy.
          format: duration
          type: string
      required:
        - Interval
      x-ms-discriminator-value: FrequencyBased
    GatewayDestination:
      description: Describes destination endpoint for routing traffic.
      properties:
        applicationName:
          description: Name of the service fabric Mesh application.
          type: string
        endpointName:
          description: name of the endpoint in the service.
          type: string
        serviceName:
          description: service that contains the endpoint.
          type: string
      required:
        - applicationName
        - endpointName
        - serviceName
      type: object
    GatewayProperties:
      description: Describes properties of a gateway resource.
      properties:
        description:
          description: User readable description of the gateway.
          type: string
        destinationNetwork:
          $ref: "#/components/schemas/NetworkRef"
        http:
          description: Configuration for http connectivity for this gateway.
          items:
            $ref: "#/components/schemas/HttpConfig"
          type: array
        ipAddress:
          description: IP address of the gateway. This is populated in the response and is
            ignored for incoming requests.
          readOnly: true
          type: string
        sourceNetwork:
          $ref: "#/components/schemas/NetworkRef"
        status:
          $ref: "#/components/schemas/ResourceStatus"
        statusDetails:
          description: Gives additional information about the current status of the gateway.
          readOnly: true
          type: string
        tcp:
          description: Configuration for tcp connectivity for this gateway.
          items:
            $ref: "#/components/schemas/TcpConfig"
          type: array
      required:
        - destinationNetwork
        - sourceNetwork
    GatewayResourceDescription:
      description: This type describes a gateway resource.
      properties:
        name:
          $ref: "#/components/schemas/GatewayResourceName"
        properties:
          $ref: "#/components/schemas/GatewayProperties"
      required:
        - name
        - properties
    GatewayResourceName:
      description: Name of the Gateway resource.
      type: string
    GetBackupByStorageQueryDescription:
      description: Describes additional filters to be applied, while listing backups, and
        backup storage details from where to fetch the backups.
      properties:
        BackupEntity:
          $ref: "#/components/schemas/BackupEntity"
        EndDateTimeFilter:
          description: Specifies the end date time in ISO8601 till which to enumerate
            backups. If not specified, backups are enumerated till the end.
          format: date-time
          type: string
        Latest:
          default: false
          description: If specified as true, gets the most recent backup (within the
            specified time range) for every partition under the specified backup
            entity.
          type: boolean
        StartDateTimeFilter:
          description: Specifies the start date time in ISO8601 from which to enumerate
            backups. If not specified, backups are enumerated from the
            beginning.
          format: date-time
          type: string
        Storage:
          $ref: "#/components/schemas/BackupStorageDescription"
      required:
        - Storage
        - BackupEntity
    GetPropertyBatchOperation:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchOperation"
      description: >-
        Represents a PropertyBatchOperation that gets the specified property if
        it exists.

        Note that if one PropertyBatchOperation in a PropertyBatch fails,

        the entire batch fails and cannot be committed in a transactional manner.
      properties:
        IncludeValue:
          default: false
          description: >-
            Whether or not to return the property value with the metadata.

            True if values should be returned with the metadata; False to return only property metadata.
          type: boolean
      x-ms-discriminator-value: Get
    GuidPropertyValue:
      allOf:
        - $ref: "#/components/schemas/PropertyValue"
      description: Describes a Service Fabric property value of type Guid.
      properties:
        Data:
          description: The data of the property value.
          format: uuid
          type: string
      required:
        - Data
      x-ms-discriminator-value: Guid
    HealthCheckRetryTimeout:
      default: PT0H10M0S
      description: The amount of time to retry health evaluation when the application or
        cluster is unhealthy before FailureAction is executed. It is first
        interpreted as a string representing an ISO 8601 duration. If that
        fails, then it is interpreted as a number representing the total number
        of milliseconds.
      type: string
    HealthCheckStableDuration:
      default: PT0H2M0S
      description: The amount of time that the application or cluster must remain healthy
        before the upgrade proceeds to the next upgrade domain. It is first
        interpreted as a string representing an ISO 8601 duration. If that
        fails, then it is interpreted as a number representing the total number
        of milliseconds.
      type: string
    HealthCheckWaitDuration:
      default: "0"
      description: The amount of time to wait after completing an upgrade domain before
        applying health policies. It is first interpreted as a string
        representing an ISO 8601 duration. If that fails, then it is interpreted
        as a number representing the total number of milliseconds.
      type: string
    HealthEvaluation:
      description: Represents a health evaluation which describes the data and the
        algorithm used by health manager to evaluate the health of an entity.
      discriminator:
        propertyName: Kind
      properties:
        AggregatedHealthState:
          $ref: "#/components/schemas/HealthState"
        Description:
          description: Description of the health evaluation, which represents a summary of
            the evaluation process.
          type: string
        Kind:
          $ref: "#/components/schemas/HealthEvaluationKind"
      required:
        - Kind
    HealthEvaluationKind:
      description: The health manager in the cluster performs health evaluations in
        determining the aggregated health state of an entity. This enumeration
        provides information on the kind of evaluation that was performed.
        Following are the possible values.
      enum:
        - Invalid
        - Event
        - Replicas
        - Partitions
        - DeployedServicePackages
        - DeployedApplications
        - Services
        - Nodes
        - Applications
        - SystemApplication
        - UpgradeDomainDeployedApplications
        - UpgradeDomainNodes
        - Replica
        - Partition
        - DeployedServicePackage
        - DeployedApplication
        - Service
        - Node
        - Application
        - DeltaNodesCheck
        - UpgradeDomainDeltaNodesCheck
        - ApplicationTypeApplications
      type: string
      x-ms-enum:
        modelAsString: true
        name: HealthEvaluationKind
        values:
          - description: Indicates that the health evaluation is invalid. The value is zero.
            value: Invalid
          - description: Indicates that the health evaluation is for a health event. The
              value is 1.
            value: Event
          - description: Indicates that the health evaluation is for the replicas of a
              partition. The value is 2.
            value: Replicas
          - description: Indicates that the health evaluation is for the partitions of a
              service. The value is 3.
            value: Partitions
          - description: Indicates that the health evaluation is for the deployed service
              packages of a deployed application. The value is 4.
            value: DeployedServicePackages
          - description: Indicates that the health evaluation is for the deployed
              applications of an application. The value is 5.
            value: DeployedApplications
          - description: Indicates that the health evaluation is for services of an
              application. The value is 6.
            value: Services
          - description: Indicates that the health evaluation is for the cluster nodes. The
              value is 7.
            value: Nodes
          - description: Indicates that the health evaluation is for the cluster
              applications. The value is 8.
            value: Applications
          - description: Indicates that the health evaluation is for the system
              application. The value is 9.
            value: SystemApplication
          - description: Indicates that the health evaluation is for the deployed
              applications of an application in an upgrade domain. The value is
              10.
            value: UpgradeDomainDeployedApplications
          - description: Indicates that the health evaluation is for the cluster nodes in
              an upgrade domain. The value is 11.
            value: UpgradeDomainNodes
          - description: Indicates that the health evaluation is for a replica. The value
              is 13.
            value: Replica
          - description: Indicates that the health evaluation is for a partition. The value
              is 14.
            value: Partition
          - description: Indicates that the health evaluation is for a deployed service
              package. The value is 16.
            value: DeployedServicePackage
          - description: Indicates that the health evaluation is for a deployed
              application. The value is 17.
            value: DeployedApplication
          - description: Indicates that the health evaluation is for a service. The value
              is 15.
            value: Service
          - description: Indicates that the health evaluation is for a node. The value is
              12.
            value: Node
          - description: Indicates that the health evaluation is for an application. The
              value is 18.
            value: Application
          - description: Indicates that the health evaluation is for the delta of unhealthy
              cluster nodes. The value is 19.
            value: DeltaNodesCheck
          - description: Indicates that the health evaluation is for the delta of unhealthy
              upgrade domain cluster nodes. The value is 20.
            value: UpgradeDomainDeltaNodesCheck
          - description: – Indicates that the health evaluation is for applications of an
              application type. The value is 21.
            value: ApplicationTypeApplications
    HealthEvaluationWrapper:
      description: Wrapper object for health evaluation.
      properties:
        HealthEvaluation:
          $ref: "#/components/schemas/HealthEvaluation"
    HealthEvent:
      allOf:
        - $ref: "#/components/schemas/HealthInformation"
      description: Represents health information reported on a health entity, such as
        cluster, application or node, with additional metadata added by the
        Health Manager.
      properties:
        IsExpired:
          description: Returns true if the health event is expired, otherwise false.
          type: boolean
        LastErrorTransitionAt:
          description: >-
            If the current health state is 'Error', this property returns the
            time at which the health report was first reported with 'Error'. For
            periodic reporting, many reports with the same state may have been
            generated however, this property returns only the date and time at
            the first 'Error' health report was received.


            If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in 'Error', before transitioning to a different state.


            If the health state was never 'Error', the value will be zero date-time.
          format: date-time
          type: string
        LastModifiedUtcTimestamp:
          description: The date and time when the health report was last modified by the
            health store.
          format: date-time
          type: string
        LastOkTransitionAt:
          description: >-
            If the current health state is 'Ok', this property returns the time
            at which the health report was first reported with 'Ok'.

            For periodic reporting, many reports with the same state may have been generated.

            This property returns the date and time when the first 'Ok' health report was received.


            If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last in 'Ok', before transitioning to a different state.


            If the health state was never 'Ok', the value will be zero date-time.
          format: date-time
          type: string
        LastWarningTransitionAt:
          description: >-
            If the current health state is 'Warning', this property returns the
            time at which the health report was first reported with 'Warning'.
            For periodic reporting, many reports with the same state may have
            been generated however, this property returns only the date and time
            at the first 'Warning' health report was received.


            If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in 'Warning', before transitioning to a different state.


            If the health state was never 'Warning', the value will be zero date-time.
          format: date-time
          type: string
        SourceUtcTimestamp:
          description: The date and time when the health report was sent by the source.
          format: date-time
          type: string
    HealthInformation:
      description: Represents common health report information. It is included in all
        health reports sent to health store and in all health events returned by
        health queries.
      properties:
        Description:
          description: >-
            The description of the health information. It represents free text
            used to add human readable information about the report.

            The maximum string length for the description is 4096 characters.

            If the provided string is longer, it will be automatically truncated.

            When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is 4096 characters.

            The presence of the marker indicates to users that truncation occurred.

            Note that when truncated, the description has less than 4096 characters from the original string.
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Property:
          description: >-
            The property of the health information. An entity can have health
            reports for different properties.

            The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report.

            For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,

            so it can report "AvailableDisk" property on that node.

            The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.

            In the health store, these reports are treated as separate health events for the specified node.


            Together with the SourceId, the property uniquely identifies the health information.
          type: string
        RemoveWhenExpired:
          description: >-
            Value that indicates whether the report is removed from health store
            when it expires.

            If set to true, the report is removed from the health store after it expires.

            If set to false, the report is treated as an error when expired. The value of this property is false by default.

            When clients report periodically, they should set RemoveWhenExpired false (default).

            This way, if the reporter has issues (e.g. deadlock) and can't report, the entity is evaluated at error when the health report expires.

            This flags the entity as being in Error health state.
          type: boolean
        SequenceNumber:
          description: >-
            The sequence number for this health report as a numeric string.

            The report sequence number is used by the health store to detect stale reports.

            If not specified, a sequence number is auto-generated by the health client when a report is added.
          type: string
        SourceId:
          description: The source name that identifies the client/watchdog/system component
            that generated the health information.
          type: string
        TimeToLiveInMilliSeconds:
          description: >-
            The duration for which this health report is valid. This field uses
            ISO8601 format for specifying the duration.

            When clients report periodically, they should send reports with higher frequency than time to live.

            If clients report on transition, they can set the time to live to infinite.

            When time to live expires, the health event that contains the health information

            is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.


            If not specified, time to live defaults to infinite value.
          format: duration
          type: string
      required:
        - SourceId
        - Property
        - HealthState
    HealthState:
      description: The health state of a Service Fabric entity such as Cluster, Node,
        Application, Service, Partition, Replica etc.
      enum:
        - Invalid
        - Ok
        - Warning
        - Error
        - Unknown
      type: string
      x-ms-enum:
        modelAsString: true
        name: HealthState
        values:
          - description: Indicates an invalid health state. All Service Fabric enumerations
              have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates the health state is okay. The value is 1.
            value: Ok
          - description: Indicates the health state is at a warning level. The value is 2.
            value: Warning
          - description: Indicates the health state is at an error level. Error health
              state should be investigated, as they can impact the correct
              functionality of the cluster. The value is 3.
            value: Error
          - description: Indicates an unknown health status. The value is 65535.
            value: Unknown
    HealthStateCount:
      description: Represents information about how many health entities are in Ok, Warning
        and Error health state.
      properties:
        ErrorCount:
          description: The number of health entities with aggregated health state Error.
          format: int64
          minimum: 0
          type: integer
        OkCount:
          description: The number of health entities with aggregated health state Ok.
          format: int64
          minimum: 0
          type: integer
        WarningCount:
          description: The number of health entities with aggregated health state Warning.
          format: int64
          minimum: 0
          type: integer
    HealthStatistics:
      description: >-
        The health statistics of an entity, returned as part of the health query
        result when the query description is configured to include statistics.

        The statistics include health state counts for all children types of the current entity.

        For example, for cluster, the health statistics include health state counts for nodes, applications, services, partitions, replicas, deployed applications and deployed service packages.

        For partition, the health statistics include health counts for replicas.
      properties:
        HealthStateCountList:
          description: List of health state counts per entity kind, which keeps track of
            how many children of the queried entity are in Ok, Warning and Error
            state.
          items:
            $ref: "#/components/schemas/EntityKindHealthStateCount"
          type: array
    HostIsolationMode:
      description: Specifies the isolation mode of main entry point of a code package when
        it's host type is ContainerHost. This is specified as part of container
        host policies in application manifest while importing service manifest.
      enum:
        - None
        - Process
        - HyperV
      type: string
      x-ms-enum:
        modelAsString: true
        name: HostIsolationMode
        values:
          - description: Indicates the isolation mode is not applicable for given HostType.
              The value is 0.
            value: None
          - description: This is the default isolation mode for a ContainerHost. The value
              is 1.
            value: Process
          - description: Indicates the ContainerHost is a Hyper-V container. This applies
              to only Windows containers. The value is 2.
            value: HyperV
    HostType:
      description: Specifies the type of host for main entry point of a code package as
        specified in service manifest.
      enum:
        - Invalid
        - ExeHost
        - ContainerHost
      type: string
      x-ms-enum:
        modelAsString: true
        name: HostType
        values:
          - description: Indicates the type of host is not known or invalid. The value is 0.
            value: Invalid
          - description: Indicates the host is an executable. The value is 1.
            value: ExeHost
          - description: Indicates the host is a container. The value is 2.
            value: ContainerHost
    HttpConfig:
      description: Describes the http configuration for external connectivity for this
        network.
      properties:
        hosts:
          description: description for routing.
          items:
            $ref: "#/components/schemas/HttpHostConfig"
          type: array
        name:
          description: http gateway config name.
          type: string
        port:
          description: Specifies the port at which the service endpoint below needs to be
            exposed.
          type: integer
      required:
        - hosts
        - name
        - port
      type: object
    HttpHostConfig:
      description: Describes the hostname properties for http routing.
      properties:
        name:
          description: http hostname config name.
          type: string
        routes:
          description: Route information to use for routing. Routes are processed in the
            order they are specified. Specify routes that are more specific
            before routes that can handle general cases.
          items:
            $ref: "#/components/schemas/HttpRouteConfig"
          type: array
      required:
        - name
        - routes
      type: object
    HttpRouteConfig:
      description: Describes the hostname properties for http routing.
      properties:
        destination:
          $ref: "#/components/schemas/GatewayDestination"
        match:
          $ref: "#/components/schemas/HttpRouteMatchRule"
        name:
          description: http route name.
          type: string
      required:
        - destination
        - match
        - name
      type: object
    HttpRouteMatchHeader:
      description: Describes header information for http route matching.
      properties:
        name:
          description: Name of header to match in request.
          type: string
        type:
          description: how to match header value
          enum:
            - exact
          type: string
          x-ms-enum:
            modelAsString: true
            name: HeaderMatchType
        value:
          description: Value of header to match in request.
          type: string
      required:
        - name
      type: object
    HttpRouteMatchPath:
      description: Path to match for routing.
      properties:
        rewrite:
          description: replacement string for matched part of the Uri.
          type: string
        type:
          description: how to match value in the Uri
          enum:
            - prefix
          type: string
          x-ms-enum:
            modelAsString: true
            name: PathMatchType
        value:
          description: Uri path to match for request.
          type: string
      required:
        - type
        - value
      type: object
    HttpRouteMatchRule:
      description: Describes a rule for http route matching.
      properties:
        headers:
          description: headers and their values to match in request.
          items:
            $ref: "#/components/schemas/HttpRouteMatchHeader"
          type: array
        path:
          $ref: "#/components/schemas/HttpRouteMatchPath"
      required:
        - path
      type: object
    IdentityDescription:
      description: Information describing the identities associated with this application.
      properties:
        principalId:
          description: the object identifier of the Service Principal of the identity
            associated with this resource.
          type: string
        tenantId:
          description: the identifier of the tenant containing the application's identity.
          type: string
        tokenServiceEndpoint:
          description: the endpoint for the token service managing this identity
          type: string
        type:
          description: the types of identities associated with this resource; currently
            restricted to 'SystemAssigned and UserAssigned'
          type: string
        userAssignedIdentities:
          $ref: "#/components/schemas/UserAssignedIdentityMap"
      required:
        - type
    IdentityItemDescription:
      description: Describes a single user-assigned identity associated with the
        application.
      properties:
        clientId:
          description: the client identifier of the Service Principal which this identity
            represents.
          type: string
        principalId:
          description: the object identifier of the Service Principal which this identity
            represents.
          type: string
      type: object
    ImageRegistryCredential:
      description: Image registry credential.
      properties:
        password:
          description: The password for the private registry. The password is required for
            create or update operations, however it is not returned in the get
            or list operations.
          type: string
        server:
          description: Docker image registry server, without protocol such as `http` and
            `https`.
          type: string
        username:
          description: The username for the private registry.
          type: string
      required:
        - server
        - username
    ImageStoreContent:
      description: Information about the image store content.
      properties:
        StoreFiles:
          description: The list of image store file info objects represents files found
            under the given image store relative path.
          items:
            $ref: "#/components/schemas/FileInfo"
          type: array
        StoreFolders:
          description: The list of image store folder info objects represents subfolders
            found under the given image store relative path.
          items:
            $ref: "#/components/schemas/FolderInfo"
          type: array
    ImageStoreCopyDescription:
      description: Information about how to copy image store content from one image store
        relative path to another image store relative path.
      properties:
        CheckMarkFile:
          description: Indicates whether to check mark file during copying. The property is
            true if checking mark file is required, false otherwise. The mark
            file is used to check whether the folder is well constructed. If the
            property is true and mark file does not exist, the copy is skipped.
          type: boolean
        RemoteDestination:
          description: The relative path of destination image store content to be copied to.
          type: string
        RemoteSource:
          description: The relative path of source image store content to be copied from.
          type: string
        SkipFiles:
          description: The list of the file names to be skipped for copying.
          items:
            type: string
          type: array
      required:
        - RemoteSource
        - RemoteDestination
    ImageStoreRelativePath:
      description: The remote location within image store. This path is relative to the
        image store root.
      type: string
    InfrastructureServiceResponse:
      description: >-
        This is a weakly-typed response stream to the client. It contains the
        JSON response from the infrastructure service without deserialization.

        The content of the response depends on which command was issued to the infrastructure service.
      format: binary
      type: string
    InlinedValueSecretResourceProperties:
      allOf:
        - $ref: "#/components/schemas/SecretResourceProperties"
      description: Describes the properties of a secret resource whose value is provided
        explicitly as plaintext. The secret resource may have multiple values,
        each being uniquely versioned. The secret value of each version is
        stored encrypted, and delivered as plaintext into the context of
        applications referencing it.
      x-ms-discriminator-value: inlinedValue
    InstanceId:
      description: Id of a stateless service instance. InstanceId is used by Service Fabric
        to uniquely identify an instance of a partition of a stateless service.
        It is unique within a partition and does not change for the lifetime of
        the instance. If the instance has failed over on the same or different
        node, it will get a different value for the InstanceId.
      type: string
    Int64PropertyValue:
      allOf:
        - $ref: "#/components/schemas/PropertyValue"
      description: Describes a Service Fabric property value of type Int64.
      properties:
        Data:
          description: The data of the property value.
          type: string
      required:
        - Data
      x-ms-discriminator-value: Int64
    Int64RangePartitionInformation:
      allOf:
        - $ref: "#/components/schemas/PartitionInformation"
      description: Describes the partition information for the integer range that is based
        on partition schemes.
      properties:
        HighKey:
          description: Specifies the maximum key value handled by this partition.
          type: string
        LowKey:
          description: Specifies the minimum key value handled by this partition.
          type: string
      x-ms-discriminator-value: Int64Range
    InvokeDataLossResult:
      description: Represents information about an operation in a terminal state (Completed
        or Faulted).
      properties:
        ErrorCode:
          description: If OperationState is Completed, this is 0.  If OperationState is
            Faulted, this is an error code indicating the reason.
          format: int32
          type: integer
        SelectedPartition:
          $ref: "#/components/schemas/SelectedPartition"
    InvokeQuorumLossResult:
      description: Represents information about an operation in a terminal state (Completed
        or Faulted).
      properties:
        ErrorCode:
          description: If OperationState is Completed, this is 0.  If OperationState is
            Faulted, this is an error code indicating the reason.
          format: int32
          type: integer
        SelectedPartition:
          $ref: "#/components/schemas/SelectedPartition"
    KeyValueStoreReplicaStatus:
      allOf:
        - $ref: "#/components/schemas/ReplicaStatusBase"
      description: Key value store related information for the replica.
      properties:
        CopyNotificationCurrentKeyFilter:
          description: Value indicating the latest key-prefix filter applied to enumeration
            during the callback. Null if there is no pending callback.
          type: string
        CopyNotificationCurrentProgress:
          description: Value indicating the latest number of keys enumerated during the
            callback. 0 if there is no pending callback.
          type: string
        DatabaseLogicalSizeEstimate:
          description: Value indicating the estimated size of the underlying database.
          type: string
        DatabaseRowCountEstimate:
          description: Value indicating the estimated number of rows in the underlying
            database.
          type: string
        StatusDetails:
          description: Value indicating the current status details of the replica.
          type: string
      x-ms-discriminator-value: KeyValueStore
    LoadMetricInformation:
      description: Represents data structure that contains load information for a certain
        metric in a cluster.
      properties:
        Action:
          description: The current action being taken with regard to this metric
          type: string
        ActivityThreshold:
          description: The Activity Threshold specified for this metric in the system
            Cluster Manifest.
          format: double
          type: string
        BalancingThreshold:
          description: The balancing threshold for a certain metric.
          format: double
          type: string
        BufferedClusterCapacityRemaining:
          description: Remaining capacity in the cluster excluding the reserved space.
          format: double
          type: string
        ClusterBufferedCapacity:
          description: Remaining capacity in the cluster excluding the reserved space. In
            future releases of Service Fabric this parameter will be deprecated
            in favor of BufferedClusterCapacityRemaining.
          type: string
        ClusterCapacity:
          description: The total cluster capacity for a given metric
          type: string
        ClusterCapacityRemaining:
          description: The remaining capacity for the metric in the cluster.
          type: string
        ClusterLoad:
          description: The total cluster load. In future releases of Service Fabric this
            parameter will be deprecated in favor of CurrentClusterLoad.
          type: string
        ClusterRemainingBufferedCapacity:
          description: The remaining percentage of cluster total capacity for this metric.
          type: string
        ClusterRemainingCapacity:
          description: The remaining capacity for the metric in the cluster. In future
            releases of Service Fabric this parameter will be deprecated in
            favor of ClusterCapacityRemaining.
          type: string
        CurrentClusterLoad:
          description: The total cluster load.
          format: double
          type: string
        DeviationAfter:
          description: The standard average deviation of the metrics after resource
            balancer run.
          format: double
          type: string
        DeviationBefore:
          description: The standard average deviation of the metrics before resource
            balancer run.
          format: double
          type: string
        IsBalancedAfter:
          description: Value that indicates whether the metrics is balanced or not after
            resource balancer run.
          type: boolean
        IsBalancedBefore:
          description: Value that indicates whether the metrics is balanced or not before
            resource balancer run
          type: boolean
        IsClusterCapacityViolation:
          description: Indicates that the metric is currently over capacity in the cluster.
          type: boolean
        MaxNodeLoadNodeId:
          $ref: "#/components/schemas/NodeId"
        MaxNodeLoadValue:
          description: The maximum load on any node for this metric. In future releases of
            Service Fabric this parameter will be deprecated in favor of
            MaximumNodeLoad.
          type: string
        MaximumNodeLoad:
          description: The maximum load on any node for this metric.
          format: double
          type: string
        MinNodeLoadNodeId:
          $ref: "#/components/schemas/NodeId"
        MinNodeLoadValue:
          description: The minimum load on any node for this metric. In future releases of
            Service Fabric this parameter will be deprecated in favor of
            MinimumNodeLoad.
          type: string
        MinimumNodeLoad:
          description: The minimum load on any node for this metric.
          format: double
          type: string
        Name:
          description: Name of the metric for which this load information is provided.
          type: string
        NodeBufferPercentage:
          description: The reserved percentage of total node capacity for this metric.
          format: double
          type: string
        PlannedLoadRemoval:
          description: >-
            This value represents the load of the replicas that are planned to
            be removed in the future within the cluster.

            This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.
          format: double
          type: string
    LoadMetricReport:
      description: Represents the load metric report which contains the time metric was
        reported, its name and value.
      properties:
        CurrentValue:
          description: The value of the load metric.
          format: double
          type: string
        LastReportedUtc:
          description: Gets the UTC time when the load was reported.
          format: date-time
          type: string
        Name:
          description: The name of the load metric.
          type: string
        Value:
          description: The value of the load metric. In future releases of Service Fabric
            this parameter will be deprecated in favor of CurrentValue.
          format: int32
          type: string
    LoadMetricReportInfo:
      description: Information about load reported by replica.
      properties:
        CurrentValue:
          description: The double value of the load for the metric.
          format: double
          type: string
        LastReportedUtc:
          description: The UTC time when the load is reported.
          format: date-time
          type: string
        Name:
          description: The name of the metric.
          type: string
        Value:
          description: The value of the load for the metric. In future releases of Service
            Fabric this parameter will be deprecated in favor of CurrentValue.
          format: int32
          type: integer
    LoadMetricReportInfoList:
      description: List of load reported by replica.
      items:
        $ref: "#/components/schemas/LoadMetricReportInfo"
      type: array
    LocalNetworkResourceProperties:
      allOf:
        - $ref: "#/components/schemas/NetworkResourceProperties"
      description: Information about a Service Fabric container network local to a single
        Service Fabric cluster.
      properties:
        networkAddressPrefix:
          $ref: "#/components/schemas/NetworkAddressPrefix"
      x-ms-discriminator-value: Local
    ManagedApplicationIdentity:
      description: Describes a managed application identity.
      properties:
        Name:
          description: The name of the identity.
          type: string
        PrincipalId:
          description: The identity's PrincipalId.
          type: string
      required:
        - Name
    ManagedApplicationIdentityDescription:
      description: Managed application identity description.
      properties:
        ManagedIdentities:
          $ref: "#/components/schemas/ManagedApplicationIdentityList"
        TokenServiceEndpoint:
          description: Token service endpoint.
          type: string
    ManagedApplicationIdentityList:
      description: A list of managed application identity objects.
      items:
        $ref: "#/components/schemas/ManagedApplicationIdentity"
      type: array
    MonitoringPolicyDescription:
      description: Describes the parameters for monitoring an upgrade in Monitored mode.
      properties:
        FailureAction:
          $ref: "#/components/schemas/FailureAction"
        HealthCheckRetryTimeoutInMilliseconds:
          $ref: "#/components/schemas/HealthCheckRetryTimeout"
        HealthCheckStableDurationInMilliseconds:
          $ref: "#/components/schemas/HealthCheckStableDuration"
        HealthCheckWaitDurationInMilliseconds:
          $ref: "#/components/schemas/HealthCheckWaitDuration"
        UpgradeDomainTimeoutInMilliseconds:
          $ref: "#/components/schemas/UpgradeDomainTimeout"
        UpgradeTimeoutInMilliseconds:
          $ref: "#/components/schemas/UpgradeTimeout"
    MoveCost:
      description: Specifies the move cost for the service.
      enum:
        - Zero
        - Low
        - Medium
        - High
      type: string
      x-ms-enum:
        modelAsString: true
        name: MoveCost
        values:
          - description: Zero move cost. This value is zero.
            value: Zero
          - description: Specifies the move cost of the service as Low. The value is 1.
            value: Low
          - description: Specifies the move cost of the service as Medium. The value is 2.
            value: Medium
          - description: Specifies the move cost of the service as High. The value is 3.
            value: High
    NameDescription:
      description: Describes a Service Fabric name.
      properties:
        Name:
          $ref: "#/components/schemas/FabricName"
      required:
        - Name
    NamedPartitionInformation:
      allOf:
        - $ref: "#/components/schemas/PartitionInformation"
      description: Describes the partition information for the name as a string that is
        based on partition schemes.
      properties:
        Name:
          description: Name of the partition.
          type: string
      x-ms-discriminator-value: Named
    NamedPartitionSchemeDescription:
      allOf:
        - $ref: "#/components/schemas/PartitionSchemeDescription"
      description: Describes the named partition scheme of the service.
      properties:
        Count:
          description: The number of partitions.
          type: integer
        Names:
          description: Array of size specified by the ‘Count’ parameter, for the names of
            the partitions.
          items:
            type: string
          type: array
      required:
        - Count
        - Names
      x-ms-discriminator-value: Named
    NetworkAddressPrefix:
      description: Address space for a container network. This is expressed in CIDR
        notation.
      type: string
    NetworkKind:
      description: The type of a Service Fabric container network.
      enum:
        - Local
      type: string
      x-ms-enum:
        modelAsString: true
        name: NetworkKind
        values:
          - description: Indicates a container network local to a single Service Fabric
              cluster. The value is 1.
            value: Local
    NetworkRef:
      description: Describes a network reference in a service.
      properties:
        endpointRefs:
          description: A list of endpoints that are exposed on this network.
          items:
            $ref: "#/components/schemas/EndpointRef"
          type: array
        name:
          description: Name of the network
          type: string
    NetworkResourceDescription:
      description: This type describes a network resource.
      properties:
        name:
          $ref: "#/components/schemas/NetworkResourceName"
        properties:
          $ref: "#/components/schemas/NetworkResourceProperties"
      required:
        - name
        - properties
    NetworkResourceName:
      description: Name of the Network resource.
      type: string
    NetworkResourceProperties:
      allOf:
        - $ref: "#/components/schemas/NetworkResourcePropertiesBase"
      description: Describes properties of a network resource.
      properties:
        description:
          description: User readable description of the network.
          type: string
        status:
          $ref: "#/components/schemas/ResourceStatus"
        statusDetails:
          description: Gives additional information about the current status of the network.
          readOnly: true
          type: string
      type: object
    NetworkResourcePropertiesBase:
      description: This type describes the properties of a network resource, including its
        kind.
      discriminator:
        propertyName: kind
      properties:
        kind:
          $ref: "#/components/schemas/NetworkKind"
      required:
        - kind
      type: object
    NextUpgradeDomain:
      description: The name of the next upgrade domain to be processed.
      type: string
    NodeAbortedEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Aborted event.
      properties:
        FaultDomain:
          description: Fault domain of Node.
          type: string
        Hostname:
          description: Name of Host.
          type: string
        IpAddressOrFQDN:
          description: IP address or FQDN.
          type: string
        IsSeedNode:
          description: Indicates if it is seed node.
          type: boolean
        NodeId:
          description: Id of Node.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
        NodeVersion:
          description: Version of Node.
          type: string
        UpgradeDomain:
          description: Upgrade domain of Node.
          type: string
      required:
        - NodeInstance
        - NodeId
        - UpgradeDomain
        - FaultDomain
        - IpAddressOrFQDN
        - Hostname
        - IsSeedNode
        - NodeVersion
      x-ms-discriminator-value: NodeAborted
    NodeAddedToClusterEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Added event.
      properties:
        FabricVersion:
          description: Fabric version.
          type: string
        IpAddressOrFQDN:
          description: IP address or FQDN.
          type: string
        NodeCapacities:
          description: Capacities.
          type: string
        NodeId:
          description: Id of Node.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
        NodeType:
          description: Type of Node.
          type: string
      required:
        - NodeId
        - NodeInstance
        - NodeType
        - FabricVersion
        - IpAddressOrFQDN
        - NodeCapacities
      x-ms-discriminator-value: NodeAddedToCluster
    NodeClosedEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Closed event.
      properties:
        Error:
          description: Describes error.
          type: string
        NodeId:
          description: Id of Node.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
      required:
        - NodeId
        - NodeInstance
        - Error
      x-ms-discriminator-value: NodeClosed
    NodeDeactivateCompletedEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Deactivate Completed event.
      properties:
        BatchIdsWithDeactivateIntent:
          description: Batch Ids.
          type: string
        EffectiveDeactivateIntent:
          description: Describes deactivate intent.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
        StartTime:
          description: Start time.
          format: date-time
          type: string
      required:
        - NodeInstance
        - EffectiveDeactivateIntent
        - BatchIdsWithDeactivateIntent
        - StartTime
      x-ms-discriminator-value: NodeDeactivateCompleted
    NodeDeactivateStartedEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Deactivate Started event.
      properties:
        BatchId:
          description: Batch Id.
          type: string
        DeactivateIntent:
          description: Describes deactivate intent.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
      required:
        - NodeInstance
        - BatchId
        - DeactivateIntent
      x-ms-discriminator-value: NodeDeactivateStarted
    NodeDeactivationInfo:
      description: Information about the node deactivation. This information is valid for a
        node that is undergoing deactivation or has already been deactivated.
      properties:
        NodeDeactivationIntent:
          $ref: "#/components/schemas/NodeDeactivationIntent"
        NodeDeactivationStatus:
          $ref: "#/components/schemas/NodeDeactivationStatus"
        NodeDeactivationTask:
          $ref: "#/components/schemas/NodeDeactivationTaskList"
        PendingSafetyChecks:
          $ref: "#/components/schemas/SafetyCheckInfoList"
    NodeDeactivationIntent:
      description: The intent or the reason for deactivating the node. Following are the
        possible values for it.
      enum:
        - Invalid
        - Pause
        - Restart
        - RemoveData
        - RemoveNode
      type: string
      x-ms-enum:
        modelAsString: true
        name: NodeDeactivationIntent
        values:
          - description: Indicates the node deactivation intent is invalid. All Service
              Fabric enumerations have the invalid type. The value is zero. This
              value is not used.
            value: Invalid
          - description: Indicates that the node should be paused. The value is 1.
            value: Pause
          - description: Indicates that the intent is for the node to be restarted after a
              short period of time. Service Fabric does not restart the node,
              this action is done outside of Service Fabric. The value is 2.
            value: Restart
          - description: Indicates that the intent is to reimage the node. Service Fabric
              does not reimage the node, this action is done outside of Service
              Fabric. The value is 3.
            value: RemoveData
          - description: Indicates that the node is being decommissioned and is not
              expected to return. Service Fabric does not decommission the node,
              this action is done outside of Service Fabric. The value is 4.
            value: RemoveNode
    NodeDeactivationStatus:
      description: The status of node deactivation operation. Following are the possible
        values.
      enum:
        - None
        - SafetyCheckInProgress
        - SafetyCheckComplete
        - Completed
      type: string
      x-ms-enum:
        modelAsString: true
        name: NodeDeactivationStatus
        values:
          - description: No status is associated with the task. The value is zero.
            value: None
          - description: When a node is deactivated Service Fabric performs checks to
              ensure that the operation is safe to proceed to ensure
              availability of the service and reliability of the state. This
              value indicates that one or more safety checks are in progress.
              The value is 1.
            value: SafetyCheckInProgress
          - description: When a node is deactivated Service Fabric performs checks to
              ensure that the operation is safe to proceed to ensure
              availability of the service and reliability of the state. This
              value indicates that all safety checks have been completed. The
              value is 2.
            value: SafetyCheckComplete
          - description: The task is completed. The value is 3.
            value: Completed
    NodeDeactivationTask:
      description: The task representing the deactivation operation on the node.
      properties:
        NodeDeactivationIntent:
          $ref: "#/components/schemas/NodeDeactivationIntent"
        NodeDeactivationTaskId:
          $ref: "#/components/schemas/NodeDeactivationTaskId"
    NodeDeactivationTaskId:
      description: Identity of the task related to deactivation operation on the node.
      properties:
        Id:
          description: Value of the task id.
          type: string
        NodeDeactivationTaskType:
          $ref: "#/components/schemas/NodeDeactivationTaskType"
    NodeDeactivationTaskList:
      description: List of tasks representing the deactivation operation on the node.
      items:
        $ref: "#/components/schemas/NodeDeactivationTask"
      type: array
    NodeDeactivationTaskType:
      description: The type of the task that performed the node deactivation. Following are
        the possible values.
      enum:
        - Invalid
        - Infrastructure
        - Repair
        - Client
      type: string
      x-ms-enum:
        modelAsString: true
        name: NodeDeactivationTaskType
        values:
          - description: Indicates the node deactivation task type is invalid. All Service
              Fabric enumerations have the invalid type. The value is zero. This
              value is not used.
            value: Invalid
          - description: Specifies the task created by Infrastructure hosting the nodes.
              The value is 1.
            value: Infrastructure
          - description: Specifies the task that was created by the Repair Manager service.
              The value is 2.
            value: Repair
          - description: Specifies that the task was created by using the public API. The
              value is 3.
            value: Client
    NodeDownEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Down event.
      properties:
        LastNodeUpAt:
          description: Time when Node was last up.
          format: date-time
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
      required:
        - NodeInstance
        - LastNodeUpAt
      x-ms-discriminator-value: NodeDown
    NodeEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Node Events.
      properties:
        NodeName:
          $ref: "#/components/schemas/NodeName"
      required:
        - NodeName
      x-ms-discriminator-value: NodeEvent
    NodeEventList:
      description: A list of NodeEvent objects.
      items:
        $ref: "#/components/schemas/NodeEvent"
      type: array
    NodeHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: Information about the health of a Service Fabric node.
      properties:
        Name:
          $ref: "#/components/schemas/NodeName"
    NodeHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for a node, containing information about
        the data and the algorithm used by health store to evaluate health. The
        evaluation is returned only when the aggregated health state is either
        Error or Warning.
      properties:
        NodeName:
          $ref: "#/components/schemas/NodeName"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Node
    NodeHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        NodeInstanceId:
          description: Id of Node instance.
          format: int64
          type: integer
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - NodeInstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: NodeHealthReportExpired
    NodeHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents the health state of a node, which contains the node
        identifier and its aggregated health state.
      properties:
        Id:
          $ref: "#/components/schemas/NodeId"
        Name:
          $ref: "#/components/schemas/NodeName"
    NodeHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: Represents the health state chunk of a node, which contains the node
        name and its aggregated health state.
      properties:
        NodeName:
          $ref: "#/components/schemas/NodeName"
    NodeHealthStateChunkList:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunkList"
      description: The list of node health state chunks in the cluster that respect the
        input filters in the chunk query. Returned by get cluster health state
        chunks query.
      properties:
        Items:
          description: The list of node health state chunks that respect the input filters
            in the chunk query.
          items:
            $ref: "#/components/schemas/NodeHealthStateChunk"
          type: array
    NodeHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a node should be included
        in the returned cluster health chunk.

        One filter can match zero, one or multiple nodes, depending on its properties.

        Can be specified in the cluster health chunk query description.
      properties:
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the nodes. It allows selecting
            nodes if they match the desired health states.

            The possible values are integer value of one of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the cluster aggregated health state.

            If not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching node is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches nodes with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        NodeNameFilter:
          description: >-
            Name of the node that matches the filter. The filter is applied only
            to the specified node, if it exists.

            If the node doesn't exist, no node is returned in the cluster health chunk based on this filter.

            If the node exists, it is included in the cluster health chunk if the health state matches the other filter properties.

            If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
          type: string
    NodeId:
      description: An internal ID used by Service Fabric to uniquely identify a node. Node
        Id is deterministically generated from node name.
      properties:
        Id:
          description: Value of the node Id. This is a 128 bit integer.
          type: string
    NodeIdList:
      description: A list of NodeIds.
      items:
        $ref: "#/components/schemas/NodeId"
      type: array
    NodeImpact:
      description: >-
        Describes the expected impact of a repair to a particular node.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        ImpactLevel:
          description: The level of impact expected.
          enum:
            - Invalid
            - None
            - Restart
            - RemoveData
            - RemoveNode
          type: string
          x-ms-enum:
            modelAsString: true
            name: ImpactLevel
            values:
              - value: Invalid
              - value: None
              - value: Restart
              - value: RemoveData
              - value: RemoveNode
        NodeName:
          description: The name of the impacted node.
          type: string
      required:
        - NodeName
    NodeInfo:
      description: Information about a node in Service Fabric cluster.
      properties:
        CodeVersion:
          description: The version of Service Fabric binaries that the node is running.
          type: string
        ConfigVersion:
          description: The version of Service Fabric cluster manifest that the node is
            using.
          type: string
        FaultDomain:
          description: The fault domain of the node.
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          $ref: "#/components/schemas/NodeId"
        InstanceId:
          description: The ID representing the node instance. While the ID of the node is
            deterministically generated from the node name and remains same
            across restarts, the InstanceId changes every time node restarts.
          type: string
        IpAddressOrFQDN:
          description: The IP address or fully qualified domain name of the node.
          type: string
        IsSeedNode:
          description: Indicates if the node is a seed node or not. Returns true if the
            node is a seed node, otherwise false. A quorum of seed nodes are
            required for proper operation of Service Fabric cluster.
          type: boolean
        IsStopped:
          description: Indicates if the node is stopped by calling stop node API or not.
            Returns true if the node is stopped, otherwise false.
          type: boolean
        Name:
          $ref: "#/components/schemas/NodeName"
        NodeDeactivationInfo:
          $ref: "#/components/schemas/NodeDeactivationInfo"
        NodeDownAt:
          description: Date time in UTC when the node went down. If node has never been
            down then this value will be zero date time.
          format: date-time
          type: string
        NodeDownTimeInSeconds:
          description: Time in seconds since the node has been in NodeStatus Down. Value
            zero indicates node is not NodeStatus Down.
          type: string
        NodeStatus:
          $ref: "#/components/schemas/NodeStatus"
        NodeUpAt:
          description: Date time in UTC when the node came up. If the node has never been
            up then this value will be zero date time.
          format: date-time
          type: string
        NodeUpTimeInSeconds:
          description: Time in seconds since the node has been in NodeStatus Up. Value zero
            indicates that the node is not Up.
          type: string
        Type:
          description: The type of the node.
          type: string
        UpgradeDomain:
          description: The upgrade domain of the node.
          type: string
    NodeLoadInfo:
      description: Information about load on a Service Fabric node. It holds a summary of
        all metrics and their load on a node.
      properties:
        NodeLoadMetricInformation:
          description: List that contains metrics and their load information on this node.
          items:
            $ref: "#/components/schemas/NodeLoadMetricInformation"
          type: array
        NodeName:
          $ref: "#/components/schemas/NodeName"
    NodeLoadMetricInformation:
      description: Represents data structure that contains load information for a certain
        metric on a node.
      properties:
        BufferedNodeCapacityRemaining:
          description: The remaining capacity which is not reserved by NodeBufferPercentage
            for this metric on the node.
          format: double
          type: string
        CurrentNodeLoad:
          description: Current load on the node for this metric.
          format: double
          type: string
        IsCapacityViolation:
          description: Indicates if there is a capacity violation for this metric on the
            node.
          type: boolean
        Name:
          description: Name of the metric for which this load information is provided.
          type: string
        NodeBufferedCapacity:
          description: The value that indicates the reserved capacity for this metric on
            the node.
          type: string
        NodeCapacity:
          description: Total capacity on the node for this metric.
          type: string
        NodeCapacityRemaining:
          description: The remaining capacity on the node for the metric.
          format: double
          type: string
        NodeLoad:
          description: Current load on the node for this metric. In future releases of
            Service Fabric this parameter will be deprecated in favor of
            CurrentNodeLoad.
          type: string
        NodeRemainingBufferedCapacity:
          description: The remaining reserved capacity for this metric on the node. In
            future releases of Service Fabric this parameter will be deprecated
            in favor of BufferedNodeCapacityRemaining.
          type: string
        NodeRemainingCapacity:
          description: The remaining capacity on the node for this metric. In future
            releases of Service Fabric this parameter will be deprecated in
            favor of NodeCapacityRemaining.
          type: string
        PlannedNodeLoadRemoval:
          description: >-
            This value represents the load of the replicas that are planned to
            be removed in the future.

            This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.
          format: double
          type: string
    NodeName:
      description: The name of a Service Fabric node.
      type: string
    NodeNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        NodeInstanceId:
          description: Id of Node instance.
          format: int64
          type: integer
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - NodeInstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: NodeNewHealthReport
    NodeOpenFailedEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Open Failed event.
      properties:
        Error:
          description: Describes the error.
          type: string
        FaultDomain:
          description: Fault domain of Node.
          type: string
        Hostname:
          description: Name of Host.
          type: string
        IpAddressOrFQDN:
          description: IP address or FQDN.
          type: string
        IsSeedNode:
          description: Indicates if it is seed node.
          type: boolean
        NodeId:
          description: Id of Node.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
        NodeVersion:
          description: Version of Node.
          type: string
        UpgradeDomain:
          description: Upgrade domain of Node.
          type: string
      required:
        - NodeInstance
        - NodeId
        - UpgradeDomain
        - FaultDomain
        - IpAddressOrFQDN
        - Hostname
        - IsSeedNode
        - NodeVersion
        - Error
      x-ms-discriminator-value: NodeOpenFailed
    NodeOpenSucceededEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Opened Succeeded event.
      properties:
        FaultDomain:
          description: Fault domain of Node.
          type: string
        Hostname:
          description: Name of Host.
          type: string
        IpAddressOrFQDN:
          description: IP address or FQDN.
          type: string
        IsSeedNode:
          description: Indicates if it is seed node.
          type: boolean
        NodeId:
          description: Id of Node.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
        NodeVersion:
          description: Version of Node.
          type: string
        UpgradeDomain:
          description: Upgrade domain of Node.
          type: string
      required:
        - NodeInstance
        - NodeId
        - UpgradeDomain
        - FaultDomain
        - IpAddressOrFQDN
        - Hostname
        - IsSeedNode
        - NodeVersion
      x-ms-discriminator-value: NodeOpenSucceeded
    NodeRemovedFromClusterEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Removed event.
      properties:
        FabricVersion:
          description: Fabric version.
          type: string
        IpAddressOrFQDN:
          description: IP address or FQDN.
          type: string
        NodeCapacities:
          description: Capacities.
          type: string
        NodeId:
          description: Id of Node.
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
        NodeType:
          description: Type of Node.
          type: string
      required:
        - NodeId
        - NodeInstance
        - NodeType
        - FabricVersion
        - IpAddressOrFQDN
        - NodeCapacities
      x-ms-discriminator-value: NodeRemovedFromCluster
    NodeRepairImpactDescription:
      allOf:
        - $ref: "#/components/schemas/RepairImpactDescriptionBase"
      description: >-
        Describes the expected impact of a repair on a set of nodes.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        NodeImpactList:
          description: The list of nodes impacted by a repair action and their respective
            expected impact.
          items:
            $ref: "#/components/schemas/NodeImpact"
          type: array
      x-ms-discriminator-value: Node
    NodeRepairTargetDescription:
      allOf:
        - $ref: "#/components/schemas/RepairTargetDescriptionBase"
      description: >-
        Describes the list of nodes targeted by a repair action.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        NodeNames:
          description: The list of nodes targeted by a repair action.
          items:
            type: string
          type: array
      x-ms-discriminator-value: Node
    NodeResult:
      description: Contains information about a node that was targeted by a user-induced
        operation.
      properties:
        NodeInstanceId:
          description: The node instance id.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
    NodeStatus:
      description: The status of the node.
      enum:
        - Invalid
        - Up
        - Down
        - Enabling
        - Disabling
        - Disabled
        - Unknown
        - Removed
      type: string
      x-ms-enum:
        modelAsString: true
        name: NodeStatus
        values:
          - description: Indicates the node status is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates the node is up. The value is 1.
            value: Up
          - description: Indicates the node is down. The value is 2.
            value: Down
          - description: Indicates the node is in process of being enabled. The value is 3.
            value: Enabling
          - description: Indicates the node is in the process of being disabled. The value
              is 4.
            value: Disabling
          - description: Indicates the node is disabled. The value is 5.
            value: Disabled
          - description: Indicates the node is unknown. A node would be in Unknown state if
              Service Fabric does not have authoritative information about that
              node. This can happen if the system learns about a node at
              runtime.The value is 6.
            value: Unknown
          - description: Indicates the node is removed. A node would be in Removed state if
              NodeStateRemoved API has been called for this node. In other
              words, Service Fabric has been informed that the persisted state
              on the node has been permanently lost. The value is 7.
            value: Removed
    NodeTransitionProgress:
      description: >-
        Information about an NodeTransition operation.  This class contains an
        OperationState and a NodeTransitionResult.  The NodeTransitionResult is
        not valid until OperationState

        is Completed or Faulted.
      properties:
        NodeTransitionResult:
          $ref: "#/components/schemas/NodeTransitionResult"
        State:
          $ref: "#/components/schemas/OperationState"
    NodeTransitionResult:
      description: Represents information about an operation in a terminal state (Completed
        or Faulted).
      properties:
        ErrorCode:
          description: If OperationState is Completed, this is 0.  If OperationState is
            Faulted, this is an error code indicating the reason.
          format: int32
          type: integer
        NodeResult:
          $ref: "#/components/schemas/NodeResult"
    NodeType:
      description: >-
        The type name of a Service Fabric node.

        Refer to the article [The relationship between Service Fabric node types and Virtual Machine Scale Sets](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-nodetypes) for more details.
      type: string
    NodeUpEvent:
      allOf:
        - $ref: "#/components/schemas/NodeEvent"
      description: Node Up event.
      properties:
        LastNodeDownAt:
          description: Time when Node was last down.
          format: date-time
          type: string
        NodeInstance:
          description: Id of Node instance.
          format: int64
          type: integer
      required:
        - NodeInstance
        - LastNodeDownAt
      x-ms-discriminator-value: NodeUp
    NodeUpgradePhase:
      description: The state of the upgrading node.
      enum:
        - Invalid
        - PreUpgradeSafetyCheck
        - Upgrading
        - PostUpgradeSafetyCheck
      type: string
      x-ms-enum:
        modelAsString: true
        name: NodeUpgradePhase
        values:
          - description: Indicates the upgrade state is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade has not started yet due to pending safety checks. The
              value is 1
            value: PreUpgradeSafetyCheck
          - description: The upgrade is in progress. The value is 2
            value: Upgrading
          - description: The upgrade has completed and post upgrade safety checks are being
              performed. The value is 3
            value: PostUpgradeSafetyCheck
    NodeUpgradeProgressInfo:
      description: Information about the upgrading node and its status
      properties:
        NodeName:
          $ref: "#/components/schemas/NodeName"
        PendingSafetyChecks:
          $ref: "#/components/schemas/SafetyCheckInfoList"
        UpgradePhase:
          $ref: "#/components/schemas/NodeUpgradePhase"
    NodeUpgradeProgressInfoList:
      description: List of upgrading nodes and their statuses
      items:
        $ref: "#/components/schemas/NodeUpgradeProgressInfo"
      type: array
    NodesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for nodes, containing health evaluations
        for each unhealthy node that impacted current aggregated health state.
        Can be returned when evaluating cluster health and the aggregated health
        state is either Error or Warning.
      properties:
        MaxPercentUnhealthyNodes:
          description: Maximum allowed percentage of unhealthy nodes from the
            ClusterHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of nodes found in the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Nodes
    OperatingSystemType:
      description: The operation system required by the code in service.
      enum:
        - Linux
        - Windows
      type: string
      x-ms-enum:
        modelAsString: true
        name: OperatingSystemType
        values:
          - description: The required operating system is Linux.
            value: Linux
          - description: The required operating system is Windows.
            value: Windows
    OperationId:
      description: A GUID that identifies a call to this API.  This is also passed into the
        corresponding GetProgress API.
      format: uuid
      type: string
    OperationState:
      description: The state of the operation.
      enum:
        - Invalid
        - Running
        - RollingBack
        - Completed
        - Faulted
        - Cancelled
        - ForceCancelled
      type: string
      x-ms-enum:
        modelAsString: true
        name: OperationState
        values:
          - description: The operation state is invalid.
            value: Invalid
          - description: The operation is in progress.
            value: Running
          - description: The operation is rolling back internal system state because it
              encountered a fatal error or was cancelled by the
              user.  "RollingBack"     does not refer to user state.  For
              example, if CancelOperation is called on a command of type
              PartitionDataLoss, state of "RollingBack" does not mean service
              data is being restored (assuming the command has progressed far
              enough to cause data loss). It means the system is rolling
              back/cleaning up internal system state associated with the
              command.
            value: RollingBack
          - description: The operation has completed successfully and is no longer running.
            value: Completed
          - description: The operation has failed and is no longer running.
            value: Faulted
          - description: The operation was cancelled by the user using CancelOperation, and
              is no longer running.
            value: Cancelled
          - description: The operation was cancelled by the user using CancelOperation,
              with the force parameter set to true.  It is no longer
              running.  Refer to CancelOperation for more details.
            value: ForceCancelled
    OperationStatus:
      description: Contains the OperationId, OperationState, and OperationType for
        user-induced operations.
      properties:
        OperationId:
          $ref: "#/components/schemas/OperationId"
        State:
          $ref: "#/components/schemas/OperationState"
        Type:
          $ref: "#/components/schemas/OperationType"
    OperationStatusList:
      description: A list of OperationStatus objects.
      items:
        $ref: "#/components/schemas/OperationStatus"
      type: array
    OperationType:
      description: The type of the operation.
      enum:
        - Invalid
        - PartitionDataLoss
        - PartitionQuorumLoss
        - PartitionRestart
        - NodeTransition
      type: string
      x-ms-enum:
        modelAsString: true
        name: OperationType
        values:
          - description: The operation state is invalid.
            value: Invalid
          - description: An operation started using the StartDataLoss API.
            value: PartitionDataLoss
          - description: An operation started using the StartQuorumLoss API.
            value: PartitionQuorumLoss
          - description: An operation started using the StartPartitionRestart API.
            value: PartitionRestart
          - description: An operation started using the StartNodeTransition API.
            value: NodeTransition
    PackageSharingPolicyInfo:
      description: Represents a policy for the package sharing.
      properties:
        PackageSharingScope:
          $ref: "#/components/schemas/PackageSharingPolicyScope"
        SharedPackageName:
          description: The name of code, configuration or data package that should be
            shared.
          type: string
    PackageSharingPolicyInfoList:
      description: List of package sharing policy information.
      items:
        $ref: "#/components/schemas/PackageSharingPolicyInfo"
      type: array
    PackageSharingPolicyScope:
      description: Represents the scope for PackageSharingPolicy. This is specified during
        DeployServicePackageToNode operation.
      enum:
        - None
        - All
        - Code
        - Config
        - Data
      type: string
      x-ms-enum:
        modelAsString: true
        name: PackageSharingPolicyScope
        values:
          - description: No package sharing policy scope. The value is 0.
            value: None
          - description: Share all code, config and data packages from corresponding
              service manifest. The value is 1.
            value: All
          - description: Share all code packages from corresponding service manifest. The
              value is 2.
            value: Code
          - description: Share all config packages from corresponding service manifest. The
              value is 3.
            value: Config
          - description: Share all data packages from corresponding service manifest. The
              value is 4.
            value: Data
    PagedApplicationInfoList:
      description: The list of applications in the cluster. The list is paged when all of
        the results cannot fit in a single message. The next set of results can
        be obtained by executing the same query with the continuation token
        provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of application information.
          items:
            $ref: "#/components/schemas/ApplicationInfo"
          type: array
    PagedApplicationResourceDescriptionList:
      description: The list of application resources. The list is paged when all of the
        results cannot fit in a single message. The next set of results can be
        obtained by executing the same query with the continuation token
        provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/ApplicationResourceDescription"
          type: array
      type: object
    PagedApplicationTypeInfoList:
      description: The list of application types that are provisioned or being provisioned
        in the cluster. The list is paged when all of the results cannot fit in
        a single message. The next set of results can be obtained by executing
        the same query with the continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of application type information.
          items:
            $ref: "#/components/schemas/ApplicationTypeInfo"
          type: array
    PagedBackupConfigurationInfoList:
      description: The list of backup configuration information. The list is paged when all
        of the results cannot fit in a single message. The next set of results
        can be obtained by executing the same query with the continuation token
        provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of backup configuration information.
          items:
            $ref: "#/components/schemas/BackupConfigurationInfo"
          type: array
    PagedBackupEntityList:
      description: The list of backup entities that are being periodically backed. The list
        is paged when all of the results cannot fit in a single message. The
        next set of results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of backup entity information.
          items:
            $ref: "#/components/schemas/BackupEntity"
          type: array
    PagedBackupInfoList:
      description: The list of backups. The list is paged when all of the results cannot
        fit in a single message. The next set of results can be obtained by
        executing the same query with the continuation token provided in this
        list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of backup information.
          items:
            $ref: "#/components/schemas/BackupInfo"
          type: array
    PagedBackupPolicyDescriptionList:
      description: The list of backup policies configured in the cluster. The list is paged
        when all of the results cannot fit in a single message. The next set of
        results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: The list of backup policies information.
          items:
            $ref: "#/components/schemas/BackupPolicyDescription"
          type: array
    PagedComposeDeploymentStatusInfoList:
      description: The list of compose deployments in the cluster. The list is paged when
        all of the results cannot fit in a single message. The next set of
        results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of compose deployment status information.
          items:
            $ref: "#/components/schemas/ComposeDeploymentStatusInfo"
          type: array
    PagedDeployedApplicationInfoList:
      description: >-
        The list of deployed applications in activating, downloading, or active
        states on a node.

        The list is paged when all of the results cannot fit in a single message.

        The next set of results can be obtained by executing the same query with the continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of deployed application information.
          items:
            $ref: "#/components/schemas/DeployedApplicationInfo"
          type: array
    PagedGatewayResourceDescriptionList:
      description: The list of gateway resources. The list is paged when all of the results
        cannot fit in a single message. The next set of results can be obtained
        by executing the same query with the continuation token provided in this
        list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/GatewayResourceDescription"
          type: array
      type: object
    PagedNetworkResourceDescriptionList:
      description: The list of network resources. The list is paged when all of the results
        cannot fit in a single message. The next set of results can be obtained
        by executing the same query with the continuation token provided in this
        list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/NetworkResourceDescription"
          type: array
      type: object
    PagedNodeInfoList:
      description: The list of nodes in the cluster. The list is paged when all of the
        results cannot fit in a single message. The next set of results can be
        obtained by executing the same query with the continuation token
        provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of node information.
          items:
            $ref: "#/components/schemas/NodeInfo"
          type: array
    PagedPropertyInfoList:
      description: The paged list of Service Fabric properties under a given name. The list
        is paged when all of the results cannot fit in a single message. The
        next set of results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        IsConsistent:
          description: Indicates whether any property under the given name has been
            modified during the enumeration. If there was a modification, this
            property value is false.
          type: boolean
        Properties:
          description: List of property information.
          items:
            $ref: "#/components/schemas/PropertyInfo"
          type: array
    PagedReplicaInfoList:
      description: The list of replicas in the cluster for a given partition. The list is
        paged when all of the results cannot fit in a single message. The next
        set of results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of replica information.
          items:
            $ref: "#/components/schemas/ReplicaInfo"
          type: array
    PagedSecretResourceDescriptionList:
      description: The list of secret resources. The list is paged when all of the results
        cannot fit in a single message. The next set of results can be obtained
        by executing the same query with the continuation token provided in this
        list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/SecretResourceDescription"
          type: array
      type: object
    PagedSecretValueResourceDescriptionList:
      description: The list of values of a secret resource, paged if the number of results
        exceeds the limits of a single message. The next set of results can be
        obtained by executing the same query with the continuation token
        provided in the previous page.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/SecretValueResourceDescription"
          type: array
      type: object
    PagedServiceInfoList:
      description: The list of services in the cluster for an application. The list is
        paged when all of the results cannot fit in a single message. The next
        set of results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of service information.
          items:
            $ref: "#/components/schemas/ServiceInfo"
          type: array
    PagedServicePartitionInfoList:
      description: The list of partition in the cluster for a service. The list is paged
        when all of the results cannot fit in a single message. The next set of
        results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of service partition information.
          items:
            $ref: "#/components/schemas/ServicePartitionInfo"
          type: array
    PagedServiceReplicaDescriptionList:
      description: The list of service resource replicas in the cluster. The list is paged
        when all of the results cannot fit in a single message. The next set of
        results can be obtained by executing the same query with the
        continuation token provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: List of service resource replica description.
          items:
            $ref: "#/components/schemas/ServiceReplicaDescription"
          type: array
    PagedServiceResourceDescriptionList:
      description: The list of service resources. The list is paged when all of the results
        cannot fit in a single message. The next set of results can be obtained
        by executing the same query with the continuation token provided in this
        list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/ServiceResourceDescription"
          type: array
      type: object
    PagedSubNameInfoList:
      description: A paged list of Service Fabric names. The list is paged when all of the
        results cannot fit in a single message. The next set of results can be
        obtained by executing the same query with the continuation token
        provided in this list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        IsConsistent:
          description: Indicates whether any name under the given name has been modified
            during the enumeration. If there was a modification, this property
            value is false.
          type: boolean
        SubNames:
          description: List of the child names.
          items:
            $ref: "#/components/schemas/FabricName"
          type: array
    PagedVolumeResourceDescriptionList:
      description: The list of volume resources. The list is paged when all of the results
        cannot fit in a single message. The next set of results can be obtained
        by executing the same query with the continuation token provided in this
        list.
      properties:
        ContinuationToken:
          $ref: "#/components/schemas/ContinuationToken"
        Items:
          description: One page of the list.
          items:
            $ref: "#/components/schemas/VolumeResourceDescription"
          type: array
      type: object
    PartitionAccessStatus:
      description: Specifies the access status of the partition.
      enum:
        - Invalid
        - Granted
        - ReconfigurationPending
        - NotPrimary
        - NoWriteQuorum
      type: string
      x-ms-enum:
        modelAsString: true
        name: PartitionAccessStatus
        values:
          - description: Indicates that the read or write operation access status is not
              valid. This value is not returned to the caller.
            value: Invalid
          - description: Indicates that the read or write operation access is granted and
              the operation is allowed.
            value: Granted
          - description: Indicates that the client should try again later, because a
              reconfiguration is in progress.
            value: ReconfigurationPending
          - description: Indicates that this client request was received by a replica that
              is not a Primary replica.
            value: NotPrimary
          - description: Indicates that no write quorum is available and, therefore, no
              write operation can be accepted.
            value: NoWriteQuorum
    PartitionAnalysisEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionEvent"
      description: Represents the base for all Partition Analysis Events.
      properties:
        Metadata:
          $ref: "#/components/schemas/AnalysisEventMetadata"
      required:
        - Metadata
      x-ms-discriminator-value: PartitionAnalysisEvent
    PartitionBackupConfigurationInfo:
      allOf:
        - $ref: "#/components/schemas/BackupConfigurationInfo"
      description: Backup configuration information, for a specific partition, specifying
        what backup policy is being applied and suspend description, if any.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
      x-ms-discriminator-value: Partition
    PartitionBackupEntity:
      allOf:
        - $ref: "#/components/schemas/BackupEntity"
      description: Identifies the Service Fabric stateful partition which is being backed
        up.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
      x-ms-discriminator-value: Partition
    PartitionDataLossProgress:
      description: Information about a partition data loss user-induced operation.
      properties:
        InvokeDataLossResult:
          $ref: "#/components/schemas/InvokeDataLossResult"
        State:
          $ref: "#/components/schemas/OperationState"
    PartitionEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Partition Events.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
      required:
        - PartitionId
      x-ms-discriminator-value: PartitionEvent
    PartitionEventList:
      description: A list of PartitionEvent objects.
      items:
        $ref: "#/components/schemas/PartitionEvent"
      type: array
    PartitionHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: Information about the health of a Service Fabric partition.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ReplicaHealthStates:
          description: The list of replica health states associated with the partition.
          items:
            $ref: "#/components/schemas/ReplicaHealthState"
          type: array
    PartitionHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for a partition, containing information
        about the data and the algorithm used by health store to evaluate
        health. The evaluation is returned only when the aggregated health state
        is either Error or Warning.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Partition
    PartitionHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionEvent"
      description: Partition Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: PartitionHealthReportExpired
    PartitionHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents the health state of a partition, which contains the partition
        identifier and its aggregated health state.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
    PartitionHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: Represents the health state chunk of a partition, which contains the
        partition ID, its aggregated health state and any replicas that respect
        the filters in the cluster health chunk query description.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ReplicaHealthStateChunks:
          $ref: "#/components/schemas/ReplicaHealthStateChunkList"
    PartitionHealthStateChunkList:
      description: >-
        The list of partition health state chunks that respect the input filters
        in the chunk query description.

        Returned by get cluster health state chunks query as part of the parent application hierarchy.
      properties:
        Items:
          description: The list of partition health state chunks that respect the input
            filters in the chunk query.
          items:
            $ref: "#/components/schemas/PartitionHealthStateChunk"
          type: array
    PartitionHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a partition should be
        included as a child of a service in the cluster health chunk.

        The partitions are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent service and application must be included in the cluster health chunk.

        One filter can match zero, one or multiple partitions, depending on its properties.
      properties:
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the partitions. It allows
            selecting partitions if they match the desired health states.

            The possible values are integer value of one of the following health states. Only partitions that match the filter are returned. All partitions are used to evaluate the cluster aggregated health state.

            If not specified, default value is None, unless the partition ID is specified. If the filter has default value and partition ID is specified, the matching partition is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        PartitionIdFilter:
          description: >-
            ID of the partition that matches the filter. The filter is applied
            only to the specified partition, if it exists.

            If the partition doesn't exist, no partition is returned in the cluster health chunk based on this filter.

            If the partition exists, it is included in the cluster health chunk if it respects the other filter properties.

            If not specified, all partitions that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
          format: uuid
          type: string
        ReplicaFilters:
          description: >-
            Defines a list of filters that specify which replicas to be included
            in the returned cluster health chunk as children of the parent
            partition. The replicas are returned only if the parent partition
            matches a filter.

            If the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition aggregated health state, regardless of the input filters.

            The partition filter may specify multiple replica filters.

            For example, it can specify a filter to return all replicas with health state Error and another filter to always include a replica identified by its replica id.
          items:
            $ref: "#/components/schemas/ReplicaHealthStateFilter"
          type: array
    PartitionId:
      description: An internal ID used by Service Fabric to uniquely identify a partition.
        This is a randomly generated GUID when the service was created. The
        partition ID is unique and does not change for the lifetime of the
        service. If the same service was deleted and recreated the IDs of its
        partitions would be different.
      format: uuid
      type: string
    PartitionInformation:
      description: Information about the partition identity, partitioning scheme and keys
        supported by it.
      discriminator:
        propertyName: ServicePartitionKind
      properties:
        Id:
          $ref: "#/components/schemas/PartitionId"
        ServicePartitionKind:
          $ref: "#/components/schemas/ServicePartitionKind"
      required:
        - ServicePartitionKind
    PartitionInstanceCountScaleMechanism:
      allOf:
        - $ref: "#/components/schemas/ScalingMechanismDescription"
      description: Represents a scaling mechanism for adding or removing instances of
        stateless service partition.
      properties:
        MaxInstanceCount:
          description: Maximum number of instances of the partition.
          type: integer
        MinInstanceCount:
          description: Minimum number of instances of the partition.
          type: integer
        ScaleIncrement:
          description: The number of instances to add or remove during a scaling operation.
          type: integer
      required:
        - MinInstanceCount
        - MaxInstanceCount
        - ScaleIncrement
      x-ms-discriminator-value: PartitionInstanceCount
    PartitionLoadInformation:
      description: >-
        Represents load information for a partition, which contains the primary
        and secondary reported load metrics.

        In case there is no load reported, PartitionLoadInformation will contain the default load for the service of the partition.

        For default loads, LoadMetricReport's LastReportedUtc is set to 0.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        PrimaryLoadMetricReports:
          description: Array of load reports from the primary replica for this partition.
          items:
            $ref: "#/components/schemas/LoadMetricReport"
          type: array
        SecondaryLoadMetricReports:
          description: >-
            Array of aggregated load reports from all secondary replicas for
            this partition.

            Array only contains the latest reported load for each metric.
          items:
            $ref: "#/components/schemas/LoadMetricReport"
          type: array
    PartitionNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionEvent"
      description: Partition Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: PartitionNewHealthReport
    PartitionPrimaryMoveAnalysisEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionAnalysisEvent"
      description: Partition Primary Move Analysis event.
      properties:
        CurrentNode:
          $ref: "#/components/schemas/NodeName"
        MoveReason:
          description: Move reason.
          type: string
        PreviousNode:
          $ref: "#/components/schemas/NodeName"
        RelevantTraces:
          description: Relevant traces.
          type: string
        WhenMoveCompleted:
          description: Time when the move was completed.
          format: date-time
          type: string
      required:
        - WhenMoveCompleted
        - PreviousNode
        - CurrentNode
        - MoveReason
        - RelevantTraces
      x-ms-discriminator-value: PartitionPrimaryMoveAnalysis
    PartitionQuorumLossProgress:
      description: Information about a partition quorum loss user-induced operation.
      properties:
        InvokeQuorumLossResult:
          $ref: "#/components/schemas/InvokeQuorumLossResult"
        State:
          $ref: "#/components/schemas/OperationState"
    PartitionReconfiguredEvent:
      allOf:
        - $ref: "#/components/schemas/PartitionEvent"
      description: Partition Reconfiguration event.
      properties:
        CcEpochConfigVersion:
          description: CcEpochConfig version.
          format: int64
          type: integer
        CcEpochDataLossVersion:
          description: CcEpochDataLoss version.
          format: int64
          type: integer
        NodeInstanceId:
          description: Id of Node instance.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        Phase0DurationMs:
          description: Duration of Phase0 in milli-seconds.
          format: double
          type: number
        Phase1DurationMs:
          description: Duration of Phase1 in milli-seconds.
          format: double
          type: number
        Phase2DurationMs:
          description: Duration of Phase2 in milli-seconds.
          format: double
          type: number
        Phase3DurationMs:
          description: Duration of Phase3 in milli-seconds.
          format: double
          type: number
        Phase4DurationMs:
          description: Duration of Phase4 in milli-seconds.
          format: double
          type: number
        ReconfigType:
          description: Type of reconfiguration.
          type: string
        Result:
          description: Describes reconfiguration result.
          type: string
        ServiceType:
          description: Type of Service.
          type: string
        TotalDurationMs:
          description: Total duration in milli-seconds.
          format: double
          type: number
      required:
        - NodeName
        - NodeInstanceId
        - ServiceType
        - CcEpochDataLossVersion
        - CcEpochConfigVersion
        - ReconfigType
        - Result
        - Phase0DurationMs
        - Phase1DurationMs
        - Phase2DurationMs
        - Phase3DurationMs
        - Phase4DurationMs
        - TotalDurationMs
      x-ms-discriminator-value: PartitionReconfigured
    PartitionRestartProgress:
      description: Information about a partition restart user-induced operation.
      properties:
        RestartPartitionResult:
          $ref: "#/components/schemas/RestartPartitionResult"
        State:
          $ref: "#/components/schemas/OperationState"
    PartitionSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/SafetyCheck"
      description: Represents a safety check for the service partition being performed by
        service fabric before continuing with operations.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
    PartitionScheme:
      description: Enumerates the ways that a service can be partitioned.
      enum:
        - Invalid
        - Singleton
        - UniformInt64Range
        - Named
      type: string
      x-ms-enum:
        modelAsString: true
        name: PartitionScheme
        values:
          - description: Indicates the partition kind is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the partition is based on string names, and is a
              SingletonPartitionSchemeDescription object, The value is 1.
            value: Singleton
          - description: Indicates that the partition is based on Int64 key ranges, and is
              a UniformInt64RangePartitionSchemeDescription object. The value is
              2.
            value: UniformInt64Range
          - description: Indicates that the partition is based on string names, and is a
              NamedPartitionSchemeDescription object. The value is 3
            value: Named
    PartitionSchemeDescription:
      description: Describes how the service is partitioned.
      discriminator:
        propertyName: PartitionScheme
      properties:
        PartitionScheme:
          $ref: "#/components/schemas/PartitionScheme"
      required:
        - PartitionScheme
    PartitionsHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for the partitions of a service, containing
        health evaluations for each unhealthy partition that impacts current
        aggregated health state. Can be returned when evaluating service health
        and the aggregated health state is either Error or Warning.
      properties:
        MaxPercentUnhealthyPartitionsPerService:
          description: Maximum allowed percentage of unhealthy partitions per service from
            the ServiceTypeHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of partitions of the service from the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Partitions
    PrimaryReplicatorStatus:
      allOf:
        - $ref: "#/components/schemas/ReplicatorStatus"
      description: Provides statistics about the Service Fabric Replicator, when it is
        functioning in a Primary role.
      properties:
        RemoteReplicators:
          $ref: "#/components/schemas/RemoteReplicatorStatusList"
        ReplicationQueueStatus:
          $ref: "#/components/schemas/ReplicatorQueueStatus"
      x-ms-discriminator-value: Primary
    PropertyBatchDescriptionList:
      description: Describes a list of property batch operations to be executed. Either all
        or none of the operations will be committed.
      properties:
        Operations:
          description: A list of the property batch operations to be executed.
          items:
            $ref: "#/components/schemas/PropertyBatchOperation"
          type: array
    PropertyBatchInfo:
      description: Information about the results of a property batch.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/PropertyBatchInfoKind"
      required:
        - Kind
    PropertyBatchInfoKind:
      description: The kind of property batch info, determined by the results of a property
        batch. The following are the possible values.
      enum:
        - Invalid
        - Successful
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: PropertyBatchInfoKind
        values:
          - description: Indicates the property batch info is invalid. All Service Fabric
              enumerations have the invalid type.
            value: Invalid
          - description: The property batch succeeded.
            value: Successful
          - description: The property batch failed.
            value: Failed
    PropertyBatchOperation:
      description: Represents the base type for property operations that can be put into a
        batch and submitted.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/PropertyBatchOperationKind"
        PropertyName:
          $ref: "#/components/schemas/PropertyName"
      required:
        - Kind
        - PropertyName
    PropertyBatchOperationKind:
      description: The kind of property batch operation, determined by the operation to be
        performed. The following are the possible values.
      enum:
        - Invalid
        - Put
        - Get
        - CheckExists
        - CheckSequence
        - Delete
        - CheckValue
      type: string
      x-ms-enum:
        modelAsString: true
        name: PropertyBatchOperationKind
        values:
          - description: Indicates the property operation is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The operation will create or edit a property. The value is 1.
            value: Put
          - description: The operation will get a property. The value is 2.
            value: Get
          - description: The operation will check that a property exists or doesn't exists,
              depending on the provided value. The value is 3.
            value: CheckExists
          - description: The operation will ensure that the sequence number is equal to the
              provided value. The value is 4.
            value: CheckSequence
          - description: The operation will delete a property. The value is 5.
            value: Delete
          - description: The operation will ensure that the value of a property is equal to
              the provided value. The value is 7.
            value: CheckValue
    PropertyCustomTypeId:
      description: The property's custom type ID. Using this property, the user is able to
        tag the type of the value of the property.
      type: string
    PropertyDescription:
      description: Description of a Service Fabric property.
      properties:
        CustomTypeId:
          $ref: "#/components/schemas/PropertyCustomTypeId"
        PropertyName:
          $ref: "#/components/schemas/PropertyName"
        Value:
          $ref: "#/components/schemas/PropertyValue"
      required:
        - PropertyName
        - Value
    PropertyInfo:
      description: Information about a Service Fabric property.
      discriminator:
        propertyName: Kind
      properties:
        Metadata:
          $ref: "#/components/schemas/PropertyMetadata"
        Name:
          $ref: "#/components/schemas/PropertyName"
        Value:
          $ref: "#/components/schemas/PropertyValue"
      required:
        - Name
        - Metadata
    PropertyMetadata:
      description: The metadata associated with a property, including the property's name.
      properties:
        CustomTypeId:
          $ref: "#/components/schemas/PropertyCustomTypeId"
        LastModifiedUtcTimestamp:
          description: Represents when the Property was last modified. Only write
            operations will cause this field to be updated.
          format: date-time
          type: string
        Parent:
          $ref: "#/components/schemas/FabricName"
        SequenceNumber:
          description: The version of the property. Every time a property is modified, its
            sequence number is increased.
          type: string
        SizeInBytes:
          description: The length of the serialized property value.
          type: integer
        TypeId:
          $ref: "#/components/schemas/PropertyValueKind"
    PropertyName:
      description: The name of the Service Fabric property.
      type: string
    PropertyValue:
      description: Describes a Service Fabric property value.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/PropertyValueKind"
      required:
        - Kind
    PropertyValueKind:
      description: The kind of property, determined by the type of data. Following are the
        possible values.
      enum:
        - Invalid
        - Binary
        - Int64
        - Double
        - String
        - Guid
      type: string
      x-ms-enum:
        modelAsString: true
        name: PropertyValueKind
        values:
          - description: Indicates the property is invalid. All Service Fabric enumerations
              have the invalid type. The value is zero.
            value: Invalid
          - description: The data inside the property is a binary blob. The value is 1.
            value: Binary
          - description: The data inside the property is an int64. The value is 2.
            value: Int64
          - description: The data inside the property is a double. The value is 3.
            value: Double
          - description: The data inside the property is a string. The value is 4.
            value: String
          - description: The data inside the property is a guid. The value is 5.
            value: Guid
    ProvisionApplicationTypeDescription:
      allOf:
        - $ref: "#/components/schemas/ProvisionApplicationTypeDescriptionBase"
      description: Describes the operation to register or provision an application type
        using an application package uploaded to the Service Fabric image store.
      properties:
        ApplicationPackageCleanupPolicy:
          $ref: "#/components/schemas/ApplicationPackageCleanupPolicy"
        ApplicationTypeBuildPath:
          description: The relative path for the application package in the image store
            specified during the prior upload operation.
          type: string
      required:
        - ApplicationTypeBuildPath
      x-ms-discriminator-value: ImageStorePath
    ProvisionApplicationTypeDescriptionBase:
      description: Represents the type of registration or provision requested, and if the
        operation needs to be asynchronous or not. Supported types of provision
        operations are from either image store or external store.
      discriminator:
        propertyName: Kind
      properties:
        Async:
          description: Indicates whether or not provisioning should occur asynchronously.
            When set to true, the provision operation returns when the request
            is accepted by the system, and the provision operation continues
            without any timeout limit. The default value is false. For large
            application packages, we recommend setting the value to true.
          type: boolean
        Kind:
          $ref: "#/components/schemas/ProvisionApplicationTypeKind"
      required:
        - Kind
        - Async
    ProvisionApplicationTypeKind:
      description: The kind of application type registration or provision requested. The
        application package can be registered or provisioned either from the
        image store or from an external store. Following are the kinds of the
        application type provision.
      enum:
        - Invalid
        - ImageStorePath
        - ExternalStore
      type: string
      x-ms-enum:
        modelAsString: true
        name: ProvisionApplicationTypeKind
        values:
          - description: Indicates that the provision kind is invalid. This value is
              default and should not be used. The value is zero.
            value: Invalid
          - description: Indicates that the provision is for a package that was previously
              uploaded to the image store. The value is 1.
            value: ImageStorePath
          - description: Indicates that the provision is for an application package that
              was previously uploaded to an external store. The application
              package ends with the extension *.sfpkg. The value is 2.
            value: ExternalStore
    ProvisionFabricDescription:
      description: Describes the parameters for provisioning a cluster.
      properties:
        ClusterManifestFilePath:
          description: The cluster manifest file path.
          type: string
        CodeFilePath:
          description: The cluster code package file path.
          type: string
    PutPropertyBatchOperation:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchOperation"
      description: >-
        Puts the specified property under the specified name.

        Note that if one PropertyBatchOperation in a PropertyBatch fails,

        the entire batch fails and cannot be committed in a transactional manner.
      properties:
        CustomTypeId:
          $ref: "#/components/schemas/PropertyCustomTypeId"
        Value:
          $ref: "#/components/schemas/PropertyValue"
      required:
        - Value
      x-ms-discriminator-value: Put
    ReconfigurationInformation:
      description: Information about current reconfiguration like phase, type, previous
        configuration role of replica and reconfiguration start date time.
      properties:
        PreviousConfigurationRole:
          $ref: "#/components/schemas/ReplicaRole"
        ReconfigurationPhase:
          $ref: "#/components/schemas/ReconfigurationPhase"
        ReconfigurationStartTimeUtc:
          description: Start time (in UTC) of the ongoing reconfiguration. If no
            reconfiguration is taking place then this value will be zero
            date-time.
          format: date-time
          type: string
        ReconfigurationType:
          $ref: "#/components/schemas/ReconfigurationType"
    ReconfigurationPhase:
      description: The reconfiguration phase of a replica of a stateful service.
      enum:
        - Unknown
        - None
        - Phase0
        - Phase1
        - Phase2
        - Phase3
        - Phase4
        - AbortPhaseZero
      type: string
      x-ms-enum:
        modelAsString: true
        name: ReconfigurationPhase
        values:
          - description: Indicates the invalid reconfiguration phase.
            value: Unknown
          - description: Specifies that there is no reconfiguration in progress.
            value: None
          - description: Refers to the phase where the reconfiguration is transferring data
              from the previous primary to the new primary.
            value: Phase0
          - description: Refers to the phase where the reconfiguration is querying the
              replica set for the progress.
            value: Phase1
          - description: Refers to the phase where the reconfiguration is ensuring that
              data from the current primary is present in a majority of the
              replica set.
            value: Phase2
          - description: This phase is for internal use only.
            value: Phase3
          - description: This phase is for internal use only.
            value: Phase4
          - description: This phase is for internal use only.
            value: AbortPhaseZero
    ReconfigurationType:
      description: The type of reconfiguration for replica of a stateful service.
      enum:
        - Unknown
        - SwapPrimary
        - Failover
        - Other
      type: string
      x-ms-enum:
        modelAsString: true
        name: ReconfigurationType
        values:
          - description: Indicates the invalid reconfiguration type.
            value: Unknown
          - description: Specifies that the primary replica is being swapped with a
              different replica.
            value: SwapPrimary
          - description: Reconfiguration triggered in response to a primary going down.
              This could be due to many reasons such as primary replica crashing
              etc.
            value: Failover
          - description: Reconfigurations where the primary replica is not changing.
            value: Other
    RegistryCredential:
      description: Credential information to connect to container registry.
      properties:
        PasswordEncrypted:
          description: Indicates that supplied container registry password is encrypted.
          type: boolean
        RegistryPassword:
          description: The password for supplied username to connect to container registry.
          type: string
        RegistryUserName:
          description: The user name to connect to container registry.
          type: string
    ReliableCollectionsRef:
      description: Specifying this parameter adds support for reliable collections
      properties:
        doNotPersistState:
          description: False (the default) if ReliableCollections state is persisted to
            disk as usual. True if you do not want to persist state, in which
            case replication is still enabled and you can use
            ReliableCollections as distributed cache.
          type: boolean
        name:
          description: Name of ReliableCollection resource. Right now it's not used and you
            can use any string.
          type: string
      required:
        - name
    RemoteReplicatorAcknowledgementDetail:
      description: Provides various statistics of the acknowledgements that are being
        received from the remote replicator.
      properties:
        AverageApplyDuration:
          description: Represents the average duration it takes for the remote replicator
            to apply an operation. This usually entails writing the operation to
            disk.
          type: string
        AverageReceiveDuration:
          description: Represents the average duration it takes for the remote replicator
            to receive an operation.
          type: string
        NotReceivedCount:
          description: Represents the number of operations not yet received by a remote
            replicator.
          type: string
        ReceivedAndNotAppliedCount:
          description: Represents the number of operations received and not yet applied by
            a remote replicator.
          type: string
    RemoteReplicatorAcknowledgementStatus:
      description: Provides details about the remote replicators from the primary
        replicator's point of view.
      properties:
        CopyStreamAcknowledgementDetail:
          $ref: "#/components/schemas/RemoteReplicatorAcknowledgementDetail"
        ReplicationStreamAcknowledgementDetail:
          $ref: "#/components/schemas/RemoteReplicatorAcknowledgementDetail"
    RemoteReplicatorStatus:
      description: Represents the state of the secondary replicator from the primary
        replicator’s point of view.
      properties:
        IsInBuild:
          description: A value that indicates whether the secondary replica is in the
            process of being built.
          type: boolean
        LastAcknowledgementProcessedTimeUtc:
          description: >-
            The last timestamp (in UTC) when an acknowledgement from the
            secondary replicator was processed on the primary.

            UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed.
          format: date-time
          type: string
        LastAppliedCopySequenceNumber:
          description: >-
            The highest copy operation sequence number that the secondary has
            applied to its state.

            A value of -1 implies that the secondary has applied all copy operations and the copy process is complete.
          type: string
        LastAppliedReplicationSequenceNumber:
          description: The highest replication operation sequence number that the secondary
            has applied to its state.
          type: string
        LastReceivedCopySequenceNumber:
          description: >-
            The highest copy operation sequence number that the secondary has
            received from the primary.

            A value of -1 implies that the secondary has received all copy operations.
          type: string
        LastReceivedReplicationSequenceNumber:
          description: The highest replication operation sequence number that the secondary
            has received from the primary.
          type: string
        RemoteReplicatorAcknowledgementStatus:
          $ref: "#/components/schemas/RemoteReplicatorAcknowledgementStatus"
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
    RemoteReplicatorStatusList:
      description: List of remote replicator status
      items:
        $ref: "#/components/schemas/RemoteReplicatorStatus"
      type: array
    RepairImpactDescriptionBase:
      description: >-
        Describes the expected impact of executing a repair task.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/RepairImpactKind"
      required:
        - Kind
    RepairImpactKind:
      description: Specifies the kind of the impact. This type supports the Service Fabric
        platform; it is not meant to be used directly from your code.'
      enum:
        - Invalid
        - Node
      type: string
      x-ms-enum:
        modelAsString: true
        name: RepairImpactKind
        values:
          - description: The repair impact is not valid or is of an unknown type.
            value: Invalid
          - description: The repair impact affects a set of Service Fabric nodes.
            value: Node
    RepairTargetDescriptionBase:
      description: >-
        Describes the entities targeted by a repair action.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/RepairTargetKind"
      required:
        - Kind
    RepairTargetKind:
      description: Specifies the kind of the repair target. This type supports the Service
        Fabric platform; it is not meant to be used directly from your code.'
      enum:
        - Invalid
        - Node
      type: string
      x-ms-enum:
        modelAsString: true
        name: RepairTargetKind
        values:
          - description: The repair target is not valid or is of an unknown type.
            value: Invalid
          - description: The repair target is a set of Service Fabric nodes.
            value: Node
    RepairTask:
      description: >-
        Represents a repair task, which includes information about what kind of
        repair was requested, what its progress is, and what its final result
        was.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        Action:
          description: The requested repair action. Must be specified when the repair task
            is created, and is immutable once set.
          type: string
        Description:
          description: >-
            A description of the purpose of the repair task, or other
            informational details.

            May be set when the repair task is created, and is immutable once set.
          type: string
        Executor:
          description: The name of the repair executor. Must be specified in Claimed and
            later states, and is immutable once set.
          type: string
        ExecutorData:
          description: A data string that the repair executor can use to store its internal
            state.
          type: string
        Flags:
          description: >-
            A bitwise-OR of the following values, which gives additional details
            about the status of the repair task.

            - 1 - Cancellation of the repair has been requested

            - 2 - Abort of the repair has been requested

            - 4 - Approval of the repair was forced via client request
          type: integer
        History:
          $ref: "#/components/schemas/RepairTaskHistory"
        Impact:
          $ref: "#/components/schemas/RepairImpactDescriptionBase"
        PerformPreparingHealthCheck:
          description: A value to determine if health checks will be performed when the
            repair task enters the Preparing state.
          type: boolean
        PerformRestoringHealthCheck:
          description: A value to determine if health checks will be performed when the
            repair task enters the Restoring state.
          type: boolean
        PreparingHealthCheckState:
          $ref: "#/components/schemas/RepairTaskHealthCheckState"
        RestoringHealthCheckState:
          $ref: "#/components/schemas/RepairTaskHealthCheckState"
        ResultCode:
          description: >-
            A numeric value providing additional details about the result of the
            repair task execution.

            May be specified in the Restoring and later states, and is immutable once set.
          type: integer
        ResultDetails:
          description: >-
            A string providing additional details about the result of the repair
            task execution.

            May be specified in the Restoring and later states, and is immutable once set.
          type: string
        ResultStatus:
          description: A value describing the overall result of the repair task execution.
            Must be specified in the Restoring and later states, and is
            immutable once set.
          enum:
            - Invalid
            - Succeeded
            - Cancelled
            - Interrupted
            - Failed
            - Pending
          type: string
          x-ms-enum:
            modelAsString: true
            name: ResultStatus
            values:
              - description: Indicates that the repair task result is invalid. All Service
                  Fabric enumerations have the invalid value.
                value: Invalid
              - description: Indicates that the repair task completed execution
                  successfully.
                value: Succeeded
              - description: Indicates that the repair task was cancelled prior to
                  execution.
                value: Cancelled
              - description: Indicates that execution of the repair task was interrupted by
                  a cancellation request after some work had already been
                  performed.
                value: Interrupted
              - description: Indicates that there was a failure during execution of the
                  repair task. Some work may have been performed.
                value: Failed
              - description: Indicates that the repair task result is not yet available,
                  because the repair task has not finished executing.
                value: Pending
        State:
          description: The workflow state of the repair task. Valid initial states are
            Created, Claimed, and Preparing.
          enum:
            - Invalid
            - Created
            - Claimed
            - Preparing
            - Approved
            - Executing
            - Restoring
            - Completed
          type: string
          x-ms-enum:
            modelAsString: true
            name: State
            values:
              - description: Indicates that the repair task state is invalid. All Service
                  Fabric enumerations have the invalid value.
                value: Invalid
              - description: Indicates that the repair task has been created.
                value: Created
              - description: Indicates that the repair task has been claimed by a repair
                  executor.
                value: Claimed
              - description: Indicates that the Repair Manager is preparing the system to
                  handle the impact of the repair task, usually by taking
                  resources offline gracefully.
                value: Preparing
              - description: Indicates that the repair task has been approved by the Repair
                  Manager and is safe to execute.
                value: Approved
              - description: Indicates that execution of the repair task is in progress.
                value: Executing
              - description: Indicates that the Repair Manager is restoring the system to
                  its pre-repair state, usually by bringing resources back
                  online.
                value: Restoring
              - description: Indicates that the repair task has completed, and no further
                  state changes will occur.
                value: Completed
        Target:
          $ref: "#/components/schemas/RepairTargetDescriptionBase"
        TaskId:
          description: The ID of the repair task.
          type: string
        Version:
          description: >-
            The version of the repair task.

            When creating a new repair task, the version must be set to zero.  When updating a repair task,

            the version is used for optimistic concurrency checks.  If the version is

            set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the

            update will only succeed if the actual current version of the repair task matches this value.
          type: string
      required:
        - TaskId
        - Action
        - State
    RepairTaskApproveDescription:
      description: >-
        Describes a request for forced approval of a repair task.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        TaskId:
          description: The ID of the repair task.
          type: string
        Version:
          description: The current version number of the repair task. If non-zero, then the
            request will only succeed if this value matches the actual current
            version of the repair task. If zero, then no version check is
            performed.
          type: string
      required:
        - TaskId
    RepairTaskCancelDescription:
      description: >-
        Describes a request to cancel a repair task.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        RequestAbort:
          description: _True_ if the repair should be stopped as soon as possible even if
            it has already started executing. _False_ if the repair should be
            cancelled only if execution has not yet started.
          type: boolean
        TaskId:
          description: The ID of the repair task.
          type: string
        Version:
          description: The current version number of the repair task. If non-zero, then the
            request will only succeed if this value matches the actual current
            version of the repair task. If zero, then no version check is
            performed.
          type: string
      required:
        - TaskId
    RepairTaskDeleteDescription:
      description: >-
        Describes a request to delete a completed repair task.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        TaskId:
          description: The ID of the completed repair task to be deleted.
          type: string
        Version:
          description: The current version number of the repair task. If non-zero, then the
            request will only succeed if this value matches the actual current
            version of the repair task. If zero, then no version check is
            performed.
          type: string
      required:
        - TaskId
    RepairTaskHealthCheckState:
      description: Specifies the workflow state of a repair task's health check. This type
        supports the Service Fabric platform; it is not meant to be used
        directly from your code.
      enum:
        - NotStarted
        - InProgress
        - Succeeded
        - Skipped
        - TimedOut
      type: string
      x-ms-enum:
        modelAsString: true
        name: RepairTaskHealthCheckState
        values:
          - description: Indicates that the health check has not started.
            value: NotStarted
          - description: Indicates that the health check is in progress.
            value: InProgress
          - description: Indicates that the health check succeeded.
            value: Succeeded
          - description: Indicates that the health check was skipped.
            value: Skipped
          - description: Indicates that the health check timed out.
            value: TimedOut
    RepairTaskHistory:
      description: >-
        A record of the times when the repair task entered each state.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        ApprovedUtcTimestamp:
          description: The time when the repair task entered the Approved state
          format: date-time
          type: string
        ClaimedUtcTimestamp:
          description: The time when the repair task entered the Claimed state.
          format: date-time
          type: string
        CompletedUtcTimestamp:
          description: The time when the repair task entered the Completed state
          format: date-time
          type: string
        CreatedUtcTimestamp:
          description: The time when the repair task entered the Created state.
          format: date-time
          type: string
        ExecutingUtcTimestamp:
          description: The time when the repair task entered the Executing state
          format: date-time
          type: string
        PreparingHealthCheckEndUtcTimestamp:
          description: The time when the repair task completed the health check in the
            Preparing state.
          format: date-time
          type: string
        PreparingHealthCheckStartUtcTimestamp:
          description: The time when the repair task started the health check in the
            Preparing state.
          format: date-time
          type: string
        PreparingUtcTimestamp:
          description: The time when the repair task entered the Preparing state.
          format: date-time
          type: string
        RestoringHealthCheckEndUtcTimestamp:
          description: The time when the repair task completed the health check in the
            Restoring state.
          format: date-time
          type: string
        RestoringHealthCheckStartUtcTimestamp:
          description: The time when the repair task started the health check in the
            Restoring state.
          format: date-time
          type: string
        RestoringUtcTimestamp:
          description: The time when the repair task entered the Restoring state
          format: date-time
          type: string
    RepairTaskList:
      description: A list of repair tasks.
      items:
        $ref: "#/components/schemas/RepairTask"
      type: array
    RepairTaskUpdateHealthPolicyDescription:
      description: >-
        Describes a request to update the health policy of a repair task.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        PerformPreparingHealthCheck:
          description: A boolean indicating if health check is to be performed in the
            Preparing stage of the repair task. If not specified the existing
            value should not be altered. Otherwise, specify the desired new
            value.
          type: boolean
        PerformRestoringHealthCheck:
          description: A boolean indicating if health check is to be performed in the
            Restoring stage of the repair task. If not specified the existing
            value should not be altered. Otherwise, specify the desired new
            value.
          type: boolean
        TaskId:
          description: The ID of the repair task to be updated.
          type: string
        Version:
          description: The current version number of the repair task. If non-zero, then the
            request will only succeed if this value matches the actual current
            value of the repair task. If zero, then no version check is
            performed.
          type: string
      required:
        - TaskId
    RepairTaskUpdateInfo:
      description: >-
        Describes the result of an operation that created or updated a repair
        task.


        This type supports the Service Fabric platform; it is not meant to be used directly from your code.
      properties:
        Version:
          description: The new version of the repair task.
          type: string
      required:
        - Version
    ReplicaEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Replica Events.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId_Integer"
      required:
        - PartitionId
        - ReplicaId
      x-ms-discriminator-value: ReplicaEvent
    ReplicaEventList:
      description: A list of ReplicaEvent objects.
      items:
        $ref: "#/components/schemas/ReplicaEvent"
      type: array
    ReplicaHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: >-
        Represents a base class for stateful service replica or stateless
        service instance health.

        Contains the replica aggregated health state, the health events and the unhealthy evaluations.
      discriminator:
        propertyName: ServiceKind
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      required:
        - ServiceKind
    ReplicaHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for a replica, containing information about
        the data and the algorithm used by health store to evaluate health. The
        evaluation is returned only when the aggregated health state is either
        Error or Warning.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ReplicaOrInstanceId:
          $ref: "#/components/schemas/ReplicaOrInstanceId"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Replica
    ReplicaHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents a base class for stateful service replica or stateless
        service instance health state.
      discriminator:
        propertyName: ServiceKind
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      required:
        - ServiceKind
    ReplicaHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: >-
        Represents the health state chunk of a stateful service replica or a
        stateless service instance.

        The replica health state contains the replica ID and its aggregated health state.
      properties:
        ReplicaOrInstanceId:
          $ref: "#/components/schemas/ReplicaOrInstanceId"
    ReplicaHealthStateChunkList:
      description: The list of replica health state chunks that respect the input filters
        in the chunk query. Returned by get cluster health state chunks query.
      properties:
        Items:
          description: The list of replica health state chunks that respect the input
            filters in the chunk query.
          items:
            $ref: "#/components/schemas/ReplicaHealthStateChunk"
          type: array
    ReplicaHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a replica should be
        included as a child of a partition in the cluster health chunk.

        The replicas are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent partition, service and application must be included in the cluster health chunk.

        One filter can match zero, one or multiple replicas, depending on its properties.
      properties:
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the replicas. It allows selecting
            replicas if they match the desired health states.

            The possible values are integer value of one of the following health states. Only replicas that match the filter are returned. All replicas are used to evaluate the parent partition aggregated health state.

            If not specified, default value is None, unless the replica ID is specified. If the filter has default value and replica ID is specified, the matching replica is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        ReplicaOrInstanceIdFilter:
          description: >-
            Id of the stateful service replica or stateless service instance
            that matches the filter. The filter is applied only to the specified
            replica, if it exists.

            If the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter.

            If the replica exists, it is included in the cluster health chunk if it respects the other filter properties.

            If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
          type: string
    ReplicaId:
      description: Id of a stateful service replica. ReplicaId is used by Service Fabric to
        uniquely identify a replica of a partition. It is unique within a
        partition and does not change for the lifetime of the replica. If a
        replica gets dropped and another replica gets created on the same node
        for the same partition, it will get a different value for the id.
        Sometimes the id of a stateless service instance is also referred as a
        replica id.
      type: string
    ReplicaId_Integer:
      description: Id of a stateful service replica. ReplicaId is used by Service Fabric to
        uniquely identify a replica of a partition. It is unique within a
        partition and does not change for the lifetime of the replica. If a
        replica gets dropped and another replica gets created on the same node
        for the same partition, it will get a different value for the id.
        Sometimes the id of a stateless service instance is also referred as a
        replica id.
      format: int64
      type: integer
    ReplicaInfo:
      description: Information about the identity, status, health, node name, uptime, and
        other details about the replica.
      discriminator:
        propertyName: ServiceKind
      properties:
        Address:
          description: The address the replica is listening on.
          type: string
        HealthState:
          $ref: "#/components/schemas/HealthState"
        LastInBuildDurationInSeconds:
          description: The last in build duration of the replica in seconds.
          type: string
        NodeName:
          $ref: "#/components/schemas/NodeName"
        ReplicaStatus:
          $ref: "#/components/schemas/ReplicaStatus"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      required:
        - ServiceKind
    ReplicaKind:
      description: The role of a replica of a stateful service.
      enum:
        - Invalid
        - KeyValueStore
      type: string
      x-ms-enum:
        modelAsString: true
        name: ReplicaKind
        values:
          - description: Represents an invalid replica kind. The value is zero.
            value: Invalid
          - description: Represents a key value store replica. The value is 1
            value: KeyValueStore
    ReplicaOrInstanceId:
      description: Id of a stateful service replica or a stateless service instance. This
        ID is used in the queries that apply to both stateful and stateless
        services. It is used by Service Fabric to uniquely identify a replica of
        a partition of a stateful service or an instance of a stateless service
        partition. It is unique within a partition and does not change for the
        lifetime of the replica or the instance. If a stateful replica gets
        dropped and another replica gets created on the same node for the same
        partition, it will get a different value for the ID. If a stateless
        instance is failed over on the same or different node it will get a
        different value for the ID.
      type: string
    ReplicaRole:
      description: The role of a replica of a stateful service.
      enum:
        - Unknown
        - None
        - Primary
        - IdleSecondary
        - ActiveSecondary
      type: string
      x-ms-enum:
        modelAsString: true
        name: ReplicaRole
        values:
          - description: Indicates the initial role that a replica is created in. The value
              is zero.
            value: Unknown
          - description: Specifies that the replica has no responsibility in regard to the
              replica set. The value is 1
            value: None
          - description: Refers to the replica in the set on which all read and write
              operations are complete in order to enforce strong consistency
              semantics. Read operations are handled directly by the Primary
              replica, while write operations must be acknowledged by a quorum
              of the replicas in the replica set. There can only be one Primary
              replica in a replica set at a time. The value is 2.
            value: Primary
          - description: Refers to a replica in the set that receives a state transfer from
              the Primary replica to prepare for becoming an active Secondary
              replica. There can be multiple Idle Secondary replicas in a
              replica set at a time. Idle Secondary replicas do not count as a
              part of a write quorum. The value is 3.
            value: IdleSecondary
          - description: Refers to a replica in the set that receives state updates from
              the Primary replica, applies them, and sends acknowledgements
              back. Secondary replicas must participate in the write quorum for
              a replica set. There can be multiple active Secondary replicas in
              a replica set at a time. The number of active Secondary replicas
              is configurable that the reliability subsystem should maintain.
              The value is 4.
            value: ActiveSecondary
    ReplicaStatus:
      description: The status of a replica of a service.
      enum:
        - Invalid
        - InBuild
        - Standby
        - Ready
        - Down
        - Dropped
      type: string
      x-ms-enum:
        modelAsString: true
        name: ReplicaStatus
        values:
          - description: Indicates the replica status is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The replica is being built. This means that a primary replica is
              seeding this replica. The value is 1.
            value: InBuild
          - description: The replica is in standby. The value is 2.
            value: Standby
          - description: The replica is ready. The value is 3.
            value: Ready
          - description: The replica is down. The value is 4.
            value: Down
          - description: Replica is dropped. This means that the replica has been removed
              from the replica set. If it is persisted, its state has been
              deleted. The value is 5.
            value: Dropped
    ReplicaStatusBase:
      description: Information about the replica.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/ReplicaKind"
      required:
        - Kind
    ReplicasHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for replicas, containing health evaluations
        for each unhealthy replica that impacted current aggregated health
        state. Can be returned when evaluating partition health and the
        aggregated health state is either Error or Warning.
      properties:
        MaxPercentUnhealthyReplicasPerPartition:
          description: Maximum allowed percentage of unhealthy replicas per partition from
            the ApplicationHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of replicas in the partition from the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Replicas
    ReplicatorOperationName:
      description: Specifies the operation currently being executed by the Replicator.
      enum:
        - Invalid
        - None
        - Open
        - ChangeRole
        - UpdateEpoch
        - Close
        - Abort
        - OnDataLoss
        - WaitForCatchup
        - Build
      type: string
      x-ms-enum:
        modelAsString: true
        name: ReplicatorOperationName
        values:
          - description: Default value if the replicator is not yet ready.
            value: Invalid
          - description: Replicator is not running any operation from Service Fabric
              perspective.
            value: None
          - description: Replicator is opening.
            value: Open
          - description: Replicator is in the process of changing its role.
            value: ChangeRole
          - description: Due to a change in the replica set, replicator is being updated
              with its Epoch.
            value: UpdateEpoch
          - description: Replicator is closing.
            value: Close
          - description: Replicator is being aborted.
            value: Abort
          - description: Replicator is handling the data loss condition, where the user
              service may potentially be recovering state from an external
              source.
            value: OnDataLoss
          - description: Replicator is waiting for a quorum of replicas to be caught up to
              the latest state.
            value: WaitForCatchup
          - description: Replicator is in the process of building one or more replicas.
            value: Build
    ReplicatorQueueStatus:
      description: >-
        Provides various statistics of the queue used in the service fabric
        replicator.

        Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.

        Depending on the role of the replicator, the properties in this type imply different meanings.
      properties:
        CommittedSequenceNumber:
          description: >-
            On a primary replicator, this is semantically the highest sequence
            number of the operation for which a write quorum of the secondary
            replicas have sent an acknowledgement.

            On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary.
          type: string
        CompletedSequenceNumber:
          description: >-
            On a primary replicator, this is semantically the highest sequence
            number of the operation for which all the secondary replicas have
            sent an acknowledgement.

            On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state.
          type: string
        FirstSequenceNumber:
          description: >-
            On a primary replicator, this is semantically the sequence number of
            the operation for which all the secondary replicas have sent an
            acknowledgement.

            On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
          type: string
        LastSequenceNumber:
          description: Represents the latest sequence number of the operation that is
            available in the queue.
          type: string
        QueueMemorySize:
          description: Represents the virtual memory consumed by the queue in bytes.
          type: string
        QueueUtilizationPercentage:
          description: Represents the utilization of the queue. A value of 0 indicates that
            the queue is empty and a value of 100 indicates the queue is full.
          format: int32
          type: integer
    ReplicatorStatus:
      description: >-
        Represents a base class for primary or secondary replicator status.

        Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/ReplicaRole"
      required:
        - Kind
    ResolvedServiceEndpoint:
      description: Endpoint of a resolved service partition.
      properties:
        Address:
          description: The address of the endpoint. If the endpoint has multiple listeners
            the address is a JSON object with one property per listener with the
            value as the address of that listener.
          type: string
        Kind:
          $ref: "#/components/schemas/ServiceEndpointRole"
    ResolvedServiceEndpointList:
      description: List of resolved service endpoints of a service partition.
      items:
        $ref: "#/components/schemas/ResolvedServiceEndpoint"
      type: array
    ResolvedServicePartition:
      description: Information about a service partition and its associated endpoints.
      properties:
        Endpoints:
          $ref: "#/components/schemas/ResolvedServiceEndpointList"
        Name:
          $ref: "#/components/schemas/ServiceName"
        PartitionInformation:
          $ref: "#/components/schemas/PartitionInformation"
        Version:
          description: The version of this resolved service partition result. This version
            should be passed in the next time the ResolveService call is made
            via the PreviousRspVersion query parameter.
          type: string
      required:
        - Name
        - PartitionInformation
        - Endpoints
        - Version
    ResourceLimits:
      description: This type describes the resource limits for a given container. It
        describes the most amount of resources a container is allowed to use
        before being restarted.
      properties:
        cpu:
          description: CPU limits in cores. At present, only full cores are supported.
          format: double
          type: number
        memoryInGB:
          description: The memory limit in GB.
          format: double
          type: number
    ResourceRequests:
      description: This type describes the requested resources for a given container. It
        describes the least amount of resources required for the container. A
        container can consume more than requested resources up to the specified
        limits before being restarted. Currently, the requested resources are
        treated as limits.
      properties:
        cpu:
          description: Requested number of CPU cores. At present, only full cores are
            supported.
          format: double
          type: number
        memoryInGB:
          description: The memory request in GB for this container.
          format: double
          type: number
      required:
        - memoryInGB
        - cpu
    ResourceRequirements:
      description: This type describes the resource requirements for a container or a
        service.
      properties:
        limits:
          $ref: "#/components/schemas/ResourceLimits"
        requests:
          $ref: "#/components/schemas/ResourceRequests"
      required:
        - requests
    ResourceStatus:
      description: Status of the resource.
      enum:
        - Unknown
        - Ready
        - Upgrading
        - Creating
        - Deleting
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: ResourceStatus
        values:
          - description: Indicates the resource status is unknown. The value is zero.
            value: Unknown
          - description: Indicates the resource is ready. The value is 1.
            value: Ready
          - description: Indicates the resource is upgrading. The value is 2.
            value: Upgrading
          - description: Indicates the resource is being created. The value is 3.
            value: Creating
          - description: Indicates the resource is being deleted. The value is 4.
            value: Deleting
          - description: Indicates the resource is not functional due to persistent
              failures. See statusDetails property for more details. The value
              is 5.
            value: Failed
    RestartDeployedCodePackageDescription:
      description: Defines description for restarting a deployed code package on Service
        Fabric node.
      properties:
        CodePackageInstanceId:
          $ref: "#/components/schemas/CodePackageInstanceId"
        CodePackageName:
          $ref: "#/components/schemas/CodePackageName"
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServicePackageActivationId:
          $ref: "#/components/schemas/ServicePackageActivationId"
      required:
        - ServiceManifestName
        - CodePackageName
        - CodePackageInstanceId
    RestartNodeDescription:
      description: Describes the parameters to restart a Service Fabric node.
      properties:
        CreateFabricDump:
          default: "False"
          description: Specify True to create a dump of the fabric node process. This is
            case-sensitive.
          enum:
            - "False"
            - "True"
          type: string
          x-ms-enum:
            modelAsString: true
            name: CreateFabricDump
            values:
              - value: "False"
              - value: "True"
        NodeInstanceId:
          default: "0"
          description: The instance ID of the target node. If instance ID is specified the
            node is restarted only if it matches with the current instance of
            the node. A default value of "0" would match any instance ID. The
            instance ID can be obtained using get node query.
          type: string
      required:
        - NodeInstanceId
    RestartPartitionResult:
      description: Represents information about an operation in a terminal state (Completed
        or Faulted).
      properties:
        ErrorCode:
          description: If OperationState is Completed, this is 0.  If OperationState is
            Faulted, this is an error code indicating the reason.
          format: int32
          type: integer
        SelectedPartition:
          $ref: "#/components/schemas/SelectedPartition"
    RestorePartitionDescription:
      description: Specifies the parameters needed to trigger a restore of a specific
        partition.
      properties:
        BackupId:
          description: Unique backup ID.
          format: uuid
          type: string
        BackupLocation:
          description: Location of the backup relative to the backup storage specified/
            configured.
          type: string
        BackupStorage:
          $ref: "#/components/schemas/BackupStorageDescription"
      required:
        - BackupId
        - BackupLocation
    RestoreProgressInfo:
      description: Describes the progress of a restore operation on a partition.
      properties:
        FailureError:
          $ref: "#/components/schemas/FabricErrorError"
        RestoreState:
          $ref: "#/components/schemas/RestoreState"
        RestoredEpoch:
          $ref: "#/components/schemas/Epoch"
        RestoredLsn:
          description: Restored LSN.
          type: string
        TimeStampUtc:
          description: Timestamp when operation succeeded or failed.
          format: date-time
          type: string
    RestoreState:
      description: Represents the current state of the partition restore operation.
      enum:
        - Invalid
        - Accepted
        - RestoreInProgress
        - Success
        - Failure
        - Timeout
      type: string
      x-ms-enum:
        modelAsString: true
        name: RestoreState
        values:
          - description: Indicates an invalid restore state. All Service Fabric
              enumerations have the invalid type.
            value: Invalid
          - description: Operation has been validated and accepted. Restore is yet to be
              triggered.
            value: Accepted
          - description: Restore operation has been triggered and is under process.
            value: RestoreInProgress
          - description: Operation completed with success.
            value: Success
          - description: Operation completed with failure.
            value: Failure
          - description: Operation timed out.
            value: Timeout
    ResumeApplicationUpgradeDescription:
      description: Describes the parameters for resuming an unmonitored manual Service
        Fabric application upgrade
      properties:
        UpgradeDomainName:
          description: The name of the upgrade domain in which to resume the upgrade.
          type: string
      required:
        - UpgradeDomainName
    ResumeClusterUpgradeDescription:
      description: Describes the parameters for resuming a cluster upgrade.
      properties:
        UpgradeDomain:
          description: The next upgrade domain for this cluster upgrade.
          type: string
      required:
        - UpgradeDomain
    RetentionPolicyDescription:
      description: Describes the retention policy configured.
      discriminator:
        propertyName: RetentionPolicyType
      properties:
        RetentionPolicyType:
          $ref: "#/components/schemas/RetentionPolicyType"
      required:
        - RetentionPolicyType
    RetentionPolicyType:
      description: The type of retention policy. Currently only "Basic" retention policy is
        supported.
      enum:
        - Basic
        - Invalid
      type: string
      x-ms-enum:
        modelAsString: true
        name: RetentionPolicyType
        values:
          - description: Indicates a basic retention policy type.
            value: Basic
          - description: Indicates an invalid retention policy type.
            value: Invalid
    RollingUpgradeUpdateDescription:
      description: Describes the parameters for updating a rolling upgrade of application
        or cluster.
      properties:
        FailureAction:
          $ref: "#/components/schemas/FailureAction"
        ForceRestart:
          $ref: "#/components/schemas/ForceRestart"
        HealthCheckRetryTimeoutInMilliseconds:
          $ref: "#/components/schemas/HealthCheckRetryTimeout"
        HealthCheckStableDurationInMilliseconds:
          $ref: "#/components/schemas/HealthCheckStableDuration"
        HealthCheckWaitDurationInMilliseconds:
          $ref: "#/components/schemas/HealthCheckWaitDuration"
        ReplicaSetCheckTimeoutInMilliseconds:
          $ref: "#/components/schemas/UpgradeReplicaSetCheckTimeout"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        UpgradeDomainTimeoutInMilliseconds:
          $ref: "#/components/schemas/UpgradeDomainTimeout"
        UpgradeTimeoutInMilliseconds:
          $ref: "#/components/schemas/UpgradeTimeout"
      required:
        - RollingUpgradeMode
    SafetyCheck:
      description: Represents a safety check performed by service fabric before continuing
        with the operations. These checks ensure the availability of the service
        and the reliability of the state.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/SafetyCheckKind"
      required:
        - Kind
    SafetyCheckInfoList:
      description: List of pending safety checks
      items:
        $ref: "#/components/schemas/SafetyCheckWrapper"
      type: array
    SafetyCheckKind:
      description: The kind of safety check performed by service fabric before continuing
        with the operations. These checks ensure the availability of the service
        and the reliability of the state. Following are the kinds of safety
        checks.
      enum:
        - Invalid
        - EnsureSeedNodeQuorum
        - EnsurePartitionQuorum
        - WaitForPrimaryPlacement
        - WaitForPrimarySwap
        - WaitForReconfiguration
        - WaitForInbuildReplica
        - EnsureAvailability
      type: string
      x-ms-enum:
        modelAsString: true
        name: SafetyCheckKind
        values:
          - description: Indicates that the upgrade safety check kind is invalid. All
              Service Fabric enumerations have the invalid type. The value is
              zero.
            value: Invalid
          - description: Indicates that if we bring down the node then this will result in
              global seed node quorum loss. The value is 1.
            value: EnsureSeedNodeQuorum
          - description: Indicates that there is some partition for which if we bring down
              the replica on the node, it will result in quorum loss for that
              partition. The value is 2.
            value: EnsurePartitionQuorum
          - description: Indicates that there is some replica on the node that was moved
              out of this node due to upgrade. Service Fabric is now waiting for
              the primary to be moved back to this node. The value is 3.
            value: WaitForPrimaryPlacement
          - description: Indicates that Service Fabric is waiting for a primary replica to
              be moved out of the node before starting upgrade on that node. The
              value is 4.
            value: WaitForPrimarySwap
          - description: Indicates that there is some replica on the node that is involved
              in a reconfiguration. Service Fabric is waiting for the
              reconfiguration to be complete before staring upgrade on that
              node. The value is 5.
            value: WaitForReconfiguration
          - description: Indicates that there is either a replica on the node that is going
              through copy, or there is a primary replica on the node that is
              copying data to some other replica. In both cases, bringing down
              the replica on the node due to upgrade will abort the copy. The
              value is 6.
            value: WaitForInbuildReplica
          - description: Indicates that there is either a stateless service partition on
              the node having exactly one instance, or there is a primary
              replica on the node for which the partition is quorum loss. In
              both cases, bringing down the replicas due to upgrade will result
              in loss of availability. The value is 7.
            value: EnsureAvailability
    SafetyCheckWrapper:
      description: A wrapper for the safety check object. Safety checks are performed by
        service fabric before continuing with the operations. These checks
        ensure the availability of the service and the reliability of the state.
      properties:
        SafetyCheck:
          $ref: "#/components/schemas/SafetyCheck"
    ScalingMechanismDescription:
      description: Describes the mechanism for performing a scaling operation.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/ScalingMechanismKind"
      required:
        - Kind
    ScalingMechanismKind:
      description: Enumerates the ways that a service can be scaled.
      enum:
        - Invalid
        - PartitionInstanceCount
        - AddRemoveIncrementalNamedPartition
      type: string
      x-ms-enum:
        modelAsString: true
        name: ScalingMechanismKind
        values:
          - description: Indicates the scaling mechanism is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates a mechanism for scaling where new instances are added or
              removed from a partition. The value is 1.
            value: PartitionInstanceCount
          - description: Indicates a mechanism for scaling where new named partitions are
              added or removed from a service. The value is 2.
            value: AddRemoveIncrementalNamedPartition
    ScalingPolicyDescription:
      description: Describes how the scaling should be performed
      properties:
        ScalingMechanism:
          $ref: "#/components/schemas/ScalingMechanismDescription"
        ScalingTrigger:
          $ref: "#/components/schemas/ScalingTriggerDescription"
      required:
        - ScalingTrigger
        - ScalingMechanism
    ScalingPolicyDescriptionList:
      description: A list that describes the scaling policies.
      items:
        $ref: "#/components/schemas/ScalingPolicyDescription"
      type: array
    ScalingTriggerDescription:
      description: Describes the trigger for performing a scaling operation.
      discriminator:
        propertyName: Kind
      properties:
        Kind:
          $ref: "#/components/schemas/ScalingTriggerKind"
      required:
        - Kind
    ScalingTriggerKind:
      description: Enumerates the ways that a service can be scaled.
      enum:
        - Invalid
        - AveragePartitionLoad
        - AverageServiceLoad
      type: string
      x-ms-enum:
        modelAsString: true
        name: ScalingTriggerKind
        values:
          - description: Indicates the scaling trigger is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates a trigger where scaling decisions are made based on
              average load of a partition. The value is 1.
            value: AveragePartitionLoad
          - description: Indicates a trigger where scaling decisions are made based on
              average load of a service. The value is 2.
            value: AverageServiceLoad
    SecondaryActiveReplicatorStatus:
      allOf:
        - $ref: "#/components/schemas/SecondaryReplicatorStatus"
      description: Status of the secondary replicator when it is in active mode and is part
        of the replica set.
      x-ms-discriminator-value: ActiveSecondary
    SecondaryIdleReplicatorStatus:
      allOf:
        - $ref: "#/components/schemas/SecondaryReplicatorStatus"
      description: Status of the secondary replicator when it is in idle mode and is being
        built by the primary.
      x-ms-discriminator-value: IdleSecondary
    SecondaryReplicatorStatus:
      allOf:
        - $ref: "#/components/schemas/ReplicatorStatus"
      description: Provides statistics about the Service Fabric Replicator, when it is
        functioning in a ActiveSecondary role.
      properties:
        CopyQueueStatus:
          $ref: "#/components/schemas/ReplicatorQueueStatus"
        IsInBuild:
          description: Value that indicates whether the replica is currently being built.
          type: boolean
        LastAcknowledgementSentTimeUtc:
          description: >-
            The last time-stamp (UTC) at which an acknowledgment was sent to the
            primary replicator.

            UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.
          format: date-time
          type: string
        LastCopyOperationReceivedTimeUtc:
          description: >-
            The last time-stamp (UTC) at which a copy operation was received
            from the primary.

            UTC 0 represents an invalid value, indicating that a copy operation message was never received.
          format: date-time
          type: string
        LastReplicationOperationReceivedTimeUtc:
          description: >-
            The last time-stamp (UTC) at which a replication operation was
            received from the primary.

            UTC 0 represents an invalid value, indicating that a replication operation message was never received.
          format: date-time
          type: string
        ReplicationQueueStatus:
          $ref: "#/components/schemas/ReplicatorQueueStatus"
    SecretKind:
      description: Describes the kind of secret.
      enum:
        - inlinedValue
      type: string
      x-ms-enum:
        modelAsString: true
        name: SecretKind
        values:
          - description: A simple secret resource whose plaintext value is provided by the
              user.
            value: inlinedValue
    SecretResourceDescription:
      description: This type describes a secret resource.
      properties:
        name:
          $ref: "#/components/schemas/SecretResourceName"
        properties:
          $ref: "#/components/schemas/SecretResourceProperties"
      required:
        - name
        - properties
    SecretResourceName:
      description: Name of the Secret resource.
      type: string
    SecretResourceProperties:
      allOf:
        - $ref: "#/components/schemas/SecretResourcePropertiesBase"
      description: Describes the properties of a secret resource.
      properties:
        contentType:
          description: The type of the content stored in the secret value. The value of
            this property is opaque to Service Fabric. Once set, the value of
            this property cannot be changed.
          type: string
        description:
          description: User readable description of the secret.
          type: string
        status:
          $ref: "#/components/schemas/ResourceStatus"
        statusDetails:
          description: Gives additional information about the current status of the secret.
          readOnly: true
          type: string
      type: object
    SecretResourcePropertiesBase:
      description: This type describes the properties of a secret resource, including its
        kind.
      discriminator:
        propertyName: kind
      properties:
        kind:
          $ref: "#/components/schemas/SecretKind"
      required:
        - kind
      type: object
    SecretValue:
      description: This type represents the unencrypted value of the secret.
      properties:
        value:
          description: The actual value of the secret.
          type: string
      type: object
    SecretValueProperties:
      description: This type describes properties of secret value resource.
      properties:
        value:
          description: The actual value of the secret.
          type: string
      type: object
    SecretValueResourceDescription:
      description: This type describes a value of a secret resource. The name of this
        resource is the version identifier corresponding to this secret value.
      properties:
        name:
          description: Version identifier of the secret value.
          type: string
        properties:
          $ref: "#/components/schemas/SecretValueResourceProperties"
      required:
        - name
        - properties
    SecretValueResourceProperties:
      allOf:
        - $ref: "#/components/schemas/SecretValueProperties"
      description: This type describes properties of a secret value resource.
    SeedNodeSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/SafetyCheck"
      description: Represents a safety check for the seed nodes being performed by service
        fabric before continuing with node level operations.
      x-ms-discriminator-value: EnsureSeedNodeQuorum
    SelectedPartition:
      description: This class returns information about the partition that the user-induced
        operation acted upon.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
    ServiceBackupConfigurationInfo:
      allOf:
        - $ref: "#/components/schemas/BackupConfigurationInfo"
      description: Backup configuration information for a specific Service Fabric service
        specifying what backup policy is being applied and suspend description,
        if any.
      properties:
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
      x-ms-discriminator-value: Service
    ServiceBackupEntity:
      allOf:
        - $ref: "#/components/schemas/BackupEntity"
      description: Identifies the Service Fabric stateful service which is being backed up.
      properties:
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
      x-ms-discriminator-value: Service
    ServiceCorrelationDescription:
      description: Creates a particular correlation between services.
      properties:
        Scheme:
          $ref: "#/components/schemas/ServiceCorrelationScheme"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
      required:
        - Scheme
        - ServiceName
    ServiceCorrelationScheme:
      description: The service correlation scheme.
      enum:
        - Invalid
        - Affinity
        - AlignedAffinity
        - NonAlignedAffinity
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceCorrelationScheme
        values:
          - description: An invalid correlation scheme. Cannot be used. The value is zero.
            value: Invalid
          - description: Indicates that this service has an affinity relationship with
              another service. Provided for backwards compatibility, consider
              preferring the Aligned or NonAlignedAffinity options. The value is
              1.
            value: Affinity
          - description: Aligned affinity ensures that the primaries of the partitions of
              the affinitized services are collocated on the same nodes. This is
              the default and is the same as selecting the Affinity scheme. The
              value is 2.
            value: AlignedAffinity
          - description: Non-Aligned affinity guarantees that all replicas of each service
              will be placed on the same nodes. Unlike Aligned Affinity, this
              does not guarantee that replicas of particular role will be
              collocated. The value is 3.
            value: NonAlignedAffinity
    ServiceCreatedEvent:
      allOf:
        - $ref: "#/components/schemas/ServiceEvent"
      description: Service Created event.
      properties:
        ApplicationName:
          description: Application name.
          type: string
        ApplicationTypeName:
          description: Application type name.
          type: string
        IsStateful:
          description: Indicates if Service is stateful.
          type: boolean
        MinReplicaSetSize:
          description: Minimum size of replicas set.
          format: int32
          type: integer
        PartitionCount:
          description: Number of partitions.
          format: int32
          type: integer
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceInstance:
          description: Id of Service instance.
          format: int64
          type: integer
        ServicePackageVersion:
          description: Version of Service package.
          type: string
        ServiceTypeName:
          description: Service type name.
          type: string
        TargetReplicaSetSize:
          description: Size of target replicas set.
          format: int32
          type: integer
      required:
        - ServiceTypeName
        - ApplicationName
        - ApplicationTypeName
        - ServiceInstance
        - IsStateful
        - PartitionCount
        - TargetReplicaSetSize
        - MinReplicaSetSize
        - ServicePackageVersion
        - PartitionId
      x-ms-discriminator-value: ServiceCreated
    ServiceDeletedEvent:
      allOf:
        - $ref: "#/components/schemas/ServiceEvent"
      description: Service Deleted event.
      properties:
        ApplicationName:
          description: Application name.
          type: string
        ApplicationTypeName:
          description: Application type name.
          type: string
        IsStateful:
          description: Indicates if Service is stateful.
          type: boolean
        MinReplicaSetSize:
          description: Minimum size of replicas set.
          format: int32
          type: integer
        PartitionCount:
          description: Number of partitions.
          format: int32
          type: integer
        ServiceInstance:
          description: Id of Service instance.
          format: int64
          type: integer
        ServicePackageVersion:
          description: Version of Service package.
          type: string
        ServiceTypeName:
          description: Service type name.
          type: string
        TargetReplicaSetSize:
          description: Size of target replicas set.
          format: int32
          type: integer
      required:
        - ServiceTypeName
        - ApplicationName
        - ApplicationTypeName
        - ServiceInstance
        - IsStateful
        - PartitionCount
        - TargetReplicaSetSize
        - MinReplicaSetSize
        - ServicePackageVersion
      x-ms-discriminator-value: ServiceDeleted
    ServiceDescription:
      description: A ServiceDescription contains all of the information necessary to create
        a service.
      discriminator:
        propertyName: ServiceKind
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        CorrelationScheme:
          $ref: "#/components/schemas/CorrelationSchemeList"
        DefaultMoveCost:
          $ref: "#/components/schemas/MoveCost"
        InitializationData:
          $ref: "#/components/schemas/ByteArray"
        IsDefaultMoveCostSpecified:
          description: Indicates if the DefaultMoveCost property is specified.
          type: boolean
        PartitionDescription:
          $ref: "#/components/schemas/PartitionSchemeDescription"
        PlacementConstraints:
          description: 'The placement constraints as a string. Placement constraints are
            boolean expressions on node properties and allow for restricting a
            service to particular nodes based on the service requirements. For
            example, to place a service on nodes where NodeType is blue specify
            the following: "NodeColor == blue)".'
          type: string
        ScalingPolicies:
          $ref: "#/components/schemas/ScalingPolicyDescriptionList"
        ServiceDnsName:
          description: The DNS name of the service. It requires the DNS system service to
            be enabled in Service Fabric cluster.
          type: string
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceLoadMetrics:
          $ref: "#/components/schemas/ServiceLoadMetricsList"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
        ServicePackageActivationMode:
          $ref: "#/components/schemas/ServicePackageActivationMode"
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServicePlacementPoliciesList"
        ServiceTypeName:
          $ref: "#/components/schemas/ServiceTypeName"
      required:
        - ServiceKind
        - ServiceName
        - ServiceTypeName
        - PartitionDescription
    ServiceEndpointRole:
      description: The role of the replica where the endpoint is reported.
      enum:
        - Invalid
        - Stateless
        - StatefulPrimary
        - StatefulSecondary
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceEndpointRole
        values:
          - description: Indicates the service endpoint role is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the service endpoint is of a stateless service. The
              value is 1.
            value: Stateless
          - description: Indicates that the service endpoint is of a primary replica of a
              stateful service. The value is 2.
            value: StatefulPrimary
          - description: Indicates that the service endpoint is of a secondary replica of a
              stateful service. The value is 3.
            value: StatefulSecondary
    ServiceEvent:
      allOf:
        - $ref: "#/components/schemas/FabricEvent"
      description: Represents the base for all Service Events.
      properties:
        ServiceId:
          $ref: "#/components/schemas/ServiceId"
      required:
        - ServiceId
      x-ms-discriminator-value: ServiceEvent
    ServiceEventList:
      description: A list of ServiceEvent objects.
      items:
        $ref: "#/components/schemas/ServiceEvent"
      type: array
    ServiceFromTemplateDescription:
      description: Defines description for creating a Service Fabric service from a
        template defined in the application manifest.
      properties:
        ApplicationName:
          $ref: "#/components/schemas/ApplicationName"
        InitializationData:
          $ref: "#/components/schemas/ByteArray"
        ServiceDnsName:
          description: The DNS name of the service. It requires the DNS system service to
            be enabled in Service Fabric cluster.
          type: string
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
        ServicePackageActivationMode:
          $ref: "#/components/schemas/ServicePackageActivationMode"
        ServiceTypeName:
          $ref: "#/components/schemas/ServiceTypeName"
      required:
        - ApplicationName
        - ServiceName
        - ServiceTypeName
    ServiceHealth:
      allOf:
        - $ref: "#/components/schemas/EntityHealth"
      description: Information about the health of a Service Fabric service.
      properties:
        Name:
          $ref: "#/components/schemas/ServiceName"
        PartitionHealthStates:
          description: The list of partition health states associated with the service.
          items:
            $ref: "#/components/schemas/PartitionHealthState"
          type: array
    ServiceHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for a service, containing information about
        the data and the algorithm used by health store to evaluate health. The
        evaluation is returned only when the aggregated health state is either
        Error or Warning.
      properties:
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Service
    ServiceHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ServiceEvent"
      description: Service Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        InstanceId:
          description: Id of Service instance.
          format: int64
          type: integer
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - InstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: ServiceHealthReportExpired
    ServiceHealthState:
      allOf:
        - $ref: "#/components/schemas/EntityHealthState"
      description: Represents the health state of a service, which contains the service
        identifier and its aggregated health state.
      properties:
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
    ServiceHealthStateChunk:
      allOf:
        - $ref: "#/components/schemas/EntityHealthStateChunk"
      description: Represents the health state chunk of a service, which contains the
        service name, its aggregated health state and any partitions that
        respect the filters in the cluster health chunk query description.
      properties:
        PartitionHealthStateChunks:
          $ref: "#/components/schemas/PartitionHealthStateChunkList"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
    ServiceHealthStateChunkList:
      description: The list of service health state chunks that respect the input filters
        in the chunk query. Returned by get cluster health state chunks query.
      properties:
        Items:
          description: The list of service health state chunks that respect the input
            filters in the chunk query.
          items:
            $ref: "#/components/schemas/ServiceHealthStateChunk"
          type: array
    ServiceHealthStateFilter:
      description: >-
        Defines matching criteria to determine whether a service should be
        included as a child of an application in the cluster health chunk.

        The services are only returned if the parent application matches a filter specified in the cluster health chunk query description.

        One filter can match zero, one or multiple services, depending on its properties.
      properties:
        HealthStateFilter:
          default: 0
          description: >-
            The filter for the health state of the services. It allows selecting
            services if they match the desired health states.

            The possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state.

            If not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned.

            The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator.

            For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).


            - Default - Default value. Matches any HealthState. The value is zero.

            - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1.

            - Ok - Filter that matches input with HealthState value Ok. The value is 2.

            - Warning - Filter that matches input with HealthState value Warning. The value is 4.

            - Error - Filter that matches input with HealthState value Error. The value is 8.

            - All - Filter that matches input with any HealthState value. The value is 65535.
          type: integer
        PartitionFilters:
          description: >-
            Defines a list of filters that specify which partitions to be
            included in the returned cluster health chunk as children of the
            service. The partitions are returned only if the parent service
            matches a filter.

            If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters.

            The service filter may specify multiple partition filters.

            For example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition ID.
          items:
            $ref: "#/components/schemas/PartitionHealthStateFilter"
          type: array
        ServiceNameFilter:
          description: >-
            The name of the service that matches the filter. The filter is
            applied only to the specified service, if it exists.

            If the service doesn't exist, no service is returned in the cluster health chunk based on this filter.

            If the service exists, it is included as the application's child if the health state matches the other filter properties.

            If not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
          type: string
    ServiceId:
      description: >-
        The identity of the service. This ID is an encoded representation of the
        service name. This is used in the REST APIs to identify the service
        resource.

        Starting in version 6.0, hierarchical names are delimited with the "\~" character. For example, if the service name is "fabric:/myapp/app1/svc1",

        the service identity would be "myapp~app1\~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
      type: string
    ServiceIdentity:
      description: Map service identity friendly name to an application identity.
      properties:
        identityRef:
          description: The application identity name.
          type: string
        name:
          description: The identity friendly name.
          type: string
    ServiceInfo:
      description: Information about a Service Fabric service.
      discriminator:
        propertyName: ServiceKind
      properties:
        HealthState:
          $ref: "#/components/schemas/HealthState"
        Id:
          $ref: "#/components/schemas/ServiceId"
        IsServiceGroup:
          description: Whether the service is in a service group.
          type: boolean
        ManifestVersion:
          description: The version of the service manifest.
          type: string
        Name:
          $ref: "#/components/schemas/ServiceName"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServiceStatus:
          $ref: "#/components/schemas/ServiceStatus"
        TypeName:
          $ref: "#/components/schemas/ServiceTypeName"
      required:
        - ServiceKind
    ServiceKind:
      description: The kind of service (Stateless or Stateful).
      enum:
        - Invalid
        - Stateless
        - Stateful
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceKind
        values:
          - description: Indicates the service kind is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Does not use Service Fabric to make its state highly available or
              reliable. The value is 1.
            value: Stateless
          - description: Uses Service Fabric to make its state or part of its state highly
              available and reliable. The value is 2.
            value: Stateful
    ServiceLoadMetricDescription:
      description: Specifies a metric to load balance a service during runtime.
      properties:
        DefaultLoad:
          description: Used only for Stateless services. The default amount of load, as a
            number, that this service creates for this metric.
          type: integer
        Name:
          description: The name of the metric. If the service chooses to report load during
            runtime, the load metric name should match the name that is
            specified in Name exactly. Note that metric names are
            case-sensitive.
          type: string
        PrimaryDefaultLoad:
          description: Used only for Stateful services. The default amount of load, as a
            number, that this service creates for this metric when it is a
            Primary replica.
          type: integer
        SecondaryDefaultLoad:
          description: Used only for Stateful services. The default amount of load, as a
            number, that this service creates for this metric when it is a
            Secondary replica.
          type: integer
        Weight:
          $ref: "#/components/schemas/ServiceLoadMetricWeight"
      required:
        - Name
    ServiceLoadMetricWeight:
      description: Determines the metric weight relative to the other metrics that are
        configured for this service. During runtime, if two metrics end up in
        conflict, the Cluster Resource Manager prefers the metric with the
        higher weight.
      enum:
        - Zero
        - Low
        - Medium
        - High
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceLoadMetricWeight
        values:
          - description: Disables resource balancing for this metric. This value is zero.
            value: Zero
          - description: Specifies the metric weight of the service load as Low. The value
              is 1.
            value: Low
          - description: Specifies the metric weight of the service load as Medium. The
              value is 2.
            value: Medium
          - description: Specifies the metric weight of the service load as High. The value
              is 3.
            value: High
    ServiceLoadMetricsList:
      description: The service load metrics is given as an array of
        ServiceLoadMetricDescription objects.
      items:
        $ref: "#/components/schemas/ServiceLoadMetricDescription"
      type: array
    ServiceManifestName:
      description: The name of the service manifest.
      type: string
    ServiceName:
      description: The full name of the service with 'fabric:' URI scheme.
      type: string
    ServiceNameInfo:
      description: Information about the service name.
      properties:
        Id:
          $ref: "#/components/schemas/ServiceId"
        Name:
          $ref: "#/components/schemas/ServiceName"
    ServiceNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ServiceEvent"
      description: Service Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        InstanceId:
          description: Id of Service instance.
          format: int64
          type: integer
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - InstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: ServiceNewHealthReport
    ServiceOperationName:
      description: Specifies the current active life-cycle operation on a stateful service
        replica or stateless service instance.
      enum:
        - Unknown
        - None
        - Open
        - ChangeRole
        - Close
        - Abort
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceOperationName
        values:
          - description: Reserved for future use.
            value: Unknown
          - description: The service replica or instance is not going through any
              life-cycle changes.
            value: None
          - description: The service replica or instance is being opened.
            value: Open
          - description: The service replica is changing roles.
            value: ChangeRole
          - description: The service replica or instance is being closed.
            value: Close
          - description: The service replica or instance is being aborted.
            value: Abort
    ServicePackageActivationId:
      description: >-
        The ActivationId of a deployed service package. If
        ServicePackageActivationMode specified at the time of creating the
        service

        is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId

        is always an empty string.
      type: string
    ServicePackageActivationMode:
      description: The activation mode of service package to be used for a Service Fabric
        service. This is specified at the time of creating the Service.
      enum:
        - SharedProcess
        - ExclusiveProcess
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServicePackageActivationMode
        values:
          - description: This is the default activation mode. With this activation mode,
              replicas or instances from different partition(s) of service, on a
              given node, will share same activation of service package on a
              node. The value is zero.
            value: SharedProcess
          - description: With this activation mode, each replica or instance of service, on
              a given node, will have its own dedicated activation of service
              package on a node. The value is 1.
            value: ExclusiveProcess
    ServicePartitionInfo:
      description: Information about a partition of a Service Fabric service.
      discriminator:
        propertyName: ServiceKind
      properties:
        HealthState:
          $ref: "#/components/schemas/HealthState"
        PartitionInformation:
          $ref: "#/components/schemas/PartitionInformation"
        PartitionStatus:
          $ref: "#/components/schemas/ServicePartitionStatus"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
      required:
        - ServiceKind
    ServicePartitionKind:
      description: The kind of partitioning scheme used to partition the service.
      enum:
        - Invalid
        - Singleton
        - Int64Range
        - Named
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServicePartitionKind
        values:
          - description: Indicates the partition kind is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that there is only one partition, and
              SingletonPartitionSchemeDescription was specified while creating
              the service. The value is 1.
            value: Singleton
          - description: Indicates that the partition is based on Int64 key ranges, and
              UniformInt64RangePartitionSchemeDescription was specified while
              creating the service. The value is 2.
            value: Int64Range
          - description: Indicates that the partition is based on string names, and
              NamedPartitionInformation  was specified while creating the
              service. The value is 3.
            value: Named
    ServicePartitionStatus:
      description: The status of the service fabric service partition.
      enum:
        - Invalid
        - Ready
        - NotReady
        - InQuorumLoss
        - Reconfiguring
        - Deleting
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServicePartitionStatus
        values:
          - description: Indicates the partition status is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the partition is ready. This means that for a
              stateless service partition there is at least one instance that is
              up and for a stateful service partition the number of ready
              replicas is greater than or equal to the MinReplicaSetSize. The
              value is 1.
            value: Ready
          - description: Indicates that the partition is not ready. This status is returned
              when none of the other states apply. The value is 2.
            value: NotReady
          - description: Indicates that the partition is in quorum loss. This means that
              number of replicas that are up and participating in a replica set
              is less than MinReplicaSetSize for this partition. The value is 3.
            value: InQuorumLoss
          - description: Indicates that the partition is undergoing reconfiguration of its
              replica sets. This can happen due to failover, upgrade, load
              balancing or addition or removal of replicas from the replica set.
              The value is 4.
            value: Reconfiguring
          - description: Indicates that the partition is being deleted. The value is 5.
            value: Deleting
    ServicePlacementInvalidDomainPolicyDescription:
      allOf:
        - $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      description: Describes the policy to be used for placement of a Service Fabric
        service where a particular fault or upgrade domain should not be used
        for placement of the instances or replicas of that service.
      properties:
        DomainName:
          description: The name of the domain that should not be used for placement.
          type: string
      x-ms-discriminator-value: InvalidDomain
    ServicePlacementNonPartiallyPlaceServicePolicyDescription:
      allOf:
        - $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      description: Describes the policy to be used for placement of a Service Fabric
        service where all replicas must be able to be placed in order for any
        replicas to be created.
      x-ms-discriminator-value: NonPartiallyPlaceService
    ServicePlacementPoliciesList:
      description: A list that describes the correlation of the service with other services.
      items:
        $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      type: array
    ServicePlacementPolicyDescription:
      description: Describes the policy to be used for placement of a Service Fabric
        service.
      discriminator:
        propertyName: Type
      properties:
        Type:
          $ref: "#/components/schemas/ServicePlacementPolicyType"
      required:
        - Type
    ServicePlacementPolicyDescriptionList:
      description: List of service placement policy descriptions.
      items:
        $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      type: array
    ServicePlacementPolicyType:
      description: The type of placement policy for a service fabric service. Following are
        the possible values.
      enum:
        - Invalid
        - InvalidDomain
        - RequireDomain
        - PreferPrimaryDomain
        - RequireDomainDistribution
        - NonPartiallyPlaceService
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServicePlacementPolicyType
        values:
          - description: Indicates the type of the placement policy is invalid. All Service
              Fabric enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the ServicePlacementPolicyDescription is of type
              ServicePlacementInvalidDomainPolicyDescription, which indicates
              that a particular fault or upgrade domain cannot be used for
              placement of this service. The value is 1.
            value: InvalidDomain
          - description: Indicates that the ServicePlacementPolicyDescription is of type
              ServicePlacementRequireDomainDistributionPolicyDescription
              indicating that the replicas of the service must be placed in a
              specific domain. The value is 2.
            value: RequireDomain
          - description: Indicates that the ServicePlacementPolicyDescription is of type
              ServicePlacementPreferPrimaryDomainPolicyDescription, which
              indicates that if possible the Primary replica for the partitions
              of the service should be located in a particular domain as an
              optimization. The value is 3.
            value: PreferPrimaryDomain
          - description: Indicates that the ServicePlacementPolicyDescription is of type
              ServicePlacementRequireDomainDistributionPolicyDescription,
              indicating that the system will disallow placement of any two
              replicas from the same partition in the same domain at any time.
              The value is 4.
            value: RequireDomainDistribution
          - description: Indicates that the ServicePlacementPolicyDescription is of type
              ServicePlacementNonPartiallyPlaceServicePolicyDescription, which
              indicates that if possible all replicas of a particular partition
              of the service should be placed atomically. The value is 5.
            value: NonPartiallyPlaceService
    ServicePlacementPreferPrimaryDomainPolicyDescription:
      allOf:
        - $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      description: >-
        Describes the policy to be used for placement of a Service Fabric
        service where the service's Primary replicas should optimally be placed
        in a particular domain.


        This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a service's primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints.
      properties:
        DomainName:
          description: The name of the domain that should used for placement as per this
            policy.
          type: string
      x-ms-discriminator-value: PreferPrimaryDomain
    ServicePlacementRequireDomainDistributionPolicyDescription:
      allOf:
        - $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      description: >-
        Describes the policy to be used for placement of a Service Fabric
        service where two replicas from the same partition should never be
        placed in the same fault or upgrade domain.


        While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not desirable then this policy should be set.
      properties:
        DomainName:
          description: The name of the domain that should used for placement as per this
            policy.
          type: string
      x-ms-discriminator-value: RequireDomainDistribution
    ServicePlacementRequiredDomainPolicyDescription:
      allOf:
        - $ref: "#/components/schemas/ServicePlacementPolicyDescription"
      description: Describes the policy to be used for placement of a Service Fabric
        service where the instances or replicas of that service must be placed
        in a particular domain
      properties:
        DomainName:
          description: The name of the domain that should used for placement as per this
            policy.
          type: string
      x-ms-discriminator-value: RequireDomain
    ServiceProperties:
      description: Describes properties of a service resource.
      properties:
        autoScalingPolicies:
          description: Auto scaling policies
          items:
            $ref: "#/components/schemas/AutoScalingPolicy"
          type: array
        description:
          description: User readable description of the service.
          type: string
        healthState:
          $ref: "#/components/schemas/HealthState"
        identityRefs:
          description: The service identity list.
          items:
            $ref: "#/components/schemas/ServiceIdentity"
          type: array
        replicaCount:
          description: The number of replicas of the service to create. Defaults to 1 if
            not specified.
          type: integer
        status:
          $ref: "#/components/schemas/ResourceStatus"
        statusDetails:
          description: Gives additional information about the current status of the service.
          readOnly: true
          type: string
        unhealthyEvaluation:
          description: When the service's health state is not 'Ok', this additional details
            from service fabric Health Manager for the user to know why the
            service is marked unhealthy.
          readOnly: true
          type: string
    ServiceReplicaDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceReplicaProperties"
      description: Describes a replica of a service resource.
      properties:
        replicaName:
          description: Name of the replica.
          type: string
      required:
        - replicaName
    ServiceReplicaProperties:
      description: Describes the properties of a service replica.
      properties:
        codePackages:
          description: Describes the set of code packages that forms the service. A code
            package describes the container and the properties for running it.
            All the code packages are started together on the same host and
            share the same context (network, process etc.).
          items:
            $ref: "#/components/schemas/ContainerCodePackageProperties"
          type: array
        diagnostics:
          $ref: "#/components/schemas/DiagnosticsRef"
        networkRefs:
          description: The names of the private networks that this service needs to be part
            of.
          items:
            $ref: "#/components/schemas/NetworkRef"
          type: array
        osType:
          $ref: "#/components/schemas/OperatingSystemType"
      required:
        - osType
        - codePackages
    ServiceResourceDescription:
      description: This type describes a service resource.
      properties:
        name:
          $ref: "#/components/schemas/ServiceResourceName"
        properties:
          $ref: "#/components/schemas/ServiceResourceProperties"
      required:
        - name
        - properties
    ServiceResourceName:
      description: Name of the Service resource.
      type: string
    ServiceResourceProperties:
      allOf:
        - $ref: "#/components/schemas/ServiceReplicaProperties"
        - $ref: "#/components/schemas/ServiceProperties"
      description: This type describes properties of a service resource.
    ServiceStatus:
      description: The status of the application.
      enum:
        - Unknown
        - Active
        - Upgrading
        - Deleting
        - Creating
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceStatus
        values:
          - description: Indicates the service status is unknown. The value is zero.
            value: Unknown
          - description: Indicates the service status is active. The value is 1.
            value: Active
          - description: Indicates the service is upgrading. The value is 2.
            value: Upgrading
          - description: Indicates the service is being deleted. The value is 3.
            value: Deleting
          - description: Indicates the service is being created. The value is 4.
            value: Creating
          - description: Indicates creation or deletion was terminated due to persistent
              failures. Another create/delete request can be accepted. The value
              is 5.
            value: Failed
    ServiceTypeDescription:
      description: Describes a service type defined in the service manifest of a
        provisioned application type. The properties the ones defined in the
        service manifest.
      discriminator:
        propertyName: Kind
      properties:
        Extensions:
          $ref: "#/components/schemas/ServiceTypeExtensionDescriptionList"
        IsStateful:
          description: Indicates whether the service type is a stateful service type or a
            stateless service type. This property is true if the service type is
            a stateful service type, false otherwise.
          type: boolean
        Kind:
          $ref: "#/components/schemas/ServiceKind"
        LoadMetrics:
          $ref: "#/components/schemas/ServiceLoadMetricsList"
        PlacementConstraints:
          description: The placement constraint to be used when instantiating this service
            in a Service Fabric cluster.
          type: string
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServicePlacementPolicyDescriptionList"
        ServiceTypeName:
          $ref: "#/components/schemas/ServiceTypeName"
      required:
        - Kind
    ServiceTypeExtensionDescription:
      description: Describes extension of a service type defined in the service manifest.
      properties:
        Key:
          description: The name of the extension.
          type: string
        Value:
          description: The extension value.
          type: string
    ServiceTypeExtensionDescriptionList:
      description: List of service type extensions.
      items:
        $ref: "#/components/schemas/ServiceTypeExtensionDescription"
      type: array
    ServiceTypeHealthPolicy:
      description: Represents the health policy used to evaluate the health of services
        belonging to a service type.
      properties:
        MaxPercentUnhealthyPartitionsPerService:
          default: 0
          description: >-
            The maximum allowed percentage of unhealthy partitions per service.
            Allowed values are Byte values from zero to 100


            The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error.

            If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service.

            The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.
          type: integer
        MaxPercentUnhealthyReplicasPerPartition:
          default: 0
          description: >-
            The maximum allowed percentage of unhealthy replicas per partition.
            Allowed values are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error.

            If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.

            The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition.

            The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.
          type: integer
        MaxPercentUnhealthyServices:
          default: 0
          description: >-
            The maximum allowed percentage of unhealthy services. Allowed values
            are Byte values from zero to 100.


            The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error.

            If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.

            This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type.

            The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.
          type: integer
    ServiceTypeHealthPolicyMap:
      description: >-
        Defines a ServiceTypeHealthPolicy per service type name.


        The entries in the map replace the default service type health policy for each specified service type. For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently. With policy per service type, there's more granular control of the health of the service.


        If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
      items:
        $ref: "#/components/schemas/ServiceTypeHealthPolicyMapItem"
      type: array
    ServiceTypeHealthPolicyMapItem:
      description: Defines an item in ServiceTypeHealthPolicyMap.
      properties:
        Key:
          description: The key of the service type health policy map item. This is the name
            of the service type.
          type: string
        Value:
          $ref: "#/components/schemas/ServiceTypeHealthPolicy"
      required:
        - Key
        - Value
    ServiceTypeInfo:
      description: Information about a service type that is defined in a service manifest
        of a provisioned application type.
      properties:
        IsServiceGroup:
          description: Indicates whether the service is a service group. If it is, the
            property value is true otherwise false.
          type: boolean
        ServiceManifestName:
          $ref: "#/components/schemas/ServiceManifestName"
        ServiceManifestVersion:
          description: The version of the service manifest in which this service type is
            defined.
          type: string
        ServiceTypeDescription:
          $ref: "#/components/schemas/ServiceTypeDescription"
    ServiceTypeInfoList:
      description: List of service type information.
      items:
        $ref: "#/components/schemas/ServiceTypeInfo"
      type: array
    ServiceTypeManifest:
      description: Contains the manifest describing a service type registered as part of an
        application in a Service Fabric cluster.
      properties:
        Manifest:
          description: The XML manifest as a string.
          type: string
    ServiceTypeName:
      description: Name of the service type as specified in the service manifest.
      type: string
    ServiceTypeRegistrationStatus:
      description: The status of the service type registration on the node.
      enum:
        - Invalid
        - Disabled
        - Enabled
        - Registered
      type: string
      x-ms-enum:
        modelAsString: true
        name: ServiceTypeRegistrationStatus
        values:
          - description: Indicates the registration status is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: Indicates that the service type is disabled on this node. A type
              gets disabled when there are too many failures of the code package
              hosting the service type. If the service type is disabled, new
              replicas of that service type will not be placed on the node until
              it is enabled again. The service type is enabled again after the
              process hosting it comes up and re-registers the type or a
              preconfigured time interval has passed. The value is 1.
            value: Disabled
          - description: Indicates that the service type is enabled on this node. Replicas
              of this service type can be placed on this node when the code
              package registers the service type. The value is 2.
            value: Enabled
          - description: Indicates that the service type is enabled and registered on the
              node by a code package. Replicas of this service type can now be
              placed on this node. The value is 3.
            value: Registered
    ServiceUpdateDescription:
      description: A ServiceUpdateDescription contains all of the information necessary to
        update a service.
      discriminator:
        propertyName: ServiceKind
      properties:
        CorrelationScheme:
          $ref: "#/components/schemas/CorrelationSchemeList"
        DefaultMoveCost:
          $ref: "#/components/schemas/MoveCost"
        Flags:
          description: >-
            Flags indicating whether other properties are set. Each of the
            associated properties corresponds to a flag, specified below, which,
            if set, indicate that the property is specified.

            This property can be a combination of those flags obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.


            - None - Does not indicate any other properties are set. The value is zero.

            - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1.

            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2.

            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4.

            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8.

            - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16.

            - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32.

            - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64.

            - Correlation - Indicates the CorrelationScheme property is set. The value is 128.

            - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256.

            - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512.

            - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.
          type: string
        LoadMetrics:
          $ref: "#/components/schemas/ServiceLoadMetricsList"
        PlacementConstraints:
          description: 'The placement constraints as a string. Placement constraints are
            boolean expressions on node properties and allow for restricting a
            service to particular nodes based on the service requirements. For
            example, to place a service on nodes where NodeType is blue specify
            the following: "NodeColor == blue)".'
          type: string
        ScalingPolicies:
          $ref: "#/components/schemas/ScalingPolicyDescriptionList"
        ServiceKind:
          $ref: "#/components/schemas/ServiceKind"
        ServicePlacementPolicies:
          $ref: "#/components/schemas/ServicePlacementPoliciesList"
      required:
        - ServiceKind
    ServicesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for services of a certain service type
        belonging to an application, containing health evaluations for each
        unhealthy service that impacted current aggregated health state. Can be
        returned when evaluating application health and the aggregated health
        state is either Error or Warning.
      properties:
        MaxPercentUnhealthyServices:
          description: Maximum allowed percentage of unhealthy services from the
            ServiceTypeHealthPolicy.
          type: integer
        ServiceTypeName:
          description: Name of the service type of the services.
          type: string
        TotalCount:
          description: Total number of services of the current service type in the
            application from the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: Services
    Setting:
      description: Describes a setting for the container. The setting file path can be
        fetched from environment variable "Fabric_SettingPath". The path for
        Windows container is "C:\\secrets". The path for Linux container is
        "/var/secrets".
      properties:
        name:
          description: The name of the setting.
          type: string
        value:
          description: The value of the setting.
          type: string
    SingletonPartitionInformation:
      allOf:
        - $ref: "#/components/schemas/PartitionInformation"
      description: Information about a partition that is singleton. The services with
        singleton partitioning scheme are effectively non-partitioned. They only
        have one partition.
      x-ms-discriminator-value: Singleton
    SingletonPartitionSchemeDescription:
      allOf:
        - $ref: "#/components/schemas/PartitionSchemeDescription"
      description: Describes the partition scheme of a singleton-partitioned, or
        non-partitioned service.
      x-ms-discriminator-value: Singleton
    StartClusterUpgradeDescription:
      description: Describes the parameters for starting a cluster upgrade.
      properties:
        ApplicationHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationHealthPolicies"
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
        ClusterUpgradeHealthPolicy:
          $ref: "#/components/schemas/ClusterUpgradeHealthPolicyObject"
        CodeVersion:
          description: The cluster code version.
          type: string
        ConfigVersion:
          description: The cluster configuration version.
          type: string
        EnableDeltaHealthEvaluation:
          description: When true, enables delta health evaluation rather than absolute
            health evaluation after completion of each upgrade domain.
          type: boolean
        ForceRestart:
          $ref: "#/components/schemas/ForceRestart"
        MonitoringPolicy:
          $ref: "#/components/schemas/MonitoringPolicyDescription"
        RollingUpgradeMode:
          $ref: "#/components/schemas/UpgradeMode"
        SortOrder:
          $ref: "#/components/schemas/UpgradeSortOrder"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeKind"
        UpgradeReplicaSetCheckTimeoutInSeconds:
          $ref: "#/components/schemas/UpgradeReplicaSetCheckTimeout"
    StartedChaosEvent:
      allOf:
        - $ref: "#/components/schemas/ChaosEvent"
      description: Describes a Chaos event that gets generated when Chaos is started.
      properties:
        ChaosParameters:
          $ref: "#/components/schemas/ChaosParameters"
      x-ms-discriminator-value: Started
    StatefulReplicaHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ReplicaEvent"
      description: Stateful Replica Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        ReplicaInstanceId:
          description: Id of Replica instance.
          format: int64
          type: integer
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ReplicaInstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: StatefulReplicaHealthReportExpired
    StatefulReplicaNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ReplicaEvent"
      description: Stateful Replica Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        ReplicaInstanceId:
          description: Id of Replica instance.
          format: int64
          type: integer
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - ReplicaInstanceId
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: StatefulReplicaNewHealthReport
    StatefulServiceDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceDescription"
      description: Describes a stateful service.
      properties:
        Flags:
          description: >-
            Flags indicating whether other properties are set. Each of the
            associated properties corresponds to a flag, specified below, which,
            if set, indicate that the property is specified.

            This property can be a combination of those flags obtained using bitwise 'OR' operator.

            For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.


            - None - Does not indicate any other properties are set. The value is zero.

            - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1.

            - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2.

            - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4.
          type: integer
        HasPersistedState:
          description: A flag indicating whether this is a persistent service which stores
            states on the local disk. If it is then the value of this property
            is true, if not it is false.
          type: boolean
        MinReplicaSetSize:
          description: The minimum replica set size as a number.
          minimum: 1
          type: integer
        QuorumLossWaitDurationSeconds:
          description: The maximum duration, in seconds, for which a partition is allowed
            to be in a state of quorum loss.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        ReplicaRestartWaitDurationSeconds:
          description: The duration, in seconds, between when a replica goes down and when
            a new replica is created.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        StandByReplicaKeepDurationSeconds:
          description: The definition on how long StandBy replicas should be maintained
            before being removed.
          format: int64
          maximum: 4294967295
          minimum: 0
          type: integer
        TargetReplicaSetSize:
          description: The target replica set size as a number.
          minimum: 1
          type: integer
      required:
        - TargetReplicaSetSize
        - MinReplicaSetSize
        - HasPersistedState
      x-ms-discriminator-value: Stateful
    StatefulServiceInfo:
      allOf:
        - $ref: "#/components/schemas/ServiceInfo"
      description: Information about a stateful Service Fabric service.
      properties:
        HasPersistedState:
          description: Whether the service has persisted state.
          type: boolean
      x-ms-discriminator-value: Stateful
    StatefulServicePartitionInfo:
      allOf:
        - $ref: "#/components/schemas/ServicePartitionInfo"
      description: Information about a partition of a stateful Service Fabric service..
      properties:
        LastQuorumLossDuration:
          description: The duration for which this partition was in quorum loss. If the
            partition is currently in quorum loss, it returns the duration since
            it has been in that state. This field is using ISO8601 format for
            specifying the duration.
          format: duration
          type: string
        MinReplicaSetSize:
          description: The minimum replica set size as a number.
          format: int64
          type: integer
        PrimaryEpoch:
          $ref: "#/components/schemas/Epoch"
        TargetReplicaSetSize:
          description: The target replica set size as a number.
          format: int64
          type: integer
      x-ms-discriminator-value: Stateful
    StatefulServiceReplicaHealth:
      allOf:
        - $ref: "#/components/schemas/ReplicaHealth"
      description: >-
        Represents the health of the stateful service replica.

        Contains the replica aggregated health state, the health events and the unhealthy evaluations.
      properties:
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
      x-ms-discriminator-value: Stateful
    StatefulServiceReplicaHealthState:
      allOf:
        - $ref: "#/components/schemas/ReplicaHealthState"
      description: Represents the health state of the stateful service replica, which
        contains the replica ID and the aggregated health state.
      properties:
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
      x-ms-discriminator-value: Stateful
    StatefulServiceReplicaInfo:
      allOf:
        - $ref: "#/components/schemas/ReplicaInfo"
      description: Represents a stateful service replica. This includes information about
        the identity, role, status, health, node name, uptime, and other details
        about the replica.
      properties:
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
        ReplicaRole:
          $ref: "#/components/schemas/ReplicaRole"
      x-ms-discriminator-value: Stateful
    StatefulServiceTypeDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceTypeDescription"
      description: Describes a stateful service type defined in the service manifest of a
        provisioned application type.
      properties:
        HasPersistedState:
          description: A flag indicating whether this is a persistent service which stores
            states on the local disk. If it is then the value of this property
            is true, if not it is false.
          type: boolean
      x-ms-discriminator-value: Stateful
    StatefulServiceUpdateDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceUpdateDescription"
      description: Describes an update for a stateful service.
      properties:
        MinReplicaSetSize:
          description: The minimum replica set size as a number.
          minimum: 1
          type: integer
        QuorumLossWaitDurationSeconds:
          description: The maximum duration, in seconds, for which a partition is allowed
            to be in a state of quorum loss.
          type: string
        ReplicaRestartWaitDurationSeconds:
          description: The duration, in seconds, between when a replica goes down and when
            a new replica is created.
          type: string
        StandByReplicaKeepDurationSeconds:
          description: The definition on how long StandBy replicas should be maintained
            before being removed.
          type: string
        TargetReplicaSetSize:
          description: The target replica set size as a number.
          minimum: 1
          type: integer
      x-ms-discriminator-value: Stateful
    StatelessReplicaHealthReportExpiredEvent:
      allOf:
        - $ref: "#/components/schemas/ReplicaEvent"
      description: Stateless Replica Health Report Expired event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: StatelessReplicaHealthReportExpired
    StatelessReplicaNewHealthReportEvent:
      allOf:
        - $ref: "#/components/schemas/ReplicaEvent"
      description: Stateless Replica Health Report Created event.
      properties:
        Description:
          description: Description of report.
          type: string
        HealthState:
          description: Describes the property health state.
          type: string
        Property:
          description: Describes the property.
          type: string
        RemoveWhenExpired:
          description: Indicates the removal when it expires.
          type: boolean
        SequenceNumber:
          description: Sequence number of report.
          format: int64
          type: integer
        SourceId:
          description: Id of report source.
          type: string
        SourceUtcTimestamp:
          description: Source time.
          format: date-time
          type: string
        TimeToLiveMs:
          description: Time to live in milli-seconds.
          format: int64
          type: integer
      required:
        - SourceId
        - Property
        - HealthState
        - TimeToLiveMs
        - SequenceNumber
        - Description
        - RemoveWhenExpired
        - SourceUtcTimestamp
      x-ms-discriminator-value: StatelessReplicaNewHealthReport
    StatelessServiceDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceDescription"
      description: Describes a stateless service.
      properties:
        InstanceCount:
          description: The instance count.
          minimum: -1
          type: integer
      required:
        - InstanceCount
      x-ms-discriminator-value: Stateless
    StatelessServiceInfo:
      allOf:
        - $ref: "#/components/schemas/ServiceInfo"
      description: Information about a stateless Service Fabric service.
      x-ms-discriminator-value: Stateless
    StatelessServiceInstanceHealth:
      allOf:
        - $ref: "#/components/schemas/ReplicaHealth"
      description: >-
        Represents the health of the stateless service instance.

        Contains the instance aggregated health state, the health events and the unhealthy evaluations.
      properties:
        InstanceId:
          $ref: "#/components/schemas/InstanceId"
      x-ms-discriminator-value: Stateless
    StatelessServiceInstanceHealthState:
      allOf:
        - $ref: "#/components/schemas/ReplicaHealthState"
      description: Represents the health state of the stateless service instance, which
        contains the instance ID and the aggregated health state.
      properties:
        ReplicaId:
          $ref: "#/components/schemas/ReplicaId"
      x-ms-discriminator-value: Stateless
    StatelessServiceInstanceInfo:
      allOf:
        - $ref: "#/components/schemas/ReplicaInfo"
      description: Represents a stateless service instance. This includes information about
        the identity, status, health, node name, uptime, and other details about
        the instance.
      properties:
        InstanceId:
          $ref: "#/components/schemas/InstanceId"
      x-ms-discriminator-value: Stateless
    StatelessServicePartitionInfo:
      allOf:
        - $ref: "#/components/schemas/ServicePartitionInfo"
      description: Information about a partition of a stateless Service Fabric service.
      properties:
        InstanceCount:
          description: Number of instances of this partition.
          format: int64
          type: integer
      x-ms-discriminator-value: Stateless
    StatelessServiceTypeDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceTypeDescription"
      description: Describes a stateless service type defined in the service manifest of a
        provisioned application type.
      properties:
        UseImplicitHost:
          description: A flag indicating if this type is not implemented and hosted by a
            user service process, but is implicitly hosted by a system created
            process. This value is true for services using the guest executable
            services, false otherwise.
          type: boolean
      x-ms-discriminator-value: Stateless
    StatelessServiceUpdateDescription:
      allOf:
        - $ref: "#/components/schemas/ServiceUpdateDescription"
      description: Describes an update for a stateless service.
      properties:
        InstanceCount:
          description: The instance count.
          minimum: -1
          type: integer
      x-ms-discriminator-value: Stateless
    StoppedChaosEvent:
      allOf:
        - $ref: "#/components/schemas/ChaosEvent"
      description: Describes a Chaos event that gets generated when Chaos stops because
        either the user issued a stop or the time to run was up.
      properties:
        Reason:
          description: Describes why Chaos stopped. Chaos can stop because of StopChaos API
            call or the timeToRun provided in ChaosParameters is over.
          type: string
      x-ms-discriminator-value: Stopped
    StringPropertyValue:
      allOf:
        - $ref: "#/components/schemas/PropertyValue"
      description: Describes a Service Fabric property value of type String.
      properties:
        Data:
          description: The data of the property value.
          type: string
      required:
        - Data
      x-ms-discriminator-value: String
    SuccessfulPropertyBatchInfo:
      allOf:
        - $ref: "#/components/schemas/PropertyBatchInfo"
      description: Derived from PropertyBatchInfo. Represents the property batch
        succeeding. Contains the results of any "Get" operations in the batch.
      properties:
        Properties:
          additionalProperties:
            $ref: "#/components/schemas/PropertyInfo"
          description: A map containing the properties that were requested through any
            "Get" property batch operations. The key represents the index of the
            "Get" operation in the original request, in string form. The value
            is the property. If a property is not found, it will not be in the
            map.
      x-ms-discriminator-value: Successful
    SystemApplicationHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for the fabric:/System application,
        containing information about the data and the algorithm used by health
        store to evaluate health. The evaluation is returned only when the
        aggregated health state of the cluster is either Error or Warning.
      properties:
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
      x-ms-discriminator-value: SystemApplication
    TargetApplicationName:
      description: The name of the target application, including the 'fabric:' URI scheme.
      type: string
    TargetApplicationTypeVersion:
      description: The target application type version (found in the application manifest)
        for the application upgrade.
      type: string
    TargetDeploymentName:
      description: The name of the target deployment.
      type: string
    TcpConfig:
      description: Describes the tcp configuration for external connectivity for this
        network.
      properties:
        destination:
          $ref: "#/components/schemas/GatewayDestination"
        name:
          description: tcp gateway config name.
          type: string
        port:
          description: Specifies the port at which the service endpoint below needs to be
            exposed.
          type: integer
      required:
        - destination
        - name
        - port
      type: object
    TestErrorChaosEvent:
      allOf:
        - $ref: "#/components/schemas/ChaosEvent"
      description: >-
        Describes a Chaos event that gets generated when an unexpected event
        occurs in the Chaos engine.

        For example, due to the cluster snapshot being inconsistent, while faulting an entity, Chaos found that the entity was already faulted -- which would be an unexpected event.
      properties:
        Reason:
          description: Describes why TestErrorChaosEvent was generated. For example, Chaos
            tries to fault a partition but finds that the partition is no longer
            fault tolerant, then a TestErrorEvent gets generated with the reason
            stating that the partition is not fault tolerant.
          type: string
      x-ms-discriminator-value: TestError
    TimeBasedBackupScheduleDescription:
      allOf:
        - $ref: "#/components/schemas/BackupScheduleDescription"
      description: Describes the time based backup schedule.
      properties:
        RunDays:
          $ref: "#/components/schemas/DayOfWeekList"
        RunTimes:
          $ref: "#/components/schemas/TimeList"
        ScheduleFrequencyType:
          $ref: "#/components/schemas/BackupScheduleFrequencyType"
      required:
        - ScheduleFrequencyType
        - RunTimes
      x-ms-discriminator-value: TimeBased
    TimeList:
      description: Represents the list of exact time during the day in ISO8601 format. Like
        '19:00:00' will represent '7PM' during the day. Date specified along
        with time will be ignored.
      items:
        format: date-time
        type: string
      type: array
    TimeOfDay:
      description: Defines an hour and minute of the day specified in 24 hour time.
      properties:
        Hour:
          description: Represents the hour of the day. Value must be between 0 and 23
            inclusive.
          format: int32
          maximum: 23
          minimum: 0
          type: integer
        Minute:
          description: Represents the minute of the hour. Value must be between 0 to 59
            inclusive.
          format: int32
          maximum: 59
          minimum: 0
          type: integer
    TimeRange:
      description: Defines a time range in a 24 hour day specified by a start and end time.
      properties:
        EndTime:
          $ref: "#/components/schemas/TimeOfDay"
        StartTime:
          $ref: "#/components/schemas/TimeOfDay"
    UnhealthyEvaluations:
      description: List of health evaluations that resulted in the current aggregated
        health state.
      items:
        $ref: "#/components/schemas/HealthEvaluationWrapper"
      type: array
    UniformInt64RangePartitionSchemeDescription:
      allOf:
        - $ref: "#/components/schemas/PartitionSchemeDescription"
      description: Describes a partitioning scheme where an integer range is allocated
        evenly across a number of partitions.
      properties:
        Count:
          description: The number of partitions.
          type: integer
        HighKey:
          description: |-
            String indicating the upper bound of the partition key range that
            should be split between the partitions.
          type: string
        LowKey:
          description: |-
            String indicating the lower bound of the partition key range that
            should be split between the partitions.
          type: string
      required:
        - Count
        - LowKey
        - HighKey
      x-ms-discriminator-value: UniformInt64Range
    UnplacedReplicaInformation:
      description: Contains information for an unplaced replica.
      properties:
        PartitionId:
          $ref: "#/components/schemas/PartitionId"
        ServiceName:
          $ref: "#/components/schemas/ServiceName"
        UnplacedReplicaDetails:
          description: List of reasons due to which a replica cannot be placed.
          items:
            type: string
          type: array
    UnprovisionApplicationTypeDescriptionInfo:
      description: Describes the operation to unregister or unprovision an application type
        and its version that was registered with the Service Fabric.
      properties:
        ApplicationTypeVersion:
          $ref: "#/components/schemas/ApplicationTypeVersion"
        Async:
          description: The flag indicating whether or not unprovision should occur
            asynchronously. When set to true, the unprovision operation returns
            when the request is accepted by the system, and the unprovision
            operation continues without any timeout limit. The default value is
            false. However, we recommend setting it to true for large
            application packages that were provisioned.
          type: boolean
      required:
        - ApplicationTypeVersion
    UnprovisionFabricDescription:
      description: Describes the parameters for unprovisioning a cluster.
      properties:
        CodeVersion:
          description: The cluster code package version.
          type: string
        ConfigVersion:
          description: The cluster manifest version.
          type: string
    UpdateClusterUpgradeDescription:
      description: Parameters for updating a cluster upgrade.
      properties:
        ApplicationHealthPolicyMap:
          $ref: "#/components/schemas/ApplicationHealthPolicies"
        ClusterHealthPolicy:
          $ref: "#/components/schemas/ClusterHealthPolicy"
        ClusterUpgradeHealthPolicy:
          $ref: "#/components/schemas/ClusterUpgradeHealthPolicyObject"
        EnableDeltaHealthEvaluation:
          $ref: "#/components/schemas/DeltaHealthEvaluationBool"
        UpdateDescription:
          $ref: "#/components/schemas/RollingUpgradeUpdateDescription"
        UpgradeKind:
          $ref: "#/components/schemas/UpgradeType"
    UpgradeDomainDeltaNodesCheckHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: >-
        Represents health evaluation for delta unhealthy cluster nodes in an
        upgrade domain, containing health evaluations for each unhealthy node
        that impacted current aggregated health state.

        Can be returned during cluster upgrade when cluster aggregated health state is Warning or Error.
      properties:
        BaselineErrorCount:
          description: Number of upgrade domain nodes with aggregated heath state Error in
            the health store at the beginning of the cluster upgrade.
          format: int64
          type: integer
        BaselineTotalCount:
          description: Total number of upgrade domain nodes in the health store at the
            beginning of the cluster upgrade.
          format: int64
          type: integer
        MaxPercentDeltaUnhealthyNodes:
          description: Maximum allowed percentage of upgrade domain delta unhealthy nodes
            from the ClusterUpgradeHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of upgrade domain nodes in the health store.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
        UpgradeDomainName:
          description: Name of the upgrade domain where nodes health is currently evaluated.
          type: string
      x-ms-discriminator-value: UpgradeDomainDeltaNodesCheck
    UpgradeDomainDurationString:
      description: The estimated elapsed time spent processing the current upgrade domain.
      type: string
    UpgradeDomainInfo:
      description: Information about an upgrade domain.
      properties:
        Name:
          $ref: "#/components/schemas/UpgradeDomainName"
        State:
          $ref: "#/components/schemas/UpgradeDomainState"
    UpgradeDomainInfoList:
      description: List of upgrade domains and their statuses.
      items:
        $ref: "#/components/schemas/UpgradeDomainInfo"
      type: array
    UpgradeDomainName:
      description: The name of the upgrade domain
      type: string
    UpgradeDomainNodesHealthEvaluation:
      allOf:
        - $ref: "#/components/schemas/HealthEvaluation"
      description: Represents health evaluation for cluster nodes in an upgrade domain,
        containing health evaluations for each unhealthy node that impacted
        current aggregated health state. Can be returned when evaluating cluster
        health during cluster upgrade and the aggregated health state is either
        Error or Warning.
      properties:
        MaxPercentUnhealthyNodes:
          description: Maximum allowed percentage of unhealthy nodes from the
            ClusterHealthPolicy.
          type: integer
        TotalCount:
          description: Total number of nodes in the current upgrade domain.
          format: int64
          type: integer
        UnhealthyEvaluations:
          $ref: "#/components/schemas/UnhealthyEvaluations"
        UpgradeDomainName:
          description: Name of the upgrade domain where nodes health is currently evaluated.
          type: string
      x-ms-discriminator-value: UpgradeDomainNodes
    UpgradeDomainState:
      description: The state of the upgrade domain.
      enum:
        - Invalid
        - Pending
        - InProgress
        - Completed
      type: string
      x-ms-enum:
        modelAsString: true
        name: UpgradeDomainState
        values:
          - description: Indicates the upgrade domain state is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade domain has not started upgrading yet. The value is 1
            value: Pending
          - description: The upgrade domain is being upgraded but not complete yet. The
              value is 2
            value: InProgress
          - description: The upgrade domain has completed upgrade. The value is 3
            value: Completed
    UpgradeDomainTimeout:
      default: P10675199DT02H48M05.4775807S
      description: The amount of time each upgrade domain has to complete before
        FailureAction is executed. It is first interpreted as a string
        representing an ISO 8601 duration. If that fails, then it is interpreted
        as a number representing the total number of milliseconds.
      type: string
    UpgradeDuration:
      default: PT0H2M0S
      description: The estimated amount of time that the overall upgrade elapsed. It is
        first interpreted as a string representing an ISO 8601 duration. If that
        fails, then it is interpreted as a number representing the total number
        of milliseconds.
      type: string
    UpgradeDurationString:
      description: The estimated elapsed time spent processing the current overall upgrade.
      type: string
    UpgradeFailureTimeUTCString:
      description: The failure time of the upgrade in UTC.
      type: string
    UpgradeKind:
      default: Rolling
      description: The kind of upgrade out of the following possible values.
      enum:
        - Invalid
        - Rolling
      type: string
      x-ms-enum:
        modelAsString: true
        name: UpgradeKind
        values:
          - description: Indicates the upgrade kind is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade progresses one upgrade domain at a time. The value is 1
            value: Rolling
    UpgradeMode:
      default: UnmonitoredAuto
      description: The mode used to monitor health during a rolling upgrade. The values are
        UnmonitoredAuto, UnmonitoredManual, and Monitored.
      enum:
        - Invalid
        - UnmonitoredAuto
        - UnmonitoredManual
        - Monitored
      type: string
      x-ms-enum:
        modelAsString: true
        name: UpgradeMode
        values:
          - description: Indicates the upgrade mode is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade will proceed automatically without performing any
              health monitoring. The value is 1
            value: UnmonitoredAuto
          - description: The upgrade will stop after completing each upgrade domain, giving
              the opportunity to manually monitor health before proceeding. The
              value is 2
            value: UnmonitoredManual
          - description: The upgrade will stop after completing each upgrade domain and
              automatically monitor health before proceeding. The value is 3
            value: Monitored
    UpgradeOrchestrationServiceState:
      description: Service state of Service Fabric Upgrade Orchestration Service.
      properties:
        ServiceState:
          description: The state of Service Fabric Upgrade Orchestration Service.
          type: string
    UpgradeOrchestrationServiceStateSummary:
      description: Service state summary of Service Fabric Upgrade Orchestration Service.
      properties:
        CurrentCodeVersion:
          description: The current code version of the cluster.
          type: string
        CurrentManifestVersion:
          description: The current manifest version of the cluster.
          type: string
        PendingUpgradeType:
          description: The type of the pending upgrade of the cluster.
          type: string
        TargetCodeVersion:
          description: The target code version of  the cluster.
          type: string
        TargetManifestVersion:
          description: The target manifest version of the cluster.
          type: string
    UpgradeReplicaSetCheckTimeout:
      default: 42949672925
      description: The maximum amount of time to block processing of an upgrade domain and
        prevent loss of availability when there are unexpected issues. When this
        timeout expires, processing of the upgrade domain will proceed
        regardless of availability loss issues. The timeout is reset at the
        start of each upgrade domain. Valid values are between 0 and 42949672925
        inclusive. (unsigned 32-bit integer).
      format: int64
      type: integer
    UpgradeSortOrder:
      default: Default
      description: Defines the order in which an upgrade proceeds through the cluster.
      enum:
        - Invalid
        - Default
        - Numeric
        - Lexicographical
        - ReverseNumeric
        - ReverseLexicographical
      type: string
      x-ms-enum:
        modelAsString: true
        name: UpgradeSortOrder
        values:
          - description: Indicates that this sort order is not valid. All Service Fabric
              enumerations have the invalid type. The value is 0.
            value: Invalid
          - description: Indicates that the default sort order (as specified in cluster
              manifest) will be used. The value is 1.
            value: Default
          - description: Indicates that forward numeric sort order (UD names sorted as
              numbers) will be used. The value is 2.
            value: Numeric
          - description: Indicates that forward lexicographical sort order (UD names sorted
              as strings) will be used. The value is 3.
            value: Lexicographical
          - description: Indicates that reverse numeric sort order (UD names sorted as
              numbers) will be used. The value is 4.
            value: ReverseNumeric
          - description: Indicates that reverse lexicographical sort order (UD names sorted
              as strings) will be used. The value is 5.
            value: ReverseLexicographical
    UpgradeStartTimeUTCString:
      description: The start time of the upgrade in UTC.
      type: string
    UpgradeState:
      description: The state of the upgrade domain.
      enum:
        - Invalid
        - RollingBackInProgress
        - RollingBackCompleted
        - RollingForwardPending
        - RollingForwardInProgress
        - RollingForwardCompleted
        - Failed
      type: string
      x-ms-enum:
        modelAsString: true
        name: UpgradeState
        values:
          - description: Indicates the upgrade state is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade is rolling back to the previous version but is not
              complete yet. The value is 1
            value: RollingBackInProgress
          - description: The upgrade has finished rolling back. The value is 2
            value: RollingBackCompleted
          - description: The current upgrade domain has finished upgrading. The overall
              upgrade is waiting for an explicit move next request in
              UnmonitoredManual mode or performing health checks in Monitored
              mode. The value is 3
            value: RollingForwardPending
          - description: The upgrade is rolling forward to the target version but is not
              complete yet. The value is 4
            value: RollingForwardInProgress
          - description: The upgrade has finished rolling forward. The value is 5
            value: RollingForwardCompleted
          - description: The upgrade has failed and is unable to execute FailureAction. The
              value is 6
            value: Failed
    UpgradeTimeout:
      default: P10675199DT02H48M05.4775807S
      description: The amount of time the overall upgrade has to complete before
        FailureAction is executed. It is first interpreted as a string
        representing an ISO 8601 duration. If that fails, then it is interpreted
        as a number representing the total number of milliseconds.
      type: string
    UpgradeType:
      default: Rolling
      description: The type of upgrade out of the following possible values.
      enum:
        - Invalid
        - Rolling
        - Rolling_ForceRestart
      type: string
      x-ms-enum:
        modelAsString: true
        name: UpgradeType
        values:
          - description: Indicates the upgrade kind is invalid. All Service Fabric
              enumerations have the invalid type. The value is zero.
            value: Invalid
          - description: The upgrade progresses one upgrade domain at a time. The value is
              1.
            value: Rolling
          - description: The upgrade gets restarted by force. The value is 2.
            value: Rolling_ForceRestart
    UploadChunkRange:
      description: Information about which portion of the file to upload.
      properties:
        EndPosition:
          description: The end position of the portion of the file. It's represented by the
            number of bytes.
          type: string
        StartPosition:
          description: The start position of the portion of the file. It's represented by
            the number of bytes.
          type: string
    UploadSession:
      description: Information about a image store upload session
      properties:
        UploadSessions:
          description: When querying upload session by upload session ID, the result
            contains only one upload session. When querying upload session by
            image store relative path, the result might contain multiple upload
            sessions.
          items:
            $ref: "#/components/schemas/UploadSessionInfo"
          type: array
    UploadSessionInfo:
      description: Information about an image store upload session. A session is associated
        with a relative path in the image store.
      properties:
        ExpectedRanges:
          description: List of chunk ranges that image store has not received yet.
          items:
            $ref: "#/components/schemas/UploadChunkRange"
          type: array
        FileSize:
          description: The size in bytes of the uploading file.
          type: string
        ModifiedDate:
          description: The date and time when the upload session was last modified.
          format: date-time
          type: string
        SessionId:
          description: A unique ID of the upload session. A session ID can be reused only
            if the session was committed or removed.
          format: uuid
          type: string
        StoreRelativePath:
          description: The remote location within image store. This path is relative to the
            image store root.
          type: string
    UserAssignedIdentityMap:
      additionalProperties:
        $ref: "#/components/schemas/IdentityItemDescription"
      description: Defines a map that contains user assigned identities.
      type: object
    ValidationFailedChaosEvent:
      allOf:
        - $ref: "#/components/schemas/ChaosEvent"
      description: Chaos event corresponding to a failure during validation.
      properties:
        Reason:
          description: Describes why the ValidationFailedChaosEvent was generated. This may
            happen because more than MaxPercentUnhealthyNodes are unhealthy for
            more than MaxClusterStabilizationTimeout. This reason will be in the
            Reason property of the ValidationFailedChaosEvent as a string.
          type: string
      x-ms-discriminator-value: ValidationFailed
    VolumeProperties:
      description: Describes properties of a volume resource.
      properties:
        azureFileParameters:
          $ref: "#/components/schemas/VolumeProviderParametersAzureFile"
        description:
          description: User readable description of the volume.
          type: string
        provider:
          $ref: "#/components/schemas/VolumeProvider"
        status:
          $ref: "#/components/schemas/ResourceStatus"
        statusDetails:
          description: Gives additional information about the current status of the volume.
          readOnly: true
          type: string
      required:
        - provider
    VolumeProvider:
      description: Describes the provider of the volume resource.
      enum:
        - SFAzureFile
      type: string
      x-ms-enum:
        modelAsString: true
        name: VolumeProvider
        values:
          - description: Provides volumes that are backed by Azure Files.
            value: SFAzureFile
    VolumeProviderParametersAzureFile:
      description: This type describes a volume provided by an Azure Files file share.
      properties:
        accountKey:
          description: Access key of the Azure storage account for the File Share.
          type: string
        accountName:
          description: Name of the Azure storage account for the File Share.
          type: string
        shareName:
          description: Name of the Azure Files file share that provides storage for the
            volume.
          type: string
      required:
        - accountName
        - shareName
    VolumeReference:
      description: Describes a reference to a volume resource.
      properties:
        destinationPath:
          description: The path within the container at which the volume should be mounted.
            Only valid path characters are allowed.
          type: string
        name:
          description: Name of the volume being referenced.
          type: string
        readOnly:
          description: The flag indicating whether the volume is read only. Default is
            'false'.
          type: boolean
      required:
        - name
        - destinationPath
      type: object
    VolumeResourceDescription:
      description: This type describes a volume resource.
      properties:
        name:
          $ref: "#/components/schemas/VolumeResourceName"
        properties:
          $ref: "#/components/schemas/VolumeProperties"
      required:
        - name
        - properties
    VolumeResourceName:
      description: Name of the Volume resource.
      type: string
    WaitForInbuildReplicaSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/PartitionSafetyCheck"
      description: Safety check that waits for the replica build operation to finish. This
        indicates that there is a replica that is going through the copy or is
        providing data for building another replica. Bring the node down will
        abort this copy operation which are typically expensive involving data
        movements.
      x-ms-discriminator-value: WaitForInbuildReplica
    WaitForPrimaryPlacementSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/PartitionSafetyCheck"
      description: Safety check that waits for the primary replica that was moved out of
        the node due to upgrade to be placed back again on that node.
      x-ms-discriminator-value: WaitForPrimaryPlacement
    WaitForPrimarySwapSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/PartitionSafetyCheck"
      description: Safety check that waits for the primary replica to be moved out of the
        node before starting an upgrade to ensure the availability of the
        primary replica for the partition.
      x-ms-discriminator-value: WaitForPrimarySwap
    WaitForReconfigurationSafetyCheck:
      allOf:
        - $ref: "#/components/schemas/PartitionSafetyCheck"
      description: Safety check that waits for the current reconfiguration of the partition
        to be completed before starting an upgrade.
      x-ms-discriminator-value: WaitForReconfiguration
    WaitingChaosEvent:
      allOf:
        - $ref: "#/components/schemas/ChaosEvent"
      description: Describes a Chaos event that gets generated when Chaos is waiting for
        the cluster to become ready for faulting, for example, Chaos may be
        waiting for the on-going upgrade to finish.
      properties:
        Reason:
          description: Describes why the WaitingChaosEvent was generated, for example, due
            to a cluster upgrade.
          type: string
      x-ms-discriminator-value: Waiting
