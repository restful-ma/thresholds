openapi: 3.0.0
info:
  version: 2017-08-22
  x-release: v4
  title: AWS Certificate Manager Private Certificate Authority
  description: <p>This is the <i>ACM Private CA API Reference</i>. It provides
    descriptions, syntax, and usage examples for each of the actions and data
    types involved in creating and managing private certificate authorities (CA)
    for your organization.</p> <p>The documentation for each action shows the
    Query API request parameters and the XML response. Alternatively, you can
    use one of the AWS SDKs to access an API that's tailored to the programming
    language or platform that you're using. For more information, see <a
    href="https://aws.amazon.com/tools/#SDKs">AWS SDKs</a>.</p> <note> <p>Each
    ACM Private CA API action has a throttling limit which determines the number
    of times the action can be called per second. For more information, see <a
    href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaLimits.html#PcaLimits-api">API
    Rate Limits in ACM Private CA</a> in the ACM Private CA user guide.</p>
    </note>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: acm-pca
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-pca-2017-08-22.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/acm-pca/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthority:
    post:
      operationId: CreateCertificateAuthority
      description: Creates a root or subordinate private certificate authority (CA). You
        must specify the CA configuration, the certificate revocation list (CRL)
        configuration, the CA type, and an optional idempotency token to avoid
        accidental creation of multiple CAs. The CA configuration specifies the
        name of the algorithm and key size to be used to create the CA private
        key, the type of signing algorithm that the CA uses, and X.500 subject
        information. The CRL configuration specifies the CRL expiration period
        in days (the validity period of the CRL), the Amazon S3 bucket that will
        contain the CRL, and a CNAME alias for the S3 bucket that is included in
        certificates issued by the CA. If successful, this action returns the
        Amazon Resource Name (ARN) of the CA.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCertificateAuthorityResponse"
        "480":
          description: InvalidArgsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgsException"
        "481":
          description: InvalidPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPolicyException"
        "482":
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.CreateCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthorityAuditReport:
    post:
      operationId: CreateCertificateAuthorityAuditReport
      description: Creates an audit report that lists every time that your CA private key
        is used. The report is saved in the Amazon S3 bucket that you specify on
        input. The <a>IssueCertificate</a> and <a>RevokeCertificate</a> actions
        use the private key.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCertificateAuthorityAuditReportRe\
                  sponse"
        "480":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "481":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "484":
          description: InvalidArgsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgsException"
        "485":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.CreateCertificateAuthorityAuditReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCertificateAuthorityAuditReportRequ\
                est"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.CreatePermission:
    post:
      operationId: CreatePermission
      description: <p>Assigns permissions from a private CA to a designated AWS service.
        Services are specified by their service principals and can be given
        permission to create and retrieve certificates on a private CA. Services
        can also be given permission to list the active permissions that the
        private CA has granted. For ACM to automatically renew your private CA's
        certificates, you must assign all possible permissions from the CA to
        the ACM service principal.</p> <p>At this time, you can only assign
        permissions to ACM (<code>acm.amazonaws.com</code>). Permissions can be
        revoked with the <a>DeletePermission</a> action and listed with the
        <a>ListPermissions</a> action.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: PermissionAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionAlreadyExistsException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "484":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "485":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.CreatePermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePermissionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.DeleteCertificateAuthority:
    post:
      operationId: DeleteCertificateAuthority
      description: <p>Deletes a private certificate authority (CA). You must provide the
        Amazon Resource Name (ARN) of the private CA that you want to delete.
        You can find the ARN by calling the <a>ListCertificateAuthorities</a>
        action. </p> <note> <p>Deleting a CA will invalidate other CAs and
        certificates below it in your CA hierarchy.</p> </note> <p>Before you
        can delete a CA that you have created and activated, you must disable
        it. To do this, call the <a>UpdateCertificateAuthority</a> action and
        set the <b>CertificateAuthorityStatus</b> parameter to
        <code>DISABLED</code>. </p> <p>Additionally, you can delete a CA if you
        are waiting for it to be created (that is, the status of the CA is
        <code>CREATING</code>). You can also delete it if the CA has been
        created but you haven't yet imported the signed certificate into ACM
        Private CA (that is, the status of the CA is
        <code>PENDING_CERTIFICATE</code>). </p> <p>When you successfully call
        <a>DeleteCertificateAuthority</a>, the CA's status changes to
        <code>DELETED</code>. However, the CA won't be permanently deleted until
        the restoration period has passed. By default, if you do not set the
        <code>PermanentDeletionTimeInDays</code> parameter, the CA remains
        restorable for 30 days. You can set the parameter from 7 to 30 days. The
        <a>DescribeCertificateAuthority</a> action returns the time remaining in
        the restoration window of a private CA in the <code>DELETED</code>
        state. To restore an eligible CA, call the
        <a>RestoreCertificateAuthority</a> action.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "483":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.DeleteCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.DeletePermission:
    post:
      operationId: DeletePermission
      description: "Revokes permissions that a private CA assigned to a designated AWS
        service. Permissions can be created with the <a>CreatePermission</a>
        action and listed with the <a>ListPermissions</a> action. "
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "483":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.DeletePermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePermissionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthority:
    post:
      operationId: DescribeCertificateAuthority
      description: "<p>Lists information about your private certificate authority (CA). You
        specify the private CA on input by its ARN (Amazon Resource Name). The
        output contains the status of your CA. This can be any of the following:
        </p> <ul> <li> <p> <code>CREATING</code> - ACM Private CA is creating
        your private certificate authority.</p> </li> <li> <p>
        <code>PENDING_CERTIFICATE</code> - The certificate is pending. You must
        use your ACM Private CA-hosted or on-premises root or subordinate CA to
        sign your private CA CSR and then import it into PCA. </p> </li> <li>
        <p> <code>ACTIVE</code> - Your private CA is active.</p> </li> <li> <p>
        <code>DISABLED</code> - Your private CA has been disabled.</p> </li>
        <li> <p> <code>EXPIRED</code> - Your private CA certificate has
        expired.</p> </li> <li> <p> <code>FAILED</code> - Your private CA has
        failed. Your CA can fail because of problems such a network outage or
        backend AWS failure or other errors. A failed CA can never return to the
        pending state. You must create a new CA. </p> </li> <li> <p>
        <code>DELETED</code> - Your private CA is within the restoration period,
        after which it is permanently deleted. The length of time remaining in
        the CA's restoration period is also included in this action's
        output.</p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeCertificateAuthorityResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.DescribeCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthorityAuditReport:
    post:
      operationId: DescribeCertificateAuthorityAuditReport
      description: "Lists information about a specific audit report created by calling the
        <a>CreateCertificateAuthorityAuditReport</a> action. Audit information
        is created every time the certificate authority (CA) private key is
        used. The private key is used when you call the <a>IssueCertificate</a>
        action or the <a>RevokeCertificate</a> action. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeCertificateAuthorityAuditReport\
                  Response"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidArgsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.DescribeCertificateAuthorityAuditReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeCertificateAuthorityAuditReportRe\
                quest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.GetCertificate:
    post:
      operationId: GetCertificate
      description: "Retrieves a certificate from your private CA. The ARN of the
        certificate is returned when you call the <a>IssueCertificate</a>
        action. You must specify both the ARN of your private CA and the ARN of
        the issued certificate when calling the <b>GetCertificate</b> action.
        You can retrieve the certificate if it is in the <b>ISSUED</b> state.
        You can call the <a>CreateCertificateAuthorityAuditReport</a> action to
        create a report that contains information about all of the certificates
        issued and revoked by your private CA. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCertificateResponse"
        "480":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "481":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "484":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.GetCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCertificate:
    post:
      operationId: GetCertificateAuthorityCertificate
      description: "Retrieves the certificate and certificate chain for your private
        certificate authority (CA). Both the certificate and the chain are
        base64 PEM-encoded. The chain does not include the CA certificate. Each
        certificate in the chain signs the one before it. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCertificateAuthorityCertificateRespo\
                  nse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.GetCertificateAuthorityCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCertificateAuthorityCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCsr:
    post:
      operationId: GetCertificateAuthorityCsr
      description: "Retrieves the certificate signing request (CSR) for your private
        certificate authority (CA). The CSR is created when you call the
        <a>CreateCertificateAuthority</a> action. Sign the CSR with your ACM
        Private CA-hosted or on-premises root or subordinate CA. Then import the
        signed certificate back into ACM Private CA by calling the
        <a>ImportCertificateAuthorityCertificate</a> action. The CSR is returned
        as a base64 PEM-encoded string. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCertificateAuthorityCsrResponse"
        "480":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "481":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "484":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.GetCertificateAuthorityCsr
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCertificateAuthorityCsrRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.ImportCertificateAuthorityCertificate:
    post:
      operationId: ImportCertificateAuthorityCertificate
      description: <p>Imports a signed private CA certificate into ACM Private CA. This
        action is used when you are using a chain of trust whose root is located
        outside ACM Private CA. Before you can call this action, the following
        preparations must in place:</p> <ol> <li> <p>In ACM Private CA, call the
        <a>CreateCertificateAuthority</a> action to create the private CA that
        that you plan to back with the imported certificate.</p> </li> <li>
        <p>Call the <a>GetCertificateAuthorityCsr</a> action to generate a
        certificate signing request (CSR).</p> </li> <li> <p>Sign the CSR using
        a root or intermediate CA hosted either by an on-premises PKI hierarchy
        or a commercial CA..</p> </li> <li> <p>Create a certificate chain and
        copy the signed certificate and the certificate chain to your working
        directory.</p> </li> </ol> <p>The following requirements apply when you
        import a CA certificate.</p> <ul> <li> <p>You cannot import a
        non-self-signed certificate for use as a root CA.</p> </li> <li> <p>You
        cannot import a self-signed certificate for use as a subordinate CA.</p>
        </li> <li> <p>Your certificate chain must not include the private CA
        certificate that you are importing.</p> </li> <li> <p>Your ACM Private
        CA-hosted or on-premises CA certificate must be the last certificate in
        your chain. The subordinate certificate, if any, that your root CA
        signed must be next to last. The subordinate certificate signed by the
        preceding subordinate CA must come next, and so on until your chain is
        built. </p> </li> <li> <p>The chain must be PEM-encoded.</p> </li> </ul>
      responses:
        "200":
          description: Success
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "482":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "485":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "486":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "487":
          description: MalformedCertificateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedCertificateException"
        "488":
          description: CertificateMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateMismatchException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.ImportCertificateAuthorityCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportCertificateAuthorityCertificateRequ\
                est"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.IssueCertificate:
    post:
      operationId: IssueCertificate
      description: <p>Uses your private certificate authority (CA) to issue a client
        certificate. This action returns the Amazon Resource Name (ARN) of the
        certificate. You can retrieve the certificate by calling the
        <a>GetCertificate</a> action and specifying the ARN. </p> <note> <p>You
        cannot use the ACM <b>ListCertificateAuthorities</b> action to retrieve
        the ARNs of the certificates that you issue by using ACM Private CA.</p>
        </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueCertificateResponse"
        "480":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "483":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "484":
          description: InvalidArgsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgsException"
        "485":
          description: MalformedCSRException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalformedCSRException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.IssueCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.ListCertificateAuthorities:
    post:
      operationId: ListCertificateAuthorities
      description: Lists the private certificate authorities that you created by using the
        <a>CreateCertificateAuthority</a> action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCertificateAuthoritiesResponse"
        "480":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.ListCertificateAuthorities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCertificateAuthoritiesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.ListPermissions:
    post:
      operationId: ListPermissions
      description: Lists all the permissions, if any, that have been assigned by a private
        CA. Permissions can be granted with the <a>CreatePermission</a> action
        and revoked with the <a>DeletePermission</a> action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPermissionsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidNextTokenException"
        "483":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "484":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.ListPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListPermissionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.ListTags:
    post:
      operationId: ListTags
      description: "Lists the tags, if any, that are associated with your private CA. Tags
        are labels that you can use to identify and organize your CAs. Each tag
        consists of a key and an optional value. Call the
        <a>TagCertificateAuthority</a> action to add one or more tags to your
        CA. Call the <a>UntagCertificateAuthority</a> action to remove tags. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.ListTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.RestoreCertificateAuthority:
    post:
      operationId: RestoreCertificateAuthority
      description: Restores a certificate authority (CA) that is in the
        <code>DELETED</code> state. You can restore a CA during the period that
        you defined in the <b>PermanentDeletionTimeInDays</b> parameter of the
        <a>DeleteCertificateAuthority</a> action. Currently, you can specify 7
        to 30 days. If you did not specify a <b>PermanentDeletionTimeInDays</b>
        value, by default you can restore the CA at any time in a 30 day period.
        You can check the time remaining in the restoration period of a private
        CA in the <code>DELETED</code> state by calling the
        <a>DescribeCertificateAuthority</a> or <a>ListCertificateAuthorities</a>
        actions. The status of a restored CA is set to its pre-deletion status
        when the <b>RestoreCertificateAuthority</b> action returns. To change
        its status to <code>ACTIVE</code>, call the
        <a>UpdateCertificateAuthority</a> action. If the private CA was in the
        <code>PENDING_CERTIFICATE</code> state at deletion, you must use the
        <a>ImportCertificateAuthorityCertificate</a> action to import a
        certificate authority into the private CA before it can be activated.
        You cannot restore a CA after the restoration period has ended.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "482":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.RestoreCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.RevokeCertificate:
    post:
      operationId: RevokeCertificate
      description: <p>Revokes a certificate that was issued inside ACM Private CA. If you
        enable a certificate revocation list (CRL) when you create or update
        your private CA, information about the revoked certificates will be
        included in the CRL. ACM Private CA writes the CRL to an S3 bucket that
        you specify. For more information about revocation, see the
        <a>CrlConfiguration</a> structure. ACM Private CA also writes revocation
        information to the audit report. For more information, see
        <a>CreateCertificateAuthorityAuditReport</a>. </p> <note> <p>You cannot
        revoke a root CA self-signed certificate.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: RequestAlreadyProcessedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestAlreadyProcessedException"
        "487":
          description: RequestInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestInProgressException"
        "488":
          description: RequestFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestFailedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.RevokeCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeCertificateRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.TagCertificateAuthority:
    post:
      operationId: TagCertificateAuthority
      description: "Adds one or more tags to your private CA. Tags are labels that you can
        use to identify and organize your AWS resources. Each tag consists of a
        key and an optional value. You specify the private CA on input by its
        Amazon Resource Name (ARN). You specify the tag by using a key-value
        pair. You can apply a tag to just one private CA if you want to identify
        a specific characteristic of that CA, or you can apply the same tag to
        multiple private CAs if you want to filter for a common relationship
        among those CAs. To remove one or more tags, use the
        <a>UntagCertificateAuthority</a> action. Call the <a>ListTags</a> action
        to see what tags are associated with your CA. "
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "483":
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagException"
        "484":
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyTagsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.TagCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.UntagCertificateAuthority:
    post:
      operationId: UntagCertificateAuthority
      description: "Remove one or more tags from your private CA. A tag consists of a
        key-value pair. If you do not specify the value portion of the tag when
        calling this action, the tag will be removed regardless of value. If you
        specify a value, the tag is removed only if it is associated with the
        specified value. To add tags to a private CA, use the
        <a>TagCertificateAuthority</a>. Call the <a>ListTags</a> action to see
        what tags are associated with your CA. "
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "483":
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTagException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.UntagCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=ACMPrivateCA.UpdateCertificateAuthority:
    post:
      operationId: UpdateCertificateAuthority
      description: Updates the status or configuration of a private certificate authority
        (CA). Your private CA must be in the <code>ACTIVE</code> or
        <code>DISABLED</code> state before you can update it. You can disable a
        private CA that is in the <code>ACTIVE</code> state or make a CA that is
        in the <code>DISABLED</code> state active again.
      responses:
        "200":
          description: Success
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidArgsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgsException"
        "483":
          description: InvalidArnException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArnException"
        "484":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "485":
          description: InvalidPolicyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPolicyException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - ACMPrivateCA.UpdateCertificateAuthority
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCertificateAuthorityRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://acm-pca.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The ACM-PCA multi-region endpoint
  - url: https://acm-pca.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The ACM-PCA multi-region endpoint
  - url: http://acm-pca.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The ACM-PCA endpoint for China (Beijing) and China (Ningxia)
  - url: https://acm-pca.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The ACM-PCA endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateCertificateAuthorityResponse:
      type: object
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
    CreateCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityConfiguration
        - CertificateAuthorityType
      properties:
        CertificateAuthorityConfiguration:
          $ref: "#/components/schemas/CertificateAuthorityConfiguration"
        RevocationConfiguration:
          $ref: "#/components/schemas/RevocationConfiguration"
        CertificateAuthorityType:
          $ref: "#/components/schemas/CertificateAuthorityType"
        IdempotencyToken:
          $ref: "#/components/schemas/IdempotencyToken"
        Tags:
          $ref: "#/components/schemas/TagList"
    InvalidArgsException: {}
    InvalidPolicyException: {}
    InvalidTagException: {}
    LimitExceededException: {}
    CreateCertificateAuthorityAuditReportResponse:
      type: object
      properties:
        AuditReportId:
          $ref: "#/components/schemas/AuditReportId"
        S3Key:
          $ref: "#/components/schemas/String"
    CreateCertificateAuthorityAuditReportRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - S3BucketName
        - AuditReportResponseFormat
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        S3BucketName:
          $ref: "#/components/schemas/String"
        AuditReportResponseFormat:
          $ref: "#/components/schemas/AuditReportResponseFormat"
    RequestInProgressException: {}
    RequestFailedException: {}
    ResourceNotFoundException: {}
    InvalidArnException: {}
    InvalidStateException: {}
    CreatePermissionRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - Principal
        - Actions
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        Principal:
          $ref: "#/components/schemas/Principal"
        SourceAccount:
          $ref: "#/components/schemas/AccountId"
        Actions:
          $ref: "#/components/schemas/ActionList"
    PermissionAlreadyExistsException: {}
    DeleteCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        PermanentDeletionTimeInDays:
          $ref: "#/components/schemas/PermanentDeletionTimeInDays"
    ConcurrentModificationException: {}
    DeletePermissionRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - Principal
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        Principal:
          $ref: "#/components/schemas/Principal"
        SourceAccount:
          $ref: "#/components/schemas/AccountId"
    DescribeCertificateAuthorityResponse:
      type: object
      properties:
        CertificateAuthority:
          $ref: "#/components/schemas/CertificateAuthority"
    DescribeCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
    DescribeCertificateAuthorityAuditReportResponse:
      type: object
      properties:
        AuditReportStatus:
          $ref: "#/components/schemas/AuditReportStatus"
        S3BucketName:
          $ref: "#/components/schemas/String"
        S3Key:
          $ref: "#/components/schemas/String"
        CreatedAt:
          $ref: "#/components/schemas/TStamp"
    DescribeCertificateAuthorityAuditReportRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - AuditReportId
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        AuditReportId:
          $ref: "#/components/schemas/AuditReportId"
    GetCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: "#/components/schemas/CertificateBody"
        CertificateChain:
          $ref: "#/components/schemas/CertificateChain"
    GetCertificateRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - CertificateArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    GetCertificateAuthorityCertificateResponse:
      type: object
      properties:
        Certificate:
          $ref: "#/components/schemas/CertificateBody"
        CertificateChain:
          $ref: "#/components/schemas/CertificateChain"
    GetCertificateAuthorityCertificateRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
    GetCertificateAuthorityCsrResponse:
      type: object
      properties:
        Csr:
          $ref: "#/components/schemas/CsrBody"
    GetCertificateAuthorityCsrRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
    ImportCertificateAuthorityCertificateRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - Certificate
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        Certificate:
          $ref: "#/components/schemas/CertificateBodyBlob"
        CertificateChain:
          $ref: "#/components/schemas/CertificateChainBlob"
    InvalidRequestException: {}
    MalformedCertificateException: {}
    CertificateMismatchException: {}
    IssueCertificateResponse:
      type: object
      properties:
        CertificateArn:
          $ref: "#/components/schemas/Arn"
    IssueCertificateRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - Csr
        - SigningAlgorithm
        - Validity
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        Csr:
          $ref: "#/components/schemas/CsrBlob"
        SigningAlgorithm:
          $ref: "#/components/schemas/SigningAlgorithm"
        TemplateArn:
          $ref: "#/components/schemas/Arn"
        Validity:
          $ref: "#/components/schemas/Validity"
        IdempotencyToken:
          $ref: "#/components/schemas/IdempotencyToken"
    MalformedCSRException: {}
    ListCertificateAuthoritiesResponse:
      type: object
      properties:
        CertificateAuthorities:
          $ref: "#/components/schemas/CertificateAuthorities"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListCertificateAuthoritiesRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/NextToken"
        MaxResults:
          $ref: "#/components/schemas/MaxResults"
    InvalidNextTokenException: {}
    ListPermissionsResponse:
      type: object
      properties:
        Permissions:
          $ref: "#/components/schemas/PermissionList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListPermissionsRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        MaxResults:
          $ref: "#/components/schemas/MaxResults"
    ListTagsResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListTagsRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        MaxResults:
          $ref: "#/components/schemas/MaxResults"
    RestoreCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
    RevokeCertificateRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - CertificateSerial
        - RevocationReason
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        CertificateSerial:
          $ref: "#/components/schemas/String128"
        RevocationReason:
          $ref: "#/components/schemas/RevocationReason"
    RequestAlreadyProcessedException: {}
    TagCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - Tags
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        Tags:
          $ref: "#/components/schemas/TagList"
    TooManyTagsException: {}
    UntagCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityArn
        - Tags
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        Tags:
          $ref: "#/components/schemas/TagList"
    UpdateCertificateAuthorityRequest:
      type: object
      required:
        - CertificateAuthorityArn
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        RevocationConfiguration:
          $ref: "#/components/schemas/RevocationConfiguration"
        Status:
          $ref: "#/components/schemas/CertificateAuthorityStatus"
    CountryCodeString:
      type: string
      pattern: "[A-Za-z]{2}"
    String64:
      type: string
      minLength: 0
      maxLength: 64
    DistinguishedNameQualifierString:
      type: string
      pattern: "[a-zA-Z0-9'()+-.?:/= ]*"
      minLength: 0
      maxLength: 64
    String128:
      type: string
      minLength: 0
      maxLength: 128
    String40:
      type: string
      minLength: 0
      maxLength: 40
    String16:
      type: string
      minLength: 0
      maxLength: 16
    String5:
      type: string
      minLength: 0
      maxLength: 5
    String3:
      type: string
      minLength: 0
      maxLength: 3
    ASN1Subject:
      type: object
      properties:
        Country:
          $ref: "#/components/schemas/CountryCodeString"
        Organization:
          $ref: "#/components/schemas/String64"
        OrganizationalUnit:
          $ref: "#/components/schemas/String64"
        DistinguishedNameQualifier:
          $ref: "#/components/schemas/DistinguishedNameQualifierString"
        State:
          $ref: "#/components/schemas/String128"
        CommonName:
          $ref: "#/components/schemas/String64"
        SerialNumber:
          $ref: "#/components/schemas/String64"
        Locality:
          $ref: "#/components/schemas/String128"
        Title:
          $ref: "#/components/schemas/String64"
        Surname:
          $ref: "#/components/schemas/String40"
        GivenName:
          $ref: "#/components/schemas/String16"
        Initials:
          $ref: "#/components/schemas/String5"
        Pseudonym:
          $ref: "#/components/schemas/String128"
        GenerationQualifier:
          $ref: "#/components/schemas/String3"
      description: "Contains information about the certificate subject. The certificate can
        be one issued by your private certificate authority (CA) or it can be
        your private CA certificate. The <b>Subject</b> field in the certificate
        identifies the entity that owns or controls the public key in the
        certificate. The entity can be a user, computer, device, or service. The
        <b>Subject</b> must contain an X.500 distinguished name (DN). A DN is a
        sequence of relative distinguished names (RDNs). The RDNs are separated
        by commas in the certificate. The DN must be unique for each entity, but
        your private CA can issue more than one certificate with the same DN to
        the same entity. "
    AccountId:
      type: string
      pattern: "[0-9]+"
      minLength: 12
      maxLength: 12
    ActionType:
      type: string
      enum:
        - IssueCertificate
        - GetCertificate
        - ListPermissions
    ActionList:
      type: array
      items:
        $ref: "#/components/schemas/ActionType"
      minItems: 1
      maxItems: 3
    Arn:
      type: string
      pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]*:[\w+=,.@-]+(/[\w+=/,.@-]+)*
      minLength: 5
      maxLength: 200
    AuditReportId:
      type: string
      pattern: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}"
      minLength: 36
      maxLength: 36
    AuditReportResponseFormat:
      type: string
      enum:
        - JSON
        - CSV
    AuditReportStatus:
      type: string
      enum:
        - CREATING
        - SUCCESS
        - FAILED
    Boolean:
      type: boolean
    CertificateAuthority:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/Arn"
        CreatedAt:
          $ref: "#/components/schemas/TStamp"
        LastStateChangeAt:
          $ref: "#/components/schemas/TStamp"
        Type:
          $ref: "#/components/schemas/CertificateAuthorityType"
        Serial:
          $ref: "#/components/schemas/String"
        Status:
          $ref: "#/components/schemas/CertificateAuthorityStatus"
        NotBefore:
          $ref: "#/components/schemas/TStamp"
        NotAfter:
          $ref: "#/components/schemas/TStamp"
        FailureReason:
          $ref: "#/components/schemas/FailureReason"
        CertificateAuthorityConfiguration:
          $ref: "#/components/schemas/CertificateAuthorityConfiguration"
        RevocationConfiguration:
          $ref: "#/components/schemas/RevocationConfiguration"
        RestorableUntil:
          $ref: "#/components/schemas/TStamp"
      description: "Contains information about your private certificate authority (CA).
        Your private CA can issue and revoke X.509 digital certificates. Digital
        certificates verify that the entity named in the certificate
        <b>Subject</b> field owns or controls the public key contained in the
        <b>Subject Public Key Info</b> field. Call the
        <a>CreateCertificateAuthority</a> action to create your private CA. You
        must then call the <a>GetCertificateAuthorityCertificate</a> action to
        retrieve a private CA certificate signing request (CSR). Sign the CSR
        with your ACM Private CA-hosted or on-premises root or subordinate CA
        certificate. Call the <a>ImportCertificateAuthorityCertificate</a>
        action to import the signed certificate into AWS Certificate Manager
        (ACM). "
    CertificateAuthorities:
      type: array
      items:
        $ref: "#/components/schemas/CertificateAuthority"
    TStamp:
      type: string
      format: date-time
    CertificateAuthorityType:
      type: string
      enum:
        - ROOT
        - SUBORDINATE
    String:
      type: string
    CertificateAuthorityStatus:
      type: string
      enum:
        - CREATING
        - PENDING_CERTIFICATE
        - ACTIVE
        - DELETED
        - DISABLED
        - EXPIRED
        - FAILED
    FailureReason:
      type: string
      enum:
        - REQUEST_TIMED_OUT
        - UNSUPPORTED_ALGORITHM
        - OTHER
    CertificateAuthorityConfiguration:
      type: object
      required:
        - KeyAlgorithm
        - SigningAlgorithm
        - Subject
      properties:
        KeyAlgorithm:
          $ref: "#/components/schemas/KeyAlgorithm"
        SigningAlgorithm:
          $ref: "#/components/schemas/SigningAlgorithm"
        Subject:
          $ref: "#/components/schemas/ASN1Subject"
      description: "Contains configuration information for your private certificate
        authority (CA). This includes information about the class of public key
        algorithm and the key pair that your private CA creates when it issues a
        certificate. It also includes the signature algorithm that it uses when
        issuing certificates, and its X.500 distinguished name. You must specify
        this information when you call the <a>CreateCertificateAuthority</a>
        action. "
    RevocationConfiguration:
      type: object
      properties:
        CrlConfiguration:
          $ref: "#/components/schemas/CrlConfiguration"
      description: Certificate revocation information used by the
        <a>CreateCertificateAuthority</a> and <a>UpdateCertificateAuthority</a>
        actions. Your private certificate authority (CA) can create and maintain
        a certificate revocation list (CRL). A CRL contains information about
        certificates revoked by your CA. For more information, see
        <a>RevokeCertificate</a>.
    KeyAlgorithm:
      type: string
      enum:
        - RSA_2048
        - RSA_4096
        - EC_prime256v1
        - EC_secp384r1
    SigningAlgorithm:
      type: string
      enum:
        - SHA256WITHECDSA
        - SHA384WITHECDSA
        - SHA512WITHECDSA
        - SHA256WITHRSA
        - SHA384WITHRSA
        - SHA512WITHRSA
    CertificateBody:
      type: string
    CertificateBodyBlob:
      type: string
      minLength: 1
      maxLength: 32768
    CertificateChain:
      type: string
    CertificateChainBlob:
      type: string
      minLength: 0
      maxLength: 2097152
    IdempotencyToken:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*"
      minLength: 1
      maxLength: 36
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 1
      maxItems: 50
    Principal:
      type: string
      pattern: ^[^*]+$
      minLength: 0
      maxLength: 128
    Integer1To5000:
      type: integer
      minimum: 1
      maximum: 5000
    String253:
      type: string
      minLength: 0
      maxLength: 253
    String3To255:
      type: string
      minLength: 3
      maxLength: 255
    CrlConfiguration:
      type: object
      required:
        - Enabled
      properties:
        Enabled:
          $ref: "#/components/schemas/Boolean"
        ExpirationInDays:
          $ref: "#/components/schemas/Integer1To5000"
        CustomCname:
          $ref: "#/components/schemas/String253"
        S3BucketName:
          $ref: "#/components/schemas/String3To255"
      description: "<p>Contains configuration information for a certificate revocation list
        (CRL). Your private certificate authority (CA) creates base CRLs. Delta
        CRLs are not supported. You can enable CRLs for your new or an existing
        private CA by setting the <b>Enabled</b> parameter to <code>true</code>.
        Your private CA writes CRLs to an S3 bucket that you specify in the
        <b>S3BucketName</b> parameter. You can hide the name of your bucket by
        specifying a value for the <b>CustomCname</b> parameter. Your private CA
        copies the CNAME or the S3 bucket name to the <b>CRL Distribution
        Points</b> extension of each certificate it issues. Your S3 bucket
        policy must give write permission to ACM Private CA. </p> <p>Your
        private CA uses the value in the <b>ExpirationInDays</b> parameter to
        calculate the <b>nextUpdate</b> field in the CRL. The CRL is refreshed
        at 1/2 the age of next update or when a certificate is revoked. When a
        certificate is revoked, it is recorded in the next CRL that is generated
        and in the next audit report. Only time valid certificates are listed in
        the CRL. Expired certificates are not included. </p> <p>CRLs contain the
        following fields:</p> <ul> <li> <p> <b>Version</b>: The current version
        number defined in RFC 5280 is V2. The integer value is 0x1. </p> </li>
        <li> <p> <b>Signature Algorithm</b>: The name of the algorithm used to
        sign the CRL.</p> </li> <li> <p> <b>Issuer</b>: The X.500 distinguished
        name of your private CA that issued the CRL.</p> </li> <li> <p> <b>Last
        Update</b>: The issue date and time of this CRL.</p> </li> <li> <p>
        <b>Next Update</b>: The day and time by which the next CRL will be
        issued.</p> </li> <li> <p> <b>Revoked Certificates</b>: List of revoked
        certificates. Each list item contains the following information.</p>
        <ul> <li> <p> <b>Serial Number</b>: The serial number, in hexadecimal
        format, of the revoked certificate.</p> </li> <li> <p> <b>Revocation
        Date</b>: Date and time the certificate was revoked.</p> </li> <li> <p>
        <b>CRL Entry Extensions</b>: Optional extensions for the CRL entry.</p>
        <ul> <li> <p> <b>X509v3 CRL Reason Code</b>: Reason the certificate was
        revoked.</p> </li> </ul> </li> </ul> </li> <li> <p> <b>CRL
        Extensions</b>: Optional extensions for the CRL.</p> <ul> <li> <p>
        <b>X509v3 Authority Key Identifier</b>: Identifies the public key
        associated with the private key used to sign the certificate.</p> </li>
        <li> <p> <b>X509v3 CRL Number:</b>: Decimal sequence number for the
        CRL.</p> </li> </ul> </li> <li> <p> <b>Signature Algorithm</b>:
        Algorithm used by your private CA to sign the CRL.</p> </li> <li> <p>
        <b>Signature Value</b>: Signature computed over the CRL.</p> </li> </ul>
        <p>Certificate revocation lists created by ACM Private CA are
        DER-encoded. You can use the following OpenSSL command to list a
        CRL.</p> <p> <code>openssl crl -inform DER -text -in <i>crl_path</i>
        -noout</code> </p>"
    CsrBlob:
      type: string
      minLength: 1
      maxLength: 32768
    CsrBody:
      type: string
    PermanentDeletionTimeInDays:
      type: integer
      minimum: 7
      maximum: 30
    Validity:
      type: object
      required:
        - Value
        - Type
      properties:
        Value:
          $ref: "#/components/schemas/PositiveLong"
        Type:
          $ref: "#/components/schemas/ValidityPeriodType"
      description: Length of time for which the certificate issued by your private
        certificate authority (CA), or by the private CA itself, is valid in
        days, months, or years. You can issue a certificate by calling the
        <a>IssueCertificate</a> action.
    NextToken:
      type: string
      minLength: 1
      maxLength: 500
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    PermissionList:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
      minItems: 0
    Permission:
      type: object
      properties:
        CertificateAuthorityArn:
          $ref: "#/components/schemas/Arn"
        CreatedAt:
          $ref: "#/components/schemas/TStamp"
        Principal:
          $ref: "#/components/schemas/String"
        SourceAccount:
          $ref: "#/components/schemas/String"
        Actions:
          $ref: "#/components/schemas/ActionList"
        Policy:
          $ref: "#/components/schemas/String"
      description: Permissions designate which private CA actions can be performed by an
        AWS service or entity. In order for ACM to automatically renew private
        certificates, you must give the ACM service principal all available
        permissions (<code>IssueCertificate</code>, <code>GetCertificate</code>,
        and <code>ListPermissions</code>). Permissions can be assigned with the
        <a>CreatePermission</a> action, removed with the <a>DeletePermission</a>
        action, and listed with the <a>ListPermissions</a> action.
    PositiveLong:
      type: integer
      minimum: 1
    RevocationReason:
      type: string
      enum:
        - UNSPECIFIED
        - KEY_COMPROMISE
        - CERTIFICATE_AUTHORITY_COMPROMISE
        - AFFILIATION_CHANGED
        - SUPERSEDED
        - CESSATION_OF_OPERATION
        - PRIVILEGE_WITHDRAWN
        - A_A_COMPROMISE
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: "Tags are labels that you can use to identify and organize your private
        CAs. Each tag consists of a key and an optional value. You can associate
        up to 50 tags with a private CA. To add one or more tags to a private
        CA, call the <a>TagCertificateAuthority</a> action. To remove a tag,
        call the <a>UntagCertificateAuthority</a> action. "
    ValidityPeriodType:
      type: string
      enum:
        - END_DATE
        - ABSOLUTE
        - DAYS
        - MONTHS
        - YEARS
