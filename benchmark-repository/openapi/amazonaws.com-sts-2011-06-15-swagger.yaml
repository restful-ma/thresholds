openapi: 3.0.0
info:
  version: 2011-06-15
  x-release: v4
  title: AWS Security Token Service
  description: <fullname>AWS Security Token Service</fullname> <p>The AWS Security Token
    Service (STS) is a web service that enables you to request temporary,
    limited-privilege credentials for AWS Identity and Access Management (IAM)
    users or for users that you authenticate (federated users). This guide
    provides descriptions of the STS API. For more detailed information about
    using this service, go to <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary
    Security Credentials</a>. </p> <p>For information about setting up
    signatures and authorization through the API, go to <a
    href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing
    AWS API Requests</a> in the <i>AWS General Reference</i>. For general
    information about the Query API, go to <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making
    Query Requests</a> in <i>Using IAM</i>. For information about using security
    tokens with other AWS products, go to <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS
    Services That Work with IAM</a> in the <i>IAM User Guide</i>. </p> <p>If
    you're new to AWS and need additional technical information about a specific
    AWS product, you can find the product's technical documentation at <a
    href="http://aws.amazon.com/documentation/">http://aws.amazon.com/documentation/</a>.
    </p> <p> <b>Endpoints</b> </p> <p>By default, AWS Security Token Service
    (STS) is available as a global service, and all AWS STS requests go to a
    single endpoint at <code>https://sts.amazonaws.com</code>. Global requests
    map to the US East (N. Virginia) region. AWS recommends using Regional AWS
    STS endpoints instead of the global endpoint to reduce latency, build in
    redundancy, and increase session token validity. For more information, see
    <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Managing
    AWS STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>Most AWS
    Regions are enabled for operations in all AWS services by default. Those
    Regions are automatically activated for use with AWS STS. Some Regions, such
    as Asia Pacific (Hong Kong), must be manually enabled. To learn more about
    enabling and disabling AWS Regions, see <a
    href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing
    AWS Regions</a> in the <i>AWS General Reference</i>. When you enable these
    AWS Regions, they are automatically activated for use with AWS STS. You
    cannot activate the STS endpoint for a Region that is disabled. Tokens that
    are valid in all AWS Regions are longer than tokens that are valid in
    Regions that are enabled by default. Changing this setting might affect
    existing systems where you temporarily store tokens. For more information,
    see <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html#sts-regions-manage-tokens">Managing
    Global Endpoint Session Tokens</a> in the <i>IAM User Guide</i>.</p>
    <p>After you activate a Region for use with AWS STS, you can direct AWS STS
    API calls to that Region. AWS STS recommends that you provide both the
    Region and endpoint when you make calls to a Regional endpoint. You can
    provide the Region alone for manually enabled Regions, such as Asia Pacific
    (Hong Kong). In this case, the calls are directed to the STS Regional
    endpoint. However, if you provide the Region alone for Regions enabled by
    default, the calls are directed to the global endpoint of
    <code>https://sts.amazonaws.com</code>.</p> <p>To view the list of AWS STS
    endpoints and whether they are active by default, see <a
    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html#id_credentials_temp_enable-regions_writing_code">Writing
    Code to Use AWS STS Regions</a> in the <i>IAM User Guide</i>.</p> <p>
    <b>Recording API requests</b> </p> <p>STS supports AWS CloudTrail, which is
    a service that records AWS calls for your AWS account and delivers log files
    to an Amazon S3 bucket. By using information collected by CloudTrail, you
    can determine what requests were successfully made to STS, who made the
    request, when it was made, and so on.</p> <p>If you activate AWS STS
    endpoints in Regions other than the default global endpoint, then you must
    also turn on CloudTrail logging in those Regions. This is necessary to
    record any AWS STS API calls that are made in those Regions. For more
    information, see <a
    href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/aggregating_logs_regions_turn_on_ct.html">Turning
    On CloudTrail in Additional Regions</a> in the <i>AWS CloudTrail User
    Guide</i>.</p> <p>AWS Security Token Service (STS) is a global service with
    a single endpoint at <code>https://sts.amazonaws.com</code>. Calls to this
    endpoint are logged as calls to a global service. However, because this
    endpoint is physically located in the US East (N. Virginia) Region, your
    logs list <code>us-east-1</code> as the event Region. CloudTrail does not
    write these logs to the US East (Ohio) Region unless you choose to include
    global service logs in that Region. CloudTrail writes calls to all Regional
    endpoints to their respective Regions. For example, calls to
    sts.us-east-2.amazonaws.com are published to the US East (Ohio) Region and
    calls to sts.eu-central-1.amazonaws.com are published to the EU (Frankfurt)
    Region.</p> <p>To learn more about CloudTrail, including how to turn it on
    and find your log files, see the <a
    href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">AWS
    CloudTrail User Guide</a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: sts
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/sts-2011-06-15.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/sts/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#Action=AssumeRole:
    get:
      x-aws-operation-name: AssumeRole
      operationId: GET AssumeRole
      description: "<p>Returns a set of temporary security credentials that you can use to
        access AWS resources that you might not normally have access to. These
        temporary credentials consist of an access key ID, a secret access key,
        and a security token. Typically, you use <code>AssumeRole</code> within
        your account or for cross-account access. For a comparison of
        <code>AssumeRole</code> with other API operations that produce temporary
        credentials, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html\">Requesting Temporary Security Credentials</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#stsapi_comparison\">Comparing the AWS STS API
        operations</a> in the <i>IAM User Guide</i>.</p> <important> <p>You
        cannot use AWS account root user credentials to call
        <code>AssumeRole</code>. You must use credentials for an IAM user or an
        IAM role to call <code>AssumeRole</code>.</p> </important> <p>For
        cross-account access, imagine that you own multiple accounts and need to
        access resources in each account. You could create long-term credentials
        in each account to access those resources. However, managing all those
        credentials and remembering which one can access which account can be
        time consuming. Instead, you can create one set of long-term credentials
        in one account. Then use temporary security credentials to access all
        the other accounts by assuming roles in those accounts. For more
        information about roles, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\"\
        >IAM Roles</a> in the <i>IAM User Guide</i>. </p> <p>By default, the
        temporary security credentials created by <code>AssumeRole</code> last
        for one hour. However, you can use the optional
        <code>DurationSeconds</code> parameter to specify the duration of your
        session. You can provide a value from 900 seconds (15 minutes) up to the
        maximum session duration setting for the role. This setting can have a
        value from 1 hour to 12 hours. To learn how to view the maximum value
        for your role, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml#id_roles_use_view-role-max-session\">View the Maximum Session
        Duration Setting for a Role</a> in the <i>IAM User Guide</i>. The
        maximum session duration limit applies when you use the
        <code>AssumeRole*</code> API operations or the <code>assume-role*</code>
        CLI commands. However the limit does not apply when you use those
        operations to create a console URL. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml\">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p> <p>The
        temporary security credentials created by <code>AssumeRole</code> can be
        used to make API calls to any AWS service with the following exception:
        You cannot call the AWS STS <code>GetFederationToken</code> or
        <code>GetSessionToken</code> API operations.</p> <p>(Optional) You can
        pass inline or managed <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">session policies</a> to this operation. You can
        pass a single JSON policy document to use as an inline session policy.
        You can also specify up to 10 managed policies to use as managed session
        policies. The plain text that you use for both inline and managed
        session policies shouldn't exceed 2048 characters. Passing policies to
        this operation returns new temporary credentials. The resulting
        session's permissions are the intersection of the role's identity-based
        policy and the session policies. You can use the role's temporary
        credentials in subsequent AWS API calls to access resources in the
        account that owns the role. You cannot use session policies to grant
        more permissions than those allowed by the identity-based policy of the
        role that is being assumed. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">Session Policies</a> in the <i>IAM User
        Guide</i>.</p> <p>To assume a role from a different account, your AWS
        account must be trusted by the role. The trust relationship is defined
        in the role's trust policy when the role is created. That trust policy
        states which accounts are allowed to delegate that access to users in
        the account. </p> <p>A user who wants to access a role in a different
        account must also have permissions that are delegated from the user
        account administrator. The administrator must attach a policy that
        allows the user to call <code>AssumeRole</code> for the ARN of the role
        in the other account. If the user is in the same account as the role,
        then you can do either of the following:</p> <ul> <li> <p>Attach a
        policy to the user (identical to the previous user in a different
        account).</p> </li> <li> <p>Add the user as a principal directly in the
        role's trust policy.</p> </li> </ul> <p>In this case, the trust policy
        acts as an IAM resource-based policy. Users in the same account as the
        role do not need explicit permission to assume the role. For more
        information about trust policies and resource-based policies, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html\">IAM Policies</a> in the <i>IAM User Guide</i>.</p> <p> <b>Using
        MFA with AssumeRole</b> </p> <p>(Optional) You can include multi-factor
        authentication (MFA) information when you call <code>AssumeRole</code>.
        This is useful for cross-account scenarios to ensure that the user that
        assumes the role has been authenticated with an AWS MFA device. In that
        scenario, the trust policy of the role being assumed includes a
        condition that tests for MFA authentication. If the caller does not
        include valid MFA information, the request to assume the role is denied.
        The condition in a trust policy that tests for MFA authentication might
        look like the following example.</p> <p> <code>\"Condition\": {\"Bool\":
        {\"aws:MultiFactorAuthPresent\": true}}</code> </p> <p>For more
        information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI\
        .html\">Configuring MFA-Protected API Access</a> in the <i>IAM User
        Guide</i> guide.</p> <p>To use MFA with <code>AssumeRole</code>, you
        pass values for the <code>SerialNumber</code> and <code>TokenCode</code>
        parameters. The <code>SerialNumber</code> value identifies the user's
        hardware or virtual MFA device. The <code>TokenCode</code> is the
        time-based one-time password (TOTP) that the MFA device produces. </p>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/AssumeRoleResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: RoleArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the role to assume.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE0\
              00-\\uFFFD\\u10000-\\u10FFFF]+"
        - name: RoleSessionName
          in: query
          required: true
          description: "<p>An identifier for the assumed role session.</p> <p>Use the role
            session name to uniquely identify a session when the same role is
            assumed by different principals or for different reasons. In
            cross-account scenarios, the role session name is visible to, and
            can be logged by the account that owns the role. The role session
            name is also used in the ARN of the assumed role principal. This
            means that subsequent cross-account API requests that use the
            temporary security credentials will expose the role session name to
            the external account in their AWS CloudTrail logs.</p> <p>The regex
            used to validate this parameter is a string of characters consisting
            of upper- and lower-case alphanumeric characters with no spaces. You
            can also include underscores or any of the following characters:
            =,.@-</p>"
          schema:
            type: string
            minLength: 2
            maxLength: 64
            pattern: "[\\w+=,.@-]*"
        - name: PolicyArns
          in: query
          required: false
          description: <p>The Amazon Resource Names (ARNs) of the IAM managed policies that
            you want to use as managed session policies. The policies must exist
            in the same account as the role.</p> <p>This parameter is optional.
            You can provide up to 10 managed policy ARNs. However, the plain
            text that you use for both inline and managed session policies
            shouldn't exceed 2048 characters. For more information about ARNs,
            see <a
            href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
            General Reference.</p> <note> <p>The characters in this parameter
            count towards the 2048 character session policy guideline. However,
            an AWS conversion compresses the session policies into a packed
            binary format that has a separate limit. This is the enforced limit.
            The <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note> <p>Passing policies to this operation returns new temporary
            credentials. The resulting session's permissions are the
            intersection of the role's identity-based policy and the session
            policies. You can use the role's temporary credentials in subsequent
            AWS API calls to access resources in the account that owns the role.
            You cannot use session policies to grant more permissions than those
            allowed by the identity-based policy of the role that is being
            assumed. For more information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p>
          schema:
            type: array
            items:
              type: string
        - name: Policy
          in: query
          required: false
          description: <p>An IAM policy in JSON format that you want to use as an inline
            session policy.</p> <p>This parameter is optional. Passing policies
            to this operation returns new temporary credentials. The resulting
            session's permissions are the intersection of the role's
            identity-based policy and the session policies. You can use the
            role's temporary credentials in subsequent AWS API calls to access
            resources in the account that owns the role. You cannot use session
            policies to grant more permissions than those allowed by the
            identity-based policy of the role that is being assumed. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p> <p>The plain text
            that you use for both inline and managed session policies shouldn't
            exceed 2048 characters. The JSON policy characters can be any ASCII
            character from the space character to the end of the valid character
            list (\u0020 through \u00FF). It can also include the tab (\u0009),
            linefeed (\u000A), and carriage return (\u000D) characters.</p>
            <note> <p>The characters in this parameter count towards the 2048
            character session policy guideline. However, an AWS conversion
            compresses the session policies into a packed binary format that has
            a separate limit. This is the enforced limit. The
            <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note>
          schema:
            type: string
            minLength: 1
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
        - name: DurationSeconds
          in: query
          required: false
          description: <p>The duration, in seconds, of the role session. The value can
            range from 900 seconds (15 minutes) up to the maximum session
            duration setting for the role. This setting can have a value from 1
            hour to 12 hours. If you specify a value higher than this setting,
            the operation fails. For example, if you specify a session duration
            of 12 hours, but your administrator set the maximum session duration
            to 6 hours, your operation fails. To learn how to view the maximum
            value for your role, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View
            the Maximum Session Duration Setting for a Role</a> in the <i>IAM
            User Guide</i>.</p> <p>By default, the value is set to
            <code>3600</code> seconds. </p> <note> <p>The
            <code>DurationSeconds</code> parameter is separate from the duration
            of a console session that you might request using the returned
            credentials. The request to the federation endpoint for a console
            sign-in token takes a <code>SessionDuration</code> parameter that
            specifies the maximum length of the console session. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating
            a URL that Enables Federated Users to Access the AWS Management
            Console</a> in the <i>IAM User Guide</i>.</p> </note>
          schema:
            type: integer
            minimum: 900
            maximum: 43200
        - name: ExternalId
          in: query
          required: false
          description: '<p>A unique identifier that might be required when you assume a
            role in another account. If the administrator of the account to
            which the role belongs provided you with an external ID, then
            provide that value in the <code>ExternalId</code> parameter. This
            value can be any string, such as a passphrase or account number. A
            cross-account role is usually set up to trust everyone in an
            account. Therefore, the administrator of the trusting account might
            send an external ID to the administrator of the trusted account.
            That way, only someone with the ID can assume the role, rather than
            everyone in the account. For more information about the external ID,
            see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How
            to Use an External ID When Granting Access to Your AWS Resources to
            a Third Party</a> in the <i>IAM User Guide</i>.</p> <p>The regex
            used to validate this parameter is a string of characters consisting
            of upper- and lower-case alphanumeric characters with no spaces. You
            can also include underscores or any of the following characters:
            =,.@:/-</p>'
          schema:
            type: string
            minLength: 2
            maxLength: 1224
            pattern: "[\\w+=,.@:\\/-]*"
        - name: SerialNumber
          in: query
          required: false
          description: "<p>The identification number of the MFA device that is associated
            with the user who is making the <code>AssumeRole</code> call.
            Specify this value if the trust policy of the role being assumed
            includes a condition that requires MFA authentication. The value is
            either the serial number for a hardware device (such as
            <code>GAHT12345678</code>) or an Amazon Resource Name (ARN) for a
            virtual device (such as
            <code>arn:aws:iam::123456789012:mfa/user</code>).</p> <p>The regex
            used to validate this parameter is a string of characters consisting
            of upper- and lower-case alphanumeric characters with no spaces. You
            can also include underscores or any of the following characters:
            =,.@-</p>"
          schema:
            type: string
            minLength: 9
            maxLength: 256
            pattern: "[\\w+=/:,.@-]*"
        - name: TokenCode
          in: query
          required: false
          description: <p>The value provided by the MFA device, if the trust policy of the
            role being assumed requires MFA (that is, if the policy includes a
            condition that tests for MFA). If the role being assumed requires
            MFA and if the <code>TokenCode</code> value is missing or expired,
            the <code>AssumeRole</code> call returns an "access denied"
            error.</p> <p>The format for this parameter, as described by its
            regex pattern, is a sequence of six numeric digits.</p>
          schema:
            type: string
            minLength: 6
            maxLength: 6
            pattern: "[\\d]*"
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AssumeRole
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: AssumeRole
      operationId: POST AssumeRole
      description: "<p>Returns a set of temporary security credentials that you can use to
        access AWS resources that you might not normally have access to. These
        temporary credentials consist of an access key ID, a secret access key,
        and a security token. Typically, you use <code>AssumeRole</code> within
        your account or for cross-account access. For a comparison of
        <code>AssumeRole</code> with other API operations that produce temporary
        credentials, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html\">Requesting Temporary Security Credentials</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#stsapi_comparison\">Comparing the AWS STS API
        operations</a> in the <i>IAM User Guide</i>.</p> <important> <p>You
        cannot use AWS account root user credentials to call
        <code>AssumeRole</code>. You must use credentials for an IAM user or an
        IAM role to call <code>AssumeRole</code>.</p> </important> <p>For
        cross-account access, imagine that you own multiple accounts and need to
        access resources in each account. You could create long-term credentials
        in each account to access those resources. However, managing all those
        credentials and remembering which one can access which account can be
        time consuming. Instead, you can create one set of long-term credentials
        in one account. Then use temporary security credentials to access all
        the other accounts by assuming roles in those accounts. For more
        information about roles, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\"\
        >IAM Roles</a> in the <i>IAM User Guide</i>. </p> <p>By default, the
        temporary security credentials created by <code>AssumeRole</code> last
        for one hour. However, you can use the optional
        <code>DurationSeconds</code> parameter to specify the duration of your
        session. You can provide a value from 900 seconds (15 minutes) up to the
        maximum session duration setting for the role. This setting can have a
        value from 1 hour to 12 hours. To learn how to view the maximum value
        for your role, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml#id_roles_use_view-role-max-session\">View the Maximum Session
        Duration Setting for a Role</a> in the <i>IAM User Guide</i>. The
        maximum session duration limit applies when you use the
        <code>AssumeRole*</code> API operations or the <code>assume-role*</code>
        CLI commands. However the limit does not apply when you use those
        operations to create a console URL. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml\">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p> <p>The
        temporary security credentials created by <code>AssumeRole</code> can be
        used to make API calls to any AWS service with the following exception:
        You cannot call the AWS STS <code>GetFederationToken</code> or
        <code>GetSessionToken</code> API operations.</p> <p>(Optional) You can
        pass inline or managed <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">session policies</a> to this operation. You can
        pass a single JSON policy document to use as an inline session policy.
        You can also specify up to 10 managed policies to use as managed session
        policies. The plain text that you use for both inline and managed
        session policies shouldn't exceed 2048 characters. Passing policies to
        this operation returns new temporary credentials. The resulting
        session's permissions are the intersection of the role's identity-based
        policy and the session policies. You can use the role's temporary
        credentials in subsequent AWS API calls to access resources in the
        account that owns the role. You cannot use session policies to grant
        more permissions than those allowed by the identity-based policy of the
        role that is being assumed. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">Session Policies</a> in the <i>IAM User
        Guide</i>.</p> <p>To assume a role from a different account, your AWS
        account must be trusted by the role. The trust relationship is defined
        in the role's trust policy when the role is created. That trust policy
        states which accounts are allowed to delegate that access to users in
        the account. </p> <p>A user who wants to access a role in a different
        account must also have permissions that are delegated from the user
        account administrator. The administrator must attach a policy that
        allows the user to call <code>AssumeRole</code> for the ARN of the role
        in the other account. If the user is in the same account as the role,
        then you can do either of the following:</p> <ul> <li> <p>Attach a
        policy to the user (identical to the previous user in a different
        account).</p> </li> <li> <p>Add the user as a principal directly in the
        role's trust policy.</p> </li> </ul> <p>In this case, the trust policy
        acts as an IAM resource-based policy. Users in the same account as the
        role do not need explicit permission to assume the role. For more
        information about trust policies and resource-based policies, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html\">IAM Policies</a> in the <i>IAM User Guide</i>.</p> <p> <b>Using
        MFA with AssumeRole</b> </p> <p>(Optional) You can include multi-factor
        authentication (MFA) information when you call <code>AssumeRole</code>.
        This is useful for cross-account scenarios to ensure that the user that
        assumes the role has been authenticated with an AWS MFA device. In that
        scenario, the trust policy of the role being assumed includes a
        condition that tests for MFA authentication. If the caller does not
        include valid MFA information, the request to assume the role is denied.
        The condition in a trust policy that tests for MFA authentication might
        look like the following example.</p> <p> <code>\"Condition\": {\"Bool\":
        {\"aws:MultiFactorAuthPresent\": true}}</code> </p> <p>For more
        information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI\
        .html\">Configuring MFA-Protected API Access</a> in the <i>IAM User
        Guide</i> guide.</p> <p>To use MFA with <code>AssumeRole</code>, you
        pass values for the <code>SerialNumber</code> and <code>TokenCode</code>
        parameters. The <code>SerialNumber</code> value identifies the user's
        hardware or virtual MFA device. The <code>TokenCode</code> is the
        time-based one-time password (TOTP) that the MFA device produces. </p>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/AssumeRoleResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AssumeRole
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                RoleArn:
                  description: The Amazon Resource Name (ARN) of the role to assume.
                  type: string
                  minLength: 20
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\
                    \\uE000-\\uFFFD\\u10000-\\u10FFFF]+"
                RoleSessionName:
                  description: "<p>An identifier for the assumed role session.</p> <p>Use
                    the role session name to uniquely identify a session when
                    the same role is assumed by different principals or for
                    different reasons. In cross-account scenarios, the role
                    session name is visible to, and can be logged by the account
                    that owns the role. The role session name is also used in
                    the ARN of the assumed role principal. This means that
                    subsequent cross-account API requests that use the temporary
                    security credentials will expose the role session name to
                    the external account in their AWS CloudTrail logs.</p>
                    <p>The regex used to validate this parameter is a string of
                    characters consisting of upper- and lower-case alphanumeric
                    characters with no spaces. You can also include underscores
                    or any of the following characters: =,.@-</p>"
                  type: string
                  minLength: 2
                  maxLength: 64
                  pattern: "[\\w+=,.@-]*"
                PolicyArns:
                  description: <p>The Amazon Resource Names (ARNs) of the IAM managed
                    policies that you want to use as managed session policies.
                    The policies must exist in the same account as the role.</p>
                    <p>This parameter is optional. You can provide up to 10
                    managed policy ARNs. However, the plain text that you use
                    for both inline and managed session policies shouldn't
                    exceed 2048 characters. For more information about ARNs, see
                    <a
                    href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                    Resource Names (ARNs) and AWS Service Namespaces</a> in the
                    AWS General Reference.</p> <note> <p>The characters in this
                    parameter count towards the 2048 character session policy
                    guideline. However, an AWS conversion compresses the session
                    policies into a packed binary format that has a separate
                    limit. This is the enforced limit. The
                    <code>PackedPolicySize</code> response element indicates by
                    percentage how close the policy is to the upper size
                    limit.</p> </note> <p>Passing policies to this operation
                    returns new temporary credentials. The resulting session's
                    permissions are the intersection of the role's
                    identity-based policy and the session policies. You can use
                    the role's temporary credentials in subsequent AWS API calls
                    to access resources in the account that owns the role. You
                    cannot use session policies to grant more permissions than
                    those allowed by the identity-based policy of the role that
                    is being assumed. For more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p>
                  type: array
                  items:
                    type: string
                Policy:
                  description: <p>An IAM policy in JSON format that you want to use as an
                    inline session policy.</p> <p>This parameter is optional.
                    Passing policies to this operation returns new temporary
                    credentials. The resulting session's permissions are the
                    intersection of the role's identity-based policy and the
                    session policies. You can use the role's temporary
                    credentials in subsequent AWS API calls to access resources
                    in the account that owns the role. You cannot use session
                    policies to grant more permissions than those allowed by the
                    identity-based policy of the role that is being assumed. For
                    more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p> <p>The plain
                    text that you use for both inline and managed session
                    policies shouldn't exceed 2048 characters. The JSON policy
                    characters can be any ASCII character from the space
                    character to the end of the valid character list (\u0020
                    through \u00FF). It can also include the tab (\u0009),
                    linefeed (\u000A), and carriage return (\u000D)
                    characters.</p> <note> <p>The characters in this parameter
                    count towards the 2048 character session policy guideline.
                    However, an AWS conversion compresses the session policies
                    into a packed binary format that has a separate limit. This
                    is the enforced limit. The <code>PackedPolicySize</code>
                    response element indicates by percentage how close the
                    policy is to the upper size limit.</p> </note>
                  type: string
                  minLength: 1
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
                DurationSeconds:
                  description: <p>The duration, in seconds, of the role session. The value
                    can range from 900 seconds (15 minutes) up to the maximum
                    session duration setting for the role. This setting can have
                    a value from 1 hour to 12 hours. If you specify a value
                    higher than this setting, the operation fails. For example,
                    if you specify a session duration of 12 hours, but your
                    administrator set the maximum session duration to 6 hours,
                    your operation fails. To learn how to view the maximum value
                    for your role, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View
                    the Maximum Session Duration Setting for a Role</a> in the
                    <i>IAM User Guide</i>.</p> <p>By default, the value is set
                    to <code>3600</code> seconds. </p> <note> <p>The
                    <code>DurationSeconds</code> parameter is separate from the
                    duration of a console session that you might request using
                    the returned credentials. The request to the federation
                    endpoint for a console sign-in token takes a
                    <code>SessionDuration</code> parameter that specifies the
                    maximum length of the console session. For more information,
                    see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating
                    a URL that Enables Federated Users to Access the AWS
                    Management Console</a> in the <i>IAM User Guide</i>.</p>
                    </note>
                  type: integer
                  minimum: 900
                  maximum: 43200
                ExternalId:
                  description: '<p>A unique identifier that might be required when you
                    assume a role in another account. If the administrator of
                    the account to which the role belongs provided you with an
                    external ID, then provide that value in the
                    <code>ExternalId</code> parameter. This value can be any
                    string, such as a passphrase or account number. A
                    cross-account role is usually set up to trust everyone in an
                    account. Therefore, the administrator of the trusting
                    account might send an external ID to the administrator of
                    the trusted account. That way, only someone with the ID can
                    assume the role, rather than everyone in the account. For
                    more information about the external ID, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How
                    to Use an External ID When Granting Access to Your AWS
                    Resources to a Third Party</a> in the <i>IAM User
                    Guide</i>.</p> <p>The regex used to validate this parameter
                    is a string of characters consisting of upper- and
                    lower-case alphanumeric characters with no spaces. You can
                    also include underscores or any of the following characters:
                    =,.@:/-</p>'
                  type: string
                  minLength: 2
                  maxLength: 1224
                  pattern: "[\\w+=,.@:\\/-]*"
                SerialNumber:
                  description: "<p>The identification number of the MFA device that is
                    associated with the user who is making the
                    <code>AssumeRole</code> call. Specify this value if the
                    trust policy of the role being assumed includes a condition
                    that requires MFA authentication. The value is either the
                    serial number for a hardware device (such as
                    <code>GAHT12345678</code>) or an Amazon Resource Name (ARN)
                    for a virtual device (such as
                    <code>arn:aws:iam::123456789012:mfa/user</code>).</p> <p>The
                    regex used to validate this parameter is a string of
                    characters consisting of upper- and lower-case alphanumeric
                    characters with no spaces. You can also include underscores
                    or any of the following characters: =,.@-</p>"
                  type: string
                  minLength: 9
                  maxLength: 256
                  pattern: "[\\w+=/:,.@-]*"
                TokenCode:
                  description: <p>The value provided by the MFA device, if the trust policy
                    of the role being assumed requires MFA (that is, if the
                    policy includes a condition that tests for MFA). If the role
                    being assumed requires MFA and if the <code>TokenCode</code>
                    value is missing or expired, the <code>AssumeRole</code>
                    call returns an "access denied" error.</p> <p>The format for
                    this parameter, as described by its regex pattern, is a
                    sequence of six numeric digits.</p>
                  type: string
                  minLength: 6
                  maxLength: 6
                  pattern: "[\\d]*"
              required:
                - RoleArn
                - RoleSessionName
  /#Action=AssumeRoleWithSAML:
    get:
      x-aws-operation-name: AssumeRoleWithSAML
      operationId: GET AssumeRoleWithSAML
      description: "<p>Returns a set of temporary security credentials for users who have
        been authenticated via a SAML authentication response. This operation
        provides a mechanism for tying an enterprise identity store or directory
        to role-based AWS access without user-specific credentials or
        configuration. For a comparison of <code>AssumeRoleWithSAML</code> with
        the other API operations that produce temporary credentials, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html\">Requesting Temporary Security Credentials</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#stsapi_comparison\">Comparing the AWS STS API
        operations</a> in the <i>IAM User Guide</i>.</p> <p>The temporary
        security credentials returned by this operation consist of an access key
        ID, a secret access key, and a security token. Applications can use
        these temporary security credentials to sign calls to AWS services.</p>
        <p>By default, the temporary security credentials created by
        <code>AssumeRoleWithSAML</code> last for one hour. However, you can use
        the optional <code>DurationSeconds</code> parameter to specify the
        duration of your session. Your role session lasts for the duration that
        you specify, or until the time specified in the SAML authentication
        response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
        You can provide a <code>DurationSeconds</code> value from 900 seconds
        (15 minutes) up to the maximum session duration setting for the role.
        This setting can have a value from 1 hour to 12 hours. To learn how to
        view the maximum value for your role, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml#id_roles_use_view-role-max-session\">View the Maximum Session
        Duration Setting for a Role</a> in the <i>IAM User Guide</i>. The
        maximum session duration limit applies when you use the
        <code>AssumeRole*</code> API operations or the <code>assume-role*</code>
        CLI commands. However the limit does not apply when you use those
        operations to create a console URL. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml\">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p> <p>The
        temporary security credentials created by
        <code>AssumeRoleWithSAML</code> can be used to make API calls to any AWS
        service with the following exception: you cannot call the STS
        <code>GetFederationToken</code> or <code>GetSessionToken</code> API
        operations.</p> <p>(Optional) You can pass inline or managed <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">session policies</a> to this operation. You can
        pass a single JSON policy document to use as an inline session policy.
        You can also specify up to 10 managed policies to use as managed session
        policies. The plain text that you use for both inline and managed
        session policies shouldn't exceed 2048 characters. Passing policies to
        this operation returns new temporary credentials. The resulting
        session's permissions are the intersection of the role's identity-based
        policy and the session policies. You can use the role's temporary
        credentials in subsequent AWS API calls to access resources in the
        account that owns the role. You cannot use session policies to grant
        more permissions than those allowed by the identity-based policy of the
        role that is being assumed. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">Session Policies</a> in the <i>IAM User
        Guide</i>.</p> <p>Before your application can call
        <code>AssumeRoleWithSAML</code>, you must configure your SAML identity
        provider (IdP) to issue the claims required by AWS. Additionally, you
        must use AWS Identity and Access Management (IAM) to create a SAML
        provider entity in your AWS account that represents your identity
        provider. You must also create an IAM role that specifies this SAML
        provider in its trust policy. </p> <p>Calling
        <code>AssumeRoleWithSAML</code> does not require the use of AWS security
        credentials. The identity of the caller is validated by using keys in
        the metadata document that is uploaded for the SAML provider entity for
        your identity provider. </p> <important> <p>Calling
        <code>AssumeRoleWithSAML</code> can result in an entry in your AWS
        CloudTrail logs. The entry includes the value in the <code>NameID</code>
        element of the SAML assertion. We recommend that you use a
        <code>NameIDType</code> that is not associated with any personally
        identifiable information (PII). For example, you could instead use the
        Persistent Identifier
        (<code>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</code>).</p>
        </important> <p>For more information, see the following resources:</p>
        <ul> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_saml.html\">About SAML 2.0-based Federation</a> in the <i>IAM User
        Guide</i>. </p> </li> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_create_saml.html\">Creating SAML Identity Providers</a> in the
        <i>IAM User Guide</i>. </p> </li> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_create_saml_relying-party.html\">Configuring a Relying Party and
        Claims</a> in the <i>IAM User Guide</i>. </p> </li> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create\
        _for-idp_saml.html\">Creating a Role for SAML 2.0 Federation</a> in the
        <i>IAM User Guide</i>. </p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/AssumeRoleWithSAMLResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: IDPRejectedClaimException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/IDPRejectedClaimException"
        "483":
          description: InvalidIdentityTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidIdentityTokenException"
        "484":
          description: ExpiredTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ExpiredTokenException"
        "485":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: RoleArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the role that the caller is
            assuming.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE0\
              00-\\uFFFD\\u10000-\\u10FFFF]+"
        - name: PrincipalArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the SAML provider in IAM that
            describes the IdP.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE0\
              00-\\uFFFD\\u10000-\\u10FFFF]+"
        - name: SAMLAssertion
          in: query
          required: true
          description: <p>The base-64 encoded SAML authentication response provided by the
            IdP.</p> <p>For more information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html">Configuring
            a Relying Party and Adding Claims</a> in the <i>IAM User Guide</i>.
            </p>
          schema:
            type: string
            minLength: 4
            maxLength: 100000
        - name: PolicyArns
          in: query
          required: false
          description: <p>The Amazon Resource Names (ARNs) of the IAM managed policies that
            you want to use as managed session policies. The policies must exist
            in the same account as the role.</p> <p>This parameter is optional.
            You can provide up to 10 managed policy ARNs. However, the plain
            text that you use for both inline and managed session policies
            shouldn't exceed 2048 characters. For more information about ARNs,
            see <a
            href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
            General Reference.</p> <note> <p>The characters in this parameter
            count towards the 2048 character session policy guideline. However,
            an AWS conversion compresses the session policies into a packed
            binary format that has a separate limit. This is the enforced limit.
            The <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note> <p>Passing policies to this operation returns new temporary
            credentials. The resulting session's permissions are the
            intersection of the role's identity-based policy and the session
            policies. You can use the role's temporary credentials in subsequent
            AWS API calls to access resources in the account that owns the role.
            You cannot use session policies to grant more permissions than those
            allowed by the identity-based policy of the role that is being
            assumed. For more information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p>
          schema:
            type: array
            items:
              type: string
        - name: Policy
          in: query
          required: false
          description: <p>An IAM policy in JSON format that you want to use as an inline
            session policy.</p> <p>This parameter is optional. Passing policies
            to this operation returns new temporary credentials. The resulting
            session's permissions are the intersection of the role's
            identity-based policy and the session policies. You can use the
            role's temporary credentials in subsequent AWS API calls to access
            resources in the account that owns the role. You cannot use session
            policies to grant more permissions than those allowed by the
            identity-based policy of the role that is being assumed. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>. </p> <p>The plain text
            that you use for both inline and managed session policies shouldn't
            exceed 2048 characters. The JSON policy characters can be any ASCII
            character from the space character to the end of the valid character
            list (\u0020 through \u00FF). It can also include the tab (\u0009),
            linefeed (\u000A), and carriage return (\u000D) characters.</p>
            <note> <p>The characters in this parameter count towards the 2048
            character session policy guideline. However, an AWS conversion
            compresses the session policies into a packed binary format that has
            a separate limit. This is the enforced limit. The
            <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note>
          schema:
            type: string
            minLength: 1
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
        - name: DurationSeconds
          in: query
          required: false
          description: <p>The duration, in seconds, of the role session. Your role session
            lasts for the duration that you specify for the
            <code>DurationSeconds</code> parameter, or until the time specified
            in the SAML authentication response's
            <code>SessionNotOnOrAfter</code> value, whichever is shorter. You
            can provide a <code>DurationSeconds</code> value from 900 seconds
            (15 minutes) up to the maximum session duration setting for the
            role. This setting can have a value from 1 hour to 12 hours. If you
            specify a value higher than this setting, the operation fails. For
            example, if you specify a session duration of 12 hours, but your
            administrator set the maximum session duration to 6 hours, your
            operation fails. To learn how to view the maximum value for your
            role, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View
            the Maximum Session Duration Setting for a Role</a> in the <i>IAM
            User Guide</i>.</p> <p>By default, the value is set to
            <code>3600</code> seconds. </p> <note> <p>The
            <code>DurationSeconds</code> parameter is separate from the duration
            of a console session that you might request using the returned
            credentials. The request to the federation endpoint for a console
            sign-in token takes a <code>SessionDuration</code> parameter that
            specifies the maximum length of the console session. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating
            a URL that Enables Federated Users to Access the AWS Management
            Console</a> in the <i>IAM User Guide</i>.</p> </note>
          schema:
            type: integer
            minimum: 900
            maximum: 43200
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AssumeRoleWithSAML
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: AssumeRoleWithSAML
      operationId: POST AssumeRoleWithSAML
      description: "<p>Returns a set of temporary security credentials for users who have
        been authenticated via a SAML authentication response. This operation
        provides a mechanism for tying an enterprise identity store or directory
        to role-based AWS access without user-specific credentials or
        configuration. For a comparison of <code>AssumeRoleWithSAML</code> with
        the other API operations that produce temporary credentials, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html\">Requesting Temporary Security Credentials</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#stsapi_comparison\">Comparing the AWS STS API
        operations</a> in the <i>IAM User Guide</i>.</p> <p>The temporary
        security credentials returned by this operation consist of an access key
        ID, a secret access key, and a security token. Applications can use
        these temporary security credentials to sign calls to AWS services.</p>
        <p>By default, the temporary security credentials created by
        <code>AssumeRoleWithSAML</code> last for one hour. However, you can use
        the optional <code>DurationSeconds</code> parameter to specify the
        duration of your session. Your role session lasts for the duration that
        you specify, or until the time specified in the SAML authentication
        response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
        You can provide a <code>DurationSeconds</code> value from 900 seconds
        (15 minutes) up to the maximum session duration setting for the role.
        This setting can have a value from 1 hour to 12 hours. To learn how to
        view the maximum value for your role, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml#id_roles_use_view-role-max-session\">View the Maximum Session
        Duration Setting for a Role</a> in the <i>IAM User Guide</i>. The
        maximum session duration limit applies when you use the
        <code>AssumeRole*</code> API operations or the <code>assume-role*</code>
        CLI commands. However the limit does not apply when you use those
        operations to create a console URL. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml\">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p> <p>The
        temporary security credentials created by
        <code>AssumeRoleWithSAML</code> can be used to make API calls to any AWS
        service with the following exception: you cannot call the STS
        <code>GetFederationToken</code> or <code>GetSessionToken</code> API
        operations.</p> <p>(Optional) You can pass inline or managed <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">session policies</a> to this operation. You can
        pass a single JSON policy document to use as an inline session policy.
        You can also specify up to 10 managed policies to use as managed session
        policies. The plain text that you use for both inline and managed
        session policies shouldn't exceed 2048 characters. Passing policies to
        this operation returns new temporary credentials. The resulting
        session's permissions are the intersection of the role's identity-based
        policy and the session policies. You can use the role's temporary
        credentials in subsequent AWS API calls to access resources in the
        account that owns the role. You cannot use session policies to grant
        more permissions than those allowed by the identity-based policy of the
        role that is being assumed. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">Session Policies</a> in the <i>IAM User
        Guide</i>.</p> <p>Before your application can call
        <code>AssumeRoleWithSAML</code>, you must configure your SAML identity
        provider (IdP) to issue the claims required by AWS. Additionally, you
        must use AWS Identity and Access Management (IAM) to create a SAML
        provider entity in your AWS account that represents your identity
        provider. You must also create an IAM role that specifies this SAML
        provider in its trust policy. </p> <p>Calling
        <code>AssumeRoleWithSAML</code> does not require the use of AWS security
        credentials. The identity of the caller is validated by using keys in
        the metadata document that is uploaded for the SAML provider entity for
        your identity provider. </p> <important> <p>Calling
        <code>AssumeRoleWithSAML</code> can result in an entry in your AWS
        CloudTrail logs. The entry includes the value in the <code>NameID</code>
        element of the SAML assertion. We recommend that you use a
        <code>NameIDType</code> that is not associated with any personally
        identifiable information (PII). For example, you could instead use the
        Persistent Identifier
        (<code>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</code>).</p>
        </important> <p>For more information, see the following resources:</p>
        <ul> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_saml.html\">About SAML 2.0-based Federation</a> in the <i>IAM User
        Guide</i>. </p> </li> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_create_saml.html\">Creating SAML Identity Providers</a> in the
        <i>IAM User Guide</i>. </p> </li> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_create_saml_relying-party.html\">Configuring a Relying Party and
        Claims</a> in the <i>IAM User Guide</i>. </p> </li> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create\
        _for-idp_saml.html\">Creating a Role for SAML 2.0 Federation</a> in the
        <i>IAM User Guide</i>. </p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/AssumeRoleWithSAMLResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: IDPRejectedClaimException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/IDPRejectedClaimException"
        "483":
          description: InvalidIdentityTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidIdentityTokenException"
        "484":
          description: ExpiredTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ExpiredTokenException"
        "485":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AssumeRoleWithSAML
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                RoleArn:
                  description: The Amazon Resource Name (ARN) of the role that the caller
                    is assuming.
                  type: string
                  minLength: 20
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\
                    \\uE000-\\uFFFD\\u10000-\\u10FFFF]+"
                PrincipalArn:
                  description: The Amazon Resource Name (ARN) of the SAML provider in IAM
                    that describes the IdP.
                  type: string
                  minLength: 20
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\
                    \\uE000-\\uFFFD\\u10000-\\u10FFFF]+"
                SAMLAssertion:
                  description: <p>The base-64 encoded SAML authentication response provided
                    by the IdP.</p> <p>For more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html">Configuring
                    a Relying Party and Adding Claims</a> in the <i>IAM User
                    Guide</i>. </p>
                  type: string
                  minLength: 4
                  maxLength: 100000
                PolicyArns:
                  description: <p>The Amazon Resource Names (ARNs) of the IAM managed
                    policies that you want to use as managed session policies.
                    The policies must exist in the same account as the role.</p>
                    <p>This parameter is optional. You can provide up to 10
                    managed policy ARNs. However, the plain text that you use
                    for both inline and managed session policies shouldn't
                    exceed 2048 characters. For more information about ARNs, see
                    <a
                    href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                    Resource Names (ARNs) and AWS Service Namespaces</a> in the
                    AWS General Reference.</p> <note> <p>The characters in this
                    parameter count towards the 2048 character session policy
                    guideline. However, an AWS conversion compresses the session
                    policies into a packed binary format that has a separate
                    limit. This is the enforced limit. The
                    <code>PackedPolicySize</code> response element indicates by
                    percentage how close the policy is to the upper size
                    limit.</p> </note> <p>Passing policies to this operation
                    returns new temporary credentials. The resulting session's
                    permissions are the intersection of the role's
                    identity-based policy and the session policies. You can use
                    the role's temporary credentials in subsequent AWS API calls
                    to access resources in the account that owns the role. You
                    cannot use session policies to grant more permissions than
                    those allowed by the identity-based policy of the role that
                    is being assumed. For more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p>
                  type: array
                  items:
                    type: string
                Policy:
                  description: <p>An IAM policy in JSON format that you want to use as an
                    inline session policy.</p> <p>This parameter is optional.
                    Passing policies to this operation returns new temporary
                    credentials. The resulting session's permissions are the
                    intersection of the role's identity-based policy and the
                    session policies. You can use the role's temporary
                    credentials in subsequent AWS API calls to access resources
                    in the account that owns the role. You cannot use session
                    policies to grant more permissions than those allowed by the
                    identity-based policy of the role that is being assumed. For
                    more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>. </p> <p>The plain
                    text that you use for both inline and managed session
                    policies shouldn't exceed 2048 characters. The JSON policy
                    characters can be any ASCII character from the space
                    character to the end of the valid character list (\u0020
                    through \u00FF). It can also include the tab (\u0009),
                    linefeed (\u000A), and carriage return (\u000D)
                    characters.</p> <note> <p>The characters in this parameter
                    count towards the 2048 character session policy guideline.
                    However, an AWS conversion compresses the session policies
                    into a packed binary format that has a separate limit. This
                    is the enforced limit. The <code>PackedPolicySize</code>
                    response element indicates by percentage how close the
                    policy is to the upper size limit.</p> </note>
                  type: string
                  minLength: 1
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
                DurationSeconds:
                  description: <p>The duration, in seconds, of the role session. Your role
                    session lasts for the duration that you specify for the
                    <code>DurationSeconds</code> parameter, or until the time
                    specified in the SAML authentication response's
                    <code>SessionNotOnOrAfter</code> value, whichever is
                    shorter. You can provide a <code>DurationSeconds</code>
                    value from 900 seconds (15 minutes) up to the maximum
                    session duration setting for the role. This setting can have
                    a value from 1 hour to 12 hours. If you specify a value
                    higher than this setting, the operation fails. For example,
                    if you specify a session duration of 12 hours, but your
                    administrator set the maximum session duration to 6 hours,
                    your operation fails. To learn how to view the maximum value
                    for your role, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View
                    the Maximum Session Duration Setting for a Role</a> in the
                    <i>IAM User Guide</i>.</p> <p>By default, the value is set
                    to <code>3600</code> seconds. </p> <note> <p>The
                    <code>DurationSeconds</code> parameter is separate from the
                    duration of a console session that you might request using
                    the returned credentials. The request to the federation
                    endpoint for a console sign-in token takes a
                    <code>SessionDuration</code> parameter that specifies the
                    maximum length of the console session. For more information,
                    see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating
                    a URL that Enables Federated Users to Access the AWS
                    Management Console</a> in the <i>IAM User Guide</i>.</p>
                    </note>
                  type: integer
                  minimum: 900
                  maximum: 43200
              required:
                - RoleArn
                - PrincipalArn
                - SAMLAssertion
  /#Action=AssumeRoleWithWebIdentity:
    get:
      x-aws-operation-name: AssumeRoleWithWebIdentity
      operationId: GET AssumeRoleWithWebIdentity
      description: "<p>Returns a set of temporary security credentials for users who have
        been authenticated in a mobile or web application with a web identity
        provider. Example providers include Amazon Cognito, Login with Amazon,
        Facebook, Google, or any OpenID Connect-compatible identity
        provider.</p> <note> <p>For mobile applications, we recommend that you
        use Amazon Cognito. You can use Amazon Cognito with the <a
        href=\"http://aws.amazon.com/sdkforios/\">AWS SDK for iOS Developer
        Guide</a> and the <a href=\"http://aws.amazon.com/sdkforandroid/\">AWS
        SDK for Android Developer Guide</a> to uniquely identify a user. You can
        also supply the user with a consistent identity throughout the lifetime
        of an application.</p> <p>To learn more about Amazon Cognito, see <a
        href=\"https://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/\
        cognito-auth.html#d0e840\">Amazon Cognito Overview</a> in <i>AWS SDK for
        Android Developer Guide</i> and <a
        href=\"https://docs.aws.amazon.com/mobile/sdkforios/developerguide/cogn\
        ito-auth.html#d0e664\">Amazon Cognito Overview</a> in the <i>AWS SDK for
        iOS Developer Guide</i>.</p> </note> <p>Calling
        <code>AssumeRoleWithWebIdentity</code> does not require the use of AWS
        security credentials. Therefore, you can distribute an application (for
        example, on mobile devices) that requests temporary security credentials
        without including long-term AWS credentials in the application. You also
        don't need to deploy server-based proxy services that use long-term AWS
        credentials. Instead, the identity of the caller is validated by using a
        token from the web identity provider. For a comparison of
        <code>AssumeRoleWithWebIdentity</code> with the other API operations
        that produce temporary credentials, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html\">Requesting Temporary Security Credentials</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#stsapi_comparison\">Comparing the AWS STS API
        operations</a> in the <i>IAM User Guide</i>.</p> <p>The temporary
        security credentials returned by this API consist of an access key ID, a
        secret access key, and a security token. Applications can use these
        temporary security credentials to sign calls to AWS service API
        operations.</p> <p>By default, the temporary security credentials
        created by <code>AssumeRoleWithWebIdentity</code> last for one hour.
        However, you can use the optional <code>DurationSeconds</code> parameter
        to specify the duration of your session. You can provide a value from
        900 seconds (15 minutes) up to the maximum session duration setting for
        the role. This setting can have a value from 1 hour to 12 hours. To
        learn how to view the maximum value for your role, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml#id_roles_use_view-role-max-session\">View the Maximum Session
        Duration Setting for a Role</a> in the <i>IAM User Guide</i>. The
        maximum session duration limit applies when you use the
        <code>AssumeRole*</code> API operations or the <code>assume-role*</code>
        CLI commands. However the limit does not apply when you use those
        operations to create a console URL. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml\">Using IAM Roles</a> in the <i>IAM User Guide</i>. </p> <p>The
        temporary security credentials created by
        <code>AssumeRoleWithWebIdentity</code> can be used to make API calls to
        any AWS service with the following exception: you cannot call the STS
        <code>GetFederationToken</code> or <code>GetSessionToken</code> API
        operations.</p> <p>(Optional) You can pass inline or managed <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">session policies</a> to this operation. You can
        pass a single JSON policy document to use as an inline session policy.
        You can also specify up to 10 managed policies to use as managed session
        policies. The plain text that you use for both inline and managed
        session policies shouldn't exceed 2048 characters. Passing policies to
        this operation returns new temporary credentials. The resulting
        session's permissions are the intersection of the role's identity-based
        policy and the session policies. You can use the role's temporary
        credentials in subsequent AWS API calls to access resources in the
        account that owns the role. You cannot use session policies to grant
        more permissions than those allowed by the identity-based policy of the
        role that is being assumed. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">Session Policies</a> in the <i>IAM User
        Guide</i>.</p> <p>Before your application can call
        <code>AssumeRoleWithWebIdentity</code>, you must have an identity token
        from a supported identity provider and create a role that the
        application can assume. The role that your application assumes must
        trust the identity provider that is associated with the identity token.
        In other words, the identity provider must be specified in the role's
        trust policy. </p> <important> <p>Calling
        <code>AssumeRoleWithWebIdentity</code> can result in an entry in your
        AWS CloudTrail logs. The entry includes the <a
        href=\"http://openid.net/specs/openid-connect-core-1_0.html#Claims\">Su\
        bject</a> of the provided Web Identity Token. We recommend that you
        avoid using any personally identifiable information (PII) in this field.
        For example, you could instead use a GUID or a pairwise identifier, as
        <a
        href=\"http://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTy\
        pes\">suggested in the OIDC specification</a>.</p> </important> <p>For
        more information about how to use web identity federation and the
        <code>AssumeRoleWithWebIdentity</code> API, see the following resources:
        </p> <ul> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_oidc_manual.html\">Using Web Identity Federation API Operations for
        Mobile Apps</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#api_assumerolewithwebidentity\">Federation Through a
        Web-based Identity Provider</a>. </p> </li> <li> <p> <a
        href=\"https://web-identity-federation-playground.s3.amazonaws.com/inde\
        x.html\"> Web Identity Federation Playground</a>. Walk through the
        process of authenticating through Login with Amazon, Facebook, or
        Google, getting temporary security credentials, and then using those
        credentials to make a request to AWS. </p> </li> <li> <p> <a
        href=\"http://aws.amazon.com/sdkforios/\">AWS SDK for iOS Developer
        Guide</a> and <a href=\"http://aws.amazon.com/sdkforandroid/\">AWS SDK
        for Android Developer Guide</a>. These toolkits contain sample apps that
        show how to invoke the identity providers, and then how to use the
        information from these providers to get and use temporary security
        credentials. </p> </li> <li> <p> <a
        href=\"http://aws.amazon.com/articles/web-identity-federation-with-mobi\
        le-applications\">Web Identity Federation with Mobile Applications</a>.
        This article discusses web identity federation and shows an example of
        how to use web identity federation to get access to content in Amazon
        S3. </p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/AssumeRoleWithWebIdentityResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: IDPRejectedClaimException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/IDPRejectedClaimException"
        "483":
          description: IDPCommunicationErrorException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/IDPCommunicationErrorException"
        "484":
          description: InvalidIdentityTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidIdentityTokenException"
        "485":
          description: ExpiredTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ExpiredTokenException"
        "486":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: RoleArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the role that the caller is
            assuming.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE0\
              00-\\uFFFD\\u10000-\\u10FFFF]+"
        - name: RoleSessionName
          in: query
          required: true
          description: "<p>An identifier for the assumed role session. Typically, you pass
            the name or identifier that is associated with the user who is using
            your application. That way, the temporary security credentials that
            your application will use are associated with that user. This
            session name is included as part of the ARN and assumed role ID in
            the <code>AssumedRoleUser</code> response element.</p> <p>The regex
            used to validate this parameter is a string of characters consisting
            of upper- and lower-case alphanumeric characters with no spaces. You
            can also include underscores or any of the following characters:
            =,.@-</p>"
          schema:
            type: string
            minLength: 2
            maxLength: 64
            pattern: "[\\w+=,.@-]*"
        - name: WebIdentityToken
          in: query
          required: true
          description: "The OAuth 2.0 access token or OpenID Connect ID token that is
            provided by the identity provider. Your application must get this
            token by authenticating the user who is using your application with
            a web identity provider before the application makes an
            <code>AssumeRoleWithWebIdentity</code> call. "
          schema:
            type: string
            minLength: 4
            maxLength: 2048
        - name: ProviderId
          in: query
          required: false
          description: <p>The fully qualified host component of the domain name of the
            identity provider.</p> <p>Specify this value only for OAuth 2.0
            access tokens. Currently <code>www.amazon.com</code> and
            <code>graph.facebook.com</code> are the only supported identity
            providers for OAuth 2.0 access tokens. Do not include URL schemes
            and port numbers.</p> <p>Do not specify this value for OpenID
            Connect ID tokens.</p>
          schema:
            type: string
            minLength: 4
            maxLength: 2048
        - name: PolicyArns
          in: query
          required: false
          description: <p>The Amazon Resource Names (ARNs) of the IAM managed policies that
            you want to use as managed session policies. The policies must exist
            in the same account as the role.</p> <p>This parameter is optional.
            You can provide up to 10 managed policy ARNs. However, the plain
            text that you use for both inline and managed session policies
            shouldn't exceed 2048 characters. For more information about ARNs,
            see <a
            href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
            General Reference.</p> <note> <p>The characters in this parameter
            count towards the 2048 character session policy guideline. However,
            an AWS conversion compresses the session policies into a packed
            binary format that has a separate limit. This is the enforced limit.
            The <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note> <p>Passing policies to this operation returns new temporary
            credentials. The resulting session's permissions are the
            intersection of the role's identity-based policy and the session
            policies. You can use the role's temporary credentials in subsequent
            AWS API calls to access resources in the account that owns the role.
            You cannot use session policies to grant more permissions than those
            allowed by the identity-based policy of the role that is being
            assumed. For more information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p>
          schema:
            type: array
            items:
              type: string
        - name: Policy
          in: query
          required: false
          description: <p>An IAM policy in JSON format that you want to use as an inline
            session policy.</p> <p>This parameter is optional. Passing policies
            to this operation returns new temporary credentials. The resulting
            session's permissions are the intersection of the role's
            identity-based policy and the session policies. You can use the
            role's temporary credentials in subsequent AWS API calls to access
            resources in the account that owns the role. You cannot use session
            policies to grant more permissions than those allowed by the
            identity-based policy of the role that is being assumed. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p> <p>The plain text
            that you use for both inline and managed session policies shouldn't
            exceed 2048 characters. The JSON policy characters can be any ASCII
            character from the space character to the end of the valid character
            list (\u0020 through \u00FF). It can also include the tab (\u0009),
            linefeed (\u000A), and carriage return (\u000D) characters.</p>
            <note> <p>The characters in this parameter count towards the 2048
            character session policy guideline. However, an AWS conversion
            compresses the session policies into a packed binary format that has
            a separate limit. This is the enforced limit. The
            <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note>
          schema:
            type: string
            minLength: 1
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
        - name: DurationSeconds
          in: query
          required: false
          description: <p>The duration, in seconds, of the role session. The value can
            range from 900 seconds (15 minutes) up to the maximum session
            duration setting for the role. This setting can have a value from 1
            hour to 12 hours. If you specify a value higher than this setting,
            the operation fails. For example, if you specify a session duration
            of 12 hours, but your administrator set the maximum session duration
            to 6 hours, your operation fails. To learn how to view the maximum
            value for your role, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View
            the Maximum Session Duration Setting for a Role</a> in the <i>IAM
            User Guide</i>.</p> <p>By default, the value is set to
            <code>3600</code> seconds. </p> <note> <p>The
            <code>DurationSeconds</code> parameter is separate from the duration
            of a console session that you might request using the returned
            credentials. The request to the federation endpoint for a console
            sign-in token takes a <code>SessionDuration</code> parameter that
            specifies the maximum length of the console session. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating
            a URL that Enables Federated Users to Access the AWS Management
            Console</a> in the <i>IAM User Guide</i>.</p> </note>
          schema:
            type: integer
            minimum: 900
            maximum: 43200
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AssumeRoleWithWebIdentity
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: AssumeRoleWithWebIdentity
      operationId: POST AssumeRoleWithWebIdentity
      description: "<p>Returns a set of temporary security credentials for users who have
        been authenticated in a mobile or web application with a web identity
        provider. Example providers include Amazon Cognito, Login with Amazon,
        Facebook, Google, or any OpenID Connect-compatible identity
        provider.</p> <note> <p>For mobile applications, we recommend that you
        use Amazon Cognito. You can use Amazon Cognito with the <a
        href=\"http://aws.amazon.com/sdkforios/\">AWS SDK for iOS Developer
        Guide</a> and the <a href=\"http://aws.amazon.com/sdkforandroid/\">AWS
        SDK for Android Developer Guide</a> to uniquely identify a user. You can
        also supply the user with a consistent identity throughout the lifetime
        of an application.</p> <p>To learn more about Amazon Cognito, see <a
        href=\"https://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/\
        cognito-auth.html#d0e840\">Amazon Cognito Overview</a> in <i>AWS SDK for
        Android Developer Guide</i> and <a
        href=\"https://docs.aws.amazon.com/mobile/sdkforios/developerguide/cogn\
        ito-auth.html#d0e664\">Amazon Cognito Overview</a> in the <i>AWS SDK for
        iOS Developer Guide</i>.</p> </note> <p>Calling
        <code>AssumeRoleWithWebIdentity</code> does not require the use of AWS
        security credentials. Therefore, you can distribute an application (for
        example, on mobile devices) that requests temporary security credentials
        without including long-term AWS credentials in the application. You also
        don't need to deploy server-based proxy services that use long-term AWS
        credentials. Instead, the identity of the caller is validated by using a
        token from the web identity provider. For a comparison of
        <code>AssumeRoleWithWebIdentity</code> with the other API operations
        that produce temporary credentials, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html\">Requesting Temporary Security Credentials</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#stsapi_comparison\">Comparing the AWS STS API
        operations</a> in the <i>IAM User Guide</i>.</p> <p>The temporary
        security credentials returned by this API consist of an access key ID, a
        secret access key, and a security token. Applications can use these
        temporary security credentials to sign calls to AWS service API
        operations.</p> <p>By default, the temporary security credentials
        created by <code>AssumeRoleWithWebIdentity</code> last for one hour.
        However, you can use the optional <code>DurationSeconds</code> parameter
        to specify the duration of your session. You can provide a value from
        900 seconds (15 minutes) up to the maximum session duration setting for
        the role. This setting can have a value from 1 hour to 12 hours. To
        learn how to view the maximum value for your role, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml#id_roles_use_view-role-max-session\">View the Maximum Session
        Duration Setting for a Role</a> in the <i>IAM User Guide</i>. The
        maximum session duration limit applies when you use the
        <code>AssumeRole*</code> API operations or the <code>assume-role*</code>
        CLI commands. However the limit does not apply when you use those
        operations to create a console URL. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.ht\
        ml\">Using IAM Roles</a> in the <i>IAM User Guide</i>. </p> <p>The
        temporary security credentials created by
        <code>AssumeRoleWithWebIdentity</code> can be used to make API calls to
        any AWS service with the following exception: you cannot call the STS
        <code>GetFederationToken</code> or <code>GetSessionToken</code> API
        operations.</p> <p>(Optional) You can pass inline or managed <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">session policies</a> to this operation. You can
        pass a single JSON policy document to use as an inline session policy.
        You can also specify up to 10 managed policies to use as managed session
        policies. The plain text that you use for both inline and managed
        session policies shouldn't exceed 2048 characters. Passing policies to
        this operation returns new temporary credentials. The resulting
        session's permissions are the intersection of the role's identity-based
        policy and the session policies. You can use the role's temporary
        credentials in subsequent AWS API calls to access resources in the
        account that owns the role. You cannot use session policies to grant
        more permissions than those allowed by the identity-based policy of the
        role that is being assumed. For more information, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies\
        .html#policies_session\">Session Policies</a> in the <i>IAM User
        Guide</i>.</p> <p>Before your application can call
        <code>AssumeRoleWithWebIdentity</code>, you must have an identity token
        from a supported identity provider and create a role that the
        application can assume. The role that your application assumes must
        trust the identity provider that is associated with the identity token.
        In other words, the identity provider must be specified in the role's
        trust policy. </p> <important> <p>Calling
        <code>AssumeRoleWithWebIdentity</code> can result in an entry in your
        AWS CloudTrail logs. The entry includes the <a
        href=\"http://openid.net/specs/openid-connect-core-1_0.html#Claims\">Su\
        bject</a> of the provided Web Identity Token. We recommend that you
        avoid using any personally identifiable information (PII) in this field.
        For example, you could instead use a GUID or a pairwise identifier, as
        <a
        href=\"http://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTy\
        pes\">suggested in the OIDC specification</a>.</p> </important> <p>For
        more information about how to use web identity federation and the
        <code>AssumeRoleWithWebIdentity</code> API, see the following resources:
        </p> <ul> <li> <p> <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_provid\
        ers_oidc_manual.html\">Using Web Identity Federation API Operations for
        Mobile Apps</a> and <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        temp_request.html#api_assumerolewithwebidentity\">Federation Through a
        Web-based Identity Provider</a>. </p> </li> <li> <p> <a
        href=\"https://web-identity-federation-playground.s3.amazonaws.com/inde\
        x.html\"> Web Identity Federation Playground</a>. Walk through the
        process of authenticating through Login with Amazon, Facebook, or
        Google, getting temporary security credentials, and then using those
        credentials to make a request to AWS. </p> </li> <li> <p> <a
        href=\"http://aws.amazon.com/sdkforios/\">AWS SDK for iOS Developer
        Guide</a> and <a href=\"http://aws.amazon.com/sdkforandroid/\">AWS SDK
        for Android Developer Guide</a>. These toolkits contain sample apps that
        show how to invoke the identity providers, and then how to use the
        information from these providers to get and use temporary security
        credentials. </p> </li> <li> <p> <a
        href=\"http://aws.amazon.com/articles/web-identity-federation-with-mobi\
        le-applications\">Web Identity Federation with Mobile Applications</a>.
        This article discusses web identity federation and shows an example of
        how to use web identity federation to get access to content in Amazon
        S3. </p> </li> </ul>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/AssumeRoleWithWebIdentityResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: IDPRejectedClaimException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/IDPRejectedClaimException"
        "483":
          description: IDPCommunicationErrorException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/IDPCommunicationErrorException"
        "484":
          description: InvalidIdentityTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidIdentityTokenException"
        "485":
          description: ExpiredTokenException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ExpiredTokenException"
        "486":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AssumeRoleWithWebIdentity
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                RoleArn:
                  description: The Amazon Resource Name (ARN) of the role that the caller
                    is assuming.
                  type: string
                  minLength: 20
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\
                    \\uE000-\\uFFFD\\u10000-\\u10FFFF]+"
                RoleSessionName:
                  description: "<p>An identifier for the assumed role session. Typically,
                    you pass the name or identifier that is associated with the
                    user who is using your application. That way, the temporary
                    security credentials that your application will use are
                    associated with that user. This session name is included as
                    part of the ARN and assumed role ID in the
                    <code>AssumedRoleUser</code> response element.</p> <p>The
                    regex used to validate this parameter is a string of
                    characters consisting of upper- and lower-case alphanumeric
                    characters with no spaces. You can also include underscores
                    or any of the following characters: =,.@-</p>"
                  type: string
                  minLength: 2
                  maxLength: 64
                  pattern: "[\\w+=,.@-]*"
                WebIdentityToken:
                  description: "The OAuth 2.0 access token or OpenID Connect ID token that
                    is provided by the identity provider. Your application must
                    get this token by authenticating the user who is using your
                    application with a web identity provider before the
                    application makes an <code>AssumeRoleWithWebIdentity</code>
                    call. "
                  type: string
                  minLength: 4
                  maxLength: 2048
                ProviderId:
                  description: <p>The fully qualified host component of the domain name of
                    the identity provider.</p> <p>Specify this value only for
                    OAuth 2.0 access tokens. Currently
                    <code>www.amazon.com</code> and
                    <code>graph.facebook.com</code> are the only supported
                    identity providers for OAuth 2.0 access tokens. Do not
                    include URL schemes and port numbers.</p> <p>Do not specify
                    this value for OpenID Connect ID tokens.</p>
                  type: string
                  minLength: 4
                  maxLength: 2048
                PolicyArns:
                  description: <p>The Amazon Resource Names (ARNs) of the IAM managed
                    policies that you want to use as managed session policies.
                    The policies must exist in the same account as the role.</p>
                    <p>This parameter is optional. You can provide up to 10
                    managed policy ARNs. However, the plain text that you use
                    for both inline and managed session policies shouldn't
                    exceed 2048 characters. For more information about ARNs, see
                    <a
                    href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                    Resource Names (ARNs) and AWS Service Namespaces</a> in the
                    AWS General Reference.</p> <note> <p>The characters in this
                    parameter count towards the 2048 character session policy
                    guideline. However, an AWS conversion compresses the session
                    policies into a packed binary format that has a separate
                    limit. This is the enforced limit. The
                    <code>PackedPolicySize</code> response element indicates by
                    percentage how close the policy is to the upper size
                    limit.</p> </note> <p>Passing policies to this operation
                    returns new temporary credentials. The resulting session's
                    permissions are the intersection of the role's
                    identity-based policy and the session policies. You can use
                    the role's temporary credentials in subsequent AWS API calls
                    to access resources in the account that owns the role. You
                    cannot use session policies to grant more permissions than
                    those allowed by the identity-based policy of the role that
                    is being assumed. For more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p>
                  type: array
                  items:
                    type: string
                Policy:
                  description: <p>An IAM policy in JSON format that you want to use as an
                    inline session policy.</p> <p>This parameter is optional.
                    Passing policies to this operation returns new temporary
                    credentials. The resulting session's permissions are the
                    intersection of the role's identity-based policy and the
                    session policies. You can use the role's temporary
                    credentials in subsequent AWS API calls to access resources
                    in the account that owns the role. You cannot use session
                    policies to grant more permissions than those allowed by the
                    identity-based policy of the role that is being assumed. For
                    more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p> <p>The plain
                    text that you use for both inline and managed session
                    policies shouldn't exceed 2048 characters. The JSON policy
                    characters can be any ASCII character from the space
                    character to the end of the valid character list (\u0020
                    through \u00FF). It can also include the tab (\u0009),
                    linefeed (\u000A), and carriage return (\u000D)
                    characters.</p> <note> <p>The characters in this parameter
                    count towards the 2048 character session policy guideline.
                    However, an AWS conversion compresses the session policies
                    into a packed binary format that has a separate limit. This
                    is the enforced limit. The <code>PackedPolicySize</code>
                    response element indicates by percentage how close the
                    policy is to the upper size limit.</p> </note>
                  type: string
                  minLength: 1
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
                DurationSeconds:
                  description: <p>The duration, in seconds, of the role session. The value
                    can range from 900 seconds (15 minutes) up to the maximum
                    session duration setting for the role. This setting can have
                    a value from 1 hour to 12 hours. If you specify a value
                    higher than this setting, the operation fails. For example,
                    if you specify a session duration of 12 hours, but your
                    administrator set the maximum session duration to 6 hours,
                    your operation fails. To learn how to view the maximum value
                    for your role, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View
                    the Maximum Session Duration Setting for a Role</a> in the
                    <i>IAM User Guide</i>.</p> <p>By default, the value is set
                    to <code>3600</code> seconds. </p> <note> <p>The
                    <code>DurationSeconds</code> parameter is separate from the
                    duration of a console session that you might request using
                    the returned credentials. The request to the federation
                    endpoint for a console sign-in token takes a
                    <code>SessionDuration</code> parameter that specifies the
                    maximum length of the console session. For more information,
                    see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating
                    a URL that Enables Federated Users to Access the AWS
                    Management Console</a> in the <i>IAM User Guide</i>.</p>
                    </note>
                  type: integer
                  minimum: 900
                  maximum: 43200
              required:
                - RoleArn
                - RoleSessionName
                - WebIdentityToken
  /#Action=DecodeAuthorizationMessage:
    get:
      x-aws-operation-name: DecodeAuthorizationMessage
      operationId: GET DecodeAuthorizationMessage
      description: <p>Decodes additional information about the authorization status of a
        request from an encoded message returned in response to an AWS
        request.</p> <p>For example, if a user is not authorized to perform an
        operation that he or she has requested, the request returns a
        <code>Client.UnauthorizedOperation</code> response (an HTTP 403
        response). Some AWS operations additionally return an encoded message
        that can provide details about this authorization failure. </p> <note>
        <p>Only certain AWS operations return an encoded authorization message.
        The documentation for an individual operation indicates whether that
        operation returns an encoded message in addition to returning an HTTP
        code.</p> </note> <p>The message is encoded because the details of the
        authorization status can constitute privileged information that the user
        who requested the operation should not see. To decode an authorization
        status message, a user must be granted permissions via an IAM policy to
        request the <code>DecodeAuthorizationMessage</code>
        (<code>sts:DecodeAuthorizationMessage</code>) action. </p> <p>The
        decoded message includes the following type of information:</p> <ul>
        <li> <p>Whether the request was denied due to an explicit deny or due to
        the absence of an explicit allow. For more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow">Determining
        Whether a Request is Allowed or Denied</a> in the <i>IAM User Guide</i>.
        </p> </li> <li> <p>The principal who made the request.</p> </li> <li>
        <p>The requested action.</p> </li> <li> <p>The requested resource.</p>
        </li> <li> <p>The values of condition keys in the context of the user's
        request.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/DecodeAuthorizationMessageResponse"
        "480":
          description: InvalidAuthorizationMessageException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidAuthorizationMessageException"
      parameters:
        - name: EncodedMessage
          in: query
          required: true
          description: The encoded message that was returned with the response.
          schema:
            type: string
            minLength: 1
            maxLength: 10240
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DecodeAuthorizationMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: DecodeAuthorizationMessage
      operationId: POST DecodeAuthorizationMessage
      description: <p>Decodes additional information about the authorization status of a
        request from an encoded message returned in response to an AWS
        request.</p> <p>For example, if a user is not authorized to perform an
        operation that he or she has requested, the request returns a
        <code>Client.UnauthorizedOperation</code> response (an HTTP 403
        response). Some AWS operations additionally return an encoded message
        that can provide details about this authorization failure. </p> <note>
        <p>Only certain AWS operations return an encoded authorization message.
        The documentation for an individual operation indicates whether that
        operation returns an encoded message in addition to returning an HTTP
        code.</p> </note> <p>The message is encoded because the details of the
        authorization status can constitute privileged information that the user
        who requested the operation should not see. To decode an authorization
        status message, a user must be granted permissions via an IAM policy to
        request the <code>DecodeAuthorizationMessage</code>
        (<code>sts:DecodeAuthorizationMessage</code>) action. </p> <p>The
        decoded message includes the following type of information:</p> <ul>
        <li> <p>Whether the request was denied due to an explicit deny or due to
        the absence of an explicit allow. For more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow">Determining
        Whether a Request is Allowed or Denied</a> in the <i>IAM User Guide</i>.
        </p> </li> <li> <p>The principal who made the request.</p> </li> <li>
        <p>The requested action.</p> </li> <li> <p>The requested resource.</p>
        </li> <li> <p>The values of condition keys in the context of the user's
        request.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/DecodeAuthorizationMessageResponse"
        "480":
          description: InvalidAuthorizationMessageException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidAuthorizationMessageException"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DecodeAuthorizationMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                EncodedMessage:
                  description: The encoded message that was returned with the response.
                  type: string
                  minLength: 1
                  maxLength: 10240
              required:
                - EncodedMessage
  /#Action=GetAccessKeyInfo:
    get:
      x-aws-operation-name: GetAccessKeyInfo
      operationId: GET GetAccessKeyInfo
      description: "<p>Returns the account identifier for the specified access key ID.</p>
        <p>Access keys consist of two parts: an access key ID (for example,
        <code>AKIAIOSFODNN7EXAMPLE</code>) and a secret access key (for example,
        <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>). For more
        information about access keys, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        access-keys.html\">Managing Access Keys for IAM Users</a> in the <i>IAM
        User Guide</i>.</p> <p>When you pass an access key ID to this operation,
        it returns the ID of the AWS account to which the keys belong. Access
        key IDs beginning with <code>AKIA</code> are long-term credentials for
        an IAM user or the AWS account root user. Access key IDs beginning with
        <code>ASIA</code> are temporary credentials that are created using STS
        operations. If the account in the response belongs to you, you can sign
        in as the root user and review your root user access keys. Then, you can
        pull a <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        getting-report.html\">credentials report</a> to learn which IAM user
        owns the keys. To learn who requested the temporary credentials for an
        <code>ASIA</code> access key, view the STS events in your <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-inte\
        gration.html\">CloudTrail logs</a>.</p> <p>This operation does not
        indicate the state of the access key. The key might be active, inactive,
        or deleted. Active keys might not have permissions to perform an
        operation. Providing a deleted access key might return an error that the
        key doesn't exist.</p>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetAccessKeyInfoResponse"
      parameters:
        - name: AccessKeyId
          in: query
          required: true
          description: <p>The identifier of an access key.</p> <p>This parameter allows
            (through its regex pattern) a string of characters that can consist
            of any upper- or lowercased letter or digit.</p>
          schema:
            type: string
            minLength: 16
            maxLength: 128
            pattern: "[\\w]*"
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetAccessKeyInfo
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: GetAccessKeyInfo
      operationId: POST GetAccessKeyInfo
      description: "<p>Returns the account identifier for the specified access key ID.</p>
        <p>Access keys consist of two parts: an access key ID (for example,
        <code>AKIAIOSFODNN7EXAMPLE</code>) and a secret access key (for example,
        <code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>). For more
        information about access keys, see <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        access-keys.html\">Managing Access Keys for IAM Users</a> in the <i>IAM
        User Guide</i>.</p> <p>When you pass an access key ID to this operation,
        it returns the ID of the AWS account to which the keys belong. Access
        key IDs beginning with <code>AKIA</code> are long-term credentials for
        an IAM user or the AWS account root user. Access key IDs beginning with
        <code>ASIA</code> are temporary credentials that are created using STS
        operations. If the account in the response belongs to you, you can sign
        in as the root user and review your root user access keys. Then, you can
        pull a <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_\
        getting-report.html\">credentials report</a> to learn which IAM user
        owns the keys. To learn who requested the temporary credentials for an
        <code>ASIA</code> access key, view the STS events in your <a
        href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-inte\
        gration.html\">CloudTrail logs</a>.</p> <p>This operation does not
        indicate the state of the access key. The key might be active, inactive,
        or deleted. Active keys might not have permissions to perform an
        operation. Providing a deleted access key might return an error that the
        key doesn't exist.</p>"
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetAccessKeyInfoResponse"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetAccessKeyInfo
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                AccessKeyId:
                  description: <p>The identifier of an access key.</p> <p>This parameter
                    allows (through its regex pattern) a string of characters
                    that can consist of any upper- or lowercased letter or
                    digit.</p>
                  type: string
                  minLength: 16
                  maxLength: 128
                  pattern: "[\\w]*"
              required:
                - AccessKeyId
  /#Action=GetCallerIdentity:
    get:
      x-aws-operation-name: GetCallerIdentity
      operationId: GET GetCallerIdentity
      description: '<p>Returns details about the IAM user or role whose credentials are
        used to call the operation.</p> <note> <p>No permissions are required to
        perform this operation. If an administrator adds a policy to your IAM
        user or role that explicitly denies access to the
        <code>sts:GetCallerIdentity</code> action, you can still perform this
        operation. Permissions are not required because the same information is
        returned when an IAM user or role is denied access. To view an example
        response, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_access-denied-delete-mfa">I
        Am Not Authorized to Perform: iam:DeleteVirtualMFADevice</a>.</p>
        </note>'
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetCallerIdentityResponse"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetCallerIdentity
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: GetCallerIdentity
      operationId: POST GetCallerIdentity
      description: '<p>Returns details about the IAM user or role whose credentials are
        used to call the operation.</p> <note> <p>No permissions are required to
        perform this operation. If an administrator adds a policy to your IAM
        user or role that explicitly denies access to the
        <code>sts:GetCallerIdentity</code> action, you can still perform this
        operation. Permissions are not required because the same information is
        returned when an IAM user or role is denied access. To view an example
        response, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_access-denied-delete-mfa">I
        Am Not Authorized to Perform: iam:DeleteVirtualMFADevice</a>.</p>
        </note>'
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetCallerIdentityResponse"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetCallerIdentity
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
  /#Action=GetFederationToken:
    get:
      x-aws-operation-name: GetFederationToken
      operationId: GET GetFederationToken
      description: <p>Returns a set of temporary security credentials (consisting of an
        access key ID, a secret access key, and a security token) for a
        federated user. A typical use is in a proxy application that gets
        temporary security credentials on behalf of distributed applications
        inside a corporate network. You must call the
        <code>GetFederationToken</code> operation using the long-term security
        credentials of an IAM user. As a result, this call is appropriate in
        contexts where those credentials can be safely stored, usually in a
        server-based application. For a comparison of
        <code>GetFederationToken</code> with the other API operations that
        produce temporary credentials, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting
        Temporary Security Credentials</a> and <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing
        the AWS STS API operations</a> in the <i>IAM User Guide</i>.</p> <note>
        <p>You can create a mobile-based or browser-based app that can
        authenticate users using a web identity provider like Login with Amazon,
        Facebook, Google, or an OpenID Connect-compatible identity provider. In
        this case, we recommend that you use <a
        href="http://aws.amazon.com/cognito/">Amazon Cognito</a> or
        <code>AssumeRoleWithWebIdentity</code>. For more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation
        Through a Web-based Identity Provider</a>.</p> </note> <p>You can also
        call <code>GetFederationToken</code> using the security credentials of
        an AWS account root user, but we do not recommend it. Instead, we
        recommend that you create an IAM user for the purpose of the proxy
        application. Then attach a policy to the IAM user that limits federated
        users to only the actions and resources that they need to access. For
        more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">IAM
        Best Practices</a> in the <i>IAM User Guide</i>. </p> <p>The temporary
        credentials are valid for the specified duration, from 900 seconds (15
        minutes) up to a maximum of 129,600 seconds (36 hours). The default is
        43,200 seconds (12 hours). Temporary credentials that are obtained by
        using AWS account root user credentials have a maximum duration of 3,600
        seconds (1 hour).</p> <p>The temporary security credentials created by
        <code>GetFederationToken</code> can be used to make API calls to any AWS
        service with the following exceptions:</p> <ul> <li> <p>You cannot use
        these credentials to call any IAM API operations.</p> </li> <li> <p>You
        cannot call any STS API operations except
        <code>GetCallerIdentity</code>.</p> </li> </ul> <p> <b>Permissions</b>
        </p> <p>You must pass an inline or managed <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session
        policy</a> to this operation. You can pass a single JSON policy document
        to use as an inline session policy. You can also specify up to 10
        managed policies to use as managed session policies. The plain text that
        you use for both inline and managed session policies shouldn't exceed
        2048 characters.</p> <p>Though the session policy parameters are
        optional, if you do not pass a policy, then the resulting federated user
        session has no permissions. The only exception is when the credentials
        are used to access a resource that has a resource-based policy that
        specifically references the federated user session in the
        <code>Principal</code> element of the policy. When you pass session
        policies, the session permissions are the intersection of the IAM user
        policies and the session policies that you pass. This gives you a way to
        further restrict the permissions for a federated user. You cannot use
        session policies to grant more permissions than those that are defined
        in the permissions policy of the IAM user. For more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
        Policies</a> in the <i>IAM User Guide</i>. For information about using
        <code>GetFederationToken</code> to create temporary security
        credentials, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken">GetFederationToken—Federation
        Through a Custom Identity Broker</a>. </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetFederationTokenResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: Name
          in: query
          required: true
          description: "<p>The name of the federated user. The name is used as an
            identifier for the temporary security credentials (such as
            <code>Bob</code>). For example, you can reference the federated user
            name in a resource-based policy, such as in an Amazon S3 bucket
            policy.</p> <p>The regex used to validate this parameter is a string
            of characters consisting of upper- and lower-case alphanumeric
            characters with no spaces. You can also include underscores or any
            of the following characters: =,.@-</p>"
          schema:
            type: string
            minLength: 2
            maxLength: 32
            pattern: "[\\w+=,.@-]*"
        - name: Policy
          in: query
          required: false
          description: <p>An IAM policy in JSON format that you want to use as an inline
            session policy.</p> <p>You must pass an inline or managed <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session
            policy</a> to this operation. You can pass a single JSON policy
            document to use as an inline session policy. You can also specify up
            to 10 managed policies to use as managed session policies.</p>
            <p>This parameter is optional. However, if you do not pass any
            session policies, then the resulting federated user session has no
            permissions. The only exception is when the credentials are used to
            access a resource that has a resource-based policy that specifically
            references the federated user session in the <code>Principal</code>
            element of the policy.</p> <p>When you pass session policies, the
            session permissions are the intersection of the IAM user policies
            and the session policies that you pass. This gives you a way to
            further restrict the permissions for a federated user. You cannot
            use session policies to grant more permissions than those that are
            defined in the permissions policy of the IAM user. For more
            information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p> <p>The plain text
            that you use for both inline and managed session policies shouldn't
            exceed 2048 characters. The JSON policy characters can be any ASCII
            character from the space character to the end of the valid character
            list (\u0020 through \u00FF). It can also include the tab (\u0009),
            linefeed (\u000A), and carriage return (\u000D) characters.</p>
            <note> <p>The characters in this parameter count towards the 2048
            character session policy guideline. However, an AWS conversion
            compresses the session policies into a packed binary format that has
            a separate limit. This is the enforced limit. The
            <code>PackedPolicySize</code> response element indicates by
            percentage how close the policy is to the upper size limit.</p>
            </note>
          schema:
            type: string
            minLength: 1
            maxLength: 2048
            pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
        - name: PolicyArns
          in: query
          required: false
          description: <p>The Amazon Resource Names (ARNs) of the IAM managed policies that
            you want to use as a managed session policy. The policies must exist
            in the same account as the IAM user that is requesting federated
            access.</p> <p>You must pass an inline or managed <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session
            policy</a> to this operation. You can pass a single JSON policy
            document to use as an inline session policy. You can also specify up
            to 10 managed policies to use as managed session policies. The plain
            text that you use for both inline and managed session policies
            shouldn't exceed 2048 characters. You can provide up to 10 managed
            policy ARNs. For more information about ARNs, see <a
            href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
            General Reference.</p> <p>This parameter is optional. However, if
            you do not pass any session policies, then the resulting federated
            user session has no permissions. The only exception is when the
            credentials are used to access a resource that has a resource-based
            policy that specifically references the federated user session in
            the <code>Principal</code> element of the policy.</p> <p>When you
            pass session policies, the session permissions are the intersection
            of the IAM user policies and the session policies that you pass.
            This gives you a way to further restrict the permissions for a
            federated user. You cannot use session policies to grant more
            permissions than those that are defined in the permissions policy of
            the IAM user. For more information, see <a
            href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
            Policies</a> in the <i>IAM User Guide</i>.</p> <note> <p>The
            characters in this parameter count towards the 2048 character
            session policy guideline. However, an AWS conversion compresses the
            session policies into a packed binary format that has a separate
            limit. This is the enforced limit. The <code>PackedPolicySize</code>
            response element indicates by percentage how close the policy is to
            the upper size limit.</p> </note>
          schema:
            type: array
            items:
              type: string
        - name: DurationSeconds
          in: query
          required: false
          description: The duration, in seconds, that the session should last. Acceptable
            durations for federation sessions range from 900 seconds (15
            minutes) to 129,600 seconds (36 hours), with 43,200 seconds (12
            hours) as the default. Sessions obtained using AWS account root user
            credentials are restricted to a maximum of 3,600 seconds (one hour).
            If the specified duration is longer than one hour, the session
            obtained by using root user credentials defaults to one hour.
          schema:
            type: integer
            minimum: 900
            maximum: 129600
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetFederationToken
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: GetFederationToken
      operationId: POST GetFederationToken
      description: <p>Returns a set of temporary security credentials (consisting of an
        access key ID, a secret access key, and a security token) for a
        federated user. A typical use is in a proxy application that gets
        temporary security credentials on behalf of distributed applications
        inside a corporate network. You must call the
        <code>GetFederationToken</code> operation using the long-term security
        credentials of an IAM user. As a result, this call is appropriate in
        contexts where those credentials can be safely stored, usually in a
        server-based application. For a comparison of
        <code>GetFederationToken</code> with the other API operations that
        produce temporary credentials, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting
        Temporary Security Credentials</a> and <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing
        the AWS STS API operations</a> in the <i>IAM User Guide</i>.</p> <note>
        <p>You can create a mobile-based or browser-based app that can
        authenticate users using a web identity provider like Login with Amazon,
        Facebook, Google, or an OpenID Connect-compatible identity provider. In
        this case, we recommend that you use <a
        href="http://aws.amazon.com/cognito/">Amazon Cognito</a> or
        <code>AssumeRoleWithWebIdentity</code>. For more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity">Federation
        Through a Web-based Identity Provider</a>.</p> </note> <p>You can also
        call <code>GetFederationToken</code> using the security credentials of
        an AWS account root user, but we do not recommend it. Instead, we
        recommend that you create an IAM user for the purpose of the proxy
        application. Then attach a policy to the IAM user that limits federated
        users to only the actions and resources that they need to access. For
        more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html">IAM
        Best Practices</a> in the <i>IAM User Guide</i>. </p> <p>The temporary
        credentials are valid for the specified duration, from 900 seconds (15
        minutes) up to a maximum of 129,600 seconds (36 hours). The default is
        43,200 seconds (12 hours). Temporary credentials that are obtained by
        using AWS account root user credentials have a maximum duration of 3,600
        seconds (1 hour).</p> <p>The temporary security credentials created by
        <code>GetFederationToken</code> can be used to make API calls to any AWS
        service with the following exceptions:</p> <ul> <li> <p>You cannot use
        these credentials to call any IAM API operations.</p> </li> <li> <p>You
        cannot call any STS API operations except
        <code>GetCallerIdentity</code>.</p> </li> </ul> <p> <b>Permissions</b>
        </p> <p>You must pass an inline or managed <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session
        policy</a> to this operation. You can pass a single JSON policy document
        to use as an inline session policy. You can also specify up to 10
        managed policies to use as managed session policies. The plain text that
        you use for both inline and managed session policies shouldn't exceed
        2048 characters.</p> <p>Though the session policy parameters are
        optional, if you do not pass a policy, then the resulting federated user
        session has no permissions. The only exception is when the credentials
        are used to access a resource that has a resource-based policy that
        specifically references the federated user session in the
        <code>Principal</code> element of the policy. When you pass session
        policies, the session permissions are the intersection of the IAM user
        policies and the session policies that you pass. This gives you a way to
        further restrict the permissions for a federated user. You cannot use
        session policies to grant more permissions than those that are defined
        in the permissions policy of the IAM user. For more information, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
        Policies</a> in the <i>IAM User Guide</i>. For information about using
        <code>GetFederationToken</code> to create temporary security
        credentials, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken">GetFederationToken—Federation
        Through a Custom Identity Broker</a>. </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetFederationTokenResponse"
        "480":
          description: MalformedPolicyDocumentException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MalformedPolicyDocumentException"
        "481":
          description: PackedPolicyTooLargeException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PackedPolicyTooLargeException"
        "482":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetFederationToken
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Name:
                  description: "<p>The name of the federated user. The name is used as an
                    identifier for the temporary security credentials (such as
                    <code>Bob</code>). For example, you can reference the
                    federated user name in a resource-based policy, such as in
                    an Amazon S3 bucket policy.</p> <p>The regex used to
                    validate this parameter is a string of characters consisting
                    of upper- and lower-case alphanumeric characters with no
                    spaces. You can also include underscores or any of the
                    following characters: =,.@-</p>"
                  type: string
                  minLength: 2
                  maxLength: 32
                  pattern: "[\\w+=,.@-]*"
                Policy:
                  description: <p>An IAM policy in JSON format that you want to use as an
                    inline session policy.</p> <p>You must pass an inline or
                    managed <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session
                    policy</a> to this operation. You can pass a single JSON
                    policy document to use as an inline session policy. You can
                    also specify up to 10 managed policies to use as managed
                    session policies.</p> <p>This parameter is optional.
                    However, if you do not pass any session policies, then the
                    resulting federated user session has no permissions. The
                    only exception is when the credentials are used to access a
                    resource that has a resource-based policy that specifically
                    references the federated user session in the
                    <code>Principal</code> element of the policy.</p> <p>When
                    you pass session policies, the session permissions are the
                    intersection of the IAM user policies and the session
                    policies that you pass. This gives you a way to further
                    restrict the permissions for a federated user. You cannot
                    use session policies to grant more permissions than those
                    that are defined in the permissions policy of the IAM user.
                    For more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p> <p>The plain
                    text that you use for both inline and managed session
                    policies shouldn't exceed 2048 characters. The JSON policy
                    characters can be any ASCII character from the space
                    character to the end of the valid character list (\u0020
                    through \u00FF). It can also include the tab (\u0009),
                    linefeed (\u000A), and carriage return (\u000D)
                    characters.</p> <note> <p>The characters in this parameter
                    count towards the 2048 character session policy guideline.
                    However, an AWS conversion compresses the session policies
                    into a packed binary format that has a separate limit. This
                    is the enforced limit. The <code>PackedPolicySize</code>
                    response element indicates by percentage how close the
                    policy is to the upper size limit.</p> </note>
                  type: string
                  minLength: 1
                  maxLength: 2048
                  pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
                PolicyArns:
                  description: <p>The Amazon Resource Names (ARNs) of the IAM managed
                    policies that you want to use as a managed session policy.
                    The policies must exist in the same account as the IAM user
                    that is requesting federated access.</p> <p>You must pass an
                    inline or managed <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">session
                    policy</a> to this operation. You can pass a single JSON
                    policy document to use as an inline session policy. You can
                    also specify up to 10 managed policies to use as managed
                    session policies. The plain text that you use for both
                    inline and managed session policies shouldn't exceed 2048
                    characters. You can provide up to 10 managed policy ARNs.
                    For more information about ARNs, see <a
                    href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
                    Resource Names (ARNs) and AWS Service Namespaces</a> in the
                    AWS General Reference.</p> <p>This parameter is optional.
                    However, if you do not pass any session policies, then the
                    resulting federated user session has no permissions. The
                    only exception is when the credentials are used to access a
                    resource that has a resource-based policy that specifically
                    references the federated user session in the
                    <code>Principal</code> element of the policy.</p> <p>When
                    you pass session policies, the session permissions are the
                    intersection of the IAM user policies and the session
                    policies that you pass. This gives you a way to further
                    restrict the permissions for a federated user. You cannot
                    use session policies to grant more permissions than those
                    that are defined in the permissions policy of the IAM user.
                    For more information, see <a
                    href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
                    Policies</a> in the <i>IAM User Guide</i>.</p> <note> <p>The
                    characters in this parameter count towards the 2048
                    character session policy guideline. However, an AWS
                    conversion compresses the session policies into a packed
                    binary format that has a separate limit. This is the
                    enforced limit. The <code>PackedPolicySize</code> response
                    element indicates by percentage how close the policy is to
                    the upper size limit.</p> </note>
                  type: array
                  items:
                    type: string
                DurationSeconds:
                  description: The duration, in seconds, that the session should last.
                    Acceptable durations for federation sessions range from 900
                    seconds (15 minutes) to 129,600 seconds (36 hours), with
                    43,200 seconds (12 hours) as the default. Sessions obtained
                    using AWS account root user credentials are restricted to a
                    maximum of 3,600 seconds (one hour). If the specified
                    duration is longer than one hour, the session obtained by
                    using root user credentials defaults to one hour.
                  type: integer
                  minimum: 900
                  maximum: 129600
              required:
                - Name
  /#Action=GetSessionToken:
    get:
      x-aws-operation-name: GetSessionToken
      operationId: GET GetSessionToken
      description: <p>Returns a set of temporary credentials for an AWS account or IAM
        user. The credentials consist of an access key ID, a secret access key,
        and a security token. Typically, you use <code>GetSessionToken</code> if
        you want to use MFA to protect programmatic calls to specific AWS API
        operations like Amazon EC2 <code>StopInstances</code>. MFA-enabled IAM
        users would need to call <code>GetSessionToken</code> and submit an MFA
        code that is associated with their MFA device. Using the temporary
        security credentials that are returned from the call, IAM users can then
        make programmatic calls to API operations that require MFA
        authentication. If you do not supply a correct MFA code, then the API
        returns an access denied error. For a comparison of
        <code>GetSessionToken</code> with the other API operations that produce
        temporary credentials, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting
        Temporary Security Credentials</a> and <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing
        the AWS STS API operations</a> in the <i>IAM User Guide</i>.</p> <p>The
        <code>GetSessionToken</code> operation must be called by using the
        long-term AWS security credentials of the AWS account root user or an
        IAM user. Credentials that are created by IAM users are valid for the
        duration that you specify. This duration can range from 900 seconds (15
        minutes) up to a maximum of 129,600 seconds (36 hours), with a default
        of 43,200 seconds (12 hours). Credentials based on account credentials
        can range from 900 seconds (15 minutes) up to 3,600 seconds (1 hour),
        with a default of 1 hour. </p> <p>The temporary security credentials
        created by <code>GetSessionToken</code> can be used to make API calls to
        any AWS service with the following exceptions:</p> <ul> <li> <p>You
        cannot call any IAM API operations unless MFA authentication information
        is included in the request.</p> </li> <li> <p>You cannot call any STS
        API <i>except</i> <code>AssumeRole</code> or
        <code>GetCallerIdentity</code>.</p> </li> </ul> <note> <p>We recommend
        that you do not call <code>GetSessionToken</code> with AWS account root
        user credentials. Instead, follow our <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users">best
        practices</a> by creating one or more IAM users, giving them the
        necessary permissions, and using IAM users for everyday interaction with
        AWS. </p> </note> <p>The credentials that are returned by
        <code>GetSessionToken</code> are based on permissions associated with
        the user whose credentials were used to call the operation. If
        <code>GetSessionToken</code> is called using AWS account root user
        credentials, the temporary credentials have root user permissions.
        Similarly, if <code>GetSessionToken</code> is called using the
        credentials of an IAM user, the temporary credentials have the same
        permissions as the IAM user. </p> <p>For more information about using
        <code>GetSessionToken</code> to create temporary credentials, go to <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getsessiontoken">Temporary
        Credentials for Users in Untrusted Environments</a> in the <i>IAM User
        Guide</i>. </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetSessionTokenResponse"
        "480":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: DurationSeconds
          in: query
          required: false
          description: The duration, in seconds, that the credentials should remain valid.
            Acceptable durations for IAM user sessions range from 900 seconds
            (15 minutes) to 129,600 seconds (36 hours), with 43,200 seconds (12
            hours) as the default. Sessions for AWS account owners are
            restricted to a maximum of 3,600 seconds (one hour). If the duration
            is longer than one hour, the session for AWS account owners defaults
            to one hour.
          schema:
            type: integer
            minimum: 900
            maximum: 129600
        - name: SerialNumber
          in: query
          required: false
          description: "<p>The identification number of the MFA device that is associated
            with the IAM user who is making the <code>GetSessionToken</code>
            call. Specify this value if the IAM user has a policy that requires
            MFA authentication. The value is either the serial number for a
            hardware device (such as <code>GAHT12345678</code>) or an Amazon
            Resource Name (ARN) for a virtual device (such as
            <code>arn:aws:iam::123456789012:mfa/user</code>). You can find the
            device for an IAM user by going to the AWS Management Console and
            viewing the user's security credentials. </p> <p>The regex used to
            validate this parameter is a string of characters consisting of
            upper- and lower-case alphanumeric characters with no spaces. You
            can also include underscores or any of the following characters:
            =,.@:/-</p>"
          schema:
            type: string
            minLength: 9
            maxLength: 256
            pattern: "[\\w+=/:,.@-]*"
        - name: TokenCode
          in: query
          required: false
          description: <p>The value provided by the MFA device, if MFA is required. If any
            policy requires the IAM user to submit an MFA code, specify this
            value. If MFA authentication is required, the user must provide a
            code when requesting a set of temporary security credentials. A user
            who fails to provide the code receives an "access denied" response
            when requesting resources that require MFA authentication.</p>
            <p>The format for this parameter, as described by its regex pattern,
            is a sequence of six numeric digits.</p>
          schema:
            type: string
            minLength: 6
            maxLength: 6
            pattern: "[\\d]*"
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetSessionToken
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: GetSessionToken
      operationId: POST GetSessionToken
      description: <p>Returns a set of temporary credentials for an AWS account or IAM
        user. The credentials consist of an access key ID, a secret access key,
        and a security token. Typically, you use <code>GetSessionToken</code> if
        you want to use MFA to protect programmatic calls to specific AWS API
        operations like Amazon EC2 <code>StopInstances</code>. MFA-enabled IAM
        users would need to call <code>GetSessionToken</code> and submit an MFA
        code that is associated with their MFA device. Using the temporary
        security credentials that are returned from the call, IAM users can then
        make programmatic calls to API operations that require MFA
        authentication. If you do not supply a correct MFA code, then the API
        returns an access denied error. For a comparison of
        <code>GetSessionToken</code> with the other API operations that produce
        temporary credentials, see <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html">Requesting
        Temporary Security Credentials</a> and <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison">Comparing
        the AWS STS API operations</a> in the <i>IAM User Guide</i>.</p> <p>The
        <code>GetSessionToken</code> operation must be called by using the
        long-term AWS security credentials of the AWS account root user or an
        IAM user. Credentials that are created by IAM users are valid for the
        duration that you specify. This duration can range from 900 seconds (15
        minutes) up to a maximum of 129,600 seconds (36 hours), with a default
        of 43,200 seconds (12 hours). Credentials based on account credentials
        can range from 900 seconds (15 minutes) up to 3,600 seconds (1 hour),
        with a default of 1 hour. </p> <p>The temporary security credentials
        created by <code>GetSessionToken</code> can be used to make API calls to
        any AWS service with the following exceptions:</p> <ul> <li> <p>You
        cannot call any IAM API operations unless MFA authentication information
        is included in the request.</p> </li> <li> <p>You cannot call any STS
        API <i>except</i> <code>AssumeRole</code> or
        <code>GetCallerIdentity</code>.</p> </li> </ul> <note> <p>We recommend
        that you do not call <code>GetSessionToken</code> with AWS account root
        user credentials. Instead, follow our <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users">best
        practices</a> by creating one or more IAM users, giving them the
        necessary permissions, and using IAM users for everyday interaction with
        AWS. </p> </note> <p>The credentials that are returned by
        <code>GetSessionToken</code> are based on permissions associated with
        the user whose credentials were used to call the operation. If
        <code>GetSessionToken</code> is called using AWS account root user
        credentials, the temporary credentials have root user permissions.
        Similarly, if <code>GetSessionToken</code> is called using the
        credentials of an IAM user, the temporary credentials have the same
        permissions as the IAM user. </p> <p>For more information about using
        <code>GetSessionToken</code> to create temporary credentials, go to <a
        href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getsessiontoken">Temporary
        Credentials for Users in Untrusted Environments</a> in the <i>IAM User
        Guide</i>. </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetSessionTokenResponse"
        "480":
          description: RegionDisabledException
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/RegionDisabledException"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetSessionToken
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2011-06-15
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                DurationSeconds:
                  description: The duration, in seconds, that the credentials should remain
                    valid. Acceptable durations for IAM user sessions range from
                    900 seconds (15 minutes) to 129,600 seconds (36 hours), with
                    43,200 seconds (12 hours) as the default. Sessions for AWS
                    account owners are restricted to a maximum of 3,600 seconds
                    (one hour). If the duration is longer than one hour, the
                    session for AWS account owners defaults to one hour.
                  type: integer
                  minimum: 900
                  maximum: 129600
                SerialNumber:
                  description: "<p>The identification number of the MFA device that is
                    associated with the IAM user who is making the
                    <code>GetSessionToken</code> call. Specify this value if the
                    IAM user has a policy that requires MFA authentication. The
                    value is either the serial number for a hardware device
                    (such as <code>GAHT12345678</code>) or an Amazon Resource
                    Name (ARN) for a virtual device (such as
                    <code>arn:aws:iam::123456789012:mfa/user</code>). You can
                    find the device for an IAM user by going to the AWS
                    Management Console and viewing the user's security
                    credentials. </p> <p>The regex used to validate this
                    parameter is a string of characters consisting of upper- and
                    lower-case alphanumeric characters with no spaces. You can
                    also include underscores or any of the following characters:
                    =,.@:/-</p>"
                  type: string
                  minLength: 9
                  maxLength: 256
                  pattern: "[\\w+=/:,.@-]*"
                TokenCode:
                  description: <p>The value provided by the MFA device, if MFA is required.
                    If any policy requires the IAM user to submit an MFA code,
                    specify this value. If MFA authentication is required, the
                    user must provide a code when requesting a set of temporary
                    security credentials. A user who fails to provide the code
                    receives an "access denied" response when requesting
                    resources that require MFA authentication.</p> <p>The format
                    for this parameter, as described by its regex pattern, is a
                    sequence of six numeric digits.</p>
                  type: string
                  minLength: 6
                  maxLength: 6
                  pattern: "[\\d]*"
servers:
  - url: https://sts.amazonaws.com
    variables: {}
    description: The general AWS STS multi-region endpoint
  - url: http://sts.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-gov-west-1
          - us-gov-east-1
        default: us-gov-west-1
    description: The AWS STS endpoint for AWS GovCloud (US) and AWS GovCloud (US-East)
  - url: https://sts.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-gov-west-1
          - us-gov-east-1
        default: us-gov-west-1
    description: The AWS STS endpoint for AWS GovCloud (US) and AWS GovCloud (US-East)
  - url: http://sts.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS STS endpoint for China (Beijing) and China (Ningxia)
  - url: https://sts.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS STS endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssumeRoleResponse:
      type: object
      example:
        AssumedRoleUser:
          Arn: arn:aws:sts::123456789012:assumed-role/demo/Bob
          AssumedRoleId: ARO123EXAMPLE123:Bob
        Credentials:
          AccessKeyId: AKIAIOSFODNN7EXAMPLE
          Expiration: 2011-07-15T23:28:33.359Z
          SecretAccessKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
          SessionToken: AQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/qkPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==
        PackedPolicySize: 6
      properties:
        Credentials:
          $ref: "#/components/schemas/Credentials"
        AssumedRoleUser:
          $ref: "#/components/schemas/AssumedRoleUser"
        PackedPolicySize:
          $ref: "#/components/schemas/nonNegativeIntegerType"
      description: "Contains the response to a successful <a>AssumeRole</a> request,
        including temporary AWS credentials that can be used to make AWS
        requests. "
    PolicyDescriptorType:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/arnType"
      description: A reference to the IAM managed policy that is passed as a session policy
        for a role session or a federated user session.
    MalformedPolicyDocumentException: {}
    PackedPolicyTooLargeException: {}
    RegionDisabledException: {}
    AssumeRoleWithSAMLResponse:
      type: object
      properties:
        Credentials:
          $ref: "#/components/schemas/Credentials"
        AssumedRoleUser:
          $ref: "#/components/schemas/AssumedRoleUser"
        PackedPolicySize:
          $ref: "#/components/schemas/nonNegativeIntegerType"
        Subject:
          $ref: "#/components/schemas/Subject"
        SubjectType:
          $ref: "#/components/schemas/SubjectType"
        Issuer:
          $ref: "#/components/schemas/Issuer"
        Audience:
          $ref: "#/components/schemas/Audience"
        NameQualifier:
          $ref: "#/components/schemas/NameQualifier"
      description: "Contains the response to a successful <a>AssumeRoleWithSAML</a>
        request, including temporary AWS credentials that can be used to make
        AWS requests. "
    IDPRejectedClaimException: {}
    InvalidIdentityTokenException: {}
    ExpiredTokenException: {}
    AssumeRoleWithWebIdentityResponse:
      type: object
      example:
        AssumedRoleUser:
          Arn: arn:aws:sts::123456789012:assumed-role/FederatedWebIdentityRole/app1
          AssumedRoleId: AROACLKWSDQRAOEXAMPLE:app1
        Audience: client.5498841531868486423.1548@apps.example.com
        Credentials:
          AccessKeyId: AKIAIOSFODNN7EXAMPLE
          Expiration: 2014-10-24T23:00:23Z
          SecretAccessKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
          SessionToken: AQoDYXdzEE0a8ANXXXXXXXXNO1ewxE5TijQyp+IEXAMPLE
        PackedPolicySize: 123
        Provider: www.amazon.com
        SubjectFromWebIdentityToken: amzn1.account.AF6RHO7KZU5XRVQJGXK6HEXAMPLE
      properties:
        Credentials:
          $ref: "#/components/schemas/Credentials"
        SubjectFromWebIdentityToken:
          $ref: "#/components/schemas/webIdentitySubjectType"
        AssumedRoleUser:
          $ref: "#/components/schemas/AssumedRoleUser"
        PackedPolicySize:
          $ref: "#/components/schemas/nonNegativeIntegerType"
        Provider:
          $ref: "#/components/schemas/Issuer"
        Audience:
          $ref: "#/components/schemas/Audience"
      description: "Contains the response to a successful <a>AssumeRoleWithWebIdentity</a>
        request, including temporary AWS credentials that can be used to make
        AWS requests. "
    IDPCommunicationErrorException: {}
    DecodeAuthorizationMessageResponse:
      type: object
      example:
        DecodedMessage: '{"allowed": "false","explicitDeny": "false","matchedStatements":
          "","failures": "","context": {"principal": {"id":
          "AIDACKCEVSQ6C2EXAMPLE","name": "Bob","arn":
          "arn:aws:iam::123456789012:user/Bob"},"action":
          "ec2:StopInstances","resource":
          "arn:aws:ec2:us-east-1:123456789012:instance/i-dd01c9bd","conditions":
          [{"item": {"key": "ec2:Tenancy","values": ["default"]},{"item":
          {"key": "ec2:ResourceTag/elasticbeanstalk:environment-name","values":
          ["Default-Environment"]}},(Additional items ...)]}}'
      properties:
        DecodedMessage:
          $ref: "#/components/schemas/decodedMessageType"
      description: A document that contains additional information about the authorization
        status of a request from an encoded message that is returned in response
        to an AWS request.
    InvalidAuthorizationMessageException: {}
    GetAccessKeyInfoResponse:
      type: object
      properties:
        Account:
          $ref: "#/components/schemas/accountType"
    GetCallerIdentityResponse:
      type: object
      example:
        Account: "123456789012"
        Arn: arn:aws:sts::123456789012:federated-user/my-federated-user-name
        UserId: 123456789012:my-federated-user-name
      properties:
        UserId:
          $ref: "#/components/schemas/userIdType"
        Account:
          $ref: "#/components/schemas/accountType"
        Arn:
          $ref: "#/components/schemas/arnType"
      description: Contains the response to a successful <a>GetCallerIdentity</a> request,
        including information about the entity making the request.
    GetFederationTokenResponse:
      type: object
      example:
        Credentials:
          AccessKeyId: AKIAIOSFODNN7EXAMPLE
          Expiration: 2011-07-15T23:28:33.359Z
          SecretAccessKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
          SessionToken: AQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/qkPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==
        FederatedUser:
          Arn: arn:aws:sts::123456789012:federated-user/Bob
          FederatedUserId: 123456789012:Bob
        PackedPolicySize: 6
      properties:
        Credentials:
          $ref: "#/components/schemas/Credentials"
        FederatedUser:
          $ref: "#/components/schemas/FederatedUser"
        PackedPolicySize:
          $ref: "#/components/schemas/nonNegativeIntegerType"
      description: "Contains the response to a successful <a>GetFederationToken</a>
        request, including temporary AWS credentials that can be used to make
        AWS requests. "
    GetSessionTokenResponse:
      type: object
      example:
        Credentials:
          AccessKeyId: AKIAIOSFODNN7EXAMPLE
          Expiration: 2011-07-11T19:55:29.611Z
          SecretAccessKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
          SessionToken: AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/LTo6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3zrkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtpZ3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE
      properties:
        Credentials:
          $ref: "#/components/schemas/Credentials"
      description: "Contains the response to a successful <a>GetSessionToken</a> request,
        including temporary AWS credentials that can be used to make AWS
        requests. "
    arnType:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE000-\\u\
        FFFD\\u10000-\\u10FFFF]+"
      minLength: 20
      maxLength: 2048
    roleSessionNameType:
      type: string
      pattern: "[\\w+=,.@-]*"
      minLength: 2
      maxLength: 64
    policyDescriptorListType:
      type: array
      items:
        $ref: "#/components/schemas/PolicyDescriptorType"
    sessionPolicyDocumentType:
      type: string
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      minLength: 1
      maxLength: 2048
    roleDurationSecondsType:
      type: integer
      minimum: 900
      maximum: 43200
    externalIdType:
      type: string
      pattern: "[\\w+=,.@:\\/-]*"
      minLength: 2
      maxLength: 1224
    serialNumberType:
      type: string
      pattern: "[\\w+=/:,.@-]*"
      minLength: 9
      maxLength: 256
    tokenCodeType:
      type: string
      pattern: "[\\d]*"
      minLength: 6
      maxLength: 6
    AssumeRoleRequest:
      type: object
      required:
        - RoleArn
        - RoleSessionName
      properties:
        RoleArn:
          $ref: "#/components/schemas/arnType"
        RoleSessionName:
          $ref: "#/components/schemas/roleSessionNameType"
        PolicyArns:
          $ref: "#/components/schemas/policyDescriptorListType"
        Policy:
          $ref: "#/components/schemas/sessionPolicyDocumentType"
        DurationSeconds:
          $ref: "#/components/schemas/roleDurationSecondsType"
        ExternalId:
          $ref: "#/components/schemas/externalIdType"
        SerialNumber:
          $ref: "#/components/schemas/serialNumberType"
        TokenCode:
          $ref: "#/components/schemas/tokenCodeType"
    Credentials:
      type: object
      required:
        - AccessKeyId
        - SecretAccessKey
        - SessionToken
        - Expiration
      properties:
        AccessKeyId:
          $ref: "#/components/schemas/accessKeyIdType"
        SecretAccessKey:
          $ref: "#/components/schemas/accessKeySecretType"
        SessionToken:
          $ref: "#/components/schemas/tokenType"
        Expiration:
          $ref: "#/components/schemas/dateType"
      description: AWS credentials for API authentication.
    AssumedRoleUser:
      type: object
      required:
        - AssumedRoleId
        - Arn
      properties:
        AssumedRoleId:
          $ref: "#/components/schemas/assumedRoleIdType"
        Arn:
          $ref: "#/components/schemas/arnType"
      description: The identifiers for the temporary security credentials that the
        operation returns.
    nonNegativeIntegerType:
      type: integer
      minimum: 0
    SAMLAssertionType:
      type: string
      minLength: 4
      maxLength: 100000
    AssumeRoleWithSAMLRequest:
      type: object
      required:
        - RoleArn
        - PrincipalArn
        - SAMLAssertion
      properties:
        RoleArn:
          $ref: "#/components/schemas/arnType"
        PrincipalArn:
          $ref: "#/components/schemas/arnType"
        SAMLAssertion:
          $ref: "#/components/schemas/SAMLAssertionType"
        PolicyArns:
          $ref: "#/components/schemas/policyDescriptorListType"
        Policy:
          $ref: "#/components/schemas/sessionPolicyDocumentType"
        DurationSeconds:
          $ref: "#/components/schemas/roleDurationSecondsType"
    Subject:
      type: string
    SubjectType:
      type: string
    Issuer:
      type: string
    Audience:
      type: string
    NameQualifier:
      type: string
    clientTokenType:
      type: string
      minLength: 4
      maxLength: 2048
    urlType:
      type: string
      minLength: 4
      maxLength: 2048
    AssumeRoleWithWebIdentityRequest:
      type: object
      required:
        - RoleArn
        - RoleSessionName
        - WebIdentityToken
      properties:
        RoleArn:
          $ref: "#/components/schemas/arnType"
        RoleSessionName:
          $ref: "#/components/schemas/roleSessionNameType"
        WebIdentityToken:
          $ref: "#/components/schemas/clientTokenType"
        ProviderId:
          $ref: "#/components/schemas/urlType"
        PolicyArns:
          $ref: "#/components/schemas/policyDescriptorListType"
        Policy:
          $ref: "#/components/schemas/sessionPolicyDocumentType"
        DurationSeconds:
          $ref: "#/components/schemas/roleDurationSecondsType"
    webIdentitySubjectType:
      type: string
      minLength: 6
      maxLength: 255
    assumedRoleIdType:
      type: string
      pattern: "[\\w+=,.@:-]*"
      minLength: 2
      maxLength: 193
    accessKeyIdType:
      type: string
      pattern: "[\\w]*"
      minLength: 16
      maxLength: 128
    accessKeySecretType:
      type: string
    tokenType:
      type: string
    dateType:
      type: string
      format: date-time
    encodedMessageType:
      type: string
      minLength: 1
      maxLength: 10240
    DecodeAuthorizationMessageRequest:
      type: object
      required:
        - EncodedMessage
      properties:
        EncodedMessage:
          $ref: "#/components/schemas/encodedMessageType"
    decodedMessageType:
      type: string
    federatedIdType:
      type: string
      pattern: "[\\w+=,.@\\:-]*"
      minLength: 2
      maxLength: 193
    FederatedUser:
      type: object
      required:
        - FederatedUserId
        - Arn
      properties:
        FederatedUserId:
          $ref: "#/components/schemas/federatedIdType"
        Arn:
          $ref: "#/components/schemas/arnType"
      description: Identifiers for the federated user that is associated with the
        credentials.
    GetAccessKeyInfoRequest:
      type: object
      required:
        - AccessKeyId
      properties:
        AccessKeyId:
          $ref: "#/components/schemas/accessKeyIdType"
    accountType:
      type: string
    GetCallerIdentityRequest:
      type: object
      properties: {}
    userIdType:
      type: string
    userNameType:
      type: string
      pattern: "[\\w+=,.@-]*"
      minLength: 2
      maxLength: 32
    durationSecondsType:
      type: integer
      minimum: 900
      maximum: 129600
    GetFederationTokenRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/userNameType"
        Policy:
          $ref: "#/components/schemas/sessionPolicyDocumentType"
        PolicyArns:
          $ref: "#/components/schemas/policyDescriptorListType"
        DurationSeconds:
          $ref: "#/components/schemas/durationSecondsType"
    GetSessionTokenRequest:
      type: object
      properties:
        DurationSeconds:
          $ref: "#/components/schemas/durationSecondsType"
        SerialNumber:
          $ref: "#/components/schemas/serialNumberType"
        TokenCode:
          $ref: "#/components/schemas/tokenCodeType"
