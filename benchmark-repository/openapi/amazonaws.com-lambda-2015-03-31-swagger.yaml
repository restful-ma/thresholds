openapi: 3.0.0
info:
  version: 2015-03-31
  x-release: v4
  title: AWS Lambda
  description: '<fullname>AWS Lambda</fullname> <p> <b>Overview</b> </p> <p>This is the
    <i>AWS Lambda API Reference</i>. The AWS Lambda Developer Guide provides
    additional information. For the service overview, see <a
    href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is AWS
    Lambda</a>, and for information about how the service works, see <a
    href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
    Lambda: How it Works</a> in the <b>AWS Lambda Developer Guide</b>.</p>'
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: lambda
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2015-03-31.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lambda/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy":
    post:
      operationId: AddLayerVersionPermission
      description: <p>Adds permissions to the resource-based policy of a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>. Use this action to grant layer usage permission to
        other accounts. You can grant permission to a single account, all AWS
        accounts, or all accounts in an organization.</p> <p>To revoke
        permission, call <a>RemoveLayerVersionPermission</a> with the statement
        ID that you specified when you added it.</p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddLayerVersionPermissionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "485":
          description: PolicyLengthExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyLengthExceededException"
        "486":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
        - name: VersionNumber
          in: path
          required: true
          description: The version number.
          schema:
            type: integer
        - name: RevisionId
          in: query
          required: false
          description: Only update the policy if the revision ID matches the ID specified.
            Use this option to avoid modifying a policy that has changed since
            you last read it.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - StatementId
                - Action
                - Principal
              properties:
                StatementId:
                  description: An identifier that distinguishes the policy from others on
                    the same layer version.
                  type: string
                  pattern: ([a-zA-Z0-9-_]+)
                  minLength: 1
                  maxLength: 100
                Action:
                  description: The API action that grants access to the layer. For example,
                    <code>lambda:GetLayerVersion</code>.
                  type: string
                  pattern: lambda:GetLayerVersion
                Principal:
                  description: An account ID, or <code>*</code> to grant permission to all
                    AWS accounts.
                  type: string
                  pattern: \d{12}|\*|arn:(aws[a-zA-Z-]*):iam::\d{12}:root
                OrganizationId:
                  description: With the principal set to <code>*</code>, grant permission
                    to all accounts in the specified organization.
                  type: string
                  pattern: o-[a-z0-9]{10,32}
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetLayerVersionPolicy
      description: Returns the permission policy for a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>. For more information, see
        <a>AddLayerVersionPermission</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLayerVersionPolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
      parameters:
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
        - name: VersionNumber
          in: path
          required: true
          description: The version number.
          schema:
            type: integer
  "/2015-03-31/functions/{FunctionName}/policy":
    post:
      operationId: AddPermission
      description: <p>Grants an AWS service or another account permission to use a
        function. You can apply the policy at the function level, or specify a
        qualifier to restrict access to a single version or alias. If you use a
        qualifier, the invoker must use the full Amazon Resource Name (ARN) of
        that version or alias to invoke the function.</p> <p>To grant permission
        to another account, specify the account ID as the
        <code>Principal</code>. For AWS services, the principal is a
        domain-style identifier defined by the service, like
        <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>. For AWS
        services, you can also specify the ARN or owning account of the
        associated resource as the <code>SourceArn</code> or
        <code>SourceAccount</code>. If you grant permission to a service
        principal without specifying the source, other accounts could
        potentially configure resources in their account to invoke your Lambda
        function.</p> <p>This action adds a statement to a resource-based
        permission policy for the function. For more information about function
        policies, see <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda
        Function Policies</a>. </p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPermissionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "484":
          description: PolicyLengthExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyLengthExceededException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "486":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function, version, or alias.</p> <p
            class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function
            name</b> - <code>my-function</code> (name-only),
            <code>my-function:v1</code> (with alias).</p> </li> <li> <p>
            <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Qualifier
          in: query
          required: false
          description: Specify a version or alias to add permissions to a published version
            of the function.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - StatementId
                - Action
                - Principal
              properties:
                StatementId:
                  description: A statement identifier that differentiates the statement
                    from others in the same policy.
                  type: string
                  pattern: ([a-zA-Z0-9-_]+)
                  minLength: 1
                  maxLength: 100
                Action:
                  description: The action that the principal can use on the function. For
                    example, <code>lambda:InvokeFunction</code> or
                    <code>lambda:GetFunction</code>.
                  type: string
                  pattern: (lambda:[*]|lambda:[a-zA-Z]+|[*])
                Principal:
                  description: The AWS service or account that invokes the function. If you
                    specify a service, use <code>SourceArn</code> or
                    <code>SourceAccount</code> to limit who can invoke the
                    function through that service.
                  type: string
                  pattern: .*
                SourceArn:
                  description: For AWS services, the ARN of the AWS resource that invokes
                    the function. For example, an Amazon S3 bucket or Amazon SNS
                    topic.
                  type: string
                  pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
                SourceAccount:
                  description: For AWS services, the ID of the account that owns the
                    resource. Use this instead of <code>SourceArn</code> to
                    grant permission to resources that are owned by another
                    account (for example, all of an account's Amazon S3
                    buckets). Or use it together with <code>SourceArn</code> to
                    ensure that the resource is owned by the specified account.
                    For example, an Amazon S3 bucket could be deleted by its
                    owner and recreated by another account.
                  type: string
                  pattern: \d{12}
                EventSourceToken:
                  description: For Alexa Smart Home functions, a token that must be
                    supplied by the invoker.
                  type: string
                  pattern: "[a-zA-Z0-9._\\-]+"
                  minLength: 0
                  maxLength: 256
                RevisionId:
                  description: Only update the policy if the revision ID matches the ID
                    that's specified. Use this option to avoid modifying a
                    policy that has changed since you last read it.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetPolicy
      description: Returns the <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">resource-based
        IAM policy</a> for a function, version, or alias.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function, version, or alias.</p> <p
            class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function
            name</b> - <code>my-function</code> (name-only),
            <code>my-function:v1</code> (with alias).</p> </li> <li> <p>
            <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 170
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Qualifier
          in: query
          required: false
          description: Specify a version or alias to get the policy for that resource.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
  "/2015-03-31/functions/{FunctionName}/aliases":
    post:
      operationId: CreateAlias
      description: <p>Creates an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>
        for a Lambda function version. Use aliases to provide clients with a
        function identifier that you can update to invoke a different
        version.</p> <p>You can also map an alias to split invocation requests
        between two versions. Use the <code>RoutingConfig</code> parameter to
        specify a second version and the percentage of invocation requests that
        it receives.</p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - Name
                - FunctionVersion
              properties:
                Name:
                  description: The name of the alias.
                  type: string
                  pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
                  minLength: 1
                  maxLength: 128
                FunctionVersion:
                  description: The function version that the alias invokes.
                  type: string
                  pattern: (\$LATEST|[0-9]+)
                  minLength: 1
                  maxLength: 1024
                Description:
                  description: A description of the alias.
                  type: string
                  minLength: 0
                  maxLength: 256
                RoutingConfig:
                  description: The <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a>
                    configuration of a Lambda function alias.
                  type: object
                  properties:
                    AdditionalVersionWeights:
                      $ref: "#/components/schemas/AdditionalVersionWeights"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListAliases
      description: Returns a list of <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">aliases</a>
        for a Lambda function.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAliasesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: FunctionVersion
          in: query
          required: false
          description: Specify a function version to only list aliases that invoke that
            version.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
            pattern: (\$LATEST|[0-9]+)
        - name: Marker
          in: query
          required: false
          description: Specify the pagination token that's returned by a previous request
            to retrieve the next page of results.
          schema:
            type: string
        - name: MaxItems
          in: query
          required: false
          description: Limit the number of aliases returned.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
  /2015-03-31/event-source-mappings/:
    post:
      operationId: CreateEventSourceMapping
      description: <p>Creates a mapping between an event source and an AWS Lambda function.
        Lambda reads items from the event source and triggers the function.</p>
        <p>For details about each event source type, see the following
        topics.</p> <ul> <li> <p> <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html">Using
        AWS Lambda with Amazon Kinesis</a> </p> </li> <li> <p> <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html">Using
        AWS Lambda with Amazon SQS</a> </p> </li> <li> <p> <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html">Using
        AWS Lambda with Amazon DynamoDB</a> </p> </li> </ul>
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSourceMappingConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - EventSourceArn
                - FunctionName
              properties:
                EventSourceArn:
                  description: <p>The Amazon Resource Name (ARN) of the event source.</p>
                    <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data
                    stream or a stream consumer.</p> </li> <li> <p> <b>Amazon
                    DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li>
                    <p> <b>Amazon Simple Queue Service</b> - The ARN of the
                    queue.</p> </li> </ul>
                  type: string
                  pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
                FunctionName:
                  description: <p>The name of the Lambda function.</p> <p class="title">
                    <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b>
                    - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function
                    ARN</b> -
                    <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                    </li> <li> <p> <b>Version or Alias ARN</b> -
                    <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
                    </li> <li> <p> <b>Partial ARN</b> -
                    <code>123456789012:function:MyFunction</code>.</p> </li>
                    </ul> <p>The length constraint applies only to the full ARN.
                    If you specify only the function name, it's limited to 64
                    characters in length.</p>
                  type: string
                  pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
                  minLength: 1
                  maxLength: 140
                Enabled:
                  description: Disables the event source mapping to pause polling and
                    invocation.
                  type: boolean
                BatchSize:
                  description: <p>The maximum number of items to retrieve in a single
                    batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default
                    100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB
                    Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p>
                    <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p>
                    </li> </ul>
                  type: integer
                  minimum: 1
                  maximum: 10000
                MaximumBatchingWindowInSeconds:
                  description: ""
                  type: integer
                  minimum: 0
                  maximum: 300
                StartingPosition:
                  description: The position in a stream from which to start reading.
                    Required for Amazon Kinesis and Amazon DynamoDB Streams
                    sources. <code>AT_TIMESTAMP</code> is only supported for
                    Amazon Kinesis streams.
                  type: string
                  enum:
                    - TRIM_HORIZON
                    - LATEST
                    - AT_TIMESTAMP
                StartingPositionTimestamp:
                  description: With <code>StartingPosition</code> set to
                    <code>AT_TIMESTAMP</code>, the time from which to start
                    reading.
                  type: string
                  format: date-time
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListEventSourceMappings
      description: Lists event source mappings. Specify an <code>EventSourceArn</code> to
        only show event source mappings for a single event source.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventSourceMappingsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: EventSourceArn
          in: query
          required: false
          description: <p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li>
            <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream
            consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The
            ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue
            Service</b> - The ARN of the queue.</p> </li> </ul>
          schema:
            type: string
            pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
        - name: FunctionName
          in: query
          required: false
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Version or Alias ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it's limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Marker
          in: query
          required: false
          description: A pagination token returned by a previous call.
          schema:
            type: string
        - name: MaxItems
          in: query
          required: false
          description: The maximum number of event source mappings to return.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
  /2015-03-31/functions:
    post:
      operationId: CreateFunction
      description: <p>Creates a Lambda function. To create a function, you need a <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html">deployment
        package</a> and an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution
        role</a>. The deployment package contains your function code. The
        execution role grants the function permission to use AWS services, such
        as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request
        tracing.</p> <p>A function has an unpublished version, and can have
        published versions and aliases. The unpublished version changes when you
        update your function's code and configuration. A published version is a
        snapshot of your function code and configuration that can't be changed.
        An alias is a named resource that maps to a version, and can be changed
        to map to a different version. Use the <code>Publish</code> parameter to
        create version <code>1</code> of your function from its initial
        configuration.</p> <p>The other parameters let you configure
        version-specific and function-level settings. You can modify
        version-specific settings later with <a>UpdateFunctionConfiguration</a>.
        Function-level settings apply to both the unpublished and published
        versions of the function, and include tags (<a>TagResource</a>) and
        per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p>
        <p>If another account or an AWS service invokes your function, use
        <a>AddPermission</a> to grant permission by creating a resource-based
        IAM policy. You can grant permissions at the function level, on a
        version, or on an alias.</p> <p>To invoke your function directly, use
        <a>Invoke</a>. To invoke your function in response to events in other
        AWS services, create an event source mapping
        (<a>CreateEventSourceMapping</a>), or configure a function trigger in
        the other service. For more information, see <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-functions.html">Invoking
        Functions</a>.</p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunctionConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "484":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "485":
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeStorageExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - FunctionName
                - Runtime
                - Role
                - Handler
                - Code
              properties:
                FunctionName:
                  description: <p>The name of the Lambda function.</p> <p class="title">
                    <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b>
                    - <code>my-function</code>.</p> </li> <li> <p> <b>Function
                    ARN</b> -
                    <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
                    </li> <li> <p> <b>Partial ARN</b> -
                    <code>123456789012:function:my-function</code>.</p> </li>
                    </ul> <p>The length constraint applies only to the full ARN.
                    If you specify only the function name, it is limited to 64
                    characters in length.</p>
                  type: string
                  pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
                  minLength: 1
                  maxLength: 140
                Runtime:
                  description: The identifier of the function's <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>.
                  type: string
                  enum:
                    - nodejs
                    - nodejs4.3
                    - nodejs6.10
                    - nodejs8.10
                    - nodejs10.x
                    - java8
                    - python2.7
                    - python3.6
                    - python3.7
                    - dotnetcore1.0
                    - dotnetcore2.0
                    - dotnetcore2.1
                    - nodejs4.3-edge
                    - go1.x
                    - ruby2.5
                    - provided
                Role:
                  description: The Amazon Resource Name (ARN) of the function's execution
                    role.
                  type: string
                  pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
                Handler:
                  description: The name of the method within your code that Lambda calls to
                    execute your function. The format includes the file name. It
                    can also include namespaces and other qualifiers, depending
                    on the runtime. For more information, see <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming
                    Model</a>.
                  type: string
                  pattern: "[^\\s]+"
                  maxLength: 128
                Code:
                  description: The code for the Lambda function. You can specify either an
                    object in Amazon S3, or upload a deployment package
                    directly.
                  type: object
                  properties:
                    ZipFile:
                      $ref: "#/components/schemas/Blob"
                    S3Bucket:
                      $ref: "#/components/schemas/S3Bucket"
                    S3Key:
                      $ref: "#/components/schemas/S3Key"
                    S3ObjectVersion:
                      $ref: "#/components/schemas/S3ObjectVersion"
                Description:
                  description: A description of the function.
                  type: string
                  minLength: 0
                  maxLength: 256
                Timeout:
                  description: The amount of time that Lambda allows a function to run
                    before stopping it. The default is 3 seconds. The maximum
                    allowed value is 900 seconds.
                  type: integer
                  minimum: 1
                MemorySize:
                  description: The amount of memory that your function has access to.
                    Increasing the function's memory also increases its CPU
                    allocation. The default value is 128 MB. The value must be a
                    multiple of 64 MB.
                  type: integer
                  minimum: 128
                  maximum: 3008
                Publish:
                  description: Set to true to publish the first version of the function
                    during creation.
                  type: boolean
                VpcConfig:
                  description: The VPC security groups and subnets that are attached to a
                    Lambda function.
                  type: object
                  properties:
                    SubnetIds:
                      $ref: "#/components/schemas/SubnetIds"
                    SecurityGroupIds:
                      $ref: "#/components/schemas/SecurityGroupIds"
                DeadLetterConfig:
                  description: The <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html">dead
                    letter queue</a> for failed asynchronous invocations.
                  type: object
                  properties:
                    TargetArn:
                      $ref: "#/components/schemas/ResourceArn"
                Environment:
                  description: A function's environment variable settings.
                  type: object
                  properties:
                    Variables:
                      $ref: "#/components/schemas/EnvironmentVariables"
                KMSKeyArn:
                  description: The ARN of the AWS Key Management Service (AWS KMS) key
                    that's used to encrypt your function's environment
                    variables. If it's not provided, AWS Lambda uses a default
                    service key.
                  type: string
                  pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
                TracingConfig:
                  description: The function's AWS X-Ray tracing configuration.
                  type: object
                  properties:
                    Mode:
                      $ref: "#/components/schemas/TracingMode"
                Tags:
                  description: A list of <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>
                    to apply to the function.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                Layers:
                  description: A list of <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function
                    layers</a> to add to the function's execution environment.
                    Specify each layer by its ARN, including the version.
                  type: array
                  items:
                    $ref: "#/components/schemas/LayerVersionArn"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-03-31/functions/{FunctionName}/aliases/{Name}":
    delete:
      operationId: DeleteAlias
      description: Deletes a Lambda function <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Name
          in: path
          required: true
          description: The name of the alias.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetAlias
      description: Returns details about a Lambda function <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Name
          in: path
          required: true
          description: The name of the alias.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
    put:
      operationId: UpdateAlias
      description: Updates the configuration of a Lambda function <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AliasConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Name
          in: path
          required: true
          description: The name of the alias.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                FunctionVersion:
                  description: The function version that the alias invokes.
                  type: string
                  pattern: (\$LATEST|[0-9]+)
                  minLength: 1
                  maxLength: 1024
                Description:
                  description: A description of the alias.
                  type: string
                  minLength: 0
                  maxLength: 256
                RoutingConfig:
                  description: The <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a>
                    configuration of a Lambda function alias.
                  type: object
                  properties:
                    AdditionalVersionWeights:
                      $ref: "#/components/schemas/AdditionalVersionWeights"
                RevisionId:
                  description: Only update the alias if the revision ID matches the ID
                    that's specified. Use this option to avoid modifying an
                    alias that has changed since you last read it.
                  type: string
        required: true
  "/2015-03-31/event-source-mappings/{UUID}":
    delete:
      operationId: DeleteEventSourceMapping
      description: Deletes an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html">event
        source mapping</a>. You can get the identifier of a mapping from the
        output of <a>ListEventSourceMappings</a>.
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSourceMappingConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: UUID
          in: path
          required: true
          description: The identifier of the event source mapping.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetEventSourceMapping
      description: Returns details about an event source mapping. You can get the
        identifier of a mapping from the output of
        <a>ListEventSourceMappings</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSourceMappingConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: UUID
          in: path
          required: true
          description: The identifier of the event source mapping.
          schema:
            type: string
    put:
      operationId: UpdateEventSourceMapping
      description: Updates an event source mapping. You can change the function that AWS
        Lambda invokes, or pause invocation and resume later from the same
        location.
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSourceMappingConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "485":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters:
        - name: UUID
          in: path
          required: true
          description: The identifier of the event source mapping.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                FunctionName:
                  description: <p>The name of the Lambda function.</p> <p class="title">
                    <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b>
                    - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function
                    ARN</b> -
                    <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
                    </li> <li> <p> <b>Version or Alias ARN</b> -
                    <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p>
                    </li> <li> <p> <b>Partial ARN</b> -
                    <code>123456789012:function:MyFunction</code>.</p> </li>
                    </ul> <p>The length constraint applies only to the full ARN.
                    If you specify only the function name, it's limited to 64
                    characters in length.</p>
                  type: string
                  pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
                  minLength: 1
                  maxLength: 140
                Enabled:
                  description: Disables the event source mapping to pause polling and
                    invocation.
                  type: boolean
                BatchSize:
                  description: <p>The maximum number of items to retrieve in a single
                    batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default
                    100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB
                    Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p>
                    <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p>
                    </li> </ul>
                  type: integer
                  minimum: 1
                  maximum: 10000
                MaximumBatchingWindowInSeconds:
                  description: ""
                  type: integer
                  minimum: 0
                  maximum: 300
        required: true
  "/2015-03-31/functions/{FunctionName}":
    delete:
      operationId: DeleteFunction
      description: <p>Deletes a Lambda function. To delete a specific function version, use
        the <code>Qualifier</code> parameter. Otherwise, all versions and
        aliases are deleted.</p> <p>To delete Lambda event source mappings that
        invoke a function, use <a>DeleteEventSourceMapping</a>. For AWS services
        and resources that invoke your function directly, delete the trigger in
        the service where you originally configured it.</p>
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "484":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function or version.</p> <p class="title">
            <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>my-function</code> (name-only), <code>my-function:1</code>
            (with version).</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Qualifier
          in: query
          required: false
          description: Specify a version to delete. You can't delete a version that's
            referenced by an alias.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetFunction
      description: Returns information about the function or function version, with a link
        to download the deployment package that's valid for 10 minutes. If you
        specify a function version, only details that are specific to that
        version are returned.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFunctionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function, version, or alias.</p> <p
            class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function
            name</b> - <code>my-function</code> (name-only),
            <code>my-function:v1</code> (with alias).</p> </li> <li> <p>
            <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 170
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Qualifier
          in: query
          required: false
          description: Specify a version or alias to get details about a published version
            of the function.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
  "/2017-10-31/functions/{FunctionName}/concurrency":
    delete:
      operationId: DeleteFunctionConcurrency
      description: Removes a concurrent execution limit from a function.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: PutFunctionConcurrency
      description: <p>Sets the maximum number of simultaneous executions for a function,
        and reserves capacity for that concurrency level.</p> <p>Concurrency
        settings apply to the function as a whole, including all published
        versions and the unpublished version. Reserving concurrency both ensures
        that your function has capacity to process the specified number of
        events simultaneously, and prevents it from scaling beyond that level.
        Use <a>GetFunction</a> to see the current setting for a function.</p>
        <p>Use <a>GetAccountSettings</a> to see your regional concurrency limit.
        You can reserve concurrency for as many functions as you like, as long
        as you leave at least 100 simultaneous executions unreserved for
        functions that aren't configured with a per-function limit. For more
        information, see <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing
        Concurrency</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Concurrency"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ReservedConcurrentExecutions
              properties:
                ReservedConcurrentExecutions:
                  description: The number of simultaneous executions to reserve for the
                    function.
                  type: integer
                  minimum: 0
        required: true
  "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}":
    delete:
      operationId: DeleteLayerVersion
      description: Deletes a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>. Deleted versions can no longer be viewed or added to
        functions. To avoid breaking functions, a copy of the version remains in
        Lambda until no functions refer to it.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
        - name: VersionNumber
          in: path
          required: true
          description: The version number.
          schema:
            type: integer
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetLayerVersion
      description: Returns information about a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>, with a link to download the layer archive that's valid
        for 10 minutes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLayerVersionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
        - name: VersionNumber
          in: path
          required: true
          description: The version number.
          schema:
            type: integer
  /2016-08-19/account-settings/:
    get:
      operationId: GetAccountSettings
      description: Retrieves details about your account's <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a>
        and usage in an AWS Region.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAccountSettingsResponse"
        "480":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "481":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-03-31/functions/{FunctionName}/configuration":
    get:
      operationId: GetFunctionConfiguration
      description: <p>Returns the version-specific settings of a Lambda function or
        version. The output includes only options that can vary between versions
        of a function. To modify these settings, use
        <a>UpdateFunctionConfiguration</a>.</p> <p>To get all of a function's
        details, including function-level settings, use <a>GetFunction</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunctionConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function, version, or alias.</p> <p
            class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function
            name</b> - <code>my-function</code> (name-only),
            <code>my-function:v1</code> (with alias).</p> </li> <li> <p>
            <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 170
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Qualifier
          in: query
          required: false
          description: Specify a version or alias to get details about a published version
            of the function.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: UpdateFunctionConfiguration
      description: <p>Modify the version-specific settings of a Lambda function.</p>
        <p>These settings can vary between versions of a function and are locked
        when you publish a version. You can't modify the configuration of a
        published version, only the unpublished version.</p> <p>To configure
        function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke
        permissions to an account or AWS service, use <a>AddPermission</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunctionConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceConflictException"
        "485":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Role:
                  description: The Amazon Resource Name (ARN) of the function's execution
                    role.
                  type: string
                  pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
                Handler:
                  description: The name of the method within your code that Lambda calls to
                    execute your function. The format includes the file name. It
                    can also include namespaces and other qualifiers, depending
                    on the runtime. For more information, see <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming
                    Model</a>.
                  type: string
                  pattern: "[^\\s]+"
                  maxLength: 128
                Description:
                  description: A description of the function.
                  type: string
                  minLength: 0
                  maxLength: 256
                Timeout:
                  description: The amount of time that Lambda allows a function to run
                    before stopping it. The default is 3 seconds. The maximum
                    allowed value is 900 seconds.
                  type: integer
                  minimum: 1
                MemorySize:
                  description: The amount of memory that your function has access to.
                    Increasing the function's memory also increases its CPU
                    allocation. The default value is 128 MB. The value must be a
                    multiple of 64 MB.
                  type: integer
                  minimum: 128
                  maximum: 3008
                VpcConfig:
                  description: The VPC security groups and subnets that are attached to a
                    Lambda function.
                  type: object
                  properties:
                    SubnetIds:
                      $ref: "#/components/schemas/SubnetIds"
                    SecurityGroupIds:
                      $ref: "#/components/schemas/SecurityGroupIds"
                Environment:
                  description: A function's environment variable settings.
                  type: object
                  properties:
                    Variables:
                      $ref: "#/components/schemas/EnvironmentVariables"
                Runtime:
                  description: The identifier of the function's <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>.
                  type: string
                  enum:
                    - nodejs
                    - nodejs4.3
                    - nodejs6.10
                    - nodejs8.10
                    - nodejs10.x
                    - java8
                    - python2.7
                    - python3.6
                    - python3.7
                    - dotnetcore1.0
                    - dotnetcore2.0
                    - dotnetcore2.1
                    - nodejs4.3-edge
                    - go1.x
                    - ruby2.5
                    - provided
                DeadLetterConfig:
                  description: The <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html">dead
                    letter queue</a> for failed asynchronous invocations.
                  type: object
                  properties:
                    TargetArn:
                      $ref: "#/components/schemas/ResourceArn"
                KMSKeyArn:
                  description: The ARN of the AWS Key Management Service (AWS KMS) key
                    that's used to encrypt your function's environment
                    variables. If it's not provided, AWS Lambda uses a default
                    service key.
                  type: string
                  pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
                TracingConfig:
                  description: The function's AWS X-Ray tracing configuration.
                  type: object
                  properties:
                    Mode:
                      $ref: "#/components/schemas/TracingMode"
                RevisionId:
                  description: Only update the function if the revision ID matches the ID
                    that's specified. Use this option to avoid modifying a
                    function that has changed since you last read it.
                  type: string
                Layers:
                  description: A list of <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function
                    layers</a> to add to the function's execution environment.
                    Specify each layer by its ARN, including the version.
                  type: array
                  items:
                    $ref: "#/components/schemas/LayerVersionArn"
        required: true
  /2018-10-31/layers#find=LayerVersion&Arn:
    get:
      operationId: GetLayerVersionByArn
      description: Returns information about a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>, with a link to download the layer archive that's valid
        for 10 minutes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLayerVersionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: Arn
          in: query
          required: true
          description: The ARN of the layer version.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+
        - name: find
          in: query
          required: true
          schema:
            type: string
            enum:
              - LayerVersion
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-03-31/functions/{FunctionName}/invocations":
    post:
      operationId: Invoke
      description: <p>Invokes a Lambda function. You can invoke a function synchronously
        (and wait for the response), or asynchronously. To invoke a function
        asynchronously, set <code>InvocationType</code> to
        <code>Event</code>.</p> <p>For synchronous invocation, details about the
        function response, including errors, are included in the response body
        and headers. For either invocation type, you can find more information
        in the <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html">execution
        log</a> and <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html">trace</a>.
        To record function errors for asynchronous invocations, configure your
        function with a <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html">dead letter
        queue</a>.</p> <p>When an error occurs, your function may be invoked
        multiple times. Retry behavior varies by error type, client, event
        source, and invocation type. For example, if you invoke a function
        asynchronously and it returns an error, Lambda executes the function up
        to two more times. For more information, see <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html">Retry
        Behavior</a>.</p> <p>The status code in the API response doesn't reflect
        function errors. Error codes are reserved for errors that prevent your
        function from executing, such as permissions errors, <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limit
        errors</a>, or issues with your function's code and configuration. For
        example, Lambda returns <code>TooManyRequestsException</code> if
        executing the function would cause you to exceed a concurrency limit at
        either the account level
        (<code>ConcurrentInvocationLimitExceeded</code>) or function level
        (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p>
        <p>For functions with a long timeout, your client might be disconnected
        during synchronous invocation while it waits for a response. Configure
        your HTTP client, SDK, firewall, proxy, or operating system to allow for
        long connections with timeout or keep-alive settings.</p> <p>This
        operation requires permission for the <code>lambda:InvokeFunction</code>
        action.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvocationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidRequestContentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestContentException"
        "483":
          description: RequestTooLargeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestTooLargeException"
        "484":
          description: UnsupportedMediaTypeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedMediaTypeException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "486":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "487":
          description: EC2UnexpectedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EC2UnexpectedException"
        "488":
          description: SubnetIPAddressLimitReachedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubnetIPAddressLimitReachedException"
        "489":
          description: ENILimitReachedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ENILimitReachedException"
        "490":
          description: EC2ThrottledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EC2ThrottledException"
        "491":
          description: EC2AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EC2AccessDeniedException"
        "492":
          description: InvalidSubnetIDException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSubnetIDException"
        "493":
          description: InvalidSecurityGroupIDException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidSecurityGroupIDException"
        "494":
          description: InvalidZipFileException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidZipFileException"
        "495":
          description: KMSDisabledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSDisabledException"
        "496":
          description: KMSInvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSInvalidStateException"
        "497":
          description: KMSAccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSAccessDeniedException"
        "498":
          description: KMSNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KMSNotFoundException"
        "499":
          description: InvalidRuntimeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRuntimeException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function, version, or alias.</p> <p
            class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function
            name</b> - <code>my-function</code> (name-only),
            <code>my-function:v1</code> (with alias).</p> </li> <li> <p>
            <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 170
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: X-Amz-Invocation-Type
          in: header
          required: false
          description: <p>Choose from the following options.</p> <ul> <li> <p>
            <code>RequestResponse</code> (default) - Invoke the function
            synchronously. Keep the connection open until the function returns a
            response or times out. The API response includes the function
            response and additional data.</p> </li> <li> <p> <code>Event</code>
            - Invoke the function asynchronously. Send events that fail multiple
            times to the function's dead-letter queue (if it's configured). The
            API response only includes a status code.</p> </li> <li> <p>
            <code>DryRun</code> - Validate parameter values and verify that the
            user or role has permission to invoke the function.</p> </li> </ul>
          schema:
            type: string
            enum:
              - Event
              - RequestResponse
              - DryRun
        - name: X-Amz-Log-Type
          in: header
          required: false
          description: Set to <code>Tail</code> to include the execution log in the
            response.
          schema:
            type: string
            enum:
              - None
              - Tail
        - name: X-Amz-Client-Context
          in: header
          required: false
          description: Up to 3583 bytes of base64-encoded data about the invoking client to
            pass to the function in the context object.
          schema:
            type: string
        - name: Qualifier
          in: query
          required: false
          description: Specify a version or alias to invoke a published version of the
            function.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Payload:
                  description: The JSON that you want to provide to your Lambda function as
                    input.
                  type: string
                  format: password
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2014-11-13/functions/{FunctionName}/invoke-async/":
    post:
      deprecated: true
      operationId: InvokeAsync
      description: <important> <p>For asynchronous function invocation, use
        <a>Invoke</a>.</p> </important> <p>Invokes a function
        asynchronously.</p>
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvokeAsyncResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidRequestContentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestContentException"
        "483":
          description: InvalidRuntimeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRuntimeException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 170
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - InvokeArgs
              properties:
                InvokeArgs:
                  description: The JSON that you want to provide to your Lambda function as
                    input.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /2015-03-31/functions/:
    get:
      operationId: ListFunctions
      description: <p>Returns a list of Lambda functions, with the version-specific
        configuration of each.</p> <p>Set <code>FunctionVersion</code> to
        <code>ALL</code> to include all published versions of each function in
        addition to the unpublished version. To get more information about a
        function or version, use <a>GetFunction</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFunctionsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
      parameters:
        - name: MasterRegion
          in: query
          required: false
          description: For Lambda@Edge functions, the AWS Region of the master function.
            For example, <code>us-east-2</code> or <code>ALL</code>. If
            specified, you must set <code>FunctionVersion</code> to
            <code>ALL</code>.
          schema:
            type: string
            pattern: ALL|[a-z]{2}(-gov)?-[a-z]+-\d{1}
        - name: FunctionVersion
          in: query
          required: false
          description: Set to <code>ALL</code> to include entries for all published
            versions of each function.
          schema:
            type: string
            enum:
              - ALL
        - name: Marker
          in: query
          required: false
          description: Specify the pagination token that's returned by a previous request
            to retrieve the next page of results.
          schema:
            type: string
        - name: MaxItems
          in: query
          required: false
          description: Specify a value between 1 and 50 to limit the number of functions in
            the response.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2018-10-31/layers/{LayerName}/versions":
    get:
      operationId: ListLayerVersions
      description: Lists the versions of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>. Versions that have been deleted aren't listed. Specify
        a <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime
        identifier</a> to list only versions that indicate that they're
        compatible with that runtime.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLayerVersionsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: CompatibleRuntime
          in: query
          required: false
          description: A runtime identifier. For example, <code>go1.x</code>.
          schema:
            type: string
            enum:
              - nodejs
              - nodejs4.3
              - nodejs6.10
              - nodejs8.10
              - nodejs10.x
              - java8
              - python2.7
              - python3.6
              - python3.7
              - dotnetcore1.0
              - dotnetcore2.0
              - dotnetcore2.1
              - nodejs4.3-edge
              - go1.x
              - ruby2.5
              - provided
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
        - name: Marker
          in: query
          required: false
          description: A pagination token returned by a previous call.
          schema:
            type: string
        - name: MaxItems
          in: query
          required: false
          description: The maximum number of versions to return.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: PublishLayerVersion
      description: <p>Creates an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a> from a ZIP archive. Each time you call
        <code>PublishLayerVersion</code> with the same version name, a new
        version is created.</p> <p>Add layers to your function with
        <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishLayerVersionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "483":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "484":
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeStorageExceededException"
      parameters:
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - Content
              properties:
                Description:
                  description: The description of the version.
                  type: string
                  minLength: 0
                  maxLength: 256
                Content:
                  description: A ZIP archive that contains the contents of an <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
                    Lambda layer</a>. You can specify either an Amazon S3
                    location, or upload a layer archive directly.
                  type: object
                  properties:
                    S3Bucket:
                      $ref: "#/components/schemas/S3Bucket"
                    S3Key:
                      $ref: "#/components/schemas/S3Key"
                    S3ObjectVersion:
                      $ref: "#/components/schemas/S3ObjectVersion"
                    ZipFile:
                      $ref: "#/components/schemas/Blob"
                CompatibleRuntimes:
                  description: A list of compatible <a
                    href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">function
                    runtimes</a>. Used for filtering with <a>ListLayers</a> and
                    <a>ListLayerVersions</a>.
                  type: array
                  items:
                    $ref: "#/components/schemas/Runtime"
                  maxItems: 5
                LicenseInfo:
                  description: <p>The layer's software license. It can be any of the
                    following:</p> <ul> <li> <p>An <a
                    href="https://spdx.org/licenses/">SPDX license
                    identifier</a>. For example, <code>MIT</code>.</p> </li>
                    <li> <p>The URL of a license hosted on the internet. For
                    example,
                    <code>https://opensource.org/licenses/MIT</code>.</p> </li>
                    <li> <p>The full text of the license.</p> </li> </ul>
                  type: string
                  maxLength: 512
        required: true
  /2018-10-31/layers:
    get:
      operationId: ListLayers
      description: Lists <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layers</a> and shows information about the latest version of
        each. Specify a <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime
        identifier</a> to list only layers that indicate that they're compatible
        with that runtime.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLayersResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: CompatibleRuntime
          in: query
          required: false
          description: A runtime identifier. For example, <code>go1.x</code>.
          schema:
            type: string
            enum:
              - nodejs
              - nodejs4.3
              - nodejs6.10
              - nodejs8.10
              - nodejs10.x
              - java8
              - python2.7
              - python3.6
              - python3.7
              - dotnetcore1.0
              - dotnetcore2.0
              - dotnetcore2.1
              - nodejs4.3-edge
              - go1.x
              - ruby2.5
              - provided
        - name: Marker
          in: query
          required: false
          description: A pagination token returned by a previous call.
          schema:
            type: string
        - name: MaxItems
          in: query
          required: false
          description: The maximum number of layers to return.
          schema:
            type: integer
            minimum: 1
            maximum: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2017-03-31/tags/{ARN}":
    get:
      operationId: ListTags
      description: Returns a function's <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>.
        You can also view tags with <a>GetFunction</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: ARN
          in: path
          required: true
          description: The function's Amazon Resource Name (ARN).
          schema:
            type: string
            pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: Adds <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>
        to a function.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: ARN
          in: path
          required: true
          description: The function's Amazon Resource Name (ARN).
          schema:
            type: string
            pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - Tags
              properties:
                Tags:
                  description: A list of tags to apply to the function.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
        required: true
  "/2015-03-31/functions/{FunctionName}/versions":
    get:
      operationId: ListVersionsByFunction
      description: 'Returns a list of <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">versions</a>,
        with the version-specific configuration of each. '
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListVersionsByFunctionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 170
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: Marker
          in: query
          required: false
          description: Specify the pagination token that's returned by a previous request
            to retrieve the next page of results.
          schema:
            type: string
        - name: MaxItems
          in: query
          required: false
          description: Limit the number of versions that are returned.
          schema:
            type: integer
            minimum: 1
            maximum: 10000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: PublishVersion
      description: <p>Creates a <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version</a>
        from the current code and configuration of a function. Use versions to
        create a snapshot of your function code and configuration that doesn't
        change.</p> <p>AWS Lambda doesn't publish a version if the function's
        configuration and code haven't changed since the last version. Use
        <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to
        update the function before publishing a version.</p> <p>Clients can
        invoke versions directly or with an alias. To create an alias, use
        <a>CreateAlias</a>.</p>
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunctionConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeStorageExceededException"
        "485":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:MyFunction</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                CodeSha256:
                  description: Only publish a version if the hash value matches the value
                    that's specified. Use this option to avoid publishing a
                    version if the function code has changed since you last
                    updated it. You can get the hash for the version that you
                    uploaded from the output of <a>UpdateFunctionCode</a>.
                  type: string
                Description:
                  description: A description for the version to override the description in
                    the function configuration.
                  type: string
                  minLength: 0
                  maxLength: 256
                RevisionId:
                  description: Only update the function if the revision ID matches the ID
                    that's specified. Use this option to avoid publishing a
                    version if the function configuration has changed since you
                    last updated it.
                  type: string
        required: true
  "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}":
    delete:
      operationId: RemoveLayerVersionPermission
      description: Removes a statement from the permissions policy for a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>. For more information, see
        <a>AddLayerVersionPermission</a>.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: LayerName
          in: path
          required: true
          description: The name or Amazon Resource Name (ARN) of the layer.
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
        - name: VersionNumber
          in: path
          required: true
          description: The version number.
          schema:
            type: integer
        - name: StatementId
          in: path
          required: true
          description: The identifier that was specified when the statement was added.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ([a-zA-Z0-9-_]+)
        - name: RevisionId
          in: query
          required: false
          description: Only update the policy if the revision ID matches the ID specified.
            Use this option to avoid modifying a policy that has changed since
            you last read it.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-03-31/functions/{FunctionName}/policy/{StatementId}":
    delete:
      operationId: RemovePermission
      description: Revokes function-use permission from an AWS service or another account.
        You can get the ID of the statement from the output of <a>GetPolicy</a>.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function, version, or alias.</p> <p
            class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function
            name</b> - <code>my-function</code> (name-only),
            <code>my-function:v1</code> (with alias).</p> </li> <li> <p>
            <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>You can append a version number or alias to any of the formats.
            The length constraint applies only to the full ARN. If you specify
            only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: StatementId
          in: path
          required: true
          description: Statement ID of the permission to remove.
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: ([a-zA-Z0-9-_.]+)
        - name: Qualifier
          in: query
          required: false
          description: Specify a version or alias to remove permissions from a published
            version of the function.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: (|[a-zA-Z0-9$_-]+)
        - name: RevisionId
          in: query
          required: false
          description: Only update the policy if the revision ID matches the ID that's
            specified. Use this option to avoid modifying a policy that has
            changed since you last read it.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2017-03-31/tags/{ARN}#tagKeys":
    delete:
      operationId: UntagResource
      description: Removes <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>
        from a function.
      responses:
        "204":
          description: Success
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: ARN
          in: path
          required: true
          description: The function's Amazon Resource Name (ARN).
          schema:
            type: string
            pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
        - name: tagKeys
          in: query
          required: true
          description: A list of tag keys to remove from the function.
          schema:
            type: array
            items:
              type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/2015-03-31/functions/{FunctionName}/code":
    put:
      operationId: UpdateFunctionCode
      description: <p>Updates a Lambda function's code.</p> <p>The function's code is
        locked when you publish a version. You can't modify the code of a
        published version, only the unpublished version.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FunctionConfiguration"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "483":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "484":
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeStorageExceededException"
        "485":
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreconditionFailedException"
      parameters:
        - name: FunctionName
          in: path
          required: true
          description: <p>The name of the Lambda function.</p> <p class="title"> <b>Name
            formats</b> </p> <ul> <li> <p> <b>Function name</b> -
            <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> -
            <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p>
            </li> <li> <p> <b>Partial ARN</b> -
            <code>123456789012:function:my-function</code>.</p> </li> </ul>
            <p>The length constraint applies only to the full ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.</p>
          schema:
            type: string
            minLength: 1
            maxLength: 140
            pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ZipFile:
                  description: The base64-encoded contents of the deployment package. AWS
                    SDK and AWS CLI clients handle the encoding for you.
                  type: string
                  format: password
                S3Bucket:
                  description: An Amazon S3 bucket in the same AWS Region as your function.
                    The bucket can be in a different AWS account.
                  type: string
                  pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
                  minLength: 3
                  maxLength: 63
                S3Key:
                  description: The Amazon S3 key of the deployment package.
                  type: string
                  minLength: 1
                  maxLength: 1024
                S3ObjectVersion:
                  description: For versioned objects, the version of the deployment package
                    object to use.
                  type: string
                  minLength: 1
                  maxLength: 1024
                Publish:
                  description: Set to true to publish a new version of the function after
                    updating the code. This has the same effect as calling
                    <a>PublishVersion</a> separately.
                  type: boolean
                DryRun:
                  description: Set to true to validate the request parameters and access
                    permissions without modifying the function code.
                  type: boolean
                RevisionId:
                  description: Only update the function if the revision ID matches the ID
                    that's specified. Use this option to avoid modifying a
                    function that has changed since you last read it.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://lambda.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Lambda multi-region endpoint
  - url: https://lambda.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Lambda multi-region endpoint
  - url: http://lambda.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Lambda endpoint for China (Beijing) and China (Ningxia)
  - url: https://lambda.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Lambda endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddLayerVersionPermissionResponse:
      type: object
      properties:
        Statement:
          $ref: "#/components/schemas/String"
        RevisionId:
          $ref: "#/components/schemas/String"
    ServiceException: {}
    ResourceNotFoundException: {}
    ResourceConflictException: {}
    TooManyRequestsException: {}
    InvalidParameterValueException: {}
    PolicyLengthExceededException: {}
    PreconditionFailedException: {}
    AddPermissionResponse:
      type: object
      example:
        Statement: ID-1
      properties:
        Statement:
          $ref: "#/components/schemas/String"
    AliasConfiguration:
      type: object
      example:
        AliasArn: arn:aws:lambda:us-west-2:123456789012:function:functionAlias
        Description: ""
        FunctionVersion: "1"
        Name: functionAlias
      properties:
        AliasArn:
          $ref: "#/components/schemas/FunctionArn"
        Name:
          $ref: "#/components/schemas/Alias"
        FunctionVersion:
          $ref: "#/components/schemas/Version"
        Description:
          $ref: "#/components/schemas/Description"
        RoutingConfig:
          $ref: "#/components/schemas/AliasRoutingConfiguration"
        RevisionId:
          $ref: "#/components/schemas/String"
      description: Provides configuration information about a Lambda function <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
    AdditionalVersionWeights:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Weight"
    EventSourceMappingConfiguration:
      type: object
      example:
        BatchSize: 123
        EventSourceArn: arn:aws:s3:::examplebucket/*
        FunctionArn: arn:aws:lambda:us-west-2:123456789012:function:myFunction
        LastModified: 2016-11-21T19:49:20.006+0000
        LastProcessingResult: ""
        State: ""
        StateTransitionReason: ""
        UUID: 1234xCy789012
      properties:
        UUID:
          $ref: "#/components/schemas/String"
        BatchSize:
          $ref: "#/components/schemas/BatchSize"
        MaximumBatchingWindowInSeconds:
          $ref: "#/components/schemas/MaximumBatchingWindowInSeconds"
        EventSourceArn:
          $ref: "#/components/schemas/Arn"
        FunctionArn:
          $ref: "#/components/schemas/FunctionArn"
        LastModified:
          $ref: "#/components/schemas/Date"
        LastProcessingResult:
          $ref: "#/components/schemas/String"
        State:
          $ref: "#/components/schemas/String"
        StateTransitionReason:
          $ref: "#/components/schemas/String"
      description: A mapping between an AWS resource and an AWS Lambda function. See
        <a>CreateEventSourceMapping</a> for details.
    FunctionConfiguration:
      type: object
      example:
        CodeSha256: LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=
        CodeSize: 123
        Description: ""
        FunctionArn: arn:aws:lambda:us-west-2:123456789012:function:myFunction
        FunctionName: myFunction
        Handler: index.handler
        LastModified: 2016-11-21T19:49:20.006+0000
        MemorySize: 128
        Role: arn:aws:iam::123456789012:role/lambda_basic_execution
        Runtime: python2.7
        Timeout: 123
        Version: "1"
        VpcConfig: {}
      properties:
        FunctionName:
          $ref: "#/components/schemas/NamespacedFunctionName"
        FunctionArn:
          $ref: "#/components/schemas/NameSpacedFunctionArn"
        Runtime:
          $ref: "#/components/schemas/Runtime"
        Role:
          $ref: "#/components/schemas/RoleArn"
        Handler:
          $ref: "#/components/schemas/Handler"
        CodeSize:
          $ref: "#/components/schemas/Long"
        Description:
          $ref: "#/components/schemas/Description"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MemorySize:
          $ref: "#/components/schemas/MemorySize"
        LastModified:
          $ref: "#/components/schemas/Timestamp"
        CodeSha256:
          $ref: "#/components/schemas/String"
        Version:
          $ref: "#/components/schemas/Version"
        VpcConfig:
          $ref: "#/components/schemas/VpcConfigResponse"
        DeadLetterConfig:
          $ref: "#/components/schemas/DeadLetterConfig"
        Environment:
          $ref: "#/components/schemas/EnvironmentResponse"
        KMSKeyArn:
          $ref: "#/components/schemas/KMSKeyArn"
        TracingConfig:
          $ref: "#/components/schemas/TracingConfigResponse"
        MasterArn:
          $ref: "#/components/schemas/FunctionArn"
        RevisionId:
          $ref: "#/components/schemas/String"
        Layers:
          $ref: "#/components/schemas/LayersReferenceList"
      description: Details about a function's configuration.
    Blob:
      type: string
      format: password
    S3Bucket:
      type: string
      pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
      minLength: 3
      maxLength: 63
    S3Key:
      type: string
      minLength: 1
      maxLength: 1024
    S3ObjectVersion:
      type: string
      minLength: 1
      maxLength: 1024
    SubnetIds:
      type: array
      items:
        $ref: "#/components/schemas/SubnetId"
      maxItems: 16
    SecurityGroupIds:
      type: array
      items:
        $ref: "#/components/schemas/SecurityGroupId"
      maxItems: 5
    ResourceArn:
      type: string
      pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
    EnvironmentVariables:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/EnvironmentVariableValue"
    TracingMode:
      type: string
      enum:
        - Active
        - PassThrough
    TagValue:
      type: string
    LayerVersionArn:
      type: string
      pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+
      minLength: 1
      maxLength: 140
    CodeStorageExceededException: {}
    ResourceInUseException: {}
    GetAccountSettingsResponse:
      type: object
      example:
        AccountLimit: {}
        AccountUsage: {}
      properties:
        AccountLimit:
          $ref: "#/components/schemas/AccountLimit"
        AccountUsage:
          $ref: "#/components/schemas/AccountUsage"
    GetFunctionResponse:
      type: object
      example:
        Code:
          Location: somelocation
          RepositoryType: S3
        Configuration:
          CodeSha256: LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=
          CodeSize: 262
          Description: A starter AWS Lambda function.
          Environment:
            Variables:
              S3_BUCKET: test
          FunctionArn: arn:aws:lambda:us-west-2:123456789012:function:myFunction
          FunctionName: myFunction
          Handler: index.handler
          LastModified: 2016-11-21T19:49:20.006+0000
          MemorySize: 128
          Role: arn:aws:iam::123456789012:role/lambda_basic_execution
          Runtime: nodejs8.10
          Timeout: 3
          Version: $LATEST
          VpcConfig:
            SecurityGroupIds: []
            SubnetIds: []
      properties:
        Configuration:
          $ref: "#/components/schemas/FunctionConfiguration"
        Code:
          $ref: "#/components/schemas/FunctionCodeLocation"
        Tags:
          $ref: "#/components/schemas/Tags"
        Concurrency:
          $ref: "#/components/schemas/Concurrency"
    GetLayerVersionResponse:
      type: object
      properties:
        Content:
          $ref: "#/components/schemas/LayerVersionContentOutput"
        LayerArn:
          $ref: "#/components/schemas/LayerArn"
        LayerVersionArn:
          $ref: "#/components/schemas/LayerVersionArn"
        Description:
          $ref: "#/components/schemas/Description"
        CreatedDate:
          $ref: "#/components/schemas/Timestamp"
        Version:
          $ref: "#/components/schemas/LayerVersionNumber"
        CompatibleRuntimes:
          $ref: "#/components/schemas/CompatibleRuntimes"
        LicenseInfo:
          $ref: "#/components/schemas/LicenseInfo"
    GetLayerVersionPolicyResponse:
      type: object
      properties:
        Policy:
          $ref: "#/components/schemas/String"
        RevisionId:
          $ref: "#/components/schemas/String"
    GetPolicyResponse:
      type: object
      example:
        Policy: ""
      properties:
        Policy:
          $ref: "#/components/schemas/String"
        RevisionId:
          $ref: "#/components/schemas/String"
    InvocationResponse:
      type: object
      example:
        FunctionError: ""
        LogResult: ""
        Payload: "?"
        StatusCode: 123
      properties:
        StatusCode:
          $ref: "#/components/schemas/Integer"
        Payload:
          $ref: "#/components/schemas/Blob"
    InvalidRequestContentException: {}
    RequestTooLargeException: {}
    UnsupportedMediaTypeException: {}
    EC2UnexpectedException: {}
    SubnetIPAddressLimitReachedException: {}
    ENILimitReachedException: {}
    EC2ThrottledException: {}
    EC2AccessDeniedException: {}
    InvalidSubnetIDException: {}
    InvalidSecurityGroupIDException: {}
    InvalidZipFileException: {}
    KMSDisabledException: {}
    KMSInvalidStateException: {}
    KMSAccessDeniedException: {}
    KMSNotFoundException: {}
    InvalidRuntimeException: {}
    InvokeAsyncResponse:
      type: object
      example:
        Status: 123
      properties:
        Status:
          $ref: "#/components/schemas/HttpStatus"
      description: "A success response (<code>202 Accepted</code>) indicates that the
        request is queued for invocation. "
    ListAliasesResponse:
      type: object
      example:
        Aliases: []
        NextMarker: ""
      properties:
        NextMarker:
          $ref: "#/components/schemas/String"
        Aliases:
          $ref: "#/components/schemas/AliasList"
    ListEventSourceMappingsResponse:
      type: object
      properties:
        NextMarker:
          $ref: "#/components/schemas/String"
        EventSourceMappings:
          $ref: "#/components/schemas/EventSourceMappingsList"
    ListFunctionsResponse:
      type: object
      example:
        Functions: []
        NextMarker: ""
      properties:
        NextMarker:
          $ref: "#/components/schemas/String"
        Functions:
          $ref: "#/components/schemas/FunctionList"
      description: A list of Lambda functions.
    ListLayerVersionsResponse:
      type: object
      properties:
        NextMarker:
          $ref: "#/components/schemas/String"
        LayerVersions:
          $ref: "#/components/schemas/LayerVersionsList"
    ListLayersResponse:
      type: object
      properties:
        NextMarker:
          $ref: "#/components/schemas/String"
        Layers:
          $ref: "#/components/schemas/LayersList"
    ListTagsResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/Tags"
    ListVersionsByFunctionResponse:
      type: object
      example:
        NextMarker: ""
        Versions: []
      properties:
        NextMarker:
          $ref: "#/components/schemas/String"
        Versions:
          $ref: "#/components/schemas/FunctionList"
    PublishLayerVersionResponse:
      type: object
      properties:
        Content:
          $ref: "#/components/schemas/LayerVersionContentOutput"
        LayerArn:
          $ref: "#/components/schemas/LayerArn"
        LayerVersionArn:
          $ref: "#/components/schemas/LayerVersionArn"
        Description:
          $ref: "#/components/schemas/Description"
        CreatedDate:
          $ref: "#/components/schemas/Timestamp"
        Version:
          $ref: "#/components/schemas/LayerVersionNumber"
        CompatibleRuntimes:
          $ref: "#/components/schemas/CompatibleRuntimes"
        LicenseInfo:
          $ref: "#/components/schemas/LicenseInfo"
    Runtime:
      type: string
      enum:
        - nodejs
        - nodejs4.3
        - nodejs6.10
        - nodejs8.10
        - nodejs10.x
        - java8
        - python2.7
        - python3.6
        - python3.7
        - dotnetcore1.0
        - dotnetcore2.0
        - dotnetcore2.1
        - nodejs4.3-edge
        - go1.x
        - ruby2.5
        - provided
    Concurrency:
      type: object
      properties:
        ReservedConcurrentExecutions:
          $ref: "#/components/schemas/ReservedConcurrentExecutions"
    TagKey:
      type: string
    Long:
      type: integer
    Integer:
      type: integer
    UnreservedConcurrentExecutions:
      type: integer
      minimum: 0
    AccountLimit:
      type: object
      properties:
        TotalCodeSize:
          $ref: "#/components/schemas/Long"
        CodeSizeUnzipped:
          $ref: "#/components/schemas/Long"
        CodeSizeZipped:
          $ref: "#/components/schemas/Long"
        ConcurrentExecutions:
          $ref: "#/components/schemas/Integer"
        UnreservedConcurrentExecutions:
          $ref: "#/components/schemas/UnreservedConcurrentExecutions"
      description: Limits that are related to concurrency and code storage. All file and
        storage sizes are in bytes.
    AccountUsage:
      type: object
      properties:
        TotalCodeSize:
          $ref: "#/components/schemas/Long"
        FunctionCount:
          $ref: "#/components/schemas/Long"
      description: The number of functions and amount of storage in use.
    Action:
      type: string
      pattern: (lambda:[*]|lambda:[a-zA-Z]+|[*])
    LayerName:
      type: string
      pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
      minLength: 1
      maxLength: 140
    LayerVersionNumber:
      type: integer
    StatementId:
      type: string
      pattern: ([a-zA-Z0-9-_]+)
      minLength: 1
      maxLength: 100
    LayerPermissionAllowedAction:
      type: string
      pattern: lambda:GetLayerVersion
    LayerPermissionAllowedPrincipal:
      type: string
      pattern: \d{12}|\*|arn:(aws[a-zA-Z-]*):iam::\d{12}:root
    OrganizationId:
      type: string
      pattern: o-[a-z0-9]{10,32}
    String:
      type: string
    AddLayerVersionPermissionRequest:
      type: object
      required:
        - StatementId
        - Action
        - Principal
      properties:
        StatementId:
          $ref: "#/components/schemas/StatementId"
        Action:
          $ref: "#/components/schemas/LayerPermissionAllowedAction"
        Principal:
          $ref: "#/components/schemas/LayerPermissionAllowedPrincipal"
        OrganizationId:
          $ref: "#/components/schemas/OrganizationId"
    FunctionName:
      type: string
      pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      minLength: 1
      maxLength: 140
    Principal:
      type: string
      pattern: .*
    Arn:
      type: string
      pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
    SourceOwner:
      type: string
      pattern: \d{12}
    EventSourceToken:
      type: string
      pattern: "[a-zA-Z0-9._\\-]+"
      minLength: 0
      maxLength: 256
    Qualifier:
      type: string
      pattern: (|[a-zA-Z0-9$_-]+)
      minLength: 1
      maxLength: 128
    AddPermissionRequest:
      type: object
      required:
        - StatementId
        - Action
        - Principal
      properties:
        StatementId:
          $ref: "#/components/schemas/StatementId"
        Action:
          $ref: "#/components/schemas/Action"
        Principal:
          $ref: "#/components/schemas/Principal"
        SourceArn:
          $ref: "#/components/schemas/Arn"
        SourceAccount:
          $ref: "#/components/schemas/SourceOwner"
        EventSourceToken:
          $ref: "#/components/schemas/EventSourceToken"
        RevisionId:
          $ref: "#/components/schemas/String"
    AdditionalVersion:
      type: string
      pattern: "[0-9]+"
      minLength: 1
      maxLength: 1024
    Weight:
      type: number
      format: double
      minimum: 0
      maximum: 1
    Alias:
      type: string
      pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
      minLength: 1
      maxLength: 128
    FunctionArn:
      type: string
      pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
    Version:
      type: string
      pattern: (\$LATEST|[0-9]+)
      minLength: 1
      maxLength: 1024
    Description:
      type: string
      minLength: 0
      maxLength: 256
    AliasRoutingConfiguration:
      type: object
      properties:
        AdditionalVersionWeights:
          $ref: "#/components/schemas/AdditionalVersionWeights"
      description: The <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a>
        configuration of a Lambda function alias.
    AliasList:
      type: array
      items:
        $ref: "#/components/schemas/AliasConfiguration"
    BatchSize:
      type: integer
      minimum: 1
      maximum: 10000
    BlobStream:
      type: string
    Boolean:
      type: boolean
    CompatibleRuntimes:
      type: array
      items:
        $ref: "#/components/schemas/Runtime"
      maxItems: 5
    ReservedConcurrentExecutions:
      type: integer
      minimum: 0
    CreateAliasRequest:
      type: object
      required:
        - Name
        - FunctionVersion
      properties:
        Name:
          $ref: "#/components/schemas/Alias"
        FunctionVersion:
          $ref: "#/components/schemas/Version"
        Description:
          $ref: "#/components/schemas/Description"
        RoutingConfig:
          $ref: "#/components/schemas/AliasRoutingConfiguration"
    Enabled:
      type: boolean
    MaximumBatchingWindowInSeconds:
      type: integer
      minimum: 0
      maximum: 300
    EventSourcePosition:
      type: string
      enum:
        - TRIM_HORIZON
        - LATEST
        - AT_TIMESTAMP
    Date:
      type: string
      format: date-time
    CreateEventSourceMappingRequest:
      type: object
      required:
        - EventSourceArn
        - FunctionName
      properties:
        EventSourceArn:
          $ref: "#/components/schemas/Arn"
        FunctionName:
          $ref: "#/components/schemas/FunctionName"
        Enabled:
          $ref: "#/components/schemas/Enabled"
        BatchSize:
          $ref: "#/components/schemas/BatchSize"
        MaximumBatchingWindowInSeconds:
          $ref: "#/components/schemas/MaximumBatchingWindowInSeconds"
        StartingPosition:
          $ref: "#/components/schemas/EventSourcePosition"
        StartingPositionTimestamp:
          $ref: "#/components/schemas/Date"
    RoleArn:
      type: string
      pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
    Handler:
      type: string
      pattern: "[^\\s]+"
      maxLength: 128
    FunctionCode:
      type: object
      properties:
        ZipFile:
          $ref: "#/components/schemas/Blob"
        S3Bucket:
          $ref: "#/components/schemas/S3Bucket"
        S3Key:
          $ref: "#/components/schemas/S3Key"
        S3ObjectVersion:
          $ref: "#/components/schemas/S3ObjectVersion"
      description: The code for the Lambda function. You can specify either an object in
        Amazon S3, or upload a deployment package directly.
    Timeout:
      type: integer
      minimum: 1
    MemorySize:
      type: integer
      minimum: 128
      maximum: 3008
    VpcConfig:
      type: object
      properties:
        SubnetIds:
          $ref: "#/components/schemas/SubnetIds"
        SecurityGroupIds:
          $ref: "#/components/schemas/SecurityGroupIds"
      description: The VPC security groups and subnets that are attached to a Lambda
        function.
    DeadLetterConfig:
      type: object
      properties:
        TargetArn:
          $ref: "#/components/schemas/ResourceArn"
      description: The <a href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html">dead
        letter queue</a> for failed asynchronous invocations.
    Environment:
      type: object
      properties:
        Variables:
          $ref: "#/components/schemas/EnvironmentVariables"
      description: A function's environment variable settings.
    KMSKeyArn:
      type: string
      pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
    TracingConfig:
      type: object
      properties:
        Mode:
          $ref: "#/components/schemas/TracingMode"
      description: The function's AWS X-Ray tracing configuration.
    Tags:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    LayerList:
      type: array
      items:
        $ref: "#/components/schemas/LayerVersionArn"
    CreateFunctionRequest:
      type: object
      required:
        - FunctionName
        - Runtime
        - Role
        - Handler
        - Code
      properties:
        FunctionName:
          $ref: "#/components/schemas/FunctionName"
        Runtime:
          $ref: "#/components/schemas/Runtime"
        Role:
          $ref: "#/components/schemas/RoleArn"
        Handler:
          $ref: "#/components/schemas/Handler"
        Code:
          $ref: "#/components/schemas/FunctionCode"
        Description:
          $ref: "#/components/schemas/Description"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MemorySize:
          $ref: "#/components/schemas/MemorySize"
        Publish:
          $ref: "#/components/schemas/Boolean"
        VpcConfig:
          $ref: "#/components/schemas/VpcConfig"
        DeadLetterConfig:
          $ref: "#/components/schemas/DeadLetterConfig"
        Environment:
          $ref: "#/components/schemas/Environment"
        KMSKeyArn:
          $ref: "#/components/schemas/KMSKeyArn"
        TracingConfig:
          $ref: "#/components/schemas/TracingConfig"
        Tags:
          $ref: "#/components/schemas/Tags"
        Layers:
          $ref: "#/components/schemas/LayerList"
    DeleteAliasRequest:
      type: object
      properties: {}
    DeleteEventSourceMappingRequest:
      type: object
      properties: {}
    DeleteFunctionConcurrencyRequest:
      type: object
      properties: {}
    DeleteFunctionRequest:
      type: object
      properties: {}
    DeleteLayerVersionRequest:
      type: object
      properties: {}
    SensitiveString:
      type: string
      format: password
    EnvironmentError:
      type: object
      properties:
        ErrorCode:
          $ref: "#/components/schemas/String"
        Message:
          $ref: "#/components/schemas/SensitiveString"
      description: Error messages for environment variables that couldn't be applied.
    EnvironmentResponse:
      type: object
      properties:
        Variables:
          $ref: "#/components/schemas/EnvironmentVariables"
        Error:
          $ref: "#/components/schemas/EnvironmentError"
      description: The results of a configuration update that applied environment variables.
    EnvironmentVariableName:
      type: string
      pattern: "[a-zA-Z]([a-zA-Z0-9_])+"
      format: password
    EnvironmentVariableValue:
      type: string
      format: password
    EventSourceMappingsList:
      type: array
      items:
        $ref: "#/components/schemas/EventSourceMappingConfiguration"
    FunctionCodeLocation:
      type: object
      properties:
        RepositoryType:
          $ref: "#/components/schemas/String"
        Location:
          $ref: "#/components/schemas/String"
      description: Details about a function's deployment package.
    NamespacedFunctionName:
      type: string
      pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      minLength: 1
      maxLength: 170
    NameSpacedFunctionArn:
      type: string
      pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
    Timestamp:
      type: string
    VpcConfigResponse:
      type: object
      properties:
        SubnetIds:
          $ref: "#/components/schemas/SubnetIds"
        SecurityGroupIds:
          $ref: "#/components/schemas/SecurityGroupIds"
        VpcId:
          $ref: "#/components/schemas/VpcId"
      description: The VPC security groups and subnets that are attached to a Lambda
        function.
    TracingConfigResponse:
      type: object
      properties:
        Mode:
          $ref: "#/components/schemas/TracingMode"
      description: The function's AWS X-Ray tracing configuration.
    LayersReferenceList:
      type: array
      items:
        $ref: "#/components/schemas/Layer"
    FunctionList:
      type: array
      items:
        $ref: "#/components/schemas/FunctionConfiguration"
    FunctionVersion:
      type: string
      enum:
        - ALL
    GetAccountSettingsRequest:
      type: object
      properties: {}
    GetAliasRequest:
      type: object
      properties: {}
    GetEventSourceMappingRequest:
      type: object
      properties: {}
    GetFunctionConfigurationRequest:
      type: object
      properties: {}
    GetFunctionRequest:
      type: object
      properties: {}
    GetLayerVersionByArnRequest:
      type: object
      properties: {}
    GetLayerVersionPolicyRequest:
      type: object
      properties: {}
    GetLayerVersionRequest:
      type: object
      properties: {}
    LayerVersionContentOutput:
      type: object
      properties:
        Location:
          $ref: "#/components/schemas/String"
        CodeSha256:
          $ref: "#/components/schemas/String"
        CodeSize:
          $ref: "#/components/schemas/Long"
      description: Details about a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>.
    LayerArn:
      type: string
      pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+
      minLength: 1
      maxLength: 140
    LicenseInfo:
      type: string
      maxLength: 512
    GetPolicyRequest:
      type: object
      properties: {}
    HttpStatus:
      type: integer
    InvocationType:
      type: string
      enum:
        - Event
        - RequestResponse
        - DryRun
    LogType:
      type: string
      enum:
        - None
        - Tail
    InvocationRequest:
      type: object
      properties:
        Payload:
          $ref: "#/components/schemas/Blob"
    InvokeAsyncRequest:
      type: object
      required:
        - InvokeArgs
      properties:
        InvokeArgs:
          $ref: "#/components/schemas/BlobStream"
    Layer:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/LayerVersionArn"
        CodeSize:
          $ref: "#/components/schemas/Long"
      description: An <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>.
    LayerVersionContentInput:
      type: object
      properties:
        S3Bucket:
          $ref: "#/components/schemas/S3Bucket"
        S3Key:
          $ref: "#/components/schemas/S3Key"
        S3ObjectVersion:
          $ref: "#/components/schemas/S3ObjectVersion"
        ZipFile:
          $ref: "#/components/schemas/Blob"
      description: A ZIP archive that contains the contents of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>. You can specify either an Amazon S3 location, or
        upload a layer archive directly.
    LayerVersionsListItem:
      type: object
      properties:
        LayerVersionArn:
          $ref: "#/components/schemas/LayerVersionArn"
        Version:
          $ref: "#/components/schemas/LayerVersionNumber"
        Description:
          $ref: "#/components/schemas/Description"
        CreatedDate:
          $ref: "#/components/schemas/Timestamp"
        CompatibleRuntimes:
          $ref: "#/components/schemas/CompatibleRuntimes"
        LicenseInfo:
          $ref: "#/components/schemas/LicenseInfo"
      description: Details about a version of an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>.
    LayerVersionsList:
      type: array
      items:
        $ref: "#/components/schemas/LayerVersionsListItem"
    LayersListItem:
      type: object
      properties:
        LayerName:
          $ref: "#/components/schemas/LayerName"
        LayerArn:
          $ref: "#/components/schemas/LayerArn"
        LatestMatchingVersion:
          $ref: "#/components/schemas/LayerVersionsListItem"
      description: Details about an <a
        href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS
        Lambda layer</a>.
    LayersList:
      type: array
      items:
        $ref: "#/components/schemas/LayersListItem"
    MaxListItems:
      type: integer
      minimum: 1
      maximum: 10000
    ListAliasesRequest:
      type: object
      properties: {}
    ListEventSourceMappingsRequest:
      type: object
      properties: {}
    MasterRegion:
      type: string
      pattern: ALL|[a-z]{2}(-gov)?-[a-z]+-\d{1}
    ListFunctionsRequest:
      type: object
      properties: {}
    MaxLayerListItems:
      type: integer
      minimum: 1
      maximum: 50
    ListLayerVersionsRequest:
      type: object
      properties: {}
    ListLayersRequest:
      type: object
      properties: {}
    ListTagsRequest:
      type: object
      properties: {}
    ListVersionsByFunctionRequest:
      type: object
      properties: {}
    NamespacedStatementId:
      type: string
      pattern: ([a-zA-Z0-9-_.]+)
      minLength: 1
      maxLength: 100
    PublishLayerVersionRequest:
      type: object
      required:
        - Content
      properties:
        Description:
          $ref: "#/components/schemas/Description"
        Content:
          $ref: "#/components/schemas/LayerVersionContentInput"
        CompatibleRuntimes:
          $ref: "#/components/schemas/CompatibleRuntimes"
        LicenseInfo:
          $ref: "#/components/schemas/LicenseInfo"
    PublishVersionRequest:
      type: object
      properties:
        CodeSha256:
          $ref: "#/components/schemas/String"
        Description:
          $ref: "#/components/schemas/Description"
        RevisionId:
          $ref: "#/components/schemas/String"
    PutFunctionConcurrencyRequest:
      type: object
      required:
        - ReservedConcurrentExecutions
      properties:
        ReservedConcurrentExecutions:
          $ref: "#/components/schemas/ReservedConcurrentExecutions"
    RemoveLayerVersionPermissionRequest:
      type: object
      properties: {}
    RemovePermissionRequest:
      type: object
      properties: {}
    SecurityGroupId:
      type: string
    SubnetId:
      type: string
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    TagResourceRequest:
      type: object
      required:
        - Tags
      properties:
        Tags:
          $ref: "#/components/schemas/Tags"
    UntagResourceRequest:
      type: object
      properties: {}
    UpdateAliasRequest:
      type: object
      properties:
        FunctionVersion:
          $ref: "#/components/schemas/Version"
        Description:
          $ref: "#/components/schemas/Description"
        RoutingConfig:
          $ref: "#/components/schemas/AliasRoutingConfiguration"
        RevisionId:
          $ref: "#/components/schemas/String"
    UpdateEventSourceMappingRequest:
      type: object
      properties:
        FunctionName:
          $ref: "#/components/schemas/FunctionName"
        Enabled:
          $ref: "#/components/schemas/Enabled"
        BatchSize:
          $ref: "#/components/schemas/BatchSize"
        MaximumBatchingWindowInSeconds:
          $ref: "#/components/schemas/MaximumBatchingWindowInSeconds"
    UpdateFunctionCodeRequest:
      type: object
      properties:
        ZipFile:
          $ref: "#/components/schemas/Blob"
        S3Bucket:
          $ref: "#/components/schemas/S3Bucket"
        S3Key:
          $ref: "#/components/schemas/S3Key"
        S3ObjectVersion:
          $ref: "#/components/schemas/S3ObjectVersion"
        Publish:
          $ref: "#/components/schemas/Boolean"
        DryRun:
          $ref: "#/components/schemas/Boolean"
        RevisionId:
          $ref: "#/components/schemas/String"
    UpdateFunctionConfigurationRequest:
      type: object
      properties:
        Role:
          $ref: "#/components/schemas/RoleArn"
        Handler:
          $ref: "#/components/schemas/Handler"
        Description:
          $ref: "#/components/schemas/Description"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MemorySize:
          $ref: "#/components/schemas/MemorySize"
        VpcConfig:
          $ref: "#/components/schemas/VpcConfig"
        Environment:
          $ref: "#/components/schemas/Environment"
        Runtime:
          $ref: "#/components/schemas/Runtime"
        DeadLetterConfig:
          $ref: "#/components/schemas/DeadLetterConfig"
        KMSKeyArn:
          $ref: "#/components/schemas/KMSKeyArn"
        TracingConfig:
          $ref: "#/components/schemas/TracingConfig"
        RevisionId:
          $ref: "#/components/schemas/String"
        Layers:
          $ref: "#/components/schemas/LayerList"
    VpcId:
      type: string
