openapi: 3.0.0
info:
  contact:
    x-twitter: AdvicentFP
  description: An API for accessing NaviPlan plan data for a client.
  title: NaviPlan
  version: v1
  x-apisguru-categories:
    - financial
  x-logo:
    url: https://twitter.com/Advicent/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://demo.uat.naviplancentral.com/plan/swagger/docs/v1
      version: "2.0"
  x-providerName: naviplancentral.com
  x-serviceName: plan
paths:
  /api/Advisors:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the Advisors in the plan.
      operationId: Advisors_Get
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvisorsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvisorsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for advisor details
        "404":
          description: Object not found
      summary: Retrieve Advisors
      tags:
        - Advisors
  "/api/Advisors/{householdId}/{clientId}":
    get:
      deprecated: false
      description: This operation retrieves a list of all of the Advisors for the client.
      operationId: Advisors_GetByHouseholdidClientid
      parameters:
        - description: Integer id of the household
          in: path
          name: householdId
          required: true
          schema:
            type: integer
            format: int32
        - description: Guid id of the client.
          in: path
          name: clientId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvisorsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvisorsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for advisor details
        "403":
          description: Request is restricted for access to advisor information
        "404":
          description: Object not found
      summary: Retrieve Advisors for a Client
      tags:
        - Advisors
  "/api/Advisors/{id}":
    get:
      deprecated: false
      description: This operation retrieves an Advisor from the plan.
      operationId: Advisors_GetById
      parameters:
        - description: Guid id of the advisor
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvisorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvisorModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for advisor details
        "404":
          description: Object not found
      summary: Retrieve an Advisor
      tags:
        - Advisors
  /api/Assumptions:
    get:
      deprecated: false
      description: This operation retrieves an object containing all assumptions for the
        specified plan.
      operationId: Assumptions_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssumptionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AssumptionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve plan assumptions
      tags:
        - Assumptions
  /api/BusinessEntities:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the business entities in the
        plan.
      operationId: BusinessEntities_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessEntitiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/BusinessEntitiesModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve business entities
      tags:
        - BusinessEntities
  "/api/BusinessEntities/{id}":
    get:
      deprecated: false
      description: This operation retrieves a business entity from the plan.
      operationId: BusinessEntities_GetByIdPlanid
      parameters:
        - description: ID of business entity to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessEntityModel"
            text/json:
              schema:
                $ref: "#/components/schemas/BusinessEntityModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a business entity
      tags:
        - BusinessEntities
  /api/Calculations/MonteCarlo:
    get:
      deprecated: false
      description: Currently just stubbed out, POC in development
      operationId: Calculations_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve Monte Carlo results from standalone calc service
      tags:
        - Calculations
  /api/DefinedBenefitPensions:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the defined benefit pensions
        in the plan.
      operationId: DefinedBenefitPensions_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve defined benefit pensions
      tags:
        - DefinedBenefitPensions
  "/api/DefinedBenefitPensions/{id}":
    get:
      deprecated: false
      description: This operation retrieves a defined benefit pension from the plan.
      operationId: DefinedBenefitPensions_GetByIdPlanid
      parameters:
        - description: ID of defined benefit pension to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a definedBenefitPension
      tags:
        - DefinedBenefitPensions
  /api/Eula/Accept:
    post:
      deprecated: false
      operationId: Eula_Accept
      responses:
        "200":
          description: OK
        "500":
          description: InternalServerError
      summary: Accepts the EULA
      tags:
        - Eula
  /api/Family:
    get:
      deprecated: false
      description: This operation retrieves an object containing all familymembers for the
        specified plan.
      operationId: Family_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FamilyModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FamilyModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve family
      tags:
        - Family
  "/api/GoalAdjustments/Education/{id}/Adjustments":
    get:
      deprecated: false
      description: This function retrieves a goal and the adjustments made to it
      operationId: GoalAdjustments_GetEducationByIdClientidPlanid
      parameters:
        - description: The id of the goal to retrieve adjustments for.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsEducationGoalAdjustmentsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsEducationGoalAdjustmentsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieve the adjustments
      tags:
        - GoalAdjustments
  "/api/GoalAdjustments/Education/{id}/Calculations":
    post:
      deprecated: false
      description: This function returns the posted object and the adjusted calculation
        values
      operationId: GoalAdjustments_PostEducationByIdGoaladjustmentsPlanid
      parameters:
        - description: The id of the goal to retrieve adjustments for.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsMod\
                elsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGo\
                alAdjustments"
          text/json:
            schema:
              $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsMod\
                elsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGo\
                alAdjustments"
        description: The adjusted values for this goal
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWha\
                  tIfEducationGoalAdjustments"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWha\
                  tIfEducationGoalAdjustments"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Perform calculations
      tags:
        - GoalAdjustments
  /api/GoalAdjustments/GoalSuccessRates:
    get:
      deprecated: false
      operationId: GoalAdjustments_GetGoalSuccessRatesByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Goal Success Rates successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsGoalSuccessRateResultsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsGoalSuccessRateResultsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Returns a list of goals with their relevant success rates.
      tags:
        - GoalAdjustments
  "/api/GoalAdjustments/MajorPurchase/{id}/Adjustments":
    get:
      deprecated: false
      description: This function retrieves a goal and the adjustments made to it
      operationId: GoalAdjustments_GetMajorPurchaseByIdClientidPlanid
      parameters:
        - description: The id of the goal to retrieve adjustments for.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsMajorPurchaseGoalAdjustmentsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsMajorPurchaseGoalAdjustmentsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieve the adjustments
      tags:
        - GoalAdjustments
  "/api/GoalAdjustments/MajorPurchase/{id}/Calculations":
    post:
      deprecated: false
      description: This function returns the posted object and the adjusted calculation
        values
      operationId: GoalAdjustments_PostMajorPurchaseByIdGoaladjustmentsPlanid
      parameters:
        - description: The id of the goal to retrieve adjustments for.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsMod\
                elsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurcha\
                seGoalAdjustments"
          text/json:
            schema:
              $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsMod\
                elsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurcha\
                seGoalAdjustments"
        description: The adjusted values for this goal
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWha\
                  tIfMajorPurchaseGoalAdjustments"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWha\
                  tIfMajorPurchaseGoalAdjustments"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Perform calculations
      tags:
        - GoalAdjustments
  /api/GoalAdjustments/Restrictions:
    get:
      deprecated: false
      description: This function returns a list of adjustment restrictions for all goals.
      operationId: GoalAdjustments_GetGoalAdjustmentRestrictionsByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restrictions successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsRestrictionsResultModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsRestrictionsResultModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Returns a list of goal adjustment restrictions.
      tags:
        - GoalAdjustments
  /api/GoalAdjustments/Retirement/Adjustments:
    get:
      deprecated: false
      description: This function retrieves a goal and the adjustments made to it for a
        particular client
      operationId: GoalAdjustments_GetRetirementByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsRetirementGoalAdjustmentsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsRetirementGoalAdjustmentsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieve the adjustments
      tags:
        - GoalAdjustments
  /api/GoalAdjustments/Retirement/Calculations:
    post:
      deprecated: false
      description: This function returns the posted object and the adjusted calculation
        values
      operationId: GoalAdjustments_PostRetirementByGoaladjustmentsPlanid
      parameters:
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsMod\
                elsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementG\
                oalAdjustments"
          text/json:
            schema:
              $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsMod\
                elsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementG\
                oalAdjustments"
        description: The adjusted values for this goal
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWha\
                  tIfRetirementGoalAdjustments"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWha\
                  tIfRetirementGoalAdjustments"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Perform calculations
      tags:
        - GoalAdjustments
  "/api/GoalAdjustments/{id}/WhatAreMyOptions":
    get:
      deprecated: false
      operationId: GoalAdjustments_GetWhatAreMyOptionsByIdClientidPlanid
      parameters:
        - description: The id of the goal to retrieve WAMO values for.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: What are my options results successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsWhatAreMyOptionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsWhatAreMyOptionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Returns WAMO values for current goal
      tags:
        - GoalAdjustments
  /api/Goals:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the goals in the plan.
      operationId: Goals_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/GoalsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve goals
      tags:
        - Goals
  "/api/Goals/{id}":
    get:
      deprecated: false
      description: This operation retrieves a goal from the plan.
      operationId: Goals_GetByIdPlanid
      parameters:
        - description: ID of goal to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalModel"
            text/json:
              schema:
                $ref: "#/components/schemas/GoalModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve goals
      tags:
        - Goals
  /api/HoldingCompanies:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the holding companies in the
        plan.
      operationId: HoldingCompanies_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HoldingCompaniesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/HoldingCompaniesModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve holding companies
      tags:
        - HoldingCompanies
  "/api/HoldingCompanies/{id}":
    get:
      deprecated: false
      description: This operation retrieves a holding company from the plan.
      operationId: HoldingCompanies_GetByIdPlanid
      parameters:
        - description: ID of holding company to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HoldingCompanyModel"
            text/json:
              schema:
                $ref: "#/components/schemas/HoldingCompanyModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a holding company
      tags:
        - HoldingCompanies
  /api/Households:
    get:
      deprecated: false
      description: This operation retrieves a list of households the current user has
        access to or one household specified by a householdId parameter
      operationId: Households_GetByHouseholdid
      parameters:
        - description: The Id of the specific household to retrieve
          in: query
          name: householdId
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HouseholdsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/HouseholdsModel"
        "401":
          description: Unauthorized for household data access
        "403":
          description: Access to household is restricted
      summary: Retrieve all Households associated with the user
      tags:
        - Households
  /api/Liabilities:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the liabilities in the plan.
      operationId: Liabilities_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilitiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilitiesModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve liabilities
      tags:
        - Liabilities
  "/api/Liabilities/{id}":
    get:
      deprecated: false
      description: This operation retrieves a liability from the plan.
      operationId: Liabilities_GetByIdPlanid
      parameters:
        - description: ID of liability to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilityModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilityModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a liability
      tags:
        - Liabilities
  /api/LifestyleAssets:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the lifestyle assets in the
        plan.
      operationId: LifestyleAssets_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve lifestyle assets
      tags:
        - LifestyleAssets
  "/api/LifestyleAssets/{id}":
    get:
      deprecated: false
      description: This operation retrieves a lifestyle asset from the plan.
      operationId: LifestyleAssets_GetByIdPlanid
      parameters:
        - description: ID of lifestyle asset to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve lifestyle assets
      tags:
        - LifestyleAssets
  /api/LivePlan/Goals:
    get:
      deprecated: false
      operationId: LivePlan_GetGoalsByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsLiveG\
                  oalBaseModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsLiveG\
                  oalBaseModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves all goals from the live plan
      tags:
        - LivePlan
  /api/LivePlan/Goals/Funding:
    get:
      deprecated: false
      description: This function retrieves a list of funding accounts for the goals in the
        plan
      operationId: LivePlan_GetGoalFundingListByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsGoalF\
                  undingListModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsGoalF\
                  undingListModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieve a list of funding accounts
      tags:
        - LivePlan
  "/api/LivePlan/Goals/{id}/WhatAreMyOptions":
    get:
      deprecated: false
      description: This function retrieves the WAMO values for the specified goal
      operationId: LivePlan_GetWhatAreMyOptionsByIdClientidPlanid
      parameters:
        - description: The id of the goal
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsWhatAreMyOptionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsM\
                  odelsWhatAreMyOptionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieve WAMO values for a given goal
      tags:
        - LivePlan
  /api/LivePlan/NetWorth/Accounts:
    get:
      deprecated: false
      operationId: LivePlan_GetAccountsByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsAc\
                  countBaseModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsAc\
                  countBaseModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves accounts for a given plan
      tags:
        - LivePlan
  /api/LivePlan/NetWorth/Liabilities:
    get:
      deprecated: false
      operationId: LivePlan_GetLiabilitiesByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsLi\
                  abilityBaseModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsLi\
                  abilityBaseModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves liabilities for a given plan
      tags:
        - LivePlan
  /api/LivePlan/NetWorth/LifestyleAssets:
    get:
      deprecated: false
      operationId: LivePlan_GetLifestyleAssetsByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsLi\
                  festyleAssetBaseModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsLi\
                  festyleAssetBaseModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves lifestyle assets for a given plan
      tags:
        - LivePlan
  /api/LivePlan/NetWorth/RealEstate:
    get:
      deprecated: false
      operationId: LivePlan_GetRealEstateAssetsByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsRe\
                  alEstateBaseModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsRe\
                  alEstateBaseModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves real estate accounts for a given plan
      tags:
        - LivePlan
  /api/LivePlan/Projections/NetWorth:
    get:
      deprecated: false
      operationId: LivePlan_GetProjectedNetWorthByClientidPlanid
      parameters:
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiProjectionsModel\
                  sNetWorthProjectionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiProjectionsModel\
                  sNetWorthProjectionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves net worth projections
      tags:
        - LivePlan
  "/api/LivePlan/Projections/{id}/NeedsVsAbilities":
    get:
      deprecated: false
      operationId: LivePlan_GetProjectedNeedsVsAbilitiesByIdClientidPlanid
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          in: query
          name: clientId
          required: false
          schema:
            type: string
        - description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiProjectionsModel\
                  sNeedsVsAbilitiesProjectionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AdvicentNaviPlanRestApiProjectionsModel\
                  sNeedsVsAbilitiesProjectionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
        "503":
          description: Unable to acquire a NaviPlan engine
      summary: Retrieves needs vs abilities projections
      tags:
        - LivePlan
  /api/NetWorth:
    get:
      deprecated: false
      description: "This operation retrieves an object containing net worth values for
        specific dates within the plan:\r

        \              * Plan Start Date\r

        \              * Retirement Date\r

        \              * Plan End Date."
      operationId: NetWorth_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetWorthModel"
            text/json:
              schema:
                $ref: "#/components/schemas/NetWorthModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve net worth
      tags:
        - NetWorth
  /api/Password/HasUserSetPassword:
    post:
      deprecated: false
      operationId: Password_HasUserSetPassword
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Determines if the currently logged in user has set their own password
      tags:
        - Password
  /api/Password/PasswordRequirements:
    get:
      deprecated: false
      operationId: Password_PasswordRequirements
      responses:
        "200":
          description: OK
        "500":
          description: InternalServerError
      summary: Gets the password complexity requirements
      tags:
        - Password
  /api/Password/Reset:
    post:
      deprecated: false
      operationId: Password_ResetByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordModel"
          text/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordModel"
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: BadRequest
      summary: Resets the password for the supplied user name
      tags:
        - Password
  /api/Password/Set:
    post:
      deprecated: false
      operationId: Password_SetByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPasswordModel"
          text/json:
            schema:
              $ref: "#/components/schemas/SetPasswordModel"
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: BadRequest
        "401":
          description: Unauthorized
      summary: Sets the password for the currently logged in user
      tags:
        - Password
  /api/PlanInformation:
    get:
      deprecated: false
      description: This operation retrieves the high level plan information for a given plan
      operationId: PlanInformation_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInformationModel"
            text/json:
              schema:
                $ref: "#/components/schemas/PlanInformationModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve plan information
      tags:
        - PlanInformation
  /api/PlanStatuses:
    get:
      deprecated: false
      description: "This operation retrieves the data statuses of the published plan if on
        demand updates\r

        \            are enabled"
      operationId: PlanStatuses_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3)
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanStatusesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/PlanStatusesModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan status access
        "404":
          description: Object not found
      summary: Retrieve plan data statuses
      tags:
        - PlanStatuses
  /api/PortfolioAccounts:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the portfolio accounts in the
        plan.
      operationId: PortfolioAccounts_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortfolioAccountsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/PortfolioAccountsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve portfolio accounts
      tags:
        - PortfolioAccounts
  "/api/PortfolioAccounts/{id}":
    get:
      deprecated: false
      description: This operation retrieves a portfolio account from the plan.
      operationId: PortfolioAccounts_GetByIdPlanid
      parameters:
        - description: ID of portfolio account to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortfolioAccountModel"
            text/json:
              schema:
                $ref: "#/components/schemas/PortfolioAccountModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a portfolio account
      tags:
        - PortfolioAccounts
  /api/ProjectedAnnualSummary:
    get:
      deprecated: false
      description: "This operation retrieves an object containing annual summary
        information \r

        \              for each year of the projected plan."
      operationId: ProjectedAnnualSummary_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectedAnnualSummariesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ProjectedAnnualSummariesModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve projected annual summaries
      tags:
        - ProjectedAnnualSummary
  "/api/ProjectedAnnualSummary/{id}":
    get:
      deprecated: false
      description: "This operation retrieves an object containing annual summary
        information \r

        \              for a single specified year of the projected
        plan."
      operationId: ProjectedAnnualSummary_GetByIdPlanid
      parameters:
        - description: Index into the list of annual projections
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectedAnnualSummaryModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ProjectedAnnualSummaryModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve projected annual summary by id
      tags:
        - ProjectedAnnualSummary
  /api/ProjectedCashFlow:
    get:
      deprecated: false
      description: "This operation retrieves an object containing cash flow information \r

        \              for each year of the projected plan."
      operationId: ProjectedCashFlow_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CashFlowProjectionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/CashFlowProjectionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve projected cash flow
      tags:
        - ProjectedCashFlow
  "/api/ProjectedCashFlow/{id}":
    get:
      deprecated: false
      description: "This operation retrieves an object containing cash flow information \r

        \              for a single specified year of the projected
        plan."
      operationId: ProjectedCashFlow_GetByIdPlanid
      parameters:
        - description: Index into the list of annual projections
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CashFlowProjectionModel"
            text/json:
              schema:
                $ref: "#/components/schemas/CashFlowProjectionModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve projected cash flow by id
      tags:
        - ProjectedCashFlow
  /api/ProjectedGoals/AssetsFundingGoals:
    get:
      deprecated: false
      description: This operation retrieves the assets funding each goal throughout the
        plan years
      operationId: ProjectedGoals_GetAssetsFundingGoalsByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsFundingGoalModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AssetsFundingGoalModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve assets funding goals over time
      tags:
        - ProjectedGoals
  /api/ProjectedGoals/NeedsVsAbilities:
    get:
      deprecated: false
      description: "This operation retrieves a needs and abilities data for all goals
        throughout\r

        \              the plan years."
      operationId: ProjectedGoals_GetNeedsVsAbilitiesByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeedsVsAbilitiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/NeedsVsAbilitiesModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve needs vs abilities data
      tags:
        - ProjectedGoals
  /api/ProjectedNetWorth:
    get:
      deprecated: false
      description: "This operation retrieves an object containing net worth information \r

        \              for each year of the projected plan. These are
        EOY numbers."
      operationId: ProjectedNetWorth_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetWorthProjectionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/NetWorthProjectionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve projected net worth
      tags:
        - ProjectedNetWorth
  "/api/ProjectedNetWorth/{id}":
    get:
      deprecated: false
      description: "This operation retrieves an object containing net worth information \r

        \              for a single specified year of the projected
        plan. These are EOY numbers."
      operationId: ProjectedNetWorth_GetByIdPlanid
      parameters:
        - description: Index into the list of annual projections
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetWorthProjectionModel"
            text/json:
              schema:
                $ref: "#/components/schemas/NetWorthProjectionModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve projected net worth by id
      tags:
        - ProjectedNetWorth
  /api/RestrictedStocks:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the restricted stocks in the
        plan.
      operationId: RestrictedStocks_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestrictedStocksModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RestrictedStocksModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve restricted stocks
      tags:
        - RestrictedStocks
  "/api/RestrictedStocks/{id}":
    get:
      deprecated: false
      description: This operation retrieves a restricted stock from the plan.
      operationId: RestrictedStocks_GetByIdPlanid
      parameters:
        - description: ID of restricted stock to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestrictedStockModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RestrictedStockModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a restricted stock
      tags:
        - RestrictedStocks
  /api/ServiceInformation/Statistics:
    get:
      deprecated: false
      operationId: ServiceInformation_Statistics
      responses:
        "200":
          description: Provides additional information about the service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInformation"
            text/json:
              schema:
                $ref: "#/components/schemas/ServiceInformation"
      summary: This resource can be used to check the status of the service.
      tags:
        - ServiceInformation
  /api/StockOptions:
    get:
      deprecated: false
      description: This operation retrieves a list of all of the stock options in the plan.
      operationId: StockOptions_GetByPlanid
      parameters:
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockOptionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/StockOptionsModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve stock options
      tags:
        - StockOptions
  "/api/StockOptions/{id}":
    get:
      deprecated: false
      description: This operation retrieves a stock option from the plan.
      operationId: StockOptions_GetByIdPlanid
      parameters:
        - description: ID of stock option to retrieve
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the plan to retrieve data from (e.g. 1001-11-3).
          in: query
          name: planId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockOptionModel"
            text/json:
              schema:
                $ref: "#/components/schemas/StockOptionModel"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized for plan data access
        "404":
          description: Object not found
      summary: Retrieve a stock option
      tags:
        - StockOptions
  /api/auth/Login:
    post:
      deprecated: false
      operationId: Auth_LoginByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LoginModel"
        description: DomainProvider username and password
        required: true
      responses:
        "200":
          description: ApiSession
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicSessionInfoModel"
            text/json:
              schema:
                $ref: "#/components/schemas/PublicSessionInfoModel"
        "401":
          description: Invalid request parameters
        "500":
          description: Invalid HTTP scheme
      summary: Start a session with the DomainProviders user store
      tags:
        - Auth
  /api/auth/LoginConfiguration:
    get:
      deprecated: false
      operationId: Auth_PasswordRequirements
      responses:
        "200":
          description: OK
      summary: Gets the login rules
      tags:
        - Auth
  /api/auth/Logout:
    post:
      deprecated: false
      operationId: Auth_Logout
      responses:
        "200":
          description: OK
      tags:
        - Auth
  /api/auth/ResumeSession:
    post:
      deprecated: false
      operationId: Auth_ResumeSession
      responses:
        "200":
          description: resume session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicSessionInfoModel"
            text/json:
              schema:
                $ref: "#/components/schemas/PublicSessionInfoModel"
        "401":
          description: Unauthorized
      summary: Validate and extend the duration of a session
      tags:
        - Auth
servers:
  - url: https://demo.uat.naviplancentral.com/plan
  - url: http://demo.uat.naviplancentral.com/plan
components:
  schemas:
    AdvicentDomainLogicGoalWhatIfEducationGoalAdjustments:
      properties:
        duration:
          format: double
          type: number
        expensesCovered:
          format: double
          type: number
        lumpSumContribution:
          format: double
          type: number
        lumpSumDate:
          format: date-time
          type: string
        monthlySavingsContribution:
          format: double
          type: number
      type: object
    AdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments:
      properties:
        lumpSumContribution:
          format: double
          type: number
        lumpSumDate:
          format: date-time
          type: string
        monthlySavingsContribution:
          format: double
          type: number
        targetDate:
          format: date-time
          type: string
        totalNeed:
          format: double
          type: number
      type: object
    AdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments:
      properties:
        clientRetirementAge:
          format: double
          type: number
        coClientRetirementAge:
          format: double
          type: number
        discretionaryExpenseCoverage:
          format: double
          type: number
        fixedExpenseCoverage:
          format: double
          type: number
        lumpSumContribution:
          format: double
          type: number
        lumpSumDate:
          format: date-time
          type: string
        monthlySavingsContribution:
          format: double
          type: number
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsCalcProjection:
      properties:
        projectedAbilities:
          format: double
          type: number
        projectedNeed:
          format: double
          type: number
        projectedRetirementAssetValues:
          format: double
          type: number
        year:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsCoverageProjections:
      properties:
        goalId:
          format: int32
          type: integer
        percentCovered:
          format: double
          type: number
        projections:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCalcP\
              rojection"
          type: array
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsGoalAdjustmentsResultAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfEducationGoalAdj\
            ustments"
        created:
          format: date-time
          type: string
        goalId:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsGoalAdjustmentsResultAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfMajorPurchaseGoa\
            lAdjustments"
        created:
          format: date-time
          type: string
        goalId:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsGoalAdjustmentsResultAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfRetirementGoalAd\
            justments"
        created:
          format: date-time
          type: string
        goalId:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments:
      properties:
        goalAdjustments:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsGoalAdj\
            ustmentsResultAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments"
        projectedResults:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCoverag\
            eProjections"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments:
      properties:
        goalAdjustments:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsGoalAdj\
            ustmentsResultAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustm\
            ents"
        projectedResults:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCoverag\
            eProjections"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsCoverageProjectionsResultModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments:
      properties:
        goalAdjustments:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsGoalAdj\
            ustmentsResultAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustment\
            s"
        projectedResults:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCoverag\
            eProjections"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsEducationGoalAdjustmentsModel:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfEducationGoalAdj\
            ustments"
        created:
          format: date-time
          type: string
        goalId:
          format: int32
          type: integer
        projectedResults:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCoverag\
            eProjections"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfEducationGoalAdjustments:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfEducationGoalAdj\
            ustments"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfMajorPurchaseGoalAdjustments:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfMajorPurchaseGoa\
            lAdjustments"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalAdjustmentsModelAdvicentDomainLogicGoalWhatIfRetirementGoalAdjustments:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfRetirementGoalAd\
            justments"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateModel:
      properties:
        description:
          type: string
        goalId:
          format: int32
          type: integer
        successRate:
          format: double
          type: number
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsGoalSuccessRateResultsModel:
      properties:
        goalSuccessRateResults:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsModel\
              sGoalSuccessRateModel"
          type: array
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsMajorPurchaseGoalAdjustmentsModel:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfMajorPurchaseGoa\
            lAdjustments"
        created:
          format: date-time
          type: string
        goalId:
          format: int32
          type: integer
        projectedResults:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCoverag\
            eProjections"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsEducationRestriction:
      properties:
        canChangeDuration:
          type: boolean
        goalId:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsRestrictionsResultModel:
      properties:
        educationRestrictions:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsModel\
              sRestrictionsEducationRestriction"
          type: array
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsRetirementGoalAdjustmentsModel:
      properties:
        adjustedValues:
          $ref: "#/components/schemas/AdvicentDomainLogicGoalWhatIfRetirementGoalAd\
            justments"
        created:
          format: date-time
          type: string
        goalId:
          format: int32
          type: integer
        projectedResults:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalAdjustmentsCoverag\
            eProjections"
      type: object
    AdvicentNaviPlanRestApiGoalAdjustmentsModelsWhatAreMyOptionsModel:
      properties:
        additionalMonthlySavings:
          format: double
          type: number
        clientRetirementAge:
          format: int32
          type: integer
        clientRetirementAgeDate:
          format: date-time
          type: string
        coClientRetirementAge:
          format: int32
          type: integer
        coClientRetirementAgeDate:
          format: date-time
          type: string
        expenseCoverageDollars:
          format: double
          type: number
        expenseCoveragePercentage:
          format: double
          type: number
        lumpSumSavings:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
      type: object
    AdvicentNaviPlanRestApiGoalsModelsGoalFundingAccount:
      properties:
        accountId:
          format: int32
          type: integer
        description:
          type: string
        fundingAmount:
          format: double
          type: number
      type: object
    AdvicentNaviPlanRestApiGoalsModelsGoalFundingListItem:
      properties:
        description:
          type: string
        fundingAccounts:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsGoalFundi\
              ngAccount"
          type: array
        goalId:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiGoalsModelsGoalFundingListModel:
      properties:
        goals:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsGoalFundi\
              ngListItem"
          type: array
      type: object
    AdvicentNaviPlanRestApiGoalsModelsLiveGoalBase:
      properties:
        amount:
          format: double
          type: number
        coveragePercentage:
          format: double
          type: number
        description:
          type: string
        endDate:
          format: date-time
          type: string
        id:
          format: int32
          type: integer
        inflationRate:
          format: double
          type: number
        owners:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiModelsOwnerModel"
          type: array
        startDate:
          format: date-time
          type: string
        type:
          type: string
      type: object
    AdvicentNaviPlanRestApiGoalsModelsLiveGoalBaseModel:
      properties:
        clientDescription:
          type: string
        clientId:
          format: int32
          type: integer
        goals:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiGoalsModelsLiveGoalB\
              ase"
          type: array
        planDescription:
          type: string
        planLastUpdateTime:
          format: date-time
          type: string
      type: object
    AdvicentNaviPlanRestApiModelsOwnerModel:
      properties:
        firstName:
          type: string
        id:
          format: int32
          type: integer
        lastName:
          type: string
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsAccountBaseModel:
      properties:
        accounts:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsAccoun\
              tModel"
          type: array
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsAccountModel:
      properties:
        description:
          type: string
        holdings:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsHoldin\
              gModel"
          type: array
        id:
          format: int32
          type: integer
        legacyId:
          type: string
        owner:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiModelsOwnerModel"
        type:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsHoldingModel:
      properties:
        description:
          type: string
        marketValue:
          format: double
          type: number
        valuationDate:
          format: date-time
          type: string
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsLiabilityBaseModel:
      properties:
        liabilities:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsLiabil\
              ityModel"
          type: array
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsLiabilityModel:
      properties:
        description:
          type: string
        endDate:
          format: date-time
          type: string
        id:
          format: int32
          type: integer
        legacyId:
          type: string
        outstandingPrincipal:
          format: double
          type: number
        outstandingPrincipalAsOfDate:
          format: date-time
          type: string
        owner:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiModelsOwnerModel"
        startDate:
          format: date-time
          type: string
        type:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetBaseModel:
      properties:
        lifestyleAssets:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsLifest\
              yleAssetModel"
          type: array
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsLifestyleAssetModel:
      properties:
        description:
          type: string
        id:
          format: int32
          type: integer
        owner:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiModelsOwnerModel"
        purchaseDate:
          format: date-time
          type: string
        purchaseValue:
          format: double
          type: number
        type:
          format: int32
          type: integer
        valuationDate:
          format: date-time
          type: string
        valuationValue:
          format: double
          type: number
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsRealEstateBaseModel:
      properties:
        realEstateAssets:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiNetWorthModelsRealEs\
              tateModel"
          type: array
      type: object
    AdvicentNaviPlanRestApiNetWorthModelsRealEstateModel:
      properties:
        description:
          type: string
        id:
          format: int32
          type: integer
        legacyId:
          type: string
        marketValue:
          format: double
          type: number
        owner:
          $ref: "#/components/schemas/AdvicentNaviPlanRestApiModelsOwnerModel"
        purchaseAmount:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
        valuationDate:
          format: date-time
          type: string
      type: object
    AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsModel:
      properties:
        goalId:
          format: int32
          type: integer
        percentCovered:
          format: double
          type: number
        projections:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiProjectionsModelsNee\
              dsVsAbilitiesProjectionsYear"
          type: array
      type: object
    AdvicentNaviPlanRestApiProjectionsModelsNeedsVsAbilitiesProjectionsYear:
      properties:
        projectedAbilities:
          format: double
          type: number
        projectedNeed:
          format: double
          type: number
        year:
          format: int32
          type: integer
      type: object
    AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsModel:
      properties:
        netWorthProjections:
          items:
            $ref: "#/components/schemas/AdvicentNaviPlanRestApiProjectionsModelsNet\
              WorthProjectionsYearModel"
          type: array
      type: object
    AdvicentNaviPlanRestApiProjectionsModelsNetWorthProjectionsYearModel:
      properties:
        endOfYearRetirementAssets:
          format: double
          type: number
        endOfYearTotalAssets:
          format: double
          type: number
        year:
          format: int32
          type: integer
      type: object
    AdvisorModel:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        advisorId:
          type: string
        advisorTitle:
          type: string
        businessPhone:
          type: string
        cellPhone:
          type: string
        city:
          type: string
        emailAddress:
          type: string
        faxPhone:
          type: string
        firstName:
          type: string
        homePhone:
          type: string
        lastName:
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        middleName:
          type: string
        officeName:
          type: string
        officeWebsite:
          type: string
        pagerNumber:
          type: string
        postalCode:
          type: string
        stateProvince:
          type: string
      type: object
    AdvisorsModel:
      properties:
        advisors:
          items:
            $ref: "#/components/schemas/AdvisorModel"
          type: array
      type: object
    AssetsFundingGoalModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        projections:
          items:
            $ref: "#/components/schemas/ProjectedGoalsSummary_AssetsFundingGoalSumm\
              ary_"
          type: array
      type: object
    AssetsFundingGoalSummary:
      properties:
        contributions:
          $ref: "#/components/schemas/IAccumulationCategoryData"
        endOfYearAssets:
          $ref: "#/components/schemas/IAccumulationCategoryData"
        goalType:
          type: string
        growthAndReinvestments:
          $ref: "#/components/schemas/IAccumulationCategoryData"
        identifier:
          format: int32
          type: integer
        netWithdrawals:
          format: double
          type: number
        withdrawals:
          $ref: "#/components/schemas/IAccumulationCategoryData"
      type: object
    AssumptionsModel:
      properties:
        assumptions:
          $ref: "#/components/schemas/IAssumptions"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    BusinessEntitiesModel:
      properties:
        businessEntities:
          items:
            $ref: "#/components/schemas/IBusinessEntity"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    BusinessEntityModel:
      properties:
        businessEntity:
          $ref: "#/components/schemas/IBusinessEntity"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    CashFlowProjectionModel:
      properties:
        cashFlow:
          $ref: "#/components/schemas/ProjectedCashFlowSummary"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    CashFlowProjectionsModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        projections:
          items:
            $ref: "#/components/schemas/CashFlowProjectionModel"
          type: array
      type: object
    CashFlowSummary:
      properties:
        surplusDeficit:
          format: double
          type: number
        totalIncome:
          format: double
          type: number
        totalOutflowsWithTaxes:
          format: double
          type: number
        totalOutflowsWithoutTaxes:
          format: double
          type: number
        totalTaxes:
          format: double
          type: number
      type: object
    ClientPlanSelectorParams:
      description: Parameters to select a plan from a client file
      properties:
        clientId:
          description: Id of the client user for the plan. Required if current session user
            is an advisor. Ignored for client user sessions.
          type: string
        planId:
          description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          type: string
      required:
        - planId
      type: object
    Currency:
      properties:
        formattedDecimal:
          readOnly: true
          type: string
        formattedNoDecimal:
          readOnly: true
          type: string
        raw:
          format: double
          readOnly: true
          type: number
      type: object
    CurrencyWithDate:
      properties:
        date:
          $ref: "#/components/schemas/Date"
        formattedDecimal:
          readOnly: true
          type: string
        formattedNoDecimal:
          readOnly: true
          type: string
        raw:
          format: double
          readOnly: true
          type: number
      type: object
    CurrencyWithGrowth:
      properties:
        formattedDecimal:
          readOnly: true
          type: string
        formattedNoDecimal:
          readOnly: true
          type: string
        growth:
          $ref: "#/components/schemas/GrowthRateValues"
        raw:
          format: double
          readOnly: true
          type: number
      type: object
    Date:
      properties:
        day:
          format: int32
          type: integer
        formatted:
          readOnly: true
          type: string
        formattedMMMMddyyyy:
          readOnly: true
          type: string
        formattedMMMdd:
          readOnly: true
          type: string
        formattedMMMddyyyy:
          readOnly: true
          type: string
        formattedMMMyyyy:
          readOnly: true
          type: string
        formattedNA:
          readOnly: true
          type: string
        month:
          format: int32
          type: integer
        toDateTime:
          format: date-time
          readOnly: true
          type: string
        urlEncoded:
          readOnly: true
          type: string
        year:
          format: int32
          type: integer
      type: object
    DefinedBenefitPensionModel:
      properties:
        definedBenefitPension:
          $ref: "#/components/schemas/IDefinedBenefitPension"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    DefinedBenefitPensionsModel:
      properties:
        definedBenefitPensions:
          items:
            $ref: "#/components/schemas/IDefinedBenefitPension"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    DescriptiveBoolean:
      properties:
        rawValue:
          type: boolean
        valueAsYesNo:
          readOnly: true
          type: string
      type: object
    FamilyModel:
      properties:
        family:
          $ref: "#/components/schemas/IFamily"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    FormattedDateRange:
      properties:
        endDate:
          $ref: "#/components/schemas/Date"
        startDate:
          $ref: "#/components/schemas/Date"
      type: object
    FormattedLifestyleType:
      properties:
        formatted:
          readOnly: true
          type: string
        value:
          enum:
            - Undefined
            - PersonalUse
            - ListedPersonal
            - PrimaryResidence
            - SecondaryResidence
            - BusinessInterest
            - Automobile
          readOnly: true
          type: string
      type: object
    FormattedMaritalOrTaxFilingStatus:
      properties:
        value:
          enum:
            - Undefined
            - Single
            - HeadOfHousehold
            - MarriedFilingJointly
            - MarriedFilingSeparately
            - SingleParent
            - Married
            - CommonLaw
            - Partner
            - Divorced
            - Widowed
            - Separated
          readOnly: true
          type: string
      type: object
    GoalCoveragePercent:
      properties:
        formattedRaw:
          format: double
          type: number
        raw:
          format: double
          type: number
      type: object
    GoalId:
      properties:
        id:
          format: int32
          type: integer
      type: object
    GoalModel:
      properties:
        goal:
          $ref: "#/components/schemas/IGoal"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    GoalNeedsVsAbilitiesSummary:
      properties:
        abilities:
          format: double
          type: number
        fixedNeeds:
          format: double
          type: number
        fixedNeedsWithTaxes:
          format: double
          type: number
        goalType:
          type: string
        identifier:
          format: int32
          type: integer
        totalNeeds:
          format: double
          type: number
        totalNeedsWithTaxes:
          format: double
          type: number
      type: object
    GoalsModel:
      properties:
        goals:
          items:
            $ref: "#/components/schemas/IGoal"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    GrowthRateValues:
      properties:
        additionalGrowthPercent:
          $ref: "#/components/schemas/Percent"
        isInflationAdjusted:
          readOnly: true
          type: boolean
        totalGrowth:
          $ref: "#/components/schemas/Percent"
      type: object
    HoldingCompaniesModel:
      properties:
        holdingCompanies:
          items:
            $ref: "#/components/schemas/IHoldingCompany"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    HoldingCompanyModel:
      properties:
        holdingCompany:
          $ref: "#/components/schemas/IHoldingCompany"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    HouseholdExternalModel:
      properties:
        accessiblePlans:
          items:
            $ref: "#/components/schemas/PublishedPlanModel"
          type: array
        clientDescription:
          type: string
        householdId:
          format: int32
          type: integer
        legacyClientId:
          type: string
      type: object
    HouseholdModel:
      properties:
        accessiblePlans:
          items:
            $ref: "#/components/schemas/PublishedPlanModel"
          type: array
        clientDescription:
          type: string
        householdId:
          format: int32
          type: integer
      type: object
    HouseholdsExternalDataModel:
      properties:
        externalHouseholdsData:
          items:
            $ref: "#/components/schemas/HouseholdExternalModel"
          type: array
      type: object
    HouseholdsModel:
      properties:
        households:
          items:
            $ref: "#/components/schemas/HouseholdModel"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    IAccumulationCategoryData:
      properties:
        allAssets:
          $ref: "#/components/schemas/Currency"
        lockedIn:
          $ref: "#/components/schemas/Currency"
        nonQualified:
          $ref: "#/components/schemas/Currency"
        qualified:
          $ref: "#/components/schemas/Currency"
        roth:
          $ref: "#/components/schemas/Currency"
        tfsa:
          $ref: "#/components/schemas/Currency"
      type: object
    IActivityData:
      properties:
        amountWithGrowth:
          $ref: "#/components/schemas/CurrencyWithGrowth"
        applicableDateRange:
          $ref: "#/components/schemas/FormattedDateRange"
        directTo:
          readOnly: true
          type: string
        frequency:
          $ref: "#/components/schemas/IFormattedFrequency"
      type: object
    IAddress:
      properties:
        city:
          readOnly: true
          type: string
        combinedCityStateProvince:
          readOnly: true
          type: string
        country:
          readOnly: true
          type: string
        stateOrProvince:
          readOnly: true
          type: string
        stateOrProvinceAbbrev:
          readOnly: true
          type: string
        street1:
          readOnly: true
          type: string
        street2:
          readOnly: true
          type: string
        zipOrPostalCode:
          readOnly: true
          type: string
      type: object
    IAssetCategories:
      properties:
        allAssets:
          items:
            $ref: "#/components/schemas/IValueDescriptionPair_Currency_"
          readOnly: true
          type: array
        businessAssets:
          $ref: "#/components/schemas/INetWorthCategory"
        holdingCompany:
          $ref: "#/components/schemas/INetWorthCategory"
        lifestyleAssets:
          $ref: "#/components/schemas/INetWorthCategory"
        nonQualifiedAnnuities:
          $ref: "#/components/schemas/INetWorthCategory"
        nonQualifiedAssets:
          $ref: "#/components/schemas/INetWorthCategory"
        qualifiedAnnuities:
          $ref: "#/components/schemas/INetWorthCategory"
        qualifiedAssets:
          $ref: "#/components/schemas/INetWorthCategory"
        realEstate:
          $ref: "#/components/schemas/INetWorthCategory"
        totalAssets:
          $ref: "#/components/schemas/INetWorthCategory"
      type: object
    IAssetClass:
      properties:
        index:
          format: int32
          readOnly: true
          type: integer
        maxConstraint:
          $ref: "#/components/schemas/Percent"
        minConstraint:
          $ref: "#/components/schemas/Percent"
        name:
          readOnly: true
          type: string
        parentSuperAssetClassIndex:
          format: int32
          readOnly: true
          type: integer
        weight:
          $ref: "#/components/schemas/IAssetClassWeight"
      type: object
    IAssetClassWeight:
      properties:
        dollarValue:
          $ref: "#/components/schemas/Currency"
        percentage:
          $ref: "#/components/schemas/Percent"
      type: object
    IAssetId:
      properties:
        rawId:
          format: int32
          readOnly: true
          type: integer
      type: object
    IAssetMix:
      properties:
        assetClassDisplayLevel:
          format: int32
          readOnly: true
          type: integer
        assetClassInfoForDisplayLevel:
          items:
            format: int32
            type: integer
          readOnly: true
          type: array
        classes:
          items:
            $ref: "#/components/schemas/IAssetClass"
          readOnly: true
          type: array
        superAssetClasses:
          items:
            $ref: "#/components/schemas/IAssetClass"
          readOnly: true
          type: array
      type: object
    IAssetValuation:
      properties:
        costBasis:
          $ref: "#/components/schemas/Currency"
        marketValue:
          $ref: "#/components/schemas/Currency"
        valuationDate:
          $ref: "#/components/schemas/Date"
      type: object
    IAssets:
      properties:
        allAssets:
          $ref: "#/components/schemas/IAssetCategories"
        clientAssets:
          $ref: "#/components/schemas/IAssetCategories"
        coClientAssets:
          $ref: "#/components/schemas/IAssetCategories"
        communityPropertyAssets:
          $ref: "#/components/schemas/IAssetCategories"
        jointAssets:
          $ref: "#/components/schemas/IAssetCategories"
      type: object
    IAssumptions:
      properties:
        anyHeadAlreadyRetired:
          readOnly: true
          type: boolean
        bothRetired:
          readOnly: true
          type: boolean
        bucketing:
          $ref: "#/components/schemas/IBucketing"
        client:
          $ref: "#/components/schemas/IHeadAssumptions"
        coClient:
          $ref: "#/components/schemas/IHeadAssumptions"
        firstToDieDate:
          $ref: "#/components/schemas/Date"
        firstToDieMember:
          enum:
            - Client
            - CoClient
          readOnly: true
          type: string
        firstToRetireDate:
          $ref: "#/components/schemas/Date"
        inflationRate:
          $ref: "#/components/schemas/Percent"
        lastToDieDate:
          $ref: "#/components/schemas/Date"
        lastToDieMember:
          enum:
            - Client
            - CoClient
          readOnly: true
          type: string
        lastToRetireDate:
          $ref: "#/components/schemas/Date"
        retirementYearAdjustedIfAlreadyRetired:
          $ref: "#/components/schemas/Year"
        taxMethod:
          enum:
            - Average
            - Simplified
            - Detailed
          readOnly: true
          type: string
      type: object
    IBucketing:
      properties:
        distributionBucketTargetBalance:
          $ref: "#/components/schemas/Currency"
        endDate:
          $ref: "#/components/schemas/Date"
        indexedAt:
          $ref: "#/components/schemas/Percent"
        returnRate:
          $ref: "#/components/schemas/Percent"
        standardDeviation:
          $ref: "#/components/schemas/Percent"
        startDate:
          $ref: "#/components/schemas/Date"
      type: object
    IBusinessEntity:
      properties:
        activities:
          items:
            $ref: "#/components/schemas/IBusinessEntityActivity"
          readOnly: true
          type: array
        assetId:
          $ref: "#/components/schemas/IAssetId"
        businessType:
          enum:
            - Undefined
            - LLC
            - Partnership
            - SCorporation
            - CCorporation
          readOnly: true
          type: string
        businessTypeFormatted:
          readOnly: true
          type: string
        currentAnnualDistributions:
          $ref: "#/components/schemas/Currency"
        currentAnnualDividends:
          $ref: "#/components/schemas/Currency"
        currentAnnualGrowthRate:
          $ref: "#/components/schemas/Percent"
        currentAnnualNetIncome:
          $ref: "#/components/schemas/Currency"
        entityName:
          readOnly: true
          type: string
        liquidationEvent:
          $ref: "#/components/schemas/ILiquidationEvent"
        marketValuationDate:
          $ref: "#/components/schemas/Date"
        marketValue:
          $ref: "#/components/schemas/Currency"
        owner:
          readOnly: true
          type: string
        purchaseAmount:
          $ref: "#/components/schemas/Currency"
        purchaseDate:
          $ref: "#/components/schemas/Date"
        standardDeviation:
          $ref: "#/components/schemas/Percent"
      type: object
    IBusinessEntityActivity:
      properties:
        applicableDateRange:
          $ref: "#/components/schemas/FormattedDateRange"
        distributions:
          $ref: "#/components/schemas/Currency"
        expense:
          $ref: "#/components/schemas/Currency"
        frequency:
          $ref: "#/components/schemas/FormattedEnumType_Frequency_"
        income:
          $ref: "#/components/schemas/Currency"
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
      type: object
    IBusinessPhoneNumbers:
      properties:
        business:
          readOnly: true
          type: string
        fax:
          readOnly: true
          type: string
      type: object
    ICanadianGovernmentPensions:
      properties:
        canadianOrQuebecPensionPlan:
          $ref: "#/components/schemas/Currency"
        oldAgeSecurity:
          $ref: "#/components/schemas/Currency"
      type: object
    ICashFlow:
      properties:
        incomes:
          $ref: "#/components/schemas/ICashFlowIncomes"
        outflows:
          $ref: "#/components/schemas/ICashFlowOutflows"
        surplusDeficit:
          $ref: "#/components/schemas/Currency"
        taxes:
          $ref: "#/components/schemas/ITaxes"
      type: object
    ICashFlowByOwner:
      properties:
        clientCashFlow:
          $ref: "#/components/schemas/ICashFlow"
        coClientCashFlow:
          $ref: "#/components/schemas/ICashFlow"
        totalCashFlow:
          $ref: "#/components/schemas/ICashFlow"
      type: object
    ICashFlowCategory:
      properties:
        isItemizedEnabled:
          readOnly: true
          type: boolean
        itemized:
          items:
            $ref: "#/components/schemas/ICashFlowItem"
          readOnly: true
          type: array
        total:
          $ref: "#/components/schemas/Currency"
      type: object
    ICashFlowIncomes:
      properties:
        annuityPayments:
          $ref: "#/components/schemas/ICashFlowCategory"
        disabilityIncomes:
          $ref: "#/components/schemas/Currency"
        earnedIncome:
          $ref: "#/components/schemas/ICashFlowCategory"
        holdingCompanies:
          $ref: "#/components/schemas/ICashFlowCategory"
        insuranceBenefits:
          $ref: "#/components/schemas/ICashFlowCategory"
        investmentIncomes:
          $ref: "#/components/schemas/ICashFlowCategory"
        lifestyleAssetLiquidations:
          $ref: "#/components/schemas/ICashFlowCategory"
        lockedInLiquidations:
          $ref: "#/components/schemas/Currency"
        longTermCareBenefits:
          $ref: "#/components/schemas/Currency"
        miscellaneousIncomes:
          $ref: "#/components/schemas/ICashFlowCategory"
        nonQualifiedLiquidations:
          $ref: "#/components/schemas/ICashFlowCategory"
        pension:
          $ref: "#/components/schemas/ICashFlowCategory"
        qualifiedLiquidations:
          $ref: "#/components/schemas/ICashFlowCategory"
        qualifiedLiquidationsNonRequiredMinimumDistributions:
          $ref: "#/components/schemas/ICashFlowCategory"
        requiredMinimumDistributions:
          $ref: "#/components/schemas/ICashFlowCategory"
        retirementIncome:
          $ref: "#/components/schemas/Currency"
        rothLiquidations:
          $ref: "#/components/schemas/Currency"
        socialSecurity:
          $ref: "#/components/schemas/ICashFlowCategory"
        tfsaLiquidations:
          $ref: "#/components/schemas/Currency"
        total:
          $ref: "#/components/schemas/ICashFlowCategory"
        withdrawals:
          $ref: "#/components/schemas/Currency"
      type: object
    ICashFlowItem:
      properties:
        description:
          readOnly: true
          type: string
        descriptionWithOwner:
          readOnly: true
          type: string
        isCPP:
          readOnly: true
          type: boolean
        isOAS:
          readOnly: true
          type: boolean
        sourceId:
          readOnly: true
          type: string
        value:
          $ref: "#/components/schemas/Currency"
      type: object
    ICashFlowOutflows:
      properties:
        contributions:
          $ref: "#/components/schemas/Currency"
        educationExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        employerExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        employmentBusinessExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        holdingCompanyOutflows:
          $ref: "#/components/schemas/ICashFlowCategory"
        investmentExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        lifestyleExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        lifestyleExpensesDiscretionary:
          $ref: "#/components/schemas/ICashFlowCategory"
        lifestyleExpensesFixed:
          $ref: "#/components/schemas/ICashFlowCategory"
        lockedInContributions:
          $ref: "#/components/schemas/Currency"
        medicalExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        miscellaneousExpenses:
          $ref: "#/components/schemas/ICashFlowCategory"
        miscellaneousExpensesDiscretionary:
          $ref: "#/components/schemas/ICashFlowCategory"
        miscellaneousExpensesFixed:
          $ref: "#/components/schemas/ICashFlowCategory"
        nonQualifiedContributions:
          $ref: "#/components/schemas/ICashFlowCategory"
        nonQualifiedReinvestments:
          $ref: "#/components/schemas/ICashFlowCategory"
        qualifiedContributions:
          $ref: "#/components/schemas/ICashFlowCategory"
        rothContributions:
          $ref: "#/components/schemas/Currency"
        surplusOutflows:
          $ref: "#/components/schemas/ICashFlowCategory"
        surplusSavings:
          $ref: "#/components/schemas/Currency"
        tfsaContributions:
          $ref: "#/components/schemas/Currency"
        totalNeeds:
          $ref: "#/components/schemas/Currency"
        totalWithTaxes:
          $ref: "#/components/schemas/Currency"
        totalWithoutTaxes:
          $ref: "#/components/schemas/Currency"
      type: object
    ICommonShareClassDetails:
      properties:
        shareClassStructure:
          $ref: "#/components/schemas/IShareClassStructure"
      type: object
    IContributions:
      properties:
        interCompanyDividendsReceived:
          items:
            $ref: "#/components/schemas/IInterCompanyDividendReceived"
          readOnly: true
          type: array
        sharePurchases:
          items:
            $ref: "#/components/schemas/ISharePurchase"
          readOnly: true
          type: array
        shareholderLoans:
          items:
            $ref: "#/components/schemas/IShareholderLoan"
          readOnly: true
          type: array
      type: object
    IDebtModStrategies:
      properties:
        lumpSumDebtModStrategies:
          items:
            $ref: "#/components/schemas/ILumpSumDebtModStrategy"
          readOnly: true
          type: array
        periodicDebtModStrategies:
          items:
            $ref: "#/components/schemas/IPeriodicDebtModStrategy"
          readOnly: true
          type: array
      type: object
    IDefinedBenefitPension:
      properties:
        benefit:
          $ref: "#/components/schemas/IOptionalField_Benefit_CurrencyWithGrowth_"
        description:
          readOnly: true
          type: string
        isBenefitFormula:
          readOnly: true
          type: boolean
        isBenefitIntegratedWithCppQpp:
          readOnly: true
          type: boolean
        isFormulaIntegratedWithCppQpp:
          readOnly: true
          type: boolean
        owner:
          enum:
            - Client
            - CoClient
          readOnly: true
          type: string
        pensionType:
          readOnly: true
          type: string
        percentPayableToSurvivor:
          $ref: "#/components/schemas/Percent"
        projectedYearsOfService:
          format: int32
          readOnly: true
          type: integer
        startDate:
          $ref: "#/components/schemas/Date"
      type: object
    IDependent:
      properties:
        address:
          $ref: "#/components/schemas/IAddress"
        ageAsOfPlanDate:
          format: int32
          readOnly: true
          type: integer
        birthdate:
          $ref: "#/components/schemas/Date"
        citizenship:
          readOnly: true
          type: string
        dependentOf:
          readOnly: true
          type: string
        dependentOfId:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        email:
          readOnly: true
          type: string
        employer:
          $ref: "#/components/schemas/IEmployer"
        gender:
          $ref: "#/components/schemas/FormattedEnumType_Gender_"
        name:
          $ref: "#/components/schemas/IPersonName"
        ownershipId:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        phone:
          $ref: "#/components/schemas/IPhoneNumbers"
        relationship:
          readOnly: true
          type: string
      type: object
    IEmployer:
      properties:
        address:
          $ref: "#/components/schemas/IAddress"
        name:
          readOnly: true
          type: string
        phone:
          $ref: "#/components/schemas/IBusinessPhoneNumbers"
      type: object
    IEstateDetails:
      properties:
        enableFiftyPercentSolution:
          $ref: "#/components/schemas/DescriptiveBoolean"
        estateFreeze:
          $ref: "#/components/schemas/DescriptiveBoolean"
        estateFreezeDate:
          $ref: "#/components/schemas/Date"
        shareOptionsAtFirstDeath:
          readOnly: true
          type: string
        shareOptionsAtSecondDeathAndDeathInTheSameYear:
          readOnly: true
          type: string
      type: object
    IFamily:
      properties:
        address:
          $ref: "#/components/schemas/IAddress"
        client:
          $ref: "#/components/schemas/IFamilyMember"
        coClient:
          $ref: "#/components/schemas/IFamilyMember"
        dependents:
          items:
            $ref: "#/components/schemas/IDependent"
          readOnly: true
          type: array
        headFullNames:
          readOnly: true
          type: string
      type: object
    IFamilyMember:
      properties:
        address:
          $ref: "#/components/schemas/IAddress"
        ageAsOfPlanDate:
          format: int32
          readOnly: true
          type: integer
        birthdate:
          $ref: "#/components/schemas/Date"
        citizenship:
          readOnly: true
          type: string
        email:
          readOnly: true
          type: string
        employer:
          $ref: "#/components/schemas/IEmployer"
        gender:
          $ref: "#/components/schemas/FormattedEnumType_Gender_"
        name:
          $ref: "#/components/schemas/IPersonName"
        ownershipId:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        phone:
          $ref: "#/components/schemas/IPhoneNumbers"
      type: object
    IFormattedFrequency:
      properties:
        everyNPeriods:
          format: int32
          readOnly: true
          type: integer
        formatted:
          readOnly: true
          type: string
        formattedAbbrv:
          readOnly: true
          type: string
        value:
          enum:
            - Annual
            - SemiAnnual
            - Quarterly
            - Bimonthly
            - Monthly
            - TwiceMonthly
            - BiWeekly
            - Weekly
            - Daily
            - Continuously
            - Onetime
            - EveryXYears
          readOnly: true
          type: string
      type: object
    IGoal:
      properties:
        assetsRemainingAfterFundingGoal:
          $ref: "#/components/schemas/IOptionalField_Currency_"
        coverage:
          $ref: "#/components/schemas/IOptionalField_GoalCoveragePercent_"
        description:
          readOnly: true
          type: string
        endDate:
          $ref: "#/components/schemas/Date"
        identifier:
          $ref: "#/components/schemas/GoalId"
        startDate:
          $ref: "#/components/schemas/Date"
        type:
          enum:
            - Retirement
            - SurvivorIncome
            - CriticalIllness
            - LongTermCareInsurance
            - Cashflow
            - DisabilityIncome
            - Education
            - MajorPurchase
            - EmergencyFund
            - Undefined
            - NotSupported
          readOnly: true
          type: string
        yearAssetsDepleted:
          $ref: "#/components/schemas/IOptionalField_Year_"
      type: object
    IGovernmentPensions:
      properties:
        estimatedCanadianGovernmentPensions:
          $ref: "#/components/schemas/ICanadianGovernmentPensions"
        estimatedSocialSecurity:
          $ref: "#/components/schemas/Currency"
      type: object
    IHeadAssumptions:
      properties:
        alreadyRetired:
          readOnly: true
          type: boolean
        deceasedAge:
          format: int32
          readOnly: true
          type: integer
        deceasedDate:
          $ref: "#/components/schemas/Date"
        estateIncomeTaxes:
          $ref: "#/components/schemas/IIncomeTaxes"
        governmentPensions:
          $ref: "#/components/schemas/IGovernmentPensions"
        maritalOrTaxFilingStatus:
          $ref: "#/components/schemas/FormattedMaritalOrTaxFilingStatus"
        preRetirementIncomeTaxes:
          $ref: "#/components/schemas/IIncomeTaxes"
        retirementAge:
          format: int32
          readOnly: true
          type: integer
        retirementDate:
          $ref: "#/components/schemas/Date"
        retirementIncomeTaxes:
          $ref: "#/components/schemas/IIncomeTaxes"
      type: object
    IHistoricalData:
      properties:
        notionalAccounts:
          $ref: "#/components/schemas/INotionalAccounts"
        outstandingShareholderLoans:
          $ref: "#/components/schemas/IOutstandingShareholderLoans"
      type: object
    IHolding:
      properties:
        assetMix:
          $ref: "#/components/schemas/IAssetMix"
        description:
          readOnly: true
          type: string
        holdAmount:
          $ref: "#/components/schemas/PercentOr_Currency_"
        id:
          readOnly: true
          type: string
        isClassified:
          readOnly: true
          type: boolean
        preRetirementReturnRates:
          $ref: "#/components/schemas/IPeriodRateOfReturnDetails"
        retirementReturnRates:
          $ref: "#/components/schemas/IPeriodRateOfReturnDetails"
        symbol:
          readOnly: true
          type: string
        valuation:
          $ref: "#/components/schemas/IAssetValuation"
      type: object
    IHoldingCompany:
      properties:
        annualDividendYield:
          $ref: "#/components/schemas/Percent"
        ccpc:
          $ref: "#/components/schemas/DescriptiveBoolean"
        commonSharesOutstanding:
          format: int32
          readOnly: true
          type: integer
        contributions:
          $ref: "#/components/schemas/IContributions"
        corporateYearEnd:
          $ref: "#/components/schemas/Date"
        description:
          readOnly: true
          type: string
        dividendType:
          enum:
            - Taxable
            - NonTaxable
          readOnly: true
          type: string
        dividendTypeFormatted:
          readOnly: true
          type: string
        estateDetails:
          $ref: "#/components/schemas/IEstateDetails"
        historicalData:
          $ref: "#/components/schemas/IHistoricalData"
        id:
          readOnly: true
          type: string
        investmentAccounts:
          items:
            $ref: "#/components/schemas/IInvestmentAccount"
          readOnly: true
          type: array
        liabilities:
          items:
            $ref: "#/components/schemas/ILiability"
          readOnly: true
          type: array
        lifeInsurancePolicies:
          items:
            $ref: "#/components/schemas/ILifeInsurancePolicy"
          readOnly: true
          type: array
        marketValue:
          $ref: "#/components/schemas/Currency"
        numPreferredShareClasses:
          format: int32
          readOnly: true
          type: integer
        otherAssets:
          items:
            $ref: "#/components/schemas/IRealEstateAsset"
          readOnly: true
          type: array
        ownershipAsOfDate:
          $ref: "#/components/schemas/Date"
        ownershipDetails:
          $ref: "#/components/schemas/IOwnershipDetails"
        preferredSharesOutstanding:
          format: int32
          readOnly: true
          type: integer
        provinceOfIncorporation:
          readOnly: true
          type: string
        provinceOfTaxation:
          readOnly: true
          type: string
        realEstateAssets:
          items:
            $ref: "#/components/schemas/IRealEstateAsset"
          readOnly: true
          type: array
        valueOfAllCommonShares:
          $ref: "#/components/schemas/Currency"
        valueOfAllPreferredShares:
          $ref: "#/components/schemas/Currency"
        withdrawals:
          $ref: "#/components/schemas/IWithdrawals"
      type: object
    IIncomeTaxes:
      properties:
        averageTaxRate:
          $ref: "#/components/schemas/Percent"
        combinedStateAndAverageTaxRate:
          $ref: "#/components/schemas/Percent"
        combinedStateAndLongTermCapitalGainsTaxRate:
          $ref: "#/components/schemas/Percent"
        combinedStateAndMarginalTaxRate:
          $ref: "#/components/schemas/Percent"
        longTermCapitalGainsTaxRate:
          $ref: "#/components/schemas/Percent"
        marginalTaxRate:
          $ref: "#/components/schemas/Percent"
        stateTaxRate:
          $ref: "#/components/schemas/Percent"
      type: object
    IInsurancePremium:
      properties:
        amount:
          $ref: "#/components/schemas/CurrencyWithGrowth"
        annualAmount:
          $ref: "#/components/schemas/Currency"
        ceaseDate:
          $ref: "#/components/schemas/Date"
        formattedPayingMember:
          readOnly: true
          type: string
        frequency:
          $ref: "#/components/schemas/IFormattedFrequency"
        payingMember:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        premiumRefundAmount:
          $ref: "#/components/schemas/Percent"
        startDate:
          $ref: "#/components/schemas/Date"
      type: object
    IInterCompanyDividendReceived:
      properties:
        activityData:
          $ref: "#/components/schemas/IActivityData"
        dividendType:
          $ref: "#/components/schemas/FormattedEnumType_InterCompanyDividendType_"
        generalRateOfIncomePoolAmount:
          $ref: "#/components/schemas/Currency"
        receivedFrom:
          readOnly: true
          type: string
      type: object
    IInvestmentAccount:
      properties:
        annualFee:
          $ref: "#/components/schemas/Percent"
        costBasis:
          $ref: "#/components/schemas/Currency"
        description:
          readOnly: true
          type: string
        excludeInAA:
          readOnly: true
          type: boolean
        holdings:
          items:
            $ref: "#/components/schemas/IHolding"
          readOnly: true
          type: array
        id:
          readOnly: true
          type: string
        marketValue:
          $ref: "#/components/schemas/Currency"
        rateOfReturn:
          $ref: "#/components/schemas/IRateOfReturnDetails"
        type:
          readOnly: true
          type: string
        valuationDate:
          $ref: "#/components/schemas/Date"
      type: object
    IInvestmentAccountOwnershipData:
      properties:
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        ownersName:
          readOnly: true
          type: string
        ownershipPercent:
          $ref: "#/components/schemas/Percent"
      type: object
    ILiabilities:
      properties:
        clientLiabilities:
          $ref: "#/components/schemas/INetWorthCategory"
        coClientLiabilities:
          $ref: "#/components/schemas/INetWorthCategory"
        communityPropertyLiabilities:
          $ref: "#/components/schemas/INetWorthCategory"
        jointLiabilities:
          $ref: "#/components/schemas/INetWorthCategory"
        totalLiabilities:
          $ref: "#/components/schemas/INetWorthCategory"
      type: object
    ILiability:
      properties:
        annualPaymentAmount:
          $ref: "#/components/schemas/Currency"
        balanceAsOf:
          $ref: "#/components/schemas/CurrencyWithDate"
        balanceAsOfPlanDate:
          $ref: "#/components/schemas/Currency"
        debtModStrategies:
          $ref: "#/components/schemas/IDebtModStrategies"
        description:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        insuredForDisability:
          $ref: "#/components/schemas/DescriptiveBoolean"
        insuredForLife:
          $ref: "#/components/schemas/DescriptiveBoolean"
        interestRate:
          $ref: "#/components/schemas/Percent"
        isInterestRateVariable:
          $ref: "#/components/schemas/DescriptiveBoolean"
        isPaymentVariable:
          $ref: "#/components/schemas/DescriptiveBoolean"
        linkedAssetId:
          readOnly: true
          type: string
        linkedAssetName:
          readOnly: true
          type: string
        loanDate:
          $ref: "#/components/schemas/Date"
        originalBalance:
          $ref: "#/components/schemas/Currency"
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        paidOffByRetirement:
          $ref: "#/components/schemas/IOptionalField_DescriptiveBoolean_"
        payOffDate:
          $ref: "#/components/schemas/IOptionalField_Date_"
        payOffOptionType:
          $ref: "#/components/schemas/FormattedEnumType_PayOffOptionsType_"
        paymentAmount:
          $ref: "#/components/schemas/IOptionalField_Currency_"
        paymentFrequency:
          $ref: "#/components/schemas/FormattedEnumType_Frequency_"
        paymentType:
          $ref: "#/components/schemas/FormattedEnumType_PaymentType_"
        type:
          $ref: "#/components/schemas/FormattedEnumType_LiabilityType_"
      type: object
    ILifeInsurancePolicy:
      properties:
        beneficiaryName:
          readOnly: true
          type: string
        benefitPeriod:
          $ref: "#/components/schemas/TimePeriod"
        cashSurrenderValue:
          $ref: "#/components/schemas/Currency"
        coverageCeaseDate:
          $ref: "#/components/schemas/Date"
        dailyBenefitValue:
          format: double
          readOnly: true
          type: number
        description:
          readOnly: true
          type: string
        effectiveDate:
          $ref: "#/components/schemas/Date"
        formattedBenefitValue:
          readOnly: true
          type: string
        formattedInsuredType:
          readOnly: true
          type: string
        formattedPolicyType:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        insured:
          enum:
            - Client
            - CoClient
            - FirstToDie
            - SecondToDie
            - Other
          readOnly: true
          type: string
        isCSVPayableWithDeathBenefit:
          $ref: "#/components/schemas/DescriptiveBoolean"
        monthlyBenefitValue:
          format: double
          readOnly: true
          type: number
        ownerName:
          readOnly: true
          type: string
        policyType:
          enum:
            - WholeLife
            - UniversalLife
            - Term1Life
            - Term5Life
            - Term10Life
            - Term20Life
            - Term100Life
            - VariableLife
            - VariableUniversalLife
            - GroupLongTermDisability
            - GroupShortTermDisability
            - IndividualDisability
            - LongTermCare
            - CriticalIllness
            - MedicalCoveragePlan
            - CashToInsuredCoverage
          readOnly: true
          type: string
        premiumData:
          $ref: "#/components/schemas/IInsurancePremium"
        premiumsWaivedAtDisability:
          $ref: "#/components/schemas/DescriptiveBoolean"
        rawBenefitValue:
          format: double
          readOnly: true
          type: number
        waitingPeriod:
          $ref: "#/components/schemas/TimePeriod"
      type: object
    ILifestyleAsset:
      properties:
        afterTaxProceedsAccountName:
          readOnly: true
          type: string
        description:
          readOnly: true
          type: string
        futureValueProjectedGrossSaleValue:
          $ref: "#/components/schemas/Currency"
        id:
          readOnly: true
          type: string
        isMajorPurchaseGoal:
          readOnly: true
          type: boolean
        marketValueAsOf:
          $ref: "#/components/schemas/CurrencyWithDate"
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        preTaxGrowthRate:
          $ref: "#/components/schemas/Percent"
        presentValueProjectedGrossSaleValue:
          $ref: "#/components/schemas/Currency"
        projectedSaleDate:
          $ref: "#/components/schemas/Date"
        purchaseAmount:
          $ref: "#/components/schemas/Currency"
        purchaseDate:
          $ref: "#/components/schemas/Date"
        standardDeviation:
          $ref: "#/components/schemas/Percent"
        type:
          $ref: "#/components/schemas/FormattedLifestyleType"
      type: object
    ILiquidationEvent:
      properties:
        firstSaleDate:
          $ref: "#/components/schemas/Date"
        lastSaleDate:
          $ref: "#/components/schemas/Date"
        liquidationType:
          enum:
            - SellAtPlanEnd
            - SellAllOnSpecificDate
            - SellInInstallments
          readOnly: true
          type: string
        liquidationTypeDescription:
          readOnly: true
          type: string
        saleDatesDescription:
          readOnly: true
          type: string
      type: object
    ILoanRepaymentToShareholder:
      properties:
        activityData:
          $ref: "#/components/schemas/IActivityData"
        shareholder:
          enum:
            - Undefined
            - Head1
            - Head2
            - Other
          readOnly: true
          type: string
      type: object
    ILumpSumDebtModStrategy:
      properties:
        amount:
          $ref: "#/components/schemas/Currency"
        debtModificationDate:
          $ref: "#/components/schemas/Date"
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
      type: object
    ILumpSumRedemptionStrategy:
      properties:
        amountOrPercentOfValue:
          $ref: "#/components/schemas/PercentOr_Currency_"
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
        redemptionDate:
          $ref: "#/components/schemas/Date"
      type: object
    ILumpSumSavingsStrategy:
      properties:
        amountOrPercentOfSalary:
          $ref: "#/components/schemas/PercentOr_Currency_"
        formattedSavingsTypeWithDash:
          readOnly: true
          type: string
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
        savingsDate:
          $ref: "#/components/schemas/Date"
        savingsType:
          $ref: "#/components/schemas/FormattedEnumType_SavingsStrategyType_"
      type: object
    IManualDividendDistribution:
      properties:
        activityData:
          $ref: "#/components/schemas/IActivityData"
        directCoClientAfterTaxProceedsTo:
          readOnly: true
          type: string
        dividendType:
          $ref: "#/components/schemas/FormattedEnumType_DistributionDividendType_"
        shareId:
          format: int32
          readOnly: true
          type: integer
        shareType:
          $ref: "#/components/schemas/FormattedEnumType_PrivateCorporationShareType_"
      type: object
    INetWorth:
      properties:
        netWorthAtPlanDate:
          $ref: "#/components/schemas/INetWorthAtDate"
        netWorthAtPlanEnd:
          $ref: "#/components/schemas/IOptionalField_INetWorthAtDate_"
        netWorthAtRetirement:
          $ref: "#/components/schemas/IOptionalField_INetWorthAtDate_"
      type: object
    INetWorthAtDate:
      properties:
        assets:
          $ref: "#/components/schemas/IAssets"
        assetsFundingRetirement:
          $ref: "#/components/schemas/IRetirementAssets"
        clientNetWorth:
          $ref: "#/components/schemas/Currency"
        coClientNetWorth:
          $ref: "#/components/schemas/Currency"
        communityPropertyNetWorth:
          $ref: "#/components/schemas/Currency"
        jointNetWorth:
          $ref: "#/components/schemas/Currency"
        liabilities:
          $ref: "#/components/schemas/ILiabilities"
        totalNetWorth:
          $ref: "#/components/schemas/Currency"
      type: object
    INetWorthCategory:
      properties:
        description:
          readOnly: true
          type: string
        itemized:
          items:
            $ref: "#/components/schemas/INetWorthItem"
          readOnly: true
          type: array
        total:
          $ref: "#/components/schemas/Currency"
      type: object
    INetWorthItem:
      properties:
        accountType:
          readOnly: true
          type: string
        description:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        value:
          $ref: "#/components/schemas/Currency"
      type: object
    INotionalAccounts:
      properties:
        capitalDividendAccountEndOfYearValue:
          $ref: "#/components/schemas/Currency"
        capitalLossesCarryoverEndOfYearValue:
          $ref: "#/components/schemas/Currency"
        dividendRefund:
          $ref: "#/components/schemas/Currency"
        generalRateOfIncomePoolEndOfYearValue:
          $ref: "#/components/schemas/Currency"
        nonEligibleRefundableDividendTaxOnHandEndOfYearValue:
          $ref: "#/components/schemas/Currency"
        nrdtohDividendRefund:
          $ref: "#/components/schemas/Currency"
        refundableDividendTaxOnHandEndOfYearValue:
          $ref: "#/components/schemas/Currency"
      type: object
    IOutstandingShareholderLoans:
      properties:
        clientAmount:
          $ref: "#/components/schemas/Currency"
        coClientAmount:
          $ref: "#/components/schemas/Currency"
        otherAmount:
          $ref: "#/components/schemas/Currency"
      type: object
    IOwnershipData:
      properties:
        marketValue:
          $ref: "#/components/schemas/Currency"
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        ownersName:
          readOnly: true
          type: string
        ownershipPercent:
          $ref: "#/components/schemas/Percent"
        shares:
          format: int32
          readOnly: true
          type: integer
      type: object
    IOwnershipDetails:
      properties:
        common:
          items:
            $ref: "#/components/schemas/IOwnershipData"
          readOnly: true
          type: array
        commonSharesDetails:
          items:
            $ref: "#/components/schemas/ICommonShareClassDetails"
          readOnly: true
          type: array
        preferred:
          items:
            $ref: "#/components/schemas/IOwnershipData"
          readOnly: true
          type: array
        preferredSharesDetails:
          items:
            $ref: "#/components/schemas/IPreferredShareClassDetails"
          readOnly: true
          type: array
        shareholderPercentOwnership:
          items:
            $ref: "#/components/schemas/IInvestmentAccountOwnershipData"
          readOnly: true
          type: array
      type: object
    IPeriodRateOfReturnDetails:
      properties:
        breakdown:
          $ref: "#/components/schemas/IRateOfReturnBreakdown"
        standardDeviation:
          $ref: "#/components/schemas/Percent"
        total:
          $ref: "#/components/schemas/Percent"
      type: object
    IPeriodicDebtModStrategy:
      properties:
        amount:
          $ref: "#/components/schemas/Currency"
        applicableDateRange:
          $ref: "#/components/schemas/FormattedDateRange"
        debtModificationFrequency:
          $ref: "#/components/schemas/FormattedEnumType_Frequency_"
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
      type: object
    IPeriodicRedemptionStrategy:
      properties:
        amountOrPercentOfValue:
          $ref: "#/components/schemas/PercentOr_Currency_"
        applicableDateRange:
          $ref: "#/components/schemas/FormattedDateRange"
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
        redemptionFrequency:
          $ref: "#/components/schemas/FormattedEnumType_Frequency_"
      type: object
    IPeriodicSavingsStrategy:
      properties:
        amountOrPercentOfSalary:
          $ref: "#/components/schemas/PercentOr_Currency_"
        endDate:
          $ref: "#/components/schemas/Date"
        formattedFrequencyAbbrv:
          readOnly: true
          type: string
        formattedSavingsTypeWithDash:
          readOnly: true
          type: string
        indexRate:
          $ref: "#/components/schemas/GrowthRateValues"
        isMaxContribution:
          readOnly: true
          type: boolean
        savingsFrequency:
          $ref: "#/components/schemas/FormattedEnumType_Frequency_"
        savingsType:
          $ref: "#/components/schemas/FormattedEnumType_SavingsStrategyType_"
        startDate:
          $ref: "#/components/schemas/Date"
      type: object
    IPersonName:
      properties:
        firstName:
          readOnly: true
          type: string
        formal:
          readOnly: true
          type: string
        full:
          readOnly: true
          type: string
        lastName:
          readOnly: true
          type: string
        middle:
          readOnly: true
          type: string
        title:
          readOnly: true
          type: string
      type: object
    IPhoneNumbers:
      properties:
        additionalNumbers:
          $ref: "#/components/schemas/IBusinessPhoneNumbers"
        business:
          readOnly: true
          type: string
        cell:
          readOnly: true
          type: string
        fax:
          readOnly: true
          type: string
        home:
          readOnly: true
          type: string
        pager:
          readOnly: true
          type: string
      type: object
    IPlanModules:
      properties:
        isCriticalIllnessModuleEnabled:
          readOnly: true
          type: boolean
        isDisabilityIncomeModuleEnabled:
          readOnly: true
          type: boolean
        isEstatePlanningModuleEabled:
          readOnly: true
          type: boolean
        isLongTermCareModuleEnabled:
          readOnly: true
          type: boolean
        isSurvivorIncomeModuleEnabled:
          readOnly: true
          type: boolean
      type: object
    IPortfolioAccount:
      properties:
        accountReturnRatesNoLongerCorrelateToAssumedAssetMixDueToOverrideInGsm:
          readOnly: true
          type: boolean
        annualFee:
          $ref: "#/components/schemas/Percent"
        applicableRangeRetirementLiquidatedAssets:
          $ref: "#/components/schemas/FormattedDateRange"
        costBasis:
          $ref: "#/components/schemas/Currency"
        description:
          readOnly: true
          type: string
        descriptionWithOwner:
          readOnly: true
          type: string
        excludeInAA:
          readOnly: true
          type: boolean
        holdings:
          items:
            $ref: "#/components/schemas/IHolding"
          readOnly: true
          type: array
        id:
          readOnly: true
          type: string
        isSystemGenerated:
          readOnly: true
          type: boolean
        marketValue:
          $ref: "#/components/schemas/Currency"
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        portfolioAssets:
          items:
            $ref: "#/components/schemas/IPortfolioAsset"
          readOnly: true
          type: array
        rateOfReturn:
          $ref: "#/components/schemas/IRateOfReturnDetails"
        savingsStrategies:
          $ref: "#/components/schemas/ISavingsStrategies"
        seppRedemptionStrategy:
          $ref: "#/components/schemas/ISEPPRedemptionStrategy"
        type:
          readOnly: true
          type: string
        valuationDate:
          $ref: "#/components/schemas/Date"
      type: object
    IPortfolioAsset:
      properties:
        applicableRangeRetirementLiquidatedAssets:
          $ref: "#/components/schemas/FormattedDateRange"
        costBasis:
          $ref: "#/components/schemas/Currency"
        description:
          readOnly: true
          type: string
        goalFundingDescription:
          readOnly: true
          type: string
        goalFundingGoalId:
          $ref: "#/components/schemas/GoalId"
        id:
          readOnly: true
          type: string
        incomeReinvested:
          $ref: "#/components/schemas/IReturnIncomeReinvestedDetails"
        isSystemGenerated:
          readOnly: true
          type: boolean
        marketValue:
          $ref: "#/components/schemas/Currency"
        parentAccountId:
          readOnly: true
          type: string
        rateOfReturn:
          $ref: "#/components/schemas/IRateOfReturnDetails"
        redemptionStrategies:
          $ref: "#/components/schemas/IRedemptionStrategies"
      type: object
    IPreferredShareClassDetails:
      properties:
        annualDividendYield:
          $ref: "#/components/schemas/Percent"
        dividendType:
          $ref: "#/components/schemas/FormattedEnumType_DistributionDividendType_"
        redemptionValuePerShare:
          $ref: "#/components/schemas/Currency"
        shareClassStructure:
          $ref: "#/components/schemas/IShareClassStructure"
      type: object
    IRateOfReturnBreakdown:
      properties:
        capitalGain:
          $ref: "#/components/schemas/Percent"
        deferredGrowth:
          $ref: "#/components/schemas/Percent"
        dividend:
          $ref: "#/components/schemas/Percent"
        interest:
          $ref: "#/components/schemas/Percent"
        taxFree:
          $ref: "#/components/schemas/Percent"
      type: object
    IRateOfReturnDetails:
      properties:
        preRetirement:
          $ref: "#/components/schemas/IPeriodRateOfReturnDetails"
        retirement:
          $ref: "#/components/schemas/IPeriodRateOfReturnDetails"
      type: object
    IRealEstateAsset:
      properties:
        currentYearNetRentalIncome:
          $ref: "#/components/schemas/Currency"
        description:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        marketValueAsOf:
          $ref: "#/components/schemas/CurrencyWithDate"
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        preTaxGrowthRate:
          $ref: "#/components/schemas/Percent"
        purchaseAmount:
          $ref: "#/components/schemas/Currency"
        purchaseDate:
          $ref: "#/components/schemas/Date"
        standardDeviation:
          $ref: "#/components/schemas/Percent"
        startOfYearCostBasis:
          $ref: "#/components/schemas/Currency"
        startOfYearMarketValue:
          $ref: "#/components/schemas/Currency"
      type: object
    IRedemptionStrategies:
      properties:
        lumpSumRedemptionStrategies:
          items:
            $ref: "#/components/schemas/ILumpSumRedemptionStrategy"
          readOnly: true
          type: array
        periodicRedemptionStrategies:
          items:
            $ref: "#/components/schemas/IPeriodicRedemptionStrategy"
          readOnly: true
          type: array
      type: object
    IRestrictedStock:
      properties:
        annualDividendPerUnit:
          $ref: "#/components/schemas/Currency"
        applicableRangeRetirementLiquidatedAssets:
          $ref: "#/components/schemas/FormattedDateRange"
        awardedDate:
          $ref: "#/components/schemas/Date"
        currentUnitValue:
          $ref: "#/components/schemas/Currency"
        description:
          readOnly: true
          type: string
        growthRate:
          $ref: "#/components/schemas/Percent"
        id:
          readOnly: true
          type: string
        numberOfUnits:
          format: int32
          readOnly: true
          type: integer
        owner:
          enum:
            - All
            - Head1
            - Head2
            - NonHead1
            - NonHead2
            - NonHead3
            - NonHead4
            - NonHead5
            - NonHead6
            - NonHead7
            - NonHead8
            - NonHead9
            - CommunityProperty
            - Joint
            - Other
            - AllDependents
            - AllFamilyMembers
          readOnly: true
          type: string
        pricePaidForAward:
          $ref: "#/components/schemas/Currency"
        type:
          readOnly: true
          type: string
      type: object
    IRetirementAssetCategories:
      properties:
        allAssets:
          items:
            $ref: "#/components/schemas/IValueDescriptionPair_Currency_"
          readOnly: true
          type: array
        nonQualifiedAnnuities:
          $ref: "#/components/schemas/INetWorthCategory"
        nonQualifiedAssets:
          $ref: "#/components/schemas/INetWorthCategory"
        qualifiedAnnuities:
          $ref: "#/components/schemas/INetWorthCategory"
        qualifiedAssets:
          $ref: "#/components/schemas/INetWorthCategory"
        totalAssets:
          $ref: "#/components/schemas/INetWorthCategory"
      type: object
    IRetirementAssets:
      properties:
        allAssets:
          $ref: "#/components/schemas/IRetirementAssetCategories"
        clientAssets:
          $ref: "#/components/schemas/IRetirementAssetCategories"
        coClientAssets:
          $ref: "#/components/schemas/IRetirementAssetCategories"
        communityPropertyAssets:
          $ref: "#/components/schemas/IRetirementAssetCategories"
        jointAssets:
          $ref: "#/components/schemas/IRetirementAssetCategories"
        withdrawalRate:
          $ref: "#/components/schemas/Percent"
      type: object
    IReturnIncomeReinvestedDetails:
      properties:
        duringPreRetirementPeriod:
          $ref: "#/components/schemas/DescriptiveBoolean"
        duringRetirementPeriod:
          $ref: "#/components/schemas/DescriptiveBoolean"
      type: object
    IRrspMaximizerStrategy:
      properties:
        applicable:
          readOnly: true
          type: string
        applicableRange:
          $ref: "#/components/schemas/FormattedDateRange"
        assetName:
          readOnly: true
          type: string
        constrainedByCashflow:
          $ref: "#/components/schemas/DescriptiveBoolean"
        month:
          readOnly: true
          type: string
      type: object
    ISEPPRedemptionStrategy:
      properties:
        applicableDateRange:
          $ref: "#/components/schemas/FormattedDateRange"
        distributionMethod:
          $ref: "#/components/schemas/FormattedEnumType_SEPPDistributionMethod_"
        lifeExpectancyTable:
          $ref: "#/components/schemas/FormattedEnumType_SEPPLifeExpectancyTable_"
        redemptionFrequency:
          $ref: "#/components/schemas/FormattedEnumType_Frequency_"
      type: object
    ISavingsStrategies:
      properties:
        lumpSumSavingsStrategies:
          items:
            $ref: "#/components/schemas/ILumpSumSavingsStrategy"
          readOnly: true
          type: array
        periodicSavingsStrategies:
          items:
            $ref: "#/components/schemas/IPeriodicSavingsStrategy"
          readOnly: true
          type: array
        rrspMaximizerStrategies:
          items:
            $ref: "#/components/schemas/IRrspMaximizerStrategy"
          readOnly: true
          type: array
        surplusSavingsStrategies:
          items:
            $ref: "#/components/schemas/ISurplusSavingsStrategy"
          readOnly: true
          type: array
      type: object
    IShareClassStructure:
      properties:
        clientOwnershipData:
          $ref: "#/components/schemas/IOwnershipData"
        coClientOwnershipData:
          $ref: "#/components/schemas/IOwnershipData"
        description:
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        otherOwnershipData:
          $ref: "#/components/schemas/IOwnershipData"
      type: object
    ISharePurchase:
      properties:
        activityData:
          $ref: "#/components/schemas/IActivityData"
        shareHolder:
          enum:
            - Undefined
            - Head1
            - Head2
            - Other
          readOnly: true
          type: string
        shareId:
          format: int32
          readOnly: true
          type: integer
        shareType:
          $ref: "#/components/schemas/FormattedEnumType_PrivateCorporationShareType_"
      type: object
    IShareRedemption:
      properties:
        activityData:
          $ref: "#/components/schemas/IActivityData"
        shareId:
          format: int32
          readOnly: true
          type: integer
        shareType:
          $ref: "#/components/schemas/FormattedEnumType_PrivateCorporationShareType_"
        shareholder:
          enum:
            - Undefined
            - Head1
            - Head2
            - Other
          readOnly: true
          type: string
      type: object
    IShareholderLoan:
      properties:
        activityData:
          $ref: "#/components/schemas/IActivityData"
        shareHolder:
          enum:
            - Undefined
            - Head1
            - Head2
            - Other
          readOnly: true
          type: string
      type: object
    IStockOption:
      properties:
        annualDividendPerUnit:
          $ref: "#/components/schemas/Currency"
        applicableRangeRetirementLiquidatedAssets:
          $ref: "#/components/schemas/FormattedDateRange"
        company:
          readOnly: true
          type: string
        currentUnitPrice:
          $ref: "#/components/schemas/Currency"
        currentUnitPriceDate:
          $ref: "#/components/schemas/Date"
        description:
          readOnly: true
          type: string
        endOfPlanYearExercisableGrossValue:
          $ref: "#/components/schemas/Currency"
        exerciseCost:
          $ref: "#/components/schemas/Currency"
        expirationDate:
          $ref: "#/components/schemas/Date"
        grantDate:
          $ref: "#/components/schemas/Date"
        grantedOptions:
          format: int32
          readOnly: true
          type: integer
        growthRate:
          $ref: "#/components/schemas/Percent"
        id:
          readOnly: true
          type: string
        optionsExercisable:
          format: int32
          readOnly: true
          type: integer
        optionsExercised:
          format: int32
          readOnly: true
          type: integer
        optionsVested:
          format: int32
          readOnly: true
          type: integer
        owner:
          readOnly: true
          type: string
        preTaxProfit:
          $ref: "#/components/schemas/Currency"
        startOfYearAMTBasis:
          $ref: "#/components/schemas/Currency"
        startOfYearCostBasis:
          $ref: "#/components/schemas/Currency"
        startOfYearUnitPrice:
          $ref: "#/components/schemas/Currency"
        strikePrice:
          $ref: "#/components/schemas/Currency"
        symbol:
          readOnly: true
          type: string
        type:
          enum:
            - NonQualifiedStockOption
            - IncentiveStockOption
          readOnly: true
          type: string
        typeFormatted:
          readOnly: true
          type: string
        vestingSchedule:
          items:
            $ref: "#/components/schemas/IVestingData"
          readOnly: true
          type: array
      type: object
    ISurplusSavingsStrategy:
      properties:
        endDate:
          $ref: "#/components/schemas/Date"
        percentOfSurplus:
          $ref: "#/components/schemas/Percent"
        startDate:
          $ref: "#/components/schemas/Date"
      type: object
    ITaxes:
      properties:
        estate:
          $ref: "#/components/schemas/Currency"
        federalIncome:
          $ref: "#/components/schemas/Currency"
        giftAndGenerationSkippingTransfer:
          $ref: "#/components/schemas/Currency"
        medicare:
          $ref: "#/components/schemas/Currency"
        pensionEarlyDistributionPenalty:
          $ref: "#/components/schemas/Currency"
        pensionPenaltyOnExcessDistributions:
          $ref: "#/components/schemas/Currency"
        refundableCredits:
          $ref: "#/components/schemas/Currency"
        socialSecurityEmployer:
          $ref: "#/components/schemas/Currency"
        socialSecuritySelfEmployed:
          $ref: "#/components/schemas/Currency"
        stateIncome:
          $ref: "#/components/schemas/Currency"
        total:
          $ref: "#/components/schemas/Currency"
      type: object
    IVestingData:
      properties:
        date:
          $ref: "#/components/schemas/Date"
        percentVested:
          $ref: "#/components/schemas/Percent"
      type: object
    IWithdrawals:
      properties:
        loanRepaymentsToShareholder:
          items:
            $ref: "#/components/schemas/ILoanRepaymentToShareholder"
          readOnly: true
          type: array
        manualDividendDistributions:
          items:
            $ref: "#/components/schemas/IManualDividendDistribution"
          readOnly: true
          type: array
        shareRedemptions:
          items:
            $ref: "#/components/schemas/IShareRedemption"
          readOnly: true
          type: array
      type: object
    LiabilitiesModel:
      properties:
        liabilities:
          items:
            $ref: "#/components/schemas/ILiability"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    LiabilityModel:
      properties:
        liability:
          $ref: "#/components/schemas/ILiability"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    LifestyleAssetModel:
      properties:
        lifestyleAsset:
          $ref: "#/components/schemas/ILifestyleAsset"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    LifestyleAssetsModel:
      properties:
        lifestyleAssets:
          items:
            $ref: "#/components/schemas/ILifestyleAsset"
          type: array
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    LoginModel:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    NeedsVsAbilitiesModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        projections:
          items:
            $ref: "#/components/schemas/ProjectedGoalsSummary_GoalNeedsVsAbilitiesS\
              ummary_"
          type: array
      type: object
    NetWorthModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        netWorth:
          $ref: "#/components/schemas/INetWorth"
      type: object
    NetWorthProjectionModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        netWorth:
          $ref: "#/components/schemas/ProjectedNetWorthSummary"
      type: object
    NetWorthProjectionsModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        projections:
          items:
            $ref: "#/components/schemas/NetWorthProjectionModel"
          type: array
      type: object
    NetWorthSummary:
      properties:
        totalAssets:
          format: double
          type: number
        totalLiabilities:
          format: double
          type: number
        totalNetWorth:
          format: double
          type: number
      type: object
    Object:
      properties: {}
      type: object
    ObjectLink:
      properties:
        href:
          type: string
        rel:
          type: string
      type: object
    Percent:
      properties:
        formattedDoubleDecimal:
          readOnly: true
          type: string
        formattedNoDecimal:
          readOnly: true
          type: string
        formattedSingleDecimal:
          readOnly: true
          type: string
        raw:
          format: double
          readOnly: true
          type: number
        rawCappedAt100:
          format: double
          readOnly: true
          type: number
      type: object
    PlanInformationModel:
      properties:
        country:
          readOnly: true
          type: string
        description:
          readOnly: true
          type: string
        isJointAnalysis:
          readOnly: true
          type: boolean
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        locale:
          readOnly: true
          type: string
        planDate:
          $ref: "#/components/schemas/Date"
        planDescription:
          readOnly: true
          type: string
        planId:
          readOnly: true
          type: string
        planLevel:
          enum:
            - Calculator
            - FinancialAssessment
            - AssetAllocation
            - Level1
            - Level2
            - Level3
            - Undefined
          readOnly: true
          type: string
        planModules:
          $ref: "#/components/schemas/IPlanModules"
        planType:
          readOnly: true
          type: string
        publishDate:
          $ref: "#/components/schemas/Date"
      type: object
    PlanSelectorParam:
      properties:
        planId:
          description: Id of the Plan to retrieve or update data for (e.g. 1001-11-3).
          type: string
      required:
        - planId
      type: object
    PlanStatusesModel:
      properties:
        hasIntegratedAccounts:
          enum:
            - Unknown
            - Yes
            - No
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        planDataStatus:
          enum:
            - UpdateNotRequired
            - UpdateRequired
            - UpdateInProgress
            - UpdateFailed
            - NoSuchPlan
          type: string
        serializedDataStatus:
          enum:
            - UpdateNotRequired
            - UpdateRequired
            - UpdateInProgress
            - UpdateFailed
            - NoSuchPlan
          type: string
      type: object
    PortfolioAccountModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        portfolioAccount:
          $ref: "#/components/schemas/IPortfolioAccount"
      type: object
    PortfolioAccountsModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        portfolioAccounts:
          items:
            $ref: "#/components/schemas/IPortfolioAccount"
          type: array
      type: object
    ProjectedAnnualSummariesModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        projections:
          items:
            $ref: "#/components/schemas/ProjectedAnnualSummaryModel"
          type: array
      type: object
    ProjectedAnnualSummary:
      properties:
        cashFlow:
          $ref: "#/components/schemas/CashFlowSummary"
        clientAge:
          format: int32
          type: integer
        coClientAge:
          format: int32
          type: integer
        netWorth:
          $ref: "#/components/schemas/NetWorthSummary"
        year:
          format: int32
          type: integer
      type: object
    ProjectedAnnualSummaryModel:
      properties:
        annualSummary:
          $ref: "#/components/schemas/ProjectedAnnualSummary"
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
      type: object
    ProjectedCashFlowSummary:
      properties:
        cashFlow:
          $ref: "#/components/schemas/ICashFlowByOwner"
        clientAge:
          format: int32
          type: integer
        coClientAge:
          format: int32
          type: integer
        year:
          format: int32
          type: integer
      type: object
    ProjectedNetWorthSummary:
      properties:
        clientAge:
          format: int32
          type: integer
        coClientAge:
          format: int32
          type: integer
        endOfYearNetWorth:
          $ref: "#/components/schemas/INetWorthAtDate"
        year:
          format: int32
          type: integer
      type: object
    PublicSessionInfoModel:
      properties:
        eulaAccepted:
          type: boolean
        hasAccountAggregation:
          type: boolean
        hasGoalWhatIfing:
          type: boolean
        hasUserSetPassword:
          type: boolean
        isAdmin:
          type: boolean
        isAdvisor:
          type: boolean
        isClient:
          type: boolean
        isPasswordExpired:
          type: boolean
        userId:
          type: string
        userName:
          type: string
      type: object
    PublishedPlanModel:
      properties:
        internalPlanId:
          format: int32
          type: integer
        planId:
          type: string
        planPublishDate:
          format: date-time
          type: string
      type: object
    ResetPasswordModel:
      properties:
        locale:
          description: 'Supported locales are: "en-US", "en-CA", and "fr-CA"'
          type: string
        userName:
          type: string
      required:
        - userName
        - locale
      type: object
    RestrictedStockModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        restrictedStock:
          $ref: "#/components/schemas/IRestrictedStock"
      type: object
    RestrictedStocksModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        restrictedStocks:
          items:
            $ref: "#/components/schemas/IRestrictedStock"
          type: array
      type: object
    ServiceInformation:
      properties:
        altairConnectionStatus:
          type: boolean
        name:
          type: string
        serviceVersion:
          type: string
        status:
          type: string
      type: object
    SetPasswordModel:
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
      type: object
    StockOptionModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        stockOption:
          $ref: "#/components/schemas/IStockOption"
      type: object
    StockOptionsModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        stockOptions:
          items:
            $ref: "#/components/schemas/IStockOption"
          type: array
      type: object
    TimePeriod:
      properties:
        count:
          format: int32
          type: integer
        duration:
          enum:
            - Days
            - Weeks
            - Months
            - Years
            - YearsOfAge
          type: string
      type: object
    Year:
      properties:
        raw:
          format: int32
          type: integer
      type: object
    Benefit_CurrencyWithGrowth_:
      properties:
        benefitType:
          enum:
            - DeathBenefit
            - MonthlyBenefit
            - DailyBenefit
            - MaximumBenefit
            - WeeklyBenefit
            - AnnualBenefit
            - LumpSum
          type: string
        value:
          $ref: "#/components/schemas/CurrencyWithGrowth"
      type: object
    FormattedEnumType_DistributionDividendType_:
      properties:
        value:
          enum:
            - TaxableIneligible
            - NonTaxable
            - TaxableEligible
          readOnly: true
          type: string
      type: object
    FormattedEnumType_Frequency_:
      properties:
        value:
          enum:
            - Annual
            - SemiAnnual
            - Quarterly
            - Bimonthly
            - Monthly
            - TwiceMonthly
            - BiWeekly
            - Weekly
            - Daily
            - Continuously
            - Onetime
            - EveryXYears
          readOnly: true
          type: string
      type: object
    FormattedEnumType_Gender_:
      properties:
        value:
          enum:
            - Male
            - Female
          readOnly: true
          type: string
      type: object
    FormattedEnumType_InterCompanyDividendType_:
      properties:
        value:
          enum:
            - NonTaxable
            - NonTaxableCda
            - NonTaxableEligible
            - TaxableEligible
          readOnly: true
          type: string
      type: object
    FormattedEnumType_LiabilityType_:
      properties:
        value:
          enum:
            - Personal
            - Business
            - CreditCard
            - Mortgage
            - Vehicle
            - PolicyLoan
          readOnly: true
          type: string
      type: object
    FormattedEnumType_PayOffOptionsType_:
      properties:
        value:
          enum:
            - TransferToSurvivor
            - PayOffAtFirstDeath
            - PayOffAtOwnerDeath
            - InsuredForLife
          readOnly: true
          type: string
      type: object
    FormattedEnumType_PaymentType_:
      properties:
        value:
          enum:
            - InterestOnly
            - PrincipalAndInterest
            - SetPayment
            - LastPeriodPayment
          readOnly: true
          type: string
      type: object
    FormattedEnumType_PrivateCorporationShareType_:
      properties:
        value:
          enum:
            - Undefined
            - Common
            - Preferred
          readOnly: true
          type: string
      type: object
    FormattedEnumType_SEPPDistributionMethod_:
      properties:
        value:
          enum:
            - RequiredMinDistribution
            - Amortization
            - Annuitization
          readOnly: true
          type: string
      type: object
    FormattedEnumType_SEPPLifeExpectancyTable_:
      properties:
        value:
          enum:
            - NOT_APPLICABLE_UPPER_CASE
            - SingleLifeExpectancy
            - NonSingleLifeExpectancy
          readOnly: true
          type: string
      type: object
    FormattedEnumType_SavingsStrategyType_:
      properties:
        value:
          enum:
            - PreTax
            - PostTax
            - Employer
            - Owner
            - Mandatory
          readOnly: true
          type: string
      type: object
    IOptionalField_Benefit_CurrencyWithGrowth_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/Benefit_CurrencyWithGrowth_"
      type: object
    IOptionalField_Currency_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/Currency"
      type: object
    IOptionalField_Date_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/Date"
      type: object
    IOptionalField_DescriptiveBoolean_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/DescriptiveBoolean"
      type: object
    IOptionalField_GoalCoveragePercent_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/GoalCoveragePercent"
      type: object
    IOptionalField_INetWorthAtDate_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/INetWorthAtDate"
      type: object
    IOptionalField_Year_:
      properties:
        enabled:
          readOnly: true
          type: boolean
        populated:
          readOnly: true
          type: boolean
        value:
          $ref: "#/components/schemas/Year"
      type: object
    IValueDescriptionPair_Currency_:
      properties:
        description:
          readOnly: true
          type: string
        value:
          $ref: "#/components/schemas/Currency"
      type: object
    PercentOr_Currency_:
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
        percent:
          $ref: "#/components/schemas/Percent"
      type: object
    ProjectedGoalsSummary_AssetsFundingGoalSummary_:
      properties:
        clientAge:
          format: int32
          type: integer
        coClientAge:
          format: int32
          type: integer
        goals:
          items:
            $ref: "#/components/schemas/AssetsFundingGoalSummary"
          type: array
        year:
          format: int32
          type: integer
      type: object
    ProjectedGoalsSummary_GoalNeedsVsAbilitiesSummary_:
      properties:
        clientAge:
          format: int32
          type: integer
        coClientAge:
          format: int32
          type: integer
        goals:
          items:
            $ref: "#/components/schemas/GoalNeedsVsAbilitiesSummary"
          type: array
        year:
          format: int32
          type: integer
      type: object
