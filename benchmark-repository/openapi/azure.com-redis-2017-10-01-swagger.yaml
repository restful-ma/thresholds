openapi: 3.0.0
info:
  description: REST API for Azure Redis Cache Service.
  title: RedisManagementClient
  version: 2017-10-01
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/redis/resource-manager/Microsoft.Cache/stable/2017-10-01/redis.json
      version: "2.0"
  x-preferred: false
  x-providerName: azure.com
  x-serviceName: redis
  x-tags:
    - Azure
    - Microsoft
security:
  - azure_auth:
      - user_impersonation
paths:
  /providers/Microsoft.Cache/operations:
    get:
      description: Lists all of the available REST API operations of the Microsoft.Cache
        provider.
      operationId: Operations_List
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
      responses:
        "200":
          description: Success. The response describes the list of operations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationListResult"
      tags:
        - Operations
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability":
    post:
      description: Checks that the redis cache name is valid and is not already in use.
      operationId: Redis_CheckNameAvailability
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckNameAvailabilityParameters"
        description: Parameters supplied to the CheckNameAvailability Redis operation. The
          only supported resource type is 'Microsoft.Cache/redis'
        required: true
      responses:
        "200":
          description: Name is available
      tags:
        - Redis
  "/subscriptions/{subscriptionId}/providers/Microsoft.Cache/Redis":
    get:
      description: Gets all Redis caches in the specified subscription.
      operationId: Redis_List
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisListResult"
              examples:
                RedisCacheList:
                  $ref: "#/components/examples/RedisCacheList"
      tags:
        - Redis
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis":
    get:
      description: Lists all Redis caches in a resource group.
      operationId: Redis_ListByResourceGroup
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheListByResourceGroup:
              value: rg1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisListResult"
              examples:
                RedisCacheListByResourceGroup:
                  $ref: "#/components/examples/RedisCacheListByResourceGroup"
      tags:
        - Redis
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules":
    get:
      description: Gets all firewall rules in the specified redis cache.
      operationId: FirewallRules_ListByRedisResource
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRulesList:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: cacheName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRulesList:
              value: cache1
      responses:
        "200":
          description: Successfully got the current rules
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisFirewallRuleListResult"
              examples:
                RedisCacheFirewallRulesList:
                  $ref: "#/components/examples/RedisCacheFirewallRulesList"
      tags:
        - Redis
        - FirewallRules
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}":
    delete:
      description: Deletes a single firewall rule in a specified redis cache.
      operationId: FirewallRules_Delete
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleDelete:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: cacheName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleDelete:
              value: cache1
        - description: The name of the firewall rule.
          in: path
          name: ruleName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleDelete:
              value: rule1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Successfully deleted the rule
        "204":
          description: Successfully deleted the rule
      tags:
        - Redis
        - FirewallRules
    get:
      description: Gets a single firewall rule in a specified redis cache.
      operationId: FirewallRules_Get
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleGet:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: cacheName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleGet:
              value: cache1
        - description: The name of the firewall rule.
          in: path
          name: ruleName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleGet:
              value: rule1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Successfully found the rule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisFirewallRule"
              examples:
                RedisCacheFirewallRuleGet:
                  $ref: "#/components/examples/RedisCacheFirewallRuleGet"
      tags:
        - Redis
        - FirewallRules
    put:
      description: Create or update a redis cache firewall rule
      operationId: FirewallRules_CreateOrUpdate
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleCreate:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: cacheName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleCreate:
              value: cache1
        - description: The name of the firewall rule.
          in: path
          name: ruleName
          required: true
          schema:
            type: string
          examples:
            RedisCacheFirewallRuleCreate:
              value: rule1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisFirewallRuleCreateParameters"
        description: Parameters supplied to the create or update redis firewall rule
          operation.
        required: true
      responses:
        "200":
          description: Resource was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisFirewallRule"
              examples:
                RedisCacheFirewallRuleCreate:
                  $ref: "#/components/examples/RedisCacheFirewallRuleCreate"
        "201":
          description: Resource was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisFirewallRule"
              examples:
                RedisCacheFirewallRuleCreate:
                  $ref: "#/components/examples/RedisCacheFirewallRuleCreate"
      tags:
        - Redis
        - FirewallRules
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/patchSchedules":
    get:
      description: Gets all patch schedules in the specified redis cache (there is only
        one).
      operationId: PatchSchedules_ListByRedisResource
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesList:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: cacheName
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesList:
              value: cache1
      responses:
        "200":
          description: Successfully got the current patch schedules
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisPatchScheduleListResult"
              examples:
                RedisCachePatchSchedulesList:
                  $ref: "#/components/examples/RedisCachePatchSchedulesList"
      tags:
        - Redis
        - PatchSchedules
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}":
    delete:
      description: Deletes a Redis cache.
      operationId: Redis_Delete
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheDelete:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheDelete:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: ""
        "204":
          description: ""
      tags:
        - Redis
      x-ms-long-running-operation: true
    get:
      description: Gets a Redis cache (resource description).
      operationId: Redis_Get
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheGet:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheGet:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisResource"
              examples:
                RedisCacheGet:
                  $ref: "#/components/examples/RedisCacheGet"
      tags:
        - Redis
    patch:
      description: Update an existing Redis cache.
      operationId: Redis_Update
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheUpdate:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheUpdate:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisUpdateParameters"
        description: Parameters supplied to the Update Redis operation.
        required: true
      responses:
        "200":
          description: The existing redis cache was successfully updated. Check
            provisioningStatus to see detailed status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisResource"
              examples:
                RedisCacheUpdate:
                  $ref: "#/components/examples/RedisCacheUpdate"
      tags:
        - Redis
    put:
      description: Create or replace (overwrite/recreate, with potential downtime) an
        existing Redis cache.
      operationId: Redis_Create
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheCreate:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheCreate:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisCreateParameters"
        description: Parameters supplied to the Create Redis operation.
        required: true
      responses:
        "200":
          description: The existing redis cache was successfully updated. Check
            provisioningStatus to see detailed status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisResource"
              examples:
                RedisCacheCreate:
                  $ref: "#/components/examples/RedisCacheCreate"
        "201":
          description: The new redis cache was successfully created. Check
            provisioningStatus to see detailed status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisResource"
              examples:
                RedisCacheCreate:
                  $ref: "#/components/examples/RedisCacheCreate"
      tags:
        - Redis
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/export":
    post:
      description: Export data from the redis cache to blobs in a container.
      operationId: Redis_ExportData
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheExport:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheExport:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportRDBParameters"
        description: Parameters for Redis export operation.
        required: true
      responses:
        "200":
          description: Export operation succeeded.
        "202":
          description: Export operation successfully enqueued; follow the Location header
            to poll for final outcome.
        "204":
          description: Export operation succeeded.
      tags:
        - Redis
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/forceReboot":
    post:
      description: Reboot specified Redis node(s). This operation requires write permission
        to the cache resource. There can be potential data loss.
      operationId: Redis_ForceReboot
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheForceReboot:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheForceReboot:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisRebootParameters"
        description: Specifies which Redis node(s) to reboot.
        required: true
      responses:
        "200":
          description: Reboot operation successfully enqueued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisForceRebootResponse"
              examples:
                RedisCacheForceReboot:
                  $ref: "#/components/examples/RedisCacheForceReboot"
      tags:
        - Redis
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/import":
    post:
      description: Import data into Redis cache.
      operationId: Redis_ImportData
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheImport:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheImport:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportRDBParameters"
        description: Parameters for Redis import operation.
        required: true
      responses:
        "200":
          description: Import operation succeeded.
        "202":
          description: Import operation successfully enqueued; follow the Location header
            to poll for final outcome.
        "204":
          description: Import operation succeeded.
      tags:
        - Redis
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers":
    get:
      description: Gets the list of linked servers associated with this redis cache
        (requires Premium SKU).
      operationId: LinkedServer_List
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            LinkedServer_List:
              value: rg1
        - description: The name of the redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            LinkedServer_List:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Response of get linked servers.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisLinkedServerWithPropertiesList"
              examples:
                LinkedServer_List:
                  $ref: "#/components/examples/LinkedServer_List"
      tags:
        - Redis
      x-ms-pageable:
        nextLinkName: nextLink
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}":
    delete:
      description: Deletes the linked server from a redis cache (requires Premium SKU).
      operationId: LinkedServer_Delete
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            LinkedServerDelete:
              value: rg1
        - description: The name of the redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            LinkedServerDelete:
              value: cache1
        - description: The name of the linked server that is being added to the Redis cache.
          in: path
          name: linkedServerName
          required: true
          schema:
            type: string
          examples:
            LinkedServerDelete:
              value: cache2
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Linked server was successfully deleted.
      tags:
        - Redis
    get:
      description: Gets the detailed information about a linked server of a redis cache
        (requires Premium SKU).
      operationId: LinkedServer_Get
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            LinkedServer_Get:
              value: rg1
        - description: The name of the redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            LinkedServer_Get:
              value: cache1
        - description: The name of the linked server.
          in: path
          name: linkedServerName
          required: true
          schema:
            type: string
          examples:
            LinkedServer_Get:
              value: cache2
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Response of get linked server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisLinkedServerWithProperties"
              examples:
                LinkedServer_Get:
                  $ref: "#/components/examples/LinkedServer_Get"
      tags:
        - Redis
    put:
      description: Adds a linked server to the Redis cache (requires Premium SKU).
      operationId: LinkedServer_Create
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            LinkedServer_Create:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            LinkedServer_Create:
              value: cache1
        - description: The name of the linked server that is being added to the Redis cache.
          in: path
          name: linkedServerName
          required: true
          schema:
            type: string
          examples:
            LinkedServer_Create:
              value: cache2
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisLinkedServerCreateParameters"
        description: Parameters supplied to the Create Linked server operation.
        required: true
      responses:
        "200":
          description: The linked server was successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisLinkedServerWithProperties"
              examples:
                LinkedServer_Create:
                  $ref: "#/components/examples/LinkedServer_Create"
        "201":
          description: The linked server was successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisLinkedServerWithProperties"
              examples:
                LinkedServer_Create:
                  $ref: "#/components/examples/LinkedServer_Create"
      tags:
        - Redis
      x-ms-long-running-operation: true
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listKeys":
    post:
      description: Retrieve a Redis cache's access keys. This operation requires write
        permission to the cache resource.
      operationId: Redis_ListKeys
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheListKeys:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheListKeys:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Lists the keys for the specified Redis cache.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisAccessKeys"
              examples:
                RedisCacheListKeys:
                  $ref: "#/components/examples/RedisCacheListKeys"
      tags:
        - Redis
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listUpgradeNotifications":
    get:
      description: Gets any upgrade notifications for a Redis cache.
      operationId: Redis_ListUpgradeNotifications
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheGet:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheGet:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
        - description: how many minutes in past to look for upgrade notifications
          in: query
          name: history
          required: true
          schema:
            type: number
            format: double
          examples:
            RedisCacheGet:
              value: "5000"
      responses:
        "200":
          description: All upgrade notifications in given time range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationListResponse"
              examples:
                RedisCacheGet:
                  $ref: "#/components/examples/RedisCacheGet"
      tags:
        - Redis
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}":
    delete:
      description: Deletes the patching schedule of a redis cache (requires Premium SKU).
      operationId: PatchSchedules_Delete
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesDelete:
              value: rg1
        - description: The name of the redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesDelete:
              value: cache1
        - description: Default string modeled as parameter for auto generation to work
            correctly.
          in: path
          name: default
          required: true
          x-ms-enum:
            modelAsString: true
            name: defaultName
          schema:
            type: string
            enum:
              - default
          examples:
            RedisCachePatchSchedulesDelete:
              value: default
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Success.
        "204":
          description: Success.
      tags:
        - Redis
        - PatchSchedules
    get:
      description: Gets the patching schedule of a redis cache (requires Premium SKU).
      operationId: PatchSchedules_Get
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesGet:
              value: rg1
        - description: The name of the redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesGet:
              value: cache1
        - description: Default string modeled as parameter for auto generation to work
            correctly.
          in: path
          name: default
          required: true
          x-ms-enum:
            modelAsString: true
            name: defaultName
          schema:
            type: string
            enum:
              - default
          examples:
            RedisCachePatchSchedulesGet:
              value: default
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      responses:
        "200":
          description: Response of get patch schedules.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisPatchSchedule"
              examples:
                RedisCachePatchSchedulesGet:
                  $ref: "#/components/examples/RedisCachePatchSchedulesGet"
      tags:
        - Redis
        - PatchSchedules
    put:
      description: Create or replace the patching schedule for Redis cache (requires
        Premium SKU).
      operationId: PatchSchedules_CreateOrUpdate
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesCreateOrUpdate:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCachePatchSchedulesCreateOrUpdate:
              value: cache1
        - description: Default string modeled as parameter for auto generation to work
            correctly.
          in: path
          name: default
          required: true
          x-ms-enum:
            modelAsString: true
            name: defaultName
          schema:
            type: string
            enum:
              - default
          examples:
            RedisCachePatchSchedulesCreateOrUpdate:
              value: default
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisPatchSchedule"
        description: Parameters to set the patching schedule for Redis cache.
        required: true
      responses:
        "200":
          description: The patch schedule was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisPatchSchedule"
              examples:
                RedisCachePatchSchedulesCreateOrUpdate:
                  $ref: "#/components/examples/RedisCachePatchSchedulesCreateOrUpda\
                    te"
        "201":
          description: The patch schedule was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisPatchSchedule"
              examples:
                RedisCachePatchSchedulesCreateOrUpdate:
                  $ref: "#/components/examples/RedisCachePatchSchedulesCreateOrUpda\
                    te"
      tags:
        - Redis
        - PatchSchedules
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/regenerateKey":
    post:
      description: Regenerate Redis cache's access keys. This operation requires write
        permission to the cache resource.
      operationId: Redis_RegenerateKey
      parameters:
        - description: The name of the resource group.
          in: path
          name: resourceGroupName
          required: true
          schema:
            type: string
          examples:
            RedisCacheRegenerateKey:
              value: rg1
        - description: The name of the Redis cache.
          in: path
          name: name
          required: true
          schema:
            type: string
          examples:
            RedisCacheRegenerateKey:
              value: cache1
        - $ref: "#/components/parameters/ApiVersionParameter"
        - $ref: "#/components/parameters/SubscriptionIdParameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedisRegenerateKeyParameters"
        description: Specifies which key to regenerate.
        required: true
      responses:
        "200":
          description: Lists the regenerated keys for Redis Cache
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisAccessKeys"
              examples:
                RedisCacheRegenerateKey:
                  $ref: "#/components/examples/RedisCacheRegenerateKey"
      tags:
        - Redis
servers:
  - url: https://management.azure.com
components:
  examples:
    RedisCacheList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1
            location: West US
            name: cache1
            properties:
              enableNonSslPort: true
              hostName: cache1.redis.cache.windows.net
              port: 6379
              provisioningState: Creating
              redisConfiguration: {}
              redisVersion: "3.2"
              sku:
                capacity: 6
                family: C
                name: Standard
              sslPort: 6380
            tags: {}
            type: Microsoft.Cache/Redis
    RedisCacheListByResourceGroup:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1
            location: West US
            name: cache1
            properties:
              enableNonSslPort: true
              hostName: cache1.redis.cache.windows.net
              port: 6379
              provisioningState: Creating
              redisConfiguration: {}
              redisVersion: "3.2"
              sku:
                capacity: 6
                family: C
                name: Standard
              sslPort: 6380
            tags: {}
            type: Microsoft.Cache/Redis
    RedisCacheFirewallRulesList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1
            name: rule1
            properties:
              endIP: 192.168.1.4
              startIP: 192.168.1.1
            type: Microsoft.Cache/Redis/firewallRules
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule2
            name: rule2
            properties:
              endIP: 192.169.1.255
              startIP: 192.169.1.0
            type: Microsoft.Cache/Redis/firewallRules
    RedisCacheFirewallRuleGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1
        name: cache1/rule1
        properties:
          endIP: 192.168.1.4
          startIP: 192.168.1.1
        type: Microsoft.Cache/Redis/firewallRules
    RedisCacheFirewallRuleCreate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1
        name: cache1/rule1
        properties:
          endIP: 192.168.1.4
          startIP: 192.168.1.1
        type: Microsoft.Cache/Redis/firewallRules
    RedisCachePatchSchedulesList:
      value:
        value:
          - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/patchSchedules/default
            name: default
            properties:
              scheduleEntries:
                - dayOfWeek: Monday
                  maintenanceWindow: PT5H
                  startHourUtc: 12
                - dayOfWeek: Tuesday
                  startHourUtc: 12
            type: Microsoft.Cache/Redis/patchSchedules
    RedisCacheGet:
      value:
        value:
          - name: notification1
            timestamp: 2017-02-16T23:20:50.52Z
            upsellNotification: {}
    RedisCacheUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1
        location: West US
        name: cache1
        properties:
          accessKeys:
            primaryKey: secretkey1
            secondaryKey: secretKey2
          enableNonSslPort: true
          hostName: cache1.redis.cache.windows.net
          port: 6379
          provisioningState: Succeeded
          redisConfiguration:
            maxclients: "1000"
            maxmemory-delta: "50"
            maxmemory-reserved: "50"
          redisVersion: "3.0"
          sku:
            capacity: 1
            family: P
            name: Premium
          sslPort: 6380
        tags: {}
        type: Microsoft.Cache/Redis
    RedisCacheCreate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1
        location: West US
        name: cache1
        properties:
          accessKeys:
            primaryKey: secretkey1
            secondaryKey: secretKey2
          enableNonSslPort: false
          hostName: cache1.redis.cache.windows.net
          port: 6379
          provisioningState: Succeeded
          redisConfiguration:
            maxmemory-policy: allkeys-lru
          redisVersion: "3.0"
          sku:
            capacity: 1
            family: P
            name: Premium
          sslPort: 6380
        tags: {}
        type: Microsoft.Cache/Redis
        zones:
          - "1"
    RedisCacheForceReboot:
      value:
        message: reboot operation enqueued
    LinkedServer_List:
      value:
        - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2
          name: cache2
          properties:
            linkedRedisCacheId: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2
            linkedRedisCacheLocation: West US
            provisioningState: Succeeded
            serverRole: Secondary
          type: Microsoft.Cache/Redis/linkedServers
        - id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache3
          name: cache3
          properties:
            linkedRedisCacheId: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache3
            linkedRedisCacheLocation: West US
            provisioningState: Succeeded
            serverRole: Secondary
          type: Microsoft.Cache/Redis/linkedServers
    LinkedServer_Get:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2
        name: cache2
        properties:
          linkedRedisCacheId: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2
          linkedRedisCacheLocation: West US
          provisioningState: Succeeded
          serverRole: Secondary
        type: Microsoft.Cache/Redis/linkedServers
    LinkedServer_Create:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2
        name: cache2
        properties:
          linkedRedisCacheId: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2
          linkedRedisCacheLocation: West US
          provisioningState: Creating
          serverRole: Secondary
        type: Microsoft.Cache/Redis/linkedServers
    RedisCacheListKeys:
      value:
        primaryKey: secretkey1
        secondaryKey: secretKey2
    RedisCachePatchSchedulesGet:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/patchSchedules/default
        name: default
        properties:
          scheduleEntries:
            - dayOfWeek: Monday
              maintenanceWindow: PT5H
              startHourUtc: 12
            - dayOfWeek: Tuesday
              startHourUtc: 12
        type: Microsoft.Cache/Redis/patchSchedules
    RedisCachePatchSchedulesCreateOrUpdate:
      value:
        id: /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/patchSchedules/default
        name: default
        properties:
          scheduleEntries:
            - dayOfWeek: Monday
              maintenanceWindow: PT5H
              startHourUtc: 12
            - dayOfWeek: Tuesday
              startHourUtc: 12
        type: Microsoft.Cache/Redis/patchSchedules
    RedisCacheRegenerateKey:
      value:
        primaryKey: secretkey1
        secondaryKey: secretKey2
  parameters:
    ApiVersionParameter:
      description: Client Api Version.
      in: query
      name: api-version
      required: true
      schema:
        type: string
      examples:
        RedisCacheList:
          value: 2017-10-01
        RedisCacheListByResourceGroup:
          value: 2017-10-01
        RedisCacheFirewallRulesList:
          value: 2017-02-01
        RedisCacheFirewallRuleDelete:
          value: 2017-02-01
        RedisCacheFirewallRuleGet:
          value: 2017-02-01
        RedisCacheFirewallRuleCreate:
          value: 2017-02-01
        RedisCachePatchSchedulesList:
          value: 2017-10-01
        RedisCacheDelete:
          value: 2017-10-01
        RedisCacheGet:
          value: 2017-10-01
        RedisCacheUpdate:
          value: 2017-10-01
        RedisCacheCreate:
          value: 2017-10-01
        RedisCacheExport:
          value: 2017-10-01
        RedisCacheForceReboot:
          value: 2017-10-01
        RedisCacheImport:
          value: 2017-10-01
        LinkedServer_List:
          value: 2017-10-01
        LinkedServerDelete:
          value: 2017-10-01
        LinkedServer_Get:
          value: 2017-10-01
        LinkedServer_Create:
          value: 2017-10-01
        RedisCacheListKeys:
          value: 2017-10-01
        RedisCachePatchSchedulesDelete:
          value: 2017-10-01
        RedisCachePatchSchedulesGet:
          value: 2017-10-01
        RedisCachePatchSchedulesCreateOrUpdate:
          value: 2017-10-01
        RedisCacheRegenerateKey:
          value: 2017-10-01
    SubscriptionIdParameter:
      description: Gets subscription credentials which uniquely identify the Microsoft
        Azure subscription. The subscription ID forms part of the URI for every
        service call.
      in: path
      name: subscriptionId
      required: true
      schema:
        type: string
      examples:
        RedisCacheList:
          value: subid
        RedisCacheListByResourceGroup:
          value: subid
        RedisCacheFirewallRulesList:
          value: subid
        RedisCacheFirewallRuleDelete:
          value: subid
        RedisCacheFirewallRuleGet:
          value: subid
        RedisCacheFirewallRuleCreate:
          value: subid
        RedisCachePatchSchedulesList:
          value: subid
        RedisCacheDelete:
          value: subid
        RedisCacheGet:
          value: subid
        RedisCacheUpdate:
          value: subid
        RedisCacheCreate:
          value: subid
        RedisCacheExport:
          value: subid
        RedisCacheForceReboot:
          value: subid
        RedisCacheImport:
          value: subid
        LinkedServer_List:
          value: subid
        LinkedServerDelete:
          value: subid
        LinkedServer_Get:
          value: subid
        LinkedServer_Create:
          value: subid
        RedisCacheListKeys:
          value: subid
        RedisCachePatchSchedulesDelete:
          value: subid
        RedisCachePatchSchedulesGet:
          value: subid
        RedisCachePatchSchedulesCreateOrUpdate:
          value: subid
        RedisCacheRegenerateKey:
          value: subid
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: impersonate your user account
  schemas:
    CheckNameAvailabilityParameters:
      description: Parameters body to pass for name availability check.
      properties:
        name:
          description: Resource name.
          type: string
        type:
          description: Resource type. The only legal value of this property for checking
            redis cache name availability is 'Microsoft.Cache/redis'.
          type: string
      required:
        - name
        - type
    ExportRDBParameters:
      description: Parameters for Redis export operation.
      properties:
        container:
          description: Container name to export to.
          type: string
        format:
          description: File format.
          type: string
        prefix:
          description: Prefix to use for exported files.
          type: string
      required:
        - container
        - prefix
    ImportRDBParameters:
      description: Parameters for Redis import operation.
      properties:
        files:
          description: files to import.
          items:
            type: string
          type: array
        format:
          description: File format.
          type: string
      required:
        - files
    NotificationListResponse:
      description: The response of listUpgradeNotifications.
      properties:
        nextLink:
          description: Link for next set of notifications.
          readOnly: true
          type: string
        value:
          description: List of all notifications.
          items:
            $ref: "#/components/schemas/UpgradeNotification"
          type: array
    Operation:
      description: REST API operation
      properties:
        display:
          description: The object that describes the operation.
          properties:
            description:
              description: Friendly name of the operation
              type: string
            operation:
              description: "Operation type: read, write, delete, listKeys/action, etc."
              type: string
            provider:
              description: Friendly name of the resource provider
              type: string
            resource:
              description: Resource type on which the operation is performed.
              type: string
        name:
          description: "Operation name: {provider}/{resource}/{operation}"
          type: string
      type: object
    OperationListResult:
      description: Result of the request to list REST API operations. It contains a list of
        operations and a URL nextLink to get the next set of results.
      properties:
        nextLink:
          description: URL to get the next set of operation list results if there are any.
          readOnly: true
          type: string
        value:
          description: List of operations supported by the resource provider.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
    ProxyResource:
      allOf:
        - $ref: "#/components/schemas/Resource"
      description: The resource model definition for a ARM proxy resource. It will have
        everything other than required location and tags
    RedisAccessKeys:
      description: Redis cache access keys.
      properties:
        primaryKey:
          description: The current primary key that clients can use to authenticate with
            Redis cache.
          readOnly: true
          type: string
        secondaryKey:
          description: The current secondary key that clients can use to authenticate with
            Redis cache.
          readOnly: true
          type: string
    RedisCommonProperties:
      description: Create/Update/Get common properties of the redis cache.
      properties:
        enableNonSslPort:
          description: Specifies whether the non-ssl Redis server port (6379) is enabled.
          type: boolean
        redisConfiguration:
          additionalProperties:
            type: string
          description: "All Redis Settings. Few possible keys:
            rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequen\
            cy,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemor\
            y-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-\
            entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-zi\
            plist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-ma\
            x-ziplist-value etc."
          type: object
        shardCount:
          description: The number of shards to be created on a Premium Cluster Cache.
          format: int32
          type: integer
        tenantSettings:
          additionalProperties:
            type: string
          description: A dictionary of tenant settings
          type: object
      x-ms-external: true
    RedisCreateParameters:
      description: Parameters supplied to the Create Redis operation.
      properties:
        location:
          description: The geo-location where the resource lives
          type: string
          x-ms-mutability:
            - read
            - create
        properties:
          $ref: "#/components/schemas/RedisCreateProperties"
        tags:
          additionalProperties:
            type: string
          description: Resource tags.
          type: object
        zones:
          description: A list of availability zones denoting where the resource needs to
            come from.
          items:
            type: string
          type: array
      required:
        - properties
        - location
    RedisCreateProperties:
      allOf:
        - $ref: "#/components/schemas/RedisCommonProperties"
      description: Properties supplied to Create Redis operation.
      properties:
        sku:
          $ref: "#/components/schemas/Sku"
        staticIP:
          description: Static IP address. Required when deploying a Redis cache inside an
            existing Azure Virtual Network.
          pattern: ^\d+\.\d+\.\d+\.\d+$
          type: string
        subnetId:
          description: "The full resource ID of a subnet in a virtual network to deploy the
            Redis cache in. Example format:
            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/\
            Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/su\
            bnet1"
          pattern: ^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$
          type: string
      required:
        - sku
      x-ms-external: true
    RedisFirewallRule:
      allOf:
        - $ref: "#/components/schemas/ProxyResource"
      description: A firewall rule on a redis cache has a name, and describes a contiguous
        range of IP addresses permitted to connect
      properties:
        properties:
          $ref: "#/components/schemas/RedisFirewallRuleProperties"
      required:
        - properties
    RedisFirewallRuleCreateParameters:
      description: Parameters required for creating a firewall rule on redis cache.
      properties:
        properties:
          $ref: "#/components/schemas/RedisFirewallRuleProperties"
      required:
        - properties
    RedisFirewallRuleListResult:
      description: The response of list firewall rules Redis operation.
      properties:
        nextLink:
          description: Link for next set of locations.
          readOnly: true
          type: string
        value:
          description: Results of the list firewall rules operation.
          items:
            $ref: "#/components/schemas/RedisFirewallRule"
          type: array
    RedisFirewallRuleProperties:
      description: Specifies a range of IP addresses permitted to connect to the cache
      properties:
        endIP:
          description: highest IP address included in the range
          type: string
        startIP:
          description: lowest IP address included in the range
          type: string
      required:
        - startIP
        - endIP
    RedisForceRebootResponse:
      description: Response to force reboot for Redis cache.
      properties:
        message:
          description: Status message
          readOnly: true
          type: string
    RedisLinkedServer:
      description: Linked server Id
      properties:
        id:
          description: Linked server Id.
          readOnly: true
          type: string
    RedisLinkedServerCreateParameters:
      description: Parameter required for creating a linked server to redis cache.
      properties:
        properties:
          $ref: "#/components/schemas/RedisLinkedServerCreateProperties"
      required:
        - properties
    RedisLinkedServerCreateProperties:
      description: Create properties for a linked server
      properties:
        linkedRedisCacheId:
          description: Fully qualified resourceId of the linked redis cache.
          type: string
        linkedRedisCacheLocation:
          description: Location of the linked redis cache.
          type: string
        serverRole:
          description: Role of the linked server.
          enum:
            - Primary
            - Secondary
          type: string
          x-ms-enum:
            modelAsString: false
            name: ReplicationRole
      required:
        - linkedRedisCacheId
        - linkedRedisCacheLocation
        - serverRole
    RedisLinkedServerProperties:
      allOf:
        - $ref: "#/components/schemas/RedisLinkedServerCreateProperties"
      description: Properties of a linked server to be returned in get/put response
      properties:
        provisioningState:
          description: Terminal state of the link between primary and secondary redis cache.
          readOnly: true
          type: string
    RedisLinkedServerWithProperties:
      allOf:
        - $ref: "#/components/schemas/ProxyResource"
      description: Response to put/get linked server (with properties) for Redis cache.
      properties:
        properties:
          $ref: "#/components/schemas/RedisLinkedServerProperties"
    RedisLinkedServerWithPropertiesList:
      description: List of linked servers (with properties) of a Redis cache.
      properties:
        nextLink:
          description: Link for next set.
          readOnly: true
          type: string
        value:
          description: List of linked servers (with properties) of a Redis cache.
          items:
            $ref: "#/components/schemas/RedisLinkedServerWithProperties"
          type: array
    RedisListResult:
      description: The response of list Redis operation.
      properties:
        nextLink:
          description: Link for next set of locations.
          readOnly: true
          type: string
        value:
          description: List of Redis cache instances.
          items:
            $ref: "#/components/schemas/RedisResource"
          type: array
    RedisPatchSchedule:
      allOf:
        - $ref: "#/components/schemas/ProxyResource"
      description: Response to put/get patch schedules for Redis cache.
      properties:
        properties:
          $ref: "#/components/schemas/ScheduleEntries"
      required:
        - properties
    RedisPatchScheduleListResult:
      description: The response of list patch schedules Redis operation.
      properties:
        nextLink:
          description: Link for next page of results.
          readOnly: true
          type: string
        value:
          description: Results of the list patch schedules operation.
          items:
            $ref: "#/components/schemas/RedisPatchSchedule"
          type: array
    RedisProperties:
      allOf:
        - $ref: "#/components/schemas/RedisCreateProperties"
      description: Properties of the redis cache.
      properties:
        accessKeys:
          $ref: "#/components/schemas/RedisAccessKeys"
        hostName:
          description: Redis host name.
          readOnly: true
          type: string
        linkedServers:
          description: List of the linked servers associated with the cache
          items:
            $ref: "#/components/schemas/RedisLinkedServer"
          readOnly: true
          type: array
        port:
          description: Redis non-SSL port.
          format: int32
          readOnly: true
          type: integer
        provisioningState:
          description: Redis instance provisioning status.
          readOnly: true
          type: string
        redisVersion:
          description: Redis version.
          readOnly: true
          type: string
        sslPort:
          description: Redis SSL port.
          format: int32
          readOnly: true
          type: integer
      x-ms-external: true
    RedisRebootParameters:
      description: Specifies which Redis node(s) to reboot.
      properties:
        rebootType:
          description: Which Redis node(s) to reboot. Depending on this value data loss is
            possible.
          enum:
            - PrimaryNode
            - SecondaryNode
            - AllNodes
          type: string
          x-ms-enum:
            modelAsString: true
            name: RebootType
        shardId:
          description: If clustering is enabled, the ID of the shard to be rebooted.
          format: int32
          type: integer
      required:
        - rebootType
    RedisRegenerateKeyParameters:
      description: Specifies which Redis access keys to reset.
      properties:
        keyType:
          description: The Redis access key to regenerate.
          enum:
            - Primary
            - Secondary
          type: string
          x-ms-enum:
            modelAsString: false
            name: RedisKeyType
      required:
        - keyType
    RedisResource:
      allOf:
        - $ref: "#/components/schemas/TrackedResource"
      description: A single Redis item in List or Get Operation.
      properties:
        properties:
          $ref: "#/components/schemas/RedisProperties"
        zones:
          description: A list of availability zones denoting where the resource needs to
            come from.
          items:
            type: string
          type: array
      required:
        - properties
    RedisUpdateParameters:
      description: Parameters supplied to the Update Redis operation.
      properties:
        properties:
          $ref: "#/components/schemas/RedisUpdateProperties"
        tags:
          additionalProperties:
            type: string
          description: Resource tags.
          type: object
    RedisUpdateProperties:
      allOf:
        - $ref: "#/components/schemas/RedisCommonProperties"
      description: Patchable properties of the redis cache.
      properties:
        sku:
          $ref: "#/components/schemas/Sku"
      x-ms-external: true
    Resource:
      description: The Resource definition.
      properties:
        id:
          description: Resource ID.
          readOnly: true
          type: string
        name:
          description: Resource name.
          readOnly: true
          type: string
        type:
          description: Resource type.
          readOnly: true
          type: string
      x-ms-azure-resource: true
    ScheduleEntries:
      description: List of patch schedules for a Redis cache.
      properties:
        scheduleEntries:
          description: List of patch schedules for a Redis cache.
          items:
            $ref: "#/components/schemas/ScheduleEntry"
          type: array
          x-ms-client-name: ScheduleEntries
      required:
        - scheduleEntries
    ScheduleEntry:
      description: Patch schedule entry for a Premium Redis Cache.
      properties:
        dayOfWeek:
          description: Day of the week when a cache can be patched.
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
            - Everyday
            - Weekend
          type: string
          x-ms-enum:
            modelAsString: false
            name: DayOfWeek
        maintenanceWindow:
          description: "ISO8601 timespan specifying how much time cache patching can take. "
          format: duration
          type: string
        startHourUtc:
          description: Start hour after which cache patching can start.
          format: int32
          type: integer
      required:
        - dayOfWeek
        - startHourUtc
    Sku:
      description: SKU parameters supplied to the create Redis operation.
      properties:
        capacity:
          description: "The size of the Redis cache to deploy. Valid values: for C
            (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium)
            family (1, 2, 3, 4)."
          format: int32
          type: integer
        family:
          description: "The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P
            = Premium)."
          enum:
            - C
            - P
          type: string
          x-ms-enum:
            modelAsString: true
            name: SkuFamily
        name:
          description: "The type of Redis cache to deploy. Valid values: (Basic, Standard,
            Premium)"
          enum:
            - Basic
            - Standard
            - Premium
          type: string
          x-ms-enum:
            modelAsString: true
            name: SkuName
      required:
        - name
        - family
        - capacity
    TrackedResource:
      allOf:
        - $ref: "#/components/schemas/Resource"
      description: The resource model definition for a ARM tracked top level resource
      properties:
        location:
          description: The geo-location where the resource lives
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          additionalProperties:
            type: string
          description: Resource tags.
          type: object
          x-ms-mutability:
            - read
            - create
            - update
      required:
        - location
    UpgradeNotification:
      description: Properties of upgrade notification.
      properties:
        name:
          description: Name of upgrade notification.
          readOnly: true
          type: string
        timestamp:
          description: Timestamp when upgrade notification occurred.
          format: date-time
          readOnly: true
          type: string
        upsellNotification:
          additionalProperties:
            type: string
          description: Details about this upgrade notification
          readOnly: true
          type: object
