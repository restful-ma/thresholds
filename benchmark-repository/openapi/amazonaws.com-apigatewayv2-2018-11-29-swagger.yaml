openapi: 3.0.0
info:
  version: 2018-11-29
  x-release: v4
  title: AmazonApiGatewayV2
  description: Amazon API Gateway V2
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: apigatewayv2
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/apigateway/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /v2/apis:
    post:
      operationId: CreateApi
      description: Creates an Api resource.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - protocolType
                - routeSelectionExpression
              properties:
                apiKeySelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                disableSchemaValidation:
                  description: Avoid validating models when creating a deployment.
                  type: boolean
                name:
                  description: A string with a length between [1-128].
                  type: string
                protocolType:
                  description: ""
                  type: string
                  enum:
                    - WEBSOCKET
                routeSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                version:
                  description: A string with a length between [1-64].
                  type: string
                tags:
                  description: The key-value map of strings. The valid character set is
                    [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and
                    must not start with aws:. The tag value can be up to 256
                    characters..
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And1600"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetApis
      description: Gets a collection of Api resources.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApisResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/domainnames/{domainName}/apimappings":
    post:
      operationId: CreateApiMapping
      description: Creates an API mapping.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiMappingResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
                - stage
              properties:
                apiId:
                  description: The identifier.
                  type: string
                apiMappingKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
                stage:
                  description: A string with a length between [1-128].
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetApiMappings
      description: The API mappings.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiMappingsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/authorizers":
    post:
      operationId: CreateAuthorizer
      description: Creates an Authorizer for an API.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAuthorizerResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizerType
                - authorizerUri
                - identitySource
                - name
              properties:
                authorizerCredentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                authorizerResultTtlInSeconds:
                  description: An integer with a value between [0-3600].
                  type: integer
                  minimum: -2147483648
                  maximum: 2147483647
                authorizerType:
                  description: >-
                    The authorizer type. Currently the only valid value is
                    REQUEST, for a
                     Lambda function using incoming request parameters.
                  type: string
                  enum:
                    - REQUEST
                authorizerUri:
                  description: A string representation of a URI with a length between
                    [1-2048].
                  type: string
                identitySource:
                  description: >-
                    The identity source for which authorization is requested.
                    For the REQUEST
                     authorizer, this is required when authorization caching is enabled. The value is a
                     comma-separated string of one or more mapping expressions of the specified request
                     parameters. For example, if an Auth header, a Name query string parameter are defined
                     as identity sources, this value is $method.request.header.Auth,
                     $method.request.querystring.Name. These parameters will be used to derive
                     the authorization caching key and to perform runtime validation of the REQUEST
                     authorizer by verifying all of the identity-related request parameters are present,
                     not null and non-empty. Only when this is true does the authorizer invoke the
                     authorizer Lambda function, otherwise, it returns a 401 Unauthorized
                     response without calling the Lambda function. The valid value is a string of
                     comma-separated mapping expressions of the specified request parameters. When the
                     authorization caching is not enabled, this property is optional.
                  type: array
                  items:
                    $ref: "#/components/schemas/__string"
                identityValidationExpression:
                  description: A string with a length between [0-1024].
                  type: string
                name:
                  description: A string with a length between [1-128].
                  type: string
                providerArns:
                  description: For REQUEST authorizer, this is not defined.
                  type: array
                  items:
                    $ref: "#/components/schemas/Arn"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetAuthorizers
      description: Gets the Authorizers for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizersResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/deployments":
    post:
      operationId: CreateDeployment
      description: Creates a Deployment for an API.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDeploymentResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A string with a length between [0-1024].
                  type: string
                stageName:
                  description: A string with a length between [1-128].
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDeployments
      description: Gets the Deployments for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeploymentsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  /v2/domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a domain name.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDomainNameResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - domainName
              properties:
                domainName:
                  description: A string with a length between [1-512].
                  type: string
                domainNameConfigurations:
                  description: The domain name configurations.
                  type: array
                  items:
                    $ref: "#/components/schemas/DomainNameConfiguration"
                tags:
                  description: The key-value map of strings. The valid character set is
                    [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and
                    must not start with aws:. The tag value can be up to 256
                    characters..
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And1600"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDomainNames
      description: Gets the domain names for an AWS account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDomainNamesResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/integrations":
    post:
      operationId: CreateIntegration
      description: Creates an Integration.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - integrationType
              properties:
                connectionId:
                  description: A string with a length between [1-1024].
                  type: string
                connectionType:
                  description: Represents a connection type.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type
                    conversions.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                integrationMethod:
                  description: A string with a length between [1-64].
                  type: string
                integrationType:
                  description: Represents an API method integration type.
                  type: string
                  enum:
                    - AWS
                    - HTTP
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                integrationUri:
                  description: A string representation of a URI with a length between
                    [1-2048].
                  type: string
                passthroughBehavior:
                  description: Represents passthrough behavior for an integration response.
                  type: string
                  enum:
                    - WHEN_NO_MATCH
                    - NEVER
                    - WHEN_NO_TEMPLATES
                requestParameters:
                  description: >-
                    A key-value map specifying response parameters that are
                    passed to the method
                     response from the backend. The key is a method response header parameter name and the
                     mapped value is an integration response header value, a static value enclosed within
                     a pair of single quotes, or a JSON expression from the integration response body. The
                     mapping key must match the pattern of method.response.header.{name}, where name is a
                     valid and unique header name. The mapped non-static value must match the pattern of
                     integration.response.header.{name} or integration.response.body.{JSON-expression},
                     where name is a valid and unique response header name and JSON-expression is a valid
                     JSON expression without the $ prefix.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And512"
                requestTemplates:
                  description: >-
                    A mapping of identifier keys to templates. The value is an
                    actual template script.
                     The key is typically a SelectionKey which is chosen based on evaluating
                     a selection expression.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween0And32K"
                templateSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                timeoutInMillis:
                  description: An integer with a value between [50-29000].
                  type: integer
                  minimum: -2147483648
                  maximum: 2147483647
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntegrations
      description: Gets the Integrations for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses":
    post:
      operationId: CreateIntegrationResponse
      description: Creates an IntegrationResponses.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponseResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - integrationResponseKey
              properties:
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type
                    conversions.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                integrationResponseKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
                responseParameters:
                  description: >-
                    A key-value map specifying response parameters that are
                    passed to the method
                     response from the backend. The key is a method response header parameter name and the
                     mapped value is an integration response header value, a static value enclosed within
                     a pair of single quotes, or a JSON expression from the integration response body. The
                     mapping key must match the pattern of method.response.header.{name}, where name is a
                     valid and unique header name. The mapped non-static value must match the pattern of
                     integration.response.header.{name} or integration.response.body.{JSON-expression},
                     where name is a valid and unique response header name and JSON-expression is a valid
                     JSON expression without the $ prefix.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And512"
                responseTemplates:
                  description: >-
                    A mapping of identifier keys to templates. The value is an
                    actual template script.
                     The key is typically a SelectionKey which is chosen based on evaluating
                     a selection expression.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween0And32K"
                templateSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntegrationResponses
      description: Gets the IntegrationResponses for an Integration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationResponsesResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/models":
    post:
      operationId: CreateModel
      description: Creates a Model for an API.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateModelResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - schema
              properties:
                contentType:
                  description: A string with a length between [1-256].
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                name:
                  description: A string with a length between [1-128].
                  type: string
                schema:
                  description: A string with a length between [0-32768].
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetModels
      description: Gets the Models for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetModelsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/routes":
    post:
      operationId: CreateRoute
      description: Creates a Route for an API.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRouteResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - routeKey
              properties:
                apiKeyRequired:
                  description: Specifies whether an API key is required for the route.
                  type: boolean
                authorizationScopes:
                  description: >-
                    A list of authorization scopes configured on a route. The
                    scopes are used with a
                     COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
                     works by matching the route scopes against the scopes parsed from the access token in
                     the incoming request. The method invocation is authorized if any route scope matches
                     a claimed scope in the access token. Otherwise, the invocation is not authorized.
                     When the route scope is configured, the client must provide an access token instead
                     of an identity token for authorization purposes.
                  type: array
                  items:
                    $ref: "#/components/schemas/StringWithLengthBetween1And64"
                authorizationType:
                  description: >-
                    The authorization type. Valid values are NONE for open
                    access,
                     AWS_IAM for using AWS IAM permissions, and CUSTOM for
                     using a Lambda authorizer.
                  type: string
                  enum:
                    - NONE
                    - AWS_IAM
                    - CUSTOM
                authorizerId:
                  description: The identifier.
                  type: string
                modelSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                operationName:
                  description: A string with a length between [1-64].
                  type: string
                requestModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And128"
                requestParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/ParameterConstraints"
                routeKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
                routeResponseSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                target:
                  description: A string with a length between [1-128].
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRoutes
      description: Gets the Routes for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoutesResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}/routes/{routeId}/routeresponses":
    post:
      operationId: CreateRouteResponse
      description: Creates a RouteResponse for a Route.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRouteResponseResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - routeResponseKey
              properties:
                modelSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                responseModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And128"
                responseParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/ParameterConstraints"
                routeResponseKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRouteResponses
      description: Gets the RouteResponses for a Route.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRouteResponsesResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
  "/v2/apis/{apiId}/stages":
    post:
      operationId: CreateStage
      description: Creates a Stage for an API.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStageResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - stageName
              properties:
                accessLogSettings:
                  description: Settings for logging access in a stage.
                  type: object
                  properties:
                    DestinationArn:
                      $ref: "#/components/schemas/Arn"
                    Format:
                      $ref: "#/components/schemas/StringWithLengthBetween1And1024"
                clientCertificateId:
                  description: The identifier.
                  type: string
                defaultRouteSettings:
                  description: Represents a collection of route settings.
                  type: object
                  properties:
                    DataTraceEnabled:
                      $ref: "#/components/schemas/__boolean"
                    DetailedMetricsEnabled:
                      $ref: "#/components/schemas/__boolean"
                    LoggingLevel:
                      $ref: "#/components/schemas/LoggingLevel"
                    ThrottlingBurstLimit:
                      $ref: "#/components/schemas/__integer"
                    ThrottlingRateLimit:
                      $ref: "#/components/schemas/__double"
                deploymentId:
                  description: The identifier.
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                routeSettings:
                  description: The route settings map.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/RouteSettings"
                stageName:
                  description: A string with a length between [1-128].
                  type: string
                stageVariables:
                  description: The stage variable map.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween0And2048"
                tags:
                  description: The key-value map of strings. The valid character set is
                    [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and
                    must not start with aws:. The tag value can be up to 256
                    characters..
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And1600"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetStages
      description: Gets the Stages for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStagesResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: >-
            The next page of elements from this collection. Not valid for the
            last element of
             the collection.
          schema:
            type: string
  "/v2/apis/{apiId}":
    delete:
      operationId: DeleteApi
      description: Deletes an Api resource.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetApi
      description: Gets an Api resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    patch:
      operationId: UpdateApi
      description: Updates an Api resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateApiResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeySelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                disableSchemaValidation:
                  description: Avoid validating models when creating a deployment.
                  type: boolean
                name:
                  description: A string with a length between [1-128].
                  type: string
                routeSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                version:
                  description: A string with a length between [1-64].
                  type: string
        required: true
  "/v2/domainnames/{domainName}/apimappings/{apiMappingId}":
    delete:
      operationId: DeleteApiMapping
      description: Deletes an API mapping.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetApiMapping
      description: The API mapping.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiMappingResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    patch:
      operationId: UpdateApiMapping
      description: The API mapping.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateApiMappingResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
              properties:
                apiId:
                  description: The identifier.
                  type: string
                apiMappingKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
                stage:
                  description: A string with a length between [1-128].
                  type: string
        required: true
  "/v2/apis/{apiId}/authorizers/{authorizerId}":
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an Authorizer.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetAuthorizer
      description: Gets an Authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizerResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
    patch:
      operationId: UpdateAuthorizer
      description: Updates an Authorizer.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAuthorizerResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizerCredentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                authorizerResultTtlInSeconds:
                  description: An integer with a value between [0-3600].
                  type: integer
                  minimum: -2147483648
                  maximum: 2147483647
                authorizerType:
                  description: >-
                    The authorizer type. Currently the only valid value is
                    REQUEST, for a
                     Lambda function using incoming request parameters.
                  type: string
                  enum:
                    - REQUEST
                authorizerUri:
                  description: A string representation of a URI with a length between
                    [1-2048].
                  type: string
                identitySource:
                  description: >-
                    The identity source for which authorization is requested.
                    For the REQUEST
                     authorizer, this is required when authorization caching is enabled. The value is a
                     comma-separated string of one or more mapping expressions of the specified request
                     parameters. For example, if an Auth header, a Name query string parameter are defined
                     as identity sources, this value is $method.request.header.Auth,
                     $method.request.querystring.Name. These parameters will be used to derive
                     the authorization caching key and to perform runtime validation of the REQUEST
                     authorizer by verifying all of the identity-related request parameters are present,
                     not null and non-empty. Only when this is true does the authorizer invoke the
                     authorizer Lambda function, otherwise, it returns a 401 Unauthorized
                     response without calling the Lambda function. The valid value is a string of
                     comma-separated mapping expressions of the specified request parameters. When the
                     authorization caching is not enabled, this property is optional.
                  type: array
                  items:
                    $ref: "#/components/schemas/__string"
                identityValidationExpression:
                  description: A string with a length between [0-1024].
                  type: string
                name:
                  description: A string with a length between [1-128].
                  type: string
                providerArns:
                  description: For REQUEST authorizer, this is not defined.
                  type: array
                  items:
                    $ref: "#/components/schemas/Arn"
        required: true
  "/v2/apis/{apiId}/deployments/{deploymentId}":
    delete:
      operationId: DeleteDeployment
      description: Deletes a Deployment.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDeployment
      description: Gets a Deployment.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeploymentResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
    patch:
      operationId: UpdateDeployment
      description: Updates a Deployment.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDeploymentResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: A string with a length between [0-1024].
                  type: string
        required: true
  "/v2/domainnames/{domainName}":
    delete:
      operationId: DeleteDomainName
      description: Deletes a domain name.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDomainName
      description: Gets a domain name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDomainNameResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    patch:
      operationId: UpdateDomainName
      description: Updates a domain name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDomainNameResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domainNameConfigurations:
                  description: The domain name configurations.
                  type: array
                  items:
                    $ref: "#/components/schemas/DomainNameConfiguration"
        required: true
  "/v2/apis/{apiId}/integrations/{integrationId}":
    delete:
      operationId: DeleteIntegration
      description: Deletes an Integration.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntegration
      description: Gets an Integration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
    patch:
      operationId: UpdateIntegration
      description: Updates an Integration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateIntegrationResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                connectionId:
                  description: A string with a length between [1-1024].
                  type: string
                connectionType:
                  description: Represents a connection type.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type
                    conversions.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                integrationMethod:
                  description: A string with a length between [1-64].
                  type: string
                integrationType:
                  description: Represents an API method integration type.
                  type: string
                  enum:
                    - AWS
                    - HTTP
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                integrationUri:
                  description: A string representation of a URI with a length between
                    [1-2048].
                  type: string
                passthroughBehavior:
                  description: Represents passthrough behavior for an integration response.
                  type: string
                  enum:
                    - WHEN_NO_MATCH
                    - NEVER
                    - WHEN_NO_TEMPLATES
                requestParameters:
                  description: >-
                    A key-value map specifying response parameters that are
                    passed to the method
                     response from the backend. The key is a method response header parameter name and the
                     mapped value is an integration response header value, a static value enclosed within
                     a pair of single quotes, or a JSON expression from the integration response body. The
                     mapping key must match the pattern of method.response.header.{name}, where name is a
                     valid and unique header name. The mapped non-static value must match the pattern of
                     integration.response.header.{name} or integration.response.body.{JSON-expression},
                     where name is a valid and unique response header name and JSON-expression is a valid
                     JSON expression without the $ prefix.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And512"
                requestTemplates:
                  description: >-
                    A mapping of identifier keys to templates. The value is an
                    actual template script.
                     The key is typically a SelectionKey which is chosen based on evaluating
                     a selection expression.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween0And32K"
                templateSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                timeoutInMillis:
                  description: An integer with a value between [50-29000].
                  type: integer
                  minimum: -2147483648
                  maximum: 2147483647
        required: true
  "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}":
    delete:
      operationId: DeleteIntegrationResponse
      description: Deletes an IntegrationResponses.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetIntegrationResponse
      description: Gets an IntegrationResponses.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationResponseResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
    patch:
      operationId: UpdateIntegrationResponse
      description: Updates an IntegrationResponses.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateIntegrationResponseResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type
                    conversions.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                integrationResponseKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
                responseParameters:
                  description: >-
                    A key-value map specifying response parameters that are
                    passed to the method
                     response from the backend. The key is a method response header parameter name and the
                     mapped value is an integration response header value, a static value enclosed within
                     a pair of single quotes, or a JSON expression from the integration response body. The
                     mapping key must match the pattern of method.response.header.{name}, where name is a
                     valid and unique header name. The mapped non-static value must match the pattern of
                     integration.response.header.{name} or integration.response.body.{JSON-expression},
                     where name is a valid and unique response header name and JSON-expression is a valid
                     JSON expression without the $ prefix.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And512"
                responseTemplates:
                  description: >-
                    A mapping of identifier keys to templates. The value is an
                    actual template script.
                     The key is typically a SelectionKey which is chosen based on evaluating
                     a selection expression.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween0And32K"
                templateSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
        required: true
  "/v2/apis/{apiId}/models/{modelId}":
    delete:
      operationId: DeleteModel
      description: Deletes a Model.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetModel
      description: Gets a Model.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetModelResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    patch:
      operationId: UpdateModel
      description: Updates a Model.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateModelResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contentType:
                  description: A string with a length between [1-256].
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                name:
                  description: A string with a length between [1-128].
                  type: string
                schema:
                  description: A string with a length between [0-32768].
                  type: string
        required: true
  "/v2/apis/{apiId}/routes/{routeId}":
    delete:
      operationId: DeleteRoute
      description: Deletes a Route.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRoute
      description: Gets a Route.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRouteResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    patch:
      operationId: UpdateRoute
      description: Updates a Route.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRouteResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeyRequired:
                  description: Specifies whether an API key is required for the route.
                  type: boolean
                authorizationScopes:
                  description: >-
                    A list of authorization scopes configured on a route. The
                    scopes are used with a
                     COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
                     works by matching the route scopes against the scopes parsed from the access token in
                     the incoming request. The method invocation is authorized if any route scope matches
                     a claimed scope in the access token. Otherwise, the invocation is not authorized.
                     When the route scope is configured, the client must provide an access token instead
                     of an identity token for authorization purposes.
                  type: array
                  items:
                    $ref: "#/components/schemas/StringWithLengthBetween1And64"
                authorizationType:
                  description: >-
                    The authorization type. Valid values are NONE for open
                    access,
                     AWS_IAM for using AWS IAM permissions, and CUSTOM for
                     using a Lambda authorizer.
                  type: string
                  enum:
                    - NONE
                    - AWS_IAM
                    - CUSTOM
                authorizerId:
                  description: The identifier.
                  type: string
                modelSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                operationName:
                  description: A string with a length between [1-64].
                  type: string
                requestModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And128"
                requestParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/ParameterConstraints"
                routeKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
                routeResponseSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                target:
                  description: A string with a length between [1-128].
                  type: string
        required: true
  "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}":
    delete:
      operationId: DeleteRouteResponse
      description: Deletes a RouteResponse.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRouteResponse
      description: Gets a RouteResponse.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRouteResponseResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
    patch:
      operationId: UpdateRouteResponse
      description: Updates a RouteResponse.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRouteResponseResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                modelSelectionExpression:
                  description: An expression used to extract information at runtime. See <a
                    href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
                    Expressions</a> for more information.
                  type: string
                responseModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And128"
                responseParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/ParameterConstraints"
                routeResponseKey:
                  description: >-
                    After evaulating a selection expression, the result is
                    compared against one or
                     more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                     associated selection key type.
                  type: string
        required: true
  "/v2/apis/{apiId}/stages/{stageName}":
    delete:
      operationId: DeleteStage
      description: Deletes a Stage.
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: The stage name.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetStage
      description: Gets a Stage.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStageResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: The stage name.
          schema:
            type: string
    patch:
      operationId: UpdateStage
      description: Updates a Stage.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStageResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: The stage name.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accessLogSettings:
                  description: Settings for logging access in a stage.
                  type: object
                  properties:
                    DestinationArn:
                      $ref: "#/components/schemas/Arn"
                    Format:
                      $ref: "#/components/schemas/StringWithLengthBetween1And1024"
                clientCertificateId:
                  description: The identifier.
                  type: string
                defaultRouteSettings:
                  description: Represents a collection of route settings.
                  type: object
                  properties:
                    DataTraceEnabled:
                      $ref: "#/components/schemas/__boolean"
                    DetailedMetricsEnabled:
                      $ref: "#/components/schemas/__boolean"
                    LoggingLevel:
                      $ref: "#/components/schemas/LoggingLevel"
                    ThrottlingBurstLimit:
                      $ref: "#/components/schemas/__integer"
                    ThrottlingRateLimit:
                      $ref: "#/components/schemas/__double"
                deploymentId:
                  description: The identifier.
                  type: string
                description:
                  description: A string with a length between [0-1024].
                  type: string
                routeSettings:
                  description: The route settings map.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/RouteSettings"
                stageVariables:
                  description: The stage variable map.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween0And2048"
        required: true
  "/v2/apis/{apiId}/models/{modelId}/template":
    get:
      operationId: GetModelTemplate
      description: Gets a model template.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetModelTemplateResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/v2/tags/{resource-arn}":
    get:
      operationId: GetTags
      description: Gets the Tags for an API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: ""
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: Tag an APIGW resource
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: "AWS resource arn "
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: The key-value map of strings. The valid character set is
                    [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and
                    must not start with aws:. The tag value can be up to 256
                    characters..
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StringWithLengthBetween1And1600"
        required: true
  "/v2/tags/{resource-arn}#tagKeys":
    delete:
      operationId: UntagResource
      description: Untag an APIGW resource
      responses:
        "204":
          description: Success
        "480":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "481":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "482":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: "AWS resource arn "
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: The Tag keys to delete
          schema:
            type: array
            items:
              type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://apigateway.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: https://apigateway.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: http://apigateway.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
  - url: https://apigateway.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: "#/components/schemas/__string"
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiKeySelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        DisableSchemaValidation:
          $ref: "#/components/schemas/__boolean"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProtocolType:
          $ref: "#/components/schemas/ProtocolType"
        RouteSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Version:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        Warnings:
          $ref: "#/components/schemas/__listOf__string"
        Tags:
          $ref: "#/components/schemas/Tags"
    StringWithLengthBetween1And1600:
      type: string
      description: A string with a length between [1-1600].
    NotFoundException: {}
    TooManyRequestsException: {}
    BadRequestException: {}
    ConflictException: {}
    CreateApiMappingResponse:
      type: object
      properties:
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiMappingId:
          $ref: "#/components/schemas/Id"
        ApiMappingKey:
          $ref: "#/components/schemas/SelectionKey"
        Stage:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    CreateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: "#/components/schemas/Arn"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        AuthorizerResultTtlInSeconds:
          $ref: "#/components/schemas/IntegerWithLengthBetween0And3600"
        AuthorizerType:
          $ref: "#/components/schemas/AuthorizerType"
        AuthorizerUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        IdentitySource:
          $ref: "#/components/schemas/IdentitySourceList"
        IdentityValidationExpression:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProviderArns:
          $ref: "#/components/schemas/ProviderArnList"
    __string:
      type: string
    Arn:
      type: string
      description: Represents an Amazon Resource Name (ARN).
    CreateDeploymentResponse:
      type: object
      properties:
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        DeploymentStatus:
          $ref: "#/components/schemas/DeploymentStatus"
        DeploymentStatusMessage:
          $ref: "#/components/schemas/__string"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
    CreateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        DomainName:
          $ref: "#/components/schemas/StringWithLengthBetween1And512"
        DomainNameConfigurations:
          $ref: "#/components/schemas/DomainNameConfigurations"
        Tags:
          $ref: "#/components/schemas/Tags"
    DomainNameConfiguration:
      type: object
      properties:
        ApiGatewayDomainName:
          $ref: "#/components/schemas/__string"
        CertificateArn:
          $ref: "#/components/schemas/Arn"
        CertificateName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        CertificateUploadDate:
          $ref: "#/components/schemas/__timestampIso8601"
        EndpointType:
          $ref: "#/components/schemas/EndpointType"
        HostedZoneId:
          $ref: "#/components/schemas/__string"
        SecurityPolicy:
          $ref: "#/components/schemas/SecurityPolicy"
        DomainNameStatus:
          $ref: "#/components/schemas/DomainNameStatus"
        DomainNameStatusMessage:
          $ref: "#/components/schemas/__string"
      description: The domain name configuration.
    CreateIntegrationResponse:
      type: object
      properties:
        ConnectionId:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        CredentialsArn:
          $ref: "#/components/schemas/Arn"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        IntegrationId:
          $ref: "#/components/schemas/Id"
        IntegrationMethod:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        IntegrationResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        IntegrationType:
          $ref: "#/components/schemas/IntegrationType"
        IntegrationUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        PassthroughBehavior:
          $ref: "#/components/schemas/PassthroughBehavior"
        RequestParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        RequestTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        TimeoutInMillis:
          $ref: "#/components/schemas/IntegerWithLengthBetween50And29000"
    StringWithLengthBetween1And512:
      type: string
      description: A string with a length between [1-512].
    StringWithLengthBetween0And32K:
      type: string
      description: A string with a length between [0-32768].
    CreateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        IntegrationResponseId:
          $ref: "#/components/schemas/Id"
        IntegrationResponseKey:
          $ref: "#/components/schemas/SelectionKey"
        ResponseParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        ResponseTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
    CreateModelResponse:
      type: object
      properties:
        ContentType:
          $ref: "#/components/schemas/StringWithLengthBetween1And256"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        ModelId:
          $ref: "#/components/schemas/Id"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        Schema:
          $ref: "#/components/schemas/StringWithLengthBetween0And32K"
    CreateRouteResponse:
      type: object
      properties:
        ApiKeyRequired:
          $ref: "#/components/schemas/__boolean"
        AuthorizationScopes:
          $ref: "#/components/schemas/AuthorizationScopes"
        AuthorizationType:
          $ref: "#/components/schemas/AuthorizationType"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        OperationName:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        RequestModels:
          $ref: "#/components/schemas/RouteModels"
        RequestParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteId:
          $ref: "#/components/schemas/Id"
        RouteKey:
          $ref: "#/components/schemas/SelectionKey"
        RouteResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Target:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    StringWithLengthBetween1And64:
      type: string
      description: A string with a length between [1-64].
    StringWithLengthBetween1And128:
      type: string
      description: A string with a length between [1-128].
    ParameterConstraints:
      type: object
      properties:
        Required:
          $ref: "#/components/schemas/__boolean"
      description: >-
        Validation constraints imposed on parameters of a request (path, query
        string,
         headers).
    CreateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        ResponseModels:
          $ref: "#/components/schemas/RouteModels"
        ResponseParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteResponseId:
          $ref: "#/components/schemas/Id"
        RouteResponseKey:
          $ref: "#/components/schemas/SelectionKey"
    CreateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          $ref: "#/components/schemas/AccessLogSettings"
        ClientCertificateId:
          $ref: "#/components/schemas/Id"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DefaultRouteSettings:
          $ref: "#/components/schemas/RouteSettings"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        LastUpdatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        RouteSettings:
          $ref: "#/components/schemas/RouteSettingsMap"
        StageName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        StageVariables:
          $ref: "#/components/schemas/StageVariablesMap"
        Tags:
          $ref: "#/components/schemas/Tags"
    StringWithLengthBetween1And1024:
      type: string
      description: A string with a length between [1-1024].
    __boolean:
      type: boolean
    LoggingLevel:
      type: string
      enum:
        - ERROR
        - INFO
        - "false"
      description: The logging level.
    __integer:
      type: integer
    __double:
      type: number
      format: double
    RouteSettings:
      type: object
      properties:
        DataTraceEnabled:
          $ref: "#/components/schemas/__boolean"
        DetailedMetricsEnabled:
          $ref: "#/components/schemas/__boolean"
        LoggingLevel:
          $ref: "#/components/schemas/LoggingLevel"
        ThrottlingBurstLimit:
          $ref: "#/components/schemas/__integer"
        ThrottlingRateLimit:
          $ref: "#/components/schemas/__double"
      description: Represents a collection of route settings.
    StringWithLengthBetween0And2048:
      type: string
      description: A string with a length between [0-2048].
    GetApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: "#/components/schemas/__string"
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiKeySelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        DisableSchemaValidation:
          $ref: "#/components/schemas/__boolean"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProtocolType:
          $ref: "#/components/schemas/ProtocolType"
        RouteSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Version:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        Warnings:
          $ref: "#/components/schemas/__listOf__string"
        Tags:
          $ref: "#/components/schemas/Tags"
    GetApiMappingResponse:
      type: object
      properties:
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiMappingId:
          $ref: "#/components/schemas/Id"
        ApiMappingKey:
          $ref: "#/components/schemas/SelectionKey"
        Stage:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    GetApiMappingsResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfApiMapping"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetApisResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfApi"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: "#/components/schemas/Arn"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        AuthorizerResultTtlInSeconds:
          $ref: "#/components/schemas/IntegerWithLengthBetween0And3600"
        AuthorizerType:
          $ref: "#/components/schemas/AuthorizerType"
        AuthorizerUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        IdentitySource:
          $ref: "#/components/schemas/IdentitySourceList"
        IdentityValidationExpression:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProviderArns:
          $ref: "#/components/schemas/ProviderArnList"
    GetAuthorizersResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfAuthorizer"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetDeploymentResponse:
      type: object
      properties:
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        DeploymentStatus:
          $ref: "#/components/schemas/DeploymentStatus"
        DeploymentStatusMessage:
          $ref: "#/components/schemas/__string"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
    GetDeploymentsResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfDeployment"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        DomainName:
          $ref: "#/components/schemas/StringWithLengthBetween1And512"
        DomainNameConfigurations:
          $ref: "#/components/schemas/DomainNameConfigurations"
        Tags:
          $ref: "#/components/schemas/Tags"
    GetDomainNamesResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfDomainName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetIntegrationResponse:
      type: object
      properties:
        ConnectionId:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        CredentialsArn:
          $ref: "#/components/schemas/Arn"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        IntegrationId:
          $ref: "#/components/schemas/Id"
        IntegrationMethod:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        IntegrationResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        IntegrationType:
          $ref: "#/components/schemas/IntegrationType"
        IntegrationUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        PassthroughBehavior:
          $ref: "#/components/schemas/PassthroughBehavior"
        RequestParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        RequestTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        TimeoutInMillis:
          $ref: "#/components/schemas/IntegerWithLengthBetween50And29000"
    GetIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        IntegrationResponseId:
          $ref: "#/components/schemas/Id"
        IntegrationResponseKey:
          $ref: "#/components/schemas/SelectionKey"
        ResponseParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        ResponseTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
    GetIntegrationResponsesResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfIntegrationResponse"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetIntegrationsResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfIntegration"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetModelResponse:
      type: object
      properties:
        ContentType:
          $ref: "#/components/schemas/StringWithLengthBetween1And256"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        ModelId:
          $ref: "#/components/schemas/Id"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        Schema:
          $ref: "#/components/schemas/StringWithLengthBetween0And32K"
    GetModelTemplateResponse:
      type: object
      properties:
        Value:
          $ref: "#/components/schemas/__string"
    GetModelsResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfModel"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetRouteResponse:
      type: object
      properties:
        ApiKeyRequired:
          $ref: "#/components/schemas/__boolean"
        AuthorizationScopes:
          $ref: "#/components/schemas/AuthorizationScopes"
        AuthorizationType:
          $ref: "#/components/schemas/AuthorizationType"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        OperationName:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        RequestModels:
          $ref: "#/components/schemas/RouteModels"
        RequestParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteId:
          $ref: "#/components/schemas/Id"
        RouteKey:
          $ref: "#/components/schemas/SelectionKey"
        RouteResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Target:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    GetRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        ResponseModels:
          $ref: "#/components/schemas/RouteModels"
        ResponseParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteResponseId:
          $ref: "#/components/schemas/Id"
        RouteResponseKey:
          $ref: "#/components/schemas/SelectionKey"
    GetRouteResponsesResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfRouteResponse"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetRoutesResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfRoute"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetStageResponse:
      type: object
      properties:
        AccessLogSettings:
          $ref: "#/components/schemas/AccessLogSettings"
        ClientCertificateId:
          $ref: "#/components/schemas/Id"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DefaultRouteSettings:
          $ref: "#/components/schemas/RouteSettings"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        LastUpdatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        RouteSettings:
          $ref: "#/components/schemas/RouteSettingsMap"
        StageName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        StageVariables:
          $ref: "#/components/schemas/StageVariablesMap"
        Tags:
          $ref: "#/components/schemas/Tags"
    GetStagesResponse:
      type: object
      properties:
        Items:
          $ref: "#/components/schemas/__listOfStage"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    GetTagsResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/__mapOf__string"
    TagResourceResponse:
      type: object
      properties: {}
    UpdateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: "#/components/schemas/__string"
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiKeySelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        DisableSchemaValidation:
          $ref: "#/components/schemas/__boolean"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProtocolType:
          $ref: "#/components/schemas/ProtocolType"
        RouteSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Version:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        Warnings:
          $ref: "#/components/schemas/__listOf__string"
        Tags:
          $ref: "#/components/schemas/Tags"
    UpdateApiMappingResponse:
      type: object
      properties:
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiMappingId:
          $ref: "#/components/schemas/Id"
        ApiMappingKey:
          $ref: "#/components/schemas/SelectionKey"
        Stage:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    UpdateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: "#/components/schemas/Arn"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        AuthorizerResultTtlInSeconds:
          $ref: "#/components/schemas/IntegerWithLengthBetween0And3600"
        AuthorizerType:
          $ref: "#/components/schemas/AuthorizerType"
        AuthorizerUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        IdentitySource:
          $ref: "#/components/schemas/IdentitySourceList"
        IdentityValidationExpression:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProviderArns:
          $ref: "#/components/schemas/ProviderArnList"
    UpdateDeploymentResponse:
      type: object
      properties:
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        DeploymentStatus:
          $ref: "#/components/schemas/DeploymentStatus"
        DeploymentStatusMessage:
          $ref: "#/components/schemas/__string"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
    UpdateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        DomainName:
          $ref: "#/components/schemas/StringWithLengthBetween1And512"
        DomainNameConfigurations:
          $ref: "#/components/schemas/DomainNameConfigurations"
        Tags:
          $ref: "#/components/schemas/Tags"
    UpdateIntegrationResponse:
      type: object
      properties:
        ConnectionId:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        CredentialsArn:
          $ref: "#/components/schemas/Arn"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        IntegrationId:
          $ref: "#/components/schemas/Id"
        IntegrationMethod:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        IntegrationResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        IntegrationType:
          $ref: "#/components/schemas/IntegrationType"
        IntegrationUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        PassthroughBehavior:
          $ref: "#/components/schemas/PassthroughBehavior"
        RequestParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        RequestTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        TimeoutInMillis:
          $ref: "#/components/schemas/IntegerWithLengthBetween50And29000"
    UpdateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        IntegrationResponseId:
          $ref: "#/components/schemas/Id"
        IntegrationResponseKey:
          $ref: "#/components/schemas/SelectionKey"
        ResponseParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        ResponseTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
    UpdateModelResponse:
      type: object
      properties:
        ContentType:
          $ref: "#/components/schemas/StringWithLengthBetween1And256"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        ModelId:
          $ref: "#/components/schemas/Id"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        Schema:
          $ref: "#/components/schemas/StringWithLengthBetween0And32K"
    UpdateRouteResponse:
      type: object
      properties:
        ApiKeyRequired:
          $ref: "#/components/schemas/__boolean"
        AuthorizationScopes:
          $ref: "#/components/schemas/AuthorizationScopes"
        AuthorizationType:
          $ref: "#/components/schemas/AuthorizationType"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        OperationName:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        RequestModels:
          $ref: "#/components/schemas/RouteModels"
        RequestParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteId:
          $ref: "#/components/schemas/Id"
        RouteKey:
          $ref: "#/components/schemas/SelectionKey"
        RouteResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Target:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    UpdateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        ResponseModels:
          $ref: "#/components/schemas/RouteModels"
        ResponseParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteResponseId:
          $ref: "#/components/schemas/Id"
        RouteResponseKey:
          $ref: "#/components/schemas/SelectionKey"
    UpdateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          $ref: "#/components/schemas/AccessLogSettings"
        ClientCertificateId:
          $ref: "#/components/schemas/Id"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DefaultRouteSettings:
          $ref: "#/components/schemas/RouteSettings"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        LastUpdatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        RouteSettings:
          $ref: "#/components/schemas/RouteSettingsMap"
        StageName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        StageVariables:
          $ref: "#/components/schemas/StageVariablesMap"
        Tags:
          $ref: "#/components/schemas/Tags"
    AccessLogSettings:
      type: object
      properties:
        DestinationArn:
          $ref: "#/components/schemas/Arn"
        Format:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
      description: Settings for logging access in a stage.
    Id:
      type: string
      description: The identifier.
    SelectionExpression:
      type: string
      description: An expression used to extract information at runtime. See <a
        href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection
        Expressions</a> for more information.
    __timestampIso8601:
      type: string
      format: date-time
    StringWithLengthBetween0And1024:
      type: string
      description: A string with a length between [0-1024].
    ProtocolType:
      type: string
      enum:
        - WEBSOCKET
      description: ""
    __listOf__string:
      type: array
      items:
        $ref: "#/components/schemas/__string"
    Tags:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StringWithLengthBetween1And1600"
    Api:
      type: object
      required:
        - RouteSelectionExpression
        - ProtocolType
        - Name
      properties:
        ApiEndpoint:
          $ref: "#/components/schemas/__string"
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiKeySelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        DisableSchemaValidation:
          $ref: "#/components/schemas/__boolean"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProtocolType:
          $ref: "#/components/schemas/ProtocolType"
        RouteSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Version:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        Warnings:
          $ref: "#/components/schemas/__listOf__string"
        Tags:
          $ref: "#/components/schemas/Tags"
      description: Represents an API.
    SelectionKey:
      type: string
      description: >-
        After evaulating a selection expression, the result is compared against
        one or
         more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
         associated selection key type.
    ApiMapping:
      type: object
      required:
        - Stage
        - ApiId
      properties:
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiMappingId:
          $ref: "#/components/schemas/Id"
        ApiMappingKey:
          $ref: "#/components/schemas/SelectionKey"
        Stage:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
      description: Represents an API mapping.
    AuthorizationScopes:
      type: array
      description: >-
        A list of authorization scopes configured on a route. The scopes are
        used with a
         COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
         works by matching the route scopes against the scopes parsed from the access token in
         the incoming request. The method invocation is authorized if any route scope matches
         a claimed scope in the access token. Otherwise, the invocation is not authorized.
         When the route scope is configured, the client must provide an access token instead
         of an identity token for authorization purposes.
      items:
        $ref: "#/components/schemas/StringWithLengthBetween1And64"
    AuthorizationType:
      type: string
      enum:
        - NONE
        - AWS_IAM
        - CUSTOM
      description: |-
        The authorization type. Valid values are NONE for open access,
         AWS_IAM for using AWS IAM permissions, and CUSTOM for
         using a Lambda authorizer.
    IntegerWithLengthBetween0And3600:
      type: integer
      description: An integer with a value between [0-3600].
      minimum: -2147483648
      maximum: 2147483647
    AuthorizerType:
      type: string
      enum:
        - REQUEST
      description: |-
        The authorizer type. Currently the only valid value is REQUEST, for a
         Lambda function using incoming request parameters.
    UriWithLengthBetween1And2048:
      type: string
      description: A string representation of a URI with a length between [1-2048].
    IdentitySourceList:
      type: array
      description: >-
        The identity source for which authorization is requested. For the
        REQUEST
         authorizer, this is required when authorization caching is enabled. The value is a
         comma-separated string of one or more mapping expressions of the specified request
         parameters. For example, if an Auth header, a Name query string parameter are defined
         as identity sources, this value is $method.request.header.Auth,
         $method.request.querystring.Name. These parameters will be used to derive
         the authorization caching key and to perform runtime validation of the REQUEST
         authorizer by verifying all of the identity-related request parameters are present,
         not null and non-empty. Only when this is true does the authorizer invoke the
         authorizer Lambda function, otherwise, it returns a 401 Unauthorized
         response without calling the Lambda function. The valid value is a string of
         comma-separated mapping expressions of the specified request parameters. When the
         authorization caching is not enabled, this property is optional.
      items:
        $ref: "#/components/schemas/__string"
    ProviderArnList:
      type: array
      description: For REQUEST authorizer, this is not defined.
      items:
        $ref: "#/components/schemas/Arn"
    Authorizer:
      type: object
      required:
        - Name
      properties:
        AuthorizerCredentialsArn:
          $ref: "#/components/schemas/Arn"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        AuthorizerResultTtlInSeconds:
          $ref: "#/components/schemas/IntegerWithLengthBetween0And3600"
        AuthorizerType:
          $ref: "#/components/schemas/AuthorizerType"
        AuthorizerUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        IdentitySource:
          $ref: "#/components/schemas/IdentitySourceList"
        IdentityValidationExpression:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProviderArns:
          $ref: "#/components/schemas/ProviderArnList"
      description: Represents an authorizer.
    ConnectionType:
      type: string
      enum:
        - INTERNET
        - VPC_LINK
      description: Represents a connection type.
    ContentHandlingStrategy:
      type: string
      enum:
        - CONVERT_TO_BINARY
        - CONVERT_TO_TEXT
      description: Specifies how to handle response payload content type conversions.
    CreateApiMappingRequest:
      type: object
      required:
        - Stage
        - ApiId
      properties:
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiMappingKey:
          $ref: "#/components/schemas/SelectionKey"
        Stage:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    CreateApiRequest:
      type: object
      required:
        - RouteSelectionExpression
        - ProtocolType
        - Name
      properties:
        ApiKeySelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        DisableSchemaValidation:
          $ref: "#/components/schemas/__boolean"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProtocolType:
          $ref: "#/components/schemas/ProtocolType"
        RouteSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Version:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        Tags:
          $ref: "#/components/schemas/Tags"
    CreateAuthorizerRequest:
      type: object
      required:
        - AuthorizerUri
        - AuthorizerType
        - IdentitySource
        - Name
      properties:
        AuthorizerCredentialsArn:
          $ref: "#/components/schemas/Arn"
        AuthorizerResultTtlInSeconds:
          $ref: "#/components/schemas/IntegerWithLengthBetween0And3600"
        AuthorizerType:
          $ref: "#/components/schemas/AuthorizerType"
        AuthorizerUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        IdentitySource:
          $ref: "#/components/schemas/IdentitySourceList"
        IdentityValidationExpression:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProviderArns:
          $ref: "#/components/schemas/ProviderArnList"
    CreateDeploymentRequest:
      type: object
      properties:
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        StageName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    DeploymentStatus:
      type: string
      enum:
        - PENDING
        - FAILED
        - DEPLOYED
      description: Represents a deployment status.
    DomainNameConfigurations:
      type: array
      description: The domain name configurations.
      items:
        $ref: "#/components/schemas/DomainNameConfiguration"
    CreateDomainNameRequest:
      type: object
      required:
        - DomainName
      properties:
        DomainName:
          $ref: "#/components/schemas/StringWithLengthBetween1And512"
        DomainNameConfigurations:
          $ref: "#/components/schemas/DomainNameConfigurations"
        Tags:
          $ref: "#/components/schemas/Tags"
    IntegrationType:
      type: string
      enum:
        - AWS
        - HTTP
        - MOCK
        - HTTP_PROXY
        - AWS_PROXY
      description: Represents an API method integration type.
    PassthroughBehavior:
      type: string
      enum:
        - WHEN_NO_MATCH
        - NEVER
        - WHEN_NO_TEMPLATES
      description: Represents passthrough behavior for an integration response.
    IntegrationParameters:
      type: object
      description: >-
        A key-value map specifying response parameters that are passed to the
        method
         response from the backend. The key is a method response header parameter name and the
         mapped value is an integration response header value, a static value enclosed within
         a pair of single quotes, or a JSON expression from the integration response body. The
         mapping key must match the pattern of method.response.header.{name}, where name is a
         valid and unique header name. The mapped non-static value must match the pattern of
         integration.response.header.{name} or integration.response.body.{JSON-expression},
         where name is a valid and unique response header name and JSON-expression is a valid
         JSON expression without the $ prefix.
      additionalProperties:
        $ref: "#/components/schemas/StringWithLengthBetween1And512"
    TemplateMap:
      type: object
      description: >-
        A mapping of identifier keys to templates. The value is an actual
        template script.
         The key is typically a SelectionKey which is chosen based on evaluating
         a selection expression.
      additionalProperties:
        $ref: "#/components/schemas/StringWithLengthBetween0And32K"
    IntegerWithLengthBetween50And29000:
      type: integer
      description: An integer with a value between [50-29000].
      minimum: -2147483648
      maximum: 2147483647
    CreateIntegrationRequest:
      type: object
      required:
        - IntegrationType
      properties:
        ConnectionId:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        CredentialsArn:
          $ref: "#/components/schemas/Arn"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        IntegrationMethod:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        IntegrationType:
          $ref: "#/components/schemas/IntegrationType"
        IntegrationUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        PassthroughBehavior:
          $ref: "#/components/schemas/PassthroughBehavior"
        RequestParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        RequestTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        TimeoutInMillis:
          $ref: "#/components/schemas/IntegerWithLengthBetween50And29000"
    CreateIntegrationResponseRequest:
      type: object
      required:
        - IntegrationResponseKey
      properties:
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        IntegrationResponseKey:
          $ref: "#/components/schemas/SelectionKey"
        ResponseParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        ResponseTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
    StringWithLengthBetween1And256:
      type: string
      description: A string with a length between [1-256].
    CreateModelRequest:
      type: object
      required:
        - Schema
        - Name
      properties:
        ContentType:
          $ref: "#/components/schemas/StringWithLengthBetween1And256"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        Schema:
          $ref: "#/components/schemas/StringWithLengthBetween0And32K"
    RouteModels:
      type: object
      description: The route models.
      additionalProperties:
        $ref: "#/components/schemas/StringWithLengthBetween1And128"
    RouteParameters:
      type: object
      description: The route parameters.
      additionalProperties:
        $ref: "#/components/schemas/ParameterConstraints"
    CreateRouteRequest:
      type: object
      required:
        - RouteKey
      properties:
        ApiKeyRequired:
          $ref: "#/components/schemas/__boolean"
        AuthorizationScopes:
          $ref: "#/components/schemas/AuthorizationScopes"
        AuthorizationType:
          $ref: "#/components/schemas/AuthorizationType"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        OperationName:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        RequestModels:
          $ref: "#/components/schemas/RouteModels"
        RequestParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteKey:
          $ref: "#/components/schemas/SelectionKey"
        RouteResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Target:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    CreateRouteResponseRequest:
      type: object
      required:
        - RouteResponseKey
      properties:
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        ResponseModels:
          $ref: "#/components/schemas/RouteModels"
        ResponseParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteResponseKey:
          $ref: "#/components/schemas/SelectionKey"
    RouteSettingsMap:
      type: object
      description: The route settings map.
      additionalProperties:
        $ref: "#/components/schemas/RouteSettings"
    StageVariablesMap:
      type: object
      description: The stage variable map.
      additionalProperties:
        $ref: "#/components/schemas/StringWithLengthBetween0And2048"
    CreateStageRequest:
      type: object
      required:
        - StageName
      properties:
        AccessLogSettings:
          $ref: "#/components/schemas/AccessLogSettings"
        ClientCertificateId:
          $ref: "#/components/schemas/Id"
        DefaultRouteSettings:
          $ref: "#/components/schemas/RouteSettings"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        RouteSettings:
          $ref: "#/components/schemas/RouteSettingsMap"
        StageName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        StageVariables:
          $ref: "#/components/schemas/StageVariablesMap"
        Tags:
          $ref: "#/components/schemas/Tags"
    DeleteApiMappingRequest:
      type: object
      properties: {}
    DeleteApiRequest:
      type: object
      properties: {}
    DeleteAuthorizerRequest:
      type: object
      properties: {}
    DeleteDeploymentRequest:
      type: object
      properties: {}
    DeleteDomainNameRequest:
      type: object
      properties: {}
    DeleteIntegrationRequest:
      type: object
      properties: {}
    DeleteIntegrationResponseRequest:
      type: object
      properties: {}
    DeleteModelRequest:
      type: object
      properties: {}
    DeleteRouteRequest:
      type: object
      properties: {}
    DeleteRouteResponseRequest:
      type: object
      properties: {}
    DeleteStageRequest:
      type: object
      properties: {}
    Deployment:
      type: object
      properties:
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        DeploymentStatus:
          $ref: "#/components/schemas/DeploymentStatus"
        DeploymentStatusMessage:
          $ref: "#/components/schemas/__string"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
      description: |-
        An immutable representation of an API that can be called by users. A
         Deployment must be associated with a Stage for it to be
         callable over the internet.
    DomainName:
      type: object
      required:
        - DomainName
      properties:
        ApiMappingSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        DomainName:
          $ref: "#/components/schemas/StringWithLengthBetween1And512"
        DomainNameConfigurations:
          $ref: "#/components/schemas/DomainNameConfigurations"
        Tags:
          $ref: "#/components/schemas/Tags"
      description: Represents a domain name.
    EndpointType:
      type: string
      enum:
        - REGIONAL
        - EDGE
      description: Represents an endpoint type.
    SecurityPolicy:
      type: string
      enum:
        - TLS_1_0
        - TLS_1_2
      description: The Transport Layer Security (TLS) version of the security policy for
        this domain name. The valid values are TLS_1_0 and TLS_1_2.
    DomainNameStatus:
      type: string
      enum:
        - AVAILABLE
        - UPDATING
      description: The status of the domain name migration. The valid values are AVAILABLE
        and UPDATING. If the status is UPDATING, the domain cannot be modified
        further until the existing operation is complete. If it is AVAILABLE,
        the domain can be updated.
    GetApiMappingRequest:
      type: object
      properties: {}
    GetApiMappingsRequest:
      type: object
      properties: {}
    __listOfApiMapping:
      type: array
      items:
        $ref: "#/components/schemas/ApiMapping"
    NextToken:
      type: string
      description: >-
        The next page of elements from this collection. Not valid for the last
        element of
         the collection.
    GetApiRequest:
      type: object
      properties: {}
    GetApisRequest:
      type: object
      properties: {}
    __listOfApi:
      type: array
      items:
        $ref: "#/components/schemas/Api"
    GetAuthorizerRequest:
      type: object
      properties: {}
    GetAuthorizersRequest:
      type: object
      properties: {}
    __listOfAuthorizer:
      type: array
      items:
        $ref: "#/components/schemas/Authorizer"
    GetDeploymentRequest:
      type: object
      properties: {}
    GetDeploymentsRequest:
      type: object
      properties: {}
    __listOfDeployment:
      type: array
      items:
        $ref: "#/components/schemas/Deployment"
    GetDomainNameRequest:
      type: object
      properties: {}
    GetDomainNamesRequest:
      type: object
      properties: {}
    __listOfDomainName:
      type: array
      items:
        $ref: "#/components/schemas/DomainName"
    GetIntegrationRequest:
      type: object
      properties: {}
    GetIntegrationResponseRequest:
      type: object
      properties: {}
    GetIntegrationResponsesRequest:
      type: object
      properties: {}
    __listOfIntegrationResponse:
      type: array
      items:
        $ref: "#/components/schemas/IntegrationResponse"
    GetIntegrationsRequest:
      type: object
      properties: {}
    __listOfIntegration:
      type: array
      items:
        $ref: "#/components/schemas/Integration"
    GetModelRequest:
      type: object
      properties: {}
    GetModelTemplateRequest:
      type: object
      properties: {}
    GetModelsRequest:
      type: object
      properties: {}
    __listOfModel:
      type: array
      items:
        $ref: "#/components/schemas/Model"
    GetRouteRequest:
      type: object
      properties: {}
    GetRouteResponseRequest:
      type: object
      properties: {}
    GetRouteResponsesRequest:
      type: object
      properties: {}
    __listOfRouteResponse:
      type: array
      items:
        $ref: "#/components/schemas/RouteResponse"
    GetRoutesRequest:
      type: object
      properties: {}
    __listOfRoute:
      type: array
      items:
        $ref: "#/components/schemas/Route"
    GetStageRequest:
      type: object
      properties: {}
    GetStagesRequest:
      type: object
      properties: {}
    __listOfStage:
      type: array
      items:
        $ref: "#/components/schemas/Stage"
    Integration:
      type: object
      properties:
        ConnectionId:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        CredentialsArn:
          $ref: "#/components/schemas/Arn"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        IntegrationId:
          $ref: "#/components/schemas/Id"
        IntegrationMethod:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        IntegrationResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        IntegrationType:
          $ref: "#/components/schemas/IntegrationType"
        IntegrationUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        PassthroughBehavior:
          $ref: "#/components/schemas/PassthroughBehavior"
        RequestParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        RequestTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        TimeoutInMillis:
          $ref: "#/components/schemas/IntegerWithLengthBetween50And29000"
      description: Represents an integration.
    IntegrationResponse:
      type: object
      required:
        - IntegrationResponseKey
      properties:
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        IntegrationResponseId:
          $ref: "#/components/schemas/Id"
        IntegrationResponseKey:
          $ref: "#/components/schemas/SelectionKey"
        ResponseParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        ResponseTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
      description: Represents an integration response.
    GetTagsRequest:
      type: object
      properties: {}
    __mapOf__string:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/__string"
    Model:
      type: object
      required:
        - Name
      properties:
        ContentType:
          $ref: "#/components/schemas/StringWithLengthBetween1And256"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        ModelId:
          $ref: "#/components/schemas/Id"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        Schema:
          $ref: "#/components/schemas/StringWithLengthBetween0And32K"
      description: >-
        Represents a data model for an API. See <a
        href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create
        Models and Mapping Templates for Request and Response
         Mappings</a>.
    Route:
      type: object
      required:
        - RouteKey
      properties:
        ApiKeyRequired:
          $ref: "#/components/schemas/__boolean"
        AuthorizationScopes:
          $ref: "#/components/schemas/AuthorizationScopes"
        AuthorizationType:
          $ref: "#/components/schemas/AuthorizationType"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        OperationName:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        RequestModels:
          $ref: "#/components/schemas/RouteModels"
        RequestParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteId:
          $ref: "#/components/schemas/Id"
        RouteKey:
          $ref: "#/components/schemas/SelectionKey"
        RouteResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Target:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
      description: Represents a route.
    RouteResponse:
      type: object
      required:
        - RouteResponseKey
      properties:
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        ResponseModels:
          $ref: "#/components/schemas/RouteModels"
        ResponseParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteResponseId:
          $ref: "#/components/schemas/Id"
        RouteResponseKey:
          $ref: "#/components/schemas/SelectionKey"
      description: Represents a route response.
    Stage:
      type: object
      required:
        - StageName
      properties:
        AccessLogSettings:
          $ref: "#/components/schemas/AccessLogSettings"
        ClientCertificateId:
          $ref: "#/components/schemas/Id"
        CreatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        DefaultRouteSettings:
          $ref: "#/components/schemas/RouteSettings"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        LastUpdatedDate:
          $ref: "#/components/schemas/__timestampIso8601"
        RouteSettings:
          $ref: "#/components/schemas/RouteSettingsMap"
        StageName:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        StageVariables:
          $ref: "#/components/schemas/StageVariablesMap"
        Tags:
          $ref: "#/components/schemas/Tags"
      description: Represents an API stage.
    TagResourceRequest:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/Tags"
    UntagResourceRequest:
      type: object
      properties: {}
    UpdateApiMappingRequest:
      type: object
      required:
        - ApiId
      properties:
        ApiId:
          $ref: "#/components/schemas/Id"
        ApiMappingKey:
          $ref: "#/components/schemas/SelectionKey"
        Stage:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    UpdateApiRequest:
      type: object
      properties:
        ApiKeySelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        DisableSchemaValidation:
          $ref: "#/components/schemas/__boolean"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        RouteSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Version:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
    UpdateAuthorizerRequest:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: "#/components/schemas/Arn"
        AuthorizerResultTtlInSeconds:
          $ref: "#/components/schemas/IntegerWithLengthBetween0And3600"
        AuthorizerType:
          $ref: "#/components/schemas/AuthorizerType"
        AuthorizerUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        IdentitySource:
          $ref: "#/components/schemas/IdentitySourceList"
        IdentityValidationExpression:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        ProviderArns:
          $ref: "#/components/schemas/ProviderArnList"
    UpdateDeploymentRequest:
      type: object
      properties:
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
    UpdateDomainNameRequest:
      type: object
      properties:
        DomainNameConfigurations:
          $ref: "#/components/schemas/DomainNameConfigurations"
    UpdateIntegrationRequest:
      type: object
      properties:
        ConnectionId:
          $ref: "#/components/schemas/StringWithLengthBetween1And1024"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        CredentialsArn:
          $ref: "#/components/schemas/Arn"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        IntegrationMethod:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        IntegrationType:
          $ref: "#/components/schemas/IntegrationType"
        IntegrationUri:
          $ref: "#/components/schemas/UriWithLengthBetween1And2048"
        PassthroughBehavior:
          $ref: "#/components/schemas/PassthroughBehavior"
        RequestParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        RequestTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        TimeoutInMillis:
          $ref: "#/components/schemas/IntegerWithLengthBetween50And29000"
    UpdateIntegrationResponseRequest:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: "#/components/schemas/ContentHandlingStrategy"
        IntegrationResponseKey:
          $ref: "#/components/schemas/SelectionKey"
        ResponseParameters:
          $ref: "#/components/schemas/IntegrationParameters"
        ResponseTemplates:
          $ref: "#/components/schemas/TemplateMap"
        TemplateSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
    UpdateModelRequest:
      type: object
      properties:
        ContentType:
          $ref: "#/components/schemas/StringWithLengthBetween1And256"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        Name:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
        Schema:
          $ref: "#/components/schemas/StringWithLengthBetween0And32K"
    UpdateRouteRequest:
      type: object
      properties:
        ApiKeyRequired:
          $ref: "#/components/schemas/__boolean"
        AuthorizationScopes:
          $ref: "#/components/schemas/AuthorizationScopes"
        AuthorizationType:
          $ref: "#/components/schemas/AuthorizationType"
        AuthorizerId:
          $ref: "#/components/schemas/Id"
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        OperationName:
          $ref: "#/components/schemas/StringWithLengthBetween1And64"
        RequestModels:
          $ref: "#/components/schemas/RouteModels"
        RequestParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteKey:
          $ref: "#/components/schemas/SelectionKey"
        RouteResponseSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        Target:
          $ref: "#/components/schemas/StringWithLengthBetween1And128"
    UpdateRouteResponseRequest:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: "#/components/schemas/SelectionExpression"
        ResponseModels:
          $ref: "#/components/schemas/RouteModels"
        ResponseParameters:
          $ref: "#/components/schemas/RouteParameters"
        RouteResponseKey:
          $ref: "#/components/schemas/SelectionKey"
    UpdateStageRequest:
      type: object
      properties:
        AccessLogSettings:
          $ref: "#/components/schemas/AccessLogSettings"
        ClientCertificateId:
          $ref: "#/components/schemas/Id"
        DefaultRouteSettings:
          $ref: "#/components/schemas/RouteSettings"
        DeploymentId:
          $ref: "#/components/schemas/Id"
        Description:
          $ref: "#/components/schemas/StringWithLengthBetween0And1024"
        RouteSettings:
          $ref: "#/components/schemas/RouteSettingsMap"
        StageVariables:
          $ref: "#/components/schemas/StageVariablesMap"
