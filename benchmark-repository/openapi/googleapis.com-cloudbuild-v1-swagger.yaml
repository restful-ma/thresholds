openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: Creates and manages builds on Google Cloud Platform.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Cloud Build
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://cloudbuild.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: cloudbuild
externalDocs:
  url: https://cloud.google.com/cloud-build/docs/
tags:
  - name: operations
  - name: projects
paths:
  "/v1/projects/{projectId}/builds":
    get:
      description: >-
        Lists previously requested builds.


        Previously requested builds may still be in-progress, or may have finished

        successfully or unsuccessfully.
      operationId: cloudbuild.projects.builds.list
      parameters:
        - description: The raw filter text to constrain the results.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of results to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListBuildsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Starts a build with the specified configuration.


        This method returns a long-running `Operation`, which includes the build

        ID. Pass the build ID to `GetBuild` to determine the build status (such as

        `SUCCESS` or `FAILURE`).
      operationId: cloudbuild.projects.builds.create
      parameters:
        - description: ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Build"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/builds/{id}":
    get:
      description: |-
        Returns information about a previously requested build.

        The `Build` that is returned includes its status (such as `SUCCESS`,
        `FAILURE`, or `WORKING`), and timing information.
      operationId: cloudbuild.projects.builds.get
      parameters:
        - description: ID of the build.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Build"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/projects/{projectId}/builds/{id}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Cancels a build in progress.
      operationId: cloudbuild.projects.builds.cancel
      parameters:
        - description: ID of the build.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelBuildRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Build"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/builds/{id}:retry":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Creates a new build based on the specified build.


        This method creates a new build using the original build request, which may

        or may not result in an identical build.


        For triggered builds:


        * Triggered builds resolve to a precise revision; therefore a retry of a

        triggered build will result in a build that uses the same revision.


        For non-triggered builds that specify `RepoSource`:


        * If the original build built from the tip of a branch, the retried build

        will build from the tip of that branch, which may not be the same revision

        as the original build.

        * If the original build specified a commit sha or revision ID, the retried

        build will use the identical source.


        For builds that specify `StorageSource`:


        * If the original build pulled source from Google Cloud Storage without

        specifying the generation of the object, the new build will use the current

        object, which may be different from the original build source.

        * If the original build pulled source from Cloud Storage and specified the

        generation of the object, the new build will attempt to use the same

        object, which may or may not be available depending on the bucket's

        lifecycle management settings.
      operationId: cloudbuild.projects.builds.retry
      parameters:
        - description: Build ID of the original build.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetryBuildRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers":
    get:
      description: |-
        Lists existing `BuildTrigger`s.

        This API is experimental.
      operationId: cloudbuild.projects.triggers.list
      parameters:
        - description: Number of results to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: ID of the project for which to list BuildTriggers.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListBuildTriggersResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: |-
        Creates a new `BuildTrigger`.

        This API is experimental.
      operationId: cloudbuild.projects.triggers.create
      parameters:
        - description: ID of the project for which to configure automatic builds.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/BuildTrigger"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BuildTrigger"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers/{triggerId}":
    delete:
      description: |-
        Deletes a `BuildTrigger` by its project ID and trigger ID.

        This API is experimental.
      operationId: cloudbuild.projects.triggers.delete
      parameters:
        - description: ID of the project that owns the trigger.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: ID of the `BuildTrigger` to delete.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    get:
      description: |-
        Returns information about a `BuildTrigger`.

        This API is experimental.
      operationId: cloudbuild.projects.triggers.get
      parameters:
        - description: ID of the project that owns the trigger.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: ID of the `BuildTrigger` to get.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BuildTrigger"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    patch:
      description: |-
        Updates a `BuildTrigger` by its project ID and trigger ID.

        This API is experimental.
      operationId: cloudbuild.projects.triggers.patch
      parameters:
        - description: ID of the project that owns the trigger.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: ID of the `BuildTrigger` to update.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/BuildTrigger"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/BuildTrigger"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/projects/{projectId}/triggers/{triggerId}:run":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Runs a `BuildTrigger` at a particular source revision.
      operationId: cloudbuild.projects.triggers.run
      parameters:
        - description: ID of the project.
          in: path
          name: projectId
          required: true
          schema:
            type: string
        - description: ID of the trigger.
          in: path
          name: triggerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepoSource"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}":
    get:
      description: >-
        Gets the latest state of a long-running operation.  Clients can use this

        method to poll the operation result at intervals as recommended by the API

        service.
      operationId: cloudbuild.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - operations
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{name}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation.  The
        server

        makes a best effort to cancel the operation, but success is not

        guaranteed.  If the server doesn't support this method, it returns

        `google.rpc.Code.UNIMPLEMENTED`.  Clients can use

        Operations.GetOperation or

        other methods to check whether the cancellation succeeded or whether the

        operation completed despite cancellation. On successful cancellation,

        the operation is not deleted; instead, it becomes an operation with

        an Operation.error value with a google.rpc.Status.code of 1,

        corresponding to `Code.CANCELLED`.
      operationId: cloudbuild.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - operations
servers:
  - url: https://cloudbuild.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  requestBodies:
    BuildTrigger:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BuildTrigger"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
  schemas:
    ArtifactObjects:
      description: |-
        Files in the workspace to upload to Cloud Storage upon successful
        completion of all build steps.
      properties:
        location:
          description: >-
            Cloud Storage bucket and optional object path, in the form

            "gs://bucket/path/to/somewhere/". (see [Bucket Name

            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).


            Files in the workspace matching any path pattern will be uploaded to

            Cloud Storage with this location as a prefix.
          type: string
        paths:
          description: Path globs used to match files in the build's workspace.
          items:
            type: string
          type: array
        timing:
          $ref: "#/components/schemas/TimeSpan"
      type: object
    ArtifactResult:
      description: |-
        An artifact that was uploaded during a build. This
        is a single record in the artifact manifest JSON file.
      properties:
        fileHash:
          description: The file hash of the artifact.
          items:
            $ref: "#/components/schemas/FileHashes"
          type: array
        location:
          description: |-
            The path of an artifact in a Google Cloud Storage bucket, with the
            generation number. For example,
            `gs://mybucket/path/to/output.jar#generation`.
          type: string
      type: object
    Artifacts:
      description: |-
        Artifacts produced by a build that should be uploaded upon
        successful completion of all build steps.
      properties:
        images:
          description: >-
            A list of images to be pushed upon the successful completion of all
            build

            steps.


            The images will be pushed using the builder service account's credentials.


            The digests of the pushed images will be stored in the Build resource's

            results field.


            If any of the images fail to be pushed, the build is marked FAILURE.
          items:
            type: string
          type: array
        objects:
          $ref: "#/components/schemas/ArtifactObjects"
      type: object
    Build:
      description: >-
        A build resource in the Cloud Build API.


        At a high level, a `Build` describes where to find source code, how to build

        it (for example, the builder image to run on the source), and where to store

        the built artifacts.


        Fields can include the following variables, which will be expanded when the

        build is created:


        - $PROJECT_ID: the project ID of the build.

        - $BUILD_ID: the autogenerated ID of the build.

        - $REPO_NAME: the source repository name specified by RepoSource.

        - $BRANCH_NAME: the branch name specified by RepoSource.

        - $TAG_NAME: the tag name specified by RepoSource.

        - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or
          resolved from the specified branch or tag.
        - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
      properties:
        artifacts:
          $ref: "#/components/schemas/Artifacts"
        buildTriggerId:
          description: >-
            Output only. The ID of the `BuildTrigger` that triggered this build,
            if it

            was triggered automatically.
          type: string
        createTime:
          description: Output only. Time at which the request to create the build was
            received.
          format: google-datetime
          type: string
        finishTime:
          description: >-
            Output only. Time at which execution of the build was finished.


            The difference between finish_time and start_time is the duration of the

            build's execution.
          format: google-datetime
          type: string
        id:
          description: Output only. Unique identifier of the build.
          type: string
        images:
          description: >-
            A list of images to be pushed upon the successful completion of all
            build

            steps.


            The images are pushed using the builder service account's credentials.


            The digests of the pushed images will be stored in the `Build` resource's

            results field.


            If any of the images fail to be pushed, the build status is marked

            `FAILURE`.
          items:
            type: string
          type: array
        logUrl:
          description: Output only. URL to logs for this build in Google Cloud Console.
          type: string
        logsBucket:
          description: >-
            Google Cloud Storage bucket where logs should be written (see

            [Bucket Name

            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).

            Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
          type: string
        options:
          $ref: "#/components/schemas/BuildOptions"
        projectId:
          description: Output only. ID of the project.
          type: string
        results:
          $ref: "#/components/schemas/Results"
        secrets:
          description: Secrets to decrypt using Cloud Key Management Service.
          items:
            $ref: "#/components/schemas/Secret"
          type: array
        source:
          $ref: "#/components/schemas/Source"
        sourceProvenance:
          $ref: "#/components/schemas/SourceProvenance"
        startTime:
          description: Output only. Time at which execution of the build was started.
          format: google-datetime
          type: string
        status:
          description: Output only. Status of the build.
          enum:
            - STATUS_UNKNOWN
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
          type: string
        statusDetail:
          description: Output only. Customer-readable message about the current status.
          type: string
        steps:
          description: Required. The operations to be performed on the workspace.
          items:
            $ref: "#/components/schemas/BuildStep"
          type: array
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
          type: object
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
          type: array
        timeout:
          description: >-
            Amount of time that this build should be allowed to run, to second

            granularity. If this amount of time elapses, work on the build will cease

            and the build status will be `TIMEOUT`.


            Default time is ten minutes.
          format: google-duration
          type: string
        timing:
          additionalProperties:
            $ref: "#/components/schemas/TimeSpan"
          description: >-
            Output only. Stores timing information for phases of the build.
            Valid keys

            are:


            * BUILD: time to execute all build steps

            * PUSH: time to push all specified images.

            * FETCHSOURCE: time to fetch source.


            If the build does not specify source or images,

            these keys will not be included.
          type: object
      type: object
    BuildOperationMetadata:
      description: Metadata for build operations.
      properties:
        build:
          $ref: "#/components/schemas/Build"
      type: object
    BuildOptions:
      description: Optional arguments to enable specific features of builds.
      properties:
        diskSizeGb:
          description: >-
            Requested disk size for the VM that runs the build. Note that this
            is *NOT*

            "disk free"; some of the space will be used by the operating system and

            build utilities. Also note that this is the minimum disk size that will be

            allocated for the build -- the build may run with a larger disk than

            requested. At present, the maximum disk size is 1000GB; builds that request

            more than the maximum are rejected with an error.
          format: int64
          type: string
        env:
          description: >-
            A list of global environment variable definitions that will exist
            for all

            build steps in this build. If a variable is defined in both globally and in

            a build step, the variable will use the build step value.


            The elements are of the form "KEY=VALUE" for the environment variable "KEY"

            being given the value "VALUE".
          items:
            type: string
          type: array
        logStreamingOption:
          description: |-
            Option to define build log streaming behavior to Google Cloud
            Storage.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
          type: string
        logging:
          description: >-
            Option to specify the logging mode, which determines where the logs
            are

            stored.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
          type: string
        machineType:
          description: Compute Engine machine type on which to run the build.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
          type: string
        requestedVerifyOption:
          description: Requested verifiability options.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          type: string
        secretEnv:
          description: >-
            A list of global environment variables, which are encrypted using a
            Cloud

            Key Management Service crypto key. These values must be specified in the

            build's `Secret`. These variables will be available to all build steps

            in this build.
          items:
            type: string
          type: array
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          items:
            enum:
              - NONE
              - SHA256
              - MD5
            type: string
          type: array
        substitutionOption:
          description: >-
            Option to specify behavior when there is an error in the
            substitution

            checks.
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          type: string
        volumes:
          description: >-
            Global list of volumes to mount for ALL build steps


            Each volume is created as an empty volume prior to starting the build

            process. Upon completion of the build, volumes and their contents are

            discarded. Global volume names and paths cannot conflict with the volumes

            defined a build step.


            Using a global volume in a build with only one step is not valid as

            it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/Volume"
          type: array
        workerPool:
          description: >-
            Option to specify a `WorkerPool` for the build. User specifies the
            pool

            with the format "[WORKERPOOL_PROJECT_ID]/[WORKERPOOL_NAME]".

            This is an experimental field.
          type: string
      type: object
    BuildStep:
      description: A step in the build pipeline.
      properties:
        args:
          description: >-
            A list of arguments that will be presented to the step when it is
            started.


            If the image used to run the step's container has an entrypoint, the `args`

            are used as arguments to that entrypoint. If the image does not define

            an entrypoint, the first element in args is used as the entrypoint,

            and the remainder will be used as arguments.
          items:
            type: string
          type: array
        dir:
          description: >-
            Working directory to use when running this step's container.


            If this value is a relative path, it is relative to the build's working

            directory. If this value is absolute, it may be outside the build's working

            directory, in which case the contents of the path may not be persisted

            across build step executions, unless a `volume` for that path is specified.


            If the build specifies a `RepoSource` with `dir` and a step with a `dir`,

            which specifies an absolute path, the `RepoSource` `dir` is ignored for

            the step's execution.
          type: string
        entrypoint:
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint.

            If unset, the image's default entrypoint is used.
          type: string
        env:
          description: >-
            A list of environment variable definitions to be used when running a
            step.


            The elements are of the form "KEY=VALUE" for the environment variable "KEY"

            being given the value "VALUE".
          items:
            type: string
          type: array
        id:
          description: |-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
          type: string
        name:
          description: >-
            Required. The name of the container image that will run this
            particular

            build step.


            If the image is available in the host's Docker daemon's cache, it

            will be run directly. If not, the host will attempt to pull the image

            first, using the builder service account's credentials if necessary.


            The Docker daemon's cache will already have the latest versions of all of

            the officially supported build steps

            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).

            The Docker daemon will also have cached many of the layers for some popular

            images, like "ubuntu", "debian", but they will be refreshed at the time you

            attempt to use them.


            If you built an image in a previous build step, it will be stored in the

            host's Docker daemon's cache and is available to use as the name for a

            later build step.
          type: string
        pullTiming:
          $ref: "#/components/schemas/TimeSpan"
        secretEnv:
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key

            Management Service crypto key. These values must be specified in the

            build's `Secret`.
          items:
            type: string
          type: array
        status:
          description: >-
            Output only. Status of the build step. At this time, build step
            status is

            only updated on build completion; step status is not updated in real-time

            as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
          type: string
        timeout:
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no

            time limit and will be allowed to continue to run until either it completes

            or the build itself times out.
          format: google-duration
          type: string
        timing:
          $ref: "#/components/schemas/TimeSpan"
        volumes:
          description: >-
            List of volumes to mount into the build step.


            Each volume is created as an empty volume prior to execution of the

            build step. Upon completion of the build, volumes and their contents are

            discarded.


            Using a named volume in only one step is not valid as it is indicative

            of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/Volume"
          type: array
        waitFor:
          description: >-
            The ID(s) of the step(s) that this build step depends on.

            This build step will not start until all the build steps in `wait_for`

            have completed successfully. If `wait_for` is empty, this build step will

            start when all previous build steps in the `Build.Steps` list have

            completed successfully.
          items:
            type: string
          type: array
      type: object
    BuildTrigger:
      description: |-
        Configuration for an automated build in response to source repository
        changes.
      properties:
        build:
          $ref: "#/components/schemas/Build"
        createTime:
          description: Output only. Time when the trigger was created.
          format: google-datetime
          type: string
        description:
          description: Human-readable description of this trigger.
          type: string
        disabled:
          description: If true, the trigger will never result in a build.
          type: boolean
        filename:
          description: |-
            Path, from the source root, to a file whose contents is used for the
            template.
          type: string
        github:
          $ref: "#/components/schemas/GitHubEventsConfig"
        id:
          description: Output only. Unique identifier of the trigger.
          type: string
        ignoredFiles:
          description: |-
            ignored_files and included_files are file glob matches using
            http://godoc/pkg/path/filepath#Match extended with support for "**".

            If ignored_files and changed files are both empty, then they are
            not used to determine whether or not to trigger a build.

            If ignored_files is not empty, then we ignore any files that match
            any of the ignored_file globs. If the change has no files that are
            outside of the ignored_files globs, then we do not trigger a build.
          items:
            type: string
          type: array
        includedFiles:
          description: |-
            If any of the files altered in the commit pass the ignored_files
            filter and included_files is empty, then as far as this filter is
            concerned, we should trigger the build.

            If any of the files altered in the commit pass the ignored_files
            filter and included_files is not empty, then we make sure that at
            least one of those files matches a included_files glob. If not,
            then we do not trigger a build.
          items:
            type: string
          type: array
        name:
          description: User assigned name of the trigger. Must be unique within the project.
          type: string
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions data for Build resource.
          type: object
        tags:
          description: Tags for annotation of a `BuildTrigger`
          items:
            type: string
          type: array
        triggerTemplate:
          $ref: "#/components/schemas/RepoSource"
      type: object
    BuiltImage:
      description: An image built by the pipeline.
      properties:
        digest:
          description: Docker Registry 2.0 digest.
          type: string
        name:
          description: >-
            Name used to push the container image to Google Container Registry,
            as

            presented to `docker push`.
          type: string
        pushTiming:
          $ref: "#/components/schemas/TimeSpan"
      type: object
    CancelBuildRequest:
      description: Request to cancel an ongoing build.
      properties: {}
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    FileHashes:
      description: >-
        Container message for hashes of byte content of files, used in

        SourceProvenance messages to verify integrity of source input to the build.
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: "#/components/schemas/Hash"
          type: array
      type: object
    GitHubEventsConfig:
      description: >-
        GitHubEventsConfig describes the configuration of a trigger that creates
        a

        build whenever a GitHub event is received.


        This message is experimental.
      properties:
        installationId:
          description: The installationID that emits the GitHub event.
          format: int64
          type: string
        name:
          description: >-
            Name of the repository. For example: The name for

            https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
          type: string
        owner:
          description: |-
            Owner of the repository. For example: The owner for
            https://github.com/googlecloudplatform/cloud-builders is
            "googlecloudplatform".
          type: string
        pullRequest:
          $ref: "#/components/schemas/PullRequestFilter"
        push:
          $ref: "#/components/schemas/PushFilter"
      type: object
    Hash:
      description: Container message for hash values.
      properties:
        type:
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
            - MD5
          type: string
        value:
          description: The hash value.
          format: byte
          type: string
      type: object
    ListBuildTriggersResponse:
      description: Response containing existing `BuildTriggers`.
      properties:
        nextPageToken:
          description: Token to receive the next page of results.
          type: string
        triggers:
          description: "`BuildTriggers` for the project, sorted by `create_time`
            descending."
          items:
            $ref: "#/components/schemas/BuildTrigger"
          type: array
      type: object
    ListBuildsResponse:
      description: Response including listed builds.
      properties:
        builds:
          description: Builds will be sorted by `create_time`, descending.
          items:
            $ref: "#/components/schemas/Build"
          type: array
        nextPageToken:
          description: Token to receive the next page of results.
          type: string
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: A list of operations that matches the specified filter in the
            request.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
      type: object
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a

        network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress.

            If `true`, the operation is completed, and either `error` or `response` is

            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation.  It
            typically

            contains progress information and common metadata such as create time.

            Some services might not provide such metadata.  Any method that returns a

            long-running operation should document the metadata type, if any.
          type: object
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that

            originally returns it. If you use the default HTTP mapping, the

            `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The normal response of the operation in case of success.  If the
            original

            method returns no data on success, such as `Delete`, the response is

            `google.protobuf.Empty`.  If the original method is standard

            `Get`/`Create`/`Update`, the response should be the resource.  For other

            methods, the response should have the type `XxxResponse`, where `Xxx`

            is the original method name.  For example, if the original method name

            is `TakeSnapshot()`, the inferred response type is

            `TakeSnapshotResponse`.
          type: object
      type: object
    PullRequestFilter:
      description: |-
        PullRequestFilter contains filter properties for matching GitHub Pull
        Requests.
      properties:
        branch:
          description: >-
            Regex of branches to match.


            The syntax of the regular expressions accepted is the syntax accepted by

            RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        commentControl:
          description: >-
            Whether to block builds on a "/gcbrun" comment from a repository
            owner or

            collaborator.
          enum:
            - COMMENTS_DISABLED
            - COMMENTS_ENABLED
          type: string
      type: object
    PushFilter:
      description: Push contains filter properties for matching GitHub git pushes.
      properties:
        branch:
          description: >-
            Regexes matching branches to build.


            The syntax of the regular expressions accepted is the syntax accepted by

            RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        tag:
          description: >-
            Regexes matching tags to build.


            The syntax of the regular expressions accepted is the syntax accepted by

            RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
      type: object
    RepoSource:
      description: Location of the source in a Google Cloud Source Repository.
      properties:
        branchName:
          description: >-
            Regex matching branches to build.


            The syntax of the regular expressions accepted is the syntax accepted by

            RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        dir:
          description: >-
            Directory, relative to the source root, in which to run the build.


            This must be a relative path. If a step's `dir` is specified and is an

            absolute path, this value is ignored for that step's execution.
          type: string
        projectId:
          description: >-
            ID of the project that owns the Cloud Source Repository. If omitted,
            the

            project ID requesting the build is assumed.
          type: string
        repoName:
          description: >-
            Name of the Cloud Source Repository. If omitted, the name "default"
            is

            assumed.
          type: string
        tagName:
          description: >-
            Regex matching tags to build.


            The syntax of the regular expressions accepted is the syntax accepted by

            RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
      type: object
    Results:
      description: Artifacts created by the build pipeline.
      properties:
        artifactManifest:
          description: Path to the artifact manifest. Only populated when artifacts are
            uploaded.
          type: string
        artifactTiming:
          $ref: "#/components/schemas/TimeSpan"
        buildStepImages:
          description: |-
            List of build step digests, in the order corresponding to build step
            indices.
          items:
            type: string
          type: array
        buildStepOutputs:
          description: >-
            List of build step outputs, produced by builder images, in the order

            corresponding to build step indices.


            [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)

            can produce this output by writing to `$BUILDER_OUTPUT/output`.

            Only the first 4KB of data is stored.
          items:
            format: byte
            type: string
          type: array
        images:
          description: Container images that were built as a part of the build.
          items:
            $ref: "#/components/schemas/BuiltImage"
          type: array
        numArtifacts:
          description: Number of artifacts uploaded. Only populated when artifacts are
            uploaded.
          format: int64
          type: string
      type: object
    RetryBuildRequest:
      description: Specifies a build to retry.
      properties: {}
      type: object
    Secret:
      description: |-
        Pairs a set of secret environment variables containing encrypted
        values with the Cloud KMS key to use to decrypt the value.
      properties:
        kmsKeyName:
          description: Cloud KMS key name to use to decrypt these envs.
          type: string
        secretEnv:
          additionalProperties:
            format: byte
            type: string
          description: >-
            Map of environment variable name to its encrypted value.


            Secret environment variables must be unique across all of a build's

            secrets, and must be used by at least one build step. Values can be at most

            64 KB in size. There can be at most 100 secret values across all of a

            build's secrets.
          type: object
      type: object
    Source:
      description: Location of the source in a supported storage service.
      properties:
        repoSource:
          $ref: "#/components/schemas/RepoSource"
        storageSource:
          $ref: "#/components/schemas/StorageSource"
      type: object
    SourceProvenance:
      description: >-
        Provenance of the source. Ways to find the original source, or verify
        that

        some source was used for this build.
      properties:
        fileHashes:
          additionalProperties:
            $ref: "#/components/schemas/FileHashes"
          description: >-
            Output only. Hash(es) of the build source, which can be used to
            verify that

            the original source integrity was maintained in the build. Note that

            `FileHashes` will only be populated if `BuildOptions` has requested a

            `SourceProvenanceHash`.


            The keys to this map are file paths used as build source and the values

            contain the hash values for those files.


            If the build source came in a single package such as a gzipped tarfile

            (`.tar.gz`), the `FileHash` will be for the single path to that file.
          type: object
        resolvedRepoSource:
          $ref: "#/components/schemas/RepoSource"
        resolvedStorageSource:
          $ref: "#/components/schemas/StorageSource"
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    StorageSource:
      description: Location of the source in an archive file in Google Cloud Storage.
      properties:
        bucket:
          description: >-
            Google Cloud Storage bucket containing the source (see

            [Bucket Name

            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: |-
            Google Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
          format: int64
          type: string
        object:
          description: >-
            Google Cloud Storage object containing the source.


            This object must be a gzipped archive file (`.tar.gz`) containing source to

            build.
          type: string
      type: object
    TimeSpan:
      description: Start and end times for a build execution phase.
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          description: Start of time span.
          format: google-datetime
          type: string
      type: object
    Volume:
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps

        in order to persist files across build step execution.
      properties:
        name:
          description: >-
            Name of the volume to mount.


            Volume names must be unique per build step and must be valid names for

            Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: >-
            Path at which to mount the volume.


            Paths must be absolute and cannot conflict with other volume paths on the

            same build step or with certain reserved volume paths.
          type: string
      type: object
