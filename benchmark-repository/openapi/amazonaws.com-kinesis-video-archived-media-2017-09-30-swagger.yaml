openapi: 3.0.0
info:
  version: 2017-09-30
  x-release: v4
  title: Amazon Kinesis Video Streams Archived Media
  description: <p/>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: kinesis-video-archived-media
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-archived-media-2017-09-30.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/kinesisvideo/
security:
  - hmac: []
paths:
  /getDASHStreamingSessionURL:
    post:
      operationId: GetDASHStreamingSessionURL
      description: "<p>Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH) URL
        for the stream. You can then open the URL in a media player to view the
        stream contents.</p> <p>Both the <code>StreamName</code> and the
        <code>StreamARN</code> parameters are optional, but you must specify
        either the <code>StreamName</code> or the <code>StreamARN</code> when
        invoking this API operation.</p> <p>An Amazon Kinesis video stream has
        the following requirements for providing data through MPEG-DASH:</p>
        <ul> <li> <p>The media must contain h.264 or h.265 encoded video and,
        optionally, AAC or G.711 encoded audio. Specifically, the codec id of
        track 1 should be <code>V_MPEG/ISO/AVC</code> (for h.264) or
        V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec id of track 2 should
        be <code>A_AAC</code> (for AAC) or A_MS/ACM (for G.711).</p> </li> <li>
        <p>Data retention must be greater than 0.</p> </li> <li> <p>The video
        track of each fragment must contain codec private data in the Advanced
        Video Coding (AVC) for H.264 format and HEVC for H.265 format. For more
        information, see <a
        href=\"https://www.iso.org/standard/55980.html\">MPEG-4 specification
        ISO/IEC 14496-15</a>. For information about adapting stream data to a
        given format, see <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/produce\
        r-reference-nal.html\">NAL Adaptation Flags</a>.</p> </li> <li> <p>The
        audio track (if present) of each fragment must contain codec private
        data in the AAC format (<a
        href=\"https://www.iso.org/standard/43345.html\">AAC specification
        ISO/IEC 13818-7</a>) or the <a
        href=\"http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.h\
        tml\">MS Wave format</a>.</p> </li> </ul> <p>The following procedure
        shows how to use MPEG-DASH with Kinesis Video Streams:</p> <ol> <li>
        <p>Get an endpoint using <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_Get\
        DataEndpoint.html\">GetDataEndpoint</a>, specifying
        <code>GET_DASH_STREAMING_SESSION_URL</code> for the <code>APIName</code>
        parameter.</p> </li> <li> <p>Retrieve the MPEG-DASH URL using
        <code>GetDASHStreamingSessionURL</code>. Kinesis Video Streams creates
        an MPEG-DASH streaming session to be used for accessing content in a
        stream using the MPEG-DASH protocol.
        <code>GetDASHStreamingSessionURL</code> returns an authenticated URL
        (that includes an encrypted session token) for the session's MPEG-DASH
        <i>manifest</i> (the root resource needed for streaming with
        MPEG-DASH).</p> <note> <p>Don't share or store this token where an
        unauthorized entity could access it. The token provides access to the
        content of the stream. Safeguard the token with the same measures that
        you would use with your AWS credentials.</p> </note> <p>The media that
        is made available through the manifest consists only of the requested
        stream, time range, and format. No other media data (such as frames
        outside the requested window or alternate bitrates) is made
        available.</p> </li> <li> <p>Provide the URL (containing the encrypted
        session token) for the MPEG-DASH manifest to a media player that
        supports the MPEG-DASH protocol. Kinesis Video Streams makes the
        initialization fragment, and media fragments available through the
        manifest URL. The initialization fragment contains the codec private
        data for the stream, and other data needed to set up the video or audio
        decoder and renderer. The media fragments contain encoded video frames
        or encoded audio samples.</p> </li> <li> <p>The media player receives
        the authenticated URL and requests stream metadata and media data
        normally. When the media player requests data, it calls the following
        actions:</p> <ul> <li> <p> <b>GetDASHManifest:</b> Retrieves an MPEG
        DASH manifest, which contains the metadata for the media that you want
        to playback.</p> </li> <li> <p> <b>GetMP4InitFragment:</b> Retrieves the
        MP4 initialization fragment. The media player typically loads the
        initialization fragment before loading any media fragments. This
        fragment contains the \"<code>fytp</code>\" and \"<code>moov</code>\"
        MP4 atoms, and the child atoms that are needed to initialize the media
        player decoder.</p> <p>The initialization fragment does not correspond
        to a fragment in a Kinesis video stream. It contains only the codec
        private data for the stream and respective track, which the media player
        needs to decode the media frames.</p> </li> <li> <p>
        <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These
        fragments contain the \"<code>moof</code>\" and \"<code>mdat</code>\"
        MP4 atoms and their child atoms, containing the encoded fragment's media
        frames and their timestamps. </p> <note> <p>After the first media
        fragment is made available in a streaming session, any fragments that
        don't contain the same codec private data cause an error to be returned
        when those different media fragments are loaded. Therefore, the codec
        private data should not change between fragments in a session. This also
        means that the session fails if the fragments in a stream change from
        having only video to having both audio and video.</p> </note> <p>Data
        retrieved with this action is billable. See <a
        href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\">Pricing<\
        /a> for details.</p> </li> </ul> </li> </ol> <note> <p>The following
        restrictions apply to MPEG-DASH sessions:</p> <ul> <li> <p>A streaming
        session URL should not be shared between players. The service might
        throttle a session if multiple media players are sharing it. For
        connection limits, see <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.\
        html\">Kinesis Video Streams Limits</a>.</p> </li> <li> <p>A Kinesis
        video stream can have a maximum of ten active MPEG-DASH streaming
        sessions. If a new session is created when the maximum number of
        sessions is already active, the oldest (earliest created) session is
        closed. The number of active <code>GetMedia</code> connections on a
        Kinesis video stream does not count against this limit, and the number
        of active MPEG-DASH sessions does not count against the active
        <code>GetMedia</code> connection limit.</p> <note> <p>The maximum limits
        for active HLS and MPEG-DASH streaming sessions are independent of each
        other. </p> </note> </li> </ul> </note> <p>You can monitor the amount of
        data that the media player consumes by monitoring the
        <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric.
        For information about using CloudWatch to monitor Kinesis Video Streams,
        see <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitor\
        ing.html\">Monitoring Kinesis Video Streams</a>. For pricing
        information, see <a
        href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\">Amazon
        Kinesis Video Streams Pricing</a> and <a
        href=\"https://aws.amazon.com/pricing/\">AWS Pricing</a>. Charges for
        both HLS sessions and outgoing AWS data apply.</p> <p>For more
        information about HLS, see <a
        href=\"https://developer.apple.com/streaming/\">HTTP Live Streaming</a>
        on the <a href=\"https://developer.apple.com\">Apple Developer
        site</a>.</p> <important> <p>If an error is thrown after invoking a
        Kinesis Video Streams archived media API, in addition to the HTTP status
        code and the response body, it includes the following pieces of
        information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code> HTTP header
        – contains a more specific error type in addition to what the HTTP
        status code provides. </p> </li> <li> <p> <code>x-amz-RequestId</code>
        HTTP header – if you want to report an issue to AWS, the support team
        can better diagnose the problem if given the Request Id.</p> </li> </ul>
        <p>Both the HTTP status code and the ErrorType header can be utilized to
        make programmatic decisions about whether errors are retry-able and
        under what conditions, as well as provide information on what actions
        the client programmer might need to take in order to successfully try
        again.</p> <p>For more information, see the <b>Errors</b> section at the
        bottom of this topic, as well as <a
        href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/Common\
        Errors.html\">Common Errors</a>. </p> </important>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDASHStreamingSessionURLOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ClientLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientLimitExceededException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UnsupportedStreamMediaTypeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedStreamMediaTypeException"
        "485":
          description: NoDataRetentionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoDataRetentionException"
        "486":
          description: MissingCodecPrivateDataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingCodecPrivateDataException"
        "487":
          description: InvalidCodecPrivateDataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCodecPrivateDataException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  description: <p>The name of the stream for which to retrieve the
                    MPEG-DASH manifest URL.</p> <p>You must specify either the
                    <code>StreamName</code> or the <code>StreamARN</code>.</p>
                  type: string
                  pattern: "[a-zA-Z0-9_.-]+"
                  minLength: 1
                  maxLength: 256
                StreamARN:
                  description: <p>The Amazon Resource Name (ARN) of the stream for which to
                    retrieve the MPEG-DASH manifest URL.</p> <p>You must specify
                    either the <code>StreamName</code> or the
                    <code>StreamARN</code>.</p>
                  type: string
                  pattern: arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+
                  minLength: 1
                  maxLength: 1024
                PlaybackMode:
                  description: '<p>Whether to retrieve live, live replay, or archived,
                    on-demand data.</p> <p>Features of the three types of
                    sessions include the following:</p> <ul> <li> <p> <b>
                    <code>LIVE</code> </b>: For sessions of this type, the
                    MPEG-DASH manifest is continually updated with the latest
                    fragments as they become available. We recommend that the
                    media player retrieve a new manifest on a one-second
                    interval. When this type of session is played in a media
                    player, the user interface typically displays a "live"
                    notification, with no scrubber control for choosing the
                    position in the playback window to display.</p> <note> <p>In
                    <code>LIVE</code> mode, the newest available fragments are
                    included in an MPEG-DASH manifest, even if there is a gap
                    between fragments (that is, if a fragment is missing). A gap
                    like this might cause a media player to halt or cause a jump
                    in playback. In this mode, fragments are not added to the
                    MPEG-DASH manifest if they are older than the newest
                    fragment in the playlist. If the missing fragment becomes
                    available after a subsequent fragment is added to the
                    manifest, the older fragment is not added, and the gap is
                    not filled.</p> </note> </li> <li> <p> <b>
                    <code>LIVE_REPLAY</code> </b>: For sessions of this type,
                    the MPEG-DASH manifest is updated similarly to how it is
                    updated for <code>LIVE</code> mode except that it starts by
                    including fragments from a given start time. Instead of
                    fragments being added as they are ingested, fragments are
                    added as the duration of the next fragment elapses. For
                    example, if the fragments in the session are two seconds
                    long, then a new fragment is added to the manifest every two
                    seconds. This mode is useful to be able to start playback
                    from when an event is detected and continue live streaming
                    media that has not yet been ingested as of the time of the
                    session creation. This mode is also useful to stream
                    previously archived media without being limited by the 1,000
                    fragment limit in the <code>ON_DEMAND</code> mode. </p>
                    </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions
                    of this type, the MPEG-DASH manifest contains all the
                    fragments for the session, up to the number that is
                    specified in <code>MaxMediaPlaylistFragmentResults</code>.
                    The manifest must be retrieved only once for each session.
                    When this type of session is played in a media player, the
                    user interface typically displays a scrubber control for
                    choosing the position in the playback window to display.</p>
                    </li> </ul> <p>In all playback modes, if
                    <code>FragmentSelectorType</code> is
                    <code>PRODUCER_TIMESTAMP</code>, and if there are multiple
                    fragments with the same start timestamp, the fragment that
                    has the larger fragment number (that is, the newer fragment)
                    is included in the MPEG-DASH manifest. The other fragments
                    are not included. Fragments that have different timestamps
                    but have overlapping durations are still included in the
                    MPEG-DASH manifest. This can lead to unexpected behavior in
                    the media player.</p> <p>The default is
                    <code>LIVE</code>.</p>'
                  type: string
                  enum:
                    - LIVE
                    - LIVE_REPLAY
                    - ON_DEMAND
                DisplayFragmentTimestamp:
                  description: <p>Per the MPEG-DASH specification, the wall-clock time of
                    fragments in the manifest file can be derived using
                    attributes in the manifest itself. However, typically,
                    MPEG-DASH compatible media players do not properly handle
                    gaps in the media timeline. Kinesis Video Streams adjusts
                    the media timeline in the manifest file to enable playback
                    of media with discontinuities. Therefore, the wall-clock
                    time derived from the manifest file may be inaccurate. If
                    DisplayFragmentTimestamp is set to <code>ALWAYS</code>, the
                    accurate fragment timestamp is added to each S element in
                    the manifest file with the attribute name “kvs:ts”. A custom
                    MPEG-DASH media player is necessary to leverage this custom
                    attribute.</p> <p>The default value is <code>NEVER</code>.
                    When <a>DASHFragmentSelector</a> is
                    <code>SERVER_TIMESTAMP</code>, the timestamps will be the
                    server start timestamps. Similarly, when
                    <a>DASHFragmentSelector</a> is
                    <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the
                    producer start timestamps. </p>
                  type: string
                  enum:
                    - ALWAYS
                    - NEVER
                DisplayFragmentNumber:
                  description: <p>Fragments are identified in the manifest file based on
                    their sequence number in the session. If
                    DisplayFragmentNumber is set to <code>ALWAYS</code>, the
                    Kinesis Video Streams fragment number is added to each S
                    element in the manifest file with the attribute name
                    “kvs:fn”. These fragment numbers can be used for logging or
                    for use with other APIs (e.g. <code>GetMedia</code> and
                    <code>GetMediaForFragmentList</code>). A custom MPEG-DASH
                    media player is necessary to leverage these this custom
                    attribute.</p> <p>The default value is
                    <code>NEVER</code>.</p>
                  type: string
                  enum:
                    - ALWAYS
                    - NEVER
                DASHFragmentSelector:
                  description: "Contains the range of timestamps for the requested media,
                    and the source of the timestamps. "
                  type: object
                  properties:
                    FragmentSelectorType:
                      $ref: "#/components/schemas/DASHFragmentSelectorType"
                    TimestampRange:
                      $ref: "#/components/schemas/DASHTimestampRange"
                Expires:
                  description: <p>The time in seconds until the requested session expires.
                    This value can be between 300 (5 minutes) and 43200 (12
                    hours).</p> <p>When a session expires, no new calls to
                    <code>GetDashManifest</code>,
                    <code>GetMP4InitFragment</code>, or
                    <code>GetMP4MediaFragment</code> can be made for that
                    session.</p> <p>The default is 300 (5 minutes).</p>
                  type: integer
                  minimum: 300
                  maximum: 43200
                MaxManifestFragmentResults:
                  description: <p>The maximum number of fragments that are returned in the
                    MPEG-DASH manifest.</p> <p>When the
                    <code>PlaybackMode</code> is <code>LIVE</code>, the most
                    recent fragments are returned up to this value. When the
                    <code>PlaybackMode</code> is <code>ON_DEMAND</code>, the
                    oldest fragments are returned, up to this maximum
                    number.</p> <p>When there are a higher number of fragments
                    available in a live MPEG-DASH manifest, video players often
                    buffer content before starting playback. Increasing the
                    buffer size increases the playback latency, but it decreases
                    the likelihood that rebuffering will occur during playback.
                    We recommend that a live MPEG-DASH manifest have a minimum
                    of 3 fragments and a maximum of 10 fragments.</p> <p>The
                    default is 5 fragments if <code>PlaybackMode</code> is
                    <code>LIVE</code> or <code>LIVE_REPLAY</code>, and 1,000 if
                    <code>PlaybackMode</code> is <code>ON_DEMAND</code>. </p>
                    <p>The maximum value of 1,000 fragments corresponds to more
                    than 16 minutes of video on streams with 1-second fragments,
                    and more than 2 1/2 hours of video on streams with 10-second
                    fragments.</p>
                  type: integer
                  minimum: 1
                  maximum: 1000
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /getHLSStreamingSessionURL:
    post:
      operationId: GetHLSStreamingSessionURL
      description: "<p>Retrieves an HTTP Live Streaming (HLS) URL for the stream. You can
        then open the URL in a browser or media player to view the stream
        contents.</p> <p>Both the <code>StreamName</code> and the
        <code>StreamARN</code> parameters are optional, but you must specify
        either the <code>StreamName</code> or the <code>StreamARN</code> when
        invoking this API operation.</p> <p>An Amazon Kinesis video stream has
        the following requirements for providing data through HLS:</p> <ul> <li>
        <p>The media must contain h.264 or h.265 encoded video and, optionally,
        AAC encoded audio. Specifically, the codec id of track 1 should be
        <code>V_MPEG/ISO/AVC</code> (for h.264) or <code>V_MPEG/ISO/HEVC</code>
        (for h.265). Optionally, the codec id of track 2 should be
        <code>A_AAC</code>.</p> </li> <li> <p>Data retention must be greater
        than 0.</p> </li> <li> <p>The video track of each fragment must contain
        codec private data in the Advanced Video Coding (AVC) for H.264 format
        or HEVC for H.265 format (<a
        href=\"https://www.iso.org/standard/55980.html\">MPEG-4 specification
        ISO/IEC 14496-15</a>). For information about adapting stream data to a
        given format, see <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/produce\
        r-reference-nal.html\">NAL Adaptation Flags</a>.</p> </li> <li> <p>The
        audio track (if present) of each fragment must contain codec private
        data in the AAC format (<a
        href=\"https://www.iso.org/standard/43345.html\">AAC specification
        ISO/IEC 13818-7</a>).</p> </li> </ul> <p>Kinesis Video Streams HLS
        sessions contain fragments in the fragmented MPEG-4 form (also called
        fMP4 or CMAF) or the MPEG-2 form (also called TS chunks, which the HLS
        specification also supports). For more information about HLS fragment
        types, see the <a
        href=\"https://tools.ietf.org/html/draft-pantos-http-live-streaming-23\\
        ">HLS specification</a>.</p> <p>The following procedure shows how to use
        HLS with Kinesis Video Streams:</p> <ol> <li> <p>Get an endpoint using
        <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_Get\
        DataEndpoint.html\">GetDataEndpoint</a>, specifying
        <code>GET_HLS_STREAMING_SESSION_URL</code> for the <code>APIName</code>
        parameter.</p> </li> <li> <p>Retrieve the HLS URL using
        <code>GetHLSStreamingSessionURL</code>. Kinesis Video Streams creates an
        HLS streaming session to be used for accessing content in a stream using
        the HLS protocol. <code>GetHLSStreamingSessionURL</code> returns an
        authenticated URL (that includes an encrypted session token) for the
        session's HLS <i>master playlist</i> (the root resource needed for
        streaming with HLS).</p> <note> <p>Don't share or store this token where
        an unauthorized entity could access it. The token provides access to the
        content of the stream. Safeguard the token with the same measures that
        you would use with your AWS credentials.</p> </note> <p>The media that
        is made available through the playlist consists only of the requested
        stream, time range, and format. No other media data (such as frames
        outside the requested window or alternate bitrates) is made
        available.</p> </li> <li> <p>Provide the URL (containing the encrypted
        session token) for the HLS master playlist to a media player that
        supports the HLS protocol. Kinesis Video Streams makes the HLS media
        playlist, initialization fragment, and media fragments available through
        the master playlist URL. The initialization fragment contains the codec
        private data for the stream, and other data needed to set up the video
        or audio decoder and renderer. The media fragments contain H.264-encoded
        video frames or AAC-encoded audio samples.</p> </li> <li> <p>The media
        player receives the authenticated URL and requests stream metadata and
        media data normally. When the media player requests data, it calls the
        following actions:</p> <ul> <li> <p> <b>GetHLSMasterPlaylist:</b>
        Retrieves an HLS master playlist, which contains a URL for the
        <code>GetHLSMediaPlaylist</code> action for each track, and additional
        metadata for the media player, including estimated bitrate and
        resolution.</p> </li> <li> <p> <b>GetHLSMediaPlaylist:</b> Retrieves an
        HLS media playlist, which contains a URL to access the MP4
        initialization fragment with the <code>GetMP4InitFragment</code> action,
        and URLs to access the MP4 media fragments with the
        <code>GetMP4MediaFragment</code> actions. The HLS media playlist also
        contains metadata about the stream that the player needs to play it,
        such as whether the <code>PlaybackMode</code> is <code>LIVE</code> or
        <code>ON_DEMAND</code>. The HLS media playlist is typically static for
        sessions with a <code>PlaybackType</code> of <code>ON_DEMAND</code>. The
        HLS media playlist is continually updated with new fragments for
        sessions with a <code>PlaybackType</code> of <code>LIVE</code>. There is
        a distinct HLS media playlist for the video track and the audio track
        (if applicable) that contains MP4 media URLs for the specific track.
        </p> </li> <li> <p> <b>GetMP4InitFragment:</b> Retrieves the MP4
        initialization fragment. The media player typically loads the
        initialization fragment before loading any media fragments. This
        fragment contains the \"<code>fytp</code>\" and \"<code>moov</code>\"
        MP4 atoms, and the child atoms that are needed to initialize the media
        player decoder.</p> <p>The initialization fragment does not correspond
        to a fragment in a Kinesis video stream. It contains only the codec
        private data for the stream and respective track, which the media player
        needs to decode the media frames.</p> </li> <li> <p>
        <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These
        fragments contain the \"<code>moof</code>\" and \"<code>mdat</code>\"
        MP4 atoms and their child atoms, containing the encoded fragment's media
        frames and their timestamps. </p> <note> <p>After the first media
        fragment is made available in a streaming session, any fragments that
        don't contain the same codec private data cause an error to be returned
        when those different media fragments are loaded. Therefore, the codec
        private data should not change between fragments in a session. This also
        means that the session fails if the fragments in a stream change from
        having only video to having both audio and video.</p> </note> <p>Data
        retrieved with this action is billable. See <a
        href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\">Pricing<\
        /a> for details.</p> </li> <li> <p> <b>GetTSFragment:</b> Retrieves MPEG
        TS fragments containing both initialization and media data for all
        tracks in the stream.</p> <note> <p>If the <code>ContainerFormat</code>
        is <code>MPEG_TS</code>, this API is used instead of
        <code>GetMP4InitFragment</code> and <code>GetMP4MediaFragment</code> to
        retrieve stream media.</p> </note> <p>Data retrieved with this action is
        billable. For more information, see <a
        href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\">Kinesis
        Video Streams pricing</a>.</p> </li> </ul> </li> </ol> <note> <p>The
        following restrictions apply to HLS sessions:</p> <ul> <li> <p>A
        streaming session URL should not be shared between players. The service
        might throttle a session if multiple media players are sharing it. For
        connection limits, see <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.\
        html\">Kinesis Video Streams Limits</a>.</p> </li> <li> <p>A Kinesis
        video stream can have a maximum of ten active HLS streaming sessions. If
        a new session is created when the maximum number of sessions is already
        active, the oldest (earliest created) session is closed. The number of
        active <code>GetMedia</code> connections on a Kinesis video stream does
        not count against this limit, and the number of active HLS sessions does
        not count against the active <code>GetMedia</code> connection limit.</p>
        <note> <p>The maximum limits for active HLS and MPEG-DASH streaming
        sessions are independent of each other.</p> </note> </li> </ul> </note>
        <p>You can monitor the amount of data that the media player consumes by
        monitoring the <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon
        CloudWatch metric. For information about using CloudWatch to monitor
        Kinesis Video Streams, see <a
        href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitor\
        ing.html\">Monitoring Kinesis Video Streams</a>. For pricing
        information, see <a
        href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\">Amazon
        Kinesis Video Streams Pricing</a> and <a
        href=\"https://aws.amazon.com/pricing/\">AWS Pricing</a>. Charges for
        both HLS sessions and outgoing AWS data apply.</p> <p>For more
        information about HLS, see <a
        href=\"https://developer.apple.com/streaming/\">HTTP Live Streaming</a>
        on the <a href=\"https://developer.apple.com\">Apple Developer
        site</a>.</p> <important> <p>If an error is thrown after invoking a
        Kinesis Video Streams archived media API, in addition to the HTTP status
        code and the response body, it includes the following pieces of
        information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code> HTTP header
        – contains a more specific error type in addition to what the HTTP
        status code provides. </p> </li> <li> <p> <code>x-amz-RequestId</code>
        HTTP header – if you want to report an issue to AWS, the support team
        can better diagnose the problem if given the Request Id.</p> </li> </ul>
        <p>Both the HTTP status code and the ErrorType header can be utilized to
        make programmatic decisions about whether errors are retry-able and
        under what conditions, as well as provide information on what actions
        the client programmer might need to take in order to successfully try
        again.</p> <p>For more information, see the <b>Errors</b> section at the
        bottom of this topic, as well as <a
        href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/Common\
        Errors.html\">Common Errors</a>. </p> </important>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHLSStreamingSessionURLOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ClientLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientLimitExceededException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
        "484":
          description: UnsupportedStreamMediaTypeException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnsupportedStreamMediaTypeException"
        "485":
          description: NoDataRetentionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoDataRetentionException"
        "486":
          description: MissingCodecPrivateDataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MissingCodecPrivateDataException"
        "487":
          description: InvalidCodecPrivateDataException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCodecPrivateDataException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  description: <p>The name of the stream for which to retrieve the HLS
                    master playlist URL.</p> <p>You must specify either the
                    <code>StreamName</code> or the <code>StreamARN</code>.</p>
                  type: string
                  pattern: "[a-zA-Z0-9_.-]+"
                  minLength: 1
                  maxLength: 256
                StreamARN:
                  description: <p>The Amazon Resource Name (ARN) of the stream for which to
                    retrieve the HLS master playlist URL.</p> <p>You must
                    specify either the <code>StreamName</code> or the
                    <code>StreamARN</code>.</p>
                  type: string
                  pattern: arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+
                  minLength: 1
                  maxLength: 1024
                PlaybackMode:
                  description: '<p>Whether to retrieve live, live replay, or archived,
                    on-demand data.</p> <p>Features of the three types of
                    sessions include the following:</p> <ul> <li> <p> <b>
                    <code>LIVE</code> </b>: For sessions of this type, the HLS
                    media playlist is continually updated with the latest
                    fragments as they become available. We recommend that the
                    media player retrieve a new playlist on a one-second
                    interval. When this type of session is played in a media
                    player, the user interface typically displays a "live"
                    notification, with no scrubber control for choosing the
                    position in the playback window to display.</p> <note> <p>In
                    <code>LIVE</code> mode, the newest available fragments are
                    included in an HLS media playlist, even if there is a gap
                    between fragments (that is, if a fragment is missing). A gap
                    like this might cause a media player to halt or cause a jump
                    in playback. In this mode, fragments are not added to the
                    HLS media playlist if they are older than the newest
                    fragment in the playlist. If the missing fragment becomes
                    available after a subsequent fragment is added to the
                    playlist, the older fragment is not added, and the gap is
                    not filled.</p> </note> </li> <li> <p> <b>
                    <code>LIVE_REPLAY</code> </b>: For sessions of this type,
                    the HLS media playlist is updated similarly to how it is
                    updated for <code>LIVE</code> mode except that it starts by
                    including fragments from a given start time. Instead of
                    fragments being added as they are ingested, fragments are
                    added as the duration of the next fragment elapses. For
                    example, if the fragments in the session are two seconds
                    long, then a new fragment is added to the media playlist
                    every two seconds. This mode is useful to be able to start
                    playback from when an event is detected and continue live
                    streaming media that has not yet been ingested as of the
                    time of the session creation. This mode is also useful to
                    stream previously archived media without being limited by
                    the 1,000 fragment limit in the <code>ON_DEMAND</code> mode.
                    </p> </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For
                    sessions of this type, the HLS media playlist contains all
                    the fragments for the session, up to the number that is
                    specified in <code>MaxMediaPlaylistFragmentResults</code>.
                    The playlist must be retrieved only once for each session.
                    When this type of session is played in a media player, the
                    user interface typically displays a scrubber control for
                    choosing the position in the playback window to display.</p>
                    </li> </ul> <p>In all playback modes, if
                    <code>FragmentSelectorType</code> is
                    <code>PRODUCER_TIMESTAMP</code>, and if there are multiple
                    fragments with the same start timestamp, the fragment that
                    has the larger fragment number (that is, the newer fragment)
                    is included in the HLS media playlist. The other fragments
                    are not included. Fragments that have different timestamps
                    but have overlapping durations are still included in the HLS
                    media playlist. This can lead to unexpected behavior in the
                    media player.</p> <p>The default is <code>LIVE</code>.</p>'
                  type: string
                  enum:
                    - LIVE
                    - LIVE_REPLAY
                    - ON_DEMAND
                HLSFragmentSelector:
                  description: Contains the range of timestamps for the requested media,
                    and the source of the timestamps.
                  type: object
                  properties:
                    FragmentSelectorType:
                      $ref: "#/components/schemas/HLSFragmentSelectorType"
                    TimestampRange:
                      $ref: "#/components/schemas/HLSTimestampRange"
                ContainerFormat:
                  description: <p>Specifies which format should be used for packaging the
                    media. Specifying the <code>FRAGMENTED_MP4</code> container
                    format packages the media into MP4 fragments (fMP4 or CMAF).
                    This is the recommended packaging because there is minimal
                    packaging overhead. The other container format option is
                    <code>MPEG_TS</code>. HLS has supported MPEG TS chunks since
                    it was released and is sometimes the only supported
                    packaging on older HLS players. MPEG TS typically has a 5-25
                    percent packaging overhead. This means MPEG TS typically
                    requires 5-25 percent more bandwidth and cost than fMP4.</p>
                    <p>The default is <code>FRAGMENTED_MP4</code>.</p>
                  type: string
                  enum:
                    - FRAGMENTED_MP4
                    - MPEG_TS
                DiscontinuityMode:
                  description: <p>Specifies when flags marking discontinuities between
                    fragments will be added to the media playlists. The default
                    is <code>ALWAYS</code> when <a>HLSFragmentSelector</a> is
                    <code>SERVER_TIMESTAMP</code>, and <code>NEVER</code> when
                    it is <code>PRODUCER_TIMESTAMP</code>.</p> <p>Media players
                    typically build a timeline of media content to play, based
                    on the timestamps of each fragment. This means that if there
                    is any overlap between fragments (as is typical if
                    <a>HLSFragmentSelector</a> is
                    <code>SERVER_TIMESTAMP</code>), the media player timeline
                    has small gaps between fragments in some places, and
                    overwrites frames in other places. When there are
                    discontinuity flags between fragments, the media player is
                    expected to reset the timeline, resulting in the fragment
                    being played immediately after the previous fragment. We
                    recommend that you always have discontinuity flags between
                    fragments if the fragment timestamps are not accurate or if
                    fragments might be missing. You should not place
                    discontinuity flags between fragments for the player
                    timeline to accurately map to the producer timestamps.</p>
                  type: string
                  enum:
                    - ALWAYS
                    - NEVER
                DisplayFragmentTimestamp:
                  description: <p>Specifies when the fragment start timestamps should be
                    included in the HLS media playlist. Typically, media players
                    report the playhead position as a time relative to the start
                    of the first fragment in the playback session. However, when
                    the start timestamps are included in the HLS media playlist,
                    some media players might report the current playhead as an
                    absolute time based on the fragment timestamps. This can be
                    useful for creating a playback experience that shows viewers
                    the wall-clock time of the media.</p> <p>The default is
                    <code>NEVER</code>. When <a>HLSFragmentSelector</a> is
                    <code>SERVER_TIMESTAMP</code>, the timestamps will be the
                    server start timestamps. Similarly, when
                    <a>HLSFragmentSelector</a> is
                    <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the
                    producer start timestamps. </p>
                  type: string
                  enum:
                    - ALWAYS
                    - NEVER
                Expires:
                  description: <p>The time in seconds until the requested session expires.
                    This value can be between 300 (5 minutes) and 43200 (12
                    hours).</p> <p>When a session expires, no new calls to
                    <code>GetHLSMasterPlaylist</code>,
                    <code>GetHLSMediaPlaylist</code>,
                    <code>GetMP4InitFragment</code>,
                    <code>GetMP4MediaFragment</code>, or
                    <code>GetTSFragment</code> can be made for that session.</p>
                    <p>The default is 300 (5 minutes).</p>
                  type: integer
                  minimum: 300
                  maximum: 43200
                MaxMediaPlaylistFragmentResults:
                  description: <p>The maximum number of fragments that are returned in the
                    HLS media playlists.</p> <p>When the
                    <code>PlaybackMode</code> is <code>LIVE</code>, the most
                    recent fragments are returned up to this value. When the
                    <code>PlaybackMode</code> is <code>ON_DEMAND</code>, the
                    oldest fragments are returned, up to this maximum
                    number.</p> <p>When there are a higher number of fragments
                    available in a live HLS media playlist, video players often
                    buffer content before starting playback. Increasing the
                    buffer size increases the playback latency, but it decreases
                    the likelihood that rebuffering will occur during playback.
                    We recommend that a live HLS media playlist have a minimum
                    of 3 fragments and a maximum of 10 fragments.</p> <p>The
                    default is 5 fragments if <code>PlaybackMode</code> is
                    <code>LIVE</code> or <code>LIVE_REPLAY</code>, and 1,000 if
                    <code>PlaybackMode</code> is <code>ON_DEMAND</code>. </p>
                    <p>The maximum value of 1,000 fragments corresponds to more
                    than 16 minutes of video on streams with 1-second fragments,
                    and more than 2 1/2 hours of video on streams with 10-second
                    fragments.</p>
                  type: integer
                  minimum: 1
                  maximum: 1000
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /getMediaForFragmentList:
    post:
      operationId: GetMediaForFragmentList
      description: '<p>Gets media for a list of fragments (specified by fragment number)
        from the archived data in an Amazon Kinesis video stream.</p> <note>
        <p>You must first call the <code>GetDataEndpoint</code> API to get an
        endpoint. Then send the <code>GetMediaForFragmentList</code> requests to
        this endpoint using the <a
        href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url
        parameter</a>. </p> </note> <p>The following limits apply when using the
        <code>GetMediaForFragmentList</code> API:</p> <ul> <li> <p>A client can
        call <code>GetMediaForFragmentList</code> up to five times per second
        per stream. </p> </li> <li> <p>Kinesis Video Streams sends media data at
        a rate of up to 25 megabytes per second (or 200 megabits per second)
        during a <code>GetMediaForFragmentList</code> session. </p> </li> </ul>
        <important> <p>If an error is thrown after invoking a Kinesis Video
        Streams archived media API, in addition to the HTTP status code and the
        response body, it includes the following pieces of information: </p>
        <ul> <li> <p> <code>x-amz-ErrorType</code> HTTP header – contains a more
        specific error type in addition to what the HTTP status code provides.
        </p> </li> <li> <p> <code>x-amz-RequestId</code> HTTP header – if you
        want to report an issue to AWS, the support team can better diagnose the
        problem if given the Request Id.</p> </li> </ul> <p>Both the HTTP status
        code and the ErrorType header can be utilized to make programmatic
        decisions about whether errors are retry-able and under what conditions,
        as well as provide information on what actions the client programmer
        might need to take in order to successfully try again.</p> <p>For more
        information, see the <b>Errors</b> section at the bottom of this topic,
        as well as <a
        href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
        Errors</a>. </p> </important>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaForFragmentListOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ClientLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientLimitExceededException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - StreamName
                - Fragments
              properties:
                StreamName:
                  description: The name of the stream from which to retrieve fragment media.
                  type: string
                  pattern: "[a-zA-Z0-9_.-]+"
                  minLength: 1
                  maxLength: 256
                Fragments:
                  description: A list of the numbers of fragments for which to retrieve
                    media. You retrieve these values with <a>ListFragments</a>.
                  type: array
                  items:
                    $ref: "#/components/schemas/FragmentNumberString"
                  minItems: 1
                  maxItems: 1000
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /listFragments:
    post:
      operationId: ListFragments
      description: '<p>Returns a list of <a>Fragment</a> objects from the specified stream
        and timestamp range within the archived data.</p> <p>Listing fragments
        is eventually consistent. This means that even if the producer receives
        an acknowledgment that a fragment is persisted, the result might not be
        returned immediately from a request to <code>ListFragments</code>.
        However, results are typically available in less than one second.</p>
        <note> <p>You must first call the <code>GetDataEndpoint</code> API to
        get an endpoint. Then send the <code>ListFragments</code> requests to
        this endpoint using the <a
        href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url
        parameter</a>. </p> </note> <important> <p>If an error is thrown after
        invoking a Kinesis Video Streams archived media API, in addition to the
        HTTP status code and the response body, it includes the following pieces
        of information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code> HTTP
        header – contains a more specific error type in addition to what the
        HTTP status code provides. </p> </li> <li> <p>
        <code>x-amz-RequestId</code> HTTP header – if you want to report an
        issue to AWS, the support team can better diagnose the problem if given
        the Request Id.</p> </li> </ul> <p>Both the HTTP status code and the
        ErrorType header can be utilized to make programmatic decisions about
        whether errors are retry-able and under what conditions, as well as
        provide information on what actions the client programmer might need to
        take in order to successfully try again.</p> <p>For more information,
        see the <b>Errors</b> section at the bottom of this topic, as well as <a
        href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
        Errors</a>. </p> </important>'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFragmentsOutput"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidArgumentException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidArgumentException"
        "482":
          description: ClientLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientLimitExceededException"
        "483":
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorizedException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - StreamName
                - FragmentSelector
              properties:
                StreamName:
                  description: The name of the stream from which to retrieve a fragment
                    list.
                  type: string
                  pattern: "[a-zA-Z0-9_.-]+"
                  minLength: 1
                  maxLength: 256
                MaxResults:
                  description: The total number of fragments to return. If the total number
                    of fragments available is more than the value specified in
                    <code>max-results</code>, then a
                    <a>ListFragmentsOutput$NextToken</a> is provided in the
                    output that you can use to resume pagination.
                  type: integer
                  minimum: 1
                  maximum: 1000
                NextToken:
                  description: A token to specify where to start paginating. This is the
                    <a>ListFragmentsOutput$NextToken</a> from a previously
                    truncated response.
                  type: string
                  minLength: 1
                FragmentSelector:
                  description: "<p>Describes the timestamp range and timestamp origin of a
                    range of fragments.</p> <p>Only fragments with a start
                    timestamp greater than or equal to the given start time and
                    less than or equal to the end time are returned. For
                    example, if a stream contains fragments with the following
                    start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li>
                    <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li>
                    <p>00:00:06</p> </li> </ul> <p> A fragment selector range
                    with a start time of 00:00:01 and end time of 00:00:04 would
                    return the fragments with start times of 00:00:02 and
                    00:00:04. </p>"
                  type: object
                  properties:
                    FragmentSelectorType:
                      $ref: "#/components/schemas/FragmentSelectorType"
                    TimestampRange:
                      $ref: "#/components/schemas/TimestampRange"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://kinesisvideo.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Kinesis Video Archived Media multi-region endpoint
  - url: https://kinesisvideo.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Kinesis Video Archived Media multi-region endpoint
  - url: http://kinesisvideo.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Kinesis Video Archived Media endpoint for China (Beijing) and China
      (Ningxia)
  - url: https://kinesisvideo.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Kinesis Video Archived Media endpoint for China (Beijing) and China
      (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    GetDASHStreamingSessionURLOutput:
      type: object
      properties:
        DASHStreamingSessionURL:
          $ref: "#/components/schemas/DASHStreamingSessionURL"
    DASHFragmentSelectorType:
      type: string
      enum:
        - PRODUCER_TIMESTAMP
        - SERVER_TIMESTAMP
    DASHTimestampRange:
      type: object
      properties:
        StartTimestamp:
          $ref: "#/components/schemas/Timestamp"
        EndTimestamp:
          $ref: "#/components/schemas/Timestamp"
      description: <p>The start and end of the timestamp range for the requested media.</p>
        <p>This value should not be present if <code>PlaybackType</code> is
        <code>LIVE</code>.</p> <note> <p>The values in the
        <code>DASHimestampRange</code> are inclusive. Fragments that begin
        before the start time but continue past it, or fragments that begin
        before the end time but continue past it, are included in the
        session.</p> </note>
    ResourceNotFoundException: {}
    InvalidArgumentException: {}
    ClientLimitExceededException: {}
    NotAuthorizedException: {}
    UnsupportedStreamMediaTypeException: {}
    NoDataRetentionException: {}
    MissingCodecPrivateDataException: {}
    InvalidCodecPrivateDataException: {}
    GetHLSStreamingSessionURLOutput:
      type: object
      properties:
        HLSStreamingSessionURL:
          $ref: "#/components/schemas/HLSStreamingSessionURL"
    HLSFragmentSelectorType:
      type: string
      enum:
        - PRODUCER_TIMESTAMP
        - SERVER_TIMESTAMP
    HLSTimestampRange:
      type: object
      properties:
        StartTimestamp:
          $ref: "#/components/schemas/Timestamp"
        EndTimestamp:
          $ref: "#/components/schemas/Timestamp"
      description: <p>The start and end of the timestamp range for the requested media.</p>
        <p>This value should not be present if <code>PlaybackType</code> is
        <code>LIVE</code>.</p> <note> <p>The values in the
        <code>HLSTimestampRange</code> are inclusive. Fragments that begin
        before the start time but continue past it, or fragments that begin
        before the end time but continue past it, are included in the
        session.</p> </note>
    GetMediaForFragmentListOutput:
      type: object
      properties:
        Payload:
          $ref: "#/components/schemas/Payload"
    FragmentNumberString:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 128
    ListFragmentsOutput:
      type: object
      properties:
        Fragments:
          $ref: "#/components/schemas/FragmentList"
        NextToken:
          $ref: "#/components/schemas/String"
    FragmentSelectorType:
      type: string
      enum:
        - PRODUCER_TIMESTAMP
        - SERVER_TIMESTAMP
    TimestampRange:
      type: object
      required:
        - StartTimestamp
        - EndTimestamp
      properties:
        StartTimestamp:
          $ref: "#/components/schemas/Timestamp"
        EndTimestamp:
          $ref: "#/components/schemas/Timestamp"
      description: The range of timestamps for which to return fragments.
    ContainerFormat:
      type: string
      enum:
        - FRAGMENTED_MP4
        - MPEG_TS
    ContentType:
      type: string
      pattern: ^[a-zA-Z0-9_\.\-]+$
      minLength: 1
      maxLength: 128
    DASHDisplayFragmentNumber:
      type: string
      enum:
        - ALWAYS
        - NEVER
    DASHDisplayFragmentTimestamp:
      type: string
      enum:
        - ALWAYS
        - NEVER
    DASHFragmentSelector:
      type: object
      properties:
        FragmentSelectorType:
          $ref: "#/components/schemas/DASHFragmentSelectorType"
        TimestampRange:
          $ref: "#/components/schemas/DASHTimestampRange"
      description: "Contains the range of timestamps for the requested media, and the
        source of the timestamps. "
    DASHPlaybackMode:
      type: string
      enum:
        - LIVE
        - LIVE_REPLAY
        - ON_DEMAND
    DASHStreamingSessionURL:
      type: string
    Timestamp:
      type: string
      format: date-time
    Expires:
      type: integer
      minimum: 300
      maximum: 43200
    String:
      type: string
      minLength: 1
    Long:
      type: integer
    Fragment:
      type: object
      properties:
        FragmentNumber:
          $ref: "#/components/schemas/String"
        FragmentSizeInBytes:
          $ref: "#/components/schemas/Long"
        ProducerTimestamp:
          $ref: "#/components/schemas/Timestamp"
        ServerTimestamp:
          $ref: "#/components/schemas/Timestamp"
        FragmentLengthInMilliseconds:
          $ref: "#/components/schemas/Long"
      description: Represents a segment of video or other time-delimited data.
    FragmentList:
      type: array
      items:
        $ref: "#/components/schemas/Fragment"
    FragmentNumberList:
      type: array
      items:
        $ref: "#/components/schemas/FragmentNumberString"
      minItems: 1
      maxItems: 1000
    FragmentSelector:
      type: object
      required:
        - FragmentSelectorType
        - TimestampRange
      properties:
        FragmentSelectorType:
          $ref: "#/components/schemas/FragmentSelectorType"
        TimestampRange:
          $ref: "#/components/schemas/TimestampRange"
      description: "<p>Describes the timestamp range and timestamp origin of a range of
        fragments.</p> <p>Only fragments with a start timestamp greater than or
        equal to the given start time and less than or equal to the end time are
        returned. For example, if a stream contains fragments with the following
        start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li>
        <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p>
        </li> </ul> <p> A fragment selector range with a start time of 00:00:01
        and end time of 00:00:04 would return the fragments with start times of
        00:00:02 and 00:00:04. </p>"
    StreamName:
      type: string
      pattern: "[a-zA-Z0-9_.-]+"
      minLength: 1
      maxLength: 256
    ResourceARN:
      type: string
      pattern: arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+
      minLength: 1
      maxLength: 1024
    PageLimit:
      type: integer
      minimum: 1
      maximum: 1000
    GetDASHStreamingSessionURLInput:
      type: object
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        StreamARN:
          $ref: "#/components/schemas/ResourceARN"
        PlaybackMode:
          $ref: "#/components/schemas/DASHPlaybackMode"
        DisplayFragmentTimestamp:
          $ref: "#/components/schemas/DASHDisplayFragmentTimestamp"
        DisplayFragmentNumber:
          $ref: "#/components/schemas/DASHDisplayFragmentNumber"
        DASHFragmentSelector:
          $ref: "#/components/schemas/DASHFragmentSelector"
        Expires:
          $ref: "#/components/schemas/Expires"
        MaxManifestFragmentResults:
          $ref: "#/components/schemas/PageLimit"
    HLSPlaybackMode:
      type: string
      enum:
        - LIVE
        - LIVE_REPLAY
        - ON_DEMAND
    HLSFragmentSelector:
      type: object
      properties:
        FragmentSelectorType:
          $ref: "#/components/schemas/HLSFragmentSelectorType"
        TimestampRange:
          $ref: "#/components/schemas/HLSTimestampRange"
      description: Contains the range of timestamps for the requested media, and the source
        of the timestamps.
    HLSDiscontinuityMode:
      type: string
      enum:
        - ALWAYS
        - NEVER
    HLSDisplayFragmentTimestamp:
      type: string
      enum:
        - ALWAYS
        - NEVER
    GetHLSStreamingSessionURLInput:
      type: object
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        StreamARN:
          $ref: "#/components/schemas/ResourceARN"
        PlaybackMode:
          $ref: "#/components/schemas/HLSPlaybackMode"
        HLSFragmentSelector:
          $ref: "#/components/schemas/HLSFragmentSelector"
        ContainerFormat:
          $ref: "#/components/schemas/ContainerFormat"
        DiscontinuityMode:
          $ref: "#/components/schemas/HLSDiscontinuityMode"
        DisplayFragmentTimestamp:
          $ref: "#/components/schemas/HLSDisplayFragmentTimestamp"
        Expires:
          $ref: "#/components/schemas/Expires"
        MaxMediaPlaylistFragmentResults:
          $ref: "#/components/schemas/PageLimit"
    HLSStreamingSessionURL:
      type: string
    GetMediaForFragmentListInput:
      type: object
      required:
        - StreamName
        - Fragments
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        Fragments:
          $ref: "#/components/schemas/FragmentNumberList"
    Payload:
      type: string
    ListFragmentsInput:
      type: object
      required:
        - StreamName
      properties:
        StreamName:
          $ref: "#/components/schemas/StreamName"
        MaxResults:
          $ref: "#/components/schemas/PageLimit"
        NextToken:
          $ref: "#/components/schemas/String"
        FragmentSelector:
          $ref: "#/components/schemas/FragmentSelector"
