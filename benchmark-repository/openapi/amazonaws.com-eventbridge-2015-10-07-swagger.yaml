openapi: 3.0.0
info:
  version: 2015-10-07
  x-release: v4
  title: Amazon EventBridge
  description: <p>Amazon EventBridge helps you to respond to state changes in your AWS
    resources. When your resources change state, they automatically send events
    into an event stream. You can create rules that match selected events in the
    stream and route them to targets to take action. You can also use rules to
    take action on a predetermined schedule. For example, you can configure
    rules to:</p> <ul> <li> <p>Automatically invoke an AWS Lambda function to
    update DNS entries when an event notifies you that Amazon EC2 instance
    enters the running state</p> </li> <li> <p>Direct specific API records from
    AWS CloudTrail to an Amazon Kinesis data stream for detailed analysis of
    potential security or availability risks</p> </li> <li> <p>Periodically
    invoke a built-in target to create a snapshot of an Amazon EBS volume</p>
    </li> </ul> <p>For more information about the features of Amazon
    EventBridge, see the <a
    href="https://docs.aws.amazon.com/eventbridge/latest/userguide/">Amazon
    EventBridge User Guide</a>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: eventbridge
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/eventbridge-2015-10-07.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/events/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AWSEvents.ActivateEventSource:
    post:
      operationId: ActivateEventSource
      description: <p>Activates a partner event source that has been deactivated. Once
        activated, your matching event bus will start receiving events from the
        event source.</p> <note> <p>This operation is performed by AWS
        customers, not by SaaS partners.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "482":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ActivateEventSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateEventSourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.CreateEventBus:
    post:
      operationId: CreateEventBus
      description: <p>Creates a new event bus within your account. This can be a custom
        event bus which you can use to receive events from your own custom
        applications and services, or it can be a partner event bus which can be
        matched to a partner event source.</p> <note> <p>This operation is used
        by AWS customers, not by SaaS partners.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEventBusResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "483":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.CreateEventBus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventBusRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.CreatePartnerEventSource:
    post:
      operationId: CreatePartnerEventSource
      description: <p>Called by an SaaS partner to create a partner event source.</p>
        <note> <p>This operation is not used by AWS customers.</p> </note>
        <p>Each partner event source can be used by one AWS account to create a
        matching partner event bus in that AWS account. A SaaS partner must
        create one partner event source for each AWS account that wants to
        receive those event types. </p> <p>A partner event source creates events
        based on resources in the SaaS partner's service or application.</p>
        <p>An AWS account that creates a partner event bus that matches the
        partner event source can use that event bus to receive events from the
        partner, and then process them using AWS Events rules and targets.</p>
        <p>Partner event source names follow this format:</p> <p>
        <code>aws.partner/<i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i>
        </code> </p> <ul> <li> <p> <i>partner_name</i> is determined during
        partner registration and identifies the partner to AWS customers.</p>
        </li> <li> <p>For <i>event_namespace</i>, we recommend that partners use
        a string that identifies the AWS customer within the partner's system.
        This should not be the customer's AWS account ID.</p> </li> <li> <p>
        <i>event_name</i> is determined by the partner, and should uniquely
        identify an event-generating resource within the partner system. This
        should help AWS customers decide whether to create an event bus to
        receive these events.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePartnerEventSourceResponse"
        "480":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.CreatePartnerEventSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartnerEventSourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DeactivateEventSource:
    post:
      operationId: DeactivateEventSource
      description: <p>An AWS customer uses this operation to temporarily stop receiving
        events from the specified partner event source. The matching event bus
        isn't deleted. </p> <p>When you deactivate a partner event source, the
        source goes into <code>PENDING</code> state. If it remains in
        <code>PENDING</code> state for more than two weeks, it's deleted.</p>
        <p>To activate a deactivated partner event source, use
        <a>ActivateEventSource</a>.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidStateException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidStateException"
        "482":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DeactivateEventSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeactivateEventSourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DeleteEventBus:
    post:
      operationId: DeleteEventBus
      description: <p>Deletes the specified custom event bus or partner event bus. All
        rules associated with this event bus are also deleted. You can't delete
        your account's default event bus.</p> <note> <p>This operation is
        performed by AWS customers, not by SaaS partners.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DeleteEventBus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteEventBusRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DeletePartnerEventSource:
    post:
      operationId: DeletePartnerEventSource
      description: <p>This operation is used by SaaS partners to delete a partner event
        source. AWS customers don't use this operation.</p> <p>When you delete
        an event source, the status of the corresponding partner event bus in
        the AWS customer account becomes <code>DELETED</code>.</p>
      responses:
        "200":
          description: Success
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DeletePartnerEventSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePartnerEventSourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DeleteRule:
    post:
      operationId: DeleteRule
      description: <p>Deletes the specified rule.</p> <p>Before you can delete the rule,
        you must remove all targets, using <a>RemoveTargets</a>.</p> <p>When you
        delete a rule, incoming events might continue to match to the deleted
        rule. Allow a short period of time for changes to take effect.</p>
        <p>Managed rules are rules created and managed by another AWS service on
        your behalf. These rules are created by those other AWS services to
        support functionality in those services. You can delete these rules
        using the <code>Force</code> option, but you should do so only if you're
        sure that the other service isn't still using that rule.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
        "482":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DeleteRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRuleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DescribeEventBus:
    post:
      operationId: DescribeEventBus
      description: <p>Displays details about an event bus in your account. This can include
        the external AWS accounts that are permitted to write events to your
        default event bus, and the associated policy. For custom event buses and
        partner event buses, it displays the name, ARN, policy, state, and
        creation time.</p> <p> To enable your account to receive events from
        other accounts on its default event bus, use <a>PutPermission</a>.</p>
        <p>For more information about partner event buses, see
        <a>CreateEventBus</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeEventBusResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DescribeEventBus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeEventBusRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DescribeEventSource:
    post:
      operationId: DescribeEventSource
      description: <p>This operation lists details about a partner event source that is
        shared with your account.</p> <note> <p>This operation is run by AWS
        customers, not by SaaS partners.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeEventSourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DescribeEventSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeEventSourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DescribePartnerEventSource:
    post:
      operationId: DescribePartnerEventSource
      description: <p>An SaaS partner can use this operation to list details about a
        partner event source that they have created.</p> <note> <p>AWS customers
        do not use this operation. Instead, AWS customers can use
        <a>DescribeEventSource</a> to see details about a partner event source
        that is shared with them.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribePartnerEventSourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DescribePartnerEventSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribePartnerEventSourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DescribeRule:
    post:
      operationId: DescribeRule
      description: <p>Describes the specified rule.</p> <p> <code>DescribeRule</code>
        doesn't list the targets of a rule. To see the targets associated with a
        rule, use <a>ListTargetsByRule</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeRuleResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DescribeRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeRuleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.DisableRule:
    post:
      operationId: DisableRule
      description: <p>Disables the specified rule. A disabled rule won't match any events
        and won't self-trigger if it has a schedule expression.</p> <p>When you
        disable a rule, incoming events might continue to match to the disabled
        rule. Allow a short period of time for changes to take effect.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
        "483":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.DisableRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisableRuleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.EnableRule:
    post:
      operationId: EnableRule
      description: <p>Enables the specified rule. If the rule doesn't exist, the operation
        fails.</p> <p>When you enable a rule, incoming events might not
        immediately start matching to a newly enabled rule. Allow a short period
        of time for changes to take effect.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
        "483":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.EnableRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnableRuleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListEventBuses:
    post:
      operationId: ListEventBuses
      description: <p>Lists all the event buses in your account, including the default
        event bus, custom event buses, and partner event buses.</p> <note>
        <p>This operation is run by AWS customers, not by SaaS partners.</p>
        </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventBusesResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListEventBuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListEventBusesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListEventSources:
    post:
      operationId: ListEventSources
      description: <p>You can use this to see all the partner event sources that have been
        shared with your AWS account. For more information about partner event
        sources, see <a>CreateEventBus</a>.</p> <note> <p>This operation is run
        by AWS customers, not by SaaS partners.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventSourcesResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListEventSources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListEventSourcesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListPartnerEventSourceAccounts:
    post:
      operationId: ListPartnerEventSourceAccounts
      description: <p>An SaaS partner can use this operation to display the AWS account ID
        that a particular partner event source name is associated with.</p>
        <note> <p>This operation is used by SaaS partners, not by AWS
        customers.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPartnerEventSourceAccountsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListPartnerEventSourceAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListPartnerEventSourceAccountsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListPartnerEventSources:
    post:
      operationId: ListPartnerEventSources
      description: <p>An SaaS partner can use this operation to list all the partner event
        source names that they have created.</p> <note> <p>This operation is not
        used by AWS customers.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPartnerEventSourcesResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListPartnerEventSources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListPartnerEventSourcesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListRuleNamesByTarget:
    post:
      operationId: ListRuleNamesByTarget
      description: Lists the rules for the specified target. You can see which rules can
        invoke a specific target in your account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRuleNamesByTargetResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListRuleNamesByTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRuleNamesByTargetRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListRules:
    post:
      operationId: ListRules
      description: <p>Lists your EventBridge rules. You can either list all the rules or
        provide a prefix to match to the rule names.</p> <p>
        <code>ListRules</code> doesn't list the targets of a rule. To see the
        targets associated with a rule, use <a>ListTargetsByRule</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRulesResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListRules
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRulesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: Displays the tags associated with an EventBridge resource. In
        EventBridge, rules can be tagged.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.ListTargetsByRule:
    post:
      operationId: ListTargetsByRule
      description: Lists the targets assigned to the specified rule.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTargetsByRuleResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.ListTargetsByRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTargetsByRuleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.PutEvents:
    post:
      operationId: PutEvents
      description: Sends custom events to EventBridge so that they can be matched to rules.
        These events can be from your custom applications and services.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutEventsResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.PutEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutEventsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.PutPartnerEvents:
    post:
      operationId: PutPartnerEvents
      description: <p>This is used by SaaS partners to write events to a customer's partner
        event bus.</p> <note> <p>AWS customers do not use this operation.
        Instead, AWS customers can use <a>PutEvents</a> to write custom events
        from their own applications to an event bus.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutPartnerEventsResponse"
        "480":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.PutPartnerEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutPartnerEventsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.PutPermission:
    post:
      operationId: PutPermission
      description: <p>Running <code>PutPermission</code> permits the specified AWS account
        or AWS organization to put events to the specified <i>event bus</i>.
        Rules in your account are triggered by these events arriving to an event
        bus in your account. </p> <p>For another account to send events to your
        account, that external account must have a rule with your account's
        event bus as a target.</p> <p>To enable multiple AWS accounts to put
        events to an event bus, run <code>PutPermission</code> once for each of
        these accounts. Or, if all the accounts are members of the same AWS
        organization, you can run <code>PutPermission</code> once specifying
        <code>Principal</code> as "*" and specifying the AWS organization ID in
        <code>Condition</code>, to grant permissions to all accounts in that
        organization.</p> <p>If you grant permissions using an organization,
        then accounts in that organization must specify a <code>RoleArn</code>
        with proper permissions when they use <code>PutTarget</code> to add your
        account's event bus as a target. For more information, see <a
        href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
        and Receiving Events Between AWS Accounts</a> in the <i>Amazon
        EventBridge User Guide</i>.</p> <p>The permission policy on an event bus
        can't exceed 10 KB in size.</p>
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: PolicyLengthExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyLengthExceededException"
        "482":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "483":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.PutPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutPermissionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.PutRule:
    post:
      operationId: PutRule
      description: <p>Creates or updates the specified rule. Rules are enabled by default
        or based on value of the state. You can disable a rule using
        <a>DisableRule</a>.</p> <p>A single rule watches for events from a
        single event bus. Events generated by AWS services go to your account's
        default event bus. Events generated by SaaS partner services or
        applications go to the matching partner event bus. If you have custom
        applications or services, you can specify whether their events go to
        your default event bus or a custom event bus that you have created. For
        more information, see <a>CreateEventBus</a>.</p> <p>If you're updating
        an existing rule, the rule is replaced with what you specify in this
        <code>PutRule</code> command. If you omit arguments in
        <code>PutRule</code>, the old values for those arguments aren't kept.
        Instead, they're replaced with null values.</p> <p>When you create or
        update a rule, incoming events might not immediately start matching to
        new or updated rules. Allow a short period of time for changes to take
        effect.</p> <p>A rule must contain at least an <code>EventPattern</code>
        or <code>ScheduleExpression</code>. Rules with
        <code>EventPatterns</code> are triggered when a matching event is
        observed. Rules with <code>ScheduleExpressions</code> self-trigger based
        on the given schedule. A rule can have both an <code>EventPattern</code>
        and a <code>ScheduleExpression</code>, in which case the rule triggers
        on matching events as well as on a schedule.</p> <p>When you initially
        create a rule, you can optionally assign one or more tags to the rule.
        Tags can help you organize and categorize your resources. You can also
        use them to scope user permissions, by granting a user permission to
        access or change only rules with certain tag values. To use the
        <code>PutRule</code> operation and assign tags, you must have both the
        <code>events:PutRule</code> and <code>events:TagResource</code>
        permissions.</p> <p>If you are updating an existing rule, any tags you
        specify in the <code>PutRule</code> operation are ignored. To update the
        tags of an existing rule, use <a>TagResource</a> and
        <a>UntagResource</a>.</p> <p>Most services in AWS treat <code>:</code>
        or <code>/</code> as the same character in Amazon Resource Names (ARNs).
        However, EventBridge uses an exact match in event patterns and rules. Be
        sure to use the correct ARN characters when creating event patterns so
        that they match the ARN syntax in the event that you want to match.</p>
        <p>In EventBridge, you could create rules that lead to infinite loops,
        where a rule is fired repeatedly. For example, a rule might detect that
        ACLs have changed on an S3 bucket, and trigger software to change them
        to the desired state. If you don't write the rule carefully, the
        subsequent change to the ACLs fires the rule again, creating an infinite
        loop.</p> <p>To prevent this, write the rules so that the triggered
        actions don't refire the same rule. For example, your rule could fire
        only if ACLs are found to be in a bad state, instead of after any
        change. </p> <p>An infinite loop can quickly cause higher than expected
        charges. We recommend that you use budgeting, which alerts you when
        charges exceed your specified limit. For more information, see <a
        href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing
        Your Costs with Budgets</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutRuleResponse"
        "480":
          description: InvalidEventPatternException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEventPatternException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
        "484":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.PutRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutRuleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.PutTargets:
    post:
      operationId: PutTargets
      description: <p>Adds the specified targets to the specified rule, or updates the
        targets if they're already associated with the rule.</p> <p>Targets are
        the resources that are invoked when a rule is triggered.</p> <p>You can
        configure the following as targets in EventBridge:</p> <ul> <li> <p>EC2
        instances</p> </li> <li> <p>SSM Run Command</p> </li> <li> <p>SSM
        Automation</p> </li> <li> <p>AWS Lambda functions</p> </li> <li> <p>Data
        streams in Amazon Kinesis Data Streams</p> </li> <li> <p>Data delivery
        streams in Amazon Kinesis Data Firehose</p> </li> <li> <p>Amazon ECS
        tasks</p> </li> <li> <p>AWS Step Functions state machines</p> </li> <li>
        <p>AWS Batch jobs</p> </li> <li> <p>AWS CodeBuild projects</p> </li>
        <li> <p>Pipelines in AWS CodePipeline</p> </li> <li> <p>Amazon Inspector
        assessment templates</p> </li> <li> <p>Amazon SNS topics</p> </li> <li>
        <p>Amazon SQS queues, including FIFO queues</p> </li> <li> <p>The
        default event bus of another AWS account</p> </li> </ul> <p>Creating
        rules with built-in targets is supported only on the AWS Management
        Console. The built-in targets are <code>EC2 CreateSnapshot API
        call</code>, <code>EC2 RebootInstances API call</code>, <code>EC2
        StopInstances API call</code>, and <code>EC2 TerminateInstances API
        call</code>. </p> <p>For some target types, <code>PutTargets</code>
        provides target-specific parameters. If the target is a Kinesis data
        stream, you can optionally specify which shard the event goes to by
        using the <code>KinesisParameters</code> argument. To invoke a command
        on multiple EC2 instances with one rule, you can use the
        <code>RunCommandParameters</code> field.</p> <p>To be able to make API
        calls against the resources that you own, Amazon EventBridge needs the
        appropriate permissions. For AWS Lambda and Amazon SNS resources,
        EventBridge relies on resource-based policies. For EC2 instances,
        Kinesis data streams, and AWS Step Functions state machines, EventBridge
        relies on IAM roles that you specify in the <code>RoleARN</code>
        argument in <code>PutTargets</code>. For more information, see <a
        href="https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html">Authentication
        and Access Control</a> in the <i>Amazon EventBridge User Guide</i>.</p>
        <p>If another AWS account is in the same Region and has granted you
        permission (using <code>PutPermission</code>), you can send events to
        that account. Set that account's event bus as a target of the rules in
        your account. To send the matched events to the other account, specify
        that account's event bus as the <code>Arn</code> value when you run
        <code>PutTargets</code>. If your account sends events to another
        account, your account is charged for each sent event. Each event sent to
        another account is charged as a custom event. The account receiving the
        event isn't charged. For more information, see <a
        href="https://aws.amazon.com/eventbridge/pricing/">Amazon EventBridge
        Pricing</a>.</p> <p>If you're setting an event bus in another account as
        the target and that account granted permission to your account through
        an organization instead of directly by the account ID, you must specify
        a <code>RoleArn</code> with proper permissions in the
        <code>Target</code> structure. For more information, see <a
        href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
        and Receiving Events Between AWS Accounts</a> in the <i>Amazon
        EventBridge User Guide</i>.</p> <p>For more information about enabling
        cross-account events, see <a>PutPermission</a>.</p> <p>
        <code>Input</code>, <code>InputPath</code>, and
        <code>InputTransformer</code> are mutually exclusive and optional
        parameters of a target. When a rule is triggered due to a matched
        event:</p> <ul> <li> <p>If none of the following arguments are specified
        for a target, the entire event is passed to the target in JSON format
        (unless the target is Amazon EC2 Run Command or Amazon ECS task, in
        which case nothing from the event is passed to the target).</p> </li>
        <li> <p>If <code>Input</code> is specified in the form of valid JSON,
        then the matched event is overridden with this constant.</p> </li> <li>
        <p>If <code>InputPath</code> is specified in the form of JSONPath (for
        example, <code>$.detail</code>), only the part of the event specified in
        the path is passed to the target (for example, only the detail part of
        the event is passed).</p> </li> <li> <p>If <code>InputTransformer</code>
        is specified, one or more specified JSONPaths are extracted from the
        event and used as values in a template that you specify as the input to
        the target.</p> </li> </ul> <p>When you specify <code>InputPath</code>
        or <code>InputTransformer</code>, you must use JSON dot notation, not
        bracket notation.</p> <p>When you add targets to a rule and the
        associated rule triggers soon after, new or updated targets might not be
        immediately invoked. Allow a short period of time for changes to take
        effect.</p> <p>This action can partially fail if too many requests are
        made at the same time. If that happens, <code>FailedEntryCount</code> is
        nonzero in the response, and each entry in <code>FailedEntries</code>
        provides the ID of the failed target and the error code.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutTargetsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "483":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
        "484":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.PutTargets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutTargetsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.RemovePermission:
    post:
      operationId: RemovePermission
      description: Revokes the permission of another AWS account to be able to put events
        to the specified event bus. Specify the account to revoke by the
        <code>StatementId</code> value that you associated with the account when
        you granted it permission with <code>PutPermission</code>. You can find
        the <code>StatementId</code> by using <a>DescribeEventBus</a>.
      responses:
        "200":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.RemovePermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemovePermissionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.RemoveTargets:
    post:
      operationId: RemoveTargets
      description: <p>Removes the specified targets from the specified rule. When the rule
        is triggered, those targets are no longer be invoked.</p> <p>When you
        remove a target, when the associated rule triggers, removed targets
        might continue to be invoked. Allow a short period of time for changes
        to take effect.</p> <p>This action can partially fail if too many
        requests are made at the same time. If that happens,
        <code>FailedEntryCount</code> is non-zero in the response and each entry
        in <code>FailedEntries</code> provides the ID of the failed target and
        the error code.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveTargetsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
        "483":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.RemoveTargets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveTargetsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.TagResource:
    post:
      operationId: TagResource
      description: <p>Assigns one or more tags (key-value pairs) to the specified
        EventBridge resource. Tags can help you organize and categorize your
        resources. You can also use them to scope user permissions by granting a
        user permission to access or change only resources with certain tag
        values. In EventBridge, rules can be tagged.</p> <p>Tags don't have any
        semantic meaning to AWS and are interpreted strictly as strings of
        characters.</p> <p>You can use the <code>TagResource</code> action with
        a rule that already has tags. If you specify a new tag key for the rule,
        this tag is appended to the list of tags associated with the rule. If
        you specify a tag key that is already associated with the rule, the new
        tag value that you specify replaces the previous value for that tag.</p>
        <p>You can associate as many as 50 tags with a resource.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "482":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "483":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.TestEventPattern:
    post:
      operationId: TestEventPattern
      description: <p>Tests whether the specified event pattern matches the provided
        event.</p> <p>Most services in AWS treat <code>:</code> or
        <code>/</code> as the same character in Amazon Resource Names (ARNs).
        However, EventBridge uses an exact match in event patterns and rules. Be
        sure to use the correct ARN characters when creating event patterns so
        that they match the ARN syntax in the event that you want to match.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestEventPatternResponse"
        "480":
          description: InvalidEventPatternException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidEventPatternException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.TestEventPattern
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestEventPatternRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSEvents.UntagResource:
    post:
      operationId: UntagResource
      description: Removes one or more tags from the specified EventBridge resource. In
        EventBridge, rules can be tagged.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalException"
        "482":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "483":
          description: ManagedRuleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedRuleException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSEvents.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://events.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon EventBridge multi-region endpoint
  - url: https://events.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon EventBridge multi-region endpoint
  - url: http://events.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon EventBridge endpoint for China (Beijing) and China (Ningxia)
  - url: https://events.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon EventBridge endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ActivateEventSourceRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/EventSourceName"
    ResourceNotFoundException: {}
    InvalidStateException: {}
    InternalException: {}
    CreateEventBusResponse:
      type: object
      properties:
        EventBusArn:
          $ref: "#/components/schemas/String"
    CreateEventBusRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/EventBusName"
        EventSourceName:
          $ref: "#/components/schemas/EventSourceName"
    ResourceAlreadyExistsException: {}
    ConcurrentModificationException: {}
    LimitExceededException: {}
    CreatePartnerEventSourceResponse:
      type: object
      properties:
        EventSourceArn:
          $ref: "#/components/schemas/String"
    CreatePartnerEventSourceRequest:
      type: object
      required:
        - Name
        - Account
      properties:
        Name:
          $ref: "#/components/schemas/EventSourceName"
        Account:
          $ref: "#/components/schemas/AccountId"
    DeactivateEventSourceRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/EventSourceName"
    DeleteEventBusRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/EventBusName"
    DeletePartnerEventSourceRequest:
      type: object
      required:
        - Name
        - Account
      properties:
        Name:
          $ref: "#/components/schemas/EventSourceName"
        Account:
          $ref: "#/components/schemas/AccountId"
    DeleteRuleRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
        Force:
          $ref: "#/components/schemas/Boolean"
    ManagedRuleException: {}
    DescribeEventBusResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/String"
        Arn:
          $ref: "#/components/schemas/String"
        Policy:
          $ref: "#/components/schemas/String"
    DescribeEventBusRequest:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/EventBusName"
    DescribeEventSourceResponse:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/String"
        CreatedBy:
          $ref: "#/components/schemas/String"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        ExpirationTime:
          $ref: "#/components/schemas/Timestamp"
        Name:
          $ref: "#/components/schemas/String"
        State:
          $ref: "#/components/schemas/EventSourceState"
    DescribeEventSourceRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/EventSourceName"
    DescribePartnerEventSourceResponse:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/String"
        Name:
          $ref: "#/components/schemas/String"
    DescribePartnerEventSourceRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/EventSourceName"
    DescribeRuleResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        Arn:
          $ref: "#/components/schemas/RuleArn"
        EventPattern:
          $ref: "#/components/schemas/EventPattern"
        ScheduleExpression:
          $ref: "#/components/schemas/ScheduleExpression"
        State:
          $ref: "#/components/schemas/RuleState"
        Description:
          $ref: "#/components/schemas/RuleDescription"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        ManagedBy:
          $ref: "#/components/schemas/ManagedBy"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
    DescribeRuleRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
    DisableRuleRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
    EnableRuleRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
    ListEventBusesResponse:
      type: object
      properties:
        EventBuses:
          $ref: "#/components/schemas/EventBusList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListEventBusesRequest:
      type: object
      properties:
        NamePrefix:
          $ref: "#/components/schemas/EventBusName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    ListEventSourcesResponse:
      type: object
      properties:
        EventSources:
          $ref: "#/components/schemas/EventSourceList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListEventSourcesRequest:
      type: object
      properties:
        NamePrefix:
          $ref: "#/components/schemas/EventSourceNamePrefix"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    ListPartnerEventSourceAccountsResponse:
      type: object
      properties:
        PartnerEventSourceAccounts:
          $ref: "#/components/schemas/PartnerEventSourceAccountList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListPartnerEventSourceAccountsRequest:
      type: object
      required:
        - EventSourceName
      properties:
        EventSourceName:
          $ref: "#/components/schemas/EventSourceName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    ListPartnerEventSourcesResponse:
      type: object
      properties:
        PartnerEventSources:
          $ref: "#/components/schemas/PartnerEventSourceList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListPartnerEventSourcesRequest:
      type: object
      required:
        - NamePrefix
      properties:
        NamePrefix:
          $ref: "#/components/schemas/PartnerEventSourceNamePrefix"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    ListRuleNamesByTargetResponse:
      type: object
      properties:
        RuleNames:
          $ref: "#/components/schemas/RuleNameList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListRuleNamesByTargetRequest:
      type: object
      required:
        - TargetArn
      properties:
        TargetArn:
          $ref: "#/components/schemas/TargetArn"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    ListRulesResponse:
      type: object
      properties:
        Rules:
          $ref: "#/components/schemas/RuleResponseList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListRulesRequest:
      type: object
      properties:
        NamePrefix:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
    ListTagsForResourceRequest:
      type: object
      required:
        - ResourceARN
      properties:
        ResourceARN:
          $ref: "#/components/schemas/Arn"
    ListTargetsByRuleResponse:
      type: object
      properties:
        Targets:
          $ref: "#/components/schemas/TargetList"
        NextToken:
          $ref: "#/components/schemas/NextToken"
    ListTargetsByRuleRequest:
      type: object
      required:
        - Rule
      properties:
        Rule:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
        NextToken:
          $ref: "#/components/schemas/NextToken"
        Limit:
          $ref: "#/components/schemas/LimitMax100"
    PutEventsResponse:
      type: object
      properties:
        FailedEntryCount:
          $ref: "#/components/schemas/Integer"
        Entries:
          $ref: "#/components/schemas/PutEventsResultEntryList"
    PutEventsRequest:
      type: object
      required:
        - Entries
      properties:
        Entries:
          $ref: "#/components/schemas/PutEventsRequestEntryList"
    PutPartnerEventsResponse:
      type: object
      properties:
        FailedEntryCount:
          $ref: "#/components/schemas/Integer"
        Entries:
          $ref: "#/components/schemas/PutPartnerEventsResultEntryList"
    PutPartnerEventsRequest:
      type: object
      required:
        - Entries
      properties:
        Entries:
          $ref: "#/components/schemas/PutPartnerEventsRequestEntryList"
    PutPermissionRequest:
      type: object
      required:
        - Action
        - Principal
        - StatementId
      properties:
        EventBusName:
          $ref: "#/components/schemas/NonPartnerEventBusName"
        Action:
          $ref: "#/components/schemas/Action"
        Principal:
          $ref: "#/components/schemas/Principal"
        StatementId:
          $ref: "#/components/schemas/StatementId"
        Condition:
          $ref: "#/components/schemas/Condition"
    PolicyLengthExceededException: {}
    PutRuleResponse:
      type: object
      properties:
        RuleArn:
          $ref: "#/components/schemas/RuleArn"
    PutRuleRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        ScheduleExpression:
          $ref: "#/components/schemas/ScheduleExpression"
        EventPattern:
          $ref: "#/components/schemas/EventPattern"
        State:
          $ref: "#/components/schemas/RuleState"
        Description:
          $ref: "#/components/schemas/RuleDescription"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        Tags:
          $ref: "#/components/schemas/TagList"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
    InvalidEventPatternException: {}
    PutTargetsResponse:
      type: object
      properties:
        FailedEntryCount:
          $ref: "#/components/schemas/Integer"
        FailedEntries:
          $ref: "#/components/schemas/PutTargetsResultEntryList"
    PutTargetsRequest:
      type: object
      required:
        - Rule
        - Targets
      properties:
        Rule:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
        Targets:
          $ref: "#/components/schemas/TargetList"
    RemovePermissionRequest:
      type: object
      required:
        - StatementId
      properties:
        StatementId:
          $ref: "#/components/schemas/StatementId"
        EventBusName:
          $ref: "#/components/schemas/NonPartnerEventBusName"
    RemoveTargetsResponse:
      type: object
      properties:
        FailedEntryCount:
          $ref: "#/components/schemas/Integer"
        FailedEntries:
          $ref: "#/components/schemas/RemoveTargetsResultEntryList"
    RemoveTargetsRequest:
      type: object
      required:
        - Rule
        - Ids
      properties:
        Rule:
          $ref: "#/components/schemas/RuleName"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
        Ids:
          $ref: "#/components/schemas/TargetIdList"
        Force:
          $ref: "#/components/schemas/Boolean"
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - ResourceARN
        - Tags
      properties:
        ResourceARN:
          $ref: "#/components/schemas/Arn"
        Tags:
          $ref: "#/components/schemas/TagList"
    TestEventPatternResponse:
      type: object
      properties:
        Result:
          $ref: "#/components/schemas/Boolean"
    TestEventPatternRequest:
      type: object
      required:
        - EventPattern
        - Event
      properties:
        EventPattern:
          $ref: "#/components/schemas/EventPattern"
        Event:
          $ref: "#/components/schemas/String"
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - ResourceARN
        - TagKeys
      properties:
        ResourceARN:
          $ref: "#/components/schemas/Arn"
        TagKeys:
          $ref: "#/components/schemas/TagKeyList"
    AccountId:
      type: string
      pattern: \d{12}
      minLength: 12
      maxLength: 12
    Action:
      type: string
      pattern: events:[a-zA-Z]+
      minLength: 1
      maxLength: 64
    EventSourceName:
      type: string
      pattern: aws\.partner(/[\.\-_A-Za-z0-9]+){2,}
      minLength: 1
      maxLength: 256
    Arn:
      type: string
      minLength: 1
      maxLength: 1600
    AssignPublicIp:
      type: string
      enum:
        - ENABLED
        - DISABLED
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    AwsVpcConfiguration:
      type: object
      required:
        - Subnets
      properties:
        Subnets:
          $ref: "#/components/schemas/StringList"
        SecurityGroups:
          $ref: "#/components/schemas/StringList"
        AssignPublicIp:
          $ref: "#/components/schemas/AssignPublicIp"
      description: This structure specifies the VPC subnets and security groups for the
        task and whether a public IP address is to be used. This structure is
        relevant only for ECS tasks that use the <code>awsvpc</code> network
        mode.
    Integer:
      type: integer
    BatchArrayProperties:
      type: object
      properties:
        Size:
          $ref: "#/components/schemas/Integer"
      description: The array properties for the submitted job, such as the size of the
        array. The array size can be between 2 and 10,000. If you specify array
        properties for a job, it becomes an array job. This parameter is used
        only if the target is an AWS Batch job.
    String:
      type: string
    BatchRetryStrategy:
      type: object
      properties:
        Attempts:
          $ref: "#/components/schemas/Integer"
      description: The retry strategy to use for failed jobs if the target is an AWS Batch
        job. If you specify a retry strategy here, it overrides the retry
        strategy defined in the job definition.
    BatchParameters:
      type: object
      required:
        - JobDefinition
        - JobName
      properties:
        JobDefinition:
          $ref: "#/components/schemas/String"
        JobName:
          $ref: "#/components/schemas/String"
        ArrayProperties:
          $ref: "#/components/schemas/BatchArrayProperties"
        RetryStrategy:
          $ref: "#/components/schemas/BatchRetryStrategy"
      description: The custom parameters to be used when the target is an AWS Batch job.
    Boolean:
      type: boolean
    Condition:
      type: object
      required:
        - Type
        - Key
        - Value
      properties:
        Type:
          $ref: "#/components/schemas/String"
        Key:
          $ref: "#/components/schemas/String"
        Value:
          $ref: "#/components/schemas/String"
      description: "<p>A JSON string that you can use to limit the event bus permissions
        that you're granting to only accounts that fulfill the condition.
        Currently, the only supported condition is membership in a certain AWS
        organization. The string must contain <code>Type</code>,
        <code>Key</code>, and <code>Value</code> fields. The <code>Value</code>
        field specifies the ID of the AWS organization. The following is an
        example value for <code>Condition</code>:</p> <p> <code>'{\"Type\" :
        \"StringEquals\", \"Key\": \"aws:PrincipalOrgID\", \"Value\":
        \"o-1234567890\"}'</code> </p>"
    EventBusName:
      type: string
      pattern: "[/\\.\\-_A-Za-z0-9]+"
      minLength: 1
      maxLength: 256
    RuleName:
      type: string
      pattern: "[\\.\\-_A-Za-z0-9]+"
      minLength: 1
      maxLength: 64
    Timestamp:
      type: string
      format: date-time
    EventSourceState:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - DELETED
    RuleArn:
      type: string
      minLength: 1
      maxLength: 1600
    EventPattern:
      type: string
    ScheduleExpression:
      type: string
      maxLength: 256
    RuleState:
      type: string
      enum:
        - ENABLED
        - DISABLED
    RuleDescription:
      type: string
      maxLength: 512
    RoleArn:
      type: string
      minLength: 1
      maxLength: 1600
    ManagedBy:
      type: string
      minLength: 1
      maxLength: 128
    LimitMin1:
      type: integer
      minimum: 1
    LaunchType:
      type: string
      enum:
        - EC2
        - FARGATE
    NetworkConfiguration:
      type: object
      properties:
        awsvpcConfiguration:
          $ref: "#/components/schemas/AwsVpcConfiguration"
      description: This structure specifies the network configuration for an ECS task.
    EcsParameters:
      type: object
      required:
        - TaskDefinitionArn
      properties:
        TaskDefinitionArn:
          $ref: "#/components/schemas/Arn"
        TaskCount:
          $ref: "#/components/schemas/LimitMin1"
        LaunchType:
          $ref: "#/components/schemas/LaunchType"
        NetworkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        PlatformVersion:
          $ref: "#/components/schemas/String"
        Group:
          $ref: "#/components/schemas/String"
      description: The custom parameters to be used when the target is an Amazon ECS task.
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    EventBus:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/String"
        Arn:
          $ref: "#/components/schemas/String"
        Policy:
          $ref: "#/components/schemas/String"
      description: An event bus receives events from a source and routes them to rules
        associated with that event bus. Your account's default event bus
        receives rules from AWS services. A custom event bus can receive rules
        from AWS services as well as your custom applications and services. A
        partner event bus receives events from an event source created by an
        SaaS partner. These events come from the partners services or
        applications.
    EventBusList:
      type: array
      items:
        $ref: "#/components/schemas/EventBus"
    EventId:
      type: string
    EventResource:
      type: string
    EventResourceList:
      type: array
      items:
        $ref: "#/components/schemas/EventResource"
    EventSource:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/String"
        CreatedBy:
          $ref: "#/components/schemas/String"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        ExpirationTime:
          $ref: "#/components/schemas/Timestamp"
        Name:
          $ref: "#/components/schemas/String"
        State:
          $ref: "#/components/schemas/EventSourceState"
      description: A partner event source is created by an SaaS partner. If a customer
        creates a partner event bus that matches this event source, that AWS
        account can receive events from the partner's applications or services.
    EventSourceList:
      type: array
      items:
        $ref: "#/components/schemas/EventSource"
    EventSourceNamePrefix:
      type: string
      pattern: "[/\\.\\-_A-Za-z0-9]+"
      minLength: 1
      maxLength: 256
    EventTime:
      type: string
      format: date-time
    TransformerPaths:
      type: object
      maxProperties: 10
      additionalProperties:
        $ref: "#/components/schemas/TargetInputPath"
    TransformerInput:
      type: string
      minLength: 1
      maxLength: 8192
    InputTransformer:
      type: object
      required:
        - InputTemplate
      properties:
        InputPathsMap:
          $ref: "#/components/schemas/TransformerPaths"
        InputTemplate:
          $ref: "#/components/schemas/TransformerInput"
      description: Contains the parameters needed for you to provide custom input to a
        target based on one or more pieces of data extracted from the event.
    InputTransformerPathKey:
      type: string
      pattern: "[A-Za-z0-9\\_\\-]+"
      minLength: 1
      maxLength: 256
    TargetPartitionKeyPath:
      type: string
      maxLength: 256
    KinesisParameters:
      type: object
      required:
        - PartitionKeyPath
      properties:
        PartitionKeyPath:
          $ref: "#/components/schemas/TargetPartitionKeyPath"
      description: This object enables you to specify a JSON path to extract from the event
        and use as the partition key for the Amazon Kinesis data stream so that
        you can control the shard that the event goes to. If you don't include
        this parameter, the default is to use the <code>eventId</code> as the
        partition key.
    LimitMax100:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      minLength: 1
      maxLength: 2048
    PartnerEventSourceAccountList:
      type: array
      items:
        $ref: "#/components/schemas/PartnerEventSourceAccount"
    PartnerEventSourceNamePrefix:
      type: string
      pattern: aws\.partner/[\.\-_A-Za-z0-9]+/[/\.\-_A-Za-z0-9]*
      minLength: 1
      maxLength: 256
    PartnerEventSourceList:
      type: array
      items:
        $ref: "#/components/schemas/PartnerEventSource"
    TargetArn:
      type: string
      minLength: 1
      maxLength: 1600
    RuleNameList:
      type: array
      items:
        $ref: "#/components/schemas/RuleName"
    RuleResponseList:
      type: array
      items:
        $ref: "#/components/schemas/Rule"
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    TargetList:
      type: array
      items:
        $ref: "#/components/schemas/Target"
      minItems: 1
      maxItems: 100
    MessageGroupId:
      type: string
    NonPartnerEventBusName:
      type: string
      pattern: "[\\.\\-_A-Za-z0-9]+"
      minLength: 1
      maxLength: 256
    PartnerEventSource:
      type: object
      properties:
        Arn:
          $ref: "#/components/schemas/String"
        Name:
          $ref: "#/components/schemas/String"
      description: A partner event source is created by an SaaS partner. If a customer
        creates a partner event bus that matches this event source, that AWS
        account can receive events from the partner's applications or services.
    PartnerEventSourceAccount:
      type: object
      properties:
        Account:
          $ref: "#/components/schemas/AccountId"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        ExpirationTime:
          $ref: "#/components/schemas/Timestamp"
        State:
          $ref: "#/components/schemas/EventSourceState"
      description: The AWS account that a partner event source has been offered to.
    Principal:
      type: string
      pattern: (\d{12}|\*)
      minLength: 1
      maxLength: 12
    PutEventsRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutEventsRequestEntry"
      minItems: 1
      maxItems: 10
    PutEventsRequestEntry:
      type: object
      properties:
        Time:
          $ref: "#/components/schemas/EventTime"
        Source:
          $ref: "#/components/schemas/String"
        Resources:
          $ref: "#/components/schemas/EventResourceList"
        DetailType:
          $ref: "#/components/schemas/String"
        Detail:
          $ref: "#/components/schemas/String"
        EventBusName:
          $ref: "#/components/schemas/NonPartnerEventBusName"
      description: Represents an event to be submitted.
    PutEventsResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutEventsResultEntry"
    PutEventsResultEntry:
      type: object
      properties:
        EventId:
          $ref: "#/components/schemas/EventId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Represents an event that failed to be submitted.
    PutPartnerEventsRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutPartnerEventsRequestEntry"
      minItems: 1
      maxItems: 20
    PutPartnerEventsRequestEntry:
      type: object
      properties:
        Time:
          $ref: "#/components/schemas/EventTime"
        Source:
          $ref: "#/components/schemas/String"
        Resources:
          $ref: "#/components/schemas/EventResourceList"
        DetailType:
          $ref: "#/components/schemas/String"
        Detail:
          $ref: "#/components/schemas/String"
      description: The details about an event generated by an SaaS partner.
    PutPartnerEventsResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutPartnerEventsResultEntry"
    PutPartnerEventsResultEntry:
      type: object
      properties:
        EventId:
          $ref: "#/components/schemas/EventId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Represents an event that a partner tried to generate but failed.
    StatementId:
      type: string
      pattern: "[a-zA-Z0-9-_]+"
      minLength: 1
      maxLength: 64
    PutTargetsResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/PutTargetsResultEntry"
    TargetId:
      type: string
      pattern: "[\\.\\-_A-Za-z0-9]+"
      minLength: 1
      maxLength: 64
    PutTargetsResultEntry:
      type: object
      properties:
        TargetId:
          $ref: "#/components/schemas/TargetId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Represents a target that failed to be added to a rule.
    TargetIdList:
      type: array
      items:
        $ref: "#/components/schemas/TargetId"
      minItems: 1
      maxItems: 100
    RemoveTargetsResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/RemoveTargetsResultEntry"
    RemoveTargetsResultEntry:
      type: object
      properties:
        TargetId:
          $ref: "#/components/schemas/TargetId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Represents a target that failed to be removed from a rule.
    Rule:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/RuleName"
        Arn:
          $ref: "#/components/schemas/RuleArn"
        EventPattern:
          $ref: "#/components/schemas/EventPattern"
        State:
          $ref: "#/components/schemas/RuleState"
        Description:
          $ref: "#/components/schemas/RuleDescription"
        ScheduleExpression:
          $ref: "#/components/schemas/ScheduleExpression"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        ManagedBy:
          $ref: "#/components/schemas/ManagedBy"
        EventBusName:
          $ref: "#/components/schemas/EventBusName"
      description: Contains information about a rule in Amazon EventBridge.
    RunCommandTargets:
      type: array
      items:
        $ref: "#/components/schemas/RunCommandTarget"
      minItems: 1
      maxItems: 5
    RunCommandParameters:
      type: object
      required:
        - RunCommandTargets
      properties:
        RunCommandTargets:
          $ref: "#/components/schemas/RunCommandTargets"
      description: "This parameter contains the criteria (either <code>InstanceIds</code>
        or a tag) used to specify which EC2 instances are to be sent the
        command. "
    RunCommandTargetKey:
      type: string
      pattern: ^[\p{L}\p{Z}\p{N}_.:/=+\-@]*$
      minLength: 1
      maxLength: 128
    RunCommandTargetValues:
      type: array
      items:
        $ref: "#/components/schemas/RunCommandTargetValue"
      minItems: 1
      maxItems: 50
    RunCommandTarget:
      type: object
      required:
        - Key
        - Values
      properties:
        Key:
          $ref: "#/components/schemas/RunCommandTargetKey"
        Values:
          $ref: "#/components/schemas/RunCommandTargetValues"
      description: Information about the EC2 instances that are to be sent the command,
        specified as key-value pairs. Each <code>RunCommandTarget</code> block
        can include only one key, but this key can specify multiple values.
    RunCommandTargetValue:
      type: string
      minLength: 1
      maxLength: 256
    SqsParameters:
      type: object
      properties:
        MessageGroupId:
          $ref: "#/components/schemas/MessageGroupId"
      description: This structure includes the custom parameter to be used when the target
        is an SQS FIFO queue.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: A key-value pair associated with an AWS resource. In EventBridge, rules
        support tagging.
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    TargetInput:
      type: string
      maxLength: 8192
    TargetInputPath:
      type: string
      maxLength: 256
    Target:
      type: object
      required:
        - Id
        - Arn
      properties:
        Id:
          $ref: "#/components/schemas/TargetId"
        Arn:
          $ref: "#/components/schemas/TargetArn"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        Input:
          $ref: "#/components/schemas/TargetInput"
        InputPath:
          $ref: "#/components/schemas/TargetInputPath"
        InputTransformer:
          $ref: "#/components/schemas/InputTransformer"
        KinesisParameters:
          $ref: "#/components/schemas/KinesisParameters"
        RunCommandParameters:
          $ref: "#/components/schemas/RunCommandParameters"
        EcsParameters:
          $ref: "#/components/schemas/EcsParameters"
        BatchParameters:
          $ref: "#/components/schemas/BatchParameters"
        SqsParameters:
          $ref: "#/components/schemas/SqsParameters"
      description: <p>Targets are the resources to be invoked when a rule is triggered. For
        a complete list of services and resources that can be set as a target,
        see <a>PutTargets</a>.</p> <p>If you're setting the event bus of another
        account as the target and that account granted permission to your
        account through an organization instead of directly by the account ID,
        you must specify a <code>RoleArn</code> with proper permissions in the
        <code>Target</code> structure. For more information, see <a
        href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
        and Receiving Events Between AWS Accounts</a> in the <i>Amazon
        EventBridge User Guide</i>.</p>
