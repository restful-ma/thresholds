openapi: 3.0.0
info:
  description: Open Source GPS Tracking Platform
  title: traccar
  version: "4.6"
  x-apisguru-categories:
    - location
  x-logo:
    url: https://pbs.twimg.com/profile_images/590395195268538368/oScd6DxA_400x400.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/tananaev/traccar/master/swagger.json
      version: "2.0"
  x-providerName: traccar.org
security:
  - basicAuth: []
paths:
  /attributes/computed:
    get:
      description: Without params, it returns a list of Attributes the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/deviceId"
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/refresh"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Attribute"
                type: array
      summary: Fetch a list of Attributes
    post:
      requestBody:
        $ref: "#/components/requestBodies/Attribute"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
      summary: Create an Attribute
  "/attributes/computed/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete an Attribute
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Attribute"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
      summary: Update an Attribute
  /calendars:
    get:
      description: Without params, it returns a list of Calendars the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Calendar"
                type: array
      summary: Fetch a list of Calendars
    post:
      requestBody:
        $ref: "#/components/requestBodies/Calendar"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
      summary: Create a Calendar
  "/calendars/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Calendar
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Calendar"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
      summary: Update a Calendar
  /commands:
    get:
      description: Without params, it returns a list of Drivers the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/deviceId"
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/refresh"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Command"
                type: array
      summary: Fetch a list of Saved Commands
    post:
      requestBody:
        $ref: "#/components/requestBodies/Command"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
      summary: Create a Saved Command
  /commands/send:
    get:
      description: Return a list of saved commands linked to Device and its groups,
        filtered by current Device protocol support
      parameters:
        - $ref: "#/components/parameters/deviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Command"
                type: array
        "400":
          description: Could happen when the user doesn't have permission for the device
      summary: Fetch a list of Saved Commands supported by Device at the moment
    post:
      description: Dispatch a new command or Saved Command if _body.id_ set
      requestBody:
        $ref: "#/components/requestBodies/Command"
      responses:
        "200":
          description: Command sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
        "202":
          description: Command queued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
        "400":
          description: Could happen when the user doesn't have permission or an incorrect
            command _type_ for the device
      summary: Dispatch commands to device
  /commands/types:
    get:
      parameters:
        - description: Internal device identifier. Only works if device has already
            reported some locations
          in: query
          name: deviceId
          required: false
          schema:
            type: integer
        - description: Protocol name. Can be used instead of device id
          in: query
          name: protocol
          required: false
          schema:
            type: string
        - description: When `true` return SMS commands. If not specified or `false` return
            data commands
          in: query
          name: textChannel
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CommandType"
                type: array
        "400":
          description: Could happen when trying to fetch from a device the user does not
            have permission
      summary: Fetch a list of available Commands for the Device or all possible
        Commands if Device ommited
  "/commands/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Saved Command
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Command"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
      summary: Update a Saved Command
  /devices:
    get:
      description: Without any params, returns a list of the user's devices
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - description: To fetch one or more devices. Multiple params can be passed like
            `id=31&id=42`
          in: query
          name: id
          required: false
          schema:
            type: integer
        - description: To fetch one or more devices. Multiple params can be passed like
            `uniqueId=333331&uniqieId=44442`
          in: query
          name: uniqueId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Device"
                type: array
        "400":
          description: No permission
      summary: Fetch a list of Devices
    post:
      requestBody:
        $ref: "#/components/requestBodies/Device"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      summary: Create a Device
  "/devices/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Device
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Device"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      summary: Update a Device
  "/devices/{id}/accumulators":
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceAccumulators"
        required: true
      responses:
        "204":
          description: No Content
      summary: Update total distance and hours of the Device
  /drivers:
    get:
      description: Without params, it returns a list of Drivers the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/deviceId"
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/refresh"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Driver"
                type: array
      summary: Fetch a list of Drivers
    post:
      requestBody:
        $ref: "#/components/requestBodies/Driver"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
      summary: Create a Driver
  "/drivers/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Driver
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Driver"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
      summary: Update a Driver
  "/events/{id}":
    get:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
  /geofences:
    get:
      description: Without params, it returns a list of Geofences the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/deviceId"
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/refresh"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Geofence"
                type: array
      summary: Fetch a list of Geofences
    post:
      requestBody:
        $ref: "#/components/requestBodies/Geofence"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
      summary: Create a Geofence
  "/geofences/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Geofence
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Geofence"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
      summary: Update a Geofence
  /groups:
    get:
      description: Without any params, returns a list of the Groups the user belongs to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Group"
                type: array
      summary: Fetch a list of Groups
    post:
      requestBody:
        $ref: "#/components/requestBodies/Group"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: No permission
      summary: Create a Group
  "/groups/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Group
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Group"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
      summary: Update a Group
  /maintenance:
    get:
      description: Without params, it returns a list of Maintenance the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/deviceId"
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/refresh"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Maintenance"
                type: array
      summary: Fetch a list of Maintenance
    post:
      requestBody:
        $ref: "#/components/requestBodies/Maintenance"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
      summary: Create a Maintenance
  "/maintenance/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Maintenance
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Maintenance"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
      summary: Update a Maintenance
  /notifications:
    get:
      description: Without params, it returns a list of Notifications the user has access to
      parameters:
        - $ref: "#/components/parameters/all"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/deviceId"
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/refresh"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Notification"
                type: array
      summary: Fetch a list of Notifications
    post:
      requestBody:
        $ref: "#/components/requestBodies/Notification"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
      summary: Create a Notification
  /notifications/test:
    post:
      responses:
        "204":
          description: Successful sending
        "400":
          description: Could happen if sending has failed
      summary: Send test notification to current user via Email and SMS
  /notifications/types:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/NotificationType"
                type: array
      summary: Fetch a list of available Notification types
  "/notifications/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a Notification
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/Notification"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
      summary: Update a Notification
  /permissions:
    delete:
      requestBody:
        $ref: "#/components/requestBodies/Permission"
      responses:
        "204":
          description: No Content
      summary: Unlink an Object from another Object
    post:
      requestBody:
        $ref: "#/components/requestBodies/Permission"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
        "400":
          description: No permission
      summary: Link an Object to another Object
  /positions:
    get:
      description: Without any params, it returns a list of last known positions for all
        the user's Devices. _from_ and _to_ fields are not required with _id_
      parameters:
        - description: _deviceId_ is optional, but requires the _from_ and _to_ parameters
            when used
          in: query
          name: deviceId
          required: false
          schema:
            type: integer
        - description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          in: query
          name: from
          required: false
          schema:
            type: string
            format: date-time
        - description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          in: query
          name: to
          required: false
          schema:
            type: string
            format: date-time
        - description: To fetch one or more positions. Multiple params can be passed like
            `id=31&id=42`
          in: query
          name: id
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Position"
                type: array
            text/csv:
              schema:
                items:
                  $ref: "#/components/schemas/Position"
                type: array
            application/gpx+xml:
              schema:
                items:
                  $ref: "#/components/schemas/Position"
                type: array
      summary: Fetches a list of Positions
  /reports/events:
    get:
      description: At least one _deviceId_ or one _groupId_ must be passed
      parameters:
        - $ref: "#/components/parameters/deviceIdArray"
        - $ref: "#/components/parameters/groupIdArray"
        - description: "% can be used to return events of all types"
          in: query
          name: type
          schema:
            type: array
            items:
              type: string
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
      summary: Fetch a list of Events within the time period for the Devices or Groups
  /reports/route:
    get:
      description: At least one _deviceId_ or one _groupId_ must be passed
      parameters:
        - $ref: "#/components/parameters/deviceIdArray"
        - $ref: "#/components/parameters/groupIdArray"
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Position"
                type: array
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                items:
                  $ref: "#/components/schemas/Position"
                type: array
      summary: Fetch a list of Positions within the time period for the Devices or
        Groups
  /reports/stops:
    get:
      description: At least one _deviceId_ or one _groupId_ must be passed
      parameters:
        - $ref: "#/components/parameters/deviceIdArray"
        - $ref: "#/components/parameters/groupIdArray"
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReportStops"
                type: array
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                items:
                  $ref: "#/components/schemas/ReportStops"
                type: array
      summary: Fetch a list of ReportStops within the time period for the Devices or
        Groups
  /reports/summary:
    get:
      description: At least one _deviceId_ or one _groupId_ must be passed
      parameters:
        - $ref: "#/components/parameters/deviceIdArray"
        - $ref: "#/components/parameters/groupIdArray"
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReportSummary"
                type: array
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                items:
                  $ref: "#/components/schemas/ReportSummary"
                type: array
      summary: Fetch a list of ReportSummary within the time period for the Devices or
        Groups
  /reports/trips:
    get:
      description: At least one _deviceId_ or one _groupId_ must be passed
      parameters:
        - $ref: "#/components/parameters/deviceIdArray"
        - $ref: "#/components/parameters/groupIdArray"
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReportTrips"
                type: array
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                items:
                  $ref: "#/components/schemas/ReportTrips"
                type: array
      summary: Fetch a list of ReportTrips within the time period for the Devices or
        Groups
  /server:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"
      summary: Fetch Server information
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Server"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"
      summary: Update Server information
  /session:
    delete:
      responses:
        "204":
          description: No Content
      summary: Close the Session
    get:
      parameters:
        - in: query
          name: token
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not Found
      summary: Fetch Session information
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
      summary: Create a new Session
  /statistics:
    get:
      parameters:
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Statistics"
                type: array
      summary: Fetch server Statistics
  /users:
    get:
      parameters:
        - description: Can only be used by admin or manager users
          in: query
          name: userId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                type: array
        "400":
          description: No Permission
      summary: Fetch a list of Users
    post:
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      summary: Create a User
  "/users/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/entityId"
      responses:
        "204":
          description: No Content
      summary: Delete a User
    put:
      parameters:
        - $ref: "#/components/parameters/entityId"
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      summary: Update a User
servers:
  - url: http://demo.traccar.org/api
components:
  parameters:
    all:
      description: Can only be used by admins or managers to fetch all entities
      in: query
      name: all
      schema:
        type: boolean
    deviceId:
      description: Standard users can use this only with _deviceId_s, they have access to
      in: query
      name: deviceId
      schema:
        type: integer
    deviceIdArray:
      in: query
      name: deviceId
      explode: true
      schema:
        type: array
        items:
          type: integer
    entityId:
      in: path
      name: id
      required: true
      schema:
        type: integer
    fromTime:
      description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
      in: query
      name: from
      required: true
      schema:
        type: string
        format: date-time
    groupId:
      description: Standard users can use this only with _groupId_s, they have access to
      in: query
      name: groupId
      schema:
        type: integer
    groupIdArray:
      in: query
      name: groupId
      explode: true
      schema:
        type: array
        items:
          type: integer
    refresh:
      in: query
      name: refresh
      required: false
      schema:
        type: boolean
    toTime:
      description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
      in: query
      name: to
      required: true
      schema:
        type: string
        format: date-time
    userId:
      description: Standard users can use this only with their own _userId_
      in: query
      name: userId
      schema:
        type: integer
  requestBodies:
    Calendar:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Calendar"
      required: true
    Geofence:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Geofence"
      required: true
    Device:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Device"
      required: true
    Command:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Command"
      required: true
    Notification:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
      required: true
    Permission:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Permission"
      required: true
    Attribute:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attribute"
      required: true
    Driver:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Driver"
      required: true
    Group:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
      required: true
    Maintenance:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Maintenance"
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      required: true
  securitySchemes:
    basicAuth:
      description: Basic HTTP authorization with _email_ and _password_
      type: http
      scheme: basic
  schemas:
    Attribute:
      properties:
        attribute:
          type: string
        description:
          type: string
        expression:
          type: string
        id:
          type: integer
        type:
          description: String|Number|Boolean
          type: string
    Calendar:
      properties:
        attributes:
          additionalProperties: true
          type: object
        data:
          description: base64 encoded in iCalendar format
          type: string
        id:
          type: integer
        name:
          type: string
    Command:
      properties:
        attributes:
          additionalProperties: true
          type: object
        description:
          type: string
        deviceId:
          type: integer
        id:
          type: integer
        type:
          type: string
    CommandType:
      properties:
        type:
          type: string
    Device:
      properties:
        attributes:
          additionalProperties: true
          type: object
        category:
          type: string
        contact:
          type: string
        disabled:
          type: boolean
        geofenceIds:
          items:
            type: integer
          type: array
        groupId:
          type: integer
        id:
          type: integer
        lastUpdate:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        model:
          type: string
        name:
          type: string
        phone:
          type: string
        positionId:
          type: integer
        status:
          type: string
        uniqueId:
          type: string
    DeviceAccumulators:
      properties:
        deviceId:
          type: integer
        hours:
          type: number
        totalDistance:
          description: in meters
          type: number
    Driver:
      properties:
        attributes:
          additionalProperties: true
          type: object
        id:
          type: integer
        name:
          type: string
        uniqueId:
          type: string
    Event:
      properties:
        attributes:
          additionalProperties: true
          type: object
        deviceId:
          type: integer
        geofenceId:
          type: integer
        id:
          type: integer
        maintenanceId:
          type: integer
        positionId:
          type: integer
        serverTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        type:
          type: string
    Geofence:
      properties:
        area:
          type: string
        attributes:
          additionalProperties: true
          type: object
        calendarId:
          type: integer
        description:
          type: string
        id:
          type: integer
        name:
          type: string
    Group:
      properties:
        attributes:
          additionalProperties: true
          type: object
        groupId:
          type: integer
        id:
          type: integer
        name:
          type: string
    Maintenance:
      properties:
        attributes:
          additionalProperties: true
          type: object
        id:
          type: integer
        name:
          type: string
        period:
          type: number
        start:
          type: number
        type:
          type: string
    Notification:
      properties:
        always:
          type: boolean
        attributes:
          additionalProperties: true
          type: object
        calendarId:
          type: integer
        id:
          type: integer
        mail:
          type: boolean
        sms:
          type: boolean
        type:
          type: string
        web:
          type: boolean
    NotificationType:
      properties:
        type:
          type: string
    Permission:
      description: "This is a permission map that contain two object indexes. It is used to
        link/unlink objects. Order is important. Example: { deviceId:8,
        geofenceId: 16 }"
      properties:
        attributeId:
          description: Computed Attribute Id, can be second parameter only
          type: integer
        calendarId:
          description: Calendar Id, can be second parameter only and only in combination
            with userId
          type: integer
        deviceId:
          description: Device Id, can be first parameter or second only in combination with
            userId
          type: integer
        driverId:
          description: Driver Id, can be second parameter only
          type: integer
        geofenceId:
          description: Geofence Id, can be second parameter only
          type: integer
        groupId:
          description: Group Id, can be first parameter or second only in combination with
            userId
          type: integer
        managedUserId:
          description: User Id, can be second parameter only and only in combination with
            userId
          type: integer
        userId:
          description: User Id, can be only first parameter
          type: integer
    Position:
      properties:
        accuracy:
          type: number
        address:
          type: string
        altitude:
          type: number
        attributes:
          additionalProperties: true
          type: object
        course:
          type: number
        deviceId:
          type: integer
        deviceTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        fixTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        id:
          type: integer
        latitude:
          type: number
        longitude:
          type: number
        network:
          type: string
        outdated:
          type: boolean
        protocol:
          type: string
        serverTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        speed:
          description: in knots
          type: number
        valid:
          type: boolean
    ReportStops:
      properties:
        address:
          type: string
        deviceId:
          type: integer
        deviceName:
          type: string
        duration:
          type: integer
        endTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        engineHours:
          type: integer
        lat:
          type: number
        lon:
          type: number
        spentFuel:
          description: in liters
          type: number
        startTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
    ReportSummary:
      properties:
        averageSpeed:
          description: in knots
          type: number
        deviceId:
          type: integer
        deviceName:
          type: string
        distance:
          description: in meters
          type: number
        engineHours:
          type: integer
        maxSpeed:
          description: in knots
          type: number
        spentFuel:
          description: in liters
          type: number
    ReportTrips:
      properties:
        averageSpeed:
          description: in knots
          type: number
        deviceId:
          type: integer
        deviceName:
          type: string
        distance:
          description: in meters
          type: number
        driverName:
          type: string
        driverUniqueId:
          type: integer
        duration:
          type: integer
        endAddress:
          type: string
        endLat:
          type: number
        endLon:
          type: number
        endTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        maxSpeed:
          description: in knots
          type: number
        spentFuel:
          description: in liters
          type: number
        startAddress:
          type: string
        startLat:
          type: number
        startLon:
          type: number
        startTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
    Server:
      properties:
        attributes:
          additionalProperties: true
          type: object
        bingKey:
          type: string
        coordinateFormat:
          type: string
        deviceReadonly:
          type: boolean
        forceSettings:
          type: boolean
        id:
          type: integer
        latitude:
          type: number
        limitCommands:
          type: boolean
        longitude:
          type: number
        map:
          type: string
        mapUrl:
          type: string
        poiLayer:
          type: string
        readonly:
          type: boolean
        registration:
          type: boolean
        twelveHourFormat:
          type: boolean
        version:
          type: string
        zoom:
          type: integer
    Statistics:
      properties:
        activeDevices:
          type: integer
        activeUsers:
          type: integer
        captureTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        messagesReceived:
          type: integer
        messagesStored:
          type: integer
        requests:
          type: integer
    User:
      properties:
        administrator:
          type: boolean
        attributes:
          additionalProperties: true
          type: object
        coordinateFormat:
          type: string
        deviceLimit:
          type: integer
        deviceReadonly:
          type: boolean
        disabled:
          type: boolean
        email:
          type: string
        expirationTime:
          description: in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          type: string
        id:
          type: integer
        latitude:
          type: number
        limitCommands:
          type: boolean
        longitude:
          type: number
        map:
          type: string
        name:
          type: string
        password:
          type: string
        poiLayer:
          type: string
        readonly:
          type: boolean
        token:
          type: string
        twelveHourFormat:
          type: boolean
        userLimit:
          type: integer
        zoom:
          type: integer
