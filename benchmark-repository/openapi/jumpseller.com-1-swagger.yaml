openapi: 3.0.0
info:
  contact:
    x-twitter: jumpseller
  description: Explore all our endpoints with your own set of of access tokens. All changes
    affect your production Jumpseller store.
  title: Jumpseller API
  version: "1"
  x-apisguru-categories:
    - ecommerce
  x-logo:
    url: https://twitter.com/jumpseller/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://api.jumpseller.com/swagger.json
      version: "2.0"
  x-providerName: jumpseller.com
paths:
  /categories.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
      summary: Retrieve all Categories.
      tags:
        - Categories
    post:
      description: Category's permalink is automatically generated from the given
        category's name.
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        description: Category parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryEdit"
      summary: Create a new Category.
      tags:
        - Categories
  /categories/count.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
      summary: Count all Categories.
      tags:
        - Categories
  "/categories/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Category
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Category Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing Category.
      tags:
        - Categories
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Category
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: The selected Category.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Category.
      tags:
        - Categories
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Category
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryEdit"
        description: Category parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Modify an existing Category.
      tags:
        - Categories
  /checkout_custom_fields.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/PageParam"
      responses:
        "200":
          description: An array of Checkout Custom Fields
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CheckoutCustomField"
                type: array
      summary: Retrieve all Checkout Custom Fields.
      tags:
        - Checkout Custom Fields
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        $ref: "#/components/requestBodies/CheckoutCustomFieldEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CheckoutCustomField"
                type: array
        "404":
          description: CheckoutCustomField Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new CheckoutCustomField.
      tags:
        - Checkout Custom Fields
  "/checkout_custom_fields/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CheckoutCustomField
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: CheckoutCustomField Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing CheckoutCustomField.
      tags:
        - Checkout Custom Fields
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CheckoutCustomField
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutCustomField"
        "404":
          description: CheckoutCustomField Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single CheckoutCustomField.
      tags:
        - Checkout Custom Fields
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CheckoutCustomField
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/CheckoutCustomFieldEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CheckoutCustomField"
                type: array
        "404":
          description: CheckoutCustomField Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Update a CheckoutCustomField.
      tags:
        - Checkout Custom Fields
  /countries.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: An array of Countries
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Country"
                type: array
      summary: Retrieve all Countries.
      tags:
        - Countries
  "/countries/{country_code}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ISO3166 Country Code
          in: path
          name: country_code
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: A Country information object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        "404":
          description: Country Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Country information.
      tags:
        - Countries
  "/countries/{country_code}/regions.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ISO3166 Country Code
          in: path
          name: country_code
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: An array of Regions from a single Country
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Region"
                type: array
        "404":
          description: Country Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve all Regions from a single Country.
      tags:
        - Countries
        - Regions
  "/countries/{country_code}/regions/{region_code}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ISO3166 Country Code
          in: path
          name: country_code
          required: true
          schema:
            type: string
            format: string
        - description: Region Code
          in: path
          name: region_code
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: A Region information object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Region"
        "404":
          description: Country or Region not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Region information object.
      tags:
        - Countries
        - Regions
  /customer_categories.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/PageParam"
      responses:
        "200":
          description: An array of Customer Categories
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCategory"
                type: array
      summary: Retrieve all Customer Categories.
      tags:
        - Customer Categories
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        $ref: "#/components/requestBodies/CustomerCategoryEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCategory"
                type: array
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new CustomerCategory.
      tags:
        - Customer Categories
  "/customer_categories/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CustomerCategory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing CustomerCategory.
      tags:
        - Customer Categories
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CustomerCategory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCategory"
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single CustomerCategory.
      tags:
        - Customer Categories
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CustomerCategory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/CustomerCategoryEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerCategory"
                type: array
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Update a CustomerCategory.
      tags:
        - Customer Categories
  "/customer_categories/{id}/customers.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CustomerCategory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete Customers from an existing CustomerCategory.
      tags:
        - Customer Categories
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CustomerCategory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieves the customers in a CustomerCategory.
      tags:
        - Customer Categories
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the CustomerCategory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        description: Customer parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
        "404":
          description: CustomerCategory Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Adds Customers to a CustomerCategory.
      tags:
        - Customer Categories
  /customers.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/PageParam"
      responses:
        "200":
          description: An array of Orders
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
      summary: Retrieve all Customers.
      tags:
        - Customers
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerWithPasswordNoID"
        description: Customer parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Customer.
      tags:
        - Customers
  /customers/count.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
      summary: Count all Customers.
      tags:
        - Customers
  "/customers/email/{email}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Email of the Customer
          in: path
          name: email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Customer.
      tags:
        - Customers
  "/customers/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Customer
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing Category.
      tags:
        - Customers
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Customer
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Customer.
      tags:
        - Customers
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Customer
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerWithPassword"
        description: Customer parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Update a new Customer.
      tags:
        - Customers
  "/customers/{id}/fields":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Customer
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerAdditionalField"
                type: array
        "404":
          description: Customer doesn't have additional fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieves the Customer Additional Field of a Customer.
      tags:
        - Customer Additional Fields
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Customer
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerAdditionalFieldEdit"
        description: Customer Additional Field parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerAdditionalField"
                type: array
        "404":
          description: Customer Additional Field Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Adds Customer Additional Fields to a Customer.
      tags:
        - Customer Additional Fields
  "/customers/{id}/fields/{field_id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/CustomerIDParam"
        - description: Id of the Customer Additional Field
          in: path
          name: field_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete a Customer Additional Field.
      tags:
        - Customer Additional Fields
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Customer
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the Customer Additional Field
          in: path
          name: field_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerAdditionalField"
                type: array
        "404":
          description: Customer Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Customer Additional Field.
      tags:
        - Customer Additional Fields
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/CustomerIDParam"
        - description: Id of the Customer Additional Field
          in: path
          name: field_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerAdditionalField"
        "400":
          description: Customer Additional Field Bad Parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadParams"
        "404":
          description: Customer Additional Field Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Update a Customer Additional Field.
      tags:
        - Customer Additional Fields
  /fields.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: An array of Custom Fields
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Field"
                type: array
      summary: Retrieve all Store's Custom Fields.
      tags:
        - Custom Fields
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Field"
        description: Custom Field parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Field"
                type: array
      summary: Create a new Custom Field.
      tags:
        - Custom Fields
  /hooks.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/PageParam"
      responses:
        "200":
          description: An array of Hooks
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Hook"
                type: array
      summary: Retrieve all Hooks.
      tags:
        - Hooks
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        $ref: "#/components/requestBodies/HookEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hook"
        "404":
          description: Hook Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Hook.
      tags:
        - Hooks
  "/hooks/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Hook
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Hook Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing Hook.
      tags:
        - Hooks
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Hook
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hook"
        "404":
          description: Hook Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Hook.
      tags:
        - Hooks
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Hook
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/HookEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Hook"
                type: array
        "404":
          description: Hook Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Update a Hook.
      tags:
        - Hooks
  /jsapps.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/App"
      summary: Retrieve all the Store's JSApps
      tags:
        - Apps
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JSAppEdit"
        description: JSApp parameters to create
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/JSApp"
                type: array
      summary: Create a Store JSApp
      tags:
        - Apps
  "/jsapps/{code}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Code of the App
          in: path
          name: code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: App Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing JSApp.
      tags:
        - Apps
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Code of the App
          in: path
          name: code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JSApp"
      summary: Retrieve a JSApp
      tags:
        - Apps
  /orders.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/PageParam"
      responses:
        "200":
          description: An array of Orders
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Order"
                type: array
      summary: Retrieve all Orders.
      tags:
        - Orders
    post:
      description: "Use the JSON format:<br/>'{ \"order\": {\"status\": \"Paid\",
        \"shipping_method_id\": 123, \"products\": [{ \"id\": 123, \"qty\": 1}],
        \"customer\": {\"id\": 123}}}'<br/>or in CURL:<br/>curl -X POST -d '{
        \"order\": {\"status\": \"Paid\", \"shipping_method_id\": 123,
        \"products\": [{ \"id\": 123, \"qty\": 1}], \"customer\": {\"id\":
        123}}}'
        \"https://610d738f.ngrok.io/api/v1/orders.json?login=storecode&authtoke\
        n=XXXXX\" -H \"Content-Type:application/json\" "
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEdit"
        description: Order parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Order"
                type: array
      summary: Create a new Order.
      tags:
        - Orders
  "/orders/after/{id}.json":
    get:
      description: For example the GET /orders/after/5000 will return Order 5001, 5002,
        5003, etc.
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Order
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve orders filtered by Order Id.
      tags:
        - Orders
  /orders/count.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
      summary: Count all Orders.
      tags:
        - Orders
  "/orders/status/{status}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Status of the Order used as filter
          in: path
          name: status
          required: true
          schema:
            type: string
            enum:
              - Abandoned
              - Canceled
              - Pending Payment
              - Paid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Order"
                type: array
        "404":
          description: Status Invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusInvalid"
      summary: Retrieve orders filtered by status.
      tags:
        - Orders
  "/orders/{id}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Order
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Order.
      tags:
        - Orders
    put:
      description: "Only 'status', 'tracking_number', 'tracking_company',
        'additional_information' and 'additional_fields' are available for
        update.<br/>Use the JSON format:<br/>'{ \"order\": {\"status\":
        \"Paid\", \"tracking_company\": \"other\", \"tracking_number\":
        \"123456789\", \"additional_information\": \"My custom message.\",
        \"additional_fields\": [{\"label\": \"Gift Name\", \"value\":
        \"Duarte\"}, {\"label\": \"Gift Wrapping Color\", \"value\":
        \"Green\"}]} }}'<br/>or in CURL:<br/>curl -X PUT -d '{ \"order\":
        {\"status\": \"Paid\", \"additional_information\": \"My custom
        message.\"}}'
        \"https://610d738f.ngrok.io/api/v1/orders/{id}.json?login=storecode&aut\
        htoken=XXXXX\" -H \"Content-Type:application/json\" "
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Order
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEdit"
        description: Order parameters to change
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Order"
                type: array
        "404":
          description: Order Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Modify an existing Order.
      tags:
        - Orders
  "/orders/{id}/history.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Order
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: An array with Order History
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OrderHistory"
                type: array
      summary: Retrieve all Order History.
      tags:
        - Orders
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the OrderHistory
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderHistoryEdit"
        description: Order History parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OrderHistory"
                type: array
      summary: Create a new Order History Entry.
      tags:
        - Orders
  /payment_methods.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: An array of Payment Methods
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PaymentMethod"
                type: array
      summary: Retrieve all Store's Payment Methods.
      tags:
        - Payment Methods
  "/payment_methods/{id}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Payment Method
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethod"
        "404":
          description: PaymentMethod Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Payment Method.
      tags:
        - Payment Methods
  /products.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/PageParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
      summary: Retrieve all Products.
      tags:
        - Products
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEdit"
        description: Product parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
      summary: Create a new Product.
      tags:
        - Products
  "/products/after/{id}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieves Products after the given id.
      tags:
        - Products
  "/products/category/{category_id}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Category ID of the Product used as filter
          in: path
          name: category_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve Products filtered by category.
      tags:
        - Products
  "/products/category/{category_id}/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Category ID of the Product used as filter
          in: path
          name: category_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Category Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Count Products filtered by category.
      tags:
        - Products
  /products/count.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
      summary: Count all Products.
      tags:
        - Products
  /products/search.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Query for the Product
          in: query
          name: query
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: An array of products
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
        "404":
          description: Invalid query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a Product List from a query.
      tags:
        - Products
  "/products/status/{status}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Status of the Product used as filter
          in: path
          name: status
          required: true
          schema:
            type: string
            enum:
              - available
              - not-available
              - disabled
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
        "404":
          description: Status Invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusInvalid"
      summary: Retrieve Products filtered by status.
      tags:
        - Products
  "/products/status/{status}/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Status of the Product used as filter
          in: path
          name: status
          required: true
          schema:
            type: string
            enum:
              - available
              - not-available
              - disabled
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Status Invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusInvalid"
      summary: Count Products filtered by status.
      tags:
        - Products
  "/products/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing Product.
      tags:
        - Products
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Product.
      tags:
        - Products
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEdit"
        description: Product parameters to change
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Modify an existing Product.
      tags:
        - Products
  "/products/{id}/fields.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Field"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve all Product Custom Fields
      tags:
        - Product Custom Fields
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCustomField"
        description: Product Custom Field parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Product Custom Field.
      tags:
        - Product Custom Fields
  "/products/{id}/fields/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Count all Product Custom Fields.
      tags:
        - Product Custom Fields
  "/products/{id}/images.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Image"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve all Product Images.
      tags:
        - Product Images
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageEdit"
        description: Product Image parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Image"
                type: array
      summary: Create a new Product Image.
      tags:
        - Product Images
  "/products/{id}/images/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Count all Product Images.
      tags:
        - Product Images
  "/products/{id}/images/{image_id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Image
          in: path
          name: image_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete a Product Image.
      tags:
        - Product Images
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Image
          in: path
          name: image_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Image"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Product Image.
      tags:
        - Product Images
  "/products/{id}/options.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOption"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve all Product Options.
      tags:
        - Product Options
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOptionEdit"
        description: Product Option parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOption"
                type: array
      summary: Create a new Product Option.
      tags:
        - Product Options
  "/products/{id}/options/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Count all Product Options.
      tags:
        - Product Options
  "/products/{id}/options/{option_id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete a Product Option.
      tags:
        - Product Options
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOption"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Product Option.
      tags:
        - Product Options
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOptionEdit"
        description: Product option parameters to change
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOption"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Modify an existing Product Option.
      tags:
        - Product Options
  "/products/{id}/options/{option_id}/values.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: ID of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOptionValue"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve all Product Option Values.
      tags:
        - Product Option Values
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOptionValueEdit"
        description: Product Option Value parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOptionValue"
                type: array
      summary: Create a new Product Option Value.
      tags:
        - Product Option Values
  "/products/{id}/options/{option_id}/values/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
        - description: ID of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Count all Product Option Values.
      tags:
        - Product Option Values
  "/products/{id}/options/{option_id}/values/{value_id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
        - description: ID of the Product Option Value
          in: path
          name: value_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete a Product Option Value.
      tags:
        - Product Option Values
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
        - description: ID of the Product Option Value
          in: path
          name: value_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductOptionValue"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Product Option Value.
      tags:
        - Product Option Values
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Option
          in: path
          name: option_id
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the Product Option Value
          in: path
          name: value_id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOptionValueEdit"
        description: Product option value parameters to change
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductOptionValue"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Modify an existing Product Option Value.
      tags:
        - Product Option Values
  "/products/{id}/variants.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Variant"
                type: array
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve all Product Variants.
      tags:
        - Product Variants
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariantEdit"
        description: Product Variant parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variant"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Product Variant.
      tags:
        - Product Variants
  "/products/{id}/variants/count.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: ID of the Product
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Count all Product Variants.
      tags:
        - Product Variants
  "/products/{id}/variants/{variant_id}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Variant
          in: path
          name: variant_id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variant"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Product Variant.
      tags:
        - Product Variants
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - $ref: "#/components/parameters/ProductIDParam"
        - description: Id of the Product Variant
          in: path
          name: variant_id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariantEdit"
        description: Product Variant parameters to change
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variant"
        "404":
          description: Product Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Modify an existing Product Variant.
      tags:
        - Product Variants
  /promotions.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: "Promotions' list restriction (default: 50 | max: 200)."
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: integer
        - description: "Promotions' list page (default: 1)."
          in: query
          name: page
          required: false
          schema:
            type: integer
            format: integer
      responses:
        "200":
          description: An array of Promotions
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Promotion"
                type: array
      summary: Retrieve all Promotions.
      tags:
        - Promotions
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        $ref: "#/components/requestBodies/PromotionEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Promotion"
                type: array
        "404":
          description: Promotion Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Promotion.
      tags:
        - Promotions
  "/promotions/{id}.json":
    delete:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Promotion
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Promotion Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Delete an existing Promotion.
      tags:
        - Promotions
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Promotion
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promotion"
        "404":
          description: Promotion Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Promotion.
      tags:
        - Promotions
    put:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Promotion
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/PromotionEdit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Promotion"
                type: array
        "404":
          description: Promotion Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Update a Promotion.
      tags:
        - Promotions
  /store/info.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
      summary: Retrieve Store Information
      tags:
        - Stores
  /store/languages.json:
    get:
      description: ""
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Language"
                type: array
      summary: Retrieve Store Languages
      tags:
        - Stores
  /taxes.json:
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      responses:
        "200":
          description: An array of Taxes
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Tax"
                type: array
      summary: Retrieve all Taxes.
      tags:
        - Taxes
    post:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaxEdit"
        description: Tax parameters.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Tax"
                type: array
        "404":
          description: Tax Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Create a new Tax.
      tags:
        - Taxes
  "/taxes/{id}.json":
    get:
      parameters:
        - $ref: "#/components/parameters/LoginParam"
        - $ref: "#/components/parameters/AuthtokenParam"
        - description: Id of the Tax
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: A Tax information object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tax"
        "404":
          description: Tax Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
      summary: Retrieve a single Tax information.
      tags:
        - Taxes
servers:
  - url: https://api.jumpseller.com/v1
components:
  parameters:
    AuthtokenParam:
      description: API OAuth token.
      in: query
      name: authtoken
      required: true
      schema:
        type: string
        format: string
    CustomerIDParam:
      description: Id of the Customer
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int32
    LimitParam:
      description: List restriction
      in: query
      name: limit
      required: false
      schema:
        type: integer
        format: integer
        maximum: 200
        default: 50
    LoginParam:
      description: API OAuth login.
      in: query
      name: login
      required: true
      schema:
        type: string
        format: string
    PageParam:
      description: List page
      in: query
      name: page
      required: false
      schema:
        type: integer
        format: integer
        default: 1
    ProductIDParam:
      description: Id of the Product
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int32
  requestBodies:
    CustomerCategoryEdit:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CustomerCategoryEdit"
      description: CustomerCategory parameters.
      required: true
    CheckoutCustomFieldEdit:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CheckoutCustomFieldEdit"
      description: CheckoutCustomField parameters.
      required: true
    HookEdit:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HookEdit"
      description: Hook parameters.
      required: true
    PromotionEdit:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PromotionEdit"
      description: Promotion parameters.
      required: true
  schemas:
    App:
      properties:
        apps:
          items:
            $ref: "#/components/schemas/AppFields"
          type: array
      type: object
    AppFields:
      properties:
        author:
          description: Author of the app
          type: string
        code:
          description: Code of the app
          type: string
        description:
          description: Description of the app
          type: string
        js:
          default: false
          description: True if the app is a jsapp
          type: boolean
        name:
          description: Name of the app
          type: string
        page:
          description: Page of the app
          type: string
      type: object
    BadParams:
      properties:
        message:
          type: string
    BillingAddress:
      properties:
        address:
          description: Address of the Customer's Billing Address
          type: string
        city:
          description: City of the Customer's Billing Address
          type: string
        country:
          description: Country of the Customer's Billing Address (ISO 3166-1 alpha-2)
          type: string
        municipality:
          description: Municipality of the Customer's Billing Address
          type: string
        name:
          description: Name of the Customer's Billing Address
          type: string
        postal:
          description: Postal code of the Customer's Billing Address
          type: string
        region:
          description: Region of the Customer's Billing Address (Use the FIPS standard -
            http://www.geonames.org/countries/)
          type: integer
        surname:
          description: Surname of the Customer's Billing Address
          type: string
        taxid:
          description: Tax id of the Customer's Billing Address
          type: string
    Category:
      properties:
        category:
          $ref: "#/components/schemas/CategoryFields"
      type: object
    CategoryEdit:
      properties:
        category:
          $ref: "#/components/schemas/CategoryEditFields"
      type: object
    CategoryEditFields:
      properties:
        name:
          description: Name of the Category
          type: string
        parent_id:
          description: Unique identifier of the Parent Category
          format: int32
          type: integer
      type: object
    CategoryFields:
      properties:
        id:
          description: Unique identifier of the Category
          format: int32
          type: integer
        name:
          description: Name of the Category
          type: string
        parent_id:
          description: Unique identifier of the Parent Category
          format: int32
          type: integer
        permalink:
          description: Category unique URL path
          type: string
      type: object
    CheckoutCustomField:
      properties:
        checkout_custom_field:
          $ref: "#/components/schemas/CheckoutCustomFieldFields"
      type: object
    CheckoutCustomFieldEdit:
      properties:
        checkout_custom_field:
          $ref: "#/components/schemas/CheckoutCustomFieldEditFields"
      type: object
    CheckoutCustomFieldEditFields:
      properties:
        area:
          description: Area of the CheckoutCustomField
          enum:
            - contact
            - billing_shipping
            - other
          type: string
        custom_field_select_options:
          description: The values for the CheckoutCustomField selection
          items:
            type: string
          type: array
        deletable:
          default: false
          description: True if the CheckoutCustomField can be removed from the store
          type: boolean
        label:
          description: Label given to the CheckoutCustomField
          type: string
        position:
          description: Position of the CheckoutCustomField
          format: int32
          type: integer
        required:
          default: false
          description: True if the CheckoutCustomField is mandatory
          type: boolean
        type:
          description: Type of the CheckoutCustomField
          enum:
            - text
            - select
            - input
            - checkbox
          type: string
      type: object
    CheckoutCustomFieldFields:
      properties:
        area:
          description: Area of the CheckoutCustomField
          enum:
            - contact
            - billing_shipping
            - other
          type: string
        custom_field_select_options:
          description: The values for the CheckoutCustomField selection
          items:
            type: string
          type: array
        deletable:
          default: false
          description: True if the CheckoutCustomField can be removed from the store
          type: boolean
        id:
          description: Unique identifier of the CheckoutCustomField
          format: int32
          type: integer
        label:
          description: Label given to the CheckoutCustomField
          type: string
        position:
          description: Position of the CheckoutCustomField
          format: int32
          type: integer
        required:
          default: false
          description: True if the CheckoutCustomField is mandatory
          type: boolean
        type:
          description: Type of the CheckoutCustomField
          enum:
            - text
            - select
            - input
            - checkbox
          type: string
      type: object
    Count:
      properties:
        count:
          format: int32
          type: integer
    Country:
      properties:
        code:
          type: string
        name:
          type: string
    Customer:
      properties:
        customer:
          $ref: "#/components/schemas/CustomerFields"
      type: object
    CustomerAdditionalField:
      properties:
        customer_additional_field:
          $ref: "#/components/schemas/CustomerAdditionalFieldFields"
      type: object
    CustomerAdditionalFieldEdit:
      properties:
        customer_additional_field:
          $ref: "#/components/schemas/CustomerAdditionalFieldEditFields"
      type: object
    CustomerAdditionalFieldEditFields:
      properties:
        checkout_custom_field_id:
          description: Unique identifier of the Checkout Custom Field
          format: int32
          type: integer
        value:
          description: Value of the Customer Additional Field
          type: string
      type: object
    CustomerAdditionalFieldFields:
      properties:
        area:
          description: Area of the Customer Additional Field
          type: string
        checkout_custom_field_id:
          description: Unique identifier of the Checkout Custom Field
          format: int32
          type: integer
        customer_id:
          description: Unique identifier of the Customer
          format: int32
          type: integer
        id:
          description: Unique identifier of the Customer Additional Field
          format: int32
          type: integer
        label:
          description: Label of the Customer Additional Field
          type: string
        value:
          description: Value of the Customer Additional Field
          type: string
      type: object
    CustomerCategory:
      properties:
        category:
          $ref: "#/components/schemas/CustomerCategoryFields"
      type: object
    CustomerCategoryEdit:
      properties:
        category:
          $ref: "#/components/schemas/CustomerCategoryEditFields"
      type: object
    CustomerCategoryEditFields:
      properties:
        name:
          description: Name of the CustomerCategory
          type: string
      type: object
    CustomerCategoryFields:
      properties:
        code:
          description: Code of the CustomerCategory
          type: string
        id:
          description: Unique identifier of the CustomerCategory
          format: int32
          type: integer
        name:
          description: Name of the CustomerCategory
          type: string
      type: object
    CustomerFields:
      properties:
        billing_address:
          $ref: "#/components/schemas/BillingAddress"
        customer_additional_fields:
          items:
            $ref: "#/components/schemas/CustomerAdditionalField"
          type: array
        customer_category:
          items:
            type: integer
          type: array
        email:
          description: Email of the Customer
          type: string
        id:
          description: Unique identifier of the Customer
          format: int32
          type: integer
        phone:
          description: Phone of the Customer
          type: string
        shipping_address:
          $ref: "#/components/schemas/ShippingAddress"
        status:
          description: Status of the Customer
          enum:
            - approved
            - pending
            - disabled
          type: string
      type: object
    CustomerFieldsWithPassword:
      properties:
        billing_address:
          $ref: "#/components/schemas/BillingAddress"
        email:
          description: Email of the Customer
          type: string
        id:
          description: Unique identifier of the Customer
          format: int32
          type: integer
        password:
          description: Password
          type: string
        phone:
          description: Phone of the Customer
          type: string
        shipping_address:
          $ref: "#/components/schemas/ShippingAddress"
        status:
          description: Status of the Customer
          enum:
            - approved
            - pending
            - disabled
          type: string
      type: object
    CustomerFieldsWithPasswordNoID:
      properties:
        billing_address:
          $ref: "#/components/schemas/BillingAddress"
        customer_category:
          items:
            type: integer
          type: array
        email:
          description: Email of the Customer
          type: string
        password:
          description: Password
          type: string
        phone:
          description: Phone of the Customer
          type: string
        shipping_address:
          $ref: "#/components/schemas/ShippingAddress"
        status:
          description: Status of the Customer
          enum:
            - approved
            - pending
            - disabled
          type: string
      type: object
    CustomerWithPassword:
      properties:
        customer:
          $ref: "#/components/schemas/CustomerFieldsWithPassword"
      type: object
    CustomerWithPasswordNoID:
      properties:
        customer:
          $ref: "#/components/schemas/CustomerFieldsWithPasswordNoID"
      type: object
    Field:
      properties:
        field:
          $ref: "#/components/schemas/FieldFields"
      type: object
    FieldFields:
      properties:
        id:
          description: Unique identifier of the Field
          format: int32
          type: integer
        label:
          description: Label given to the Field
          type: string
        type:
          description: Type of the Field
          enum:
            - text
            - selection
            - input
          type: string
        values:
          description: All the possible Values of the Field (for type 'selection')
          items:
            type: string
          type: array
      type: object
    Hook:
      properties:
        hook:
          $ref: "#/components/schemas/HookFields"
      type: object
    HookEdit:
      properties:
        hook:
          $ref: "#/components/schemas/HookEditFields"
      type: object
    HookEditFields:
      properties:
        event:
          description: Event associated with Hook
          enum:
            - order_updated
            - order_pending_payment
            - order_paid
            - order_shipped
            - order_canceled
            - order_abandoned
            - product_created
            - product_updated
            - product_deleted
            - customer_created
            - customer_updated
            - customer_deleted
          type: string
        url:
          description: Hook URL to be notified
          type: string
      required:
        - event
        - url
      type: object
    HookFields:
      properties:
        created_at:
          description: Hook creation date
          type: string
        event:
          description: Event associated with Hook
          type: string
        id:
          description: Unique identifier of the Hook
          format: int32
          type: integer
        url:
          description: Hook URL to be notified
          type: string
      type: object
    Id:
      properties:
        id:
          format: int32
          type: integer
    Image:
      properties:
        image:
          $ref: "#/components/schemas/ImageFields"
      type: object
    ImageEdit:
      properties:
        image:
          $ref: "#/components/schemas/ImageEditFields"
      type: object
    ImageEditFields:
      properties:
        url:
          description: Complete URL of the image
          type: string
      type: object
    ImageFields:
      properties:
        id:
          description: Unique identifier of the image
          format: int32
          type: integer
        position:
          description: Position of the image
          format: int32
          type: integer
        url:
          description: Complete URL of the image
          type: string
      type: object
    JSApp:
      properties:
        element:
          description: Element of Template to inject HTML
          type: string
        template:
          description: Template of Store Theme to inject HTML
          type: string
        url:
          description: Url of the HTML to inject
          type: string
      type: object
    JSAppEdit:
      properties:
        app:
          $ref: "#/components/schemas/JSApp"
      type: object
    Language:
      properties:
        code:
          type: string
        name:
          type: string
    NotFound:
      properties:
        message:
          type: string
    Order:
      properties:
        order:
          $ref: "#/components/schemas/OrderFields"
      type: object
    OrderEdit:
      properties:
        order:
          $ref: "#/components/schemas/OrderEditFields"
      type: object
    OrderEditFields:
      properties:
        additional_information:
          description: Additional information for the given Order
          type: string
        customer:
          $ref: "#/components/schemas/CustomerFields"
        products:
          items:
            $ref: "#/components/schemas/OrderProduct"
          type: array
        shipping_method_id:
          description: Shipping method e.g. Royal Mail
          format: int32
          type: integer
        status:
          description: Status of the Order
          enum:
            - Abandoned
            - Canceled
            - Pending Payment
            - Paid
          type: string
        tracking_company:
          description: Shipping Company used for the given Order
          type: string
        tracking_number:
          description: Shipping Tracking Number used for the given Order
          type: string
    OrderFields:
      properties:
        additional_information:
          description: Additional information for the given Order
          type: string
        billing_address:
          $ref: "#/components/schemas/BillingAddress"
        checkout_url:
          description: Store Checkout Order URL for the given Order
          type: string
        coupons:
          description: Promotion Coupons used on the given Order
          type: string
        created_at:
          description: Order date
          type: string
        currency:
          description: Currency of the Order
          type: string
        customer:
          $ref: "#/components/schemas/Customer"
        discount:
          description: Discount value for the given Order
          format: float
          type: number
        duplicate_url:
          description: Duplicate Order URL for the given Order
          type: string
        id:
          description: Unique identifier of the Order
          format: int32
          type: integer
        payment_information:
          description: Payment information for the given Order
          type: string
        payment_method_name:
          description: Payment Method name used e.g. PayPal
          type: string
        products:
          items:
            $ref: "#/components/schemas/OrderProduct"
          type: array
        recovery_url:
          description: Recovery Order URL for the given Order
          type: string
        shipment_status:
          description: Shipment Status for Order Fulfillment.
          enum:
            - delivered
            - requested
            - in_transit
            - failed
          type: string
        shipping:
          description: Shipping value for the given Order
          format: float
          type: number
        shipping_address:
          $ref: "#/components/schemas/ShippingAddress"
        shipping_discount:
          description: Shipping Discount value for the given order
          format: float
          type: number
        shipping_method_id:
          description: Shipping method e.g. Royal Mail
          format: int32
          type: integer
        shipping_method_name:
          description: Shipping method e.g. Royal Mail
          type: string
        shipping_tax:
          description: Shipping Tax value for the given order
          format: float
          type: number
        status:
          description: Status of the Order
          enum:
            - Abandoned
            - Canceled
            - Pending Payment
            - Paid
          type: string
        subtotal:
          description: Subtotal value for the given Order. Excluding taxes, shipping and
            discounts
          format: float
          type: number
        tax:
          description: Tax value for the given order
          format: float
          type: number
        total:
          description: Total value for the given Order. Including taxes, shipping and
            discounts
          format: float
          type: number
        tracking_company:
          description: Company Used for Order Fulfillment.
          type: string
        tracking_number:
          description: Tracking Number for Order Fulfillment.
          type: string
        tracking_url:
          description: Tracking URL for Order Fulfillment.
          type: string
    OrderHistory:
      properties:
        order_history:
          $ref: "#/components/schemas/OrderHistoryFields"
      type: object
    OrderHistoryEdit:
      properties:
        order_history:
          $ref: "#/components/schemas/OrderHistoryEditFields"
      type: object
    OrderHistoryEditFields:
      properties:
        message:
          description: Message of the Order History
          type: string
      type: object
    OrderHistoryFields:
      properties:
        created_at:
          description: Creation date of the order history
          type: string
        id:
          description: Unique identifier of the Order History
          format: int32
          type: integer
        message:
          description: Message of the Order History
          type: string
      type: object
    OrderProduct:
      properties:
        discount:
          description: Discount of the Order Product
          format: float
          type: number
        id:
          description: Unique identifier of the original Product
          format: int32
          type: integer
        image:
          description: Image URL of the Order Product
          type: string
        name:
          description: Name of the Order Product
          type: string
        price:
          description: Price of the Order Product
          format: float
          type: number
        qty:
          description: Price of the Order Product
          format: int32
          type: integer
        sku:
          description: Stock Keeping Unit of the Order Product
          type: string
        variant_id:
          description: Unique identifier of the original Product Variant
          format: int32
          type: integer
        weight:
          default: 1
          description: Weight of the Order Product
          format: float
          type: number
      type: object
    PaymentMethod:
      properties:
        payment_method:
          $ref: "#/components/schemas/PaymentMethodFields"
      type: object
    PaymentMethodFields:
      properties:
        id:
          description: Unique identifier of the Payment Method
          format: int32
          type: integer
        name:
          description: Name of the Payment Method
          type: string
        type:
          description: Type of the Payment Method
          enum:
            - manual
            - paypal
            - pagseguro
            - moneybookers
            - webpay_cl
            - easypay
            - easypaycc
            - easypayboleto
            - ideal_basic
            - hipay
            - khipu
            - mercado_pago
            - ifthenpay
            - eupago
            - stripe
            - payu
            - servipag
          type: string
      type: object
    Product:
      properties:
        product:
          $ref: "#/components/schemas/ProductFields"
      type: object
    ProductCustomField:
      properties:
        field_value:
          $ref: "#/components/schemas/ProductCustomFieldFields"
      type: object
    ProductCustomFieldFields:
      properties:
        id:
          description: Unique identifier of the ProductCustomField
          format: int32
          type: integer
        value:
          description: The value for the ProductCustomField
          items:
            type: string
          type: array
      type: object
    ProductEdit:
      properties:
        product:
          $ref: "#/components/schemas/ProductEditFields"
      type: object
    ProductEditFields:
      properties:
        categories:
          items:
            $ref: "#/components/schemas/CategoryFields"
          type: array
        description:
          description: Description of the product
          type: string
        diameter:
          description: Diameter of the product
          format: float
          type: number
        featured:
          default: false
          description: True if the product is featured
          type: boolean
        google_product_category:
          description: Category of a Product based on the Google product taxonomy
          type: string
        height:
          description: Height of the product
          format: float
          type: number
        length:
          description: Length of the product
          format: float
          type: number
        meta_description:
          description: SEO meta description of the product
          type: string
        name:
          description: Name of the product
          type: string
        package_format:
          default: box
          description: Format the product package
          enum:
            - box
            - cylinder
          type: string
        page_title:
          description: SEO title of the product
          type: string
        permalink:
          description: Product unique URL path
          type: string
        price:
          description: Price of the product
          format: float
          type: number
        sku:
          description: Stock Keeping Unit of the product
          type: string
        status:
          default: available
          description: Status of the product
          enum:
            - available
            - not-available
            - disabled
          type: string
        stock:
          default: 100
          description: Quantity in stock for the product
          format: int32
          type: integer
        stock_unlimited:
          description: True if the Product has unlimited stock
          type: boolean
        weight:
          default: 1
          description: Weight of the product
          format: float
          type: number
        width:
          description: Width of the product
          format: float
          type: number
      required:
        - price
        - name
      type: object
    ProductFields:
      properties:
        categories:
          items:
            $ref: "#/components/schemas/CategoryFields"
          type: array
        created_at:
          description: Date of product creation
          type: string
        description:
          description: Description of the product
          type: string
        diameter:
          description: Diameter of the product
          format: float
          type: number
        discount:
          description: Discount of the product
          format: float
          type: number
        featured:
          default: false
          description: True if the product is featured
          type: boolean
        google_product_category:
          description: Category of a Product based on the Google product taxonomy
          type: string
        height:
          description: Height of the product
          format: float
          type: number
        id:
          description: Unique identifier of the product
          format: int32
          type: integer
        images:
          items:
            $ref: "#/components/schemas/ImageFields"
          type: array
        length:
          description: Length of the product
          format: float
          type: number
        name:
          description: Name of the product
          type: string
        package_format:
          default: box
          description: Format the product package
          enum:
            - box
            - cylinder
          type: string
        permalink:
          description: Product unique URL path
          type: string
        price:
          description: Price of the product
          format: float
          type: number
        sku:
          description: Stock Keeping Unit of the product
          type: string
        status:
          default: available
          description: Status of the product
          enum:
            - available
            - not-available
            - disabled
          type: string
        stock:
          default: 100
          description: Quantity in stock for the product
          format: int32
          type: integer
        stock_unlimited:
          description: True if the Product has unlimited stock
          type: boolean
        variants:
          items:
            $ref: "#/components/schemas/VariantFields"
          type: array
        weight:
          default: 1
          description: Weight of the product
          format: float
          type: number
        width:
          description: Width of the product
          format: float
          type: number
      type: object
    ProductOption:
      properties:
        option:
          $ref: "#/components/schemas/ProductOptionFields"
      type: object
    ProductOptionEdit:
      properties:
        option:
          $ref: "#/components/schemas/ProductOptionEditFields"
      type: object
    ProductOptionEditFields:
      properties:
        name:
          description: Name of the product option
          type: string
        option_type:
          description: Type of the product option
          enum:
            - option
            - input
            - text
            - file
          type: string
        position:
          description: Position of the product option
          format: int32
          type: integer
      type: object
    ProductOptionFields:
      properties:
        id:
          description: Unique identifier of the product option
          format: int32
          type: integer
        name:
          description: Name of the product option
          type: string
        option_type:
          description: Type of the product option
          enum:
            - option
            - input
            - text
            - file
          type: string
        position:
          description: Position of the product option
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/ProductOptionValueFields"
          type: array
      type: object
    ProductOptionValue:
      properties:
        value:
          $ref: "#/components/schemas/ProductOptionValueFields"
      type: object
    ProductOptionValueEdit:
      properties:
        value:
          $ref: "#/components/schemas/ProductOptionValueEditFields"
      type: object
    ProductOptionValueEditFields:
      properties:
        name:
          description: Name of the product option value
          type: string
        position:
          description: Position of the product option value
          format: int32
          type: integer
      type: object
    ProductOptionValueFields:
      properties:
        id:
          description: Unique identifier of the product option value
          format: int32
          type: integer
        name:
          description: Name of the product option value
          type: string
        position:
          description: Position of the product option value
          format: int32
          type: integer
        product_option:
          $ref: "#/components/schemas/ProductOption"
        variants:
          items:
            $ref: "#/components/schemas/Variant"
          type: array
      type: object
    Promotion:
      properties:
        promotion:
          $ref: "#/components/schemas/PromotionFields"
      type: object
    PromotionEdit:
      properties:
        promotion:
          $ref: "#/components/schemas/PromotionEditFields"
      type: object
    PromotionEditFields:
      properties:
        begins_at:
          description: Creation date of the promotion (requires 'lasts' param - 'date')
          type: string
        buys_at_least:
          description: Controls the promotion's condition ('none', 'price', 'qty')
          type: string
        categories:
          description: Products Categories where the promotion will be applied (requires
            'discount_target' param - 'categories')
          items:
            $ref: "#/components/schemas/Id"
          type: array
        code:
          description: Code of the promotion
          type: string
        condition_price:
          description: Minimum order amount to validate the promotion (requires
            'buys_at_least' param - 'price')
          format: float
          type: number
        condition_qty:
          description: Minimum quantity of ordered itens to validate the promotion
            (requires 'buys_at_least' param - 'qty')
          format: int32
          type: integer
        cumulative:
          default: false
          description: True if the promotion can be acumulated with others
          type: boolean
        customer_categories:
          description: Customer Categories to whom the promotion will be applied (requires
            'customers' param - 'categories')
          items:
            $ref: "#/components/schemas/Id"
          type: array
        customers:
          description: Controls to which customers the promotion will be applied ('all',
            'loggedin', 'categories')
          type: string
        discount_amount_fix:
          description: Fixed discount amount of the promotion (requires 'type' param -
            'fix')
          format: float
          type: number
        discount_amount_percent:
          description: Percentual discount amount of the promotion (requires 'type' param -
            'percentage')
          format: float
          type: number
        discount_target:
          description: Where the promotion will be applied ('order', 'shipping',
            'categories')
          type: string
        enabled:
          default: true
          description: If the promotion is to be temporarily disabled
          type: boolean
        expires_at:
          description: Expiration date of the promotion (requires 'lasts' param - 'date')
          type: string
        lasts:
          description: Controls when the promotion will expire ('none', 'date',
            'max_times_used')
          type: string
        max_times_used:
          description: Maximum amount a promotion can be used (requires 'lasts' param -
            'max_times_used')
          format: int32
          type: integer
        name:
          description: Name of the product
          type: string
        products:
          description: Products where the promotion will be applied (requires
            'discount_target' param - 'categories')
          items:
            $ref: "#/components/schemas/Id"
          type: array
        type:
          description: Controls if the discount will be a fixed area ('fix', 'percentage')
          type: string
      type: object
    PromotionFields:
      properties:
        begins_at:
          description: Creation date of the promotion
          type: string
        categories:
          items:
            $ref: "#/components/schemas/Id"
          type: array
        code:
          description: Code of the promotion
          type: string
        condition_price:
          description: Minimum order amount to validate the promotion
          format: float
          type: number
        condition_qty:
          description: Minimum quantity of ordered itens to validate the promotion
          format: int32
          type: integer
        cumulative:
          default: false
          description: True if the promotion can be acumulated with others
          type: boolean
        customer_categories:
          items:
            $ref: "#/components/schemas/Id"
          type: array
        discount_amount_fix:
          description: Fixed discount amount of the promotion
          format: float
          type: number
        discount_amount_percent:
          description: Percentual discount amount of the promotion
          format: float
          type: number
        discount_target:
          description: Where the promotion will be applied ('order', 'shipping',
            'categories')
          type: string
        enabled:
          default: true
          description: If the promotion is currently enabled
          type: boolean
        expires_at:
          description: Expiration date of the promotion
          type: string
        id:
          description: Unique identifier of the product
          format: int32
          type: integer
        max_times_used:
          description: Maximum amount a promotion can be used
          format: int32
          type: integer
        name:
          description: Name of the product
          type: string
        products:
          items:
            $ref: "#/components/schemas/Id"
          type: array
        status:
          description: Status of the promotion ('active', 'expired')
          type: string
        times_used:
          description: Amount of times the promotion was used
          format: int32
          type: integer
      type: object
    Region:
      properties:
        code:
          type: string
        name:
          type: string
    ShippingAddress:
      properties:
        address:
          description: Address of the Customer's Shipping Address
          type: string
        city:
          description: City of the Customer's Shipping Address
          type: string
        country:
          description: Country of the Customer's Shipping Address (ISO 3166-1 alpha-2)
          type: string
        municipality:
          description: Municipality of the Customer's Shipping Address
          type: string
        name:
          description: Name of the Customer's Shipping Address
          type: string
        postal:
          description: Postal code of the Customer's Shipping Address
          type: string
        region:
          description: Region of the Customer's Shipping Address (Use the FIPS standard -
            http://www.geonames.org/countries/)
          type: integer
        surname:
          description: Surname of the Customer's Shipping Address
          type: string
    StatusInvalid:
      properties:
        message:
          type: string
    Store:
      properties:
        code:
          description: Store Code
          type: string
        country:
          description: Store Country
          type: string
        currency:
          description: Store Currency
          type: string
        email:
          description: Store Admin Email
          type: string
        hooks_token:
          description: Store Hooks Auth token
          type: string
        logo:
          description: Store Logo URL
          type: string
        name:
          description: Store Name
          type: string
        timezone:
          description: Store Timezone
          type: string
        url:
          description: Store URL
          type: string
        weight_unit:
          description: Store Weight Unit
          type: string
      type: object
    Tax:
      properties:
        field:
          $ref: "#/components/schemas/TaxFields"
      type: object
    TaxEdit:
      properties:
        field:
          $ref: "#/components/schemas/TaxEditFields"
      type: object
    TaxEditFields:
      properties:
        category_id:
          description: Unique identifier of the category of the Tax
          format: int32
          type: integer
        country:
          description: Country where the Tax applies
          type: string
        fixed:
          default: false
          description: True if the tax has a fixed valued amount
          type: boolean
        region:
          description: Region where the Tax applies
          type: string
        shipping:
          default: false
          description: True if the tax should be applied to shipping costs
          type: boolean
        tax_amount:
          description: Tax value for the given Tax
          format: float
          type: number
      type: object
    TaxFields:
      properties:
        category_id:
          description: Unique identifier of the category of the Tax
          format: int32
          type: integer
        country:
          description: Country name where the Tax applies
          type: string
        fixed:
          default: false
          description: True if the tax has a fixed valued amount
          type: boolean
        id:
          description: Unique identifier of the Tax
          format: int32
          type: integer
        region:
          description: Region name where the Tax applies
          type: string
        shipping:
          default: false
          description: True if the tax should be applied to shipping costs
          type: boolean
        tax_amount:
          description: Tax value for the given Tax
          format: float
          type: number
      type: object
    Variant:
      properties:
        variant:
          $ref: "#/components/schemas/VariantFields"
      type: object
    VariantEdit:
      properties:
        variant:
          $ref: "#/components/schemas/VariantEditFields"
      type: object
    VariantEditFields:
      properties:
        id:
          description: Unique identifier of the product
          format: int32
          type: integer
        image_id:
          description: Unique identifier of the product image to associate with this variant
          format: int32
          type: integer
        price:
          description: Price of the product
          format: float
          type: number
        sku:
          description: Stock Keeping Unit of the Product's Variant
          type: string
        stock:
          default: 100
          description: Quantity in stock for the Product's Variant
          format: int32
          type: integer
        stock_unlimited:
          description: True if the Product's Variant has unlimited stock
          type: boolean
      type: object
    VariantFields:
      properties:
        discount:
          description: Discount of the product
          format: float
          type: number
        id:
          description: Unique identifier of the product
          format: int32
          type: integer
        price:
          description: Price of the product
          format: float
          type: number
        sku:
          description: Stock Keeping Unit of the Product's Variant
          type: string
        stock:
          default: 100
          description: Quantity in stock for the Product's Variant
          format: int32
          type: integer
        stock_unlimited:
          description: True if the Product's Variant has unlimited stock
          type: boolean
      type: object
