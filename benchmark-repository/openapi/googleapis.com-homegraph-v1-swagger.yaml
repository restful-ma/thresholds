openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: HomeGraph
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://homegraph.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: homegraph
externalDocs:
  url: https://developers.google.com/actions/smarthome/create-app#request-sync
tags:
  - name: agentUsers
  - name: devices
paths:
  /v1/devices:query:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Gets the device states for the devices in QueryRequest.

        The third-party user's identity is passed in as `agent_user_id`. The agent

        is identified by the JWT signed by the third-party partner's service

        account.
      operationId: homegraph.devices.query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/QueryResponse"
      tags:
        - devices
  /v1/devices:reportStateAndNotification:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Reports device state and optionally sends device notifications. Called
        by

        an agent when the device state of a third-party changes or the agent wants

        to send a notification about the device. See

        [Implement Report State](/actions/smarthome/report-state) for more

        information.

        This method updates a predefined set of states for a device, which all

        devices have according to their prescribed traits (for example, a light

        will have the [OnOff](/actions/smarthome/traits/onoff) trait that reports

        the state `on` as a boolean value).

        A new state may not be created and an INVALID_ARGUMENT code will be thrown

        if so. It also optionally takes in a list of Notifications that may be

        created, which are associated to this state change.


        The third-party user's identity is passed in as `agent_user_id`.

        The agent is identified by the JWT signed by the partner's service account.
      operationId: homegraph.devices.reportStateAndNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportStateAndNotificationRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ReportStateAndNotificationResponse"
      tags:
        - devices
  /v1/devices:requestSync:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Requests a `SYNC` call from Google to a 3p partner's home control agent
        for

        a user.



        The third-party user's identity is passed in as `agent_user_id`

        (see RequestSyncDevicesRequest) and forwarded back to the agent.

        The agent is identified by the API key or JWT signed by the partner's

        service account.
      operationId: homegraph.devices.requestSync
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestSyncDevicesRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/RequestSyncDevicesResponse"
      tags:
        - devices
  /v1/devices:sync:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Gets all the devices associated with the given third-party user.

        The third-party user's identity is passed in as `agent_user_id`. The agent

        is identified by the JWT signed by the third-party partner's service

        account.
      operationId: homegraph.devices.sync
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyncRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/SyncResponse"
      tags:
        - devices
  "/v1/{agentUserId}":
    delete:
      description: >-
        Unlinks an agent user from Google. As a result, all data related to this

        user will be deleted.


        Here is how the agent user is created in Google:


        1.  When a user opens their Google Home App, they can begin linking a 3p
            partner.
        2.  User is guided through the OAuth process.

        3.  After entering the 3p credentials, Google gets the 3p OAuth token and
            uses it to make a Sync call to the 3p partner and gets back all of the
            user's data, including `agent_user_id` and devices.
        4.  Google creates the agent user and stores a mapping from the
            `agent_user_id` -> Google ID mapping. Google also
            stores all of the user's devices under that Google ID.

        The mapping from `agent_user_id` to Google ID is many to many, since one

        Google user can have multiple 3p accounts, and multiple Google users can

        map to one `agent_user_id` (e.g., a husband and wife share one Nest account

        username/password).


        The third-party user's identity is passed in as `agent_user_id`.

        The agent is identified by the JWT signed by the partner's service account.


        Note: Special characters (except "/") in `agent_user_id` must be

        URL-encoded.
      operationId: homegraph.agentUsers.delete
      parameters:
        - description: Required. Third-party user ID.
          in: path
          name: agentUserId
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Request ID used for debugging.
          in: query
          name: requestId
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      tags:
        - agentUsers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
servers:
  - url: https://homegraph.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  schemas:
    AgentDeviceId:
      description: Third-party partner's device ID for one device.
      properties:
        id:
          description: Third-party partner's device ID.
          type: string
      type: object
    AgentOtherDeviceId:
      description: Identifies a device in the third party or first party system.
      properties:
        agentId:
          description: The agent's ID. Generally it is the agent's AoG project id.
          type: string
        deviceId:
          description: Device ID defined by the agent. The device_id must be unique.
          type: string
      type: object
    Device:
      description: Third-party partner's device definition.
      properties:
        attributes:
          additionalProperties:
            description: Properties of the object.
          description: Attributes for the traits supported by the device.
          type: object
        customData:
          description: >-
            Custom JSON data provided by the manufacturer and attached to QUERY
            and

            EXECUTE requests in AoG.
          type: string
        deviceInfo:
          $ref: "#/components/schemas/DeviceInfo"
        id:
          description: Third-party partner's device ID.
          type: string
        name:
          $ref: "#/components/schemas/DeviceNames"
        otherDeviceIds:
          description: >-
            IDs of other devices associated with this device. This is used to

            represent a device group (e.g. bonded zone) or "facets" synced

            through different flows (e.g. Google Nest Hub Max with a Nest Camera).


            This may also be used to pass in alternate IDs used to identify a cloud

            synced device for local execution (i.e. local verification). If used for

            local verification, this field is synced from the cloud.
          items:
            $ref: "#/components/schemas/AgentOtherDeviceId"
          type: array
        roomHint:
          description: >-
            If the third-party partner's cloud configuration includes placing
            devices

            in rooms, the name of the room can be provided here.
          type: string
        structureHint:
          description: As in roomHint, for structures that users set up in the partner's
            system.
          type: string
        traits:
          description: Traits supported by the device.
          items:
            type: string
          type: array
        type:
          description: Hardware type of the device (e.g. light, outlet, etc).
          type: string
        willReportState:
          description: >-
            Indicates whether the state of this device is being reported to
            Google

            through ReportStateAndNotification call.
          type: boolean
      type: object
    DeviceInfo:
      description: Device information.
      properties:
        hwVersion:
          description: Device hardware version.
          type: string
        manufacturer:
          description: Device manufacturer.
          type: string
        model:
          description: Device model.
          type: string
        swVersion:
          description: Device software version.
          type: string
      type: object
    DeviceNames:
      description: Different names for the device.
      properties:
        defaultNames:
          description: |-
            List of names provided by the partner rather than the user, often
            manufacturer names, SKUs, etc.
          items:
            type: string
          type: array
        name:
          description: Primary name of the device, generally provided by the user.
          type: string
        nicknames:
          description: Additional names provided by the user for the device.
          items:
            type: string
          type: array
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    QueryRequest:
      description: >-
        Request type for the

        [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should

        be the same format as the Actions on Google `action.devices.QUERY`

        [request](/actions/smarthome/create-app#actiondevicesquery) with the

        exception of the extra `agent_user_id` and no `intent` and `customData`

        fields.
      properties:
        agentUserId:
          description: Required. Third-party user ID.
          type: string
        inputs:
          description: >-
            Required. Inputs containing third-party partner's device IDs for
            which to

            get the device states.
          items:
            $ref: "#/components/schemas/QueryRequestInput"
          type: array
        requestId:
          description: Request ID used for debugging.
          type: string
      type: object
    QueryRequestInput:
      description: Device ID inputs to QueryRequest.
      properties:
        payload:
          $ref: "#/components/schemas/QueryRequestPayload"
      type: object
    QueryRequestPayload:
      description: Payload containing device IDs.
      properties:
        devices:
          description: Third-party partner's device IDs for which to get the device states.
          items:
            $ref: "#/components/schemas/AgentDeviceId"
          type: array
      type: object
    QueryResponse:
      description: >-
        Response type for the

        [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should

        follow the same format as the Actions on Google `action.devices.QUERY`

        [response](/actions/smarthome/create-app#actiondevicesquery).

        # Example


        ```json

        {
          "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
          "payload": {
            "devices": {
              "123": {
                "on": true,
                "online": true
              },
              "456": {
                "on": true,
                "online": true,
                "brightness": 80,
                "color": {
                  "name": "cerulean",
                  "spectrumRGB": 31655
                }
              }
            }
          }
        }

        ```
      properties:
        payload:
          $ref: "#/components/schemas/QueryResponsePayload"
        requestId:
          description: Request ID used for debugging. Copied from the request.
          type: string
      type: object
    QueryResponsePayload:
      description: Payload containing device states information.
      properties:
        devices:
          additionalProperties:
            additionalProperties:
              description: Properties of the object.
            type: object
          description: >-
            States of the devices. Map of third-party device ID to struct of
            device

            states.
          type: object
      type: object
    ReportStateAndNotificationDevice:
      description: The states and notifications specific to a device.
      properties:
        notifications:
          additionalProperties:
            description: Properties of the object.
          description: Notifications metadata for devices.
          type: object
        states:
          additionalProperties:
            description: Properties of the object.
          description: States of devices to update.
          type: object
      type: object
    ReportStateAndNotificationRequest:
      description: >-
        Request type for the

        [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)

        call. It may include States, Notifications, or both. This request uses

        globally unique flattened state names instead of namespaces based on traits

        to align with the existing QUERY and EXECUTE APIs implemented by 90+ Smart

        Home partners. States and notifications are defined per `device_id` (for example, "123"

        and "456" in the following example). # Example

        ```json

        {
          "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
          "agentUserId": "1234",
          "payload": {
            "devices": {
              "states": {
                "123": {
                  "on": true
                },
                "456": {
                  "on": true,
                  "brightness": 10
                }
              },
            }
          }
        }

        ```
      properties:
        agentUserId:
          description: Required. Third-party user ID.
          type: string
        eventId:
          description: Unique identifier per event (for example, a doorbell press).
          type: string
        followUpToken:
          description: Token to maintain state in the follow up notification response.
          type: string
        payload:
          $ref: "#/components/schemas/StateAndNotificationPayload"
        requestId:
          description: Request ID used for debugging.
          type: string
      type: object
    ReportStateAndNotificationResponse:
      description: >-
        Response type for the

        [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)

        call.
      properties:
        requestId:
          description: Request ID copied from ReportStateAndNotificationRequest.
          type: string
      type: object
    RequestSyncDevicesRequest:
      description: >-
        Request type for the

        [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)

        call.
      properties:
        agentUserId:
          description: |-
            Required. Third-party user ID issued by agent's third-party identity
            provider.
          type: string
        async:
          description: >-
            Optional. If set, the request will be added to a queue and a
            response will

            be returned immediately. The queue allows for de-duplication of

            simultaneous requests.
          type: boolean
      type: object
    RequestSyncDevicesResponse:
      description: >-
        Response type for the

        [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)

        call. Intentionally empty upon success. An HTTP response code is returned

        with more details upon failure.
      properties: {}
      type: object
    StateAndNotificationPayload:
      description: Payload containing the state and notification information for devices.
      properties:
        devices:
          $ref: "#/components/schemas/ReportStateAndNotificationDevice"
      type: object
    SyncRequest:
      description: >-
        Request type for the
        [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync)

        call. This should follow the same format as the Actions on Google

        `action.devices.SYNC`

        [request](/actions/smarthome/create-app#actiondevicessync) with the exception

        of the extra `agent_user_id` and no `intent` field.
      properties:
        agentUserId:
          description: Required. Third-party user ID.
          type: string
        requestId:
          description: Request ID used for debugging.
          type: string
      type: object
    SyncResponse:
      description: >-
        Response type for the

        [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call. This should

        follow the same format as the Actions on Google `action.devices.SYNC`

        [response](/actions/smarthome/create-app#actiondevicessync).

        # Example


        ```json

        {
          "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
          "payload": {
            "agentUserId": "1836.15267389",
            "devices": [{
              "id": "123",
              "type": "action.devices.types.OUTLET",
              "traits": [
                "action.devices.traits.OnOff"
              ],
              "name": {
                "defaultNames": ["My Outlet 1234"],
                "name": "Night light",
                "nicknames": ["wall plug"]
              },
              "willReportState": false,
              "deviceInfo": {
                "manufacturer": "lights-out-inc",
                "model": "hs1234",
                "hwVersion": "3.2",
                "swVersion": "11.4"
              },
              "customData": {
                "fooValue": 74,
                "barValue": true,
                "bazValue": "foo"
              }
            }]
          }
        }

        ```
      properties:
        payload:
          $ref: "#/components/schemas/SyncResponsePayload"
        requestId:
          description: Request ID used for debugging. Copied from the request.
          type: string
      type: object
    SyncResponsePayload:
      description: Payload containing device information.
      properties:
        agentUserId:
          description: Third-party user ID
          type: string
        devices:
          description: Devices associated with the third-party user.
          items:
            $ref: "#/components/schemas/Device"
          type: array
      type: object
