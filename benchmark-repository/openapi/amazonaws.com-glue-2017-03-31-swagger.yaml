openapi: 3.0.0
info:
  version: 2017-03-31
  x-release: v4
  title: AWS Glue
  description: <fullname>AWS Glue</fullname> <p>Defines the public endpoint for the AWS
    Glue service.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: glue
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/glue-2017-03-31.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/glue/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AWSGlue.BatchCreatePartition:
    post:
      operationId: BatchCreatePartition
      description: Creates one or more partitions in a batch operation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchCreatePartitionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "482":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "485":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "486":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchCreatePartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchCreatePartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchDeleteConnection:
    post:
      operationId: BatchDeleteConnection
      description: Deletes a list of connection definitions from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchDeleteConnectionResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchDeleteConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchDeleteConnectionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchDeletePartition:
    post:
      operationId: BatchDeletePartition
      description: Deletes one or more partitions in a batch operation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchDeletePartitionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchDeletePartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchDeletePartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchDeleteTable:
    post:
      operationId: BatchDeleteTable
      description: <p>Deletes multiple tables at once.</p> <note> <p>After completing this
        operation, you no longer have access to the table versions and
        partitions that belong to the deleted table. AWS Glue deletes these
        "orphaned" resources asynchronously in a timely manner, at the
        discretion of the service.</p> <p>To ensure the immediate deletion of
        all related resources, before calling <code>BatchDeleteTable</code>, use
        <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>,
        and <code>DeletePartition</code> or <code>BatchDeletePartition</code>,
        to delete any resources that belong to the table.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchDeleteTableResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchDeleteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchDeleteTableRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchDeleteTableVersion:
    post:
      operationId: BatchDeleteTableVersion
      description: Deletes a specified batch of versions of a table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchDeleteTableVersionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchDeleteTableVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchDeleteTableVersionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchGetCrawlers:
    post:
      operationId: BatchGetCrawlers
      description: Returns a list of resource metadata for a given list of crawler names.
        After calling the <code>ListCrawlers</code> operation, you can call this
        operation to access the data to which you have been granted permissions.
        This operation supports all IAM permissions, including permission
        conditions that uses tags.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetCrawlersResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchGetCrawlers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetCrawlersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchGetDevEndpoints:
    post:
      operationId: BatchGetDevEndpoints
      description: Returns a list of resource metadata for a given list of development
        endpoint names. After calling the <code>ListDevEndpoints</code>
        operation, you can call this operation to access the data to which you
        have been granted permissions. This operation supports all IAM
        permissions, including permission conditions that uses tags.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetDevEndpointsResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchGetDevEndpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetDevEndpointsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchGetJobs:
    post:
      operationId: BatchGetJobs
      description: "Returns a list of resource metadata for a given list of job names.
        After calling the <code>ListJobs</code> operation, you can call this
        operation to access the data to which you have been granted permissions.
        This operation supports all IAM permissions, including permission
        conditions that uses tags. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetJobsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchGetJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetJobsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchGetPartition:
    post:
      operationId: BatchGetPartition
      description: Retrieves partitions in a batch request.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetPartitionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchGetPartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetPartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchGetTriggers:
    post:
      operationId: BatchGetTriggers
      description: Returns a list of resource metadata for a given list of trigger names.
        After calling the <code>ListTriggers</code> operation, you can call this
        operation to access the data to which you have been granted permissions.
        This operation supports all IAM permissions, including permission
        conditions that uses tags.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetTriggersResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchGetTriggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetTriggersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchGetWorkflows:
    post:
      operationId: BatchGetWorkflows
      description: Returns a list of resource metadata for a given list of workflow names.
        After calling the <code>ListWorkflows</code> operation, you can call
        this operation to access the data to which you have been granted
        permissions. This operation supports all IAM permissions, including
        permission conditions that uses tags.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetWorkflowsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchGetWorkflows
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetWorkflowsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.BatchStopJobRun:
    post:
      operationId: BatchStopJobRun
      description: Stops one or more job runs for a specified job definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchStopJobRunResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.BatchStopJobRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchStopJobRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CancelMLTaskRun:
    post:
      operationId: CancelMLTaskRun
      description: "Cancels (stops) a task run. Machine learning task runs are asynchronous
        tasks that AWS Glue runs on your behalf as part of various machine
        learning workflows. You can cancel a machine learning task run at any
        time by calling <code>CancelMLTaskRun</code> with a task run's parent
        transform's <code>TransformID</code> and the task run's
        <code>TaskRunId</code>. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelMLTaskRunResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CancelMLTaskRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelMLTaskRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateClassifier:
    post:
      operationId: CreateClassifier
      description: Creates a classifier in the user's account. This can be a
        <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a
        <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending
        on which field of the request is present.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateClassifierResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateClassifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClassifierRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateConnection:
    post:
      operationId: CreateConnection
      description: Creates a connection definition in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateConnectionResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConnectionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateCrawler:
    post:
      operationId: CreateCrawler
      description: Creates a new crawler with specified targets, role, configuration, and
        optional schedule. At least one crawl target must be specified, in the
        <code>s3Targets</code> field, the <code>jdbcTargets</code> field, or the
        <code>DynamoDBTargets</code> field.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCrawlerResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateCrawler
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCrawlerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateDatabase:
    post:
      operationId: CreateDatabase
      description: Creates a new database in a Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDatabaseResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "482":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatabaseRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateDevEndpoint:
    post:
      operationId: CreateDevEndpoint
      description: Creates a new development endpoint.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDevEndpointResponse"
        "480":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "481":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "482":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "486":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "487":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateDevEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDevEndpointRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateJob:
    post:
      operationId: CreateJob
      description: Creates a new job definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateJobResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "482":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "486":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateMLTransform:
    post:
      operationId: CreateMLTransform
      description: <p>Creates an AWS Glue machine learning transform. This operation
        creates the transform and all the necessary parameters to train it.</p>
        <p>Call this operation as the first step in the process of using a
        machine learning transform (such as the <code>FindMatches</code>
        transform) for deduplicating data. You can provide an optional
        <code>Description</code>, in addition to the parameters that you want to
        use for your algorithm.</p> <p>You must also specify certain parameters
        for the tasks that AWS Glue runs on your behalf as part of learning from
        your data and creating a high-quality machine learning transform. These
        parameters include <code>Role</code>, and optionally,
        <code>AllocatedCapacity</code>, <code>Timeout</code>, and
        <code>MaxRetries</code>. For more information, see <a
        href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html">Jobs</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMLTransformResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "485":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "486":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateMLTransform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMLTransformRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreatePartition:
    post:
      operationId: CreatePartition
      description: Creates a new partition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePartitionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "482":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "485":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "486":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreatePartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateScript:
    post:
      operationId: CreateScript
      description: Transforms a directed acyclic graph (DAG) into code.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateScriptResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateScript
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScriptRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateSecurityConfiguration:
    post:
      operationId: CreateSecurityConfiguration
      description: Creates a new security configuration. A security configuration is a set
        of security properties that can be used by AWS Glue. You can use a
        security configuration to encrypt data at rest. For information about
        using security configurations in AWS Glue, see <a
        href="https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html">Encrypting
        Data Written by Crawlers, Jobs, and Development Endpoints</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSecurityConfigurationResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateSecurityConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecurityConfigurationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateTable:
    post:
      operationId: CreateTable
      description: Creates a new table definition in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTableResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "484":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "485":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "486":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTableRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateTrigger:
    post:
      operationId: CreateTrigger
      description: Creates a new trigger.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTriggerResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "484":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "485":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "486":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "487":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTriggerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateUserDefinedFunction:
    post:
      operationId: CreateUserDefinedFunction
      description: Creates a new function definition in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserDefinedFunctionResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "486":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateUserDefinedFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDefinedFunctionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.CreateWorkflow:
    post:
      operationId: CreateWorkflow
      description: Creates a new workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkflowResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "485":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.CreateWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkflowRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteClassifier:
    post:
      operationId: DeleteClassifier
      description: Removes a classifier from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteClassifierResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteClassifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteClassifierRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteConnection:
    post:
      operationId: DeleteConnection
      description: Deletes a connection from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConnectionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteConnectionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteCrawler:
    post:
      operationId: DeleteCrawler
      description: Removes a specified crawler from the AWS Glue Data Catalog, unless the
        crawler state is <code>RUNNING</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCrawlerResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: CrawlerRunningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrawlerRunningException"
        "482":
          description: SchedulerTransitioningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulerTransitioningException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteCrawler
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCrawlerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteDatabase:
    post:
      operationId: DeleteDatabase
      description: <p>Removes a specified database from a Data Catalog.</p> <note> <p>After
        completing this operation, you no longer have access to the tables (and
        all table versions and partitions that might belong to the tables) and
        the user-defined functions in the deleted database. AWS Glue deletes
        these "orphaned" resources asynchronously in a timely manner, at the
        discretion of the service.</p> <p>To ensure the immediate deletion of
        all related resources, before calling <code>DeleteDatabase</code>, use
        <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>,
        <code>DeletePartition</code> or <code>BatchDeletePartition</code>,
        <code>DeleteUserDefinedFunction</code>, and <code>DeleteTable</code> or
        <code>BatchDeleteTable</code>, to delete any resources that belong to
        the database.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDatabaseResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDatabaseRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteDevEndpoint:
    post:
      operationId: DeleteDevEndpoint
      description: Deletes a specified development endpoint.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDevEndpointResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteDevEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDevEndpointRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteJob:
    post:
      operationId: DeleteJob
      description: Deletes a specified job definition. If the job definition is not found,
        no exception is thrown.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteJobResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteMLTransform:
    post:
      operationId: DeleteMLTransform
      description: Deletes an AWS Glue machine learning transform. Machine learning
        transforms are a special type of transform that use machine learning to
        learn the details of the transformation to be performed by learning from
        examples provided by humans. These transformations are then saved by AWS
        Glue. If you no longer need a transform, you can delete it by calling
        <code>DeleteMLTransforms</code>. However, any AWS Glue jobs that still
        reference the deleted transform will no longer succeed.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteMLTransformResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteMLTransform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteMLTransformRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeletePartition:
    post:
      operationId: DeletePartition
      description: Deletes a specified partition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletePartitionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeletePartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteResourcePolicy:
    post:
      operationId: DeleteResourcePolicy
      description: Deletes a specified policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResourcePolicyResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "484":
          description: ConditionCheckFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionCheckFailureException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteSecurityConfiguration:
    post:
      operationId: DeleteSecurityConfiguration
      description: Deletes a specified security configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteSecurityConfigurationResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteSecurityConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSecurityConfigurationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteTable:
    post:
      operationId: DeleteTable
      description: <p>Removes a table definition from the Data Catalog.</p> <note> <p>After
        completing this operation, you no longer have access to the table
        versions and partitions that belong to the deleted table. AWS Glue
        deletes these "orphaned" resources asynchronously in a timely manner, at
        the discretion of the service.</p> <p>To ensure the immediate deletion
        of all related resources, before calling <code>DeleteTable</code>, use
        <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>,
        and <code>DeletePartition</code> or <code>BatchDeletePartition</code>,
        to delete any resources that belong to the table.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTableResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTableRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteTableVersion:
    post:
      operationId: DeleteTableVersion
      description: Deletes a specified version of a table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTableVersionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteTableVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTableVersionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteTrigger:
    post:
      operationId: DeleteTrigger
      description: Deletes a specified trigger. If the trigger is not found, no exception
        is thrown.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTriggerResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTriggerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteUserDefinedFunction:
    post:
      operationId: DeleteUserDefinedFunction
      description: Deletes an existing function definition from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserDefinedFunctionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteUserDefinedFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserDefinedFunctionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.DeleteWorkflow:
    post:
      operationId: DeleteWorkflow
      description: Deletes a workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteWorkflowResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.DeleteWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteWorkflowRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetCatalogImportStatus:
    post:
      operationId: GetCatalogImportStatus
      description: Retrieves the status of a migration operation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCatalogImportStatusResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetCatalogImportStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCatalogImportStatusRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetClassifier:
    post:
      operationId: GetClassifier
      description: Retrieve a classifier by name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetClassifierResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetClassifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetClassifierRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetClassifiers:
    post:
      operationId: GetClassifiers
      description: Lists all classifier objects in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetClassifiersResponse"
        "480":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetClassifiers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetClassifiersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetConnection:
    post:
      operationId: GetConnection
      description: Retrieves a connection definition from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetConnectionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetConnectionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetConnections:
    post:
      operationId: GetConnections
      description: Retrieves a list of connection definitions from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetConnectionsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetConnections
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetConnectionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetCrawler:
    post:
      operationId: GetCrawler
      description: Retrieves metadata for a specified crawler.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCrawlerResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetCrawler
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCrawlerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetCrawlerMetrics:
    post:
      operationId: GetCrawlerMetrics
      description: Retrieves metrics about specified crawlers.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCrawlerMetricsResponse"
        "480":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetCrawlerMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCrawlerMetricsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetCrawlers:
    post:
      operationId: GetCrawlers
      description: Retrieves metadata for all crawlers defined in the customer account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCrawlersResponse"
        "480":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetCrawlers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCrawlersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetDataCatalogEncryptionSettings:
    post:
      operationId: GetDataCatalogEncryptionSettings
      description: Retrieves the security configuration for a specified catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataCatalogEncryptionSettingsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetDataCatalogEncryptionSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDataCatalogEncryptionSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetDatabase:
    post:
      operationId: GetDatabase
      description: Retrieves the definition of a specified database.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDatabaseResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDatabaseRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetDatabases:
    post:
      operationId: GetDatabases
      description: Retrieves all databases defined in a given Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDatabasesResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetDatabases
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDatabasesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetDataflowGraph:
    post:
      operationId: GetDataflowGraph
      description: "Transforms a Python script into a directed acyclic graph (DAG). "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataflowGraphResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetDataflowGraph
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDataflowGraphRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetDevEndpoint:
    post:
      operationId: GetDevEndpoint
      description: <p>Retrieves information about a specified development endpoint.</p>
        <note> <p>When you create a development endpoint in a virtual private
        cloud (VPC), AWS Glue returns only a private IP address, and the public
        IP address field is not populated. When you create a non-VPC development
        endpoint, AWS Glue returns only a public IP address.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevEndpointResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetDevEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDevEndpointRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetDevEndpoints:
    post:
      operationId: GetDevEndpoints
      description: <p>Retrieves all the development endpoints in this AWS account.</p>
        <note> <p>When you create a development endpoint in a virtual private
        cloud (VPC), AWS Glue returns only a private IP address and the public
        IP address field is not populated. When you create a non-VPC development
        endpoint, AWS Glue returns only a public IP address.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevEndpointsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetDevEndpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDevEndpointsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetJob:
    post:
      operationId: GetJob
      description: Retrieves an existing job definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetJobBookmark:
    post:
      operationId: GetJobBookmark
      description: Returns information on a job bookmark entry.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobBookmarkResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetJobBookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobBookmarkRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetJobRun:
    post:
      operationId: GetJobRun
      description: Retrieves the metadata for a given job run.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobRunResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetJobRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetJobRuns:
    post:
      operationId: GetJobRuns
      description: Retrieves metadata for all runs of a given job definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobRunsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetJobRuns
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobRunsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetJobs:
    post:
      operationId: GetJobs
      description: Retrieves all current job definitions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetJobsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetMLTaskRun:
    post:
      operationId: GetMLTaskRun
      description: Gets details for a specific task run on a machine learning transform.
        Machine learning task runs are asynchronous tasks that AWS Glue runs on
        your behalf as part of various machine learning workflows. You can check
        the stats of any task run by calling <code>GetMLTaskRun</code> with the
        <code>TaskRunID</code> and its parent transform's
        <code>TransformID</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMLTaskRunResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetMLTaskRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMLTaskRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetMLTaskRuns:
    post:
      operationId: GetMLTaskRuns
      description: <p>Gets a list of runs for a machine learning transform. Machine
        learning task runs are asynchronous tasks that AWS Glue runs on your
        behalf as part of various machine learning workflows. You can get a
        sortable, filterable list of machine learning task runs by calling
        <code>GetMLTaskRuns</code> with their parent transform's
        <code>TransformID</code> and other optional parameters as documented in
        this section.</p> <p>This operation returns a list of historic runs and
        must be paginated.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMLTaskRunsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetMLTaskRuns
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMLTaskRunsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetMLTransform:
    post:
      operationId: GetMLTransform
      description: Gets an AWS Glue machine learning transform artifact and all its
        corresponding metadata. Machine learning transforms are a special type
        of transform that use machine learning to learn the details of the
        transformation to be performed by learning from examples provided by
        humans. These transformations are then saved by AWS Glue. You can
        retrieve their metadata by calling <code>GetMLTransform</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMLTransformResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetMLTransform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMLTransformRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetMLTransforms:
    post:
      operationId: GetMLTransforms
      description: Gets a sortable, filterable list of existing AWS Glue machine learning
        transforms. Machine learning transforms are a special type of transform
        that use machine learning to learn the details of the transformation to
        be performed by learning from examples provided by humans. These
        transformations are then saved by AWS Glue, and you can retrieve their
        metadata by calling <code>GetMLTransforms</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMLTransformsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetMLTransforms
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMLTransformsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetMapping:
    post:
      operationId: GetMapping
      description: Creates mappings.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMappingResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetMapping
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMappingRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetPartition:
    post:
      operationId: GetPartition
      description: Retrieves information about a specified partition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPartitionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetPartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetPartitions:
    post:
      operationId: GetPartitions
      description: Retrieves information about the partitions in a table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPartitionsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetPartitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPartitionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetPlan:
    post:
      operationId: GetPlan
      description: Gets code to perform a specified mapping.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPlanResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPlanRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetResourcePolicy:
    post:
      operationId: GetResourcePolicy
      description: Retrieves a specified resource policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResourcePolicyResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetSecurityConfiguration:
    post:
      operationId: GetSecurityConfiguration
      description: Retrieves a specified security configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSecurityConfigurationResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetSecurityConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSecurityConfigurationRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetSecurityConfigurations:
    post:
      operationId: GetSecurityConfigurations
      description: Retrieves a list of all security configurations.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSecurityConfigurationsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetSecurityConfigurations
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSecurityConfigurationsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTable:
    post:
      operationId: GetTable
      description: Retrieves the <code>Table</code> definition in a Data Catalog for a
        specified table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTableResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTableRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTableVersion:
    post:
      operationId: GetTableVersion
      description: Retrieves a specified version of a table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTableVersionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTableVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTableVersionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTableVersions:
    post:
      operationId: GetTableVersions
      description: Retrieves a list of strings that identify available versions of a
        specified table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTableVersionsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTableVersions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTableVersionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTables:
    post:
      operationId: GetTables
      description: Retrieves the definitions of some or all of the tables in a given
        <code>Database</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTablesResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTablesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTags:
    post:
      operationId: GetTags
      description: Retrieves a list of tags associated with a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTagsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTrigger:
    post:
      operationId: GetTrigger
      description: Retrieves the definition of a trigger.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTriggerResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTriggerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetTriggers:
    post:
      operationId: GetTriggers
      description: Gets all the triggers associated with a job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTriggersResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetTriggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTriggersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetUserDefinedFunction:
    post:
      operationId: GetUserDefinedFunction
      description: Retrieves a specified function definition from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserDefinedFunctionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetUserDefinedFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserDefinedFunctionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetUserDefinedFunctions:
    post:
      operationId: GetUserDefinedFunctions
      description: Retrieves multiple function definitions from the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserDefinedFunctionsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetUserDefinedFunctions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserDefinedFunctionsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetWorkflow:
    post:
      operationId: GetWorkflow
      description: Retrieves resource metadata for a workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkflowResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetWorkflowRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetWorkflowRun:
    post:
      operationId: GetWorkflowRun
      description: "Retrieves the metadata for a given workflow run. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkflowRunResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetWorkflowRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetWorkflowRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetWorkflowRunProperties:
    post:
      operationId: GetWorkflowRunProperties
      description: Retrieves the workflow run properties which were set during the run.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkflowRunPropertiesResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetWorkflowRunProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetWorkflowRunPropertiesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.GetWorkflowRuns:
    post:
      operationId: GetWorkflowRuns
      description: Retrieves metadata for all runs of a given workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkflowRunsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.GetWorkflowRuns
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetWorkflowRunsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ImportCatalogToGlue:
    post:
      operationId: ImportCatalogToGlue
      description: Imports an existing Amazon Athena Data Catalog to AWS Glue
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportCatalogToGlueResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ImportCatalogToGlue
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportCatalogToGlueRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ListCrawlers:
    post:
      operationId: ListCrawlers
      description: <p>Retrieves the names of all crawler resources in this AWS account, or
        the resources with the specified tag. This operation allows you to see
        which resources are available in your account, and their names.</p>
        <p>This operation takes the optional <code>Tags</code> field, which you
        can use as a filter on the response so that tagged resources can be
        retrieved as a group. If you choose to use tags filtering, only
        resources with the tag are retrieved.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCrawlersResponse"
        "480":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ListCrawlers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListCrawlersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ListDevEndpoints:
    post:
      operationId: ListDevEndpoints
      description: <p>Retrieves the names of all <code>DevEndpoint</code> resources in this
        AWS account, or the resources with the specified tag. This operation
        allows you to see which resources are available in your account, and
        their names.</p> <p>This operation takes the optional <code>Tags</code>
        field, which you can use as a filter on the response so that tagged
        resources can be retrieved as a group. If you choose to use tags
        filtering, only resources with the tag are retrieved.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDevEndpointsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ListDevEndpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDevEndpointsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ListJobs:
    post:
      operationId: ListJobs
      description: <p>Retrieves the names of all job resources in this AWS account, or the
        resources with the specified tag. This operation allows you to see which
        resources are available in your account, and their names.</p> <p>This
        operation takes the optional <code>Tags</code> field, which you can use
        as a filter on the response so that tagged resources can be retrieved as
        a group. If you choose to use tags filtering, only resources with the
        tag are retrieved.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJobsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ListJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListJobsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ListTriggers:
    post:
      operationId: ListTriggers
      description: <p>Retrieves the names of all trigger resources in this AWS account, or
        the resources with the specified tag. This operation allows you to see
        which resources are available in your account, and their names.</p>
        <p>This operation takes the optional <code>Tags</code> field, which you
        can use as a filter on the response so that tagged resources can be
        retrieved as a group. If you choose to use tags filtering, only
        resources with the tag are retrieved.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTriggersResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ListTriggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTriggersRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ListWorkflows:
    post:
      operationId: ListWorkflows
      description: Lists names of workflows created in the account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkflowsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ListWorkflows
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListWorkflowsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.PutDataCatalogEncryptionSettings:
    post:
      operationId: PutDataCatalogEncryptionSettings
      description: Sets the security configuration for a specified catalog. After the
        configuration has been set, the specified encryption is applied to every
        catalog write thereafter.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutDataCatalogEncryptionSettingsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.PutDataCatalogEncryptionSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutDataCatalogEncryptionSettingsRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.PutResourcePolicy:
    post:
      operationId: PutResourcePolicy
      description: Sets the Data Catalog resource policy for access control.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutResourcePolicyResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "484":
          description: ConditionCheckFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionCheckFailureException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.PutResourcePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutResourcePolicyRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.PutWorkflowRunProperties:
    post:
      operationId: PutWorkflowRunProperties
      description: Puts the specified workflow run properties for the given workflow run.
        If a property already exists for the specified run, then it overrides
        the value otherwise adds the property to existing properties.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutWorkflowRunPropertiesResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "486":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.PutWorkflowRunProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutWorkflowRunPropertiesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.ResetJobBookmark:
    post:
      operationId: ResetJobBookmark
      description: Resets a bookmark entry.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetJobBookmarkResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.ResetJobBookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetJobBookmarkRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.SearchTables:
    post:
      operationId: SearchTables
      description: <p>Searches a set of tables based on properties in the table metadata as
        well as on the parent database. You can search against text or filter
        conditions. </p> <p>You can only get tables that you have access to
        based on the security policies defined in Lake Formation. You need at
        least a read-only access to the table for it to be returned. If you do
        not have access to all the columns in the table, these columns will not
        be searched against when returning the list of tables back to you. If
        you have access to the columns but not the data in the columns, those
        columns and the associated metadata for those columns will be included
        in the search. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTablesResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.SearchTables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchTablesRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartCrawler:
    post:
      operationId: StartCrawler
      description: Starts a crawl using the specified crawler, regardless of what is
        scheduled. If the crawler is already running, returns a <a
        href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException">CrawlerRunningException</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartCrawlerResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: CrawlerRunningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrawlerRunningException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartCrawler
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartCrawlerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartCrawlerSchedule:
    post:
      operationId: StartCrawlerSchedule
      description: Changes the schedule state of the specified crawler to
        <code>SCHEDULED</code>, unless the crawler is already running or the
        schedule state is already <code>SCHEDULED</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartCrawlerScheduleResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: SchedulerRunningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulerRunningException"
        "482":
          description: SchedulerTransitioningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulerTransitioningException"
        "483":
          description: NoScheduleException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoScheduleException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartCrawlerSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartCrawlerScheduleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartExportLabelsTaskRun:
    post:
      operationId: StartExportLabelsTaskRun
      description: Begins an asynchronous task to export all labeled data for a particular
        transform. This task is the only label-related API call that is not part
        of the typical active learning workflow. You typically use
        <code>StartExportLabelsTaskRun</code> when you want to work with all of
        your existing labels at the same time, such as when you want to remove
        or change labels that were previously submitted as truth. This API
        operation accepts the <code>TransformId</code> whose labels you want to
        export and an Amazon Simple Storage Service (Amazon S3) path to export
        the labels to. The operation returns a <code>TaskRunId</code>. You can
        check on the status of your task run by calling the
        <code>GetMLTaskRun</code> API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartExportLabelsTaskRunResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartExportLabelsTaskRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartExportLabelsTaskRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartImportLabelsTaskRun:
    post:
      operationId: StartImportLabelsTaskRun
      description: <p>Enables you to provide additional labels (examples of truth) to be
        used to teach the machine learning transform and improve its quality.
        This API operation is generally used as part of the active learning
        workflow that starts with the
        <code>StartMLLabelingSetGenerationTaskRun</code> call and that
        ultimately results in improving the quality of your machine learning
        transform. </p> <p>After the
        <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue
        machine learning will have generated a series of questions for humans to
        answer. (Answering these questions is often called 'labeling' in the
        machine learning workflows). In the case of the <code>FindMatches</code>
        transform, these questions are of the form, “What is the correct way to
        group these rows together into groups composed entirely of matching
        records?” After the labeling process is finished, users upload their
        answers/labels with a call to <code>StartImportLabelsTaskRun</code>.
        After <code>StartImportLabelsTaskRun</code> finishes, all future runs of
        the machine learning transform use the new and improved labels and
        perform a higher-quality transformation.</p> <p>By default,
        <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from
        and combines all labels that you upload unless you set
        <code>Replace</code> to true. If you set <code>Replace</code> to true,
        <code>StartImportLabelsTaskRun</code> deletes and forgets all previously
        uploaded labels and learns only from the exact set that you upload.
        Replacing labels can be helpful if you realize that you previously
        uploaded incorrect labels, and you believe that they are having a
        negative effect on your transform quality.</p> <p>You can check on the
        status of your task run by calling the <code>GetMLTaskRun</code>
        operation. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartImportLabelsTaskRunResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "484":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartImportLabelsTaskRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartImportLabelsTaskRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartJobRun:
    post:
      operationId: StartJobRun
      description: Starts a job run using a job definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartJobRunResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "485":
          description: ConcurrentRunsExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentRunsExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartJobRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartJobRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartMLEvaluationTaskRun:
    post:
      operationId: StartMLEvaluationTaskRun
      description: <p>Starts a task to estimate the quality of the transform. </p> <p>When
        you provide label sets as examples of truth, AWS Glue machine learning
        uses some of those examples to learn from them. The rest of the labels
        are used as a test to estimate quality.</p> <p>Returns a unique
        identifier for the run. You can call <code>GetMLTaskRun</code> to get
        more information about the stats of the
        <code>EvaluationTaskRun</code>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartMLEvaluationTaskRunResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: ConcurrentRunsExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentRunsExceededException"
        "485":
          description: MLTransformNotReadyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MLTransformNotReadyException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartMLEvaluationTaskRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartMLEvaluationTaskRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartMLLabelingSetGenerationTaskRun:
    post:
      operationId: StartMLLabelingSetGenerationTaskRun
      description: <p>Starts the active learning workflow for your machine learning
        transform to improve the transform's quality by generating label sets
        and adding labels.</p> <p>When the
        <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue will
        have generated a "labeling set" or a set of questions for humans to
        answer.</p> <p>In the case of the <code>FindMatches</code> transform,
        these questions are of the form, “What is the correct way to group these
        rows together into groups composed entirely of matching records?” </p>
        <p>After the labeling process is finished, you can upload your labels
        with a call to <code>StartImportLabelsTaskRun</code>. After
        <code>StartImportLabelsTaskRun</code> finishes, all future runs of the
        machine learning transform will use the new and improved labels and
        perform a higher-quality transformation.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartMLLabelingSetGenerationTaskRunResp\
                  onse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: ConcurrentRunsExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentRunsExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartMLLabelingSetGenerationTaskRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartMLLabelingSetGenerationTaskRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartTrigger:
    post:
      operationId: StartTrigger
      description: Starts an existing trigger. See <a
        href="https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering
        Jobs</a> for information about how different types of trigger are
        started.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartTriggerResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "485":
          description: ConcurrentRunsExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentRunsExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartTriggerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StartWorkflowRun:
    post:
      operationId: StartWorkflowRun
      description: Starts a new run of the specified workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartWorkflowRunResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "485":
          description: ConcurrentRunsExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentRunsExceededException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StartWorkflowRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartWorkflowRunRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StopCrawler:
    post:
      operationId: StopCrawler
      description: If the specified crawler is running, stops the crawl.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopCrawlerResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: CrawlerNotRunningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrawlerNotRunningException"
        "482":
          description: CrawlerStoppingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrawlerStoppingException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StopCrawler
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopCrawlerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StopCrawlerSchedule:
    post:
      operationId: StopCrawlerSchedule
      description: Sets the schedule state of the specified crawler to
        <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is
        already running.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopCrawlerScheduleResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: SchedulerNotRunningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulerNotRunningException"
        "482":
          description: SchedulerTransitioningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulerTransitioningException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StopCrawlerSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopCrawlerScheduleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.StopTrigger:
    post:
      operationId: StopTrigger
      description: Stops a specified trigger.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopTriggerResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.StopTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopTriggerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.TagResource:
    post:
      operationId: TagResource
      description: Adds tags to a resource. A tag is a label you can assign to an AWS
        resource. In AWS Glue, you can tag only certain resources. For
        information about what resources you can tag, see <a
        href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">AWS
        Tags in AWS Glue</a>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UntagResource:
    post:
      operationId: UntagResource
      description: Removes tags from a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateClassifier:
    post:
      operationId: UpdateClassifier
      description: Modifies an existing classifier (a <code>GrokClassifier</code>, an
        <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a
        <code>CsvClassifier</code>, depending on which field is present).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateClassifierResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: VersionMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionMismatchException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateClassifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClassifierRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateConnection:
    post:
      operationId: UpdateConnection
      description: Updates a connection definition in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateConnectionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConnectionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateCrawler:
    post:
      operationId: UpdateCrawler
      description: Updates a crawler. If a crawler is running, you must stop it using
        <code>StopCrawler</code> before updating it.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCrawlerResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: VersionMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionMismatchException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: CrawlerRunningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrawlerRunningException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateCrawler
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCrawlerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateCrawlerSchedule:
    post:
      operationId: UpdateCrawlerSchedule
      description: "Updates the schedule of a crawler using a <code>cron</code> expression.
        "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCrawlerScheduleResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: VersionMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionMismatchException"
        "483":
          description: SchedulerTransitioningException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulerTransitioningException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateCrawlerSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCrawlerScheduleRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateDatabase:
    post:
      operationId: UpdateDatabase
      description: Updates an existing database definition in a Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDatabaseResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDatabaseRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateDevEndpoint:
    post:
      operationId: UpdateDevEndpoint
      description: Updates a specified development endpoint.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDevEndpointResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateDevEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDevEndpointRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateJob:
    post:
      operationId: UpdateJob
      description: Updates an existing job definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateJobResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateJobRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateMLTransform:
    post:
      operationId: UpdateMLTransform
      description: <p>Updates an existing machine learning transform. Call this operation
        to tune the algorithm parameters to achieve better results.</p> <p>After
        calling this operation, you can call the
        <code>StartMLEvaluationTaskRun</code> operation to assess how well your
        new parameters achieved your goals (such as improving the quality of
        your machine learning transform, or making it more cost-effective).</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMLTransformResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateMLTransform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMLTransformRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdatePartition:
    post:
      operationId: UpdatePartition
      description: Updates a partition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePartitionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdatePartition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePartitionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateTable:
    post:
      operationId: UpdateTable
      description: Updates a metadata table in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTableResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "485":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "486":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTableRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateTrigger:
    post:
      operationId: UpdateTrigger
      description: Updates a trigger definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTriggerResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTriggerRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateUserDefinedFunction:
    post:
      operationId: UpdateUserDefinedFunction
      description: Updates an existing function definition in the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserDefinedFunctionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateUserDefinedFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDefinedFunctionRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSGlue.UpdateWorkflow:
    post:
      operationId: UpdateWorkflow
      description: Updates an existing workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWorkflowResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSGlue.UpdateWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkflowRequest"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://glue.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Glue multi-region endpoint
  - url: https://glue.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Glue multi-region endpoint
  - url: http://glue.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Glue endpoint for China (Beijing) and China (Ningxia)
  - url: https://glue.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Glue endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchCreatePartitionResponse:
      type: object
      properties:
        Errors:
          $ref: "#/components/schemas/PartitionErrors"
    BatchCreatePartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionInputList
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionInputList:
          $ref: "#/components/schemas/PartitionInputList"
    InvalidInputException: {}
    AlreadyExistsException: {}
    ResourceNumberLimitExceededException: {}
    InternalServiceException: {}
    EntityNotFoundException: {}
    OperationTimeoutException: {}
    GlueEncryptionException: {}
    BatchDeleteConnectionResponse:
      type: object
      properties:
        Succeeded:
          $ref: "#/components/schemas/NameStringList"
        Errors:
          $ref: "#/components/schemas/ErrorByName"
    BatchDeleteConnectionRequest:
      type: object
      required:
        - ConnectionNameList
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        ConnectionNameList:
          $ref: "#/components/schemas/DeleteConnectionNameList"
    BatchDeletePartitionResponse:
      type: object
      properties:
        Errors:
          $ref: "#/components/schemas/PartitionErrors"
    BatchDeletePartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionsToDelete
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionsToDelete:
          $ref: "#/components/schemas/BatchDeletePartitionValueList"
    BatchDeleteTableResponse:
      type: object
      properties:
        Errors:
          $ref: "#/components/schemas/TableErrors"
    BatchDeleteTableRequest:
      type: object
      required:
        - DatabaseName
        - TablesToDelete
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TablesToDelete:
          $ref: "#/components/schemas/BatchDeleteTableNameList"
    BatchDeleteTableVersionResponse:
      type: object
      properties:
        Errors:
          $ref: "#/components/schemas/TableVersionErrors"
    BatchDeleteTableVersionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - VersionIds
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        VersionIds:
          $ref: "#/components/schemas/BatchDeleteTableVersionList"
    BatchGetCrawlersResponse:
      type: object
      properties:
        Crawlers:
          $ref: "#/components/schemas/CrawlerList"
        CrawlersNotFound:
          $ref: "#/components/schemas/CrawlerNameList"
    BatchGetCrawlersRequest:
      type: object
      required:
        - CrawlerNames
      properties:
        CrawlerNames:
          $ref: "#/components/schemas/CrawlerNameList"
    BatchGetDevEndpointsResponse:
      type: object
      properties:
        DevEndpoints:
          $ref: "#/components/schemas/DevEndpointList"
        DevEndpointsNotFound:
          $ref: "#/components/schemas/DevEndpointNames"
    BatchGetDevEndpointsRequest:
      type: object
      required:
        - DevEndpointNames
      properties:
        DevEndpointNames:
          $ref: "#/components/schemas/DevEndpointNames"
    AccessDeniedException: {}
    BatchGetJobsResponse:
      type: object
      properties:
        Jobs:
          $ref: "#/components/schemas/JobList"
        JobsNotFound:
          $ref: "#/components/schemas/JobNameList"
    BatchGetJobsRequest:
      type: object
      required:
        - JobNames
      properties:
        JobNames:
          $ref: "#/components/schemas/JobNameList"
    BatchGetPartitionResponse:
      type: object
      properties:
        Partitions:
          $ref: "#/components/schemas/PartitionList"
        UnprocessedKeys:
          $ref: "#/components/schemas/BatchGetPartitionValueList"
    BatchGetPartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionsToGet
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionsToGet:
          $ref: "#/components/schemas/BatchGetPartitionValueList"
    BatchGetTriggersResponse:
      type: object
      properties:
        Triggers:
          $ref: "#/components/schemas/TriggerList"
        TriggersNotFound:
          $ref: "#/components/schemas/TriggerNameList"
    BatchGetTriggersRequest:
      type: object
      required:
        - TriggerNames
      properties:
        TriggerNames:
          $ref: "#/components/schemas/TriggerNameList"
    BatchGetWorkflowsResponse:
      type: object
      properties:
        Workflows:
          $ref: "#/components/schemas/Workflows"
        MissingWorkflows:
          $ref: "#/components/schemas/WorkflowNames"
    BatchGetWorkflowsRequest:
      type: object
      required:
        - Names
      properties:
        Names:
          $ref: "#/components/schemas/WorkflowNames"
        IncludeGraph:
          $ref: "#/components/schemas/NullableBoolean"
    BatchStopJobRunResponse:
      type: object
      properties:
        SuccessfulSubmissions:
          $ref: "#/components/schemas/BatchStopJobRunSuccessfulSubmissionList"
        Errors:
          $ref: "#/components/schemas/BatchStopJobRunErrorList"
    BatchStopJobRunRequest:
      type: object
      required:
        - JobName
        - JobRunIds
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        JobRunIds:
          $ref: "#/components/schemas/BatchStopJobRunJobRunIdList"
    CancelMLTaskRunResponse:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        TaskRunId:
          $ref: "#/components/schemas/HashString"
        Status:
          $ref: "#/components/schemas/TaskStatusType"
    CancelMLTaskRunRequest:
      type: object
      required:
        - TransformId
        - TaskRunId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        TaskRunId:
          $ref: "#/components/schemas/HashString"
    CreateClassifierResponse:
      type: object
      properties: {}
    CreateClassifierRequest:
      type: object
      properties:
        GrokClassifier:
          $ref: "#/components/schemas/CreateGrokClassifierRequest"
        XMLClassifier:
          $ref: "#/components/schemas/CreateXMLClassifierRequest"
        JsonClassifier:
          $ref: "#/components/schemas/CreateJsonClassifierRequest"
        CsvClassifier:
          $ref: "#/components/schemas/CreateCsvClassifierRequest"
    CreateConnectionResponse:
      type: object
      properties: {}
    CreateConnectionRequest:
      type: object
      required:
        - ConnectionInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        ConnectionInput:
          $ref: "#/components/schemas/ConnectionInput"
    CreateCrawlerResponse:
      type: object
      properties: {}
    CreateCrawlerRequest:
      type: object
      required:
        - Name
        - Role
        - Targets
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Role:
          $ref: "#/components/schemas/Role"
        DatabaseName:
          $ref: "#/components/schemas/DatabaseName"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Targets:
          $ref: "#/components/schemas/CrawlerTargets"
        Schedule:
          $ref: "#/components/schemas/CronExpression"
        Classifiers:
          $ref: "#/components/schemas/ClassifierNameList"
        TablePrefix:
          $ref: "#/components/schemas/TablePrefix"
        SchemaChangePolicy:
          $ref: "#/components/schemas/SchemaChangePolicy"
        Configuration:
          $ref: "#/components/schemas/CrawlerConfiguration"
        CrawlerSecurityConfiguration:
          $ref: "#/components/schemas/CrawlerSecurityConfiguration"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    CreateDatabaseResponse:
      type: object
      properties: {}
    CreateDatabaseRequest:
      type: object
      required:
        - DatabaseInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseInput:
          $ref: "#/components/schemas/DatabaseInput"
    CreateDevEndpointResponse:
      type: object
      properties:
        EndpointName:
          $ref: "#/components/schemas/GenericString"
        Status:
          $ref: "#/components/schemas/GenericString"
        SecurityGroupIds:
          $ref: "#/components/schemas/StringList"
        SubnetId:
          $ref: "#/components/schemas/GenericString"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        YarnEndpointAddress:
          $ref: "#/components/schemas/GenericString"
        ZeppelinRemoteSparkInterpreterPort:
          $ref: "#/components/schemas/IntegerValue"
        NumberOfNodes:
          $ref: "#/components/schemas/IntegerValue"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        AvailabilityZone:
          $ref: "#/components/schemas/GenericString"
        VpcId:
          $ref: "#/components/schemas/GenericString"
        ExtraPythonLibsS3Path:
          $ref: "#/components/schemas/GenericString"
        ExtraJarsS3Path:
          $ref: "#/components/schemas/GenericString"
        FailureReason:
          $ref: "#/components/schemas/GenericString"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        CreatedTimestamp:
          $ref: "#/components/schemas/TimestampValue"
        Arguments:
          $ref: "#/components/schemas/MapValue"
    CreateDevEndpointRequest:
      type: object
      required:
        - EndpointName
        - RoleArn
      properties:
        EndpointName:
          $ref: "#/components/schemas/GenericString"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        SecurityGroupIds:
          $ref: "#/components/schemas/StringList"
        SubnetId:
          $ref: "#/components/schemas/GenericString"
        PublicKey:
          $ref: "#/components/schemas/GenericString"
        PublicKeys:
          $ref: "#/components/schemas/PublicKeysList"
        NumberOfNodes:
          $ref: "#/components/schemas/IntegerValue"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        ExtraPythonLibsS3Path:
          $ref: "#/components/schemas/GenericString"
        ExtraJarsS3Path:
          $ref: "#/components/schemas/GenericString"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        Tags:
          $ref: "#/components/schemas/TagsMap"
        Arguments:
          $ref: "#/components/schemas/MapValue"
    IdempotentParameterMismatchException: {}
    ValidationException: {}
    CreateJobResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    CreateJobRequest:
      type: object
      required:
        - Name
        - Role
        - Command
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        LogUri:
          $ref: "#/components/schemas/UriString"
        Role:
          $ref: "#/components/schemas/RoleString"
        ExecutionProperty:
          $ref: "#/components/schemas/ExecutionProperty"
        Command:
          $ref: "#/components/schemas/JobCommand"
        DefaultArguments:
          $ref: "#/components/schemas/GenericMap"
        Connections:
          $ref: "#/components/schemas/ConnectionsList"
        MaxRetries:
          $ref: "#/components/schemas/MaxRetries"
        AllocatedCapacity:
          $ref: "#/components/schemas/IntegerValue"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        Tags:
          $ref: "#/components/schemas/TagsMap"
        NotificationProperty:
          $ref: "#/components/schemas/NotificationProperty"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
    ConcurrentModificationException: {}
    CreateMLTransformResponse:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
    CreateMLTransformRequest:
      type: object
      required:
        - Name
        - InputRecordTables
        - Parameters
        - Role
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        InputRecordTables:
          $ref: "#/components/schemas/GlueTables"
        Parameters:
          $ref: "#/components/schemas/TransformParameters"
        Role:
          $ref: "#/components/schemas/RoleString"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxRetries:
          $ref: "#/components/schemas/NullableInteger"
    CreatePartitionResponse:
      type: object
      properties: {}
    CreatePartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionInput:
          $ref: "#/components/schemas/PartitionInput"
    CreateScriptResponse:
      type: object
      properties:
        PythonScript:
          $ref: "#/components/schemas/PythonScript"
        ScalaCode:
          $ref: "#/components/schemas/ScalaCode"
    CreateScriptRequest:
      type: object
      properties:
        DagNodes:
          $ref: "#/components/schemas/DagNodes"
        DagEdges:
          $ref: "#/components/schemas/DagEdges"
        Language:
          $ref: "#/components/schemas/Language"
    CreateSecurityConfigurationResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        CreatedTimestamp:
          $ref: "#/components/schemas/TimestampValue"
    CreateSecurityConfigurationRequest:
      type: object
      required:
        - Name
        - EncryptionConfiguration
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        EncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
    CreateTableResponse:
      type: object
      properties: {}
    CreateTableRequest:
      type: object
      required:
        - DatabaseName
        - TableInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableInput:
          $ref: "#/components/schemas/TableInput"
    CreateTriggerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    CreateTriggerRequest:
      type: object
      required:
        - Name
        - Type
        - Actions
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        WorkflowName:
          $ref: "#/components/schemas/NameString"
        Type:
          $ref: "#/components/schemas/TriggerType"
        Schedule:
          $ref: "#/components/schemas/GenericString"
        Predicate:
          $ref: "#/components/schemas/Predicate"
        Actions:
          $ref: "#/components/schemas/ActionList"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        StartOnCreation:
          $ref: "#/components/schemas/BooleanValue"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    CreateUserDefinedFunctionResponse:
      type: object
      properties: {}
    CreateUserDefinedFunctionRequest:
      type: object
      required:
        - DatabaseName
        - FunctionInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        FunctionInput:
          $ref: "#/components/schemas/UserDefinedFunctionInput"
    CreateWorkflowResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    CreateWorkflowRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/GenericString"
        DefaultRunProperties:
          $ref: "#/components/schemas/WorkflowRunProperties"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    DeleteClassifierResponse:
      type: object
      properties: {}
    DeleteClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteConnectionResponse:
      type: object
      properties: {}
    DeleteConnectionRequest:
      type: object
      required:
        - ConnectionName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        ConnectionName:
          $ref: "#/components/schemas/NameString"
    DeleteCrawlerResponse:
      type: object
      properties: {}
    DeleteCrawlerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    CrawlerRunningException: {}
    SchedulerTransitioningException: {}
    DeleteDatabaseResponse:
      type: object
      properties: {}
    DeleteDatabaseRequest:
      type: object
      required:
        - Name
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteDevEndpointResponse:
      type: object
      properties: {}
    DeleteDevEndpointRequest:
      type: object
      required:
        - EndpointName
      properties:
        EndpointName:
          $ref: "#/components/schemas/GenericString"
    DeleteJobResponse:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
    DeleteJobRequest:
      type: object
      required:
        - JobName
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
    DeleteMLTransformResponse:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
    DeleteMLTransformRequest:
      type: object
      required:
        - TransformId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
    DeletePartitionResponse:
      type: object
      properties: {}
    DeletePartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionValues
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionValues:
          $ref: "#/components/schemas/ValueStringList"
    DeleteResourcePolicyResponse:
      type: object
      properties: {}
    DeleteResourcePolicyRequest:
      type: object
      properties:
        PolicyHashCondition:
          $ref: "#/components/schemas/HashString"
    ConditionCheckFailureException: {}
    DeleteSecurityConfigurationResponse:
      type: object
      properties: {}
    DeleteSecurityConfigurationRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteTableResponse:
      type: object
      properties: {}
    DeleteTableRequest:
      type: object
      required:
        - DatabaseName
        - Name
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteTableVersionResponse:
      type: object
      properties: {}
    DeleteTableVersionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - VersionId
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        VersionId:
          $ref: "#/components/schemas/VersionString"
    DeleteTriggerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteTriggerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteUserDefinedFunctionResponse:
      type: object
      properties: {}
    DeleteUserDefinedFunctionRequest:
      type: object
      required:
        - DatabaseName
        - FunctionName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        FunctionName:
          $ref: "#/components/schemas/NameString"
    DeleteWorkflowResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    DeleteWorkflowRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    GetCatalogImportStatusResponse:
      type: object
      properties:
        ImportStatus:
          $ref: "#/components/schemas/CatalogImportStatus"
    GetCatalogImportStatusRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
    GetClassifierResponse:
      type: object
      properties:
        Classifier:
          $ref: "#/components/schemas/Classifier"
    GetClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    GetClassifiersResponse:
      type: object
      properties:
        Classifiers:
          $ref: "#/components/schemas/ClassifierList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetClassifiersRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetConnectionResponse:
      type: object
      properties:
        Connection:
          $ref: "#/components/schemas/Connection"
    GetConnectionRequest:
      type: object
      required:
        - Name
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Name:
          $ref: "#/components/schemas/NameString"
        HidePassword:
          $ref: "#/components/schemas/Boolean"
    GetConnectionsResponse:
      type: object
      properties:
        ConnectionList:
          $ref: "#/components/schemas/ConnectionList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetConnectionsRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Filter:
          $ref: "#/components/schemas/GetConnectionsFilter"
        HidePassword:
          $ref: "#/components/schemas/Boolean"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetCrawlerResponse:
      type: object
      properties:
        Crawler:
          $ref: "#/components/schemas/Crawler"
    GetCrawlerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    GetCrawlerMetricsResponse:
      type: object
      properties:
        CrawlerMetricsList:
          $ref: "#/components/schemas/CrawlerMetricsList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetCrawlerMetricsRequest:
      type: object
      properties:
        CrawlerNameList:
          $ref: "#/components/schemas/CrawlerNameList"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetCrawlersResponse:
      type: object
      properties:
        Crawlers:
          $ref: "#/components/schemas/CrawlerList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetCrawlersRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetDataCatalogEncryptionSettingsResponse:
      type: object
      properties:
        DataCatalogEncryptionSettings:
          $ref: "#/components/schemas/DataCatalogEncryptionSettings"
    GetDataCatalogEncryptionSettingsRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
    GetDatabaseResponse:
      type: object
      properties:
        Database:
          $ref: "#/components/schemas/Database"
    GetDatabaseRequest:
      type: object
      required:
        - Name
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Name:
          $ref: "#/components/schemas/NameString"
    GetDatabasesResponse:
      type: object
      required:
        - DatabaseList
      properties:
        DatabaseList:
          $ref: "#/components/schemas/DatabaseList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetDatabasesRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetDataflowGraphResponse:
      type: object
      properties:
        DagNodes:
          $ref: "#/components/schemas/DagNodes"
        DagEdges:
          $ref: "#/components/schemas/DagEdges"
    GetDataflowGraphRequest:
      type: object
      properties:
        PythonScript:
          $ref: "#/components/schemas/PythonScript"
    GetDevEndpointResponse:
      type: object
      properties:
        DevEndpoint:
          $ref: "#/components/schemas/DevEndpoint"
    GetDevEndpointRequest:
      type: object
      required:
        - EndpointName
      properties:
        EndpointName:
          $ref: "#/components/schemas/GenericString"
    GetDevEndpointsResponse:
      type: object
      properties:
        DevEndpoints:
          $ref: "#/components/schemas/DevEndpointList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetDevEndpointsRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetJobResponse:
      type: object
      properties:
        Job:
          $ref: "#/components/schemas/Job"
    GetJobRequest:
      type: object
      required:
        - JobName
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
    GetJobBookmarkResponse:
      type: object
      properties:
        JobBookmarkEntry:
          $ref: "#/components/schemas/JobBookmarkEntry"
    GetJobBookmarkRequest:
      type: object
      required:
        - JobName
      properties:
        JobName:
          $ref: "#/components/schemas/JobName"
        RunId:
          $ref: "#/components/schemas/RunId"
    GetJobRunResponse:
      type: object
      properties:
        JobRun:
          $ref: "#/components/schemas/JobRun"
    GetJobRunRequest:
      type: object
      required:
        - JobName
        - RunId
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        RunId:
          $ref: "#/components/schemas/IdString"
        PredecessorsIncluded:
          $ref: "#/components/schemas/BooleanValue"
    GetJobRunsResponse:
      type: object
      properties:
        JobRuns:
          $ref: "#/components/schemas/JobRunList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetJobRunsRequest:
      type: object
      required:
        - JobName
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        NextToken:
          $ref: "#/components/schemas/GenericString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetJobsResponse:
      type: object
      properties:
        Jobs:
          $ref: "#/components/schemas/JobList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetJobsRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/GenericString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetMLTaskRunResponse:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        TaskRunId:
          $ref: "#/components/schemas/HashString"
        Status:
          $ref: "#/components/schemas/TaskStatusType"
        LogGroupName:
          $ref: "#/components/schemas/GenericString"
        Properties:
          $ref: "#/components/schemas/TaskRunProperties"
        ErrorString:
          $ref: "#/components/schemas/GenericString"
        StartedOn:
          $ref: "#/components/schemas/Timestamp"
        LastModifiedOn:
          $ref: "#/components/schemas/Timestamp"
        CompletedOn:
          $ref: "#/components/schemas/Timestamp"
        ExecutionTime:
          $ref: "#/components/schemas/ExecutionTime"
    GetMLTaskRunRequest:
      type: object
      required:
        - TransformId
        - TaskRunId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        TaskRunId:
          $ref: "#/components/schemas/HashString"
    GetMLTaskRunsResponse:
      type: object
      properties:
        TaskRuns:
          $ref: "#/components/schemas/TaskRunList"
        NextToken:
          $ref: "#/components/schemas/PaginationToken"
    GetMLTaskRunsRequest:
      type: object
      required:
        - TransformId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        NextToken:
          $ref: "#/components/schemas/PaginationToken"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        Filter:
          $ref: "#/components/schemas/TaskRunFilterCriteria"
        Sort:
          $ref: "#/components/schemas/TaskRunSortCriteria"
    GetMLTransformResponse:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Status:
          $ref: "#/components/schemas/TransformStatusType"
        CreatedOn:
          $ref: "#/components/schemas/Timestamp"
        LastModifiedOn:
          $ref: "#/components/schemas/Timestamp"
        InputRecordTables:
          $ref: "#/components/schemas/GlueTables"
        Parameters:
          $ref: "#/components/schemas/TransformParameters"
        EvaluationMetrics:
          $ref: "#/components/schemas/EvaluationMetrics"
        LabelCount:
          $ref: "#/components/schemas/LabelCount"
        Schema:
          $ref: "#/components/schemas/TransformSchema"
        Role:
          $ref: "#/components/schemas/RoleString"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxRetries:
          $ref: "#/components/schemas/NullableInteger"
    GetMLTransformRequest:
      type: object
      required:
        - TransformId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
    GetMLTransformsResponse:
      type: object
      required:
        - Transforms
      properties:
        Transforms:
          $ref: "#/components/schemas/TransformList"
        NextToken:
          $ref: "#/components/schemas/PaginationToken"
    GetMLTransformsRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/PaginationToken"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        Filter:
          $ref: "#/components/schemas/TransformFilterCriteria"
        Sort:
          $ref: "#/components/schemas/TransformSortCriteria"
    GetMappingResponse:
      type: object
      required:
        - Mapping
      properties:
        Mapping:
          $ref: "#/components/schemas/MappingList"
    GetMappingRequest:
      type: object
      required:
        - Source
      properties:
        Source:
          $ref: "#/components/schemas/CatalogEntry"
        Sinks:
          $ref: "#/components/schemas/CatalogEntries"
        Location:
          $ref: "#/components/schemas/Location"
    GetPartitionResponse:
      type: object
      properties:
        Partition:
          $ref: "#/components/schemas/Partition"
    GetPartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionValues
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionValues:
          $ref: "#/components/schemas/ValueStringList"
    GetPartitionsResponse:
      type: object
      properties:
        Partitions:
          $ref: "#/components/schemas/PartitionList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetPartitionsRequest:
      type: object
      required:
        - DatabaseName
        - TableName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        Expression:
          $ref: "#/components/schemas/PredicateString"
        NextToken:
          $ref: "#/components/schemas/Token"
        Segment:
          $ref: "#/components/schemas/Segment"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetPlanResponse:
      type: object
      properties:
        PythonScript:
          $ref: "#/components/schemas/PythonScript"
        ScalaCode:
          $ref: "#/components/schemas/ScalaCode"
    GetPlanRequest:
      type: object
      required:
        - Mapping
        - Source
      properties:
        Mapping:
          $ref: "#/components/schemas/MappingList"
        Source:
          $ref: "#/components/schemas/CatalogEntry"
        Sinks:
          $ref: "#/components/schemas/CatalogEntries"
        Location:
          $ref: "#/components/schemas/Location"
        Language:
          $ref: "#/components/schemas/Language"
    GetResourcePolicyResponse:
      type: object
      properties:
        PolicyInJson:
          $ref: "#/components/schemas/PolicyJsonString"
        PolicyHash:
          $ref: "#/components/schemas/HashString"
        CreateTime:
          $ref: "#/components/schemas/Timestamp"
        UpdateTime:
          $ref: "#/components/schemas/Timestamp"
    GetResourcePolicyRequest:
      type: object
      properties: {}
    GetSecurityConfigurationResponse:
      type: object
      properties:
        SecurityConfiguration:
          $ref: "#/components/schemas/SecurityConfiguration"
    GetSecurityConfigurationRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    GetSecurityConfigurationsResponse:
      type: object
      properties:
        SecurityConfigurations:
          $ref: "#/components/schemas/SecurityConfigurationList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetSecurityConfigurationsRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetTableResponse:
      type: object
      properties:
        Table:
          $ref: "#/components/schemas/Table"
    GetTableRequest:
      type: object
      required:
        - DatabaseName
        - Name
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Name:
          $ref: "#/components/schemas/NameString"
    GetTableVersionResponse:
      type: object
      properties:
        TableVersion:
          $ref: "#/components/schemas/TableVersion"
    GetTableVersionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        VersionId:
          $ref: "#/components/schemas/VersionString"
    GetTableVersionsResponse:
      type: object
      properties:
        TableVersions:
          $ref: "#/components/schemas/GetTableVersionsList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetTableVersionsRequest:
      type: object
      required:
        - DatabaseName
        - TableName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetTablesResponse:
      type: object
      properties:
        TableList:
          $ref: "#/components/schemas/TableList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetTablesRequest:
      type: object
      required:
        - DatabaseName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Expression:
          $ref: "#/components/schemas/FilterString"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetTagsResponse:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagsMap"
    GetTagsRequest:
      type: object
      required:
        - ResourceArn
      properties:
        ResourceArn:
          $ref: "#/components/schemas/GlueResourceArn"
    GetTriggerResponse:
      type: object
      properties:
        Trigger:
          $ref: "#/components/schemas/Trigger"
    GetTriggerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    GetTriggersResponse:
      type: object
      properties:
        Triggers:
          $ref: "#/components/schemas/TriggerList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetTriggersRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/GenericString"
        DependentJobName:
          $ref: "#/components/schemas/NameString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetUserDefinedFunctionResponse:
      type: object
      properties:
        UserDefinedFunction:
          $ref: "#/components/schemas/UserDefinedFunction"
    GetUserDefinedFunctionRequest:
      type: object
      required:
        - DatabaseName
        - FunctionName
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        FunctionName:
          $ref: "#/components/schemas/NameString"
    GetUserDefinedFunctionsResponse:
      type: object
      properties:
        UserDefinedFunctions:
          $ref: "#/components/schemas/UserDefinedFunctionList"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetUserDefinedFunctionsRequest:
      type: object
      required:
        - DatabaseName
        - Pattern
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Pattern:
          $ref: "#/components/schemas/NameString"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    GetWorkflowResponse:
      type: object
      properties:
        Workflow:
          $ref: "#/components/schemas/Workflow"
    GetWorkflowRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        IncludeGraph:
          $ref: "#/components/schemas/NullableBoolean"
    GetWorkflowRunResponse:
      type: object
      properties:
        Run:
          $ref: "#/components/schemas/WorkflowRun"
    GetWorkflowRunRequest:
      type: object
      required:
        - Name
        - RunId
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        RunId:
          $ref: "#/components/schemas/IdString"
        IncludeGraph:
          $ref: "#/components/schemas/NullableBoolean"
    GetWorkflowRunPropertiesResponse:
      type: object
      properties:
        RunProperties:
          $ref: "#/components/schemas/WorkflowRunProperties"
    GetWorkflowRunPropertiesRequest:
      type: object
      required:
        - Name
        - RunId
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        RunId:
          $ref: "#/components/schemas/IdString"
    GetWorkflowRunsResponse:
      type: object
      properties:
        Runs:
          $ref: "#/components/schemas/WorkflowRuns"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    GetWorkflowRunsRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        IncludeGraph:
          $ref: "#/components/schemas/NullableBoolean"
        NextToken:
          $ref: "#/components/schemas/GenericString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    ImportCatalogToGlueResponse:
      type: object
      properties: {}
    ImportCatalogToGlueRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
    ListCrawlersResponse:
      type: object
      properties:
        CrawlerNames:
          $ref: "#/components/schemas/CrawlerNameList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListCrawlersRequest:
      type: object
      properties:
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        NextToken:
          $ref: "#/components/schemas/Token"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    ListDevEndpointsResponse:
      type: object
      properties:
        DevEndpointNames:
          $ref: "#/components/schemas/DevEndpointNameList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    ListDevEndpointsRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/GenericString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    ListJobsResponse:
      type: object
      properties:
        JobNames:
          $ref: "#/components/schemas/JobNameList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    ListJobsRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/GenericString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    ListTriggersResponse:
      type: object
      properties:
        TriggerNames:
          $ref: "#/components/schemas/TriggerNameList"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    ListTriggersRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/GenericString"
        DependentJobName:
          $ref: "#/components/schemas/NameString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
        Tags:
          $ref: "#/components/schemas/TagsMap"
    ListWorkflowsResponse:
      type: object
      properties:
        Workflows:
          $ref: "#/components/schemas/WorkflowNames"
        NextToken:
          $ref: "#/components/schemas/GenericString"
    ListWorkflowsRequest:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/GenericString"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    PutDataCatalogEncryptionSettingsResponse:
      type: object
      properties: {}
    PutDataCatalogEncryptionSettingsRequest:
      type: object
      required:
        - DataCatalogEncryptionSettings
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DataCatalogEncryptionSettings:
          $ref: "#/components/schemas/DataCatalogEncryptionSettings"
    PutResourcePolicyResponse:
      type: object
      properties:
        PolicyHash:
          $ref: "#/components/schemas/HashString"
    PutResourcePolicyRequest:
      type: object
      required:
        - PolicyInJson
      properties:
        PolicyInJson:
          $ref: "#/components/schemas/PolicyJsonString"
        PolicyHashCondition:
          $ref: "#/components/schemas/HashString"
        PolicyExistsCondition:
          $ref: "#/components/schemas/ExistCondition"
    PutWorkflowRunPropertiesResponse:
      type: object
      properties: {}
    PutWorkflowRunPropertiesRequest:
      type: object
      required:
        - Name
        - RunId
        - RunProperties
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        RunId:
          $ref: "#/components/schemas/IdString"
        RunProperties:
          $ref: "#/components/schemas/WorkflowRunProperties"
    ResetJobBookmarkResponse:
      type: object
      properties:
        JobBookmarkEntry:
          $ref: "#/components/schemas/JobBookmarkEntry"
    ResetJobBookmarkRequest:
      type: object
      required:
        - JobName
      properties:
        JobName:
          $ref: "#/components/schemas/JobName"
        RunId:
          $ref: "#/components/schemas/RunId"
    SearchTablesResponse:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/Token"
        TableList:
          $ref: "#/components/schemas/TableList"
    SearchTablesRequest:
      type: object
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        NextToken:
          $ref: "#/components/schemas/Token"
        Filters:
          $ref: "#/components/schemas/SearchPropertyPredicates"
        SearchText:
          $ref: "#/components/schemas/ValueString"
        SortCriteria:
          $ref: "#/components/schemas/SortCriteria"
        MaxResults:
          $ref: "#/components/schemas/PageSize"
    StartCrawlerResponse:
      type: object
      properties: {}
    StartCrawlerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    StartCrawlerScheduleResponse:
      type: object
      properties: {}
    StartCrawlerScheduleRequest:
      type: object
      required:
        - CrawlerName
      properties:
        CrawlerName:
          $ref: "#/components/schemas/NameString"
    SchedulerRunningException: {}
    NoScheduleException: {}
    StartExportLabelsTaskRunResponse:
      type: object
      properties:
        TaskRunId:
          $ref: "#/components/schemas/HashString"
    StartExportLabelsTaskRunRequest:
      type: object
      required:
        - TransformId
        - OutputS3Path
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        OutputS3Path:
          $ref: "#/components/schemas/UriString"
    StartImportLabelsTaskRunResponse:
      type: object
      properties:
        TaskRunId:
          $ref: "#/components/schemas/HashString"
    StartImportLabelsTaskRunRequest:
      type: object
      required:
        - TransformId
        - InputS3Path
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        InputS3Path:
          $ref: "#/components/schemas/UriString"
        ReplaceAllLabels:
          $ref: "#/components/schemas/ReplaceBoolean"
    StartJobRunResponse:
      type: object
      properties:
        JobRunId:
          $ref: "#/components/schemas/IdString"
    StartJobRunRequest:
      type: object
      required:
        - JobName
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        JobRunId:
          $ref: "#/components/schemas/IdString"
        Arguments:
          $ref: "#/components/schemas/GenericMap"
        AllocatedCapacity:
          $ref: "#/components/schemas/IntegerValue"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        NotificationProperty:
          $ref: "#/components/schemas/NotificationProperty"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
    ConcurrentRunsExceededException: {}
    StartMLEvaluationTaskRunResponse:
      type: object
      properties:
        TaskRunId:
          $ref: "#/components/schemas/HashString"
    StartMLEvaluationTaskRunRequest:
      type: object
      required:
        - TransformId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
    MLTransformNotReadyException: {}
    StartMLLabelingSetGenerationTaskRunResponse:
      type: object
      properties:
        TaskRunId:
          $ref: "#/components/schemas/HashString"
    StartMLLabelingSetGenerationTaskRunRequest:
      type: object
      required:
        - TransformId
        - OutputS3Path
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        OutputS3Path:
          $ref: "#/components/schemas/UriString"
    StartTriggerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    StartTriggerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    StartWorkflowRunResponse:
      type: object
      properties:
        RunId:
          $ref: "#/components/schemas/IdString"
    StartWorkflowRunRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    StopCrawlerResponse:
      type: object
      properties: {}
    StopCrawlerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    CrawlerNotRunningException: {}
    CrawlerStoppingException: {}
    StopCrawlerScheduleResponse:
      type: object
      properties: {}
    StopCrawlerScheduleRequest:
      type: object
      required:
        - CrawlerName
      properties:
        CrawlerName:
          $ref: "#/components/schemas/NameString"
    SchedulerNotRunningException: {}
    StopTriggerResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    StopTriggerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - ResourceArn
        - TagsToAdd
      properties:
        ResourceArn:
          $ref: "#/components/schemas/GlueResourceArn"
        TagsToAdd:
          $ref: "#/components/schemas/TagsMap"
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - ResourceArn
        - TagsToRemove
      properties:
        ResourceArn:
          $ref: "#/components/schemas/GlueResourceArn"
        TagsToRemove:
          $ref: "#/components/schemas/TagKeysList"
    UpdateClassifierResponse:
      type: object
      properties: {}
    UpdateClassifierRequest:
      type: object
      properties:
        GrokClassifier:
          $ref: "#/components/schemas/UpdateGrokClassifierRequest"
        XMLClassifier:
          $ref: "#/components/schemas/UpdateXMLClassifierRequest"
        JsonClassifier:
          $ref: "#/components/schemas/UpdateJsonClassifierRequest"
        CsvClassifier:
          $ref: "#/components/schemas/UpdateCsvClassifierRequest"
    VersionMismatchException: {}
    UpdateConnectionResponse:
      type: object
      properties: {}
    UpdateConnectionRequest:
      type: object
      required:
        - Name
        - ConnectionInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Name:
          $ref: "#/components/schemas/NameString"
        ConnectionInput:
          $ref: "#/components/schemas/ConnectionInput"
    UpdateCrawlerResponse:
      type: object
      properties: {}
    UpdateCrawlerRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Role:
          $ref: "#/components/schemas/Role"
        DatabaseName:
          $ref: "#/components/schemas/DatabaseName"
        Description:
          $ref: "#/components/schemas/DescriptionStringRemovable"
        Targets:
          $ref: "#/components/schemas/CrawlerTargets"
        Schedule:
          $ref: "#/components/schemas/CronExpression"
        Classifiers:
          $ref: "#/components/schemas/ClassifierNameList"
        TablePrefix:
          $ref: "#/components/schemas/TablePrefix"
        SchemaChangePolicy:
          $ref: "#/components/schemas/SchemaChangePolicy"
        Configuration:
          $ref: "#/components/schemas/CrawlerConfiguration"
        CrawlerSecurityConfiguration:
          $ref: "#/components/schemas/CrawlerSecurityConfiguration"
    UpdateCrawlerScheduleResponse:
      type: object
      properties: {}
    UpdateCrawlerScheduleRequest:
      type: object
      required:
        - CrawlerName
      properties:
        CrawlerName:
          $ref: "#/components/schemas/NameString"
        Schedule:
          $ref: "#/components/schemas/CronExpression"
    UpdateDatabaseResponse:
      type: object
      properties: {}
    UpdateDatabaseRequest:
      type: object
      required:
        - Name
        - DatabaseInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        Name:
          $ref: "#/components/schemas/NameString"
        DatabaseInput:
          $ref: "#/components/schemas/DatabaseInput"
    UpdateDevEndpointResponse:
      type: object
      properties: {}
    UpdateDevEndpointRequest:
      type: object
      required:
        - EndpointName
      properties:
        EndpointName:
          $ref: "#/components/schemas/GenericString"
        PublicKey:
          $ref: "#/components/schemas/GenericString"
        AddPublicKeys:
          $ref: "#/components/schemas/PublicKeysList"
        DeletePublicKeys:
          $ref: "#/components/schemas/PublicKeysList"
        CustomLibraries:
          $ref: "#/components/schemas/DevEndpointCustomLibraries"
        UpdateEtlLibraries:
          $ref: "#/components/schemas/BooleanValue"
        DeleteArguments:
          $ref: "#/components/schemas/StringList"
        AddArguments:
          $ref: "#/components/schemas/MapValue"
    UpdateJobResponse:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
    UpdateJobRequest:
      type: object
      required:
        - JobName
        - JobUpdate
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        JobUpdate:
          $ref: "#/components/schemas/JobUpdate"
    UpdateMLTransformResponse:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
    UpdateMLTransformRequest:
      type: object
      required:
        - TransformId
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Parameters:
          $ref: "#/components/schemas/TransformParameters"
        Role:
          $ref: "#/components/schemas/RoleString"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxRetries:
          $ref: "#/components/schemas/NullableInteger"
    UpdatePartitionResponse:
      type: object
      properties: {}
    UpdatePartitionRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - PartitionValueList
        - PartitionInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        PartitionValueList:
          $ref: "#/components/schemas/BoundedPartitionValueList"
        PartitionInput:
          $ref: "#/components/schemas/PartitionInput"
    UpdateTableResponse:
      type: object
      properties: {}
    UpdateTableRequest:
      type: object
      required:
        - DatabaseName
        - TableInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableInput:
          $ref: "#/components/schemas/TableInput"
        SkipArchive:
          $ref: "#/components/schemas/BooleanNullable"
    UpdateTriggerResponse:
      type: object
      properties:
        Trigger:
          $ref: "#/components/schemas/Trigger"
    UpdateTriggerRequest:
      type: object
      required:
        - Name
        - TriggerUpdate
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        TriggerUpdate:
          $ref: "#/components/schemas/TriggerUpdate"
    UpdateUserDefinedFunctionResponse:
      type: object
      properties: {}
    UpdateUserDefinedFunctionRequest:
      type: object
      required:
        - DatabaseName
        - FunctionName
        - FunctionInput
      properties:
        CatalogId:
          $ref: "#/components/schemas/CatalogIdString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        FunctionName:
          $ref: "#/components/schemas/NameString"
        FunctionInput:
          $ref: "#/components/schemas/UserDefinedFunctionInput"
    UpdateWorkflowResponse:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
    UpdateWorkflowRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/GenericString"
        DefaultRunProperties:
          $ref: "#/components/schemas/WorkflowRunProperties"
    NameString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    GenericMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/GenericString"
    Timeout:
      type: integer
      minimum: 1
    NotificationProperty:
      type: object
      properties:
        NotifyDelayAfter:
          $ref: "#/components/schemas/NotifyDelayAfter"
      description: Specifies configuration properties of a notification.
    Action:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        Arguments:
          $ref: "#/components/schemas/GenericMap"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        NotificationProperty:
          $ref: "#/components/schemas/NotificationProperty"
        CrawlerName:
          $ref: "#/components/schemas/NameString"
      description: Defines an action to be initiated by a trigger.
    ActionList:
      type: array
      items:
        $ref: "#/components/schemas/Action"
    AttemptCount:
      type: integer
    CatalogIdString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    PartitionInputList:
      type: array
      items:
        $ref: "#/components/schemas/PartitionInput"
      minItems: 0
      maxItems: 100
    PartitionErrors:
      type: array
      items:
        $ref: "#/components/schemas/PartitionError"
    DeleteConnectionNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 0
      maxItems: 25
    NameStringList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    ErrorByName:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ErrorDetail"
    BatchDeletePartitionValueList:
      type: array
      items:
        $ref: "#/components/schemas/PartitionValueList"
      minItems: 0
      maxItems: 25
    PartitionValueList:
      type: object
      required:
        - Values
      properties:
        Values:
          $ref: "#/components/schemas/ValueStringList"
      description: Contains a list of values defining partitions.
    BatchDeleteTableNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 0
      maxItems: 100
    TableErrors:
      type: array
      items:
        $ref: "#/components/schemas/TableError"
    VersionString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    BatchDeleteTableVersionList:
      type: array
      items:
        $ref: "#/components/schemas/VersionString"
      minItems: 0
      maxItems: 100
    TableVersionErrors:
      type: array
      items:
        $ref: "#/components/schemas/TableVersionError"
    CrawlerNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 0
      maxItems: 100
    CrawlerList:
      type: array
      items:
        $ref: "#/components/schemas/Crawler"
    DevEndpointNames:
      type: array
      items:
        $ref: "#/components/schemas/GenericString"
      minItems: 1
      maxItems: 25
    DevEndpointList:
      type: array
      items:
        $ref: "#/components/schemas/DevEndpoint"
    JobNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    JobList:
      type: array
      items:
        $ref: "#/components/schemas/Job"
    BatchGetPartitionValueList:
      type: array
      items:
        $ref: "#/components/schemas/PartitionValueList"
      minItems: 0
      maxItems: 1000
    PartitionList:
      type: array
      items:
        $ref: "#/components/schemas/Partition"
    TriggerNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    TriggerList:
      type: array
      items:
        $ref: "#/components/schemas/Trigger"
    WorkflowNames:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 1
      maxItems: 25
    NullableBoolean:
      type: boolean
    Workflows:
      type: array
      items:
        $ref: "#/components/schemas/Workflow"
      minItems: 1
      maxItems: 25
    IdString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    ErrorDetail:
      type: object
      properties:
        ErrorCode:
          $ref: "#/components/schemas/NameString"
        ErrorMessage:
          $ref: "#/components/schemas/DescriptionString"
      description: Contains details about an error.
    BatchStopJobRunError:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        JobRunId:
          $ref: "#/components/schemas/IdString"
        ErrorDetail:
          $ref: "#/components/schemas/ErrorDetail"
      description: Records an error that occurred when attempting to stop a specified job
        run.
    BatchStopJobRunErrorList:
      type: array
      items:
        $ref: "#/components/schemas/BatchStopJobRunError"
    BatchStopJobRunJobRunIdList:
      type: array
      items:
        $ref: "#/components/schemas/IdString"
      minItems: 1
      maxItems: 25
    BatchStopJobRunSuccessfulSubmissionList:
      type: array
      items:
        $ref: "#/components/schemas/BatchStopJobRunSuccessfulSubmission"
    BatchStopJobRunSuccessfulSubmission:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        JobRunId:
          $ref: "#/components/schemas/IdString"
      description: Records a successful request to stop a specified <code>JobRun</code>.
    Boolean:
      type: boolean
    BooleanNullable:
      type: boolean
    BooleanValue:
      type: boolean
    ValueString:
      type: string
      maxLength: 1024
    BoundedPartitionValueList:
      type: array
      items:
        $ref: "#/components/schemas/ValueString"
      minItems: 0
      maxItems: 100
    HashString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    TaskStatusType:
      type: string
      enum:
        - STARTING
        - RUNNING
        - STOPPING
        - STOPPED
        - SUCCEEDED
        - FAILED
        - TIMEOUT
    CatalogEncryptionMode:
      type: string
      enum:
        - DISABLED
        - SSE-KMS
    CatalogEntry:
      type: object
      required:
        - DatabaseName
        - TableName
      properties:
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
      description: Specifies a table definition in the AWS Glue Data Catalog.
    CatalogEntries:
      type: array
      items:
        $ref: "#/components/schemas/CatalogEntry"
    Timestamp:
      type: string
      format: date-time
    CatalogImportStatus:
      type: object
      properties:
        ImportCompleted:
          $ref: "#/components/schemas/Boolean"
        ImportTime:
          $ref: "#/components/schemas/Timestamp"
        ImportedBy:
          $ref: "#/components/schemas/NameString"
      description: A structure containing migration status information.
    CatalogTablesList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 1
    CatalogTarget:
      type: object
      required:
        - DatabaseName
        - Tables
      properties:
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Tables:
          $ref: "#/components/schemas/CatalogTablesList"
      description: Specifies an AWS Glue Data Catalog target.
    CatalogTargetList:
      type: array
      items:
        $ref: "#/components/schemas/CatalogTarget"
    Classification:
      type: string
    GrokClassifier:
      type: object
      required:
        - Name
        - Classification
        - GrokPattern
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Classification:
          $ref: "#/components/schemas/Classification"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdated:
          $ref: "#/components/schemas/Timestamp"
        Version:
          $ref: "#/components/schemas/VersionId"
        GrokPattern:
          $ref: "#/components/schemas/GrokPattern"
        CustomPatterns:
          $ref: "#/components/schemas/CustomPatterns"
      description: A classifier that uses <code>grok</code> patterns.
    XMLClassifier:
      type: object
      required:
        - Name
        - Classification
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Classification:
          $ref: "#/components/schemas/Classification"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdated:
          $ref: "#/components/schemas/Timestamp"
        Version:
          $ref: "#/components/schemas/VersionId"
        RowTag:
          $ref: "#/components/schemas/RowTag"
      description: A classifier for <code>XML</code> content.
    JsonClassifier:
      type: object
      required:
        - Name
        - JsonPath
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdated:
          $ref: "#/components/schemas/Timestamp"
        Version:
          $ref: "#/components/schemas/VersionId"
        JsonPath:
          $ref: "#/components/schemas/JsonPath"
      description: A classifier for <code>JSON</code> content.
    CsvClassifier:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdated:
          $ref: "#/components/schemas/Timestamp"
        Version:
          $ref: "#/components/schemas/VersionId"
        Delimiter:
          $ref: "#/components/schemas/CsvColumnDelimiter"
        QuoteSymbol:
          $ref: "#/components/schemas/CsvQuoteSymbol"
        ContainsHeader:
          $ref: "#/components/schemas/CsvHeaderOption"
        Header:
          $ref: "#/components/schemas/CsvHeader"
        DisableValueTrimming:
          $ref: "#/components/schemas/NullableBoolean"
        AllowSingleColumn:
          $ref: "#/components/schemas/NullableBoolean"
      description: A classifier for custom <code>CSV</code> content.
    Classifier:
      type: object
      properties:
        GrokClassifier:
          $ref: "#/components/schemas/GrokClassifier"
        XMLClassifier:
          $ref: "#/components/schemas/XMLClassifier"
        JsonClassifier:
          $ref: "#/components/schemas/JsonClassifier"
        CsvClassifier:
          $ref: "#/components/schemas/CsvClassifier"
      description: <p>Classifiers are triggered during a crawl task. A classifier checks
        whether a given file is in a format it can handle. If it is, the
        classifier creates a schema in the form of a <code>StructType</code>
        object that matches that data format.</p> <p>You can use the standard
        classifiers that AWS Glue provides, or you can write your own
        classifiers to best categorize your data sources and specify the
        appropriate schemas to use for them. A classifier can be a
        <code>grok</code> classifier, an <code>XML</code> classifier, a
        <code>JSON</code> classifier, or a custom <code>CSV</code> classifier,
        as specified in one of the fields in the <code>Classifier</code>
        object.</p>
    ClassifierList:
      type: array
      items:
        $ref: "#/components/schemas/Classifier"
    ClassifierNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    CloudWatchEncryptionMode:
      type: string
      enum:
        - DISABLED
        - SSE-KMS
    KmsKeyArn:
      type: string
      pattern: arn:aws:kms:.*
    CloudWatchEncryption:
      type: object
      properties:
        CloudWatchEncryptionMode:
          $ref: "#/components/schemas/CloudWatchEncryptionMode"
        KmsKeyArn:
          $ref: "#/components/schemas/KmsKeyArn"
      description: Specifies how Amazon CloudWatch data should be encrypted.
    CodeGenArgName:
      type: string
    CodeGenArgValue:
      type: string
    CodeGenIdentifier:
      type: string
      pattern: "[A-Za-z_][A-Za-z0-9_]*"
      minLength: 1
      maxLength: 255
    CodeGenEdge:
      type: object
      required:
        - Source
        - Target
      properties:
        Source:
          $ref: "#/components/schemas/CodeGenIdentifier"
        Target:
          $ref: "#/components/schemas/CodeGenIdentifier"
        TargetParameter:
          $ref: "#/components/schemas/CodeGenArgName"
      description: Represents a directional edge in a directed acyclic graph (DAG).
    CodeGenNodeType:
      type: string
    CodeGenNodeArgs:
      type: array
      items:
        $ref: "#/components/schemas/CodeGenNodeArg"
      minItems: 0
      maxItems: 50
    Integer:
      type: integer
    CodeGenNode:
      type: object
      required:
        - Id
        - NodeType
        - Args
      properties:
        Id:
          $ref: "#/components/schemas/CodeGenIdentifier"
        NodeType:
          $ref: "#/components/schemas/CodeGenNodeType"
        Args:
          $ref: "#/components/schemas/CodeGenNodeArgs"
        LineNumber:
          $ref: "#/components/schemas/Integer"
      description: Represents a node in a directed acyclic graph (DAG)
    CodeGenNodeArg:
      type: object
      required:
        - Name
        - Value
      properties:
        Name:
          $ref: "#/components/schemas/CodeGenArgName"
        Value:
          $ref: "#/components/schemas/CodeGenArgValue"
        Param:
          $ref: "#/components/schemas/Boolean"
      description: An argument or property of a node.
    ColumnTypeString:
      type: string
      minLength: 0
      maxLength: 131072
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    CommentString:
      type: string
      minLength: 0
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    ParametersMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ParametersMapValue"
    Column:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Type:
          $ref: "#/components/schemas/ColumnTypeString"
        Comment:
          $ref: "#/components/schemas/CommentString"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
      description: A column in a <code>Table</code>.
    ColumnList:
      type: array
      items:
        $ref: "#/components/schemas/Column"
    ColumnNameString:
      type: string
      minLength: 1
      maxLength: 1024
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    ColumnValuesString:
      type: string
    ColumnValueStringList:
      type: array
      items:
        $ref: "#/components/schemas/ColumnValuesString"
    Comparator:
      type: string
      enum:
        - EQUALS
        - GREATER_THAN
        - LESS_THAN
        - GREATER_THAN_EQUALS
        - LESS_THAN_EQUALS
    LogicalOperator:
      type: string
      enum:
        - EQUALS
    JobRunState:
      type: string
      enum:
        - STARTING
        - RUNNING
        - STOPPING
        - STOPPED
        - SUCCEEDED
        - FAILED
        - TIMEOUT
    CrawlState:
      type: string
      enum:
        - RUNNING
        - SUCCEEDED
        - CANCELLED
        - FAILED
    Condition:
      type: object
      properties:
        LogicalOperator:
          $ref: "#/components/schemas/LogicalOperator"
        JobName:
          $ref: "#/components/schemas/NameString"
        State:
          $ref: "#/components/schemas/JobRunState"
        CrawlerName:
          $ref: "#/components/schemas/NameString"
        CrawlState:
          $ref: "#/components/schemas/CrawlState"
      description: Defines a condition under which a trigger fires.
    ConditionList:
      type: array
      items:
        $ref: "#/components/schemas/Condition"
    RecordsCount:
      type: integer
    ConfusionMatrix:
      type: object
      properties:
        NumTruePositives:
          $ref: "#/components/schemas/RecordsCount"
        NumFalsePositives:
          $ref: "#/components/schemas/RecordsCount"
        NumTrueNegatives:
          $ref: "#/components/schemas/RecordsCount"
        NumFalseNegatives:
          $ref: "#/components/schemas/RecordsCount"
      description: <p>The confusion matrix shows you what your transform is predicting
        accurately and what types of errors it is making.</p> <p>For more
        information, see <a
        href="https://en.wikipedia.org/wiki/Confusion_matrix">Confusion
        matrix</a> in Wikipedia.</p>
    DescriptionString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    ConnectionType:
      type: string
      enum:
        - JDBC
        - SFTP
    MatchCriteria:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 0
      maxItems: 10
    ConnectionProperties:
      type: object
      minProperties: 0
      maxProperties: 100
      additionalProperties:
        $ref: "#/components/schemas/ValueString"
    PhysicalConnectionRequirements:
      type: object
      properties:
        SubnetId:
          $ref: "#/components/schemas/NameString"
        SecurityGroupIdList:
          $ref: "#/components/schemas/SecurityGroupIdList"
        AvailabilityZone:
          $ref: "#/components/schemas/NameString"
      description: Specifies the physical requirements for a connection.
    Connection:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        MatchCriteria:
          $ref: "#/components/schemas/MatchCriteria"
        ConnectionProperties:
          $ref: "#/components/schemas/ConnectionProperties"
        PhysicalConnectionRequirements:
          $ref: "#/components/schemas/PhysicalConnectionRequirements"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdatedTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdatedBy:
          $ref: "#/components/schemas/NameString"
      description: Defines a connection to a data source.
    ConnectionInput:
      type: object
      required:
        - Name
        - ConnectionType
        - ConnectionProperties
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
        MatchCriteria:
          $ref: "#/components/schemas/MatchCriteria"
        ConnectionProperties:
          $ref: "#/components/schemas/ConnectionProperties"
        PhysicalConnectionRequirements:
          $ref: "#/components/schemas/PhysicalConnectionRequirements"
      description: A structure that is used to specify a connection to create or update.
    ConnectionList:
      type: array
      items:
        $ref: "#/components/schemas/Connection"
    ConnectionName:
      type: string
    ConnectionPasswordEncryption:
      type: object
      required:
        - ReturnConnectionPasswordEncrypted
      properties:
        ReturnConnectionPasswordEncrypted:
          $ref: "#/components/schemas/Boolean"
        AwsKmsKeyId:
          $ref: "#/components/schemas/NameString"
      description: <p>The data structure used by the Data Catalog to encrypt the password
        as part of <code>CreateConnection</code> or
        <code>UpdateConnection</code> and store it in the
        <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You
        can enable catalog encryption or only password encryption.</p> <p>When a
        <code>CreationConnection</code> request arrives containing a password,
        the Data Catalog first encrypts the password using your AWS KMS key. It
        then encrypts the whole connection object again if catalog encryption is
        also enabled.</p> <p>This encryption requires that you set AWS KMS key
        permissions to enable or restrict access on the password key according
        to your security requirements. For example, you might want only
        administrators to have decrypt permission on the password key.</p>
    ConnectionPropertyKey:
      type: string
      enum:
        - HOST
        - PORT
        - USERNAME
        - PASSWORD
        - ENCRYPTED_PASSWORD
        - JDBC_DRIVER_JAR_URI
        - JDBC_DRIVER_CLASS_NAME
        - JDBC_ENGINE
        - JDBC_ENGINE_VERSION
        - CONFIG_FILES
        - INSTANCE_ID
        - JDBC_CONNECTION_URL
        - JDBC_ENFORCE_SSL
    OrchestrationStringList:
      type: array
      items:
        $ref: "#/components/schemas/GenericString"
    ConnectionsList:
      type: object
      properties:
        Connections:
          $ref: "#/components/schemas/OrchestrationStringList"
      description: Specifies the connections used by a job.
    TimestampValue:
      type: string
      format: date-time
    LogGroup:
      type: string
      pattern: "[\\.\\-_/#A-Za-z0-9]+"
      minLength: 1
      maxLength: 512
    LogStream:
      type: string
      pattern: "[^:*]*"
      minLength: 1
      maxLength: 512
    Crawl:
      type: object
      properties:
        State:
          $ref: "#/components/schemas/CrawlState"
        StartedOn:
          $ref: "#/components/schemas/TimestampValue"
        CompletedOn:
          $ref: "#/components/schemas/TimestampValue"
        ErrorMessage:
          $ref: "#/components/schemas/DescriptionString"
        LogGroup:
          $ref: "#/components/schemas/LogGroup"
        LogStream:
          $ref: "#/components/schemas/LogStream"
      description: The details of a crawl in the workflow.
    CrawlList:
      type: array
      items:
        $ref: "#/components/schemas/Crawl"
    Role:
      type: string
    CrawlerTargets:
      type: object
      properties:
        S3Targets:
          $ref: "#/components/schemas/S3TargetList"
        JdbcTargets:
          $ref: "#/components/schemas/JdbcTargetList"
        DynamoDBTargets:
          $ref: "#/components/schemas/DynamoDBTargetList"
        CatalogTargets:
          $ref: "#/components/schemas/CatalogTargetList"
      description: Specifies data stores to crawl.
    DatabaseName:
      type: string
    SchemaChangePolicy:
      type: object
      properties:
        UpdateBehavior:
          $ref: "#/components/schemas/UpdateBehavior"
        DeleteBehavior:
          $ref: "#/components/schemas/DeleteBehavior"
      description: A policy that specifies update and deletion behaviors for the crawler.
    CrawlerState:
      type: string
      enum:
        - READY
        - RUNNING
        - STOPPING
    TablePrefix:
      type: string
      minLength: 0
      maxLength: 128
    Schedule:
      type: object
      properties:
        ScheduleExpression:
          $ref: "#/components/schemas/CronExpression"
        State:
          $ref: "#/components/schemas/ScheduleState"
      description: A scheduling object using a <code>cron</code> statement to schedule an
        event.
    MillisecondsCount:
      type: integer
    LastCrawlInfo:
      type: object
      properties:
        Status:
          $ref: "#/components/schemas/LastCrawlStatus"
        ErrorMessage:
          $ref: "#/components/schemas/DescriptionString"
        LogGroup:
          $ref: "#/components/schemas/LogGroup"
        LogStream:
          $ref: "#/components/schemas/LogStream"
        MessagePrefix:
          $ref: "#/components/schemas/MessagePrefix"
        StartTime:
          $ref: "#/components/schemas/Timestamp"
      description: Status and error information about the most recent crawl.
    VersionId:
      type: integer
    CrawlerConfiguration:
      type: string
    CrawlerSecurityConfiguration:
      type: string
      minLength: 0
      maxLength: 128
    Crawler:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Role:
          $ref: "#/components/schemas/Role"
        Targets:
          $ref: "#/components/schemas/CrawlerTargets"
        DatabaseName:
          $ref: "#/components/schemas/DatabaseName"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Classifiers:
          $ref: "#/components/schemas/ClassifierNameList"
        SchemaChangePolicy:
          $ref: "#/components/schemas/SchemaChangePolicy"
        State:
          $ref: "#/components/schemas/CrawlerState"
        TablePrefix:
          $ref: "#/components/schemas/TablePrefix"
        Schedule:
          $ref: "#/components/schemas/Schedule"
        CrawlElapsedTime:
          $ref: "#/components/schemas/MillisecondsCount"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastUpdated:
          $ref: "#/components/schemas/Timestamp"
        LastCrawl:
          $ref: "#/components/schemas/LastCrawlInfo"
        Version:
          $ref: "#/components/schemas/VersionId"
        Configuration:
          $ref: "#/components/schemas/CrawlerConfiguration"
        CrawlerSecurityConfiguration:
          $ref: "#/components/schemas/CrawlerSecurityConfiguration"
      description: Specifies a crawler program that examines a data source and uses
        classifiers to try to determine its schema. If successful, the crawler
        records metadata concerning the data source in the AWS Glue Data
        Catalog.
    NonNegativeDouble:
      type: number
      format: double
      minimum: 0
    NonNegativeInteger:
      type: integer
      minimum: 0
    CrawlerMetrics:
      type: object
      properties:
        CrawlerName:
          $ref: "#/components/schemas/NameString"
        TimeLeftSeconds:
          $ref: "#/components/schemas/NonNegativeDouble"
        StillEstimating:
          $ref: "#/components/schemas/Boolean"
        LastRuntimeSeconds:
          $ref: "#/components/schemas/NonNegativeDouble"
        MedianRuntimeSeconds:
          $ref: "#/components/schemas/NonNegativeDouble"
        TablesCreated:
          $ref: "#/components/schemas/NonNegativeInteger"
        TablesUpdated:
          $ref: "#/components/schemas/NonNegativeInteger"
        TablesDeleted:
          $ref: "#/components/schemas/NonNegativeInteger"
      description: Metrics for a specified crawler.
    CrawlerMetricsList:
      type: array
      items:
        $ref: "#/components/schemas/CrawlerMetrics"
    CrawlerNodeDetails:
      type: object
      properties:
        Crawls:
          $ref: "#/components/schemas/CrawlList"
      description: The details of a Crawler node present in the workflow.
    S3TargetList:
      type: array
      items:
        $ref: "#/components/schemas/S3Target"
    JdbcTargetList:
      type: array
      items:
        $ref: "#/components/schemas/JdbcTarget"
    DynamoDBTargetList:
      type: array
      items:
        $ref: "#/components/schemas/DynamoDBTarget"
    CreateGrokClassifierRequest:
      type: object
      required:
        - Classification
        - Name
        - GrokPattern
      properties:
        Classification:
          $ref: "#/components/schemas/Classification"
        Name:
          $ref: "#/components/schemas/NameString"
        GrokPattern:
          $ref: "#/components/schemas/GrokPattern"
        CustomPatterns:
          $ref: "#/components/schemas/CustomPatterns"
      description: Specifies a <code>grok</code> classifier for
        <code>CreateClassifier</code> to create.
    CreateXMLClassifierRequest:
      type: object
      required:
        - Classification
        - Name
      properties:
        Classification:
          $ref: "#/components/schemas/Classification"
        Name:
          $ref: "#/components/schemas/NameString"
        RowTag:
          $ref: "#/components/schemas/RowTag"
      description: Specifies an XML classifier for <code>CreateClassifier</code> to create.
    CreateJsonClassifierRequest:
      type: object
      required:
        - Name
        - JsonPath
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        JsonPath:
          $ref: "#/components/schemas/JsonPath"
      description: Specifies a JSON classifier for <code>CreateClassifier</code> to create.
    CreateCsvClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Delimiter:
          $ref: "#/components/schemas/CsvColumnDelimiter"
        QuoteSymbol:
          $ref: "#/components/schemas/CsvQuoteSymbol"
        ContainsHeader:
          $ref: "#/components/schemas/CsvHeaderOption"
        Header:
          $ref: "#/components/schemas/CsvHeader"
        DisableValueTrimming:
          $ref: "#/components/schemas/NullableBoolean"
        AllowSingleColumn:
          $ref: "#/components/schemas/NullableBoolean"
      description: Specifies a custom CSV classifier for <code>CreateClassifier</code> to
        create.
    CronExpression:
      type: string
    TagsMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    CsvColumnDelimiter:
      type: string
      pattern: "[^\\r\\n]"
      minLength: 1
      maxLength: 1
    CsvQuoteSymbol:
      type: string
      pattern: "[^\\r\\n]"
      minLength: 1
      maxLength: 1
    CsvHeaderOption:
      type: string
      enum:
        - UNKNOWN
        - PRESENT
        - ABSENT
    CsvHeader:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    DatabaseInput:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        LocationUri:
          $ref: "#/components/schemas/URI"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
        CreateTableDefaultPermissions:
          $ref: "#/components/schemas/PrincipalPermissionsList"
      description: The structure used to create or update a database.
    GenericString:
      type: string
    RoleArn:
      type: string
      pattern: arn:aws:iam::\d{12}:role/.*
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/GenericString"
    PublicKeysList:
      type: array
      items:
        $ref: "#/components/schemas/GenericString"
      maxItems: 5
    IntegerValue:
      type: integer
    WorkerType:
      type: string
      enum:
        - Standard
        - G.1X
        - G.2X
    GlueVersionString:
      type: string
      pattern: ^\w+\.\w+$
      minLength: 1
      maxLength: 255
    NullableInteger:
      type: integer
    MapValue:
      type: object
      minProperties: 0
      maxProperties: 100
      additionalProperties:
        $ref: "#/components/schemas/GenericString"
    GrokPattern:
      type: string
      minLength: 1
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*"
    CustomPatterns:
      type: string
      minLength: 0
      maxLength: 16000
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    UriString:
      type: string
    RoleString:
      type: string
    ExecutionProperty:
      type: object
      properties:
        MaxConcurrentRuns:
          $ref: "#/components/schemas/MaxConcurrentRuns"
      description: An execution property of a job.
    JobCommand:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/GenericString"
        ScriptLocation:
          $ref: "#/components/schemas/ScriptLocationString"
        PythonVersion:
          $ref: "#/components/schemas/PythonVersionString"
      description: Specifies code executed when a job is run.
    MaxRetries:
      type: integer
    NullableDouble:
      type: number
      format: double
    JsonPath:
      type: string
    GlueTables:
      type: array
      items:
        $ref: "#/components/schemas/GlueTable"
      minItems: 0
      maxItems: 10
    TransformParameters:
      type: object
      required:
        - TransformType
      properties:
        TransformType:
          $ref: "#/components/schemas/TransformType"
        FindMatchesParameters:
          $ref: "#/components/schemas/FindMatchesParameters"
      description: The algorithm-specific parameters that are associated with the machine
        learning transform.
    PartitionInput:
      type: object
      properties:
        Values:
          $ref: "#/components/schemas/ValueStringList"
        LastAccessTime:
          $ref: "#/components/schemas/Timestamp"
        StorageDescriptor:
          $ref: "#/components/schemas/StorageDescriptor"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
        LastAnalyzedTime:
          $ref: "#/components/schemas/Timestamp"
      description: The structure used to create and update a partition.
    DagNodes:
      type: array
      items:
        $ref: "#/components/schemas/CodeGenNode"
    DagEdges:
      type: array
      items:
        $ref: "#/components/schemas/CodeGenEdge"
    Language:
      type: string
      enum:
        - PYTHON
        - SCALA
    PythonScript:
      type: string
    ScalaCode:
      type: string
    EncryptionConfiguration:
      type: object
      properties:
        S3Encryption:
          $ref: "#/components/schemas/S3EncryptionList"
        CloudWatchEncryption:
          $ref: "#/components/schemas/CloudWatchEncryption"
        JobBookmarksEncryption:
          $ref: "#/components/schemas/JobBookmarksEncryption"
      description: Specifies an encryption configuration.
    TableInput:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Owner:
          $ref: "#/components/schemas/NameString"
        LastAccessTime:
          $ref: "#/components/schemas/Timestamp"
        LastAnalyzedTime:
          $ref: "#/components/schemas/Timestamp"
        Retention:
          $ref: "#/components/schemas/NonNegativeInteger"
        StorageDescriptor:
          $ref: "#/components/schemas/StorageDescriptor"
        PartitionKeys:
          $ref: "#/components/schemas/ColumnList"
        ViewOriginalText:
          $ref: "#/components/schemas/ViewTextString"
        ViewExpandedText:
          $ref: "#/components/schemas/ViewTextString"
        TableType:
          $ref: "#/components/schemas/TableTypeString"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
      description: A structure used to define a table.
    TriggerType:
      type: string
      enum:
        - SCHEDULED
        - CONDITIONAL
        - ON_DEMAND
    Predicate:
      type: object
      properties:
        Logical:
          $ref: "#/components/schemas/Logical"
        Conditions:
          $ref: "#/components/schemas/ConditionList"
      description: Defines the predicate of the trigger, which determines when it fires.
    UserDefinedFunctionInput:
      type: object
      properties:
        FunctionName:
          $ref: "#/components/schemas/NameString"
        ClassName:
          $ref: "#/components/schemas/NameString"
        OwnerName:
          $ref: "#/components/schemas/NameString"
        OwnerType:
          $ref: "#/components/schemas/PrincipalType"
        ResourceUris:
          $ref: "#/components/schemas/ResourceUriList"
      description: A structure used to create or update a user-defined function.
    WorkflowRunProperties:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/GenericString"
    RowTag:
      type: string
    EncryptionAtRest:
      type: object
      required:
        - CatalogEncryptionMode
      properties:
        CatalogEncryptionMode:
          $ref: "#/components/schemas/CatalogEncryptionMode"
        SseAwsKmsKeyId:
          $ref: "#/components/schemas/NameString"
      description: Specifies the encryption-at-rest configuration for the Data Catalog.
    DataCatalogEncryptionSettings:
      type: object
      properties:
        EncryptionAtRest:
          $ref: "#/components/schemas/EncryptionAtRest"
        ConnectionPasswordEncryption:
          $ref: "#/components/schemas/ConnectionPasswordEncryption"
      description: Contains configuration information for maintaining Data Catalog security.
    DataLakePrincipalString:
      type: string
      minLength: 1
      maxLength: 255
    DataLakePrincipal:
      type: object
      properties:
        DataLakePrincipalIdentifier:
          $ref: "#/components/schemas/DataLakePrincipalString"
      description: The AWS Lake Formation principal.
    URI:
      type: string
      minLength: 1
      maxLength: 1024
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    PrincipalPermissionsList:
      type: array
      items:
        $ref: "#/components/schemas/PrincipalPermissions"
    Database:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        LocationUri:
          $ref: "#/components/schemas/URI"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
        CreateTime:
          $ref: "#/components/schemas/Timestamp"
        CreateTableDefaultPermissions:
          $ref: "#/components/schemas/PrincipalPermissionsList"
      description: The <code>Database</code> object represents a logical grouping of tables
        that might reside in a Hive metastore or an RDBMS.
    DatabaseList:
      type: array
      items:
        $ref: "#/components/schemas/Database"
    DeleteBehavior:
      type: string
      enum:
        - LOG
        - DELETE_FROM_DATABASE
        - DEPRECATE_IN_DATABASE
    ValueStringList:
      type: array
      items:
        $ref: "#/components/schemas/ValueString"
    DescriptionStringRemovable:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    DevEndpoint:
      type: object
      properties:
        EndpointName:
          $ref: "#/components/schemas/GenericString"
        RoleArn:
          $ref: "#/components/schemas/RoleArn"
        SecurityGroupIds:
          $ref: "#/components/schemas/StringList"
        SubnetId:
          $ref: "#/components/schemas/GenericString"
        YarnEndpointAddress:
          $ref: "#/components/schemas/GenericString"
        PrivateAddress:
          $ref: "#/components/schemas/GenericString"
        ZeppelinRemoteSparkInterpreterPort:
          $ref: "#/components/schemas/IntegerValue"
        PublicAddress:
          $ref: "#/components/schemas/GenericString"
        Status:
          $ref: "#/components/schemas/GenericString"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        NumberOfNodes:
          $ref: "#/components/schemas/IntegerValue"
        AvailabilityZone:
          $ref: "#/components/schemas/GenericString"
        VpcId:
          $ref: "#/components/schemas/GenericString"
        ExtraPythonLibsS3Path:
          $ref: "#/components/schemas/GenericString"
        ExtraJarsS3Path:
          $ref: "#/components/schemas/GenericString"
        FailureReason:
          $ref: "#/components/schemas/GenericString"
        LastUpdateStatus:
          $ref: "#/components/schemas/GenericString"
        CreatedTimestamp:
          $ref: "#/components/schemas/TimestampValue"
        LastModifiedTimestamp:
          $ref: "#/components/schemas/TimestampValue"
        PublicKey:
          $ref: "#/components/schemas/GenericString"
        PublicKeys:
          $ref: "#/components/schemas/PublicKeysList"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        Arguments:
          $ref: "#/components/schemas/MapValue"
      description: A development endpoint where a developer can remotely debug extract,
        transform, and load (ETL) scripts.
    DevEndpointCustomLibraries:
      type: object
      properties:
        ExtraPythonLibsS3Path:
          $ref: "#/components/schemas/GenericString"
        ExtraJarsS3Path:
          $ref: "#/components/schemas/GenericString"
      description: Custom libraries to be loaded into a development endpoint.
    DevEndpointNameList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    Path:
      type: string
    DynamoDBTarget:
      type: object
      properties:
        Path:
          $ref: "#/components/schemas/Path"
      description: Specifies an Amazon DynamoDB table to crawl.
    Edge:
      type: object
      properties:
        SourceId:
          $ref: "#/components/schemas/NameString"
        DestinationId:
          $ref: "#/components/schemas/NameString"
      description: An edge represents a directed connection between two AWS Glue components
        which are part of the workflow the edge belongs to.
    EdgeList:
      type: array
      items:
        $ref: "#/components/schemas/Edge"
    S3EncryptionList:
      type: array
      items:
        $ref: "#/components/schemas/S3Encryption"
    JobBookmarksEncryption:
      type: object
      properties:
        JobBookmarksEncryptionMode:
          $ref: "#/components/schemas/JobBookmarksEncryptionMode"
        KmsKeyArn:
          $ref: "#/components/schemas/KmsKeyArn"
      description: Specifies how job bookmark data should be encrypted.
    ErrorString:
      type: string
    TransformType:
      type: string
      enum:
        - FIND_MATCHES
    FindMatchesMetrics:
      type: object
      properties:
        AreaUnderPRCurve:
          $ref: "#/components/schemas/GenericBoundedDouble"
        Precision:
          $ref: "#/components/schemas/GenericBoundedDouble"
        Recall:
          $ref: "#/components/schemas/GenericBoundedDouble"
        F1:
          $ref: "#/components/schemas/GenericBoundedDouble"
        ConfusionMatrix:
          $ref: "#/components/schemas/ConfusionMatrix"
      description: The evaluation metrics for the find matches algorithm. The quality of
        your machine learning transform is measured by getting your transform to
        predict some matches and comparing the results to known matches from the
        same dataset. The quality metrics are based on a subset of your data, so
        they are not precise.
    EvaluationMetrics:
      type: object
      required:
        - TransformType
      properties:
        TransformType:
          $ref: "#/components/schemas/TransformType"
        FindMatchesMetrics:
          $ref: "#/components/schemas/FindMatchesMetrics"
      description: Evaluation metrics provide an estimate of the quality of your machine
        learning transform.
    MaxConcurrentRuns:
      type: integer
    ExecutionTime:
      type: integer
    ExistCondition:
      type: string
      enum:
        - MUST_EXIST
        - NOT_EXIST
        - NONE
    ExportLabelsTaskRunProperties:
      type: object
      properties:
        OutputS3Path:
          $ref: "#/components/schemas/UriString"
      description: Specifies configuration properties for an exporting labels task run.
    FieldType:
      type: string
    FilterString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    GenericBoundedDouble:
      type: number
      format: double
      minimum: 0
      maximum: 1
    FindMatchesParameters:
      type: object
      properties:
        PrimaryKeyColumnName:
          $ref: "#/components/schemas/ColumnNameString"
        PrecisionRecallTradeoff:
          $ref: "#/components/schemas/GenericBoundedDouble"
        AccuracyCostTradeoff:
          $ref: "#/components/schemas/GenericBoundedDouble"
        EnforceProvidedLabels:
          $ref: "#/components/schemas/NullableBoolean"
      description: The parameters to configure the find matches transform.
    FindMatchesTaskRunProperties:
      type: object
      properties:
        JobId:
          $ref: "#/components/schemas/HashString"
        JobName:
          $ref: "#/components/schemas/NameString"
        JobRunId:
          $ref: "#/components/schemas/HashString"
      description: Specifies configuration properties for a Find Matches task run.
    FormatString:
      type: string
      maxLength: 128
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    PageSize:
      type: integer
      minimum: 1
      maximum: 1000
    Token:
      type: string
    GetConnectionsFilter:
      type: object
      properties:
        MatchCriteria:
          $ref: "#/components/schemas/MatchCriteria"
        ConnectionType:
          $ref: "#/components/schemas/ConnectionType"
      description: Filters the connection definitions that are returned by the
        <code>GetConnections</code> API operation.
    JobName:
      type: string
    RunId:
      type: string
    JobBookmarkEntry:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/JobName"
        Version:
          $ref: "#/components/schemas/IntegerValue"
        Run:
          $ref: "#/components/schemas/IntegerValue"
        Attempt:
          $ref: "#/components/schemas/IntegerValue"
        PreviousRunId:
          $ref: "#/components/schemas/RunId"
        RunId:
          $ref: "#/components/schemas/RunId"
        JobBookmark:
          $ref: "#/components/schemas/JsonValue"
      description: Defines a point that a job can resume processing.
    Job:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        LogUri:
          $ref: "#/components/schemas/UriString"
        Role:
          $ref: "#/components/schemas/RoleString"
        CreatedOn:
          $ref: "#/components/schemas/TimestampValue"
        LastModifiedOn:
          $ref: "#/components/schemas/TimestampValue"
        ExecutionProperty:
          $ref: "#/components/schemas/ExecutionProperty"
        Command:
          $ref: "#/components/schemas/JobCommand"
        DefaultArguments:
          $ref: "#/components/schemas/GenericMap"
        Connections:
          $ref: "#/components/schemas/ConnectionsList"
        MaxRetries:
          $ref: "#/components/schemas/MaxRetries"
        AllocatedCapacity:
          $ref: "#/components/schemas/IntegerValue"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        NotificationProperty:
          $ref: "#/components/schemas/NotificationProperty"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
      description: Specifies a job definition.
    JobRun:
      type: object
      properties:
        Id:
          $ref: "#/components/schemas/IdString"
        Attempt:
          $ref: "#/components/schemas/AttemptCount"
        PreviousRunId:
          $ref: "#/components/schemas/IdString"
        TriggerName:
          $ref: "#/components/schemas/NameString"
        JobName:
          $ref: "#/components/schemas/NameString"
        StartedOn:
          $ref: "#/components/schemas/TimestampValue"
        LastModifiedOn:
          $ref: "#/components/schemas/TimestampValue"
        CompletedOn:
          $ref: "#/components/schemas/TimestampValue"
        JobRunState:
          $ref: "#/components/schemas/JobRunState"
        Arguments:
          $ref: "#/components/schemas/GenericMap"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorString"
        PredecessorRuns:
          $ref: "#/components/schemas/PredecessorList"
        AllocatedCapacity:
          $ref: "#/components/schemas/IntegerValue"
        ExecutionTime:
          $ref: "#/components/schemas/ExecutionTime"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        LogGroupName:
          $ref: "#/components/schemas/GenericString"
        NotificationProperty:
          $ref: "#/components/schemas/NotificationProperty"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
      description: Contains information about a job run.
    JobRunList:
      type: array
      items:
        $ref: "#/components/schemas/JobRun"
    TaskRunProperties:
      type: object
      properties:
        TaskType:
          $ref: "#/components/schemas/TaskType"
        ImportLabelsTaskRunProperties:
          $ref: "#/components/schemas/ImportLabelsTaskRunProperties"
        ExportLabelsTaskRunProperties:
          $ref: "#/components/schemas/ExportLabelsTaskRunProperties"
        LabelingSetGenerationTaskRunProperties:
          $ref: "#/components/schemas/LabelingSetGenerationTaskRunProperties"
        FindMatchesTaskRunProperties:
          $ref: "#/components/schemas/FindMatchesTaskRunProperties"
      description: The configuration properties for the task run.
    PaginationToken:
      type: string
    TaskRunFilterCriteria:
      type: object
      properties:
        TaskRunType:
          $ref: "#/components/schemas/TaskType"
        Status:
          $ref: "#/components/schemas/TaskStatusType"
        StartedBefore:
          $ref: "#/components/schemas/Timestamp"
        StartedAfter:
          $ref: "#/components/schemas/Timestamp"
      description: The criteria that are used to filter the task runs for the machine
        learning transform.
    TaskRunSortCriteria:
      type: object
      required:
        - Column
        - SortDirection
      properties:
        Column:
          $ref: "#/components/schemas/TaskRunSortColumnType"
        SortDirection:
          $ref: "#/components/schemas/SortDirectionType"
      description: The sorting criteria that are used to sort the list of task runs for the
        machine learning transform.
    TaskRunList:
      type: array
      items:
        $ref: "#/components/schemas/TaskRun"
    TransformStatusType:
      type: string
      enum:
        - NOT_READY
        - READY
        - DELETING
    LabelCount:
      type: integer
    TransformSchema:
      type: array
      items:
        $ref: "#/components/schemas/SchemaColumn"
      maxItems: 100
    TransformFilterCriteria:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        TransformType:
          $ref: "#/components/schemas/TransformType"
        Status:
          $ref: "#/components/schemas/TransformStatusType"
        CreatedBefore:
          $ref: "#/components/schemas/Timestamp"
        CreatedAfter:
          $ref: "#/components/schemas/Timestamp"
        LastModifiedBefore:
          $ref: "#/components/schemas/Timestamp"
        LastModifiedAfter:
          $ref: "#/components/schemas/Timestamp"
        Schema:
          $ref: "#/components/schemas/TransformSchema"
      description: The criteria used to filter the machine learning transforms.
    TransformSortCriteria:
      type: object
      required:
        - Column
        - SortDirection
      properties:
        Column:
          $ref: "#/components/schemas/TransformSortColumnType"
        SortDirection:
          $ref: "#/components/schemas/SortDirectionType"
      description: The sorting criteria that are associated with the machine learning
        transform.
    TransformList:
      type: array
      items:
        $ref: "#/components/schemas/MLTransform"
    Location:
      type: object
      properties:
        Jdbc:
          $ref: "#/components/schemas/CodeGenNodeArgs"
        S3:
          $ref: "#/components/schemas/CodeGenNodeArgs"
        DynamoDB:
          $ref: "#/components/schemas/CodeGenNodeArgs"
      description: The location of resources.
    MappingList:
      type: array
      items:
        $ref: "#/components/schemas/MappingEntry"
    Partition:
      type: object
      properties:
        Values:
          $ref: "#/components/schemas/ValueStringList"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        CreationTime:
          $ref: "#/components/schemas/Timestamp"
        LastAccessTime:
          $ref: "#/components/schemas/Timestamp"
        StorageDescriptor:
          $ref: "#/components/schemas/StorageDescriptor"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
        LastAnalyzedTime:
          $ref: "#/components/schemas/Timestamp"
      description: Represents a slice of table data.
    PredicateString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    Segment:
      type: object
      required:
        - SegmentNumber
        - TotalSegments
      properties:
        SegmentNumber:
          $ref: "#/components/schemas/NonNegativeInteger"
        TotalSegments:
          $ref: "#/components/schemas/TotalSegmentsInteger"
      description: Defines a non-overlapping region of a table's partitions, allowing
        multiple requests to be executed in parallel.
    PolicyJsonString:
      type: string
      minLength: 2
      maxLength: 10240
    SecurityConfiguration:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        CreatedTimeStamp:
          $ref: "#/components/schemas/TimestampValue"
        EncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
      description: Specifies a security configuration.
    SecurityConfigurationList:
      type: array
      items:
        $ref: "#/components/schemas/SecurityConfiguration"
    Table:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Owner:
          $ref: "#/components/schemas/NameString"
        CreateTime:
          $ref: "#/components/schemas/Timestamp"
        UpdateTime:
          $ref: "#/components/schemas/Timestamp"
        LastAccessTime:
          $ref: "#/components/schemas/Timestamp"
        LastAnalyzedTime:
          $ref: "#/components/schemas/Timestamp"
        Retention:
          $ref: "#/components/schemas/NonNegativeInteger"
        StorageDescriptor:
          $ref: "#/components/schemas/StorageDescriptor"
        PartitionKeys:
          $ref: "#/components/schemas/ColumnList"
        ViewOriginalText:
          $ref: "#/components/schemas/ViewTextString"
        ViewExpandedText:
          $ref: "#/components/schemas/ViewTextString"
        TableType:
          $ref: "#/components/schemas/TableTypeString"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
        CreatedBy:
          $ref: "#/components/schemas/NameString"
        IsRegisteredWithLakeFormation:
          $ref: "#/components/schemas/Boolean"
      description: Represents a collection of related data organized in columns and rows.
    TableVersion:
      type: object
      properties:
        Table:
          $ref: "#/components/schemas/Table"
        VersionId:
          $ref: "#/components/schemas/VersionString"
      description: Specifies a version of a table.
    GetTableVersionsList:
      type: array
      items:
        $ref: "#/components/schemas/TableVersion"
    TableList:
      type: array
      items:
        $ref: "#/components/schemas/Table"
    GlueResourceArn:
      type: string
      pattern: arn:aws:glue:.*
      minLength: 1
      maxLength: 10240
    Trigger:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        WorkflowName:
          $ref: "#/components/schemas/NameString"
        Id:
          $ref: "#/components/schemas/IdString"
        Type:
          $ref: "#/components/schemas/TriggerType"
        State:
          $ref: "#/components/schemas/TriggerState"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Schedule:
          $ref: "#/components/schemas/GenericString"
        Actions:
          $ref: "#/components/schemas/ActionList"
        Predicate:
          $ref: "#/components/schemas/Predicate"
      description: Information about a specific trigger.
    UserDefinedFunction:
      type: object
      properties:
        FunctionName:
          $ref: "#/components/schemas/NameString"
        ClassName:
          $ref: "#/components/schemas/NameString"
        OwnerName:
          $ref: "#/components/schemas/NameString"
        OwnerType:
          $ref: "#/components/schemas/PrincipalType"
        CreateTime:
          $ref: "#/components/schemas/Timestamp"
        ResourceUris:
          $ref: "#/components/schemas/ResourceUriList"
      description: Represents the equivalent of a Hive user-defined function
        (<code>UDF</code>) definition.
    UserDefinedFunctionList:
      type: array
      items:
        $ref: "#/components/schemas/UserDefinedFunction"
    Workflow:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/GenericString"
        DefaultRunProperties:
          $ref: "#/components/schemas/WorkflowRunProperties"
        CreatedOn:
          $ref: "#/components/schemas/TimestampValue"
        LastModifiedOn:
          $ref: "#/components/schemas/TimestampValue"
        LastRun:
          $ref: "#/components/schemas/WorkflowRun"
        Graph:
          $ref: "#/components/schemas/WorkflowGraph"
      description: A workflow represents a flow in which AWS Glue components should be
        executed to complete a logical task.
    WorkflowRun:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        WorkflowRunId:
          $ref: "#/components/schemas/IdString"
        WorkflowRunProperties:
          $ref: "#/components/schemas/WorkflowRunProperties"
        StartedOn:
          $ref: "#/components/schemas/TimestampValue"
        CompletedOn:
          $ref: "#/components/schemas/TimestampValue"
        Status:
          $ref: "#/components/schemas/WorkflowRunStatus"
        Statistics:
          $ref: "#/components/schemas/WorkflowRunStatistics"
        Graph:
          $ref: "#/components/schemas/WorkflowGraph"
      description: A workflow run is an execution of a workflow providing all the runtime
        information.
    WorkflowRuns:
      type: array
      items:
        $ref: "#/components/schemas/WorkflowRun"
      minItems: 1
      maxItems: 1000
    GlueTable:
      type: object
      required:
        - DatabaseName
        - TableName
      properties:
        DatabaseName:
          $ref: "#/components/schemas/NameString"
        TableName:
          $ref: "#/components/schemas/NameString"
        CatalogId:
          $ref: "#/components/schemas/NameString"
        ConnectionName:
          $ref: "#/components/schemas/NameString"
      description: The database and table in the AWS Glue Data Catalog that is used for
        input or output data.
    ReplaceBoolean:
      type: boolean
    ImportLabelsTaskRunProperties:
      type: object
      properties:
        InputS3Path:
          $ref: "#/components/schemas/UriString"
        Replace:
          $ref: "#/components/schemas/ReplaceBoolean"
      description: Specifies configuration properties for an importing labels task run.
    IntegerFlag:
      type: integer
      minimum: 0
      maximum: 1
    PathList:
      type: array
      items:
        $ref: "#/components/schemas/Path"
    JdbcTarget:
      type: object
      properties:
        ConnectionName:
          $ref: "#/components/schemas/ConnectionName"
        Path:
          $ref: "#/components/schemas/Path"
        Exclusions:
          $ref: "#/components/schemas/PathList"
      description: Specifies a JDBC data store to crawl.
    JsonValue:
      type: string
    JobBookmarksEncryptionMode:
      type: string
      enum:
        - DISABLED
        - CSE-KMS
    ScriptLocationString:
      type: string
    PythonVersionString:
      type: string
      pattern: ^[2-3]$
    JobNodeDetails:
      type: object
      properties:
        JobRuns:
          $ref: "#/components/schemas/JobRunList"
      description: The details of a Job node present in the workflow.
    PredecessorList:
      type: array
      items:
        $ref: "#/components/schemas/Predecessor"
    JobUpdate:
      type: object
      properties:
        Description:
          $ref: "#/components/schemas/DescriptionString"
        LogUri:
          $ref: "#/components/schemas/UriString"
        Role:
          $ref: "#/components/schemas/RoleString"
        ExecutionProperty:
          $ref: "#/components/schemas/ExecutionProperty"
        Command:
          $ref: "#/components/schemas/JobCommand"
        DefaultArguments:
          $ref: "#/components/schemas/GenericMap"
        Connections:
          $ref: "#/components/schemas/ConnectionsList"
        MaxRetries:
          $ref: "#/components/schemas/MaxRetries"
        AllocatedCapacity:
          $ref: "#/components/schemas/IntegerValue"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        SecurityConfiguration:
          $ref: "#/components/schemas/NameString"
        NotificationProperty:
          $ref: "#/components/schemas/NotificationProperty"
        GlueVersion:
          $ref: "#/components/schemas/GlueVersionString"
      description: Specifies information used to update an existing job definition. The
        previous job definition is completely overwritten by this information.
    KeyString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    LabelingSetGenerationTaskRunProperties:
      type: object
      properties:
        OutputS3Path:
          $ref: "#/components/schemas/UriString"
      description: Specifies configuration properties for a labeling set generation task
        run.
    LastCrawlStatus:
      type: string
      enum:
        - SUCCEEDED
        - CANCELLED
        - FAILED
    MessagePrefix:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    LocationMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ColumnValuesString"
    LocationString:
      type: string
      maxLength: 2056
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    Logical:
      type: string
      enum:
        - AND
        - ANY
    MLTransform:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Status:
          $ref: "#/components/schemas/TransformStatusType"
        CreatedOn:
          $ref: "#/components/schemas/Timestamp"
        LastModifiedOn:
          $ref: "#/components/schemas/Timestamp"
        InputRecordTables:
          $ref: "#/components/schemas/GlueTables"
        Parameters:
          $ref: "#/components/schemas/TransformParameters"
        EvaluationMetrics:
          $ref: "#/components/schemas/EvaluationMetrics"
        LabelCount:
          $ref: "#/components/schemas/LabelCount"
        Schema:
          $ref: "#/components/schemas/TransformSchema"
        Role:
          $ref: "#/components/schemas/RoleString"
        MaxCapacity:
          $ref: "#/components/schemas/NullableDouble"
        WorkerType:
          $ref: "#/components/schemas/WorkerType"
        NumberOfWorkers:
          $ref: "#/components/schemas/NullableInteger"
        Timeout:
          $ref: "#/components/schemas/Timeout"
        MaxRetries:
          $ref: "#/components/schemas/NullableInteger"
      description: A structure for a machine learning transform.
    TableName:
      type: string
    SchemaPathString:
      type: string
    MappingEntry:
      type: object
      properties:
        SourceTable:
          $ref: "#/components/schemas/TableName"
        SourcePath:
          $ref: "#/components/schemas/SchemaPathString"
        SourceType:
          $ref: "#/components/schemas/FieldType"
        TargetTable:
          $ref: "#/components/schemas/TableName"
        TargetPath:
          $ref: "#/components/schemas/SchemaPathString"
        TargetType:
          $ref: "#/components/schemas/FieldType"
      description: Defines a mapping.
    NodeType:
      type: string
      enum:
        - CRAWLER
        - JOB
        - TRIGGER
    TriggerNodeDetails:
      type: object
      properties:
        Trigger:
          $ref: "#/components/schemas/Trigger"
      description: The details of a Trigger node present in the workflow.
    Node:
      type: object
      properties:
        Type:
          $ref: "#/components/schemas/NodeType"
        Name:
          $ref: "#/components/schemas/NameString"
        UniqueId:
          $ref: "#/components/schemas/NameString"
        TriggerDetails:
          $ref: "#/components/schemas/TriggerNodeDetails"
        JobDetails:
          $ref: "#/components/schemas/JobNodeDetails"
        CrawlerDetails:
          $ref: "#/components/schemas/CrawlerNodeDetails"
      description: A node represents an AWS Glue component like Trigger, Job etc. which is
        part of a workflow.
    NodeList:
      type: array
      items:
        $ref: "#/components/schemas/Node"
    NotifyDelayAfter:
      type: integer
      minimum: 1
    Order:
      type: object
      required:
        - Column
        - SortOrder
      properties:
        Column:
          $ref: "#/components/schemas/NameString"
        SortOrder:
          $ref: "#/components/schemas/IntegerFlag"
      description: Specifies the sort order of a sorted column.
    OrderList:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    ParametersMapValue:
      type: string
      maxLength: 512000
    StorageDescriptor:
      type: object
      properties:
        Columns:
          $ref: "#/components/schemas/ColumnList"
        Location:
          $ref: "#/components/schemas/LocationString"
        InputFormat:
          $ref: "#/components/schemas/FormatString"
        OutputFormat:
          $ref: "#/components/schemas/FormatString"
        Compressed:
          $ref: "#/components/schemas/Boolean"
        NumberOfBuckets:
          $ref: "#/components/schemas/Integer"
        SerdeInfo:
          $ref: "#/components/schemas/SerDeInfo"
        BucketColumns:
          $ref: "#/components/schemas/NameStringList"
        SortColumns:
          $ref: "#/components/schemas/OrderList"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
        SkewedInfo:
          $ref: "#/components/schemas/SkewedInfo"
        StoredAsSubDirectories:
          $ref: "#/components/schemas/Boolean"
      description: Describes the physical storage of table data.
    PartitionError:
      type: object
      properties:
        PartitionValues:
          $ref: "#/components/schemas/ValueStringList"
        ErrorDetail:
          $ref: "#/components/schemas/ErrorDetail"
      description: Contains information about a partition error.
    Permission:
      type: string
      enum:
        - ALL
        - SELECT
        - ALTER
        - DROP
        - DELETE
        - INSERT
        - CREATE_DATABASE
        - CREATE_TABLE
        - DATA_LOCATION_ACCESS
    PermissionList:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
    SecurityGroupIdList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
      minItems: 0
      maxItems: 50
    Predecessor:
      type: object
      properties:
        JobName:
          $ref: "#/components/schemas/NameString"
        RunId:
          $ref: "#/components/schemas/IdString"
      description: A job run that was used in the predicate of a conditional trigger that
        triggered this job run.
    PrincipalPermissions:
      type: object
      properties:
        Principal:
          $ref: "#/components/schemas/DataLakePrincipal"
        Permissions:
          $ref: "#/components/schemas/PermissionList"
      description: Permissions granted to a principal.
    PrincipalType:
      type: string
      enum:
        - USER
        - ROLE
        - GROUP
    PropertyPredicate:
      type: object
      properties:
        Key:
          $ref: "#/components/schemas/ValueString"
        Value:
          $ref: "#/components/schemas/ValueString"
        Comparator:
          $ref: "#/components/schemas/Comparator"
      description: Defines a property predicate.
    ResourceType:
      type: string
      enum:
        - JAR
        - FILE
        - ARCHIVE
    ResourceUri:
      type: object
      properties:
        ResourceType:
          $ref: "#/components/schemas/ResourceType"
        Uri:
          $ref: "#/components/schemas/URI"
      description: The URIs for function resources.
    ResourceUriList:
      type: array
      items:
        $ref: "#/components/schemas/ResourceUri"
      minItems: 0
      maxItems: 1000
    S3EncryptionMode:
      type: string
      enum:
        - DISABLED
        - SSE-KMS
        - SSE-S3
    S3Encryption:
      type: object
      properties:
        S3EncryptionMode:
          $ref: "#/components/schemas/S3EncryptionMode"
        KmsKeyArn:
          $ref: "#/components/schemas/KmsKeyArn"
      description: Specifies how Amazon Simple Storage Service (Amazon S3) data should be
        encrypted.
    S3Target:
      type: object
      properties:
        Path:
          $ref: "#/components/schemas/Path"
        Exclusions:
          $ref: "#/components/schemas/PathList"
      description: Specifies a data store in Amazon Simple Storage Service (Amazon S3).
    ScheduleState:
      type: string
      enum:
        - SCHEDULED
        - NOT_SCHEDULED
        - TRANSITIONING
    UpdateBehavior:
      type: string
      enum:
        - LOG
        - UPDATE_IN_DATABASE
    SchemaColumn:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/ColumnNameString"
        DataType:
          $ref: "#/components/schemas/ColumnTypeString"
      description: A key-value pair representing a column and data type that this transform
        can run against. The <code>Schema</code> parameter of the
        <code>MLTransform</code> may contain up to 100 of these structures.
    SearchPropertyPredicates:
      type: array
      items:
        $ref: "#/components/schemas/PropertyPredicate"
    SortCriteria:
      type: array
      items:
        $ref: "#/components/schemas/SortCriterion"
      minItems: 0
      maxItems: 1
    TotalSegmentsInteger:
      type: integer
      minimum: 1
      maximum: 10
    SerDeInfo:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        SerializationLibrary:
          $ref: "#/components/schemas/NameString"
        Parameters:
          $ref: "#/components/schemas/ParametersMap"
      description: Information about a serialization/deserialization program (SerDe) that
        serves as an extractor and loader.
    SkewedInfo:
      type: object
      properties:
        SkewedColumnNames:
          $ref: "#/components/schemas/NameStringList"
        SkewedColumnValues:
          $ref: "#/components/schemas/ColumnValueStringList"
        SkewedColumnValueLocationMaps:
          $ref: "#/components/schemas/LocationMap"
      description: Specifies skewed values in a table. Skewed values are those that occur
        with very high frequency.
    Sort:
      type: string
      enum:
        - ASC
        - DESC
    SortCriterion:
      type: object
      properties:
        FieldName:
          $ref: "#/components/schemas/ValueString"
        Sort:
          $ref: "#/components/schemas/Sort"
    SortDirectionType:
      type: string
      enum:
        - DESCENDING
        - ASCENDING
    ViewTextString:
      type: string
      maxLength: 409600
    TableTypeString:
      type: string
      maxLength: 255
    TableError:
      type: object
      properties:
        TableName:
          $ref: "#/components/schemas/NameString"
        ErrorDetail:
          $ref: "#/components/schemas/ErrorDetail"
      description: An error record for table operations.
    TableVersionError:
      type: object
      properties:
        TableName:
          $ref: "#/components/schemas/NameString"
        VersionId:
          $ref: "#/components/schemas/VersionString"
        ErrorDetail:
          $ref: "#/components/schemas/ErrorDetail"
      description: An error record for table-version operations.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeysList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 0
      maxItems: 50
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TaskRun:
      type: object
      properties:
        TransformId:
          $ref: "#/components/schemas/HashString"
        TaskRunId:
          $ref: "#/components/schemas/HashString"
        Status:
          $ref: "#/components/schemas/TaskStatusType"
        LogGroupName:
          $ref: "#/components/schemas/GenericString"
        Properties:
          $ref: "#/components/schemas/TaskRunProperties"
        ErrorString:
          $ref: "#/components/schemas/GenericString"
        StartedOn:
          $ref: "#/components/schemas/Timestamp"
        LastModifiedOn:
          $ref: "#/components/schemas/Timestamp"
        CompletedOn:
          $ref: "#/components/schemas/Timestamp"
        ExecutionTime:
          $ref: "#/components/schemas/ExecutionTime"
      description: The sampling parameters that are associated with the machine learning
        transform.
    TaskType:
      type: string
      enum:
        - EVALUATION
        - LABELING_SET_GENERATION
        - IMPORT_LABELS
        - EXPORT_LABELS
        - FIND_MATCHES
    TaskRunSortColumnType:
      type: string
      enum:
        - TASK_RUN_TYPE
        - STATUS
        - STARTED
    TransformSortColumnType:
      type: string
      enum:
        - NAME
        - TRANSFORM_TYPE
        - STATUS
        - CREATED
        - LAST_MODIFIED
    TriggerState:
      type: string
      enum:
        - CREATING
        - CREATED
        - ACTIVATING
        - ACTIVATED
        - DEACTIVATING
        - DEACTIVATED
        - DELETING
        - UPDATING
    TriggerUpdate:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Schedule:
          $ref: "#/components/schemas/GenericString"
        Actions:
          $ref: "#/components/schemas/ActionList"
        Predicate:
          $ref: "#/components/schemas/Predicate"
      description: A structure used to provide information used to update a trigger. This
        object updates the previous trigger definition by overwriting it
        completely.
    UpdateGrokClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Classification:
          $ref: "#/components/schemas/Classification"
        GrokPattern:
          $ref: "#/components/schemas/GrokPattern"
        CustomPatterns:
          $ref: "#/components/schemas/CustomPatterns"
      description: Specifies a grok classifier to update when passed to
        <code>UpdateClassifier</code>.
    UpdateXMLClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Classification:
          $ref: "#/components/schemas/Classification"
        RowTag:
          $ref: "#/components/schemas/RowTag"
      description: Specifies an XML classifier to be updated.
    UpdateJsonClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        JsonPath:
          $ref: "#/components/schemas/JsonPath"
      description: Specifies a JSON classifier to be updated.
    UpdateCsvClassifierRequest:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Delimiter:
          $ref: "#/components/schemas/CsvColumnDelimiter"
        QuoteSymbol:
          $ref: "#/components/schemas/CsvQuoteSymbol"
        ContainsHeader:
          $ref: "#/components/schemas/CsvHeaderOption"
        Header:
          $ref: "#/components/schemas/CsvHeader"
        DisableValueTrimming:
          $ref: "#/components/schemas/NullableBoolean"
        AllowSingleColumn:
          $ref: "#/components/schemas/NullableBoolean"
      description: Specifies a custom CSV classifier to be updated.
    WorkflowGraph:
      type: object
      properties:
        Nodes:
          $ref: "#/components/schemas/NodeList"
        Edges:
          $ref: "#/components/schemas/EdgeList"
      description: A workflow graph represents the complete workflow containing all the AWS
        Glue components present in the workflow and all the directed connections
        between them.
    WorkflowRunStatus:
      type: string
      enum:
        - RUNNING
        - COMPLETED
    WorkflowRunStatistics:
      type: object
      properties:
        TotalActions:
          $ref: "#/components/schemas/IntegerValue"
        TimeoutActions:
          $ref: "#/components/schemas/IntegerValue"
        FailedActions:
          $ref: "#/components/schemas/IntegerValue"
        StoppedActions:
          $ref: "#/components/schemas/IntegerValue"
        SucceededActions:
          $ref: "#/components/schemas/IntegerValue"
        RunningActions:
          $ref: "#/components/schemas/IntegerValue"
      description: Workflow run statistics provides statistics about the workflow run.
