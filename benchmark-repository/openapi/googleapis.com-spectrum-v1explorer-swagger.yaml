openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: API for spectrum-management functions.
  title: Google Spectrum Database
  version: v1explorer
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - telecom
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.6.2
      format: google
      url: https://www.googleapis.com/discovery/v1/apis/spectrum/v1explorer/rest
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: spectrum
externalDocs:
  url: http://developers.google.com/spectrum
tags:
  - name: paws
paths:
  /getSpectrum:
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Requests information about the available spectrum for a device at a
        location. Requests from a fixed-mode device must include owner
        information so the device can be registered with the database.
      operationId: spectrum.paws.getSpectrum
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PawsGetSpectrumRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PawsGetSpectrumResponse"
      tags:
        - paws
  /getSpectrumBatch:
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: The Google Spectrum Database does not support batch requests, so this
        method always yields an UNIMPLEMENTED error.
      operationId: spectrum.paws.getSpectrumBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PawsGetSpectrumBatchRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PawsGetSpectrumBatchResponse"
      tags:
        - paws
  /init:
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Initializes the connection between a white space device and the database.
      operationId: spectrum.paws.init
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PawsInitRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PawsInitResponse"
      tags:
        - paws
  /notifySpectrumUse:
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Notifies the database that the device has selected certain frequency
        ranges for transmission. Only to be invoked when required by the
        regulator. The Google Spectrum Database does not operate in domains that
        require notification, so this always yields an UNIMPLEMENTED error.
      operationId: spectrum.paws.notifySpectrumUse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PawsNotifySpectrumUseRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PawsNotifySpectrumUseResponse"
      tags:
        - paws
  /register:
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: The Google Spectrum Database implements registration in the getSpectrum
        method. As such this always returns an UNIMPLEMENTED error.
      operationId: spectrum.paws.register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PawsRegisterRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PawsRegisterResponse"
      tags:
        - paws
  /verifyDevice:
    parameters:
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/userIp"
    post:
      description: Validates a device for white space use in accordance with regulatory
        rules. The Google Spectrum Database does not support master/slave
        configurations, so this always yields an UNIMPLEMENTED error.
      operationId: spectrum.paws.verifyDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PawsVerifyDeviceRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PawsVerifyDeviceResponse"
      tags:
        - paws
servers:
  - url: https://www.googleapis.com/spectrum/v1explorer/paws
components:
  parameters:
    alt:
      description: Data format for the response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - csv
          - json
        default: json
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: An opaque string that represents a user for quota purposes. Must not
        exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    userIp:
      description: Deprecated. Please use quotaUser instead.
      in: query
      name: userIp
      schema:
        type: string
  schemas:
    AntennaCharacteristics:
      description: Antenna characteristics provide additional information, such as the
        antenna height, antenna type, etc. Whether antenna characteristics must
        be provided in a request depends on the device type and regulatory
        domain.
      properties:
        height:
          description: The antenna height in meters. Whether the antenna height is required
            depends on the device type and the regulatory domain. Note that the
            height may be negative.
          format: double
          type: number
        heightType:
          description: If the height is required, then the height type (AGL for above
            ground level or AMSL for above mean sea level) is also required. The
            default is AGL.
          type: string
        heightUncertainty:
          description: The height uncertainty in meters. Whether this is required depends
            on the regulatory domain.
          format: double
          type: number
      type: object
    DatabaseSpec:
      description: This message contains the name and URI of a database.
      properties:
        name:
          description: The display name for a database.
          type: string
        uri:
          description: The corresponding URI of the database.
          type: string
      type: object
    DbUpdateSpec:
      description: This message is provided by the database to notify devices of an
        upcoming change to the database URI.
      properties:
        databases:
          description: A required list of one or more databases. A device should update its
            preconfigured list of databases to replace (only) the database that
            provided the response with the specified entries.
          items:
            $ref: "#/components/schemas/DatabaseSpec"
          type: array
      type: object
    DeviceCapabilities:
      description: Device capabilities provide additional information that may be used by a
        device to provide additional information to the database that may help
        it to determine available spectrum. If the database does not support
        device capabilities it will ignore the parameter altogether.
      properties:
        frequencyRanges:
          description: An optional list of frequency ranges supported by the device. Each
            element must contain start and stop frequencies in which the device
            can operate. Channel identifiers are optional. When specified, the
            database should not return available spectrum that falls outside
            these ranges or channel IDs.
          items:
            $ref: "#/components/schemas/FrequencyRange"
          type: array
      type: object
    DeviceDescriptor:
      description: The device descriptor contains parameters that identify the specific
        device, such as its manufacturer serial number, regulatory-specific
        identifier (e.g., FCC ID), and any other device characteristics required
        by regulatory domains.
      properties:
        etsiEnDeviceCategory:
          description: Specifies the ETSI white space device category. Valid values are the
            strings master and slave. This field is case-insensitive. Consult
            the ETSI documentation for details about the device types.
          type: string
        etsiEnDeviceEmissionsClass:
          description: Specifies the ETSI white space device emissions class. The values
            are represented by numeric strings, such as 1, 2, etc. Consult the
            ETSI documentation for details about the device types.
          type: string
        etsiEnDeviceType:
          description: Specifies the ETSI white space device type. Valid values are
            single-letter strings, such as A, B, etc. Consult the ETSI
            documentation for details about the device types.
          type: string
        etsiEnTechnologyId:
          description: Specifies the ETSI white space device technology identifier. The
            string value must not exceed 64 characters in length. Consult the
            ETSI documentation for details about the device types.
          type: string
        fccId:
          description: Specifies the device's FCC certification identifier. The value is an
            identifier string whose length should not exceed 32 characters. Note
            that, in practice, a valid FCC ID may be limited to 19 characters.
          type: string
        fccTvbdDeviceType:
          description: Specifies the TV Band White Space device type, as defined by the
            FCC. Valid values are FIXED, MODE_1, MODE_2.
          type: string
        manufacturerId:
          description: The manufacturer's ID may be required by the regulatory domain. This
            should represent the name of the device manufacturer, should be
            consistent across all devices from the same manufacturer, and should
            be distinct from that of other manufacturers. The string value must
            not exceed 64 characters in length.
          type: string
        modelId:
          description: The device's model ID may be required by the regulatory domain. The
            string value must not exceed 64 characters in length.
          type: string
        rulesetIds:
          description: >-
            The list of identifiers for rulesets supported by the device. A
            database may require that the device provide this list before
            servicing the device requests. If the database does not support any
            of the rulesets specified in the list, the database may refuse to
            service the device requests. If present, the list must contain at
            least one entry.


            For information about the valid requests, see section 9.2 of the PAWS specification. Currently, FccTvBandWhiteSpace-2010 is the only supported ruleset.
          items:
            type: string
          type: array
        serialNumber:
          description: The manufacturer's device serial number; required by the applicable
            regulatory domain. The length of the value must not exceed 64
            characters.
          type: string
      type: object
    DeviceOwner:
      description: >-
        This parameter contains device-owner information required as part of
        device registration. The regulatory domains may require additional
        parameters.


        All contact information must be expressed using the structure defined by the vCard format specification. Only the contact fields of vCard are supported:  

        - fn: Full name of an individual 

        - org: Name of the organization 

        - adr: Address fields 

        - tel: Telephone numbers 

        - email: Email addresses  


        Note that the vCard specification defines maximum lengths for each field.
      properties:
        operator:
          $ref: "#/components/schemas/Vcard"
        owner:
          $ref: "#/components/schemas/Vcard"
      type: object
    DeviceValidity:
      description: The device validity element describes whether a particular device is
        valid to operate in the regulatory domain.
      properties:
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        isValid:
          description: "The validity status: true if the device is valid for operation,
            false otherwise. It will always be present."
          type: boolean
        reason:
          description: If the device identifier is not valid, the database may include a
            reason. The reason may be in any language. The length of the value
            should not exceed 128 characters.
          type: string
      type: object
    EventTime:
      description: >-
        The start and stop times of an event. This is used to indicate the time
        period for which a spectrum profile is valid.


        Both times are expressed using the format, YYYY-MM-DDThh:mm:ssZ, as defined in RFC3339. The times must be expressed using UTC.
      properties:
        startTime:
          description: The inclusive start of the event. It will be present.
          type: string
        stopTime:
          description: The exclusive end of the event. It will be present.
          type: string
      type: object
    FrequencyRange:
      description: A specific range of frequencies together with the associated maximum
        power level and channel identifier.
      properties:
        channelId:
          description: The database may include a channel identifier, when applicable. When
            it is included, the device should treat it as informative. The
            length of the identifier should not exceed 16 characters.
          type: string
        maxPowerDBm:
          description: The maximum total power level (EIRP)—computed over the corresponding
            operating bandwidth—that is permitted within the frequency range.
            Depending on the context in which the frequency-range element
            appears, this value may be required. For example, it is required in
            the available-spectrum response, available-spectrum-batch response,
            and spectrum-use notification message, but it should not be present
            (it is not applicable) when the frequency range appears inside a
            device-capabilities message.
          format: double
          type: number
        startHz:
          description: The required inclusive start of the frequency range (in Hertz).
          format: double
          type: number
        stopHz:
          description: The required exclusive end of the frequency range (in Hertz).
          format: double
          type: number
      type: object
    GeoLocation:
      description: This parameter is used to specify the geolocation of the device.
      properties:
        confidence:
          description: The location confidence level, as an integer percentage, may be
            required, depending on the regulatory domain. When the parameter is
            optional and not provided, its value is assumed to be 95. Valid
            values range from 0 to 99, since, in practice, 100-percent
            confidence is not achievable. The confidence value is meaningful
            only when geolocation refers to a point with uncertainty.
          format: int32
          type: integer
        point:
          $ref: "#/components/schemas/GeoLocationEllipse"
        region:
          $ref: "#/components/schemas/GeoLocationPolygon"
      type: object
    GeoLocationEllipse:
      description: A "point" with uncertainty is represented using the Ellipse shape.
      properties:
        center:
          $ref: "#/components/schemas/GeoLocationPoint"
        orientation:
          description: A floating-point number that expresses the orientation of the
            ellipse, representing the rotation, in degrees, of the semi-major
            axis from North towards the East. For example, when the uncertainty
            is greatest along the North-South direction, orientation is 0
            degrees; conversely, if the uncertainty is greatest along the
            East-West direction, orientation is 90 degrees. When orientation is
            not present, the orientation is assumed to be 0.
          format: double
          type: number
        semiMajorAxis:
          description: A floating-point number that expresses the location uncertainty
            along the major axis of the ellipse. May be required by the
            regulatory domain. When the uncertainty is optional, the default
            value is 0.
          format: double
          type: number
        semiMinorAxis:
          description: A floating-point number that expresses the location uncertainty
            along the minor axis of the ellipse. May be required by the
            regulatory domain. When the uncertainty is optional, the default
            value is 0.
          format: double
          type: number
      type: object
    GeoLocationPoint:
      description: A single geolocation on the globe.
      properties:
        latitude:
          description: A required floating-point number that expresses the latitude in
            degrees using the WGS84 datum. For details on this encoding, see the
            National Imagery and Mapping Agency's Technical Report TR8350.2.
          format: double
          type: number
        longitude:
          description: A required floating-point number that expresses the longitude in
            degrees using the WGS84 datum. For details on this encoding, see the
            National Imagery and Mapping Agency's Technical Report TR8350.2.
          format: double
          type: number
      type: object
    GeoLocationPolygon:
      description: A region is represented using the polygonal shape.
      properties:
        exterior:
          description: >-
            When the geolocation describes a region, the exterior field refers
            to a list of latitude/longitude points that represent the vertices
            of a polygon. The first and last points must be the same. Thus, a
            minimum of four points is required. The following polygon
            restrictions from RFC5491 apply:  

            - A connecting line shall not cross another connecting line of the same polygon. 

            - The vertices must be defined in a counterclockwise order. 

            - The edges of a polygon are defined by the shortest path between two points in space (not a geodesic curve). Consequently, the length between two adjacent vertices should be restricted to a maximum of 130 km. 

            - All vertices are assumed to be at the same altitude. 

            - Polygon shapes should be restricted to a maximum of 15 vertices (16 points that include the repeated vertex).
          items:
            $ref: "#/components/schemas/GeoLocationPoint"
          type: array
      type: object
    GeoSpectrumSchedule:
      description: The schedule of spectrum profiles available at a particular geolocation.
      properties:
        location:
          $ref: "#/components/schemas/GeoLocation"
        spectrumSchedules:
          description: A list of available spectrum profiles and associated times. It will
            always be present, and at least one schedule must be included
            (though it may be empty if there is no available spectrum). More
            than one schedule may be included to represent future changes to the
            available spectrum.
          items:
            $ref: "#/components/schemas/SpectrumSchedule"
          type: array
      type: object
    PawsGetSpectrumBatchRequest:
      description: The request message for a batch available spectrum query protocol.
      properties:
        antenna:
          $ref: "#/components/schemas/AntennaCharacteristics"
        capabilities:
          $ref: "#/components/schemas/DeviceCapabilities"
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        locations:
          description: >-
            A geolocation list is required. This allows a device to specify its
            current location plus additional anticipated locations when allowed
            by the regulatory domain. At least one location must be included.
            Geolocation must be given as the location of the radiation center of
            the device's antenna. If a location specifies a region, rather than
            a point, the database may return an UNIMPLEMENTED error if it does
            not support query by region.


            There is no upper limit on the number of locations included in a available spectrum batch request, but the database may restrict the number of locations it supports by returning a response with fewer locations than specified in the batch request. Note that geolocations must be those of the master device (a device with geolocation capability that makes an available spectrum batch request), whether the master device is making the request on its own behalf or on behalf of a slave device (one without geolocation capability).
          items:
            $ref: "#/components/schemas/GeoLocation"
          type: array
        masterDeviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        owner:
          $ref: "#/components/schemas/DeviceOwner"
        requestType:
          description: The request type parameter is an optional parameter that can be used
            to modify an available spectrum batch request, but its use depends
            on applicable regulatory rules. For example, It may be used to
            request generic slave device parameters without having to specify
            the device descriptor for a specific device. When the requestType
            parameter is missing, the request is for a specific device (master
            or slave), and the device descriptor parameter for the device on
            whose behalf the batch request is made is required.
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsGetSpectrumBatchResponse:
      description: The response message for the batch available spectrum query contains a
        schedule of available spectrum for the device at multiple locations.
      properties:
        databaseChange:
          $ref: "#/components/schemas/DbUpdateSpec"
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        geoSpectrumSchedules:
          description: The available spectrum batch response must contain a geo-spectrum
            schedule list, The list may be empty if spectrum is not available.
            The database may return more than one geo-spectrum schedule to
            represent future changes to the available spectrum. How far in
            advance a schedule may be provided depends upon the applicable
            regulatory domain. The database may return available spectrum for
            fewer geolocations than requested. The device must not make
            assumptions about the order of the entries in the list, and must use
            the geolocation value in each geo-spectrum schedule entry to match
            available spectrum to a location.
          items:
            $ref: "#/components/schemas/GeoSpectrumSchedule"
          type: array
        kind:
          default: spectrum#pawsGetSpectrumBatchResponse
          description: 'Identifies what kind of resource this is. Value: the fixed string
            "spectrum#pawsGetSpectrumBatchResponse".'
          type: string
        maxContiguousBwHz:
          description: The database may return a constraint on the allowed maximum
            contiguous bandwidth (in Hertz). A regulatory domain may require the
            database to return this parameter. When this parameter is present in
            the response, the device must apply this constraint to its
            spectrum-selection logic to ensure that no single block of spectrum
            has bandwidth that exceeds this value.
          format: double
          type: number
        maxTotalBwHz:
          description: The database may return a constraint on the allowed maximum total
            bandwidth (in Hertz), which does not need to be contiguous. A
            regulatory domain may require the database to return this parameter.
            When this parameter is present in the available spectrum batch
            response, the device must apply this constraint to its
            spectrum-selection logic to ensure that total bandwidth does not
            exceed this value.
          format: double
          type: number
        needsSpectrumReport:
          description: For regulatory domains that require a spectrum-usage report from
            devices, the database must return true for this parameter if the
            geo-spectrum schedules list is not empty; otherwise, the database
            should either return false or omit this parameter. If this parameter
            is present and its value is true, the device must send a spectrum
            use notify message to the database; otherwise, the device should not
            send the notification.
          type: boolean
        rulesetInfo:
          $ref: "#/components/schemas/RulesetInfo"
        timestamp:
          description: The database includes a timestamp of the form, YYYY-MM-DDThh:mm:ssZ
            (Internet timestamp format per RFC3339), in its available spectrum
            batch response. The timestamp should be used by the device as a
            reference for the start and stop times specified in the response
            spectrum schedules.
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsGetSpectrumRequest:
      description: The request message for the available spectrum query protocol which must
        include the device's geolocation.
      properties:
        antenna:
          $ref: "#/components/schemas/AntennaCharacteristics"
        capabilities:
          $ref: "#/components/schemas/DeviceCapabilities"
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        location:
          $ref: "#/components/schemas/GeoLocation"
        masterDeviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        owner:
          $ref: "#/components/schemas/DeviceOwner"
        requestType:
          description: The request type parameter is an optional parameter that can be used
            to modify an available spectrum request, but its use depends on
            applicable regulatory rules. It may be used, for example, to request
            generic slave device parameters without having to specify the device
            descriptor for a specific device. When the requestType parameter is
            missing, the request is for a specific device (master or slave), and
            the deviceDesc parameter for the device on whose behalf the request
            is made is required.
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsGetSpectrumResponse:
      description: The response message for the available spectrum query which contains a
        schedule of available spectrum for the device.
      properties:
        databaseChange:
          $ref: "#/components/schemas/DbUpdateSpec"
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        kind:
          default: spectrum#pawsGetSpectrumResponse
          description: 'Identifies what kind of resource this is. Value: the fixed string
            "spectrum#pawsGetSpectrumResponse".'
          type: string
        maxContiguousBwHz:
          description: The database may return a constraint on the allowed maximum
            contiguous bandwidth (in Hertz). A regulatory domain may require the
            database to return this parameter. When this parameter is present in
            the response, the device must apply this constraint to its
            spectrum-selection logic to ensure that no single block of spectrum
            has bandwidth that exceeds this value.
          format: double
          type: number
        maxTotalBwHz:
          description: The database may return a constraint on the allowed maximum total
            bandwidth (in Hertz), which need not be contiguous. A regulatory
            domain may require the database to return this parameter. When this
            parameter is present in the available spectrum response, the device
            must apply this constraint to its spectrum-selection logic to ensure
            that total bandwidth does not exceed this value.
          format: double
          type: number
        needsSpectrumReport:
          description: For regulatory domains that require a spectrum-usage report from
            devices, the database must return true for this parameter if the
            spectrum schedule list is not empty; otherwise, the database will
            either return false or omit this parameter. If this parameter is
            present and its value is true, the device must send a spectrum use
            notify message to the database; otherwise, the device must not send
            the notification.
          type: boolean
        rulesetInfo:
          $ref: "#/components/schemas/RulesetInfo"
        spectrumSchedules:
          description: The available spectrum response must contain a spectrum schedule
            list. The list may be empty if spectrum is not available. The
            database may return more than one spectrum schedule to represent
            future changes to the available spectrum. How far in advance a
            schedule may be provided depends on the applicable regulatory
            domain.
          items:
            $ref: "#/components/schemas/SpectrumSchedule"
          type: array
        timestamp:
          description: The database includes a timestamp of the form YYYY-MM-DDThh:mm:ssZ
            (Internet timestamp format per RFC3339) in its available spectrum
            response. The timestamp should be used by the device as a reference
            for the start and stop times specified in the response spectrum
            schedules.
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsInitRequest:
      description: The initialization request message allows the master device to initiate
        exchange of capabilities with the database.
      properties:
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        location:
          $ref: "#/components/schemas/GeoLocation"
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsInitResponse:
      description: The initialization response message communicates database parameters to
        the requesting device.
      properties:
        databaseChange:
          $ref: "#/components/schemas/DbUpdateSpec"
        kind:
          default: spectrum#pawsInitResponse
          description: 'Identifies what kind of resource this is. Value: the fixed string
            "spectrum#pawsInitResponse".'
          type: string
        rulesetInfo:
          $ref: "#/components/schemas/RulesetInfo"
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsNotifySpectrumUseRequest:
      description: The spectrum-use notification message which must contain the geolocation
        of the Device and parameters required by the regulatory domain.
      properties:
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        location:
          $ref: "#/components/schemas/GeoLocation"
        spectra:
          description: A spectrum list is required in the spectrum-use notification. The
            list specifies the spectrum that the device expects to use, which
            includes frequency ranges and maximum power levels. The list may be
            empty if the device decides not to use any of spectrum. For
            consistency, the psdBandwidthHz value should match that from one of
            the spectrum elements in the corresponding available spectrum
            response previously sent to the device by the database. Note that
            maximum power levels in the spectrum element must be expressed as
            power spectral density over the specified psdBandwidthHz value. The
            actual bandwidth to be used (as computed from the start and stop
            frequencies) may be different from the psdBandwidthHz value. As an
            example, when regulatory rules express maximum power spectral
            density in terms of maximum power over any 100 kHz band, then the
            psdBandwidthHz value should be set to 100 kHz, even though the
            actual bandwidth used can be 20 kHz.
          items:
            $ref: "#/components/schemas/SpectrumMessage"
          type: array
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsNotifySpectrumUseResponse:
      description: An empty response to the notification.
      properties:
        kind:
          default: spectrum#pawsNotifySpectrumUseResponse
          description: 'Identifies what kind of resource this is. Value: the fixed string
            "spectrum#pawsNotifySpectrumUseResponse".'
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsRegisterRequest:
      description: The registration request message contains the required registration
        parameters.
      properties:
        antenna:
          $ref: "#/components/schemas/AntennaCharacteristics"
        deviceDesc:
          $ref: "#/components/schemas/DeviceDescriptor"
        deviceOwner:
          $ref: "#/components/schemas/DeviceOwner"
        location:
          $ref: "#/components/schemas/GeoLocation"
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsRegisterResponse:
      description: The registration response message simply acknowledges receipt of the
        request and is otherwise empty.
      properties:
        databaseChange:
          $ref: "#/components/schemas/DbUpdateSpec"
        kind:
          default: spectrum#pawsRegisterResponse
          description: 'Identifies what kind of resource this is. Value: the fixed string
            "spectrum#pawsRegisterResponse".'
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsVerifyDeviceRequest:
      description: The device validation request message.
      properties:
        deviceDescs:
          description: A list of device descriptors, which specifies the slave devices to
            be validated, is required.
          items:
            $ref: "#/components/schemas/DeviceDescriptor"
          type: array
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    PawsVerifyDeviceResponse:
      description: The device validation response message.
      properties:
        databaseChange:
          $ref: "#/components/schemas/DbUpdateSpec"
        deviceValidities:
          description: A device validities list is required in the device validation
            response to report whether each slave device listed in a previous
            device validation request is valid. The number of entries must match
            the number of device descriptors listed in the previous device
            validation request.
          items:
            $ref: "#/components/schemas/DeviceValidity"
          type: array
        kind:
          default: spectrum#pawsVerifyDeviceResponse
          description: 'Identifies what kind of resource this is. Value: the fixed string
            "spectrum#pawsVerifyDeviceResponse".'
          type: string
        type:
          description: |-
            The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).

            Required field.
          type: string
        version:
          description: |-
            The PAWS version. Must be exactly 1.0.

            Required field.
          type: string
      type: object
    RulesetInfo:
      description: This contains parameters for the ruleset of a regulatory domain that is
        communicated using the initialization and available-spectrum processes.
      properties:
        authority:
          description: The regulatory domain to which the ruleset belongs is required. It
            must be a 2-letter country code. The device should use this to
            determine additional device behavior required by the associated
            regulatory domain.
          type: string
        maxLocationChange:
          description: The maximum location change in meters is required in the
            initialization response, but optional otherwise. When the device
            changes location by more than this specified distance, it must
            contact the database to get the available spectrum for the new
            location. If the device is using spectrum that is no longer
            available, it must immediately cease use of the spectrum under rules
            for database-managed spectrum. If this value is provided within the
            context of an available-spectrum response, it takes precedence over
            the value within the initialization response.
          format: double
          type: number
        maxPollingSecs:
          description: The maximum duration, in seconds, between requests for available
            spectrum. It is required in the initialization response, but
            optional otherwise. The device must contact the database to get
            available spectrum no less frequently than this duration. If the new
            spectrum information indicates that the device is using spectrum
            that is no longer available, it must immediately cease use of those
            frequencies under rules for database-managed spectrum. If this value
            is provided within the context of an available-spectrum response, it
            takes precedence over the value within the initialization response.
          format: int32
          type: integer
        rulesetIds:
          description: The identifiers of the rulesets supported for the device's location.
            The database should include at least one applicable ruleset in the
            initialization response. The device may use the ruleset identifiers
            to determine parameters to include in subsequent requests. Within
            the context of the available-spectrum responses, the database should
            include the identifier of the ruleset that it used to determine the
            available-spectrum response. If included, the device must use the
            specified ruleset to interpret the response. If the device does not
            support the indicated ruleset, it must not operate in the spectrum
            governed by the ruleset.
          items:
            type: string
          type: array
      type: object
    SpectrumMessage:
      description: Available spectrum can be logically characterized by a list of frequency
        ranges and permissible power levels for each range.
      properties:
        bandwidth:
          description: The bandwidth (in Hertz) for which permissible power levels are
            specified. For example, FCC regulation would require only one
            spectrum specification at 6MHz bandwidth, but Ofcom regulation would
            require two specifications, at 0.1MHz and 8MHz. This parameter may
            be empty if there is no available spectrum. It will be present
            otherwise.
          format: double
          type: number
        frequencyRanges:
          description: The list of frequency ranges and permissible power levels. The list
            may be empty if there is no available spectrum, otherwise it will be
            present.
          items:
            $ref: "#/components/schemas/FrequencyRange"
          type: array
      type: object
    SpectrumSchedule:
      description: The spectrum schedule element combines an event time with spectrum
        profile to define a time period in which the profile is valid.
      properties:
        eventTime:
          $ref: "#/components/schemas/EventTime"
        spectra:
          description: A list of spectrum messages representing the usable profile. It will
            always be present, but may be empty when there is no available
            spectrum.
          items:
            $ref: "#/components/schemas/SpectrumMessage"
          type: array
      type: object
    Vcard:
      description: |-
        A vCard-in-JSON message that contains only the fields needed for PAWS:  
        - fn: Full name of an individual 
        - org: Name of the organization 
        - adr: Address fields 
        - tel: Telephone numbers 
        - email: Email addresses
      properties:
        adr:
          $ref: "#/components/schemas/VcardAddress"
        email:
          $ref: "#/components/schemas/VcardTypedText"
        fn:
          description: "The full name of the contact person. For example: John A. Smith."
          type: string
        org:
          $ref: "#/components/schemas/VcardTypedText"
        tel:
          $ref: "#/components/schemas/VcardTelephone"
      type: object
    VcardAddress:
      description: The structure used to represent a street address.
      properties:
        code:
          description: "The postal code associated with the address. For example: 94423."
          type: string
        country:
          description: "The country name. For example: US."
          type: string
        locality:
          description: "The city or local equivalent portion of the address. For example:
            San Jose."
          type: string
        pobox:
          description: An optional post office box number.
          type: string
        region:
          description: "The state or local equivalent portion of the address. For example:
            CA."
          type: string
        street:
          description: "The street number and name. For example: 123 Any St."
          type: string
      type: object
    VcardTelephone:
      description: The structure used to represent a telephone number.
      properties:
        uri:
          description: "A nested telephone URI of the form: tel:+1-123-456-7890."
          type: string
      type: object
    VcardTypedText:
      description: The structure used to represent an organization and an email address.
      properties:
        text:
          description: "The text string associated with this item. For example, for an org
            field: ACME, inc. For an email field: smith@example.com."
          type: string
      type: object
