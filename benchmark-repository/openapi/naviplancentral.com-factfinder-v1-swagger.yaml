openapi: 3.0.0
info:
  contact:
    x-twitter: AdvicentFP
  description: An API for accessing the NaviPlan Fact Finder.
  title: Advicent.FactFinderService
  version: v1
  x-apisguru-categories:
    - financial
  x-logo:
    url: https://twitter.com/Advicent/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://demo.uat.naviplancentral.com/factfinder/swagger/docs/v1
      version: "2.0"
  x-providerName: naviplancentral.com
  x-serviceName: factfinder
paths:
  /api/AccountTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Account Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Account Types
        including id and type description."
      operationId: AccountTypes_GetByCountry
      parameters:
        - description: The country used to filter Account Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Account Type not found
      tags:
        - AccountTypes
  "/api/AccountTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Account Types for the
        specified id.<br />\r

        \              Purpose: Provides access to the Account Types
        including id and type description."
      operationId: AccountTypes_GetById
      parameters:
        - description: The ID of Account Type used to retreive the Account Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Account Type not found
      tags:
        - AccountTypes
  /api/Accounts:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Accounts for the specified
        Fact Finder ID and/or external source ID.<br />\r

        \              Purpose: Provides access to the Account
        information including description and market value."
      operationId: Accounts_GetAccountsByFactFinderIdByFactfinderidExternalsourceid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Accounts
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
        - description: The external ID used to filter Accounts
          in: query
          name: externalSourceId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    post:
      deprecated: false
      description: "Description: The operation creates an Account.<br />\r

        \              Purpose: Allows for creation of Accounts on a
        Fact Finder."
      operationId: Accounts_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountModel"
          text/json:
            schema:
              $ref: "#/components/schemas/AccountModel"
        description: The Account to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
  "/api/Accounts/{accountId}/Holdings":
    get:
      deprecated: false
      description: Retrieves all holdings in the specified Account.
      operationId: Accounts_GetAccountHoldingsByAccountid
      parameters:
        - description: The ID of the Account used to retrieve the Account Holding data
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    post:
      deprecated: false
      description: Creates a holding and adds it to an existing Account.
      operationId: Accounts_PostAccountHoldingByAccountidModel
      parameters:
        - description: The existing Account ID used to identify which Account to add the
            holding to
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountHoldingModel"
          text/json:
            schema:
              $ref: "#/components/schemas/AccountHoldingModel"
        description: The holding data
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    put:
      deprecated: false
      description: Updates all holdings associated with an account
      operationId: Accounts_PutHoldingsByAccountidHoldings
      parameters:
        - description: The account with the holding to be updated
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountHoldingsWithoutIdModel"
          text/json:
            schema:
              $ref: "#/components/schemas/AccountHoldingsWithoutIdModel"
        description: The list of holdings for an account
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
  "/api/Accounts/{accountId}/Holdings/{id}":
    delete:
      deprecated: false
      description: "Description: This operation deletes a single Account Holding for the
        specified Account Holding ID and Account ID.<br />\r

        \              Purpose: Provides the ability to remove
        individual holdings from a specified Account."
      operationId: Accounts_DeleteAccountHoldingByAccountidId
      parameters:
        - description: The ID of the Account used to retrieve the Account data that the
            specified holding belongs to.
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Account Holding used to delete the Account Holding
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Account Holding for the
        specified Account Holding ID and Account ID.<br />\r

        \              Purpose: Provides access to the Account Holding
        information including description and market value."
      operationId: Accounts_GetAccountHoldingByAccountidId
      parameters:
        - description: The ID of the Account used to retrieve the Account Holding data
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Account Holding used to retrieve the Account Holding
            data
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    put:
      deprecated: false
      description: Updates a holding associated with an account
      operationId: Accounts_PutByAccountidIdHolding
      parameters:
        - description: The account with the holding to be updated
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
        - description: The id of the holding to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountHoldingModel"
          text/json:
            schema:
              $ref: "#/components/schemas/AccountHoldingModel"
        description: The holding values used to update the current holding
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
  "/api/Accounts/{accountId}/SavingsStrategies":
    delete:
      deprecated: false
      description: Deletes all savings strategies tied to an account
      operationId: Accounts_DeleteSavingsStrategiesByAccountid
      parameters:
        - description: Id of the account that holds the savings strategies
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    get:
      deprecated: false
      description: Get all of the savings strategies for a specific account
      operationId: Accounts_GetSavingsStrategiesByAccountIdByAccountid
      parameters:
        - description: The id of the account to retrieve the savings strategies from
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategiesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    post:
      deprecated: false
      description: Creates a savings strategy on a specific account
      operationId: Accounts_PostSavingsStrategyByAccountidSavingsstrategy
      parameters:
        - description: Id of the account to create a savings strategy for
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavingsStrategyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/SavingsStrategyModel"
        description: Values for the strategy to be created
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
  "/api/Accounts/{accountId}/SavingsStrategies/{id}":
    delete:
      deprecated: false
      description: Deletes a specific savings strategy
      operationId: Accounts_DeleteSavingsStrategyByAccountidId
      parameters:
        - description: Id of the account that holds the savings strategy
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the savings strategy to be deleted
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    get:
      deprecated: false
      description: Get a specific savings strategy for an account
      operationId: Accounts_GetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId
      parameters:
        - description: The id of the account to retrieve the savings strategies from
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
        - description: The id of the savings strategy to get
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    put:
      deprecated: false
      description: Updates a specific savings strategy
      operationId: Accounts_PutSavingsStrategyByAccountidIdSavingsstrategy
      parameters:
        - description: Id of the account that holds the savings strategy
          in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
        - description: Id of the savings strategy to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavingsStrategyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/SavingsStrategyModel"
        description: The model with which to update the savings strategy with
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/SavingsStrategyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
  "/api/Accounts/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes an Account tied to a Fact Finder.<br
        />\r

        \              Purpose: Allows for removal of an Account from a
        Fact Finder."
      operationId: Accounts_DeleteAccountById
      parameters:
        - description: The Account ID used to identify which Account to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Account for the
        specified Account ID.<br />\r

        \              Purpose: Provides access to the Account
        information including description and market value."
      operationId: Accounts_GetById
      parameters:
        - description: The ID of the Account used to retrieve the Account data
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
    put:
      deprecated: false
      description: "Description: The operation updates an Account, deletes associated
        saving strategies if the account type changes.<br />\r

        \              Purpose: Allows for complete replacement of an
        Account on a Fact Finder."
      operationId: Accounts_PutByIdModel
      parameters:
        - description: The existing Account ID used to identify which Account to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountModel"
          text/json:
            schema:
              $ref: "#/components/schemas/AccountModel"
        description: The Account to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Accounts
  /api/Clients:
    post:
      deprecated: false
      description: "Description: This operation submits the Fact Finder data to an external
        system.<br />\r

        \              Purpose: Allows Fact Finder data to be persisted
        in another system for that system's consumption and use."
      operationId: Clients_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientsModel"
          text/json:
            schema:
              $ref: "#/components/schemas/ClientsModel"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ClientModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Client data access.
        "403":
          description: Request is restricted for access to Client.
      tags:
        - Clients
  /api/CriticalIllnessInsurancePolicies:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Critical Illness Insurance
        Policies for the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Critical Illness
        Insurance Policies including description and policy type."
      operationId: CriticalIllnessInsurancePolicies_GetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Critical Illness
            Insurance Policies
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePoliciesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePoliciesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Critical Illness Insurance Policy data access.
        "403":
          description: Request is restricted for access to Critical Illness Insurance
            Policy.
        "404":
          description: Critical Illness Insurance Policy not found.
      tags:
        - CriticalIllnessInsurancePolicies
    post:
      deprecated: false
      description: "Description: The operation creates a Critical Illness Insurance
        Policy.<br />\r

        \              Purpose: Allows for creation of Critical Illness
        Insurance Policies on a Fact Finder."
      operationId: CriticalIllnessInsurancePolicies_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CriticalIllnessInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/CriticalIllnessInsurancePolicyModel"
        description: The Critical Illness Insurance Policy to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdMod\
                  el"
            text/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdMod\
                  el"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Critical Illness Insurance Policy data access.
        "403":
          description: Request is restricted for access to Critical Illness Insurance
            Policy.
        "404":
          description: Critical Illness Insurance Policy not found.
      tags:
        - CriticalIllnessInsurancePolicies
  "/api/CriticalIllnessInsurancePolicies/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Critical Illness Insurance Policy
        tied to a Fact Finder.<br />\r

        \              Purpose: Allows for removal of a Critical Illness
        Insurance Policy from a Fact Finder."
      operationId: CriticalIllnessInsurancePolicies_DeleteById
      parameters:
        - description: The Critical Illness Insurance Policy ID used to identify which
            Critical Illness Insurance Policy to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Critical Illness Insurance Policy data access.
        "403":
          description: Request is restricted for access to Critical Illness Insurance
            Policy.
        "404":
          description: Critical Illness Insurance Policy not found.
      tags:
        - CriticalIllnessInsurancePolicies
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Critical Illness
        Insurance Policy for the specified Critical Illness Insurance Policy
        ID.<br />\r

        \              Purpose: Provides access to the Critical Illness
        Insurance Policy including description and policy type."
      operationId: CriticalIllnessInsurancePolicies_GetById
      parameters:
        - description: The ID of the Critical Illness Insurance Policy used to retreive the
            Critical Illness Insurance Policy
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdMod\
                  el"
            text/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdMod\
                  el"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Critical Illness Insurance Policy data access.
        "403":
          description: Request is restricted for access to Critical Illness Insurance
            Policy.
        "404":
          description: Critical Illness Insurance Policy not found.
      tags:
        - CriticalIllnessInsurancePolicies
    put:
      deprecated: false
      description: "Description: The operation updates a Critical Illness Insurance
        Policy.<br />\r

        \              Purpose: Allows for complete replacement of a
        Critical Illness Insurance Policy on a Fact Finder."
      operationId: CriticalIllnessInsurancePolicies_PutByIdModel
      parameters:
        - description: The existing Critical Illness Insurance Policy ID used to identify
            which Critical Illness Insurance Policy to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CriticalIllnessInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/CriticalIllnessInsurancePolicyModel"
        description: The Critical Illness Insurance Policy to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdMod\
                  el"
            text/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdMod\
                  el"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Critical Illness Insurance Policy data access.
        "403":
          description: Request is restricted for access to Critical Illness Insurance
            Policy.
        "404":
          description: Critical Illness Insurance Policy not found.
      tags:
        - CriticalIllnessInsurancePolicies
  /api/CriticalIllnessInsurancePolicyTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Critical Illness Insurance
        Policy Types for the specified country.<br />\r

        \              Purpose: Provides access to the Critical Illness
        Insurance Policy Types including id and type description."
      operationId: CriticalIllnessInsurancePolicyTypes_GetByCountry
      parameters:
        - description: The country used to filter Critical Illness Insurance Policy Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Critical Illness Insurance Policy Type not found.
      tags:
        - CriticalIllnessInsurancePolicyTypes
  "/api/CriticalIllnessInsurancePolicyTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Critical Illness Insurance
        Policy Type for the specified id.<br />\r

        \              Purpose: Provides access to the Critical Illness
        Insurance Policy Types including id and type description."
      operationId: CriticalIllnessInsurancePolicyTypes_GetById
      parameters:
        - description: The ID of Critical Illness Insurance Policy Type used to retreive
            the Critical Illness Insurance Policy Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/CriticalIllnessInsurancePolicyTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Critical Illness Insurance Policy Type not found.
      tags:
        - CriticalIllnessInsurancePolicyTypes
  /api/DefinedBenefitPensions:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Defined Benefit Pensions for
        the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Defined Benefit
        Pensions including description and start date."
      operationId: DefinedBenefitPensions_GetDefinedBenefitPensionsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Defined Benefit Pensions
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Defined Benefit Pension data access.
        "403":
          description: Request is restricted for access to Defined Benefit Pension.
        "404":
          description: Defined Benefit Pension not found.
      tags:
        - DefinedBenefitPensions
    post:
      deprecated: false
      description: "Description: The operation creates a Defined Benefit Pension.<br />\r

        \              Purpose: Allows for creation of Defined Benefit
        Pensions on a Fact Finder."
      operationId: DefinedBenefitPensions_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefinedBenefitPensionModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DefinedBenefitPensionModel"
        description: The Defined Benefit Pension to be added to the Fact Finder
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Defined Benefit Pension data access.
        "403":
          description: Request is restricted for access to Defined Benefit Pension.
        "404":
          description: Defined Benefit Pension not found.
      tags:
        - DefinedBenefitPensions
  "/api/DefinedBenefitPensions/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Defined Benefit Pension tied to a
        Fact Finder.<br />\r

        \              Purpose: Allows for removal of a Defined Benefit
        Pension from a Fact Finder."
      operationId: DefinedBenefitPensions_DeleteDefinedBenefitPensionById
      parameters:
        - description: The Defined Benefit Pension ID used to identify which Defined
            Benefit Pension to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Defined Benefit Pension data access.
        "403":
          description: Request is restricted for access to Defined Benefit Pension.
        "404":
          description: Defined Benefit Pension not found.
      tags:
        - DefinedBenefitPensions
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Defined Benefit Pension
        for the specified Defined Benefit Pension ID.<br />\r

        \              Purpose: Provides access to the Defined Benefit
        Pension including description and start date."
      operationId: DefinedBenefitPensions_GetById
      parameters:
        - description: The ID of the Defined Benefit Pension used to retreive the Defined
            Benefit Pension
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Defined Benefit Pension data access.
        "403":
          description: Request is restricted for access to Defined Benefit Pension.
        "404":
          description: Defined Benefit Pension not found.
      tags:
        - DefinedBenefitPensions
    put:
      deprecated: false
      description: "Description: The operation updates a Defined Benefit Pension.<br />\r

        \              Purpose: Allows for complete replacement of a
        Defined Benefit Pension on a Fact Finder."
      operationId: DefinedBenefitPensions_PutDefinedBenefitPensionByIdModel
      parameters:
        - description: The existing Defined Benefit Pension ID used to identify which
            Defined Benefit Pension to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefinedBenefitPensionModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DefinedBenefitPensionModel"
        description: The Defined Benefit Pension to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Defined Benefit Pension data access.
        "403":
          description: Request is restricted for access to Defined Benefit Pension.
        "404":
          description: Defined Benefit Pension not found.
      tags:
        - DefinedBenefitPensions
  /api/Demographics:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Demographic information for
        the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Demographic
        information including city and state."
      operationId: Demographics_GetDemographicsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Demographic information
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Demographic information not found.
      tags:
        - Demographics
    post:
      deprecated: false
      description: "Description: The operation creates Demographic information.<br />\r

        \              Purpose: Allows for creation of Demographic
        information on a Fact Finder."
      operationId: Demographics_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DemographicsModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DemographicsModel"
        description: The Demographic information to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Demographic information not found.
      tags:
        - Demographics
  "/api/Demographics/{demographicId}/Dependents":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Dependents for the specified
        Demographic information ID.<br />\r

        \              Purpose: Provides access to the Dependents
        including first and last name."
      operationId: Demographics_GetDependentsByDemographicid
      parameters:
        - description: The ID of the Demographic information used to retrieve Dependents
          in: path
          name: demographicId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Demographic information not found.
      tags:
        - Demographics
    post:
      deprecated: false
      description: "Description: The operation creates a Dependent.<br />\r

        \              Purpose: Allows for creation of Dependents on a
        Fact Finder."
      operationId: Demographics_PostByDemographicidModel
      parameters:
        - description: The ID of the Demographic information to add the Dependent to
          in: path
          name: demographicId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DemographicsDependentModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DemographicsDependentModel"
        description: The Dependent to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Dependent information data access.
        "403":
          description: Request is restricted for access to Dependent information.
        "404":
          description: Dependent information not found.
        "409":
          description: The request cannot be completed.
      tags:
        - Demographics
  "/api/Demographics/{demographicId}/Dependents/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Dependent tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of a Dependent from a
        Fact Finder."
      operationId: Demographics_DeleteDependentByDemographicidId
      parameters:
        - description: The ID of the Demographic information used to identify which
            Dependent to remove
          in: path
          name: demographicId
          required: true
          schema:
            type: integer
            format: int32
        - description: The Dependent ID used to identify which Dependent to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Dependent information data access.
        "403":
          description: Request is restricted for access to Dependent information.
        "404":
          description: Dependent information not found.
      tags:
        - Demographics
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Dependent for the
        specified Dependent ID.<br />\r

        \              Purpose: Provides access to the Dependent
        including first and last name."
      operationId: Demographics_GetDependentByDemographicidId
      parameters:
        - description: The ID of the Demographic information used to retrieve Dependents
          in: path
          name: demographicId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Dependent used to retreive the Dependent
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Demographic information not found.
      tags:
        - Demographics
    put:
      deprecated: false
      description: "Description: The operation updates a Dependent.<br />\r

        \              Purpose: Allows for complete replacement of a
        Dependent on a Fact Finder."
      operationId: Demographics_PutByDemographicidIdModel
      parameters:
        - description: The ID of the Demographic information used to identify which
            Dependent to update
          in: path
          name: demographicId
          required: true
          schema:
            type: integer
            format: int32
        - description: The existing Dependent ID used to identify which Dependent to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DemographicsDependentModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DemographicsDependentModel"
        description: The Dependent to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsDependentWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Dependent information data access.
        "403":
          description: Request is restricted for access to Dependent information.
        "404":
          description: Dependent information not found.
      tags:
        - Demographics
  "/api/Demographics/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves Demographic information for the
        specified Demographic information ID.<br />\r

        \              Purpose: Provides access to the Demographic
        information including city and state."
      operationId: Demographics_GetById
      parameters:
        - description: The ID of the Demographic information used to retreive the
            Demographic information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Demographic information not found.
      tags:
        - Demographics
    put:
      deprecated: false
      description: "Description: The operation updates Demographic information.<br />\r

        \              Purpose: Allows for complete replacement of
        Demographic information on a Fact Finder."
      operationId: Demographics_PutByIdModel
      parameters:
        - description: The existing Demographic information ID used to identify which
            Demographic information to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DemographicsModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DemographicsModel"
        description: The Demographic information to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DemographicsWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Demographic information not found.
        "409":
          description: The request cannot be completed.
      tags:
        - Demographics
  /api/DisabilityInsurancePolicies:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Disability Insurance Policies
        for the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Disability
        Insurance Policies including description and policy type."
      operationId: DisabilityInsurancePolicies_GetDisabilityInsurancePoliciesByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Disability Insurance
            Policies
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePoliciesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePoliciesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Disability Insurance Policy data access.
        "403":
          description: Request is restricted for access to Disability Insurance Policy.
        "404":
          description: Disability Insurance Policy not found.
      tags:
        - DisabilityInsurancePolicies
    post:
      deprecated: false
      description: "Description: The operation creates a Disability Insurance Policy.<br
        />\r

        \              Purpose: Allows for creation of Disability
        Insurance Policies on a Fact Finder."
      operationId: DisabilityInsurancePolicies_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisabilityInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DisabilityInsurancePolicyModel"
        description: The Disability Insurance Policy to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Disability Insurance Policy data access.
        "403":
          description: Request is restricted for access to Disability Insurance Policy.
        "404":
          description: Disability Insurance Policy not found.
      tags:
        - DisabilityInsurancePolicies
  "/api/DisabilityInsurancePolicies/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Disability Insurance Policy tied
        to a Fact Finder.<br />\r

        \              Purpose: Allows for removal of a Disability
        Insurance Policy from a Fact Finder."
      operationId: DisabilityInsurancePolicies_DeleteById
      parameters:
        - description: The Disability Insurance Policy ID used to identify which Disability
            Insurance Policy to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Disability Insurance Policy data access.
        "403":
          description: Request is restricted for access to Disability Insurance Policy.
        "404":
          description: Disability Insurance Policy not found.
      tags:
        - DisabilityInsurancePolicies
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Disability Insurance
        Policy for the specified Disability Insurance Policy ID.<br />\r

        \              Purpose: Provides access to the Disability
        Insurance Policy including description and policy type."
      operationId: DisabilityInsurancePolicies_GetById
      parameters:
        - description: The ID of the Disability Insurance Policy used to retreive the
            Disability Insurance Policy
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Disability Insurance Policy data access.
        "403":
          description: Request is restricted for access to Disability Insurance Policy.
        "404":
          description: Disability Insurance Policy not found.
      tags:
        - DisabilityInsurancePolicies
    put:
      deprecated: false
      description: "Description: The operation updates a Disability Insurance Policy.<br
        />\r

        \              Purpose: Allows for complete replacement of a
        Disability Insurance Policy on a Fact Finder."
      operationId: DisabilityInsurancePolicies_PutByIdModel
      parameters:
        - description: The existing Disability Insurance Policy ID used to identify which
            Disability Insurance Policy to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisabilityInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/DisabilityInsurancePolicyModel"
        description: The Disability Insurance Policy to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Disability Insurance Policy data access.
        "403":
          description: Request is restricted for access to Disability Insurance Policy.
        "404":
          description: Disability Insurance Policy not found.
      tags:
        - DisabilityInsurancePolicies
  /api/DisabilityInsurancePolicyTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Disability Insurance Policy
        Types for the specified country.<br />\r

        \              Purpose: Provides access to the Disability
        Insurance Policy Types including id and type description."
      operationId: DisabilityInsurancePolicyTypes_GetByCountry
      parameters:
        - description: The country used to filter Disability Insurance Policy Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Disability Insurance Policy Type not found.
      tags:
        - DisabilityInsurancePolicyTypes
  "/api/DisabilityInsurancePolicyTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Disability Insurance Policy
        Types for the specified id.<br />\r

        \              Purpose: Provides access to the Disability
        Insurance Policy Types including id and type description."
      operationId: DisabilityInsurancePolicyTypes_GetById
      parameters:
        - description: The ID of Disability Insurance Policy Type used to retreive the
            Disability Insurance Policy Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DisabilityInsurancePolicyTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Disability Insurance Policy Type not found.
      tags:
        - DisabilityInsurancePolicyTypes
  /api/EducationGoals:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Education Goals for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Education Goals
        including description and projected cost."
      operationId: EducationGoals_GetEducationGoalsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Education Goals
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationGoalsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationGoalsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal data access.
        "403":
          description: Request is restricted for access to Education Goal.
        "404":
          description: Education Goal not found.
      tags:
        - EducationGoals
    post:
      deprecated: false
      description: "Description: The operation creates an Education Goal.<br />\r

        \              Purpose: Allows for creation of Education Goals
        on a Fact Finder."
      operationId: EducationGoals_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EducationGoalModel"
          text/json:
            schema:
              $ref: "#/components/schemas/EducationGoalModel"
        description: The Education Goal to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal data access.
        "403":
          description: Request is restricted for access to Education Goal.
        "404":
          description: Education Goal not found.
      tags:
        - EducationGoals
  "/api/EducationGoals/{educationGoalId}/Expenses":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Education Goal Expenses for
        the specified Education Goal ID.<br />\r

        \              Purpose: Provides access to the Education Goal
        Expenses including description and annual cost."
      operationId: EducationGoals_GetEducationExpensesByEducationGoalIdByEducationgoalid
      parameters:
        - description: The ID of the Education Goal used to retrieve Education Goal Expenses
          in: path
          name: educationGoalId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationExpensesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationExpensesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal Expense data access.
        "403":
          description: Request is restricted for access to Education Goal Expense.
        "404":
          description: Education Goal Expense not found.
      tags:
        - EducationGoals
    post:
      deprecated: false
      description: "Description: The operation creates an Education Goal Expense.<br />\r

        \              Purpose: Allows for creation of Education Goal
        Expenses on a Fact Finder."
      operationId: EducationGoals_PostByEducationgoalidModel
      parameters:
        - description: The Education Goal ID used to locate the Goal to add the expense to
          in: path
          name: educationGoalId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/EducationExpenseModel"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal Expense data access.
        "403":
          description: Request is restricted for access to Education Goal Expense.
        "404":
          description: Education Goal Expense not found.
      tags:
        - EducationGoals
  "/api/EducationGoals/{educationGoalId}/Expenses/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes an Education Goal Expense tied to a
        Fact Finder.<br />\r

        \              Purpose: Allows for removal of an Education Goal
        Expense from a Fact Finder."
      operationId: EducationGoals_DeleteByEducationgoalidId
      parameters:
        - description: The Education Goal ID used to locate the Goal to delete the Expense
            under
          in: path
          name: educationGoalId
          required: true
          schema:
            type: integer
            format: int32
        - description: The Education Goal Expense ID used to identify which Education Goal
            Expense to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal Expense data access.
        "403":
          description: Request is restricted for access to Education Goal Expense.
        "404":
          description: Education Goal Expense not found.
      tags:
        - EducationGoals
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Education Goal Expense
        for the specified Education Goal Expense ID.<br />\r

        \              Purpose: Provides access to the Education Goal
        Expense including description and annual cost."
      operationId: EducationGoals_GetEducationExpenseByEducationgoalidId
      parameters:
        - description: The ID of the Education Goal used to retrieve Education Goal Expenses
          in: path
          name: educationGoalId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Education Goal Expense used to retreive the Education
            Goal Expense
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal Expense data access.
        "403":
          description: Request is restricted for access to Education Goal Expense.
        "404":
          description: Education Goal Expense not found.
      tags:
        - EducationGoals
    put:
      deprecated: false
      description: "Description: The operation updates an Education Goal Expense.<br />\r

        \              Purpose: Allows for complete replacement of an
        Education Goal Expense on a Fact Finder."
      operationId: EducationGoals_PutByEducationgoalidIdModel
      parameters:
        - description: The Education Goal ID used to locate the Goal to update the Expense
            under
          in: path
          name: educationGoalId
          required: true
          schema:
            type: integer
            format: int32
        - description: The existing Education Goal Expense ID used to identify which
            Education Goal Expense to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/EducationExpenseModel"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal Expense data access.
        "403":
          description: Request is restricted for access to Education Goal Expense.
        "404":
          description: Education Goal Expense not found.
      tags:
        - EducationGoals
  "/api/EducationGoals/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes an Education Goal tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of an Education Goal
        from a Fact Finder."
      operationId: EducationGoals_DeleteById
      parameters:
        - description: The Education Goal ID used to identify which Education Goal to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal data access.
        "403":
          description: Request is restricted for access to Education Goal.
        "404":
          description: Education Goal not found.
      tags:
        - EducationGoals
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Education Goal for the
        specified Education Goal ID.<br />\r

        \              Purpose: Provides access to the Education Goal
        including description and projected cost."
      operationId: EducationGoals_GetById
      parameters:
        - description: The ID of the Education Goal used to retreive the Education Goal
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal data access.
        "403":
          description: Request is restricted for access to Education Goal.
        "404":
          description: Education Goal not found.
      tags:
        - EducationGoals
    put:
      deprecated: false
      description: "Description: The operation creates an Education Goal Expense.<br />\r

        \              Purpose: Allows for creation of Education Goal
        Expenses on a Fact Finder."
      operationId: EducationGoals_PutByIdModel
      parameters:
        - description: The Education Goal ID used to locate the Goal to add the Expense to
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EducationGoalModel"
          text/json:
            schema:
              $ref: "#/components/schemas/EducationGoalModel"
        description: The Education Goal Expense to be added to the Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EducationGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/EducationGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Education Goal Expense data access.
        "403":
          description: Request is restricted for access to Education Goal Expense.
        "404":
          description: Education Goal Expense not found.
      tags:
        - EducationGoals
  /api/ExpenseTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Expense Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Expense Types
        including id and type description."
      operationId: ExpenseTypes_GetByCountry
      parameters:
        - description: The country used to filter Expense Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ExpenseTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Expense Type not found.
      tags:
        - ExpenseTypes
  "/api/ExpenseTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Expense Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Expense Types
        including id and type description."
      operationId: ExpenseTypes_GetById
      parameters:
        - description: The ID of Expense Type used to retreive the Expense Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ExpenseTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Expense Type not found.
      tags:
        - ExpenseTypes
  /api/Expenses:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Expenses for the specified
        Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Expenses
        including description and Expense type."
      operationId: Expenses_GetExpensesByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Expenses
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpensesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ExpensesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Expense data access.
        "403":
          description: Request is restricted for access to Expense.
        "404":
          description: Expense not found.
      tags:
        - Expenses
    post:
      deprecated: false
      description: "Description: The operation creates an Expense.<br />\r

        \              Purpose: Allows for creation of Expenses on a
        Fact Finder."
      operationId: Expenses_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseModel"
          text/json:
            schema:
              $ref: "#/components/schemas/ExpenseModel"
        description: The Expense to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Expense data access.
        "403":
          description: Request is restricted for access to Expense.
        "404":
          description: Expense not found.
      tags:
        - Expenses
  "/api/Expenses/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes an Expense tied to a Fact Finder.<br
        />\r

        \              Purpose: Allows for removal of an Expense from a
        Fact Finder."
      operationId: Expenses_DeleteById
      parameters:
        - description: The Expense ID used to identify which Expense to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Expense data access.
        "403":
          description: Request is restricted for access to Expense.
        "404":
          description: Expense not found.
      tags:
        - Expenses
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Expense for the
        specified Expense ID.<br />\r

        \              Purpose: Provides access to the Expense including
        description and Expense type."
      operationId: Expenses_GetById
      parameters:
        - description: The ID of the Expense used to retreive the Expense
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Expense data access.
        "403":
          description: Request is restricted for access to Expense.
        "404":
          description: Expense not found.
      tags:
        - Expenses
    put:
      deprecated: false
      description: "Description: The operation updates an Expense.<br />\r

        \              Purpose: Allows for complete replacement of an
        Expense on a Fact Finder. <br /><br />\r

        \              Note: Expense type cannot be changed for expenses
        prepopulated from NaviPlan."
      operationId: Expenses_PutByIdModel
      parameters:
        - description: The existing Expense ID used to identify which Expense to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseModel"
          text/json:
            schema:
              $ref: "#/components/schemas/ExpenseModel"
        description: The Expense to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Expense data access.
        "403":
          description: Request is restricted for access to Expense.
        "404":
          description: Expense not found.
      tags:
        - Expenses
  /api/FactFinders:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Fact Finders for the
        specified householdId, \r

        \              or if null, all households associated with the
        user.<br />\r

        \              Purpose: Provides access to the Fact Finder
        including status."
      operationId: FactFinders_GetByHouseholdIdByHouseholdid
      parameters:
        - description: The ID of the household used to retrieve the fact finders. If not
            set, uses all households associated with the user
          in: query
          name: householdId
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FactFinderWithIdModel"
                type: array
            text/json:
              schema:
                items:
                  $ref: "#/components/schemas/FactFinderWithIdModel"
                type: array
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
      tags:
        - FactFinders
    post:
      deprecated: false
      description: "Description: The operation creates a completely empty draft Fact
        Finder.<br />\r

        \              Requirements: A householdId and list of modules
        must be provided.<br />\r

        \              Purpose: Stages a Fact Finder for population."
      operationId: FactFinders_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactFinderEntityModel"
          text/json:
            schema:
              $ref: "#/components/schemas/FactFinderEntityModel"
        description: The Household the Fact Finder will belong to and the modules that are
          available.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
        "409":
          description: The request cannot be completed.
      tags:
        - FactFinders
  /api/FactFinders/Populate:
    post:
      deprecated: false
      description: "Description: The operation creates a new Populated Fact Finder.<br />\r

        \              Requirements: A householdId and list of modules
        must be provided.<br />\r

        \              Purpose: Creation of a Fact Finder."
      operationId: FactFinders_PostPopulateByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactFinderPopulatableEntityModel"
          text/json:
            schema:
              $ref: "#/components/schemas/FactFinderPopulatableEntityModel"
        description: "The Household the Fact Finder will belong to and the modules that are
          available. \r

          \            Optional PlanId to populate from"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
        "409":
          description: The request cannot be completed.
      tags:
        - FactFinders
  "/api/FactFinders/{factFinderId}/Modules":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Fact Finder Modules for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Fact Finder
        Modules including description and policy type."
      operationId: FactFinderModules_GetByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Fact Finder Modules
          in: path
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderModulesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderModulesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder Module data access.
        "404":
          description: Fact Finder Module not found.
      tags:
        - FactFinderModules
  "/api/FactFinders/{factFinderId}/Modules/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Fact Finder Module for
        the specified Fact Finder Module ID.<br />\r

        \              Purpose: Provides access to the Fact Finder
        Module including description and policy type."
      operationId: FactFinderModules_GetByFactfinderidId
      parameters:
        - description: The ID of the Fact Finder used to retrieve Fact Finder Module
          in: path
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Fact Finder Module used to retreive the Fact Finder
            Module
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderModuleWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderModuleWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder Module data access.
        "404":
          description: Fact Finder Module not found.
      tags:
        - FactFinderModules
    put:
      deprecated: false
      description: "Description: The operation updates a Fact Finder Module.<br />\r

        \              Purpose: Allows for complete replacement of a
        Fact Finder Module on a Fact Finder."
      operationId: FactFinderModules_PutByModelFactfinderidId
      parameters:
        - description: The ID of the Fact Finder used to identify the Fact Finder Module to
            update
          in: path
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
        - description: The existing Fact Finder Module ID used to identify which Fact
            Finder Module to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactFinderModuleModel"
          text/json:
            schema:
              $ref: "#/components/schemas/FactFinderModuleModel"
        description: The Fact Finder Module to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderModuleWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderModuleWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder Module data access.
        "404":
          description: Fact Finder Module not found.
      tags:
        - FactFinderModules
  "/api/FactFinders/{factFinderId}/Snapshots":
    get:
      deprecated: false
      description: "Description: The operation retrieves Snapshots of a Fact Finder.<br
        />\r

        \              Purpose: Allows for advisors to view all
        Snapshots taken of a Fact Finder."
      operationId: FactFinders_GetSnapshotsByFactfinderid
      parameters:
        - description: The ID of the Fact Finder to retrieve Snapshots for
          in: path
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderSnapshotsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderSnapshotsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
      tags:
        - FactFinders
    post:
      deprecated: false
      description: "Description: The operation creates a Snapshot of a Fact Finder.<br />\r

        \              Purpose: Allows for advisors to compare the
        current fact finder to a snapshot prior to acceptance."
      operationId: FactFinders_PostSnapshotsByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to create the Fact Finder Snapshot
          in: path
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderSnapshotWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderSnapshotWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
      tags:
        - FactFinders
  "/api/FactFinders/{id}":
    delete:
      deprecated: false
      description: "Description: This operation deletes a single Fact Finder for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Deletes the fact finder."
      operationId: FactFinders_DeleteById
      parameters:
        - description: The ID of the Fact Finder to be deleted
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
      tags:
        - FactFinders
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Fact Finder for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Fact Finder
        including status."
      operationId: FactFinders_GetById
      parameters:
        - description: The ID of the Fact Finder used to retrieve the Fact Finder
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
      tags:
        - FactFinders
    put:
      deprecated: false
      description: "Description: The operation updates a Fact Finder.<br />\r

        \              Purpose: Allows for the updating of a Fact
        Finder."
      operationId: FactFinders_PutByIdModel
      parameters:
        - description: The existing Fact Finder ID used to identify which Fact Finder to
            update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactFinderModel"
          text/json:
            schema:
              $ref: "#/components/schemas/FactFinderModel"
        description: The Fact Finder to be updated
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
      tags:
        - FactFinders
  "/api/FactFinders/{id}/Populate":
    put:
      deprecated: false
      description: "Description: The operation populates a fact finder.<br />\r

        \              Purpose: Allows for the population of a Fact
        Finder based on a NaviPlan plan or client. This\r

        \                       operation cannot be performed on a Fact
        Finder more than once."
      operationId: FactFinders_PutPopulateFactFinderByIdModel
      parameters:
        - description: The existing Fact Finder ID used to identify which Fact Finder to
            populate.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactFinderPopulationModel"
          text/json:
            schema:
              $ref: "#/components/schemas/FactFinderPopulationModel"
        description: The plan to populate a fact finder from. If not provided, the client
          id will be inferred.
        required: true
      responses:
        "200":
          description: Fact Finder was successfully populated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FactFinderWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Fact Finder data access.
        "403":
          description: Request is restricted for access to Fact Finder.
        "404":
          description: Fact Finder not found.
        "409":
          description: Fact Finder already populated.
      tags:
        - FactFinders
  /api/FilingStatusTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Filing Status Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Filing Status
        Types including id and type description."
      operationId: FilingStatusTypes_GetByCountry
      parameters:
        - description: The country used to filter Filing Status Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilingStatusTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FilingStatusTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Filing Status Type not found.
      tags:
        - FilingStatusTypes
  "/api/FilingStatusTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Filing Status Type for the
        specified id.<br />\r

        \              Purpose: Provides access to the Filing Status
        Types including id and type description."
      operationId: FilingStatusTypes_GetById
      parameters:
        - description: The ID of Filing Status Type used to retreive the Filing Status Type
            information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilingStatusTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FilingStatusTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Filing Status Type not found.
      tags:
        - FilingStatusTypes
  /api/FrequencyTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Frequency Types for the
        specified country and entity.<br />\r

        \              Purpose: Provides access to the Frequency Types
        including id and type description."
      operationId: FrequencyTypes_GetByEntityCountry
      parameters:
        - description: The entity used to filter Frequency Types
          in: query
          name: entity
          required: true
          schema:
            type: string
            enum:
              - CriticalIllnessInsurancePolicies
              - DisabilityInsurancePoliciesPremium
              - DisabilityInsurancePoliciesBenefit
              - Expenses
              - Liabilities
              - LifeInsurancePolicies
              - LongTermCareInsurancePoliciesBenefit
              - LongTermCareInsurancePoliciesPremium
              - RealEstateAssets
              - RetirementExpenses
              - SavingsStrategies
        - description: The country used to filter Frequency Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrequencyTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FrequencyTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Frequency Type not found.
      tags:
        - FrequencyTypes
  "/api/FrequencyTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Frequency Type for the
        specified id.<br />\r

        \              Purpose: Provides access to the Frequency Types
        including id and type description."
      operationId: FrequencyTypes_GetById
      parameters:
        - description: The ID of Frequency Type used to retreive the Frequency Type
            information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrequencyTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/FrequencyTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Frequency Type not found.
      tags:
        - FrequencyTypes
  /api/IncomeTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Income Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Income Types
        including id and type description."
      operationId: IncomeTypes_GetByCountry
      parameters:
        - description: The country used to filter Income Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomeTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Income Type not found.
      tags:
        - IncomeTypes
  "/api/IncomeTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Income Type for the specified
        id.<br />\r

        \              Purpose: Provides access to the Income Types
        including id and type description."
      operationId: IncomeTypes_GetById
      parameters:
        - description: The ID of Income Type used to retreive the Income Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomeTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Income Type not found.
      tags:
        - IncomeTypes
  /api/Incomes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Incomes for the specified
        Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Incomes including
        annual amount and start date."
      operationId: Incomes_GetIncomesByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Incomes
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Income data access.
        "403":
          description: Request is restricted for access to Income.
        "404":
          description: Income not found.
      tags:
        - Incomes
    post:
      deprecated: false
      description: "Description: The operation creates an Income.<br />\r

        \              Purpose: Allows for creation of Incomes on a Fact
        Finder."
      operationId: Incomes_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomeModel"
          text/json:
            schema:
              $ref: "#/components/schemas/IncomeModel"
        description: The Income to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomeWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Income data access.
        "403":
          description: Request is restricted for access to Income.
        "404":
          description: Income not found.
      tags:
        - Incomes
  "/api/Incomes/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes an Income tied to a Fact Finder.<br
        />\r

        \              Purpose: Allows for removal of an Income from a
        Fact Finder."
      operationId: Incomes_DeleteById
      parameters:
        - description: The Income ID used to identify which Income to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Income data access.
        "403":
          description: Request is restricted for access to Income.
        "404":
          description: Income not found.
      tags:
        - Incomes
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Income for the specified
        Income ID.<br />\r

        \              Purpose: Provides access to the Income including
        annual amount and start date."
      operationId: Incomes_GetById
      parameters:
        - description: The ID of the Income used to retreive the Income
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomeWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Income data access.
        "403":
          description: Request is restricted for access to Income.
        "404":
          description: Income not found.
      tags:
        - Incomes
    put:
      deprecated: false
      description: "Description: The operation updates an Income.<br />\r

        \              Purpose: Allows for complete replacement of an
        Income on a Fact Finder."
      operationId: Incomes_PutByIdModel
      parameters:
        - description: The existing Income ID used to identify which Income to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncomeModel"
          text/json:
            schema:
              $ref: "#/components/schemas/IncomeModel"
        description: The Income to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomeWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Income data access.
        "403":
          description: Request is restricted for access to Income.
        "404":
          description: Income not found.
      tags:
        - Incomes
  /api/Liabilities:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Liabilities for the specified
        Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Liabilities
        including owner and type."
      operationId: Liabilities_GetLiabilitiesByFactFinderIdByFactfinderidExternalsourceid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Liabilities
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
        - description: The external source ID used to filter Liabilities
          in: query
          name: externalSourceId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilitiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilitiesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Liability data access.
        "403":
          description: Request is restricted for access to Liability.
        "404":
          description: Liability not found.
      tags:
        - Liabilities
    post:
      deprecated: false
      description: "Description: The operation creates a Liability.<br />\r

        \              Purpose: Allows for creation of Liabilities on a
        Fact Finder."
      operationId: Liabilities_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LiabilityModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LiabilityModel"
        description: The Liability to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilityWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilityWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Liability data access.
        "403":
          description: Request is restricted for access to Liability.
        "404":
          description: Liability not found.
      tags:
        - Liabilities
  "/api/Liabilities/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Liability tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of a Liability from a
        Fact Finder."
      operationId: Liabilities_DeleteById
      parameters:
        - description: The Liability ID used to identify which Liability to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Liability data access.
        "403":
          description: Request is restricted for access to Liability.
        "404":
          description: Liability not found.
      tags:
        - Liabilities
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Liability for the
        specified Liability ID.<br />\r

        \              Purpose: Provides access to the Liability
        including owner and type."
      operationId: Liabilities_GetById
      parameters:
        - description: The ID of the Liability used to retreive the Liability
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilityWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilityWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Liability data access.
        "403":
          description: Request is restricted for access to Liability.
        "404":
          description: Liability not found.
      tags:
        - Liabilities
    put:
      deprecated: false
      description: "Description: The operation updates a Liability.<br />\r

        \              Purpose: Allows for complete replacement of a
        Liability on a Fact Finder."
      operationId: Liabilities_PutByIdModel
      parameters:
        - description: The existing Liability ID used to identify which Liability to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LiabilityModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LiabilityModel"
        description: The Liability to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilityWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilityWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Liability data access.
        "403":
          description: Request is restricted for access to Liability.
        "404":
          description: Liability not found.
      tags:
        - Liabilities
  /api/LiabilityTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Liability Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Liability Types
        including id and type description."
      operationId: LiabilityTypes_GetByCountry
      parameters:
        - description: The country used to filter Liability Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilityTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilityTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Liability Type not found.
      tags:
        - LiabilityTypes
  "/api/LiabilityTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Liability Type for the
        specified id.<br />\r

        \              Purpose: Provides access to the Liability Types
        including id and type description."
      operationId: LiabilityTypes_GetById
      parameters:
        - description: The ID of Liability Type used to retreive the Liability Type
            information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilityTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilityTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Liability Type not found.
      tags:
        - LiabilityTypes
  /api/LifeInsurancePolicies:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Life Insurance Policies for
        the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Life Insurance
        Policies including description and policy type."
      operationId: LifeInsurancePolicies_GetLifeInsurancePoliciesByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Life Insurance Policies
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePoliciesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePoliciesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
    post:
      deprecated: false
      description: "Description: The operation creates a Life Insurance Policy.<br />\r

        \              Purpose: Allows for creation of Life Insurance
        Policies on a Fact Finder."
      operationId: LifeInsurancePolicies_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LifeInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LifeInsurancePolicyModel"
        description: The Life Insurance Policy to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
  "/api/LifeInsurancePolicies/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Life Insurance Policy tied to a
        Fact Finder.<br />\r

        \              Purpose: Allows for removal of a Life Insurance
        Policy and associated subaccounts from a Fact Finder."
      operationId: LifeInsurancePolicies_DeleteById
      parameters:
        - description: The Life Insurance Policy ID used to identify which Life Insurance
            Policy to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Life Insurance Policy
        for the specified Life Insurance Policy ID.<br />\r

        \              Purpose: Provides access to the Life Insurance
        Policy including description and policy type."
      operationId: LifeInsurancePolicies_GetById
      parameters:
        - description: The ID of the Life Insurance Policy used to retreive the Life
            Insurance Policy
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
    put:
      deprecated: false
      description: "Description: The operation updates a Life Insurance Policy, deletes
        associated sub-accounts if the policy type changes.<br />\r

        \              Purpose: Allows for complete replacement of a
        Life Insurance Policy on a Fact Finder."
      operationId: LifeInsurancePolicies_PutByIdModel
      parameters:
        - description: The existing Life Insurance Policy ID used to identify which Life
            Insurance Policy to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LifeInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LifeInsurancePolicyModel"
        description: The Life Insurance Policy to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
  "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts":
    get:
      deprecated: false
      description: "Description: Get all the subaccounts for an existing Life Insurance
        Policy.<br />\r

        \              Purpose: Provides access to all the Life
        Insurance Policy subaccounts."
      operationId: LifeInsurancePolicies_GetSubaccountsByLifeinsurancepolicyid
      parameters:
        - description: The ID of the Life Insurance Policy used to retrieve the Life
            Insurance Policy Subaccounts.
          in: path
          name: lifeInsurancePolicyId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
    post:
      deprecated: false
      description: "Description: Creates a subaccount and adds it to an existing Life
        Insurance Policy.<br />\r

        \              Purpose: Allows for creation of subaccount on a
        Life Insurance Policy."
      operationId: LifeInsurancePolicies_PostSubaccountByLifeinsurancepolicyidModel
      parameters:
        - description: The ID of the Life Insurance Policy used to create the Life
            Insurance Policy Subaccount.
          in: path
          name: lifeInsurancePolicyId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/LifeInsurancePolicySubaccountModel"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - LifeInsurancePolicies
  "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}":
    delete:
      deprecated: false
      description: "Description: Deletes an existing Life Insurance Policy Subaccount for
        an existing Life Insurance Policy.<br />\r

        \              Purpose: Allows for removal of a subaccount from
        a Life Insurance Policy."
      operationId: LifeInsurancePolicies_DeleteSubaccountByLifeinsurancepolicyidId
      parameters:
        - description: The ID of the Life Insurance Policy used to delete the Life
            Insurance Policy Subaccount.
          in: path
          name: lifeInsurancePolicyId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Life Insurance Policy Subaccount.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy Subaccount not found.
      tags:
        - LifeInsurancePolicies
    get:
      deprecated: false
      description: "Description: Get a specific subaccount for an existing Life Insurance
        Policy.<br />\r

        \              Purpose: Provides access to the Life Insurance
        Policy subaccount."
      operationId: LifeInsurancePolicies_GetSubaccountByLifeinsurancepolicyidId
      parameters:
        - description: The ID of the Life Insurance Policy used to retrieve the Life
            Insurance Policy Subaccount.
          in: path
          name: lifeInsurancePolicyId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Life Insurance Policy Subaccount.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy Subaccount not found.
      tags:
        - LifeInsurancePolicies
    put:
      deprecated: false
      description: "Description: Updates an existing Life Insurance Policy Subaccount for
        an existing Life Insurance Policy.<br />\r

        \              Purpose: Allows for complete replacement of a
        subaccount on a Life Insurance Policy."
      operationId: LifeInsurancePolicies_PutSubaccountByLifeinsurancepolicyidIdModel
      parameters:
        - description: The ID of the Life Insurance Policy used to update the Life
            Insurance Policy Subaccount.
          in: path
          name: lifeInsurancePolicyId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Life Insurance Policy Subaccount.
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        $ref: "#/components/requestBodies/LifeInsurancePolicySubaccountModel"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicySubaccountModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy Subaccount not found.
      tags:
        - LifeInsurancePolicies
  /api/LifeInsurancePolicyTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Life Insurance Policy Types
        for the specified country.<br />\r

        \              Purpose: Provides access to the Life Insurance
        Policy Types including id and type description."
      operationId: LifeInsurancePolicyTypes_GetByCountry
      parameters:
        - description: The country used to filter Life Insurance Policy Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Life Insurance Policy Type not found.
      tags:
        - LifeInsurancePolicyTypes
  "/api/LifeInsurancePolicyTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Life Insurance Policy Type
        for the specified id.<br />\r

        \              Purpose: Provides access to the Life Insurance
        Policy Types including id and type description."
      operationId: LifeInsurancePolicyTypes_GetById
      parameters:
        - description: The ID of Life Insurance Policy Type used to retreive the Life
            Insurance Policy Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePolicyTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Life Insurance Policy Type not found.
      tags:
        - LifeInsurancePolicyTypes
  /api/LifestyleAssetTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Lifestyle Asset Types for the
        specified country.<br />\r

        \              Purpose: Provides access to the Lifestyle Asset
        Types including id and type description."
      operationId: LifestyleAssetTypes_GetByCountry
      parameters:
        - description: The country used to filter Lifestyle Asset Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Lifestyle Asset Type not found.
      tags:
        - LifestyleAssetTypes
  "/api/LifestyleAssetTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Lifestyle Asset Type for the
        specified id.<br />\r

        \              Purpose: Provides access to the Lifestyle Asset
        Types including id and type description."
      operationId: LifestyleAssetTypes_GetById
      parameters:
        - description: The ID of Lifestyle Asset Type used to retreive the Lifestyle Asset
            Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Lifestyle Asset Type not found.
      tags:
        - LifestyleAssetTypes
  /api/LifestyleAssets:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Lifestyle Assets for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Lifestyle Assets
        including description and market value."
      operationId: LifestyleAssets_GetLifestyleAssetsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Lifestyle Assets
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Lifestyle Asset data access.
        "403":
          description: Request is restricted for access to Lifestyle Asset.
        "404":
          description: Lifestyle Asset not found.
      tags:
        - LifestyleAssets
    post:
      deprecated: false
      description: "Description: The operation creates a Lifestyle Asset.<br />\r

        \              Purpose: Allows for creation of Lifestyle Assets
        on a Fact Finder."
      operationId: LifestyleAssets_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LifestyleAssetModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LifestyleAssetModel"
        description: The Lifestyle Asset to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Lifestyle Asset data access.
        "403":
          description: Request is restricted for access to Lifestyle Asset.
        "404":
          description: Lifestyle Asset not found.
      tags:
        - LifestyleAssets
  "/api/LifestyleAssets/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Lifestyle Asset tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of a Lifestyle Asset
        from a Fact Finder."
      operationId: LifestyleAssets_DeleteById
      parameters:
        - description: The Lifestyle Asset ID used to identify which Lifestyle Asset to
            remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Lifestyle Asset data access.
        "403":
          description: Request is restricted for access to Lifestyle Asset.
        "404":
          description: Lifestyle Asset not found.
      tags:
        - LifestyleAssets
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Lifestyle Asset for the
        specified Lifestyle Asset ID.<br />\r

        \              Purpose: Provides access to the Lifestyle Asset
        including description and market value."
      operationId: LifestyleAssets_GetById
      parameters:
        - description: The ID of the Lifestyle Asset used to retreive the Lifestyle Asset
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Lifestyle Asset data access.
        "403":
          description: Request is restricted for access to Lifestyle Asset.
        "404":
          description: Lifestyle Asset not found.
      tags:
        - LifestyleAssets
    put:
      deprecated: false
      description: "Description: The operation updates a Lifestyle Asset.<br />\r

        \              Purpose: Allows for complete replacement of a
        Lifestyle Asset on a Fact Finder."
      operationId: LifestyleAssets_PutByIdModel
      parameters:
        - description: The existing Lifestyle Asset ID used to identify which Lifestyle
            Asset to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LifestyleAssetModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LifestyleAssetModel"
        description: The Lifestyle Asset to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LifestyleAssetWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Lifestyle Asset data access.
        "403":
          description: Request is restricted for access to Lifestyle Asset.
        "404":
          description: Lifestyle Asset not found.
      tags:
        - LifestyleAssets
  /api/LongTermCareInsurancePolicies:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Long Term Care Insurance
        Policies for the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Long Term Care
        Insurance Policies including description and premium."
      operationId: LongTermCareInsurancePolicies_GetLongTermCareInsurancePoliciesByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Long Term Care Insurance
            Policies
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePoliciesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePoliciesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Long Term Care Insurance Policy data access.
        "403":
          description: Request is restricted for access to Long Term Care Insurance Policy.
        "404":
          description: Long Term Care Insurance Policy not found.
      tags:
        - LongTermCareInsurancePolicies
    post:
      deprecated: false
      description: "Description: The operation creates a Long Term Care Insurance
        Policy.<br />\r

        \              Purpose: Allows for creation of Long Term Care
        Insurance Policies on a Fact Finder."
      operationId: LongTermCareInsurancePolicies_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongTermCareInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LongTermCareInsurancePolicyModel"
        description: The Long Term Care Insurance Policy to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Long Term Care Insurance Policy data access.
        "403":
          description: Request is restricted for access to Long Term Care Insurance Policy.
        "404":
          description: Long Term Care Insurance Policy not found.
      tags:
        - LongTermCareInsurancePolicies
  "/api/LongTermCareInsurancePolicies/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Long Term Care Insurance Policy
        tied to a Fact Finder.<br />\r

        \              Purpose: Allows for removal of a Long Term Care
        Insurance Policy from a Fact Finder."
      operationId: LongTermCareInsurancePolicies_DeleteById
      parameters:
        - description: The Long Term Care Insurance Policy ID used to identify which Long
            Term Care Insurance Policy to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Long Term Care Insurance Policy data access.
        "403":
          description: Request is restricted for access to Long Term Care Insurance Policy.
        "404":
          description: Long Term Care Insurance Policy not found.
      tags:
        - LongTermCareInsurancePolicies
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Long Term Care Insurance
        Policy for the specified Long Term Care Insurance Policy ID.<br />\r

        \              Purpose: Provides access to the Long Term Care
        Insurance Policy including description and premium."
      operationId: LongTermCareInsurancePolicies_GetById
      parameters:
        - description: The ID of the Long Term Care Insurance Policy used to retreive the
            Long Term Care Insurance Policy
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Long Term Care Insurance Policy data access.
        "403":
          description: Request is restricted for access to Long Term Care Insurance Policy.
        "404":
          description: Long Term Care Insurance Policy not found.
      tags:
        - LongTermCareInsurancePolicies
    put:
      deprecated: false
      description: "Description: The operation updates a Long Term Care Insurance
        Policy.<br />\r

        \              Purpose: Allows for complete replacement of a
        Long Term Care Insurance Policy on a Fact Finder."
      operationId: LongTermCareInsurancePolicies_PutByIdModel
      parameters:
        - description: The existing Long Term Care Insurance Policy ID used to identify
            which Long Term Care Insurance Policy to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongTermCareInsurancePolicyModel"
          text/json:
            schema:
              $ref: "#/components/schemas/LongTermCareInsurancePolicyModel"
        description: The Long Term Care Insurance Policy to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Long Term Care Insurance Policy data access.
        "403":
          description: Request is restricted for access to Long Term Care Insurance Policy.
        "404":
          description: Long Term Care Insurance Policy not found.
      tags:
        - LongTermCareInsurancePolicies
  /api/MajorPurchaseGoalTypes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Major Purchase Goal Types for
        the specified country.<br />\r

        \              Purpose: Provides access to the Major Purchase
        Goal Types including id and type description."
      operationId: MajorPurchaseGoalTypes_GetByCountry
      parameters:
        - description: The country used to filter Major Purchase Goal Types
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Major Purchase Goal Type not found.
      tags:
        - MajorPurchaseGoalTypes
  "/api/MajorPurchaseGoalTypes/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the Major Purchase Goal Type for
        the specified id.<br />\r

        \              Purpose: Provides access to the Major Purchase
        Goal Types including id and type description."
      operationId: MajorPurchaseGoalTypes_GetById
      parameters:
        - description: The ID of Major Purchase Goal Type used to retreive the Major
            Purchase Goal Type information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalTypeModel"
            text/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalTypeModel"
        "400":
          description: The request is invalid.
        "404":
          description: Major Purchase Goal Type not found.
      tags:
        - MajorPurchaseGoalTypes
  /api/MajorPurchaseGoals:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Major Purchases for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Major Purchases
        including description and amount."
      operationId: MajorPurchaseGoals_GetMajorPurchaseGoalsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Major Purchases
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Major Purchase data access.
        "403":
          description: Request is restricted for access to Major Purchase.
        "404":
          description: Major Purchase not found.
      tags:
        - MajorPurchaseGoals
    post:
      deprecated: false
      description: "Description: The operation creates a Major Purchase.<br />\r

        \              Purpose: Allows for creation of Major Purchases
        on a Fact Finder."
      operationId: MajorPurchaseGoals_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MajorPurchaseGoalModel"
          text/json:
            schema:
              $ref: "#/components/schemas/MajorPurchaseGoalModel"
        description: The Major Purchase to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Major Purchase data access.
        "403":
          description: Request is restricted for access to Major Purchase.
        "404":
          description: Major Purchase not found.
      tags:
        - MajorPurchaseGoals
  "/api/MajorPurchaseGoals/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Major Purchase tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of a Major Purchase
        from a Fact Finder."
      operationId: MajorPurchaseGoals_DeleteById
      parameters:
        - description: The Major Purchase ID used to identify which Major Purchase to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Major Purchase data access.
        "403":
          description: Request is restricted for access to Major Purchase.
        "404":
          description: Major Purchase not found.
      tags:
        - MajorPurchaseGoals
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Major Purchase for the
        specified Major Purchase ID.<br />\r

        \              Purpose: Provides access to the Major Purchase
        including description and amount."
      operationId: MajorPurchaseGoals_GetById
      parameters:
        - description: The ID of the Major Purchase used to retreive the Major Purchase
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Major Purchase data access.
        "403":
          description: Request is restricted for access to Major Purchase.
        "404":
          description: Major Purchase not found.
      tags:
        - MajorPurchaseGoals
    put:
      deprecated: false
      description: "Description: The operation updates a Major Purchase.<br />\r

        \              Purpose: Allows for complete replacement of a
        Major Purchase on a Fact Finder."
      operationId: MajorPurchaseGoals_PutByIdModel
      parameters:
        - description: The existing Major Purchase ID used to identify which Major Purchase
            to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MajorPurchaseGoalModel"
          text/json:
            schema:
              $ref: "#/components/schemas/MajorPurchaseGoalModel"
        description: The Major Purchase to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Major Purchase data access.
        "403":
          description: Request is restricted for access to Major Purchase.
        "404":
          description: Major Purchase not found.
      tags:
        - MajorPurchaseGoals
  /api/Presentation/Accounts:
    get:
      deprecated: false
      description: "Description: This operation retrieves all current Accounts for the
        specified Fact Finder ID, as well as\r

        \                           all of the holdings and savings
        strategies belonging to those accounts.<br />\r

        \              Purpose: Provides access to the Accounts in a
        Fact Finder as well as any sub-entities belonging to them."
      operationId: Presentation_GetAccountsByFactfinderidExternalsourceid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Accounts
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
        - description: The external ID used to filter Accounts
          in: query
          name: externalSourceId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsWithSubEntitiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/AccountsWithSubEntitiesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Account data access.
        "403":
          description: Request is restricted for access to Account.
        "404":
          description: Account not found.
      tags:
        - Presentation
  /api/Presentation/Demographics/Owners:
    get:
      deprecated: false
      description: "Description: This operation retrieves owner values for the fact finder
        based on demographics data\r

        \              Purpose: Provides the list of valid options for
        owner, student, beneficiary, etc."
      operationId: Presentation_GetDemographicOwnersByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve owners.
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OwnersModel"
            text/json:
              schema:
                $ref: "#/components/schemas/OwnersModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Demographic information data access.
        "403":
          description: Request is restricted for access to Demographic information.
        "404":
          description: Fact Finder not found.
      tags:
        - Presentation
  /api/Presentation/Demographics/Relationships:
    get:
      deprecated: false
      description: "Description: This operation retrieves all relationship types relevant
        to demographics.<br />\r

        \              Purpose: Provides a list of relationship types
        organized by whether or not they can be defined as children."
      operationId: Presentation_GetDemographicRelationships
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationshipTypesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RelationshipTypesModel"
        "400":
          description: The request is invalid.
        "404":
          description: Object not found.
      tags:
        - Presentation
  /api/Presentation/Incomes:
    get:
      deprecated: false
      description: "Description: This operation retrieves all current Incomes for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Incomes in a Fact
        Finder, filtered by Incomes that are current."
      operationId: Presentation_GetIncomesByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Incomes
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/IncomesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Income data access.
        "403":
          description: Request is restricted for access to Income.
        "404":
          description: Income not found.
      tags:
        - Presentation
  /api/Presentation/Liabilities:
    get:
      deprecated: false
      description: "Description: This operation retrieves all current Liabilities for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Liabilities in a
        Fact Finder, filtered by Liabilities that are current."
      operationId: Presentation_GetLiabilitiesByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Liabilities
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiabilitiesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/LiabilitiesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Liability data access.
        "403":
          description: Request is restricted for access to Liability.
        "404":
          description: Liability not found.
      tags:
        - Presentation
  /api/Presentation/LifeInsurancePolicies:
    get:
      deprecated: false
      description: "Description: This operation retrieves all life insurance policies,
        including subaccounts if available, for the specified Fact Finder ID.<br
        />\r

        \              Purpose: Provides access to the Life Insurance
        Policies in a Fact Finder."
      operationId: Presentation_GetLifeInsurancePoliciesByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Life Insurance Policies.
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePoliciesWithSubEntitiesMod\
                  el"
            text/json:
              schema:
                $ref: "#/components/schemas/LifeInsurancePoliciesWithSubEntitiesMod\
                  el"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Life Insurance Policy data access.
        "403":
          description: Request is restricted for access to Life Insurance Policy.
        "404":
          description: Life Insurance Policy not found.
      tags:
        - Presentation
  /api/Presentation/Pensions:
    get:
      deprecated: false
      description: "Description: This operation retrieves all future Defined Benefit
        Pensions for the specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Pensions in a
        Fact Finder, filtered by Pensions that are in the future."
      operationId: Presentation_GetPensionsByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Pensions.
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/DefinedBenefitPensionsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Defined Benefit Pension data access.
        "403":
          description: Request is restricted for access to Defined Benefit Pension.
        "404":
          description: Defined Benefit Pension not found.
      tags:
        - Presentation
  /api/RealEstateAssets:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Real Estate Assets for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Real Estate
        Assets including description and market value."
      operationId: RealEstateAssets_GetRealEstateAssetsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Real Estate Assets
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Real Estate Asset data access.
        "403":
          description: Request is restricted for access to Real Estate Asset.
        "404":
          description: Real Estate Asset not found.
      tags:
        - RealEstateAssets
    post:
      deprecated: false
      description: "Description: The operation creates a Real Estate Asset.<br />\r

        \              Purpose: Allows for creation of Real Estate
        Assets on a Fact Finder."
      operationId: RealEstateAssets_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RealEstateAssetModel"
          text/json:
            schema:
              $ref: "#/components/schemas/RealEstateAssetModel"
        description: The Real Estate Asset to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Real Estate Asset data access.
        "403":
          description: Request is restricted for access to Real Estate Asset.
        "404":
          description: Real Estate Asset not found.
      tags:
        - RealEstateAssets
  "/api/RealEstateAssets/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Real Estate Asset tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of a Real Estate
        Asset from a Fact Finder."
      operationId: RealEstateAssets_DeleteById
      parameters:
        - description: The Real Estate Asset ID used to identify which Real Estate Asset to
            remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Real Estate Asset data access.
        "403":
          description: Request is restricted for access to Real Estate Asset.
        "404":
          description: Real Estate Asset not found.
      tags:
        - RealEstateAssets
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Real Estate Asset for
        the specified Real Estate Asset ID.<br />\r

        \              Purpose: Provides access to the Real Estate Asset
        including description and market value."
      operationId: RealEstateAssets_GetById
      parameters:
        - description: The ID of the Real Estate Asset used to retreive the Real Estate
            Asset
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Real Estate Asset data access.
        "403":
          description: Request is restricted for access to Real Estate Asset.
        "404":
          description: Real Estate Asset not found.
      tags:
        - RealEstateAssets
    put:
      deprecated: false
      description: "Description: The operation updates a Real Estate Asset.<br />\r

        \              Purpose: Allows for complete replacement of a
        Real Estate Asset on a Fact Finder."
      operationId: RealEstateAssets_PutByIdModel
      parameters:
        - description: The existing Real Estate Asset ID used to identify which Real Estate
            Asset to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RealEstateAssetModel"
          text/json:
            schema:
              $ref: "#/components/schemas/RealEstateAssetModel"
        description: The Real Estate Asset to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RealEstateAssetWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Real Estate Asset data access.
        "403":
          description: Request is restricted for access to Real Estate Asset.
        "404":
          description: Real Estate Asset not found.
      tags:
        - RealEstateAssets
  /api/RetirementGoals:
    get:
      deprecated: false
      description: "Description: This operation retrieves all Retirement Goals for the
        specified Fact Finder ID.<br />\r

        \              Purpose: Provides access to the Retirement Goals
        including retirement date."
      operationId: RetirementGoals_GetRetirementGoalsByFactFinderIdByFactfinderid
      parameters:
        - description: The ID of the Fact Finder used to retrieve Retirement Goals
          in: query
          name: factFinderId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalsModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalsModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal data access.
        "403":
          description: Request is restricted for access to Retirement Goal.
        "404":
          description: Retirement Goal not found.
      tags:
        - RetirementGoals
    post:
      deprecated: false
      description: "Description: The operation creates a Retirement Goal.<br />\r

        \              Purpose: Allows for creation of Retirement Goals
        on a Fact Finder."
      operationId: RetirementGoals_PostByModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetirementGoalModel"
          text/json:
            schema:
              $ref: "#/components/schemas/RetirementGoalModel"
        description: The Retirement Goal to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal data access.
        "403":
          description: Request is restricted for access to Retirement Goal.
        "404":
          description: Retirement Goal not found.
      tags:
        - RetirementGoals
  "/api/RetirementGoals/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Retirement Goal tied to a Fact
        Finder.<br />\r

        \              Purpose: Allows for removal of a Retirement Goal
        from a Fact Finder."
      operationId: RetirementGoals_DeleteById
      parameters:
        - description: The Retirement Goal ID used to identify which Retirement Goal to
            remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal data access.
        "403":
          description: Request is restricted for access to Retirement Goal.
        "404":
          description: Retirement Goal not found.
      tags:
        - RetirementGoals
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Retirement Goal for the
        specified Retirement Goal ID.<br />\r

        \              Purpose: Provides access to the Retirement Goal
        including retirement date."
      operationId: RetirementGoals_GetById
      parameters:
        - description: The ID of the Retirement Goal used to retreive the Retirement Goal
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal data access.
        "403":
          description: Request is restricted for access to Retirement Goal.
        "404":
          description: Retirement Goal not found.
      tags:
        - RetirementGoals
    put:
      deprecated: false
      description: "Description: The operation updates a Retirement Goal.<br />\r

        \              Purpose: Allows for complete replacement of a
        Retirement Goal on a Fact Finder."
      operationId: RetirementGoals_PutByIdModel
      parameters:
        - description: The existing Retirement Goal ID used to identify which Retirement
            Goal to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetirementGoalModel"
          text/json:
            schema:
              $ref: "#/components/schemas/RetirementGoalModel"
        description: The Retirement Goal to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementGoalWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal data access.
        "403":
          description: Request is restricted for access to Retirement Goal.
        "404":
          description: Retirement Goal not found.
      tags:
        - RetirementGoals
  "/api/RetirementGoals/{retirementGoalId}/Expenses":
    get:
      deprecated: false
      description: "Description: This operation retrieves all Retirement Goal Expenses for
        the specified Retirement Goal ID.<br />\r

        \              Purpose: Provides access to the Retirement Goal
        Expenses including description and amount."
      operationId: RetirementGoals_GetRetirementExpensesByRetirementGoalIdByRetirementgoalid
      parameters:
        - description: The ID of the Retirement Goal used to retrieve Retirement Goal
            Expenses
          in: path
          name: retirementGoalId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementExpensesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementExpensesModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal Expense data access.
        "403":
          description: Request is restricted for access to Retirement Goal Expense.
        "404":
          description: Retirement Goal Expense not found.
      tags:
        - RetirementGoals
    post:
      deprecated: false
      description: "Description: The operation creates a Retirement Goal Expense.<br />\r

        \              Purpose: Allows for creation of Retirement Goal
        Expenses on a Fact Finder."
      operationId: RetirementGoals_PostByRetirementgoalidModel
      parameters:
        - description: The ID of the Retirement Goal to add the Retirement Goal Expense to
          in: path
          name: retirementGoalId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetirementExpenseModel"
          text/json:
            schema:
              $ref: "#/components/schemas/RetirementExpenseModel"
        description: The Retirement Goal Expense to be added to the Fact Finder
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal Expense data access.
        "403":
          description: Request is restricted for access to Retirement Goal Expense.
        "404":
          description: Retirement Goal Expense not found.
      tags:
        - RetirementGoals
  "/api/RetirementGoals/{retirementGoalId}/Expenses/{id}":
    delete:
      deprecated: false
      description: "Description: The operation removes a Retirement Goal Expense tied to a
        Fact Finder.<br />\r

        \              Purpose: Allows for removal of a Retirement Goal
        Expense from a Fact Finder."
      operationId: RetirementGoals_DeleteByRetirementgoalidId
      parameters:
        - description: The Retirement Goal ID used to locate the Goal to delete the
            Retirement Goal Expense under
          in: path
          name: retirementGoalId
          required: true
          schema:
            type: integer
            format: int32
        - description: The Retirement Goal Expense ID used to identify which Retirement
            Goal Expense to remove
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Deleted
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal Expense data access.
        "403":
          description: Request is restricted for access to Retirement Goal Expense.
        "404":
          description: Retirement Goal Expense not found.
      tags:
        - RetirementGoals
    get:
      deprecated: false
      description: "Description: This operation retrieves a single Retirement Goal Expense
        for the specified Retirement Goal Expense ID.<br />\r

        \              Purpose: Provides access to the Retirement Goal
        Expense including description and amount."
      operationId: RetirementGoals_GetRetirementExpenseByRetirementgoalidId
      parameters:
        - description: The ID of the Retirement Goal used to retrieve the Retirement Goal
            Expense
          in: path
          name: retirementGoalId
          required: true
          schema:
            type: integer
            format: int32
        - description: The ID of the Retirement Goal Expense used to retreive the
            Retirement Goal Expense
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal Expense data access.
        "403":
          description: Request is restricted for access to Retirement Goal Expense.
        "404":
          description: Retirement Goal Expense not found.
      tags:
        - RetirementGoals
    put:
      deprecated: false
      description: "Description: The operation updates a Retirement Goal Expense.<br />\r

        \              Purpose: Allows for complete replacement of a
        Retirement Goal Expense on a Fact Finder."
      operationId: RetirementGoals_PutByRetirementgoalidIdModel
      parameters:
        - description: The Retirement Goal ID used to locate the Goal to update the
            Retirement Goal Expense under
          in: path
          name: retirementGoalId
          required: true
          schema:
            type: integer
            format: int32
        - description: The existing Retirement Goal Expense ID used to identify which
            Retirement Goal Expense to update
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetirementExpenseModel"
          text/json:
            schema:
              $ref: "#/components/schemas/RetirementExpenseModel"
        description: The Retirement Goal Expense to be updated on a Fact Finder
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetirementExpenseWithIdModel"
            text/json:
              schema:
                $ref: "#/components/schemas/RetirementExpenseWithIdModel"
        "400":
          description: The request is invalid.
        "401":
          description: Unauthorized for Retirement Goal Expense data access.
        "403":
          description: Request is restricted for access to Retirement Goal Expense.
        "404":
          description: Retirement Goal Expense not found.
      tags:
        - RetirementGoals
  /api/ServiceInformation:
    get:
      deprecated: false
      description: "Description: This operation retrieves information statistics for the
        current service.<br />\r

        \              Purpose: Provides access to Service Information."
      operationId: FactFinderServiceInformation_Get
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInformationModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ServiceInformationModel"
        "404":
          description: Object not found.
      tags:
        - FactFinderServiceInformation
  /api/StatesProvinces:
    get:
      deprecated: false
      description: "Description: This operation retrieves all States and Provinces for the
        specified country.<br />\r

        \              Purpose: Provides access to the States and
        Provinces."
      operationId: StatesProvinces_GetByCountry
      parameters:
        - description: The country used to filter States and Provinces
          in: query
          name: country
          required: true
          schema:
            type: string
            enum:
              - UnitedStates
              - Canada
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatesProvincesModel"
            text/json:
              schema:
                $ref: "#/components/schemas/StatesProvincesModel"
        "400":
          description: The request is invalid.
        "404":
          description: State or Province not found.
      tags:
        - StatesProvinces
  "/api/StatesProvinces/{id}":
    get:
      deprecated: false
      description: "Description: This operation retrieves the States and Provinces for the
        specified id.<br />\r

        \              Purpose: Provides access to the States and
        Provinces."
      operationId: StatesProvinces_GetById
      parameters:
        - description: The ID of the State or Province used to retreive the State or
            Province information
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateProvinceModel"
            text/json:
              schema:
                $ref: "#/components/schemas/StateProvinceModel"
        "400":
          description: The request is invalid.
        "404":
          description: State or Province not found.
      tags:
        - StatesProvinces
servers:
  - url: https://demo.uat.naviplancentral.com/factfinder
  - url: http://demo.uat.naviplancentral.com/factfinder
components:
  requestBodies:
    LifeInsurancePolicySubaccountModel:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LifeInsurancePolicySubaccountModel"
        text/json:
          schema:
            $ref: "#/components/schemas/LifeInsurancePolicySubaccountModel"
      description: The Life Insurance Policy Subaccount model.
      required: true
    EducationExpenseModel:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EducationExpenseModel"
        text/json:
          schema:
            $ref: "#/components/schemas/EducationExpenseModel"
      description: The Education Goal Expense to be added to the Fact Finder
      required: true
  schemas:
    AccountHoldingModel:
      properties:
        costBasis:
          format: double
          type: number
        cusip:
          maxLength: 31
          minLength: 0
          type: string
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        marketValue:
          format: double
          type: number
        symbol:
          maxLength: 31
          minLength: 0
          type: string
        valuationDate:
          format: date-time
          type: string
      required:
        - description
      type: object
    AccountHoldingWithIdModel:
      properties:
        accountHoldingId:
          format: int32
          type: integer
        accountId:
          format: int32
          type: integer
        costBasis:
          format: double
          type: number
        cusip:
          type: string
        description:
          type: string
        externalDestinationId:
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        marketValue:
          format: double
          type: number
        symbol:
          type: string
        valuationDate:
          format: date-time
          type: string
      type: object
    AccountHoldingsModel:
      properties:
        holdings:
          items:
            $ref: "#/components/schemas/AccountHoldingWithIdModel"
          type: array
      type: object
    AccountHoldingsWithoutIdModel:
      properties:
        holdings:
          items:
            $ref: "#/components/schemas/AccountHoldingModel"
          type: array
      type: object
    AccountModel:
      properties:
        accountType:
          format: int32
          type: integer
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        externalSourceId:
          maxLength: 64
          minLength: 0
          type: string
        externalSourceName:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        lastUpdated:
          format: date-time
          type: string
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
            - Dependent
            - Other
          type: string
        ownerDependentId:
          format: int32
          type: integer
      required:
        - factFinderId
        - description
      type: object
    AccountTypeModel:
      properties:
        allowedSavingsTypes:
          items:
            $ref: "#/components/schemas/SavingsTypeDomainObject"
          type: array
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    AccountTypesModel:
      properties:
        accountTypes:
          items:
            $ref: "#/components/schemas/AccountTypeModel"
          type: array
      type: object
    AccountWithIdModel:
      properties:
        accountId:
          format: int32
          type: integer
        accountType:
          format: int32
          type: integer
        description:
          type: string
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        externalSourceName:
          type: string
        factFinderId:
          format: int32
          type: integer
        lastUpdated:
          format: date-time
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
            - Dependent
            - Other
          type: string
        ownerDependentId:
          format: int32
          type: integer
      type: object
    AccountWithSubEntitiesModel:
      properties:
        accountId:
          format: int32
          type: integer
        accountType:
          format: int32
          type: integer
        description:
          type: string
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        externalSourceName:
          type: string
        factFinderId:
          format: int32
          type: integer
        holdings:
          items:
            $ref: "#/components/schemas/AccountHoldingWithIdModel"
          type: array
        lastUpdated:
          format: date-time
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
            - Dependent
            - Other
          type: string
        ownerDependentId:
          format: int32
          type: integer
        savingsStrategies:
          items:
            $ref: "#/components/schemas/SavingsStrategyWithIdModel"
          type: array
      type: object
    AccountsModel:
      properties:
        accounts:
          items:
            $ref: "#/components/schemas/AccountWithIdModel"
          type: array
      type: object
    AccountsWithSubEntitiesModel:
      properties:
        accounts:
          items:
            $ref: "#/components/schemas/AccountWithSubEntitiesModel"
          type: array
      type: object
    ClientModel:
      properties:
        clientId:
          format: int32
          type: integer
        message:
          type: string
        ownerUser:
          type: string
        planId:
          format: int32
          type: integer
        success:
          type: boolean
      type: object
    ClientsModel:
      properties:
        externalDestinationName:
          maxLength: 49
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        planAction:
          enum:
            - New
            - Duplicate
            - Project
            - Update
          type: string
      required:
        - factFinderId
        - planAction
      type: object
    CriticalIllnessInsurancePoliciesModel:
      properties:
        criticalIllnessInsurancePolicies:
          items:
            $ref: "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
          type: array
      type: object
    CriticalIllnessInsurancePolicyModel:
      properties:
        benefit:
          format: double
          type: number
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
      required:
        - factFinderId
        - description
      type: object
    CriticalIllnessInsurancePolicyTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    CriticalIllnessInsurancePolicyTypesModel:
      properties:
        insurancePolicyTypes:
          items:
            $ref: "#/components/schemas/CriticalIllnessInsurancePolicyTypeModel"
          type: array
      type: object
    CriticalIllnessInsurancePolicyWithIdModel:
      properties:
        benefit:
          format: double
          type: number
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        insurancePolicyId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
      type: object
    DefinedBenefitPensionModel:
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        estimatedAmount:
          format: double
          type: number
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
          type: string
        startDate:
          format: date-time
          type: string
      required:
        - factFinderId
        - description
      type: object
    DefinedBenefitPensionWithIdModel:
      properties:
        definedBenefitPensionId:
          format: int32
          type: integer
        description:
          type: string
        estimatedAmount:
          format: double
          type: number
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        member:
          enum:
            - Client
            - CoClient
          type: string
        startDate:
          format: date-time
          type: string
      type: object
    DefinedBenefitPensionsModel:
      properties:
        definedBenefitPensions:
          items:
            $ref: "#/components/schemas/DefinedBenefitPensionWithIdModel"
          type: array
      type: object
    DemographicsDependentModel:
      properties:
        birthDate:
          format: date-time
          type: string
        dependentOf:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        firstName:
          maxLength: 255
          minLength: 0
          type: string
        lastName:
          maxLength: 255
          minLength: 0
          type: string
        relationship:
          enum:
            - Son
            - Daughter
            - FosterSon
            - FosterDaughter
            - Grandson
            - Granddaughter
            - Nephew
            - Niece
            - MaleCousin
            - FemaleCousin
            - Father
            - Mother
            - Grandfather
            - Grandmother
            - Uncle
            - Aunt
            - Brother
            - Sister
            - SonInLaw
            - DaughterInLaw
            - MaleOther
            - FemaleOther
          type: string
      required:
        - firstName
        - lastName
        - birthDate
        - relationship
        - dependentOf
      type: object
    DemographicsDependentWithIdModel:
      properties:
        birthDate:
          format: date-time
          type: string
        demographicsId:
          format: int32
          type: integer
        dependentId:
          format: int32
          type: integer
        dependentOf:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        externalDestinationId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        relationship:
          enum:
            - Son
            - Daughter
            - FosterSon
            - FosterDaughter
            - Grandson
            - Granddaughter
            - Nephew
            - Niece
            - MaleCousin
            - FemaleCousin
            - Father
            - Mother
            - Grandfather
            - Grandmother
            - Uncle
            - Aunt
            - Brother
            - Sister
            - SonInLaw
            - DaughterInLaw
            - MaleOther
            - FemaleOther
          type: string
      type: object
    DemographicsDependentsModel:
      properties:
        dependents:
          items:
            $ref: "#/components/schemas/DemographicsDependentWithIdModel"
          type: array
      type: object
    DemographicsModel:
      properties:
        city:
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        externalSourceId:
          type: string
        factFinderId:
          format: int32
          type: integer
        head1:
          $ref: "#/components/schemas/FamilyHeadModel"
        head2:
          $ref: "#/components/schemas/FamilyHeadModel"
        jointAnalysis:
          type: boolean
        state:
          format: int32
          type: integer
      required:
        - jointAnalysis
        - head1
        - factFinderId
        - city
        - state
      type: object
    DemographicsWithIdModel:
      properties:
        city:
          type: string
        created:
          format: date-time
          type: string
        demographicsId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        factFinderId:
          format: int32
          type: integer
        head1:
          $ref: "#/components/schemas/FamilyHeadModel"
        head2:
          $ref: "#/components/schemas/FamilyHeadModel"
        jointAnalysis:
          type: boolean
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        lockRetirement:
          type: boolean
        state:
          format: int32
          type: integer
      type: object
    DisabilityInsurancePoliciesModel:
      properties:
        disabilityInsurancePolicies:
          items:
            $ref: "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
          type: array
      type: object
    DisabilityInsurancePolicyModel:
      properties:
        benefit:
          format: double
          type: number
        benefitFrequency:
          format: int32
          type: integer
        benefitType:
          enum:
            - Dollar
            - Percent
          type: string
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
        premiumFrequency:
          format: int32
          type: integer
      required:
        - factFinderId
        - description
      type: object
    DisabilityInsurancePolicyTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    DisabilityInsurancePolicyTypesModel:
      properties:
        insurancePolicyTypes:
          items:
            $ref: "#/components/schemas/DisabilityInsurancePolicyTypeModel"
          type: array
      type: object
    DisabilityInsurancePolicyWithIdModel:
      properties:
        benefit:
          format: double
          type: number
        benefitFrequency:
          format: int32
          type: integer
        benefitType:
          enum:
            - Dollar
            - Percent
          type: string
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        insurancePolicyId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
        premiumFrequency:
          format: int32
          type: integer
      type: object
    EducationExpenseModel:
      properties:
        annualCost:
          format: double
          type: number
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        member:
          enum:
            - Client
            - CoClient
            - Dependent
          type: string
        memberDependentId:
          format: int32
          type: integer
        startYear:
          format: date-time
          type: string
        years:
          format: int32
          maximum: 99
          minimum: 1
          type: integer
      type: object
    EducationExpenseWithIdModel:
      properties:
        annualCost:
          format: double
          type: number
        educationExpenseId:
          format: int32
          type: integer
        educationGoalId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        member:
          enum:
            - Client
            - CoClient
            - Dependent
          type: string
        memberDependentId:
          format: int32
          type: integer
        startYear:
          format: date-time
          type: string
        years:
          format: int32
          type: integer
      type: object
    EducationExpensesModel:
      properties:
        educationExpenses:
          items:
            $ref: "#/components/schemas/EducationExpenseWithIdModel"
          type: array
      type: object
    EducationGoalModel:
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        projectedCost:
          format: double
          type: number
      required:
        - factFinderId
        - description
      type: object
    EducationGoalWithIdModel:
      properties:
        description:
          type: string
        educationGoalId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        projectedCost:
          format: double
          type: number
      type: object
    EducationGoalsModel:
      properties:
        educationGoals:
          items:
            $ref: "#/components/schemas/EducationGoalWithIdModel"
          type: array
      type: object
    ExpenseModel:
      properties:
        annualPeriod:
          format: int32
          maximum: 99
          minimum: 1
          type: integer
        description:
          maxLength: 255
          minLength: 0
          type: string
        endDate:
          format: date-time
          type: string
        expenseAmount:
          format: double
          type: number
        expenseTypeId:
          format: int32
          type: integer
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        startDate:
          format: date-time
          type: string
      required:
        - factFinderId
        - description
      type: object
    ExpenseTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    ExpenseTypesModel:
      properties:
        expenseTypes:
          items:
            $ref: "#/components/schemas/ExpenseTypeModel"
          type: array
      type: object
    ExpenseWithIdModel:
      properties:
        annualPeriod:
          format: int32
          type: integer
        description:
          type: string
        endDate:
          format: date-time
          type: string
        expenseAmount:
          format: double
          type: number
        expenseId:
          format: int32
          type: integer
        expenseTypeId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        startDate:
          format: date-time
          type: string
      type: object
    ExpensesModel:
      properties:
        expenses:
          items:
            $ref: "#/components/schemas/ExpenseWithIdModel"
          type: array
      type: object
    FactFinderEntityModel:
      properties:
        householdId:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        modules:
          items:
            enum:
              - Demographics
              - Assets
              - Liabilities
              - Incomes
              - Expenses
              - Insurance
              - Retirement
              - Education
              - MajorPurchase
            type: string
          type: array
        planLevel:
          enum:
            - Level2
            - Level1
          type: string
      required:
        - householdId
      type: object
    FactFinderModel:
      properties:
        status:
          enum:
            - New
            - InProgress
            - ClientSubmitted
            - AdvisorAccepted
            - Canceled
            - Draft
            - Deleted
          type: string
      type: object
    FactFinderModuleModel:
      properties:
        available:
          type: boolean
        moduleName:
          enum:
            - Demographics
            - Assets
            - Liabilities
            - Incomes
            - Expenses
            - Insurance
            - Retirement
            - Education
            - MajorPurchase
          type: string
        visited:
          type: boolean
      required:
        - moduleName
      type: object
    FactFinderModuleWithIdModel:
      properties:
        available:
          type: boolean
        factFinderId:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        moduleId:
          format: int32
          type: integer
        moduleName:
          enum:
            - Demographics
            - Assets
            - Liabilities
            - Incomes
            - Expenses
            - Insurance
            - Retirement
            - Education
            - MajorPurchase
          type: string
        visited:
          type: boolean
      type: object
    FactFinderModulesModel:
      properties:
        factFinderModules:
          items:
            $ref: "#/components/schemas/FactFinderModuleWithIdModel"
          type: array
      type: object
    FactFinderPopulatableEntityModel:
      properties:
        householdId:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        modules:
          items:
            enum:
              - Demographics
              - Assets
              - Liabilities
              - Incomes
              - Expenses
              - Insurance
              - Retirement
              - Education
              - MajorPurchase
            type: string
          type: array
        planId:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
        planLevel:
          enum:
            - Level2
            - Level1
          type: string
      required:
        - householdId
      type: object
    FactFinderPopulationModel:
      properties:
        planId:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      type: object
    FactFinderSnapshotWithIdModel:
      properties:
        created:
          format: date-time
          type: string
        factFinderData:
          $ref: "#/components/schemas/IFactFinderSnapshotDomainObject"
        factFinderId:
          format: int32
          type: integer
        factFinderStatus:
          enum:
            - New
            - InProgress
            - ClientSubmitted
            - AdvisorAccepted
            - Canceled
            - Draft
            - Deleted
          type: string
        snapshotId:
          format: int32
          type: integer
      type: object
    FactFinderSnapshotsModel:
      properties:
        snapshots:
          items:
            $ref: "#/components/schemas/FactFinderSnapshotWithIdModel"
          type: array
      type: object
    FactFinderWithIdModel:
      properties:
        countryCode:
          enum:
            - UnitedStates
            - Canada
          type: string
        created:
          format: date-time
          type: string
        factFinderId:
          format: int32
          type: integer
        householdId:
          format: int32
          type: integer
        lastStatusUpdate:
          format: date-time
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        modules:
          $ref: "#/components/schemas/FactFinderModulesModel"
        planId:
          format: int32
          type: integer
        planLevel:
          enum:
            - Level2
            - Level1
          type: string
        status:
          enum:
            - New
            - InProgress
            - ClientSubmitted
            - AdvisorAccepted
            - Canceled
            - Draft
            - Deleted
          type: string
      type: object
    FamilyHeadModel:
      properties:
        alreadyRetired:
          type: boolean
        birthDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        firstName:
          maxLength: 255
          minLength: 0
          type: string
        gender:
          enum:
            - Male
            - Female
            - None
          type: string
        lastName:
          maxLength: 255
          minLength: 0
          type: string
        taxFilingStatus:
          format: int32
          type: integer
      required:
        - firstName
        - lastName
        - birthDate
        - gender
        - taxFilingStatus
        - alreadyRetired
      type: object
    FilingStatusTypeModel:
      properties:
        filingStatusTypeId:
          format: int32
          type: integer
        filingStatusTypeName:
          type: string
        hasJointDependent:
          type: boolean
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        partnerStatuses:
          items:
            format: int32
            type: integer
          type: array
        validForSingleAnalysis:
          type: boolean
      type: object
    FilingStatusTypesModel:
      properties:
        filingStatusTypes:
          items:
            $ref: "#/components/schemas/FilingStatusTypeModel"
          type: array
      type: object
    FrequencyTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    FrequencyTypesModel:
      properties:
        frequencyTypes:
          items:
            $ref: "#/components/schemas/FrequencyTypeModel"
          type: array
      type: object
    IAccountHoldingDomainObject:
      properties:
        accountHoldingId:
          format: int32
          type: integer
        accountId:
          format: int32
          type: integer
        costBasis:
          format: double
          type: number
        cusip:
          type: string
        description:
          type: string
        externalDestinationId:
          type: string
        heldAway:
          type: boolean
        marketValue:
          format: double
          type: number
        symbol:
          type: string
        valuationDate:
          format: date-time
          type: string
      type: object
    IAccountSavingsStrategyDomainObject:
      properties:
        accountId:
          format: int32
          type: integer
        employerSavingsAmount:
          format: double
          type: number
        employerSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        frequencyId:
          format: int32
          type: integer
        mandatoryAmount:
          format: double
          type: number
        mandatoryAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        postTaxSavingsAmount:
          format: double
          type: number
        postTaxSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        preTaxSavingsAmount:
          format: double
          type: number
        preTaxSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        savingsStrategyId:
          format: int32
          type: integer
        startDate:
          format: date-time
          type: string
      type: object
    IAccountWithSubEntitiesDomainObject:
      properties:
        accountHoldings:
          items:
            $ref: "#/components/schemas/IAccountHoldingDomainObject"
          type: array
        accountId:
          format: int32
          type: integer
        accountType:
          format: int32
          type: integer
        description:
          type: string
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        externalSourceName:
          type: string
        factFinderId:
          format: int32
          type: integer
        lastUpdated:
          format: date-time
          type: string
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
            - Dependent
            - Other
          type: string
        ownerDependentId:
          format: int32
          type: integer
        savingsStrategies:
          items:
            $ref: "#/components/schemas/IAccountSavingsStrategyDomainObject"
          type: array
      type: object
    ICriticalIllnessInsurancePolicyDomainObject:
      properties:
        benefit:
          format: double
          type: number
        criticalIllnessInsurancePolicyId:
          format: int32
          type: integer
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
      type: object
    IDemographicsDependentDomainObject:
      properties:
        birthDate:
          format: date-time
          type: string
        demographicsId:
          format: int32
          type: integer
        dependentId:
          format: int32
          type: integer
        dependentOf:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        externalDestinationId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        relationship:
          enum:
            - Son
            - Daughter
            - FosterSon
            - FosterDaughter
            - Grandson
            - Granddaughter
            - Nephew
            - Niece
            - MaleCousin
            - FemaleCousin
            - Father
            - Mother
            - Grandfather
            - Grandmother
            - Uncle
            - Aunt
            - Brother
            - Sister
            - SonInLaw
            - DaughterInLaw
            - MaleOther
            - FemaleOther
          type: string
      type: object
    IDemographicsWithDependentsDomainObject:
      properties:
        city:
          type: string
        created:
          format: date-time
          type: string
        demographicsId:
          format: int32
          type: integer
        dependents:
          items:
            $ref: "#/components/schemas/IDemographicsDependentDomainObject"
          type: array
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        factFinderId:
          format: int32
          type: integer
        head1:
          $ref: "#/components/schemas/IFamilyHeadDomainObject"
        head2:
          $ref: "#/components/schemas/IFamilyHeadDomainObject"
        jointAnalysis:
          type: boolean
        lockRetirement:
          type: boolean
        state:
          format: int32
          type: integer
      type: object
    IDisabilityInsurancePolicyDomainObject:
      properties:
        benefit:
          format: double
          type: number
        benefitFrequency:
          format: int32
          type: integer
        benefitType:
          enum:
            - Dollar
            - Percent
          type: string
        description:
          type: string
        disabilityInsurancePolicyId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
        premiumFrequency:
          format: int32
          type: integer
      type: object
    IEducationExpenseDomainObject:
      properties:
        annualCost:
          format: double
          type: number
        educationExpenseId:
          format: int32
          type: integer
        educationGoalId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        member:
          enum:
            - Client
            - CoClient
            - Dependent
          type: string
        memberDependentId:
          format: int32
          type: integer
        startYear:
          format: date-time
          type: string
        years:
          format: int32
          type: integer
      type: object
    IEducationGoalWithExpensesDomainObject:
      properties:
        description:
          type: string
        educationExpenses:
          items:
            $ref: "#/components/schemas/IEducationExpenseDomainObject"
          type: array
        educationGoalId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        projectedCost:
          format: double
          type: number
      type: object
    IExpenseDomainObject:
      properties:
        annualPeriod:
          format: int32
          type: integer
        description:
          type: string
        endDate:
          format: date-time
          type: string
        expenseAmount:
          format: double
          type: number
        expenseId:
          format: int32
          type: integer
        expenseTypeId:
          format: int32
          type: integer
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        startDate:
          format: date-time
          type: string
      type: object
    IFactFinderDefinedBenefitPensionDomainObject:
      properties:
        definedBenefitPensionId:
          format: int32
          readOnly: true
          type: integer
        description:
          readOnly: true
          type: string
        estimatedAmount:
          format: double
          readOnly: true
          type: number
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
          readOnly: true
          type: string
        startDate:
          format: date-time
          readOnly: true
          type: string
      type: object
    IFactFinderLiabilityDomainObject:
      properties:
        balance:
          format: double
          type: number
        balanceAsOfDate:
          format: date-time
          type: string
        description:
          type: string
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        importSource:
          type: string
        interestRate:
          format: double
          type: number
        lastUpdated:
          format: date-time
          type: string
        liabilityId:
          format: int32
          type: integer
        liabilityType:
          format: int32
          type: integer
        loanDate:
          format: date-time
          type: string
        originalPrincipal:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        payment:
          format: double
          type: number
        paymentType:
          enum:
            - InterestOnly
            - PrincipalAndInterest
            - SetPrincipal
            - LastPeriod
          type: string
      type: object
    IFactFinderLifestyleAssetDomainObject:
      properties:
        description:
          readOnly: true
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        lifestyleAssetId:
          format: int32
          readOnly: true
          type: integer
        marketValue:
          format: double
          readOnly: true
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          readOnly: true
          type: string
        purchaseAmount:
          format: double
          readOnly: true
          type: number
        purchaseDate:
          format: date-time
          readOnly: true
          type: string
        type:
          format: int32
          readOnly: true
          type: integer
      type: object
    IFactFinderSnapshotDomainObject:
      properties:
        accounts:
          items:
            $ref: "#/components/schemas/IAccountWithSubEntitiesDomainObject"
          type: array
        criticalIllnessInsurancePolicies:
          items:
            $ref: "#/components/schemas/ICriticalIllnessInsurancePolicyDomainObject"
          type: array
        definedBenefitPensions:
          items:
            $ref: "#/components/schemas/IFactFinderDefinedBenefitPensionDomainObject"
          type: array
        demographics:
          $ref: "#/components/schemas/IDemographicsWithDependentsDomainObject"
        disabilityInsurancePolicies:
          items:
            $ref: "#/components/schemas/IDisabilityInsurancePolicyDomainObject"
          type: array
        educationGoals:
          items:
            $ref: "#/components/schemas/IEducationGoalWithExpensesDomainObject"
          type: array
        expenses:
          items:
            $ref: "#/components/schemas/IExpenseDomainObject"
          type: array
        incomes:
          items:
            $ref: "#/components/schemas/IIncomeDomainObject"
          type: array
        liabilities:
          items:
            $ref: "#/components/schemas/IFactFinderLiabilityDomainObject"
          type: array
        lifeInsurancePolicies:
          items:
            $ref: "#/components/schemas/ILifeInsurancePolicyDomainObject"
          type: array
        lifestyleAssets:
          items:
            $ref: "#/components/schemas/IFactFinderLifestyleAssetDomainObject"
          type: array
        longTermCareInsurancePolicies:
          items:
            $ref: "#/components/schemas/ILongTermCareInsurancePolicyDomainObject"
          type: array
        majorPurchaseGoals:
          items:
            $ref: "#/components/schemas/IMajorPurchaseGoalDomainObject"
          type: array
        planYear:
          format: int32
          type: integer
        realEstateAssets:
          items:
            $ref: "#/components/schemas/IRealEstateAssetDomainObject"
          type: array
        retirementGoal:
          $ref: "#/components/schemas/IRetirementGoalWithExpensesDomainObject"
      type: object
    IFamilyHeadDomainObject:
      properties:
        alreadyRetired:
          type: boolean
        birthDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        firstName:
          type: string
        gender:
          enum:
            - Male
            - Female
            - None
          type: string
        lastName:
          type: string
        taxFilingStatus:
          format: int32
          type: integer
      type: object
    IIncomeDomainObject:
      properties:
        annualAmount:
          format: double
          type: number
        description:
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        incomeId:
          format: int32
          type: integer
        incomeTypeId:
          format: int32
          type: integer
        owner:
          enum:
            - Client
            - CoClient
          type: string
        startDate:
          format: date-time
          type: string
      type: object
    ILifeInsurancePolicyDomainObject:
      properties:
        beneficiary:
          enum:
            - Client
            - CoClient
            - Dependent
            - Other
          type: string
        beneficiaryDependentId:
          format: int32
          type: integer
        benefit:
          format: double
          type: number
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        generalAccountMarketValue:
          format: double
          type: number
        insured:
          enum:
            - Client
            - CoClient
            - FirstToDie
            - SecondToDie
            - Other
          type: string
        lifeInsurancePolicyId:
          format: int32
          type: integer
        payer:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
        subaccounts:
          items:
            $ref: "#/components/schemas/LifeInsurancePolicySubaccountDomainObject"
          type: array
      type: object
    ILongTermCareInsurancePolicyDomainObject:
      properties:
        benefit:
          format: double
          type: number
        benefitFrequency:
          format: int32
          type: integer
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        longTermCareInsurancePolicyId:
          format: int32
          type: integer
        premium:
          format: double
          type: number
        premiumFrequency:
          format: int32
          type: integer
      type: object
    IMajorPurchaseGoalDomainObject:
      properties:
        amount:
          format: double
          readOnly: true
          type: number
        description:
          readOnly: true
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        majorPurchaseGoalId:
          format: int32
          readOnly: true
          type: integer
        majorPurchaseGoalTypeId:
          format: int32
          readOnly: true
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          readOnly: true
          type: string
        targetDate:
          format: date-time
          readOnly: true
          type: string
      type: object
    IRealEstateAssetDomainObject:
      properties:
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        purchaseAmount:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
        realEstateAssetId:
          format: int32
          type: integer
        rentalIncome:
          format: double
          type: number
      type: object
    IRetirementExpenseDomainObject:
      properties:
        amount:
          format: double
          type: number
        annualPeriod:
          format: int32
          type: integer
        description:
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        frequency:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        retirementExpenseId:
          format: int32
          type: integer
        retirementGoalId:
          format: int32
          type: integer
        startDate:
          format: date-time
          type: string
      type: object
    IRetirementGoalWithExpensesDomainObject:
      properties:
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        head1RetirementDate:
          format: date-time
          type: string
        head2RetirementDate:
          format: date-time
          type: string
        retirementExpenses:
          items:
            $ref: "#/components/schemas/IRetirementExpenseDomainObject"
          type: array
        retirementGoalId:
          format: int32
          type: integer
      type: object
    IncomeModel:
      properties:
        annualAmount:
          format: double
          type: number
        description:
          maxLength: 255
          minLength: 0
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        incomeTypeId:
          format: int32
          type: integer
        owner:
          enum:
            - Client
            - CoClient
          type: string
        startDate:
          format: date-time
          type: string
      required:
        - factFinderId
        - description
      type: object
    IncomeTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    IncomeTypesModel:
      properties:
        incomeTypes:
          items:
            $ref: "#/components/schemas/IncomeTypeModel"
          type: array
      type: object
    IncomeWithIdModel:
      properties:
        annualAmount:
          format: double
          type: number
        description:
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        incomeId:
          format: int32
          type: integer
        incomeTypeId:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        owner:
          enum:
            - Client
            - CoClient
          type: string
        startDate:
          format: date-time
          type: string
      type: object
    IncomesModel:
      properties:
        incomes:
          items:
            $ref: "#/components/schemas/IncomeWithIdModel"
          type: array
      type: object
    LiabilitiesModel:
      properties:
        liabilities:
          items:
            $ref: "#/components/schemas/LiabilityWithIdModel"
          type: array
      type: object
    LiabilityModel:
      properties:
        balance:
          format: double
          type: number
        balanceAsOfDate:
          format: date-time
          type: string
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        externalSourceId:
          maxLength: 64
          minLength: 0
          type: string
        externalSourceName:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        interestRate:
          format: double
          maximum: 50
          minimum: 0
          type: number
        lastUpdated:
          format: date-time
          type: string
        liabilityType:
          format: int32
          type: integer
        loanDate:
          format: date-time
          type: string
        originalPrincipal:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        payment:
          format: double
          type: number
        paymentType:
          enum:
            - InterestOnly
            - PrincipalAndInterest
            - SetPrincipal
            - LastPeriod
          type: string
      required:
        - factFinderId
        - description
      type: object
    LiabilityTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    LiabilityTypesModel:
      properties:
        liabilityTypes:
          items:
            $ref: "#/components/schemas/LiabilityTypeModel"
          type: array
      type: object
    LiabilityWithIdModel:
      properties:
        balance:
          format: double
          type: number
        balanceAsOfDate:
          format: date-time
          type: string
        description:
          type: string
        externalDestinationId:
          type: string
        externalSourceId:
          type: string
        externalSourceName:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        interestRate:
          format: double
          type: number
        lastUpdated:
          format: date-time
          type: string
        liabilityId:
          format: int32
          type: integer
        liabilityType:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        loanDate:
          format: date-time
          type: string
        originalPrincipal:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        payment:
          format: double
          type: number
        paymentType:
          enum:
            - InterestOnly
            - PrincipalAndInterest
            - SetPrincipal
            - LastPeriod
          type: string
      type: object
    LifeInsurancePoliciesModel:
      properties:
        lifeInsurancePolicies:
          items:
            $ref: "#/components/schemas/LifeInsurancePolicyWithIdModel"
          type: array
      type: object
    LifeInsurancePoliciesWithSubEntitiesModel:
      properties:
        lifeInsurancePolicies:
          items:
            $ref: "#/components/schemas/LifeInsurancePolicyWithSubEntitiesModel"
          type: array
      type: object
    LifeInsurancePolicyModel:
      properties:
        beneficiary:
          enum:
            - Client
            - CoClient
            - Dependent
            - Other
          type: string
        beneficiaryDependentId:
          format: int32
          type: integer
        benefit:
          format: double
          type: number
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        generalAccountMarketValue:
          format: double
          type: number
        insured:
          enum:
            - Client
            - CoClient
            - FirstToDie
            - SecondToDie
            - Other
          type: string
        payer:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
      required:
        - factFinderId
        - description
      type: object
    LifeInsurancePolicySubaccountDomainObject:
      properties:
        description:
          type: string
        externalDestinationId:
          type: string
        lifeInsurancePolicyId:
          format: int32
          type: integer
        lifeInsurancePolicySubaccountId:
          format: int32
          type: integer
        marketValue:
          format: double
          type: number
        symbol:
          type: string
      type: object
    LifeInsurancePolicySubaccountModel:
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        marketValue:
          format: double
          type: number
        symbol:
          maxLength: 31
          minLength: 0
          type: string
      required:
        - description
      type: object
    LifeInsurancePolicySubaccountWithIdModel:
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        lifeInsurancePolicyId:
          format: int32
          type: integer
        lifeInsurancePolicySubaccountId:
          format: int32
          type: integer
        marketValue:
          format: double
          type: number
        symbol:
          maxLength: 31
          minLength: 0
          type: string
      required:
        - description
      type: object
    LifeInsurancePolicySubaccountsModel:
      properties:
        lifeInsurancePolicySubaccounts:
          items:
            $ref: "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
          type: array
      type: object
    LifeInsurancePolicyTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    LifeInsurancePolicyTypesModel:
      properties:
        insurancePolicyTypes:
          items:
            $ref: "#/components/schemas/LifeInsurancePolicyTypeModel"
          type: array
      type: object
    LifeInsurancePolicyWithIdModel:
      properties:
        beneficiary:
          enum:
            - Client
            - CoClient
            - Dependent
            - Other
          type: string
        beneficiaryDependentId:
          format: int32
          type: integer
        benefit:
          format: double
          type: number
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        generalAccountMarketValue:
          format: double
          type: number
        insurancePolicyId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
            - FirstToDie
            - SecondToDie
            - Other
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        payer:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
      type: object
    LifeInsurancePolicyWithSubEntitiesModel:
      properties:
        beneficiary:
          enum:
            - Client
            - CoClient
            - Dependent
            - Other
          type: string
        beneficiaryDependentId:
          format: int32
          type: integer
        benefit:
          format: double
          type: number
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        generalAccountMarketValue:
          format: double
          type: number
        insurancePolicyId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
            - FirstToDie
            - SecondToDie
            - Other
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        payer:
          enum:
            - Client
            - CoClient
            - Joint
            - Other
          type: string
        policyType:
          format: int32
          type: integer
        premium:
          format: double
          type: number
        subaccounts:
          items:
            $ref: "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
          type: array
      type: object
    LifestyleAssetModel:
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        purchaseAmount:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
        type:
          format: int32
          type: integer
      required:
        - factFinderId
        - description
      type: object
    LifestyleAssetTypeModel:
      properties:
        id:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        name:
          type: string
      type: object
    LifestyleAssetTypesModel:
      properties:
        lifestyleAssetTypes:
          items:
            $ref: "#/components/schemas/LifestyleAssetTypeModel"
          type: array
      type: object
    LifestyleAssetWithIdModel:
      properties:
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        lifestyleAssetId:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        purchaseAmount:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
        type:
          format: int32
          type: integer
      type: object
    LifestyleAssetsModel:
      properties:
        lifestyleAssets:
          items:
            $ref: "#/components/schemas/LifestyleAssetWithIdModel"
          type: array
      type: object
    LongTermCareInsurancePoliciesModel:
      properties:
        longTermCareInsurancePolicies:
          items:
            $ref: "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
          type: array
      type: object
    LongTermCareInsurancePolicyModel:
      properties:
        benefit:
          format: double
          type: number
        benefitFrequency:
          format: int32
          type: integer
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        premium:
          format: double
          type: number
        premiumFrequency:
          format: int32
          type: integer
      required:
        - factFinderId
        - description
      type: object
    LongTermCareInsurancePolicyWithIdModel:
      properties:
        benefit:
          format: double
          type: number
        benefitFrequency:
          format: int32
          type: integer
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        insurancePolicyId:
          format: int32
          type: integer
        insured:
          enum:
            - Client
            - CoClient
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        premium:
          format: double
          type: number
        premiumFrequency:
          format: int32
          type: integer
      type: object
    MajorPurchaseGoalModel:
      properties:
        amount:
          format: double
          type: number
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        majorPurchaseGoalTypeId:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        targetDate:
          format: date-time
          type: string
      required:
        - factFinderId
        - description
      type: object
    MajorPurchaseGoalTypeModel:
      properties:
        description:
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        majorPurchaseGoalTypeId:
          format: int32
          type: integer
      type: object
    MajorPurchaseGoalTypesModel:
      properties:
        majorPurchaseGoalTypes:
          items:
            $ref: "#/components/schemas/MajorPurchaseGoalTypeModel"
          type: array
      type: object
    MajorPurchaseGoalWithIdModel:
      properties:
        amount:
          format: double
          type: number
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        majorPurchaseGoalId:
          format: int32
          type: integer
        majorPurchaseGoalTypeId:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        targetDate:
          format: date-time
          type: string
      type: object
    MajorPurchaseGoalsModel:
      properties:
        majorPurchaseGoals:
          items:
            $ref: "#/components/schemas/MajorPurchaseGoalWithIdModel"
          type: array
      type: object
    Object:
      properties: {}
      type: object
    ObjectLink:
      properties:
        href:
          type: string
        rel:
          type: string
      type: object
    OwnerModel:
      properties:
        displayName:
          type: string
        owner:
          type: string
        ownerDependentId:
          format: int32
          type: integer
      type: object
    OwnersModel:
      properties:
        owners:
          items:
            $ref: "#/components/schemas/OwnerModel"
          type: array
      type: object
    RealEstateAssetModel:
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        purchaseAmount:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
        rentalIncome:
          format: double
          type: number
      required:
        - factFinderId
        - description
      type: object
    RealEstateAssetWithIdModel:
      properties:
        description:
          type: string
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        frequency:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        marketValue:
          format: double
          type: number
        owner:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        purchaseAmount:
          format: double
          type: number
        purchaseDate:
          format: date-time
          type: string
        realEstateAssetId:
          format: int32
          type: integer
        rentalIncome:
          format: double
          type: number
      type: object
    RealEstateAssetsModel:
      properties:
        realEstateAssets:
          items:
            $ref: "#/components/schemas/RealEstateAssetWithIdModel"
          type: array
      type: object
    RelationshipTypeModel:
      properties:
        id:
          format: int32
          type: integer
        isChildType:
          type: boolean
        relationshipType:
          enum:
            - Son
            - Daughter
            - FosterSon
            - FosterDaughter
            - Grandson
            - Granddaughter
            - Nephew
            - Niece
            - MaleCousin
            - FemaleCousin
            - Father
            - Mother
            - Grandfather
            - Grandmother
            - Uncle
            - Aunt
            - Brother
            - Sister
            - SonInLaw
            - DaughterInLaw
            - MaleOther
            - FemaleOther
          type: string
      type: object
    RelationshipTypesModel:
      properties:
        relationshipTypes:
          items:
            $ref: "#/components/schemas/RelationshipTypeModel"
          type: array
      type: object
    RetirementExpenseModel:
      properties:
        amount:
          format: double
          type: number
        annualPeriod:
          format: int32
          maximum: 99
          minimum: 1
          type: integer
        description:
          maxLength: 255
          minLength: 0
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        frequency:
          format: int32
          type: integer
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        startDate:
          format: date-time
          type: string
      required:
        - description
      type: object
    RetirementExpenseWithIdModel:
      properties:
        amount:
          format: double
          type: number
        annualPeriod:
          format: int32
          type: integer
        description:
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        frequency:
          format: int32
          type: integer
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        member:
          enum:
            - Client
            - CoClient
            - Joint
          type: string
        retirementExpenseId:
          format: int32
          type: integer
        retirementGoalId:
          format: int32
          type: integer
        startDate:
          format: date-time
          type: string
      type: object
    RetirementExpensesModel:
      properties:
        retirementExpenses:
          items:
            $ref: "#/components/schemas/RetirementExpenseWithIdModel"
          type: array
      type: object
    RetirementGoalModel:
      properties:
        externalDestinationId:
          maxLength: 64
          minLength: 0
          type: string
        factFinderId:
          format: int32
          type: integer
        head1RetirementDate:
          format: date-time
          type: string
        head2RetirementDate:
          format: date-time
          type: string
      required:
        - factFinderId
      type: object
    RetirementGoalWithIdModel:
      properties:
        externalDestinationId:
          type: string
        factFinderId:
          format: int32
          type: integer
        head1RetirementDate:
          format: date-time
          type: string
        head2RetirementDate:
          format: date-time
          type: string
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        retirementGoalId:
          format: int32
          type: integer
      type: object
    RetirementGoalsModel:
      properties:
        retirementGoals:
          items:
            $ref: "#/components/schemas/RetirementGoalWithIdModel"
          type: array
      type: object
    SavingsStrategiesModel:
      properties:
        savingsStrategies:
          items:
            $ref: "#/components/schemas/SavingsStrategyWithIdModel"
          type: array
      type: object
    SavingsStrategyModel:
      properties:
        employerSavingsAmount:
          format: double
          type: number
        employerSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        frequencyId:
          format: int32
          type: integer
        mandatoryAmount:
          format: double
          type: number
        mandatoryAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        postTaxSavingsAmount:
          format: double
          type: number
        postTaxSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        preTaxSavingsAmount:
          format: double
          type: number
        preTaxSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        startDate:
          format: date-time
          type: string
      type: object
    SavingsStrategyWithIdModel:
      properties:
        accountId:
          format: int32
          type: integer
        employerSavingsAmount:
          format: double
          type: number
        employerSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        endDate:
          format: date-time
          type: string
        externalDestinationId:
          type: string
        frequencyId:
          format: int32
          type: integer
        mandatoryAmount:
          format: double
          type: number
        mandatoryAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        postTaxSavingsAmount:
          format: double
          type: number
        postTaxSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        preTaxSavingsAmount:
          format: double
          type: number
        preTaxSavingsAmountType:
          enum:
            - Dollar
            - Percent
            - Max
          type: string
        savingsStrategyId:
          format: int32
          type: integer
        startDate:
          format: date-time
          type: string
      type: object
    SavingsTypeDomainObject:
      properties:
        typeName:
          enum:
            - PostTaxSavings
            - PreTaxSavings
            - EmployerSavings
            - MandatorySavings
          type: string
        validAmountTypes:
          items:
            enum:
              - Dollar
              - Percent
              - Max
            type: string
          type: array
      type: object
    ServiceInformationModel:
      properties:
        name:
          type: string
        schemaVersion:
          format: int32
          type: integer
        serviceVersion:
          type: string
        status:
          type: string
      type: object
    StateProvinceModel:
      properties:
        links:
          items:
            $ref: "#/components/schemas/ObjectLink"
          type: array
        stateProvinceId:
          format: int32
          type: integer
        stateProvinceName:
          type: string
      type: object
    StatesProvincesModel:
      properties:
        statesProvinces:
          items:
            $ref: "#/components/schemas/StateProvinceModel"
          type: array
      type: object
