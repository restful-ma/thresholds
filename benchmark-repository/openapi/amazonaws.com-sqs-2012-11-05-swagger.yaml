openapi: 3.0.0
info:
  version: 2012-11-05
  x-release: v4
  title: Amazon Simple Queue Service
  description: <p>Welcome to the <i>Amazon Simple Queue Service API Reference</i>.</p>
    <p>Amazon Simple Queue Service (Amazon SQS) is a reliable, highly-scalable
    hosted queue for storing messages as they travel between applications or
    microservices. Amazon SQS moves data between distributed application
    components and helps you decouple these components.</p> <p>You can use <a
    href="http://aws.amazon.com/tools/#sdk">AWS SDKs</a> to access Amazon SQS
    using your favorite programming language. The SDKs perform tasks such as the
    following automatically:</p> <ul> <li> <p>Cryptographically sign your
    service requests</p> </li> <li> <p>Retry requests</p> </li> <li> <p>Handle
    error responses</p> </li> </ul> <p> <b>Additional Information</b> </p> <ul>
    <li> <p> <a href="http://aws.amazon.com/sqs/">Amazon SQS Product Page</a>
    </p> </li> <li> <p> <i>Amazon Simple Queue Service Developer Guide</i> </p>
    <ul> <li> <p> <a
    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html">Making
    API Requests</a> </p> </li> <li> <p> <a
    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html">Amazon
    SQS Message Attributes</a> </p> </li> <li> <p> <a
    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Amazon
    SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a
    href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html">Amazon
    SQS in the <i>AWS CLI Command Reference</i> </a> </p> </li> <li> <p>
    <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a
    href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region">Regions
    and Endpoints</a> </p> </li> </ul> </li> </ul>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: sqs
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/sqs-2012-11-05.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/sqs/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  "/{AccountNumber}/{QueueName}/#Action=AddPermission":
    get:
      x-aws-operation-name: AddPermission
      operationId: GET AddPermission
      description: <p>Adds a permission to a queue for a specific <a
        href="https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P">principal</a>.
        This allows sharing access to the queue.</p> <p>When you create a queue,
        you have full control access rights for the queue. Only you, the owner
        of the queue, can grant or deny permissions to the queue. For more
        information about these permissions, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue">Allow
        Developers to Write Messages to a Shared Queue</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> <note> <ul> <li> <p>
        <code>AddPermission</code> generates a policy for you. You can use
        <code> <a>SetQueueAttributes</a> </code> to upload your policy. For more
        information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html">Using
        Custom Policies with the Amazon SQS Access Policy Language</a> in the
        <i>Amazon Simple Queue Service Developer Guide</i>.</p> </li> <li> <p>An
        Amazon SQS policy can have a maximum of 7 actions.</p> </li> <li> <p>To
        remove the ability to change queue permissions, you must deny permission
        to the <code>AddPermission</code>, <code>RemovePermission</code>, and
        <code>SetQueueAttributes</code> actions in your IAM policy.</p> </li>
        </ul> </note> <p>Some actions take lists of parameters. These lists are
        specified using the <code>param.n</code> notation. Values of
        <code>n</code> are integers starting from 1. For example, a parameter
        list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p> <note> <p>Cross-account
        permissions don't apply to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: OverLimit
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/OverLimit"
      parameters:
        - name: Label
          in: query
          required: true
          description: The unique identification of the permission you're setting (for
            example, <code>AliceSendMessage</code>). Maximum 80 characters.
            Allowed characters include alphanumeric characters, hyphens
            (<code>-</code>), and underscores (<code>_</code>).
          schema:
            type: string
        - name: AWSAccountIds
          in: query
          required: true
          description: The AWS account number of the <a
            href="https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P">principal</a>
            who is given permission. The principal must have an AWS account, but
            does not need to be signed up for Amazon SQS. For information about
            locating the AWS account identification, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication">Your
            AWS Identifiers</a> in the <i>Amazon Simple Queue Service Developer
            Guide</i>.
          schema:
            type: array
            items:
              type: string
        - name: Actions
          in: query
          required: true
          description: '<p>The action the client wants to allow for the specified
            principal. Valid values: the name of any action or
            <code>*</code>.</p> <p>For more information about these actions, see
            <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html">Overview
            of Managing Access Permissions to Your Amazon Simple Queue Service
            Resource</a> in the <i>Amazon Simple Queue Service Developer
            Guide</i>.</p> <p>Specifying <code>SendMessage</code>,
            <code>DeleteMessage</code>, or <code>ChangeMessageVisibility</code>
            for <code>ActionName.n</code> also grants permissions for the
            corresponding batch versions of those actions:
            <code>SendMessageBatch</code>, <code>DeleteMessageBatch</code>, and
            <code>ChangeMessageVisibilityBatch</code>.</p>'
          schema:
            type: array
            items:
              type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AddPermission
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: AddPermission
      operationId: POST AddPermission
      description: <p>Adds a permission to a queue for a specific <a
        href="https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P">principal</a>.
        This allows sharing access to the queue.</p> <p>When you create a queue,
        you have full control access rights for the queue. Only you, the owner
        of the queue, can grant or deny permissions to the queue. For more
        information about these permissions, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue">Allow
        Developers to Write Messages to a Shared Queue</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> <note> <ul> <li> <p>
        <code>AddPermission</code> generates a policy for you. You can use
        <code> <a>SetQueueAttributes</a> </code> to upload your policy. For more
        information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html">Using
        Custom Policies with the Amazon SQS Access Policy Language</a> in the
        <i>Amazon Simple Queue Service Developer Guide</i>.</p> </li> <li> <p>An
        Amazon SQS policy can have a maximum of 7 actions.</p> </li> <li> <p>To
        remove the ability to change queue permissions, you must deny permission
        to the <code>AddPermission</code>, <code>RemovePermission</code>, and
        <code>SetQueueAttributes</code> actions in your IAM policy.</p> </li>
        </ul> </note> <p>Some actions take lists of parameters. These lists are
        specified using the <code>param.n</code> notation. Values of
        <code>n</code> are integers starting from 1. For example, a parameter
        list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p> <note> <p>Cross-account
        permissions don't apply to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: OverLimit
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/OverLimit"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - AddPermission
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Label:
                  description: The unique identification of the permission you're setting
                    (for example, <code>AliceSendMessage</code>). Maximum 80
                    characters. Allowed characters include alphanumeric
                    characters, hyphens (<code>-</code>), and underscores
                    (<code>_</code>).
                  type: string
                AWSAccountIds:
                  description: The AWS account number of the <a
                    href="https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P">principal</a>
                    who is given permission. The principal must have an AWS
                    account, but does not need to be signed up for Amazon SQS.
                    For information about locating the AWS account
                    identification, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication">Your
                    AWS Identifiers</a> in the <i>Amazon Simple Queue Service
                    Developer Guide</i>.
                  type: array
                  items:
                    type: string
                Actions:
                  description: '<p>The action the client wants to allow for the specified
                    principal. Valid values: the name of any action or
                    <code>*</code>.</p> <p>For more information about these
                    actions, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html">Overview
                    of Managing Access Permissions to Your Amazon Simple Queue
                    Service Resource</a> in the <i>Amazon Simple Queue Service
                    Developer Guide</i>.</p> <p>Specifying
                    <code>SendMessage</code>, <code>DeleteMessage</code>, or
                    <code>ChangeMessageVisibility</code> for
                    <code>ActionName.n</code> also grants permissions for the
                    corresponding batch versions of those actions:
                    <code>SendMessageBatch</code>,
                    <code>DeleteMessageBatch</code>, and
                    <code>ChangeMessageVisibilityBatch</code>.</p>'
                  type: array
                  items:
                    type: string
              required:
                - Label
                - AWSAccountIds
                - Actions
  "/{AccountNumber}/{QueueName}/#Action=ChangeMessageVisibility":
    get:
      x-aws-operation-name: ChangeMessageVisibility
      operationId: GET ChangeMessageVisibility
      description: <p>Changes the visibility timeout of a specified message in a queue to a
        new value. The default visibility timeout for a message is 30 seconds.
        The minimum is 0 seconds. The maximum is 12 hours. For more information,
        see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
        Timeout</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>.</p> <p>For example, you have a message with a visibility
        timeout of 5 minutes. After 3 minutes, you call
        <code>ChangeMessageVisibility</code> with a timeout of 10 minutes. You
        can continue to call <code>ChangeMessageVisibility</code> to extend the
        visibility timeout to the maximum allowed time. If you try to extend the
        visibility timeout beyond the maximum, your request is rejected.</p>
        <p>An Amazon SQS message has three basic states:</p> <ol> <li> <p>Sent
        to a queue by a producer.</p> </li> <li> <p>Received from the queue by a
        consumer.</p> </li> <li> <p>Deleted from the queue.</p> </li> </ol> <p>A
        message is considered to be <i>stored</i> after it is sent to a queue by
        a producer, but not yet received from the queue by a consumer (that is,
        between states 1 and 2). There is no limit to the number of stored
        messages. A message is considered to be <i>in flight</i> after it is
        received from a queue by a consumer, but not yet deleted from the queue
        (that is, between states 2 and 3). There is a limit to the number of
        inflight messages.</p> <p>Limits that apply to inflight messages are
        unrelated to the <i>unlimited</i> number of stored messages.</p> <p>For
        most standard queues (depending on queue traffic and message backlog),
        there can be a maximum of approximately 120,000 inflight messages
        (received from a queue by a consumer, but not yet deleted from the
        queue). If you reach this limit, Amazon SQS returns the
        <code>OverLimit</code> error message. To avoid reaching the limit, you
        should delete messages from the queue after they're processed. You can
        also increase the number of queues you use to process your messages. To
        request a limit increase, <a
        href="https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&amp;limitType=service-code-sqs">file
        a support request</a>.</p> <p>For FIFO queues, there can be a maximum of
        20,000 inflight messages (received from a queue by a consumer, but not
        yet deleted from the queue). If you reach this limit, Amazon SQS returns
        no error messages.</p> <important> <p>If you attempt to set the
        <code>VisibilityTimeout</code> to a value greater than the maximum time
        left, Amazon SQS returns an error. Amazon SQS doesn't automatically
        recalculate and increase the timeout to the maximum remaining time.</p>
        <p>Unlike with a queue, when you change the visibility timeout for a
        specific message the timeout value is applied immediately but isn't
        saved in memory for that message. If you don't delete a message after it
        is received, the visibility timeout for the message reverts to the
        original timeout value (not to the value you set using the
        <code>ChangeMessageVisibility</code> action) the next time the message
        is received.</p> </important>
      responses:
        "200":
          description: Success
        "480":
          description: MessageNotInflight
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MessageNotInflight"
        "481":
          description: ReceiptHandleIsInvalid
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ReceiptHandleIsInvalid"
      parameters:
        - name: ReceiptHandle
          in: query
          required: true
          description: The receipt handle associated with the message whose visibility
            timeout is changed. This parameter is returned by the <code>
            <a>ReceiveMessage</a> </code> action.
          schema:
            type: string
        - name: VisibilityTimeout
          in: query
          required: true
          description: "The new value for the message's visibility timeout (in seconds).
            Values values: <code>0</code> to <code>43200</code>. Maximum: 12
            hours."
          schema:
            type: integer
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ChangeMessageVisibility
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: ChangeMessageVisibility
      operationId: POST ChangeMessageVisibility
      description: <p>Changes the visibility timeout of a specified message in a queue to a
        new value. The default visibility timeout for a message is 30 seconds.
        The minimum is 0 seconds. The maximum is 12 hours. For more information,
        see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
        Timeout</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>.</p> <p>For example, you have a message with a visibility
        timeout of 5 minutes. After 3 minutes, you call
        <code>ChangeMessageVisibility</code> with a timeout of 10 minutes. You
        can continue to call <code>ChangeMessageVisibility</code> to extend the
        visibility timeout to the maximum allowed time. If you try to extend the
        visibility timeout beyond the maximum, your request is rejected.</p>
        <p>An Amazon SQS message has three basic states:</p> <ol> <li> <p>Sent
        to a queue by a producer.</p> </li> <li> <p>Received from the queue by a
        consumer.</p> </li> <li> <p>Deleted from the queue.</p> </li> </ol> <p>A
        message is considered to be <i>stored</i> after it is sent to a queue by
        a producer, but not yet received from the queue by a consumer (that is,
        between states 1 and 2). There is no limit to the number of stored
        messages. A message is considered to be <i>in flight</i> after it is
        received from a queue by a consumer, but not yet deleted from the queue
        (that is, between states 2 and 3). There is a limit to the number of
        inflight messages.</p> <p>Limits that apply to inflight messages are
        unrelated to the <i>unlimited</i> number of stored messages.</p> <p>For
        most standard queues (depending on queue traffic and message backlog),
        there can be a maximum of approximately 120,000 inflight messages
        (received from a queue by a consumer, but not yet deleted from the
        queue). If you reach this limit, Amazon SQS returns the
        <code>OverLimit</code> error message. To avoid reaching the limit, you
        should delete messages from the queue after they're processed. You can
        also increase the number of queues you use to process your messages. To
        request a limit increase, <a
        href="https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&amp;limitType=service-code-sqs">file
        a support request</a>.</p> <p>For FIFO queues, there can be a maximum of
        20,000 inflight messages (received from a queue by a consumer, but not
        yet deleted from the queue). If you reach this limit, Amazon SQS returns
        no error messages.</p> <important> <p>If you attempt to set the
        <code>VisibilityTimeout</code> to a value greater than the maximum time
        left, Amazon SQS returns an error. Amazon SQS doesn't automatically
        recalculate and increase the timeout to the maximum remaining time.</p>
        <p>Unlike with a queue, when you change the visibility timeout for a
        specific message the timeout value is applied immediately but isn't
        saved in memory for that message. If you don't delete a message after it
        is received, the visibility timeout for the message reverts to the
        original timeout value (not to the value you set using the
        <code>ChangeMessageVisibility</code> action) the next time the message
        is received.</p> </important>
      responses:
        "200":
          description: Success
        "480":
          description: MessageNotInflight
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/MessageNotInflight"
        "481":
          description: ReceiptHandleIsInvalid
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ReceiptHandleIsInvalid"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ChangeMessageVisibility
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                ReceiptHandle:
                  description: The receipt handle associated with the message whose
                    visibility timeout is changed. This parameter is returned by
                    the <code> <a>ReceiveMessage</a> </code> action.
                  type: string
                VisibilityTimeout:
                  description: "The new value for the message's visibility timeout (in
                    seconds). Values values: <code>0</code> to
                    <code>43200</code>. Maximum: 12 hours."
                  type: integer
              required:
                - ReceiptHandle
                - VisibilityTimeout
  "/{AccountNumber}/{QueueName}/#Action=ChangeMessageVisibilityBatch":
    get:
      x-aws-operation-name: ChangeMessageVisibilityBatch
      operationId: GET ChangeMessageVisibilityBatch
      description: <p>Changes the visibility timeout of multiple messages. This is a batch
        version of <code> <a>ChangeMessageVisibility</a>.</code> The result of
        the action on each message is reported individually in the response. You
        can send up to 10 <code> <a>ChangeMessageVisibility</a> </code> requests
        with each <code>ChangeMessageVisibilityBatch</code> action.</p>
        <important> <p>Because the batch request can result in a combination of
        successful and unsuccessful actions, you should check for batch errors
        even when the call returns an HTTP status code of <code>200</code>.</p>
        </important> <p>Some actions take lists of parameters. These lists are
        specified using the <code>param.n</code> notation. Values of
        <code>n</code> are integers starting from 1. For example, a parameter
        list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ChangeMessageVisibilityBatchResult"
        "480":
          description: TooManyEntriesInBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/TooManyEntriesInBatchRequest"
        "481":
          description: EmptyBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/EmptyBatchRequest"
        "482":
          description: BatchEntryIdsNotDistinct
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchEntryIdsNotDistinct"
        "483":
          description: InvalidBatchEntryId
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidBatchEntryId"
      parameters:
        - name: Entries
          in: query
          required: true
          description: A list of receipt handles of the messages for which the visibility
            timeout must be changed.
          schema:
            type: array
            items:
              type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ChangeMessageVisibilityBatch
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: ChangeMessageVisibilityBatch
      operationId: POST ChangeMessageVisibilityBatch
      description: <p>Changes the visibility timeout of multiple messages. This is a batch
        version of <code> <a>ChangeMessageVisibility</a>.</code> The result of
        the action on each message is reported individually in the response. You
        can send up to 10 <code> <a>ChangeMessageVisibility</a> </code> requests
        with each <code>ChangeMessageVisibilityBatch</code> action.</p>
        <important> <p>Because the batch request can result in a combination of
        successful and unsuccessful actions, you should check for batch errors
        even when the call returns an HTTP status code of <code>200</code>.</p>
        </important> <p>Some actions take lists of parameters. These lists are
        specified using the <code>param.n</code> notation. Values of
        <code>n</code> are integers starting from 1. For example, a parameter
        list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ChangeMessageVisibilityBatchResult"
        "480":
          description: TooManyEntriesInBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/TooManyEntriesInBatchRequest"
        "481":
          description: EmptyBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/EmptyBatchRequest"
        "482":
          description: BatchEntryIdsNotDistinct
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchEntryIdsNotDistinct"
        "483":
          description: InvalidBatchEntryId
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidBatchEntryId"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ChangeMessageVisibilityBatch
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Entries:
                  description: A list of receipt handles of the messages for which the
                    visibility timeout must be changed.
                  type: array
                  items:
                    type: string
              required:
                - Entries
  /#Action=CreateQueue:
    get:
      x-aws-operation-name: CreateQueue
      operationId: GET CreateQueue
      description: <p>Creates a new standard or FIFO queue. You can pass one or more
        attributes in the request. Keep the following caveats in mind:</p> <ul>
        <li> <p>If you don't specify the <code>FifoQueue</code> attribute,
        Amazon SQS creates a standard queue.</p> <note> <p>You can't change the
        queue type after you create it and you can't convert an existing
        standard queue into a FIFO queue. You must either create a new FIFO
        queue for your application or delete your existing standard queue and
        recreate it as a FIFO queue. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving">Moving
        From a Standard Queue to a FIFO Queue</a> in the <i>Amazon Simple Queue
        Service Developer Guide</i>. </p> </note> </li> <li> <p>If you don't
        provide a value for an attribute, the queue is created with the default
        value for the attribute.</p> </li> <li> <p>If you delete a queue, you
        must wait at least 60 seconds before creating a queue with the same
        name.</p> </li> </ul> <p>To successfully create a new queue, you must
        provide a queue name that adheres to the <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html">limits
        related to queues</a> and is unique within the scope of your queues.</p>
        <p>To get the queue URL, use the <code> <a>GetQueueUrl</a> </code>
        action. <code> <a>GetQueueUrl</a> </code> requires only the
        <code>QueueName</code> parameter. be aware of existing queue names:</p>
        <ul> <li> <p>If you provide the name of an existing queue along with the
        exact names and values of all the queue's attributes,
        <code>CreateQueue</code> returns the queue URL for the existing
        queue.</p> </li> <li> <p>If the queue name, attribute names, or
        attribute values don't match an existing queue, <code>CreateQueue</code>
        returns an error.</p> </li> </ul> <p>Some actions take lists of
        parameters. These lists are specified using the <code>param.n</code>
        notation. Values of <code>n</code> are integers starting from 1. For
        example, a parameter list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p> <note> <p>Cross-account
        permissions don't apply to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/CreateQueueResult"
        "480":
          description: QueueDeletedRecently
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDeletedRecently"
        "481":
          description: QueueNameExists
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueNameExists"
      parameters:
        - name: QueueName
          in: query
          required: true
          description: "<p>The name of the new queue. The following limits apply to this
            name:</p> <ul> <li> <p>A queue name can have up to 80
            characters.</p> </li> <li> <p>Valid values: alphanumeric characters,
            hyphens (<code>-</code>), and underscores (<code>_</code>).</p>
            </li> <li> <p>A FIFO queue name must end with the <code>.fifo</code>
            suffix.</p> </li> </ul> <p>Queue URLs and names are
            case-sensitive.</p>"
          schema:
            type: string
        - name: Attribute.0.key
          in: query
          schema:
            type: string
        - name: Attribute.0.value
          in: query
          schema:
            type: string
        - name: Attribute.1.key
          in: query
          schema:
            type: string
        - name: Attribute.1.value
          in: query
          schema:
            type: string
        - name: Attribute.2.key
          in: query
          schema:
            type: string
        - name: Attribute.2.value
          in: query
          schema:
            type: string
        - name: Tag.0.key
          in: query
          schema:
            type: string
        - name: Tag.0.value
          in: query
          schema:
            type: string
        - name: Tag.1.key
          in: query
          schema:
            type: string
        - name: Tag.1.value
          in: query
          schema:
            type: string
        - name: Tag.2.key
          in: query
          schema:
            type: string
        - name: Tag.2.value
          in: query
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - CreateQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: CreateQueue
      operationId: POST CreateQueue
      description: <p>Creates a new standard or FIFO queue. You can pass one or more
        attributes in the request. Keep the following caveats in mind:</p> <ul>
        <li> <p>If you don't specify the <code>FifoQueue</code> attribute,
        Amazon SQS creates a standard queue.</p> <note> <p>You can't change the
        queue type after you create it and you can't convert an existing
        standard queue into a FIFO queue. You must either create a new FIFO
        queue for your application or delete your existing standard queue and
        recreate it as a FIFO queue. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving">Moving
        From a Standard Queue to a FIFO Queue</a> in the <i>Amazon Simple Queue
        Service Developer Guide</i>. </p> </note> </li> <li> <p>If you don't
        provide a value for an attribute, the queue is created with the default
        value for the attribute.</p> </li> <li> <p>If you delete a queue, you
        must wait at least 60 seconds before creating a queue with the same
        name.</p> </li> </ul> <p>To successfully create a new queue, you must
        provide a queue name that adheres to the <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html">limits
        related to queues</a> and is unique within the scope of your queues.</p>
        <p>To get the queue URL, use the <code> <a>GetQueueUrl</a> </code>
        action. <code> <a>GetQueueUrl</a> </code> requires only the
        <code>QueueName</code> parameter. be aware of existing queue names:</p>
        <ul> <li> <p>If you provide the name of an existing queue along with the
        exact names and values of all the queue's attributes,
        <code>CreateQueue</code> returns the queue URL for the existing
        queue.</p> </li> <li> <p>If the queue name, attribute names, or
        attribute values don't match an existing queue, <code>CreateQueue</code>
        returns an error.</p> </li> </ul> <p>Some actions take lists of
        parameters. These lists are specified using the <code>param.n</code>
        notation. Values of <code>n</code> are integers starting from 1. For
        example, a parameter list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p> <note> <p>Cross-account
        permissions don't apply to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/CreateQueueResult"
        "480":
          description: QueueDeletedRecently
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDeletedRecently"
        "481":
          description: QueueNameExists
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueNameExists"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - CreateQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                QueueName:
                  description: "<p>The name of the new queue. The following limits apply to
                    this name:</p> <ul> <li> <p>A queue name can have up to 80
                    characters.</p> </li> <li> <p>Valid values: alphanumeric
                    characters, hyphens (<code>-</code>), and underscores
                    (<code>_</code>).</p> </li> <li> <p>A FIFO queue name must
                    end with the <code>.fifo</code> suffix.</p> </li> </ul>
                    <p>Queue URLs and names are case-sensitive.</p>"
                  type: string
                Attribute.0.key:
                  type: string
                Attribute.0.value:
                  type: string
                Attribute.1.key:
                  type: string
                Attribute.1.value:
                  type: string
                Attribute.2.key:
                  type: string
                Attribute.2.value:
                  type: string
                Tag.0.key:
                  type: string
                Tag.0.value:
                  type: string
                Tag.1.key:
                  type: string
                Tag.1.value:
                  type: string
                Tag.2.key:
                  type: string
                Tag.2.value:
                  type: string
              required:
                - QueueName
  "/{AccountNumber}/{QueueName}/#Action=DeleteMessage":
    get:
      x-aws-operation-name: DeleteMessage
      operationId: GET DeleteMessage
      description: <p>Deletes the specified message from the specified queue. To select the
        message to delete, use the <code>ReceiptHandle</code> of the message
        (<i>not</i> the <code>MessageId</code> which you receive when you send
        the message). Amazon SQS can delete a message from a queue even if a
        visibility timeout setting causes the message to be locked by another
        consumer. Amazon SQS automatically deletes messages left in a queue
        longer than the retention period configured for the queue. </p> <note>
        <p>The <code>ReceiptHandle</code> is associated with a <i>specific
        instance</i> of receiving a message. If you receive a message more than
        once, the <code>ReceiptHandle</code> is different each time you receive
        a message. When you use the <code>DeleteMessage</code> action, you must
        provide the most recently received <code>ReceiptHandle</code> for the
        message (otherwise, the request succeeds, but the message might not be
        deleted).</p> <p>For standard queues, it is possible to receive a
        message even after you delete it. This might happen on rare occasions if
        one of the servers which stores a copy of the message is unavailable
        when you send the request to delete the message. The copy remains on the
        server and might be returned to you during a subsequent receive request.
        You should ensure that your application is idempotent, so that receiving
        a message more than once does not cause issues.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidIdFormat
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidIdFormat"
        "481":
          description: ReceiptHandleIsInvalid
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ReceiptHandleIsInvalid"
      parameters:
        - name: ReceiptHandle
          in: query
          required: true
          description: The receipt handle associated with the message to delete.
          schema:
            type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: DeleteMessage
      operationId: POST DeleteMessage
      description: <p>Deletes the specified message from the specified queue. To select the
        message to delete, use the <code>ReceiptHandle</code> of the message
        (<i>not</i> the <code>MessageId</code> which you receive when you send
        the message). Amazon SQS can delete a message from a queue even if a
        visibility timeout setting causes the message to be locked by another
        consumer. Amazon SQS automatically deletes messages left in a queue
        longer than the retention period configured for the queue. </p> <note>
        <p>The <code>ReceiptHandle</code> is associated with a <i>specific
        instance</i> of receiving a message. If you receive a message more than
        once, the <code>ReceiptHandle</code> is different each time you receive
        a message. When you use the <code>DeleteMessage</code> action, you must
        provide the most recently received <code>ReceiptHandle</code> for the
        message (otherwise, the request succeeds, but the message might not be
        deleted).</p> <p>For standard queues, it is possible to receive a
        message even after you delete it. This might happen on rare occasions if
        one of the servers which stores a copy of the message is unavailable
        when you send the request to delete the message. The copy remains on the
        server and might be returned to you during a subsequent receive request.
        You should ensure that your application is idempotent, so that receiving
        a message more than once does not cause issues.</p> </note>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidIdFormat
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidIdFormat"
        "481":
          description: ReceiptHandleIsInvalid
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ReceiptHandleIsInvalid"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                ReceiptHandle:
                  description: The receipt handle associated with the message to delete.
                  type: string
              required:
                - ReceiptHandle
  "/{AccountNumber}/{QueueName}/#Action=DeleteMessageBatch":
    get:
      x-aws-operation-name: DeleteMessageBatch
      operationId: GET DeleteMessageBatch
      description: <p>Deletes up to ten messages from the specified queue. This is a batch
        version of <code> <a>DeleteMessage</a>.</code> The result of the action
        on each message is reported individually in the response.</p>
        <important> <p>Because the batch request can result in a combination of
        successful and unsuccessful actions, you should check for batch errors
        even when the call returns an HTTP status code of <code>200</code>.</p>
        </important> <p>Some actions take lists of parameters. These lists are
        specified using the <code>param.n</code> notation. Values of
        <code>n</code> are integers starting from 1. For example, a parameter
        list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/DeleteMessageBatchResult"
        "480":
          description: TooManyEntriesInBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/TooManyEntriesInBatchRequest"
        "481":
          description: EmptyBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/EmptyBatchRequest"
        "482":
          description: BatchEntryIdsNotDistinct
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchEntryIdsNotDistinct"
        "483":
          description: InvalidBatchEntryId
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidBatchEntryId"
      parameters:
        - name: Entries
          in: query
          required: true
          description: A list of receipt handles for the messages to be deleted.
          schema:
            type: array
            items:
              type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteMessageBatch
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: DeleteMessageBatch
      operationId: POST DeleteMessageBatch
      description: <p>Deletes up to ten messages from the specified queue. This is a batch
        version of <code> <a>DeleteMessage</a>.</code> The result of the action
        on each message is reported individually in the response.</p>
        <important> <p>Because the batch request can result in a combination of
        successful and unsuccessful actions, you should check for batch errors
        even when the call returns an HTTP status code of <code>200</code>.</p>
        </important> <p>Some actions take lists of parameters. These lists are
        specified using the <code>param.n</code> notation. Values of
        <code>n</code> are integers starting from 1. For example, a parameter
        list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/DeleteMessageBatchResult"
        "480":
          description: TooManyEntriesInBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/TooManyEntriesInBatchRequest"
        "481":
          description: EmptyBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/EmptyBatchRequest"
        "482":
          description: BatchEntryIdsNotDistinct
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchEntryIdsNotDistinct"
        "483":
          description: InvalidBatchEntryId
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidBatchEntryId"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteMessageBatch
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Entries:
                  description: A list of receipt handles for the messages to be deleted.
                  type: array
                  items:
                    type: string
              required:
                - Entries
  "/{AccountNumber}/{QueueName}/#Action=DeleteQueue":
    get:
      x-aws-operation-name: DeleteQueue
      operationId: GET DeleteQueue
      description: "<p>Deletes the queue specified by the <code>QueueUrl</code>, regardless
        of the queue's contents. If the specified queue doesn't exist, Amazon
        SQS returns a successful response.</p> <important> <p>Be careful with
        the <code>DeleteQueue</code> action: When you delete a queue, any
        messages in the queue are no longer available. </p> </important> <p>When
        you delete a queue, the deletion process takes up to 60 seconds.
        Requests you send involving that queue during the 60 seconds might
        succeed. For example, a <code> <a>SendMessage</a> </code> request might
        succeed, but after 60 seconds the queue and the message you sent no
        longer exist.</p> <p>When you delete a queue, you must wait at least 60
        seconds before creating a queue with the same name.</p> <note>
        <p>Cross-account permissions don't apply to this action. For more
        information, see <a
        href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeve\
        loperGuide/sqs-customer-managed-policy-examples.html#grant-cross-accoun\
        t-permissions-to-role-and-user-name\">Grant Cross-Account Permissions to
        a Role and a User Name</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> </note>"
      responses:
        "200":
          description: Success
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: DeleteQueue
      operationId: POST DeleteQueue
      description: "<p>Deletes the queue specified by the <code>QueueUrl</code>, regardless
        of the queue's contents. If the specified queue doesn't exist, Amazon
        SQS returns a successful response.</p> <important> <p>Be careful with
        the <code>DeleteQueue</code> action: When you delete a queue, any
        messages in the queue are no longer available. </p> </important> <p>When
        you delete a queue, the deletion process takes up to 60 seconds.
        Requests you send involving that queue during the 60 seconds might
        succeed. For example, a <code> <a>SendMessage</a> </code> request might
        succeed, but after 60 seconds the queue and the message you sent no
        longer exist.</p> <p>When you delete a queue, you must wait at least 60
        seconds before creating a queue with the same name.</p> <note>
        <p>Cross-account permissions don't apply to this action. For more
        information, see <a
        href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeve\
        loperGuide/sqs-customer-managed-policy-examples.html#grant-cross-accoun\
        t-permissions-to-role-and-user-name\">Grant Cross-Account Permissions to
        a Role and a User Name</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> </note>"
      responses:
        "200":
          description: Success
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - DeleteQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
  "/{AccountNumber}/{QueueName}/#Action=GetQueueAttributes":
    get:
      x-aws-operation-name: GetQueueAttributes
      operationId: GET GetQueueAttributes
      description: <p>Gets attributes for the specified queue.</p> <note> <p>To determine
        whether a queue is <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO</a>,
        you can check whether <code>QueueName</code> ends with the
        <code>.fifo</code> suffix.</p> </note> <p>Some actions take lists of
        parameters. These lists are specified using the <code>param.n</code>
        notation. Values of <code>n</code> are integers starting from 1. For
        example, a parameter list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetQueueAttributesResult"
        "480":
          description: InvalidAttributeName
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidAttributeName"
      parameters:
        - name: AttributeNames
          in: query
          required: false
          description: <p>A list of attributes for which to retrieve information.</p>
            <note> <p>In the future, new attributes might be added. If you write
            code that calls this action, we recommend that you structure your
            code so that it can handle new attributes gracefully.</p> </note>
            <p>The following attributes are supported:</p> <ul> <li> <p>
            <code>All</code> - Returns all values. </p> </li> <li> <p>
            <code>ApproximateNumberOfMessages</code> - Returns the approximate
            number of messages available for retrieval from the queue.</p> </li>
            <li> <p> <code>ApproximateNumberOfMessagesDelayed</code> - Returns
            the approximate number of messages in the queue that are delayed and
            not available for reading immediately. This can happen when the
            queue is configured as a delay queue or when a message has been sent
            with a delay parameter.</p> </li> <li> <p>
            <code>ApproximateNumberOfMessagesNotVisible</code> - Returns the
            approximate number of messages that are in flight. Messages are
            considered to be <i>in flight</i> if they have been sent to a client
            but have not yet been deleted or have not yet reached the end of
            their visibility window. </p> </li> <li> <p>
            <code>CreatedTimestamp</code> - Returns the time when the queue was
            created in seconds (<a
            href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a>).</p>
            </li> <li> <p> <code>DelaySeconds</code> - Returns the default delay
            on the queue in seconds.</p> </li> <li> <p>
            <code>LastModifiedTimestamp</code> - Returns the time when the queue
            was last changed in seconds (<a
            href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a>).</p>
            </li> <li> <p> <code>MaximumMessageSize</code> - Returns the limit
            of how many bytes a message can contain before Amazon SQS rejects
            it.</p> </li> <li> <p> <code>MessageRetentionPeriod</code> - Returns
            the length of time, in seconds, for which Amazon SQS retains a
            message.</p> </li> <li> <p> <code>Policy</code> - Returns the policy
            of the queue.</p> </li> <li> <p> <code>QueueArn</code> - Returns the
            Amazon resource name (ARN) of the queue.</p> </li> <li> <p>
            <code>ReceiveMessageWaitTimeSeconds</code> - Returns the length of
            time, in seconds, for which the <code>ReceiveMessage</code> action
            waits for a message to arrive. </p> </li> <li> <p>
            <code>RedrivePolicy</code> - Returns the string that includes the
            parameters for dead-letter queue functionality of the source queue.
            For more information about the redrive policy and dead-letter
            queues, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using
            Amazon SQS Dead-Letter Queues</a> in the <i>Amazon Simple Queue
            Service Developer Guide</i>. </p> <ul> <li> <p>
            <code>deadLetterTargetArn</code> - The Amazon Resource Name (ARN) of
            the dead-letter queue to which Amazon SQS moves messages after the
            value of <code>maxReceiveCount</code> is exceeded.</p> </li> <li>
            <p> <code>maxReceiveCount</code> - The number of times a message is
            delivered to the source queue before being moved to the dead-letter
            queue. When the <code>ReceiveCount</code> for a message exceeds the
            <code>maxReceiveCount</code> for a queue, Amazon SQS moves the
            message to the dead-letter-queue.</p> </li> </ul> </li> <li> <p>
            <code>VisibilityTimeout</code> - Returns the visibility timeout for
            the queue. For more information about the visibility timeout, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
            Timeout</a> in the <i>Amazon Simple Queue Service Developer
            Guide</i>. </p> </li> </ul> <p>The following attributes apply only
            to <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>
            <ul> <li> <p> <code>KmsMasterKeyId</code> - Returns the ID of an
            AWS-managed customer master key (CMK) for Amazon SQS or a custom
            CMK. For more information, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key
            Terms</a>. </p> </li> <li> <p>
            <code>KmsDataKeyReusePeriodSeconds</code> - Returns the length of
            time, in seconds, for which Amazon SQS can reuse a data key to
            encrypt or decrypt messages before calling AWS KMS again. For more
            information, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How
            Does the Data Key Reuse Period Work?</a>. </p> </li> </ul> <p>The
            following attributes apply only to <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO
            (first-in-first-out) queues</a>:</p> <ul> <li> <p>
            <code>FifoQueue</code> - Returns whether the queue is FIFO. For more
            information, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-understanding-logic">FIFO
            Queue Logic</a> in the <i>Amazon Simple Queue Service Developer
            Guide</i>.</p> <note> <p>To determine whether a queue is <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO</a>,
            you can check whether <code>QueueName</code> ends with the
            <code>.fifo</code> suffix.</p> </note> </li> <li> <p>
            <code>ContentBasedDeduplication</code> - Returns whether
            content-based deduplication is enabled for the queue. For more
            information, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing">Exactly-Once
            Processing</a> in the <i>Amazon Simple Queue Service Developer
            Guide</i>. </p> </li> </ul>
          schema:
            type: array
            items:
              type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetQueueAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: GetQueueAttributes
      operationId: POST GetQueueAttributes
      description: <p>Gets attributes for the specified queue.</p> <note> <p>To determine
        whether a queue is <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO</a>,
        you can check whether <code>QueueName</code> ends with the
        <code>.fifo</code> suffix.</p> </note> <p>Some actions take lists of
        parameters. These lists are specified using the <code>param.n</code>
        notation. Values of <code>n</code> are integers starting from 1. For
        example, a parameter list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetQueueAttributesResult"
        "480":
          description: InvalidAttributeName
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidAttributeName"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetQueueAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                AttributeNames:
                  description: <p>A list of attributes for which to retrieve
                    information.</p> <note> <p>In the future, new attributes
                    might be added. If you write code that calls this action, we
                    recommend that you structure your code so that it can handle
                    new attributes gracefully.</p> </note> <p>The following
                    attributes are supported:</p> <ul> <li> <p> <code>All</code>
                    - Returns all values. </p> </li> <li> <p>
                    <code>ApproximateNumberOfMessages</code> - Returns the
                    approximate number of messages available for retrieval from
                    the queue.</p> </li> <li> <p>
                    <code>ApproximateNumberOfMessagesDelayed</code> - Returns
                    the approximate number of messages in the queue that are
                    delayed and not available for reading immediately. This can
                    happen when the queue is configured as a delay queue or when
                    a message has been sent with a delay parameter.</p> </li>
                    <li> <p> <code>ApproximateNumberOfMessagesNotVisible</code>
                    - Returns the approximate number of messages that are in
                    flight. Messages are considered to be <i>in flight</i> if
                    they have been sent to a client but have not yet been
                    deleted or have not yet reached the end of their visibility
                    window. </p> </li> <li> <p> <code>CreatedTimestamp</code> -
                    Returns the time when the queue was created in seconds (<a
                    href="http://en.wikipedia.org/wiki/Unix_time">epoch
                    time</a>).</p> </li> <li> <p> <code>DelaySeconds</code> -
                    Returns the default delay on the queue in seconds.</p> </li>
                    <li> <p> <code>LastModifiedTimestamp</code> - Returns the
                    time when the queue was last changed in seconds (<a
                    href="http://en.wikipedia.org/wiki/Unix_time">epoch
                    time</a>).</p> </li> <li> <p>
                    <code>MaximumMessageSize</code> - Returns the limit of how
                    many bytes a message can contain before Amazon SQS rejects
                    it.</p> </li> <li> <p> <code>MessageRetentionPeriod</code> -
                    Returns the length of time, in seconds, for which Amazon SQS
                    retains a message.</p> </li> <li> <p> <code>Policy</code> -
                    Returns the policy of the queue.</p> </li> <li> <p>
                    <code>QueueArn</code> - Returns the Amazon resource name
                    (ARN) of the queue.</p> </li> <li> <p>
                    <code>ReceiveMessageWaitTimeSeconds</code> - Returns the
                    length of time, in seconds, for which the
                    <code>ReceiveMessage</code> action waits for a message to
                    arrive. </p> </li> <li> <p> <code>RedrivePolicy</code> -
                    Returns the string that includes the parameters for
                    dead-letter queue functionality of the source queue. For
                    more information about the redrive policy and dead-letter
                    queues, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using
                    Amazon SQS Dead-Letter Queues</a> in the <i>Amazon Simple
                    Queue Service Developer Guide</i>. </p> <ul> <li> <p>
                    <code>deadLetterTargetArn</code> - The Amazon Resource Name
                    (ARN) of the dead-letter queue to which Amazon SQS moves
                    messages after the value of <code>maxReceiveCount</code> is
                    exceeded.</p> </li> <li> <p> <code>maxReceiveCount</code> -
                    The number of times a message is delivered to the source
                    queue before being moved to the dead-letter queue. When the
                    <code>ReceiveCount</code> for a message exceeds the
                    <code>maxReceiveCount</code> for a queue, Amazon SQS moves
                    the message to the dead-letter-queue.</p> </li> </ul> </li>
                    <li> <p> <code>VisibilityTimeout</code> - Returns the
                    visibility timeout for the queue. For more information about
                    the visibility timeout, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
                    Timeout</a> in the <i>Amazon Simple Queue Service Developer
                    Guide</i>. </p> </li> </ul> <p>The following attributes
                    apply only to <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>
                    <ul> <li> <p> <code>KmsMasterKeyId</code> - Returns the ID
                    of an AWS-managed customer master key (CMK) for Amazon SQS
                    or a custom CMK. For more information, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key
                    Terms</a>. </p> </li> <li> <p>
                    <code>KmsDataKeyReusePeriodSeconds</code> - Returns the
                    length of time, in seconds, for which Amazon SQS can reuse a
                    data key to encrypt or decrypt messages before calling AWS
                    KMS again. For more information, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How
                    Does the Data Key Reuse Period Work?</a>. </p> </li> </ul>
                    <p>The following attributes apply only to <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO
                    (first-in-first-out) queues</a>:</p> <ul> <li> <p>
                    <code>FifoQueue</code> - Returns whether the queue is FIFO.
                    For more information, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-understanding-logic">FIFO
                    Queue Logic</a> in the <i>Amazon Simple Queue Service
                    Developer Guide</i>.</p> <note> <p>To determine whether a
                    queue is <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO</a>,
                    you can check whether <code>QueueName</code> ends with the
                    <code>.fifo</code> suffix.</p> </note> </li> <li> <p>
                    <code>ContentBasedDeduplication</code> - Returns whether
                    content-based deduplication is enabled for the queue. For
                    more information, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing">Exactly-Once
                    Processing</a> in the <i>Amazon Simple Queue Service
                    Developer Guide</i>. </p> </li> </ul>
                  type: array
                  items:
                    type: string
  /#Action=GetQueueUrl:
    get:
      x-aws-operation-name: GetQueueUrl
      operationId: GET GetQueueUrl
      description: <p>Returns the URL of an existing Amazon SQS queue.</p> <p>To access a
        queue that belongs to another AWS account, use the
        <code>QueueOwnerAWSAccountId</code> parameter to specify the account ID
        of the queue's owner. The queue's owner must grant you permission to
        access the queue. For more information about shared queue access, see
        <code> <a>AddPermission</a> </code> or see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue">Allow
        Developers to Write Messages to a Shared Queue</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>. </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetQueueUrlResult"
        "480":
          description: QueueDoesNotExist
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDoesNotExist"
      parameters:
        - name: QueueName
          in: query
          required: true
          description: "<p>The name of the queue whose URL must be fetched. Maximum 80
            characters. Valid values: alphanumeric characters, hyphens
            (<code>-</code>), and underscores (<code>_</code>).</p> <p>Queue
            URLs and names are case-sensitive.</p>"
          schema:
            type: string
        - name: QueueOwnerAWSAccountId
          in: query
          required: false
          description: The AWS account ID of the account that created the queue.
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetQueueUrl
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: GetQueueUrl
      operationId: POST GetQueueUrl
      description: <p>Returns the URL of an existing Amazon SQS queue.</p> <p>To access a
        queue that belongs to another AWS account, use the
        <code>QueueOwnerAWSAccountId</code> parameter to specify the account ID
        of the queue's owner. The queue's owner must grant you permission to
        access the queue. For more information about shared queue access, see
        <code> <a>AddPermission</a> </code> or see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue">Allow
        Developers to Write Messages to a Shared Queue</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>. </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/GetQueueUrlResult"
        "480":
          description: QueueDoesNotExist
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDoesNotExist"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - GetQueueUrl
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                QueueName:
                  description: "<p>The name of the queue whose URL must be fetched. Maximum
                    80 characters. Valid values: alphanumeric characters,
                    hyphens (<code>-</code>), and underscores
                    (<code>_</code>).</p> <p>Queue URLs and names are
                    case-sensitive.</p>"
                  type: string
                QueueOwnerAWSAccountId:
                  description: The AWS account ID of the account that created the queue.
                  type: string
              required:
                - QueueName
  "/{AccountNumber}/{QueueName}/#Action=ListDeadLetterSourceQueues":
    get:
      x-aws-operation-name: ListDeadLetterSourceQueues
      operationId: GET ListDeadLetterSourceQueues
      description: <p>Returns a list of your queues that have the
        <code>RedrivePolicy</code> queue attribute configured with a dead-letter
        queue.</p> <p>For more information about using dead-letter queues, see
        <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using
        Amazon SQS Dead-Letter Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ListDeadLetterSourceQueuesResult"
        "480":
          description: QueueDoesNotExist
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDoesNotExist"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListDeadLetterSourceQueues
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: ListDeadLetterSourceQueues
      operationId: POST ListDeadLetterSourceQueues
      description: <p>Returns a list of your queues that have the
        <code>RedrivePolicy</code> queue attribute configured with a dead-letter
        queue.</p> <p>For more information about using dead-letter queues, see
        <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using
        Amazon SQS Dead-Letter Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ListDeadLetterSourceQueuesResult"
        "480":
          description: QueueDoesNotExist
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDoesNotExist"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListDeadLetterSourceQueues
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
  "/{AccountNumber}/{QueueName}/#Action=ListQueueTags":
    get:
      x-aws-operation-name: ListQueueTags
      operationId: GET ListQueueTags
      description: <p>List all cost allocation tags added to the specified Amazon SQS
        queue. For an overview, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging
        Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <note> <p>Cross-account permissions don't apply
        to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ListQueueTagsResult"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListQueueTags
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: ListQueueTags
      operationId: POST ListQueueTags
      description: <p>List all cost allocation tags added to the specified Amazon SQS
        queue. For an overview, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging
        Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <note> <p>Cross-account permissions don't apply
        to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ListQueueTagsResult"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListQueueTags
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
  /#Action=ListQueues:
    get:
      x-aws-operation-name: ListQueues
      operationId: GET ListQueues
      description: <p>Returns a list of your queues. The maximum number of queues that can
        be returned is 1,000. If you specify a value for the optional
        <code>QueueNamePrefix</code> parameter, only queues with a name that
        begins with the specified value are returned.</p> <note>
        <p>Cross-account permissions don't apply to this action. For more
        information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ListQueuesResult"
      parameters:
        - name: QueueNamePrefix
          in: query
          required: false
          description: <p>A string to use for filtering the list results. Only those queues
            whose name begins with the specified string are returned.</p>
            <p>Queue URLs and names are case-sensitive.</p>
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListQueues
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: ListQueues
      operationId: POST ListQueues
      description: <p>Returns a list of your queues. The maximum number of queues that can
        be returned is 1,000. If you specify a value for the optional
        <code>QueueNamePrefix</code> parameter, only queues with a name that
        begins with the specified value are returned.</p> <note>
        <p>Cross-account permissions don't apply to this action. For more
        information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ListQueuesResult"
      parameters:
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ListQueues
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                QueueNamePrefix:
                  description: <p>A string to use for filtering the list results. Only
                    those queues whose name begins with the specified string are
                    returned.</p> <p>Queue URLs and names are
                    case-sensitive.</p>
                  type: string
  "/{AccountNumber}/{QueueName}/#Action=PurgeQueue":
    get:
      x-aws-operation-name: PurgeQueue
      operationId: GET PurgeQueue
      description: <p>Deletes the messages in a queue specified by the
        <code>QueueURL</code> parameter.</p> <important> <p>When you use the
        <code>PurgeQueue</code> action, you can't retrieve any messages deleted
        from a queue.</p> <p>The message deletion process takes up to 60
        seconds. We recommend waiting for 60 seconds regardless of your queue's
        size. </p> </important> <p>Messages sent to the queue <i>before</i> you
        call <code>PurgeQueue</code> might be received but are deleted within
        the next minute.</p> <p>Messages sent to the queue <i>after</i> you call
        <code>PurgeQueue</code> might be deleted while the queue is being
        purged.</p>
      responses:
        "200":
          description: Success
        "480":
          description: QueueDoesNotExist
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDoesNotExist"
        "481":
          description: PurgeQueueInProgress
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PurgeQueueInProgress"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - PurgeQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: PurgeQueue
      operationId: POST PurgeQueue
      description: <p>Deletes the messages in a queue specified by the
        <code>QueueURL</code> parameter.</p> <important> <p>When you use the
        <code>PurgeQueue</code> action, you can't retrieve any messages deleted
        from a queue.</p> <p>The message deletion process takes up to 60
        seconds. We recommend waiting for 60 seconds regardless of your queue's
        size. </p> </important> <p>Messages sent to the queue <i>before</i> you
        call <code>PurgeQueue</code> might be received but are deleted within
        the next minute.</p> <p>Messages sent to the queue <i>after</i> you call
        <code>PurgeQueue</code> might be deleted while the queue is being
        purged.</p>
      responses:
        "200":
          description: Success
        "480":
          description: QueueDoesNotExist
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/QueueDoesNotExist"
        "481":
          description: PurgeQueueInProgress
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/PurgeQueueInProgress"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - PurgeQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
  "/{AccountNumber}/{QueueName}/#Action=ReceiveMessage":
    get:
      x-aws-operation-name: ReceiveMessage
      operationId: GET ReceiveMessage
      description: <p>Retrieves one or more messages (up to 10), from the specified queue.
        Using the <code>WaitTimeSeconds</code> parameter enables long-poll
        support. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html">Amazon
        SQS Long Polling</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>. </p> <p>Short poll is the default behavior where a weighted
        random set of machines is sampled on a <code>ReceiveMessage</code> call.
        Thus, only the messages on the sampled machines are returned. If the
        number of messages in the queue is small (fewer than 1,000), you most
        likely get fewer messages than you requested per
        <code>ReceiveMessage</code> call. If the number of messages in the queue
        is extremely small, you might not receive any messages in a particular
        <code>ReceiveMessage</code> response. If this happens, repeat the
        request. </p> <p>For each message returned, the response includes the
        following:</p> <ul> <li> <p>The message body.</p> </li> <li> <p>An MD5
        digest of the message body. For information about MD5, see <a
        href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p> </li> <li>
        <p>The <code>MessageId</code> you received when you sent the message to
        the queue.</p> </li> <li> <p>The receipt handle.</p> </li> <li> <p>The
        message attributes.</p> </li> <li> <p>An MD5 digest of the message
        attributes.</p> </li> </ul> <p>The receipt handle is the identifier you
        must provide when deleting the message. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html">Queue
        and Message Identifiers</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <p>You can provide the
        <code>VisibilityTimeout</code> parameter in your request. The parameter
        is applied to the messages that Amazon SQS returns in the response. If
        you don't include the parameter, the overall visibility timeout for the
        queue is used for the returned messages. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
        Timeout</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>.</p> <p>A message that isn't deleted or a message whose
        visibility isn't extended before the visibility timeout expires counts
        as a failed receive. Depending on the configuration of the queue, the
        message might be sent to the dead-letter queue.</p> <note> <p>In the
        future, new attributes might be added. If you write code that calls this
        action, we recommend that you structure your code so that it can handle
        new attributes gracefully.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ReceiveMessageResult"
        "480":
          description: OverLimit
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/OverLimit"
      parameters:
        - name: AttributeNames
          in: query
          required: false
          description: <p>A list of attributes that need to be returned along with each
            message. These attributes include:</p> <ul> <li> <p>
            <code>All</code> - Returns all values.</p> </li> <li> <p>
            <code>ApproximateFirstReceiveTimestamp</code> - Returns the time the
            message was first received from the queue (<a
            href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in
            milliseconds).</p> </li> <li> <p>
            <code>ApproximateReceiveCount</code> - Returns the number of times a
            message has been received from the queue but not deleted.</p> </li>
            <li> <p> <code>AWSTraceHeader</code> - Returns the AWS X-Ray trace
            header string. </p> </li> <li> <p> <code>SenderId</code> </p> <ul>
            <li> <p>For an IAM user, returns the IAM user ID, for example
            <code>ABCDEFGHI1JKLMNOPQ23R</code>.</p> </li> <li> <p>For an IAM
            role, returns the IAM role ID, for example
            <code>ABCDE1F2GH3I4JK5LMNOP:i-a123b456</code>.</p> </li> </ul> </li>
            <li> <p> <code>SentTimestamp</code> - Returns the time the message
            was sent to the queue (<a
            href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in
            milliseconds).</p> </li> <li> <p>
            <code>MessageDeduplicationId</code> - Returns the value provided by
            the producer that calls the <code> <a>SendMessage</a> </code>
            action.</p> </li> <li> <p> <code>MessageGroupId</code> - Returns the
            value provided by the producer that calls the <code>
            <a>SendMessage</a> </code> action. Messages with the same
            <code>MessageGroupId</code> are returned in sequence.</p> </li> <li>
            <p> <code>SequenceNumber</code> - Returns the value provided by
            Amazon SQS.</p> </li> </ul>
          schema:
            type: array
            items:
              type: string
        - name: MessageAttributeNames
          in: query
          required: false
          description: <p>The name of the message attribute, where <i>N</i> is the
            index.</p> <ul> <li> <p>The name can contain alphanumeric characters
            and the underscore (<code>_</code>), hyphen (<code>-</code>), and
            period (<code>.</code>).</p> </li> <li> <p>The name is
            case-sensitive and must be unique among all attribute names for the
            message.</p> </li> <li> <p>The name must not start with AWS-reserved
            prefixes such as <code>AWS.</code> or <code>Amazon.</code> (or any
            casing variants).</p> </li> <li> <p>The name must not start or end
            with a period (<code>.</code>), and it should not have periods in
            succession (<code>..</code>).</p> </li> <li> <p>The name can be up
            to 256 characters long.</p> </li> </ul> <p>When using
            <code>ReceiveMessage</code>, you can send a list of attribute names
            to receive, or you can return all of the attributes by specifying
            <code>All</code> or <code>.*</code> in your request. You can also
            use all message attributes starting with a prefix, for example
            <code>bar.*</code>.</p>
          schema:
            type: array
            items:
              type: string
        - name: MaxNumberOfMessages
          in: query
          required: false
          description: "The maximum number of messages to return. Amazon SQS never returns
            more messages than this value (however, fewer messages might be
            returned). Valid values: 1 to 10. Default: 1."
          schema:
            type: integer
        - name: VisibilityTimeout
          in: query
          required: false
          description: The duration (in seconds) that the received messages are hidden from
            subsequent retrieve requests after being retrieved by a
            <code>ReceiveMessage</code> request.
          schema:
            type: integer
        - name: WaitTimeSeconds
          in: query
          required: false
          description: The duration (in seconds) for which the call waits for a message to
            arrive in the queue before returning. If a message is available, the
            call returns sooner than <code>WaitTimeSeconds</code>. If no
            messages are available and the wait time expires, the call returns
            successfully with an empty list of messages.
          schema:
            type: integer
        - name: ReceiveRequestAttemptId
          in: query
          required: false
          description: <p>This parameter applies only to FIFO (first-in-first-out)
            queues.</p> <p>The token used for deduplication of
            <code>ReceiveMessage</code> calls. If a networking issue occurs
            after a <code>ReceiveMessage</code> action, and instead of a
            response you receive a generic error, you can retry the same action
            with an identical <code>ReceiveRequestAttemptId</code> to retrieve
            the same set of messages, even if their visibility timeout has not
            yet expired.</p> <ul> <li> <p>You can use
            <code>ReceiveRequestAttemptId</code> only for 5 minutes after a
            <code>ReceiveMessage</code> action.</p> </li> <li> <p>When you set
            <code>FifoQueue</code>, a caller of the <code>ReceiveMessage</code>
            action can provide a <code>ReceiveRequestAttemptId</code>
            explicitly.</p> </li> <li> <p>If a caller of the
            <code>ReceiveMessage</code> action doesn't provide a
            <code>ReceiveRequestAttemptId</code>, Amazon SQS generates a
            <code>ReceiveRequestAttemptId</code>.</p> </li> <li> <p>You can
            retry the <code>ReceiveMessage</code> action with the same
            <code>ReceiveRequestAttemptId</code> if none of the messages have
            been modified (deleted or had their visibility changes).</p> </li>
            <li> <p>During a visibility timeout, subsequent calls with the same
            <code>ReceiveRequestAttemptId</code> return the same messages and
            receipt handles. If a retry occurs within the deduplication
            interval, it resets the visibility timeout. For more information,
            see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
            Timeout</a> in the <i>Amazon Simple Queue Service Developer
            Guide</i>.</p> <important> <p>If a caller of the
            <code>ReceiveMessage</code> action still processes messages when the
            visibility timeout expires and messages become visible, another
            worker consuming from the same queue can receive the same messages
            and therefore process duplicates. Also, if a consumer whose message
            processing time is longer than the visibility timeout tries to
            delete the processed messages, the action fails with an error.</p>
            <p>To mitigate this effect, ensure that your application observes a
            safe threshold before the visibility timeout expires and extend the
            visibility timeout as necessary.</p> </important> </li> <li>
            <p>While messages with a particular <code>MessageGroupId</code> are
            invisible, no more messages belonging to the same
            <code>MessageGroupId</code> are returned until the visibility
            timeout expires. You can still receive messages with another
            <code>MessageGroupId</code> as long as it is also visible.</p> </li>
            <li> <p>If a caller of <code>ReceiveMessage</code> can't track the
            <code>ReceiveRequestAttemptId</code>, no retries work until the
            original visibility timeout expires. As a result, delays might occur
            but the messages in the queue remain in a strict order.</p> </li>
            </ul> <p>The length of <code>ReceiveRequestAttemptId</code> is 128
            characters. <code>ReceiveRequestAttemptId</code> can contain
            alphanumeric characters (<code>a-z</code>, <code>A-Z</code>,
            <code>0-9</code>) and punctuation
            (<code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>).</p>
            <p>For best practices of using <code>ReceiveRequestAttemptId</code>,
            see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html">Using
            the ReceiveRequestAttemptId Request Parameter</a> in the <i>Amazon
            Simple Queue Service Developer Guide</i>.</p>
          schema:
            type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ReceiveMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: ReceiveMessage
      operationId: POST ReceiveMessage
      description: <p>Retrieves one or more messages (up to 10), from the specified queue.
        Using the <code>WaitTimeSeconds</code> parameter enables long-poll
        support. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html">Amazon
        SQS Long Polling</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>. </p> <p>Short poll is the default behavior where a weighted
        random set of machines is sampled on a <code>ReceiveMessage</code> call.
        Thus, only the messages on the sampled machines are returned. If the
        number of messages in the queue is small (fewer than 1,000), you most
        likely get fewer messages than you requested per
        <code>ReceiveMessage</code> call. If the number of messages in the queue
        is extremely small, you might not receive any messages in a particular
        <code>ReceiveMessage</code> response. If this happens, repeat the
        request. </p> <p>For each message returned, the response includes the
        following:</p> <ul> <li> <p>The message body.</p> </li> <li> <p>An MD5
        digest of the message body. For information about MD5, see <a
        href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p> </li> <li>
        <p>The <code>MessageId</code> you received when you sent the message to
        the queue.</p> </li> <li> <p>The receipt handle.</p> </li> <li> <p>The
        message attributes.</p> </li> <li> <p>An MD5 digest of the message
        attributes.</p> </li> </ul> <p>The receipt handle is the identifier you
        must provide when deleting the message. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html">Queue
        and Message Identifiers</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <p>You can provide the
        <code>VisibilityTimeout</code> parameter in your request. The parameter
        is applied to the messages that Amazon SQS returns in the response. If
        you don't include the parameter, the overall visibility timeout for the
        queue is used for the returned messages. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
        Timeout</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>.</p> <p>A message that isn't deleted or a message whose
        visibility isn't extended before the visibility timeout expires counts
        as a failed receive. Depending on the configuration of the queue, the
        message might be sent to the dead-letter queue.</p> <note> <p>In the
        future, new attributes might be added. If you write code that calls this
        action, we recommend that you structure your code so that it can handle
        new attributes gracefully.</p> </note>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/ReceiveMessageResult"
        "480":
          description: OverLimit
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/OverLimit"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - ReceiveMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                AttributeNames:
                  description: <p>A list of attributes that need to be returned along with
                    each message. These attributes include:</p> <ul> <li> <p>
                    <code>All</code> - Returns all values.</p> </li> <li> <p>
                    <code>ApproximateFirstReceiveTimestamp</code> - Returns the
                    time the message was first received from the queue (<a
                    href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a>
                    in milliseconds).</p> </li> <li> <p>
                    <code>ApproximateReceiveCount</code> - Returns the number of
                    times a message has been received from the queue but not
                    deleted.</p> </li> <li> <p> <code>AWSTraceHeader</code> -
                    Returns the AWS X-Ray trace header string. </p> </li> <li>
                    <p> <code>SenderId</code> </p> <ul> <li> <p>For an IAM user,
                    returns the IAM user ID, for example
                    <code>ABCDEFGHI1JKLMNOPQ23R</code>.</p> </li> <li> <p>For an
                    IAM role, returns the IAM role ID, for example
                    <code>ABCDE1F2GH3I4JK5LMNOP:i-a123b456</code>.</p> </li>
                    </ul> </li> <li> <p> <code>SentTimestamp</code> - Returns
                    the time the message was sent to the queue (<a
                    href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a>
                    in milliseconds).</p> </li> <li> <p>
                    <code>MessageDeduplicationId</code> - Returns the value
                    provided by the producer that calls the <code>
                    <a>SendMessage</a> </code> action.</p> </li> <li> <p>
                    <code>MessageGroupId</code> - Returns the value provided by
                    the producer that calls the <code> <a>SendMessage</a>
                    </code> action. Messages with the same
                    <code>MessageGroupId</code> are returned in sequence.</p>
                    </li> <li> <p> <code>SequenceNumber</code> - Returns the
                    value provided by Amazon SQS.</p> </li> </ul>
                  type: array
                  items:
                    type: string
                MessageAttributeNames:
                  description: <p>The name of the message attribute, where <i>N</i> is the
                    index.</p> <ul> <li> <p>The name can contain alphanumeric
                    characters and the underscore (<code>_</code>), hyphen
                    (<code>-</code>), and period (<code>.</code>).</p> </li>
                    <li> <p>The name is case-sensitive and must be unique among
                    all attribute names for the message.</p> </li> <li> <p>The
                    name must not start with AWS-reserved prefixes such as
                    <code>AWS.</code> or <code>Amazon.</code> (or any casing
                    variants).</p> </li> <li> <p>The name must not start or end
                    with a period (<code>.</code>), and it should not have
                    periods in succession (<code>..</code>).</p> </li> <li>
                    <p>The name can be up to 256 characters long.</p> </li>
                    </ul> <p>When using <code>ReceiveMessage</code>, you can
                    send a list of attribute names to receive, or you can return
                    all of the attributes by specifying <code>All</code> or
                    <code>.*</code> in your request. You can also use all
                    message attributes starting with a prefix, for example
                    <code>bar.*</code>.</p>
                  type: array
                  items:
                    type: string
                MaxNumberOfMessages:
                  description: "The maximum number of messages to return. Amazon SQS never
                    returns more messages than this value (however, fewer
                    messages might be returned). Valid values: 1 to 10. Default:
                    1."
                  type: integer
                VisibilityTimeout:
                  description: The duration (in seconds) that the received messages are
                    hidden from subsequent retrieve requests after being
                    retrieved by a <code>ReceiveMessage</code> request.
                  type: integer
                WaitTimeSeconds:
                  description: The duration (in seconds) for which the call waits for a
                    message to arrive in the queue before returning. If a
                    message is available, the call returns sooner than
                    <code>WaitTimeSeconds</code>. If no messages are available
                    and the wait time expires, the call returns successfully
                    with an empty list of messages.
                  type: integer
                ReceiveRequestAttemptId:
                  description: <p>This parameter applies only to FIFO (first-in-first-out)
                    queues.</p> <p>The token used for deduplication of
                    <code>ReceiveMessage</code> calls. If a networking issue
                    occurs after a <code>ReceiveMessage</code> action, and
                    instead of a response you receive a generic error, you can
                    retry the same action with an identical
                    <code>ReceiveRequestAttemptId</code> to retrieve the same
                    set of messages, even if their visibility timeout has not
                    yet expired.</p> <ul> <li> <p>You can use
                    <code>ReceiveRequestAttemptId</code> only for 5 minutes
                    after a <code>ReceiveMessage</code> action.</p> </li> <li>
                    <p>When you set <code>FifoQueue</code>, a caller of the
                    <code>ReceiveMessage</code> action can provide a
                    <code>ReceiveRequestAttemptId</code> explicitly.</p> </li>
                    <li> <p>If a caller of the <code>ReceiveMessage</code>
                    action doesn't provide a
                    <code>ReceiveRequestAttemptId</code>, Amazon SQS generates a
                    <code>ReceiveRequestAttemptId</code>.</p> </li> <li> <p>You
                    can retry the <code>ReceiveMessage</code> action with the
                    same <code>ReceiveRequestAttemptId</code> if none of the
                    messages have been modified (deleted or had their visibility
                    changes).</p> </li> <li> <p>During a visibility timeout,
                    subsequent calls with the same
                    <code>ReceiveRequestAttemptId</code> return the same
                    messages and receipt handles. If a retry occurs within the
                    deduplication interval, it resets the visibility timeout.
                    For more information, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility
                    Timeout</a> in the <i>Amazon Simple Queue Service Developer
                    Guide</i>.</p> <important> <p>If a caller of the
                    <code>ReceiveMessage</code> action still processes messages
                    when the visibility timeout expires and messages become
                    visible, another worker consuming from the same queue can
                    receive the same messages and therefore process duplicates.
                    Also, if a consumer whose message processing time is longer
                    than the visibility timeout tries to delete the processed
                    messages, the action fails with an error.</p> <p>To mitigate
                    this effect, ensure that your application observes a safe
                    threshold before the visibility timeout expires and extend
                    the visibility timeout as necessary.</p> </important> </li>
                    <li> <p>While messages with a particular
                    <code>MessageGroupId</code> are invisible, no more messages
                    belonging to the same <code>MessageGroupId</code> are
                    returned until the visibility timeout expires. You can still
                    receive messages with another <code>MessageGroupId</code> as
                    long as it is also visible.</p> </li> <li> <p>If a caller of
                    <code>ReceiveMessage</code> can't track the
                    <code>ReceiveRequestAttemptId</code>, no retries work until
                    the original visibility timeout expires. As a result, delays
                    might occur but the messages in the queue remain in a strict
                    order.</p> </li> </ul> <p>The length of
                    <code>ReceiveRequestAttemptId</code> is 128 characters.
                    <code>ReceiveRequestAttemptId</code> can contain
                    alphanumeric characters (<code>a-z</code>, <code>A-Z</code>,
                    <code>0-9</code>) and punctuation
                    (<code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>).</p>
                    <p>For best practices of using
                    <code>ReceiveRequestAttemptId</code>, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html">Using
                    the ReceiveRequestAttemptId Request Parameter</a> in the
                    <i>Amazon Simple Queue Service Developer Guide</i>.</p>
                  type: string
  "/{AccountNumber}/{QueueName}/#Action=RemovePermission":
    get:
      x-aws-operation-name: RemovePermission
      operationId: GET RemovePermission
      description: <p>Revokes any permissions in the queue policy that matches the
        specified <code>Label</code> parameter.</p> <note> <ul> <li> <p>Only the
        owner of a queue can remove permissions from it.</p> </li> <li>
        <p>Cross-account permissions don't apply to this action. For more
        information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </li> <li> <p>To remove
        the ability to change queue permissions, you must deny permission to the
        <code>AddPermission</code>, <code>RemovePermission</code>, and
        <code>SetQueueAttributes</code> actions in your IAM policy.</p> </li>
        </ul> </note>
      responses:
        "200":
          description: Success
      parameters:
        - name: Label
          in: query
          required: true
          description: The identification of the permission to remove. This is the label
            added using the <code> <a>AddPermission</a> </code> action.
          schema:
            type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - RemovePermission
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: RemovePermission
      operationId: POST RemovePermission
      description: <p>Revokes any permissions in the queue policy that matches the
        specified <code>Label</code> parameter.</p> <note> <ul> <li> <p>Only the
        owner of a queue can remove permissions from it.</p> </li> <li>
        <p>Cross-account permissions don't apply to this action. For more
        information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </li> <li> <p>To remove
        the ability to change queue permissions, you must deny permission to the
        <code>AddPermission</code>, <code>RemovePermission</code>, and
        <code>SetQueueAttributes</code> actions in your IAM policy.</p> </li>
        </ul> </note>
      responses:
        "200":
          description: Success
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - RemovePermission
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Label:
                  description: The identification of the permission to remove. This is the
                    label added using the <code> <a>AddPermission</a> </code>
                    action.
                  type: string
              required:
                - Label
  "/{AccountNumber}/{QueueName}/#Action=SendMessage":
    get:
      x-aws-operation-name: SendMessage
      operationId: GET SendMessage
      description: <p>Delivers a message to the specified queue.</p> <important> <p>A
        message can include only XML, JSON, and unformatted text. The following
        Unicode characters are allowed:</p> <p> <code>#x9</code> |
        <code>#xA</code> | <code>#xD</code> | <code>#x20</code> to
        <code>#xD7FF</code> | <code>#xE000</code> to <code>#xFFFD</code> |
        <code>#x10000</code> to <code>#x10FFFF</code> </p> <p>Any characters not
        included in this list will be rejected. For more information, see the <a
        href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for
        characters</a>.</p> </important>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/SendMessageResult"
        "480":
          description: InvalidMessageContents
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidMessageContents"
        "481":
          description: UnsupportedOperation
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/UnsupportedOperation"
      parameters:
        - name: MessageBody
          in: query
          required: true
          description: <p>The message to send. The maximum string size is 256 KB.</p>
            <important> <p>A message can include only XML, JSON, and unformatted
            text. The following Unicode characters are allowed:</p> <p>
            <code>#x9</code> | <code>#xA</code> | <code>#xD</code> |
            <code>#x20</code> to <code>#xD7FF</code> | <code>#xE000</code> to
            <code>#xFFFD</code> | <code>#x10000</code> to <code>#x10FFFF</code>
            </p> <p>Any characters not included in this list will be rejected.
            For more information, see the <a
            href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for
            characters</a>.</p> </important>
          schema:
            type: string
        - name: DelaySeconds
          in: query
          required: false
          description: "<p> The length of time, in seconds, for which to delay a specific
            message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with
            a positive <code>DelaySeconds</code> value become available for
            processing after the delay period is finished. If you don't specify
            a value, the default value for the queue applies. </p> <note>
            <p>When you set <code>FifoQueue</code>, you can't set
            <code>DelaySeconds</code> per message. You can set this parameter
            only on a queue level.</p> </note>"
          schema:
            type: integer
        - name: MessageAttribute.0.key
          in: query
          schema:
            type: string
        - name: MessageAttribute.0.value
          in: query
          schema:
            type: string
        - name: MessageAttribute.1.key
          in: query
          schema:
            type: string
        - name: MessageAttribute.1.value
          in: query
          schema:
            type: string
        - name: MessageAttribute.2.key
          in: query
          schema:
            type: string
        - name: MessageAttribute.2.value
          in: query
          schema:
            type: string
        - name: MessageSystemAttribute.0.key
          in: query
          schema:
            type: string
        - name: MessageSystemAttribute.0.value
          in: query
          schema:
            type: string
        - name: MessageSystemAttribute.1.key
          in: query
          schema:
            type: string
        - name: MessageSystemAttribute.1.value
          in: query
          schema:
            type: string
        - name: MessageSystemAttribute.2.key
          in: query
          schema:
            type: string
        - name: MessageSystemAttribute.2.value
          in: query
          schema:
            type: string
        - name: MessageDeduplicationId
          in: query
          required: false
          description: <p>This parameter applies only to FIFO (first-in-first-out)
            queues.</p> <p>The token used for deduplication of sent messages. If
            a message with a particular <code>MessageDeduplicationId</code> is
            sent successfully, any messages sent with the same
            <code>MessageDeduplicationId</code> are accepted successfully but
            aren't delivered during the 5-minute deduplication interval. For
            more information, see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing">
            Exactly-Once Processing</a> in the <i>Amazon Simple Queue Service
            Developer Guide</i>.</p> <ul> <li> <p>Every message must have a
            unique <code>MessageDeduplicationId</code>,</p> <ul> <li> <p>You may
            provide a <code>MessageDeduplicationId</code> explicitly.</p> </li>
            <li> <p>If you aren't able to provide a
            <code>MessageDeduplicationId</code> and you enable
            <code>ContentBasedDeduplication</code> for your queue, Amazon SQS
            uses a SHA-256 hash to generate the
            <code>MessageDeduplicationId</code> using the body of the message
            (but not the attributes of the message). </p> </li> <li> <p>If you
            don't provide a <code>MessageDeduplicationId</code> and the queue
            doesn't have <code>ContentBasedDeduplication</code> set, the action
            fails with an error.</p> </li> <li> <p>If the queue has
            <code>ContentBasedDeduplication</code> set, your
            <code>MessageDeduplicationId</code> overrides the generated one.</p>
            </li> </ul> </li> <li> <p>When
            <code>ContentBasedDeduplication</code> is in effect, messages with
            identical content sent within the deduplication interval are treated
            as duplicates and only one copy of the message is delivered.</p>
            </li> <li> <p>If you send one message with
            <code>ContentBasedDeduplication</code> enabled and then another
            message with a <code>MessageDeduplicationId</code> that is the same
            as the one generated for the first
            <code>MessageDeduplicationId</code>, the two messages are treated as
            duplicates and only one copy of the message is delivered. </p> </li>
            </ul> <note> <p>The <code>MessageDeduplicationId</code> is available
            to the consumer of the message (this can be useful for
            troubleshooting delivery issues).</p> <p>If a message is sent
            successfully but the acknowledgement is lost and the message is
            resent with the same <code>MessageDeduplicationId</code> after the
            deduplication interval, Amazon SQS can't detect duplicate
            messages.</p> <p>Amazon SQS continues to keep track of the message
            deduplication ID even after the message is received and deleted.</p>
            </note> <p>The length of <code>MessageDeduplicationId</code> is 128
            characters. <code>MessageDeduplicationId</code> can contain
            alphanumeric characters (<code>a-z</code>, <code>A-Z</code>,
            <code>0-9</code>) and punctuation
            (<code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>).</p>
            <p>For best practices of using <code>MessageDeduplicationId</code>,
            see <a
            href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html">Using
            the MessageDeduplicationId Property</a> in the <i>Amazon Simple
            Queue Service Developer Guide</i>.</p>
          schema:
            type: string
        - name: MessageGroupId
          in: query
          required: false
          description: "<p>This parameter applies only to FIFO (first-in-first-out)
            queues.</p> <p>The tag that specifies that a message belongs to a
            specific message group. Messages that belong to the same message
            group are processed in a FIFO manner (however, messages in different
            message groups might be processed out of order). To interleave
            multiple ordered streams within a single queue, use
            <code>MessageGroupId</code> values (for example, session data for
            multiple users). In this scenario, multiple consumers can process
            the queue, but the session data of each user is processed in a FIFO
            fashion.</p> <ul> <li> <p>You must associate a non-empty
            <code>MessageGroupId</code> with a message. If you don't provide a
            <code>MessageGroupId</code>, the action fails.</p> </li> <li> <p>
            <code>ReceiveMessage</code> might return messages with multiple
            <code>MessageGroupId</code> values. For each
            <code>MessageGroupId</code>, the messages are sorted by time sent.
            The caller can't specify a <code>MessageGroupId</code>.</p> </li>
            </ul> <p>The length of <code>MessageGroupId</code> is 128
            characters. Valid values: alphanumeric characters and punctuation
            <code>(!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~)</code>.</p>
            <p>For best practices of using <code>MessageGroupId</code>, see <a
            href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQS\
            DeveloperGuide/using-messagegroupid-property.html\">Using the
            MessageGroupId Property</a> in the <i>Amazon Simple Queue Service
            Developer Guide</i>.</p> <important> <p> <code>MessageGroupId</code>
            is required for FIFO queues. You can't use it for Standard
            queues.</p> </important>"
          schema:
            type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - SendMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: SendMessage
      operationId: POST SendMessage
      description: <p>Delivers a message to the specified queue.</p> <important> <p>A
        message can include only XML, JSON, and unformatted text. The following
        Unicode characters are allowed:</p> <p> <code>#x9</code> |
        <code>#xA</code> | <code>#xD</code> | <code>#x20</code> to
        <code>#xD7FF</code> | <code>#xE000</code> to <code>#xFFFD</code> |
        <code>#x10000</code> to <code>#x10FFFF</code> </p> <p>Any characters not
        included in this list will be rejected. For more information, see the <a
        href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for
        characters</a>.</p> </important>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/SendMessageResult"
        "480":
          description: InvalidMessageContents
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidMessageContents"
        "481":
          description: UnsupportedOperation
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/UnsupportedOperation"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - SendMessage
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                MessageBody:
                  description: <p>The message to send. The maximum string size is 256
                    KB.</p> <important> <p>A message can include only XML, JSON,
                    and unformatted text. The following Unicode characters are
                    allowed:</p> <p> <code>#x9</code> | <code>#xA</code> |
                    <code>#xD</code> | <code>#x20</code> to <code>#xD7FF</code>
                    | <code>#xE000</code> to <code>#xFFFD</code> |
                    <code>#x10000</code> to <code>#x10FFFF</code> </p> <p>Any
                    characters not included in this list will be rejected. For
                    more information, see the <a
                    href="http://www.w3.org/TR/REC-xml/#charsets">W3C
                    specification for characters</a>.</p> </important>
                  type: string
                DelaySeconds:
                  description: "<p> The length of time, in seconds, for which to delay a
                    specific message. Valid values: 0 to 900. Maximum: 15
                    minutes. Messages with a positive <code>DelaySeconds</code>
                    value become available for processing after the delay period
                    is finished. If you don't specify a value, the default value
                    for the queue applies. </p> <note> <p>When you set
                    <code>FifoQueue</code>, you can't set
                    <code>DelaySeconds</code> per message. You can set this
                    parameter only on a queue level.</p> </note>"
                  type: integer
                MessageAttribute.0.key:
                  type: string
                MessageAttribute.0.value:
                  type: string
                MessageAttribute.1.key:
                  type: string
                MessageAttribute.1.value:
                  type: string
                MessageAttribute.2.key:
                  type: string
                MessageAttribute.2.value:
                  type: string
                MessageSystemAttribute.0.key:
                  type: string
                MessageSystemAttribute.0.value:
                  type: string
                MessageSystemAttribute.1.key:
                  type: string
                MessageSystemAttribute.1.value:
                  type: string
                MessageSystemAttribute.2.key:
                  type: string
                MessageSystemAttribute.2.value:
                  type: string
                MessageDeduplicationId:
                  description: <p>This parameter applies only to FIFO (first-in-first-out)
                    queues.</p> <p>The token used for deduplication of sent
                    messages. If a message with a particular
                    <code>MessageDeduplicationId</code> is sent successfully,
                    any messages sent with the same
                    <code>MessageDeduplicationId</code> are accepted
                    successfully but aren't delivered during the 5-minute
                    deduplication interval. For more information, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing">
                    Exactly-Once Processing</a> in the <i>Amazon Simple Queue
                    Service Developer Guide</i>.</p> <ul> <li> <p>Every message
                    must have a unique <code>MessageDeduplicationId</code>,</p>
                    <ul> <li> <p>You may provide a
                    <code>MessageDeduplicationId</code> explicitly.</p> </li>
                    <li> <p>If you aren't able to provide a
                    <code>MessageDeduplicationId</code> and you enable
                    <code>ContentBasedDeduplication</code> for your queue,
                    Amazon SQS uses a SHA-256 hash to generate the
                    <code>MessageDeduplicationId</code> using the body of the
                    message (but not the attributes of the message). </p> </li>
                    <li> <p>If you don't provide a
                    <code>MessageDeduplicationId</code> and the queue doesn't
                    have <code>ContentBasedDeduplication</code> set, the action
                    fails with an error.</p> </li> <li> <p>If the queue has
                    <code>ContentBasedDeduplication</code> set, your
                    <code>MessageDeduplicationId</code> overrides the generated
                    one.</p> </li> </ul> </li> <li> <p>When
                    <code>ContentBasedDeduplication</code> is in effect,
                    messages with identical content sent within the
                    deduplication interval are treated as duplicates and only
                    one copy of the message is delivered.</p> </li> <li> <p>If
                    you send one message with
                    <code>ContentBasedDeduplication</code> enabled and then
                    another message with a <code>MessageDeduplicationId</code>
                    that is the same as the one generated for the first
                    <code>MessageDeduplicationId</code>, the two messages are
                    treated as duplicates and only one copy of the message is
                    delivered. </p> </li> </ul> <note> <p>The
                    <code>MessageDeduplicationId</code> is available to the
                    consumer of the message (this can be useful for
                    troubleshooting delivery issues).</p> <p>If a message is
                    sent successfully but the acknowledgement is lost and the
                    message is resent with the same
                    <code>MessageDeduplicationId</code> after the deduplication
                    interval, Amazon SQS can't detect duplicate messages.</p>
                    <p>Amazon SQS continues to keep track of the message
                    deduplication ID even after the message is received and
                    deleted.</p> </note> <p>The length of
                    <code>MessageDeduplicationId</code> is 128 characters.
                    <code>MessageDeduplicationId</code> can contain alphanumeric
                    characters (<code>a-z</code>, <code>A-Z</code>,
                    <code>0-9</code>) and punctuation
                    (<code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>).</p>
                    <p>For best practices of using
                    <code>MessageDeduplicationId</code>, see <a
                    href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html">Using
                    the MessageDeduplicationId Property</a> in the <i>Amazon
                    Simple Queue Service Developer Guide</i>.</p>
                  type: string
                MessageGroupId:
                  description: "<p>This parameter applies only to FIFO (first-in-first-out)
                    queues.</p> <p>The tag that specifies that a message belongs
                    to a specific message group. Messages that belong to the
                    same message group are processed in a FIFO manner (however,
                    messages in different message groups might be processed out
                    of order). To interleave multiple ordered streams within a
                    single queue, use <code>MessageGroupId</code> values (for
                    example, session data for multiple users). In this scenario,
                    multiple consumers can process the queue, but the session
                    data of each user is processed in a FIFO fashion.</p> <ul>
                    <li> <p>You must associate a non-empty
                    <code>MessageGroupId</code> with a message. If you don't
                    provide a <code>MessageGroupId</code>, the action fails.</p>
                    </li> <li> <p> <code>ReceiveMessage</code> might return
                    messages with multiple <code>MessageGroupId</code> values.
                    For each <code>MessageGroupId</code>, the messages are
                    sorted by time sent. The caller can't specify a
                    <code>MessageGroupId</code>.</p> </li> </ul> <p>The length
                    of <code>MessageGroupId</code> is 128 characters. Valid
                    values: alphanumeric characters and punctuation
                    <code>(!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~)</code>\
                    .</p> <p>For best practices of using
                    <code>MessageGroupId</code>, see <a
                    href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/la\
                    test/SQSDeveloperGuide/using-messagegroupid-property.html\"\
                    >Using the MessageGroupId Property</a> in the <i>Amazon
                    Simple Queue Service Developer Guide</i>.</p> <important>
                    <p> <code>MessageGroupId</code> is required for FIFO queues.
                    You can't use it for Standard queues.</p> </important>"
                  type: string
              required:
                - MessageBody
  "/{AccountNumber}/{QueueName}/#Action=SendMessageBatch":
    get:
      x-aws-operation-name: SendMessageBatch
      operationId: GET SendMessageBatch
      description: <p>Delivers up to ten messages to the specified queue. This is a batch
        version of <code> <a>SendMessage</a>.</code> For a FIFO queue, multiple
        messages within a single batch are enqueued in the order they are
        sent.</p> <p>The result of sending each message is reported individually
        in the response. Because the batch request can result in a combination
        of successful and unsuccessful actions, you should check for batch
        errors even when the call returns an HTTP status code of
        <code>200</code>.</p> <p>The maximum allowed individual message size and
        the maximum total payload size (the sum of the individual lengths of all
        of the batched messages) are both 256 KB (262,144 bytes).</p>
        <important> <p>A message can include only XML, JSON, and unformatted
        text. The following Unicode characters are allowed:</p> <p>
        <code>#x9</code> | <code>#xA</code> | <code>#xD</code> |
        <code>#x20</code> to <code>#xD7FF</code> | <code>#xE000</code> to
        <code>#xFFFD</code> | <code>#x10000</code> to <code>#x10FFFF</code> </p>
        <p>Any characters not included in this list will be rejected. For more
        information, see the <a
        href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for
        characters</a>.</p> </important> <p>If you don't specify the
        <code>DelaySeconds</code> parameter for an entry, Amazon SQS uses the
        default value for the queue.</p> <p>Some actions take lists of
        parameters. These lists are specified using the <code>param.n</code>
        notation. Values of <code>n</code> are integers starting from 1. For
        example, a parameter list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/SendMessageBatchResult"
        "480":
          description: TooManyEntriesInBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/TooManyEntriesInBatchRequest"
        "481":
          description: EmptyBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/EmptyBatchRequest"
        "482":
          description: BatchEntryIdsNotDistinct
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchEntryIdsNotDistinct"
        "483":
          description: BatchRequestTooLong
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchRequestTooLong"
        "484":
          description: InvalidBatchEntryId
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidBatchEntryId"
        "485":
          description: UnsupportedOperation
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/UnsupportedOperation"
      parameters:
        - name: Entries
          in: query
          required: true
          description: A list of <code> <a>SendMessageBatchRequestEntry</a> </code> items.
          schema:
            type: array
            items:
              type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - SendMessageBatch
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: SendMessageBatch
      operationId: POST SendMessageBatch
      description: <p>Delivers up to ten messages to the specified queue. This is a batch
        version of <code> <a>SendMessage</a>.</code> For a FIFO queue, multiple
        messages within a single batch are enqueued in the order they are
        sent.</p> <p>The result of sending each message is reported individually
        in the response. Because the batch request can result in a combination
        of successful and unsuccessful actions, you should check for batch
        errors even when the call returns an HTTP status code of
        <code>200</code>.</p> <p>The maximum allowed individual message size and
        the maximum total payload size (the sum of the individual lengths of all
        of the batched messages) are both 256 KB (262,144 bytes).</p>
        <important> <p>A message can include only XML, JSON, and unformatted
        text. The following Unicode characters are allowed:</p> <p>
        <code>#x9</code> | <code>#xA</code> | <code>#xD</code> |
        <code>#x20</code> to <code>#xD7FF</code> | <code>#xE000</code> to
        <code>#xFFFD</code> | <code>#x10000</code> to <code>#x10FFFF</code> </p>
        <p>Any characters not included in this list will be rejected. For more
        information, see the <a
        href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for
        characters</a>.</p> </important> <p>If you don't specify the
        <code>DelaySeconds</code> parameter for an entry, Amazon SQS uses the
        default value for the queue.</p> <p>Some actions take lists of
        parameters. These lists are specified using the <code>param.n</code>
        notation. Values of <code>n</code> are integers starting from 1. For
        example, a parameter list with two elements looks like this:</p> <p>
        <code>&amp;Attribute.1=first</code> </p> <p>
        <code>&amp;Attribute.2=second</code> </p>
      responses:
        "200":
          description: Success
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/SendMessageBatchResult"
        "480":
          description: TooManyEntriesInBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/TooManyEntriesInBatchRequest"
        "481":
          description: EmptyBatchRequest
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/EmptyBatchRequest"
        "482":
          description: BatchEntryIdsNotDistinct
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchEntryIdsNotDistinct"
        "483":
          description: BatchRequestTooLong
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/BatchRequestTooLong"
        "484":
          description: InvalidBatchEntryId
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidBatchEntryId"
        "485":
          description: UnsupportedOperation
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/UnsupportedOperation"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - SendMessageBatch
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Entries:
                  description: A list of <code> <a>SendMessageBatchRequestEntry</a> </code>
                    items.
                  type: array
                  items:
                    type: string
              required:
                - Entries
  "/{AccountNumber}/{QueueName}/#Action=SetQueueAttributes":
    get:
      x-aws-operation-name: SetQueueAttributes
      operationId: GET SetQueueAttributes
      description: <p>Sets the value of one or more queue attributes. When you change a
        queue's attributes, the change can take up to 60 seconds for most of the
        attributes to propagate throughout the Amazon SQS system. Changes made
        to the <code>MessageRetentionPeriod</code> attribute can take up to 15
        minutes.</p> <note> <ul> <li> <p>In the future, new attributes might be
        added. If you write code that calls this action, we recommend that you
        structure your code so that it can handle new attributes gracefully.</p>
        </li> <li> <p>Cross-account permissions don't apply to this action. For
        more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </li> <li> <p>To remove
        the ability to change queue permissions, you must deny permission to the
        <code>AddPermission</code>, <code>RemovePermission</code>, and
        <code>SetQueueAttributes</code> actions in your IAM policy.</p> </li>
        </ul> </note>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidAttributeName
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidAttributeName"
      parameters:
        - name: Attribute.0.key
          in: query
          schema:
            type: string
        - name: Attribute.0.value
          in: query
          schema:
            type: string
        - name: Attribute.1.key
          in: query
          schema:
            type: string
        - name: Attribute.1.value
          in: query
          schema:
            type: string
        - name: Attribute.2.key
          in: query
          schema:
            type: string
        - name: Attribute.2.value
          in: query
          schema:
            type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - SetQueueAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: SetQueueAttributes
      operationId: POST SetQueueAttributes
      description: <p>Sets the value of one or more queue attributes. When you change a
        queue's attributes, the change can take up to 60 seconds for most of the
        attributes to propagate throughout the Amazon SQS system. Changes made
        to the <code>MessageRetentionPeriod</code> attribute can take up to 15
        minutes.</p> <note> <ul> <li> <p>In the future, new attributes might be
        added. If you write code that calls this action, we recommend that you
        structure your code so that it can handle new attributes gracefully.</p>
        </li> <li> <p>Cross-account permissions don't apply to this action. For
        more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </li> <li> <p>To remove
        the ability to change queue permissions, you must deny permission to the
        <code>AddPermission</code>, <code>RemovePermission</code>, and
        <code>SetQueueAttributes</code> actions in your IAM policy.</p> </li>
        </ul> </note>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidAttributeName
          content:
            text/xml:
              schema:
                $ref: "#/components/schemas/InvalidAttributeName"
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - SetQueueAttributes
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Attribute.0.key:
                  type: string
                Attribute.0.value:
                  type: string
                Attribute.1.key:
                  type: string
                Attribute.1.value:
                  type: string
                Attribute.2.key:
                  type: string
                Attribute.2.value:
                  type: string
  "/{AccountNumber}/{QueueName}/#Action=TagQueue":
    get:
      x-aws-operation-name: TagQueue
      operationId: GET TagQueue
      description: <p>Add cost allocation tags to the specified Amazon SQS queue. For an
        overview, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging
        Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <p>When you use queue tags, keep the following
        guidelines in mind:</p> <ul> <li> <p>Adding more than 50 tags to a queue
        isn't recommended.</p> </li> <li> <p>Tags don't have any semantic
        meaning. Amazon SQS interprets tags as character strings.</p> </li> <li>
        <p>Tags are case-sensitive.</p> </li> <li> <p>A new tag with a key
        identical to that of an existing tag overwrites the existing tag.</p>
        </li> </ul> <p>For a full list of tag restrictions, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues">Limits
        Related to Queues</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>.</p> <note> <p>Cross-account permissions don't apply to this
        action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
      parameters:
        - name: Tags.0.key
          in: query
          schema:
            type: string
        - name: Tags.0.value
          in: query
          schema:
            type: string
        - name: Tags.1.key
          in: query
          schema:
            type: string
        - name: Tags.1.value
          in: query
          schema:
            type: string
        - name: Tags.2.key
          in: query
          schema:
            type: string
        - name: Tags.2.value
          in: query
          schema:
            type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - TagQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: TagQueue
      operationId: POST TagQueue
      description: <p>Add cost allocation tags to the specified Amazon SQS queue. For an
        overview, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging
        Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <p>When you use queue tags, keep the following
        guidelines in mind:</p> <ul> <li> <p>Adding more than 50 tags to a queue
        isn't recommended.</p> </li> <li> <p>Tags don't have any semantic
        meaning. Amazon SQS interprets tags as character strings.</p> </li> <li>
        <p>Tags are case-sensitive.</p> </li> <li> <p>A new tag with a key
        identical to that of an existing tag overwrites the existing tag.</p>
        </li> </ul> <p>For a full list of tag restrictions, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues">Limits
        Related to Queues</a> in the <i>Amazon Simple Queue Service Developer
        Guide</i>.</p> <note> <p>Cross-account permissions don't apply to this
        action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - TagQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                Tags.0.key:
                  type: string
                Tags.0.value:
                  type: string
                Tags.1.key:
                  type: string
                Tags.1.value:
                  type: string
                Tags.2.key:
                  type: string
                Tags.2.value:
                  type: string
  "/{AccountNumber}/{QueueName}/#Action=UntagQueue":
    get:
      x-aws-operation-name: UntagQueue
      operationId: GET UntagQueue
      description: <p>Remove cost allocation tags from the specified Amazon SQS queue. For
        an overview, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging
        Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <note> <p>Cross-account permissions don't apply
        to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
      parameters:
        - name: TagKeys
          in: query
          required: true
          description: The list of tags to be removed from the specified queue.
          schema:
            type: array
            items:
              type: string
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - UntagQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      x-aws-operation-name: UntagQueue
      operationId: POST UntagQueue
      description: <p>Remove cost allocation tags from the specified Amazon SQS queue. For
        an overview, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging
        Your Amazon SQS Queues</a> in the <i>Amazon Simple Queue Service
        Developer Guide</i>.</p> <note> <p>Cross-account permissions don't apply
        to this action. For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
        Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon
        Simple Queue Service Developer Guide</i>.</p> </note>
      responses:
        "200":
          description: Success
      parameters:
        - in: path
          name: AccountNumber
          required: true
          description: The AWS account number
          schema:
            type: integer
        - in: path
          name: QueueName
          required: true
          description: The name of the queue
          schema:
            type: string
        - name: Action
          in: query
          required: true
          schema:
            type: string
            enum:
              - UntagQueue
        - name: Version
          in: query
          required: true
          schema:
            type: string
            enum:
              - 2012-11-05
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                TagKeys:
                  description: The list of tags to be removed from the specified queue.
                  type: array
                  items:
                    type: string
              required:
                - TagKeys
servers:
  - url: http://sqs.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon SQS multi-region endpoint
  - url: https://sqs.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon SQS multi-region endpoint
  - url: http://sqs.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon SQS endpoint for China (Beijing) and China (Ningxia)
  - url: https://sqs.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon SQS endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    String:
      type: string
    OverLimit: {}
    MessageNotInflight: {}
    ReceiptHandleIsInvalid: {}
    ChangeMessageVisibilityBatchResult:
      type: object
      required:
        - Successful
        - Failed
      properties:
        Successful:
          $ref: "#/components/schemas/ChangeMessageVisibilityBatchResultEntryList"
        Failed:
          $ref: "#/components/schemas/BatchResultErrorEntryList"
      description: For each message in the batch, the response contains a <code>
        <a>ChangeMessageVisibilityBatchResultEntry</a> </code> tag if the
        message succeeds or a <code> <a>BatchResultErrorEntry</a> </code> tag if
        the message fails.
    ChangeMessageVisibilityBatchRequestEntry:
      type: object
      required:
        - Id
        - ReceiptHandle
      properties:
        Id:
          $ref: "#/components/schemas/String"
        ReceiptHandle:
          $ref: "#/components/schemas/String"
        VisibilityTimeout:
          $ref: "#/components/schemas/Integer"
      description: <p>Encloses a receipt handle and an entry id for each message in <code>
        <a>ChangeMessageVisibilityBatch</a>.</code> </p> <important> <p>All of
        the following list parameters must be prefixed with
        <code>ChangeMessageVisibilityBatchRequestEntry.n</code>, where
        <code>n</code> is an integer value starting with <code>1</code>. For
        example, a parameter list for this action might look like this:</p>
        </important> <p>
        <code>&amp;ChangeMessageVisibilityBatchRequestEntry.1.Id=change_visibility_msg_2</code>
        </p> <p>
        <code>&amp;ChangeMessageVisibilityBatchRequestEntry.1.ReceiptHandle=your_receipt_handle</code>
        </p> <p>
        <code>&amp;ChangeMessageVisibilityBatchRequestEntry.1.VisibilityTimeout=45</code>
        </p>
    TooManyEntriesInBatchRequest: {}
    EmptyBatchRequest: {}
    BatchEntryIdsNotDistinct: {}
    InvalidBatchEntryId: {}
    CreateQueueResult:
      type: object
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
      description: Returns the <code>QueueUrl</code> attribute of the created queue.
    TagValue:
      type: string
    QueueDeletedRecently: {}
    QueueNameExists: {}
    InvalidIdFormat: {}
    DeleteMessageBatchResult:
      type: object
      required:
        - Successful
        - Failed
      properties:
        Successful:
          $ref: "#/components/schemas/DeleteMessageBatchResultEntryList"
        Failed:
          $ref: "#/components/schemas/BatchResultErrorEntryList"
      description: For each message in the batch, the response contains a <code>
        <a>DeleteMessageBatchResultEntry</a> </code> tag if the message is
        deleted or a <code> <a>BatchResultErrorEntry</a> </code> tag if the
        message can't be deleted.
    DeleteMessageBatchRequestEntry:
      type: object
      required:
        - Id
        - ReceiptHandle
      properties:
        Id:
          $ref: "#/components/schemas/String"
        ReceiptHandle:
          $ref: "#/components/schemas/String"
      description: Encloses a receipt handle and an identifier for it.
    GetQueueAttributesResult:
      type: object
      properties:
        Attributes:
          $ref: "#/components/schemas/QueueAttributeMap"
      description: A list of returned queue attributes.
    QueueAttributeName:
      type: string
      enum:
        - All
        - Policy
        - VisibilityTimeout
        - MaximumMessageSize
        - MessageRetentionPeriod
        - ApproximateNumberOfMessages
        - ApproximateNumberOfMessagesNotVisible
        - CreatedTimestamp
        - LastModifiedTimestamp
        - QueueArn
        - ApproximateNumberOfMessagesDelayed
        - DelaySeconds
        - ReceiveMessageWaitTimeSeconds
        - RedrivePolicy
        - FifoQueue
        - ContentBasedDeduplication
        - KmsMasterKeyId
        - KmsDataKeyReusePeriodSeconds
    InvalidAttributeName: {}
    GetQueueUrlResult:
      type: object
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
      description: For more information, see <a
        href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-api-responses.html">Interpreting
        Responses</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.
    QueueDoesNotExist: {}
    ListDeadLetterSourceQueuesResult:
      type: object
      required:
        - queueUrls
      properties:
        queueUrls:
          $ref: "#/components/schemas/QueueUrlList"
      description: A list of your dead letter source queues.
    ListQueueTagsResult:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagMap"
    ListQueuesResult:
      type: object
      properties:
        QueueUrls:
          $ref: "#/components/schemas/QueueUrlList"
      description: A list of your queues.
    PurgeQueueInProgress: {}
    ReceiveMessageResult:
      type: object
      properties:
        Messages:
          $ref: "#/components/schemas/MessageList"
      description: A list of received messages.
    MessageAttributeName:
      type: string
    SendMessageResult:
      type: object
      properties:
        MD5OfMessageBody:
          $ref: "#/components/schemas/String"
        MD5OfMessageAttributes:
          $ref: "#/components/schemas/String"
        MD5OfMessageSystemAttributes:
          $ref: "#/components/schemas/String"
        MessageId:
          $ref: "#/components/schemas/String"
        SequenceNumber:
          $ref: "#/components/schemas/String"
      description: The <code>MD5OfMessageBody</code> and <code>MessageId</code> elements.
    MessageAttributeValue:
      type: object
      required:
        - DataType
      properties:
        StringValue:
          $ref: "#/components/schemas/String"
        BinaryValue:
          $ref: "#/components/schemas/Binary"
        StringListValues:
          $ref: "#/components/schemas/StringList"
        BinaryListValues:
          $ref: "#/components/schemas/BinaryList"
        DataType:
          $ref: "#/components/schemas/String"
      description: <p>The user-specified message attribute value. For string data types,
        the <code>Value</code> attribute has the same restrictions on the
        content as the message body. For more information, see <code>
        <a>SendMessage</a>.</code> </p> <p> <code>Name</code>,
        <code>type</code>, <code>value</code> and the message body must not be
        empty or null. All parts of the message attribute, including
        <code>Name</code>, <code>Type</code>, and <code>Value</code>, are part
        of the message size restriction (256 KB or 262,144 bytes).</p>
      xml:
        wrapped: false
    MessageSystemAttributeValue:
      type: object
      required:
        - DataType
      properties:
        StringValue:
          $ref: "#/components/schemas/String"
        BinaryValue:
          $ref: "#/components/schemas/Binary"
        StringListValues:
          $ref: "#/components/schemas/StringList"
        BinaryListValues:
          $ref: "#/components/schemas/BinaryList"
        DataType:
          $ref: "#/components/schemas/String"
      description: <p>The user-specified message system attribute value. For string data
        types, the <code>Value</code> attribute has the same restrictions on the
        content as the message body. For more information, see <code>
        <a>SendMessage</a>.</code> </p> <p> <code>Name</code>,
        <code>type</code>, <code>value</code> and the message body must not be
        empty or null.</p>
      xml:
        wrapped: false
    InvalidMessageContents: {}
    UnsupportedOperation: {}
    SendMessageBatchResult:
      type: object
      required:
        - Successful
        - Failed
      properties:
        Successful:
          $ref: "#/components/schemas/SendMessageBatchResultEntryList"
        Failed:
          $ref: "#/components/schemas/BatchResultErrorEntryList"
      description: For each message in the batch, the response contains a <code>
        <a>SendMessageBatchResultEntry</a> </code> tag if the message succeeds
        or a <code> <a>BatchResultErrorEntry</a> </code> tag if the message
        fails.
    SendMessageBatchRequestEntry:
      type: object
      required:
        - Id
        - MessageBody
      properties:
        Id:
          $ref: "#/components/schemas/String"
        MessageBody:
          $ref: "#/components/schemas/String"
        DelaySeconds:
          $ref: "#/components/schemas/Integer"
        MessageAttributes:
          $ref: "#/components/schemas/MessageBodyAttributeMap"
        MessageSystemAttributes:
          $ref: "#/components/schemas/MessageBodySystemAttributeMap"
        MessageDeduplicationId:
          $ref: "#/components/schemas/String"
        MessageGroupId:
          $ref: "#/components/schemas/String"
      description: Contains the details of a single Amazon SQS message along with an
        <code>Id</code>.
    BatchRequestTooLong: {}
    TagKey:
      type: string
    AWSAccountIdList:
      type: array
      items:
        $ref: "#/components/schemas/String"
      xml:
        wrapped: false
    ActionNameList:
      type: array
      items:
        $ref: "#/components/schemas/String"
      xml:
        wrapped: false
    AddPermissionRequest:
      type: object
      required:
        - QueueUrl
        - Label
        - AWSAccountIds
        - Actions
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Label:
          $ref: "#/components/schemas/String"
        AWSAccountIds:
          $ref: "#/components/schemas/AWSAccountIdList"
        Actions:
          $ref: "#/components/schemas/ActionNameList"
      description: <p/>
    AttributeNameList:
      type: array
      items:
        $ref: "#/components/schemas/QueueAttributeName"
      xml:
        wrapped: false
    Boolean:
      type: boolean
    BatchResultErrorEntry:
      type: object
      required:
        - Id
        - SenderFault
        - Code
      properties:
        Id:
          $ref: "#/components/schemas/String"
        SenderFault:
          $ref: "#/components/schemas/Boolean"
        Code:
          $ref: "#/components/schemas/String"
        Message:
          $ref: "#/components/schemas/String"
      description: Gives a detailed description of the result of an action on each entry in
        the request.
    BatchResultErrorEntryList:
      type: array
      items:
        $ref: "#/components/schemas/BatchResultErrorEntry"
      xml:
        wrapped: false
    Binary:
      type: string
    BinaryList:
      type: array
      items:
        $ref: "#/components/schemas/Binary"
    ChangeMessageVisibilityBatchRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/ChangeMessageVisibilityBatchRequestEntry"
      xml:
        wrapped: false
    ChangeMessageVisibilityBatchRequest:
      type: object
      required:
        - QueueUrl
        - Entries
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Entries:
          $ref: "#/components/schemas/ChangeMessageVisibilityBatchRequestEntryList"
      description: <p/>
    Integer:
      type: integer
    ChangeMessageVisibilityBatchResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/ChangeMessageVisibilityBatchResultEntry"
      xml:
        wrapped: false
    ChangeMessageVisibilityBatchResultEntry:
      type: object
      required:
        - Id
      properties:
        Id:
          $ref: "#/components/schemas/String"
      description: "Encloses the <code>Id</code> of an entry in <code>
        <a>ChangeMessageVisibilityBatch</a>.</code> "
    ChangeMessageVisibilityRequest:
      type: object
      required:
        - QueueUrl
        - ReceiptHandle
        - VisibilityTimeout
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        ReceiptHandle:
          $ref: "#/components/schemas/String"
        VisibilityTimeout:
          $ref: "#/components/schemas/Integer"
    QueueAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
      xml:
        wrapped: false
    TagMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
      xml:
        wrapped: false
    CreateQueueRequest:
      type: object
      required:
        - QueueName
      properties:
        QueueName:
          $ref: "#/components/schemas/String"
        Attributes:
          $ref: "#/components/schemas/QueueAttributeMap"
        tags:
          $ref: "#/components/schemas/TagMap"
      description: <p/>
    DeleteMessageBatchRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/DeleteMessageBatchRequestEntry"
      xml:
        wrapped: false
    DeleteMessageBatchRequest:
      type: object
      required:
        - QueueUrl
        - Entries
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Entries:
          $ref: "#/components/schemas/DeleteMessageBatchRequestEntryList"
      description: <p/>
    DeleteMessageBatchResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/DeleteMessageBatchResultEntry"
      xml:
        wrapped: false
    DeleteMessageBatchResultEntry:
      type: object
      required:
        - Id
      properties:
        Id:
          $ref: "#/components/schemas/String"
      description: "Encloses the <code>Id</code> of an entry in <code>
        <a>DeleteMessageBatch</a>.</code> "
    DeleteMessageRequest:
      type: object
      required:
        - QueueUrl
        - ReceiptHandle
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        ReceiptHandle:
          $ref: "#/components/schemas/String"
      description: <p/>
    DeleteQueueRequest:
      type: object
      required:
        - QueueUrl
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
      description: <p/>
    GetQueueAttributesRequest:
      type: object
      required:
        - QueueUrl
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        AttributeNames:
          $ref: "#/components/schemas/AttributeNameList"
      description: <p/>
    GetQueueUrlRequest:
      type: object
      required:
        - QueueName
      properties:
        QueueName:
          $ref: "#/components/schemas/String"
        QueueOwnerAWSAccountId:
          $ref: "#/components/schemas/String"
      description: <p/>
    ListDeadLetterSourceQueuesRequest:
      type: object
      required:
        - QueueUrl
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
      description: <p/>
    QueueUrlList:
      type: array
      items:
        $ref: "#/components/schemas/String"
      xml:
        wrapped: false
    ListQueueTagsRequest:
      type: object
      required:
        - QueueUrl
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
    ListQueuesRequest:
      type: object
      properties:
        QueueNamePrefix:
          $ref: "#/components/schemas/String"
      description: <p/>
    MessageSystemAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
      xml:
        wrapped: false
    MessageBodyAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MessageAttributeValue"
      xml:
        wrapped: false
    Message:
      type: object
      properties:
        MessageId:
          $ref: "#/components/schemas/String"
        ReceiptHandle:
          $ref: "#/components/schemas/String"
        MD5OfBody:
          $ref: "#/components/schemas/String"
        Body:
          $ref: "#/components/schemas/String"
        Attributes:
          $ref: "#/components/schemas/MessageSystemAttributeMap"
        MD5OfMessageAttributes:
          $ref: "#/components/schemas/String"
        MessageAttributes:
          $ref: "#/components/schemas/MessageBodyAttributeMap"
      description: An Amazon SQS message.
    MessageAttributeNameList:
      type: array
      items:
        $ref: "#/components/schemas/MessageAttributeName"
      xml:
        wrapped: false
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/String"
    MessageBodySystemAttributeMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/MessageSystemAttributeValue"
      xml:
        wrapped: false
    MessageList:
      type: array
      items:
        $ref: "#/components/schemas/Message"
      xml:
        wrapped: false
    MessageSystemAttributeName:
      type: string
      enum:
        - SenderId
        - SentTimestamp
        - ApproximateReceiveCount
        - ApproximateFirstReceiveTimestamp
        - SequenceNumber
        - MessageDeduplicationId
        - MessageGroupId
        - AWSTraceHeader
    MessageSystemAttributeNameForSends:
      type: string
      enum:
        - AWSTraceHeader
    PurgeQueueRequest:
      type: object
      required:
        - QueueUrl
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
      description: <p/>
    ReceiveMessageRequest:
      type: object
      required:
        - QueueUrl
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        AttributeNames:
          $ref: "#/components/schemas/AttributeNameList"
        MessageAttributeNames:
          $ref: "#/components/schemas/MessageAttributeNameList"
        MaxNumberOfMessages:
          $ref: "#/components/schemas/Integer"
        VisibilityTimeout:
          $ref: "#/components/schemas/Integer"
        WaitTimeSeconds:
          $ref: "#/components/schemas/Integer"
        ReceiveRequestAttemptId:
          $ref: "#/components/schemas/String"
      description: <p/>
    RemovePermissionRequest:
      type: object
      required:
        - QueueUrl
        - Label
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Label:
          $ref: "#/components/schemas/String"
      description: <p/>
    SendMessageBatchRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/SendMessageBatchRequestEntry"
      xml:
        wrapped: false
    SendMessageBatchRequest:
      type: object
      required:
        - QueueUrl
        - Entries
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Entries:
          $ref: "#/components/schemas/SendMessageBatchRequestEntryList"
      description: <p/>
    SendMessageBatchResultEntryList:
      type: array
      items:
        $ref: "#/components/schemas/SendMessageBatchResultEntry"
      xml:
        wrapped: false
    SendMessageBatchResultEntry:
      type: object
      required:
        - Id
        - MessageId
        - MD5OfMessageBody
      properties:
        Id:
          $ref: "#/components/schemas/String"
        MessageId:
          $ref: "#/components/schemas/String"
        MD5OfMessageBody:
          $ref: "#/components/schemas/String"
        MD5OfMessageAttributes:
          $ref: "#/components/schemas/String"
        MD5OfMessageSystemAttributes:
          $ref: "#/components/schemas/String"
        SequenceNumber:
          $ref: "#/components/schemas/String"
      description: "Encloses a <code>MessageId</code> for a successfully-enqueued message
        in a <code> <a>SendMessageBatch</a>.</code> "
    SendMessageRequest:
      type: object
      required:
        - QueueUrl
        - MessageBody
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        MessageBody:
          $ref: "#/components/schemas/String"
        DelaySeconds:
          $ref: "#/components/schemas/Integer"
        MessageAttributes:
          $ref: "#/components/schemas/MessageBodyAttributeMap"
        MessageSystemAttributes:
          $ref: "#/components/schemas/MessageBodySystemAttributeMap"
        MessageDeduplicationId:
          $ref: "#/components/schemas/String"
        MessageGroupId:
          $ref: "#/components/schemas/String"
      description: <p/>
    SetQueueAttributesRequest:
      type: object
      required:
        - QueueUrl
        - Attributes
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Attributes:
          $ref: "#/components/schemas/QueueAttributeMap"
      description: <p/>
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      xml:
        wrapped: false
    TagQueueRequest:
      type: object
      required:
        - QueueUrl
        - Tags
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        Tags:
          $ref: "#/components/schemas/TagMap"
    UntagQueueRequest:
      type: object
      required:
        - QueueUrl
        - TagKeys
      properties:
        QueueUrl:
          $ref: "#/components/schemas/String"
        TagKeys:
          $ref: "#/components/schemas/TagKeyList"
