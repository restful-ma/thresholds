openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: Manages your Stackdriver Monitoring data and configurations. Most projects
    must be associated with a Stackdriver account, with a few exceptions as
    noted on the individual method pages.
  title: Stackdriver Monitoring
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - monitoring
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.18
      format: google
      url: https://monitoring.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: monitoring
externalDocs:
  url: https://cloud.google.com/monitoring/api/
tags:
  - name: operations
paths:
  "/v1/{name}":
    delete:
      description: Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        google.rpc.Code.UNIMPLEMENTED.
      operationId: monitoring.operations.delete
      parameters:
        - description: The name of the operation resource to be deleted.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      tags:
        - operations
    get:
      description: Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: monitoring.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      tags:
        - operations
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1/{name}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to Code.CANCELLED.
      operationId: monitoring.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      tags:
        - operations
servers:
  - url: https://monitoring.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  schemas:
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    DroppedLabels:
      description: A set of (label, value) pairs which were dropped during aggregation,
        attached to google.api.Distribution.Exemplars in google.api.Distribution
        values during aggregation.These values are used in combination with the
        label values that remain on the aggregated Distribution timeseries to
        construct the full label set for the exemplar values. The resulting full
        label set may be used to identify the specific task/job/instance (for
        example) which may be contributing to a long-tail, while allowing the
        storage savings of only storing aggregated distribution values for a
        large group.Note that there are no guarantees on ordering of the labels
        from exemplar-to-exemplar and from distribution-to-distribution in the
        same stream, and there may be duplicates. It is up to clients to resolve
        any ambiguities.
      properties:
        label:
          additionalProperties:
            type: string
          description: Map from label to its value, for all labels dropped in any
            aggregation.
          type: object
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance:

        service Foo {
          rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
        }

        The JSON representation for Empty is empty JSON object {}.
      properties: {}
      type: object
    Field:
      description: A single field of a message type.
      properties:
        cardinality:
          description: The field cardinality.
          enum:
            - CARDINALITY_UNKNOWN
            - CARDINALITY_OPTIONAL
            - CARDINALITY_REQUIRED
            - CARDINALITY_REPEATED
          type: string
        defaultValue:
          description: The string value of the default value of this field. Proto2 syntax
            only.
          type: string
        jsonName:
          description: The field JSON name.
          type: string
        kind:
          description: The field type.
          enum:
            - TYPE_UNKNOWN
            - TYPE_DOUBLE
            - TYPE_FLOAT
            - TYPE_INT64
            - TYPE_UINT64
            - TYPE_INT32
            - TYPE_FIXED64
            - TYPE_FIXED32
            - TYPE_BOOL
            - TYPE_STRING
            - TYPE_GROUP
            - TYPE_MESSAGE
            - TYPE_BYTES
            - TYPE_UINT32
            - TYPE_ENUM
            - TYPE_SFIXED32
            - TYPE_SFIXED64
            - TYPE_SINT32
            - TYPE_SINT64
          type: string
        name:
          description: The field name.
          type: string
        number:
          description: The field number.
          format: int32
          type: integer
        oneofIndex:
          description: The index of the field type in Type.oneofs, for message or
            enumeration types. The first type has index 1; zero means the type
            is not in the list.
          format: int32
          type: integer
        options:
          description: The protocol buffer options.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        packed:
          description: Whether to use alternative packed wire representation.
          type: boolean
        typeUrl:
          description: 'The field type URL, without the scheme, for message or enumeration
            types. Example: "type.googleapis.com/google.protobuf.Timestamp".'
          type: string
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: A list of operations that matches the specified filter in the
            request.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of
        a network API call.
      properties:
        done:
          description: If the value is false, it means the operation is still in progress.
            If true, the operation is completed, and either error or response is
            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the name should have the format of
            operations/some/unique/name.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The normal response of the operation in case of success. If the
            original method returns no data on success, such as Delete, the
            response is google.protobuf.Empty. If the original method is
            standard Get/Create/Update, the response should be the resource. For
            other methods, the response should have the type XxxResponse, where
            Xxx is the original method name. For example, if the original method
            name is TakeSnapshot(), the inferred response type is
            TakeSnapshotResponse.
          type: object
      type: object
    Option:
      description: A protocol buffer option, which can be attached to a message, field,
        enumeration, etc.
      properties:
        name:
          description: The option's name. For protobuf built-in options (options defined in
            descriptor.proto), this is the short name. For example, "map_entry".
            For custom options, it should be the fully-qualified name. For
            example, "google.api.http".
          type: string
        value:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The option's value packed in an Any message. If the value is a
            primitive, the corresponding wrapper type defined in
            google/protobuf/wrappers.proto should be used. If the value is an
            enum, it should be stored as an int32 value using the
            google.protobuf.Int32Value type.
          type: object
      type: object
    SourceContext:
      description: SourceContext represents information about the source of a protobuf
        element, like the file in which it is defined.
      properties:
        fileName:
          description: 'The path-qualified name of the .proto file that contained the
            associated protobuf element. For example:
            "google/protobuf/source_context.proto".'
          type: string
      type: object
    SpanContext:
      description: "The context of a span, attached to google.api.Distribution.Exemplars in
        google.api.Distribution values during aggregation.It contains the name
        of a span with
        format:  projects/PROJECT_ID/traces/TRACE_ID/spans/SPAN_ID"
      properties:
        spanName:
          description: >-
            The resource name of the span in the following format:

            projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]

            TRACE_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array.SPAN_ID is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
          type: string
      type: object
    Status:
      description: >-
        The Status type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by gRPC (https://github.com/grpc). The error model is designed
        to be:

        Simple to use and understand for most users

        Flexible enough to meet unexpected needsOverviewThe Status message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of google.rpc.Code, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers understand and resolve the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package google.rpc that can be used for common error conditions.Language mappingThe Status message is the logical representation of the error model, but it is not necessarily the actual wire format. When the Status message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.Other usesThe error model and the Status message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.Example uses of this error model include:

        Partial errors. If a service needs to return partial errors to the client, it may embed the Status in the normal response to indicate the partial errors.

        Workflow errors. A typical workflow has multiple steps. Each step may have a Status message for error reporting.

        Batch operations. If a client uses batch request and batch response, the Status message should be used directly inside batch response, one for each error sub-response.

        Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of those operations should be represented directly using the Status message.

        Logging. If some API errors are stored in logs, the message Status could be used directly after any stripping needed for security/privacy reasons.
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    Type:
      description: A protocol buffer message type.
      properties:
        fields:
          description: The list of fields.
          items:
            $ref: "#/components/schemas/Field"
          type: array
        name:
          description: The fully qualified message name.
          type: string
        oneofs:
          description: The list of types appearing in oneof definitions in this type.
          items:
            type: string
          type: array
        options:
          description: The protocol buffer options.
          items:
            $ref: "#/components/schemas/Option"
          type: array
        sourceContext:
          $ref: "#/components/schemas/SourceContext"
        syntax:
          description: The source syntax.
          enum:
            - SYNTAX_PROTO2
            - SYNTAX_PROTO3
          type: string
      type: object
