openapi: 3.0.0
info:
  contact:
    name: Google
    url: https://google.com
  description: Uploads, processes, queries, and searches Genomics data in the cloud.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Genomics
  version: v1alpha2
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://genomics.googleapis.com/$discovery/rest?version=v1alpha2
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: genomics
externalDocs:
  url: https://cloud.google.com/genomics
tags:
  - name: operations
  - name: pipelines
paths:
  /v1alpha2/pipelines:
    get:
      description: |-
        Lists pipelines.

        Caller must have READ permission to the project.
      operationId: genomics.pipelines.list
      parameters:
        - description: |-
            Pipelines with names that match this prefix should be
            returned.  If unspecified, all pipelines in the project, up to
            `pageSize`, will be returned.
          in: query
          name: namePrefix
          schema:
            type: string
        - description: |-
            Number of pipelines to return at once. Defaults to 256, and max
            is 2048.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: |-
            Token to use to indicate where to start getting results.
            If unspecified, returns the first page of results.
          in: query
          name: pageToken
          schema:
            type: string
        - description: |-
            Required. The name of the project to search for pipelines. Caller
            must have READ access to this project.
          in: query
          name: projectId
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListPipelinesResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: |-
        Creates a pipeline that can be run later. Create takes a Pipeline that
        has all fields other than `pipelineId` populated, and then returns
        the same pipeline with `pipelineId` populated. This id can be used
        to run the pipeline.

        Caller must have WRITE permission to the project.
      operationId: genomics.pipelines.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pipeline"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Pipeline"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
  "/v1alpha2/pipelines/{pipelineId}":
    delete:
      description: |-
        Deletes a pipeline based on ID.

        Caller must have WRITE permission to the project.
      operationId: genomics.pipelines.delete
      parameters:
        - description: |-
            Caller must have WRITE access to the project in which this pipeline
            is defined.
          in: path
          name: pipelineId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
    get:
      description: |-
        Retrieves a pipeline based on ID.

        Caller must have READ permission to the project.
      operationId: genomics.pipelines.get
      parameters:
        - description: |-
            Caller must have READ access to the project in which this pipeline
            is defined.
          in: path
          name: pipelineId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Pipeline"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  /v1alpha2/pipelines:getControllerConfig:
    get:
      description: |-
        Gets controller configuration information. Should only be called
        by VMs created by the Pipelines Service and not by end users.
      operationId: genomics.pipelines.getControllerConfig
      parameters:
        - description: The operation to retrieve controller configuration for.
          in: query
          name: operationId
          schema:
            type: string
        - in: query
          name: validationToken
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ControllerConfig"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  /v1alpha2/pipelines:run:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Runs a pipeline. If `pipelineId` is specified in the request, then

        run a saved pipeline. If `ephemeralPipeline` is specified, then run

        that pipeline once without saving a copy.


        The caller must have READ permission to the project where the pipeline

        is stored and WRITE permission to the project where the pipeline will be

        run, as VMs will be created and storage will be used.


        If a pipeline operation is still running after 6 days, it will be canceled.
      operationId: genomics.pipelines.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunPipelineRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/compute
          Oauth2c:
            - https://www.googleapis.com/auth/compute
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
  /v1alpha2/pipelines:setOperationStatus:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    put:
      description: >-
        Sets status of a given operation. Any new timestamps (as determined by

        description) are appended to TimestampEvents. Should only be called by VMs

        created by the Pipelines Service and not by end users.
      operationId: genomics.pipelines.setOperationStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetOperationStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - pipelines
  "/v1alpha2/{name}":
    get:
      description: >-
        Gets the latest state of a long-running operation.

        Clients can use this method to poll the operation result at intervals as

        recommended by the API service.

        Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission&#58;


        * `genomics.operations.get`
      operationId: genomics.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - operations
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1alpha2/{name}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation.

        The server makes a best effort to cancel the operation, but success is not

        guaranteed. Clients may use Operations.GetOperation

        or Operations.ListOperations

        to check whether the cancellation succeeded or the operation completed

        despite cancellation.

        Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission&#58;


        * `genomics.operations.cancel`
      operationId: genomics.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/genomics
          Oauth2c:
            - https://www.googleapis.com/auth/genomics
      tags:
        - operations
servers:
  - url: https://genomics.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
            https://www.googleapis.com/auth/compute: View and manage your Google Compute Engine resources
            https://www.googleapis.com/auth/genomics: View and manage Genomics data
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
            https://www.googleapis.com/auth/compute: View and manage your Google Compute Engine resources
            https://www.googleapis.com/auth/genomics: View and manage Genomics data
  schemas:
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    ComputeEngine:
      description: |-
        Describes a Compute Engine resource that is being managed by a running
        pipeline.
      properties:
        diskNames:
          description: The names of the disks that were created for this pipeline.
          items:
            type: string
          type: array
        instanceName:
          description: The instance on which the operation is running.
          type: string
        machineType:
          description: The machine type of the instance.
          type: string
        zone:
          description: The availability zone in which the instance resides.
          type: string
      type: object
    ContainerKilledEvent:
      description: |-
        An event generated when a container is forcibly terminated by the
        worker. Currently, this only occurs when the container outlives the
        timeout specified by the user.
      properties:
        actionId:
          description: The numeric ID of the action that started the container.
          format: int32
          type: integer
      type: object
    ContainerStartedEvent:
      description: An event generated when a container starts.
      properties:
        actionId:
          description: The numeric ID of the action that started this container.
          format: int32
          type: integer
        ipAddress:
          description: >-
            The public IP address that can be used to connect to the container.
            This

            field is only populated when at least one port mapping is present. If the

            instance was created with a private address, this field will be empty even

            if port mappings exist.
          type: string
        portMappings:
          additionalProperties:
            format: int32
            type: integer
          description: >-
            The container-to-host port mappings installed for this container.
            This

            set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag

            as well as any specified in the `Action` definition.
          type: object
      type: object
    ContainerStoppedEvent:
      description: An event generated when a container exits.
      properties:
        actionId:
          description: The numeric ID of the action that started this container.
          format: int32
          type: integer
        exitStatus:
          description: The exit status of the container.
          format: int32
          type: integer
        stderr:
          description: >-
            The tail end of any content written to standard error by the
            container.

            If the content emits large amounts of debugging noise or contains

            sensitive information, you can prevent the content from being printed by

            setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.


            Note that only a small amount of the end of the stream is captured here.

            The entire stream is stored in the `/google/logs` directory mounted into

            each action, and can be copied off the machine as described elsewhere.
          type: string
      type: object
    ControllerConfig:
      description: |-
        Stores the information that the controller will fetch from the
        server in order to run. Should only be used by VMs created by the
        Pipelines Service and not by end users.
      properties:
        cmd:
          type: string
        disks:
          additionalProperties:
            type: string
          type: object
        gcsLogPath:
          type: string
        gcsSinks:
          additionalProperties:
            $ref: "#/components/schemas/RepeatedString"
          type: object
        gcsSources:
          additionalProperties:
            $ref: "#/components/schemas/RepeatedString"
          type: object
        image:
          type: string
        machineType:
          type: string
        vars:
          additionalProperties:
            type: string
          type: object
      type: object
    DelayedEvent:
      description: |-
        An event generated whenever a resource limitation or transient error
        delays execution of a pipeline that was otherwise ready to run.
      properties:
        cause:
          description: >-
            A textual description of the cause of the delay. The string can
            change

            without notice because it is often generated by another service (such as

            Compute Engine).
          type: string
        metrics:
          description: >-
            If the delay was caused by a resource shortage, this field lists the

            Compute Engine metrics that are preventing this operation from running

            (for example, `CPUS` or `INSTANCES`). If the particular metric is not

            known, a single `UNKNOWN` metric will be present.
          items:
            type: string
          type: array
      type: object
    Disk:
      description: A Google Compute Engine disk resource specification.
      properties:
        autoDelete:
          description: >-
            Deprecated. Disks created by the Pipelines API will be deleted at
            the end

            of the pipeline run, regardless of what this field is set to.
          type: boolean
        mountPoint:
          description: |-
            Required at create time and cannot be overridden at run time.
            Specifies the path in the docker container where files on
            this disk should be located. For example, if `mountPoint`
            is `/mnt/disk`, and the parameter has `localPath`
            `inputs/file.txt`, the docker container can access the data at
            `/mnt/disk/inputs/file.txt`.
          type: string
        name:
          description: |-
            Required. The name of the disk that can be used in the pipeline
            parameters. Must be 1 - 63 characters.
            The name "boot" is reserved for system use.
          type: string
        readOnly:
          description: >-
            Specifies how a sourced-base persistent disk will be mounted. See

            https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances

            for more details.

            Can only be set at create time.
          type: boolean
        sizeGb:
          description: |-
            The size of the disk. Defaults to 500 (GB).
            This field is not applicable for local SSD.
          format: int32
          type: integer
        source:
          description: >-
            The full or partial URL of the persistent disk to attach. See

            https://cloud.google.com/compute/docs/reference/latest/instances#resource

            and

            https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots

            for more details.
          type: string
        type:
          description: Required. The type of the disk to create.
          enum:
            - TYPE_UNSPECIFIED
            - PERSISTENT_HDD
            - PERSISTENT_SSD
            - LOCAL_SSD
          type: string
      type: object
    DockerExecutor:
      description: The Docker execuctor specification.
      properties:
        cmd:
          description: >-
            Required. The command or newline delimited script to run. The
            command

            string will be executed within a bash shell.


            If the command exits with a non-zero exit code, output parameter

            de-localization will be skipped and the pipeline operation's

            `error` field will be populated.


            Maximum command string length is 16384.
          type: string
        imageName:
          description: >-
            Required. Image name from either Docker Hub or Google Container
            Registry.

            Users that run pipelines must have READ access to the image.
          type: string
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    Event:
      description: Carries information about events that occur during pipeline execution.
      properties:
        description:
          description: >-
            A human-readable description of the event. Note that these strings
            can

            change at any time without notice. Any application logic must use the

            information in the `details` field.
          type: string
        details:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Machine-readable details about the event.
          type: object
        timestamp:
          description: The time at which the event occurred.
          format: google-datetime
          type: string
      type: object
    FailedEvent:
      description: |-
        An event generated when the execution of a pipeline has failed. Note
        that other events can continue to occur after this event.
      properties:
        cause:
          description: The human-readable description of the cause of the failure.
          type: string
        code:
          description: The Google standard error code that best describes this failure.
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          type: string
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: A list of operations that matches the specified filter in the
            request.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
      type: object
    ListPipelinesResponse:
      description: |-
        The response of ListPipelines. Contains at most `pageSize`
        pipelines. If it contains `pageSize` pipelines, and more pipelines
        exist, then `nextPageToken` will be populated and should be
        used as the `pageToken` argument to a subsequent ListPipelines
        request.
      properties:
        nextPageToken:
          description: The token to use to get the next page of results.
          type: string
        pipelines:
          description: The matched pipelines.
          items:
            $ref: "#/components/schemas/Pipeline"
          type: array
      type: object
    LocalCopy:
      description: LocalCopy defines how a remote file should be copied to and from the VM.
      properties:
        disk:
          description: |-
            Required. The name of the disk where this parameter is
            located. Can be the name of one of the disks specified in the
            Resources field, or "boot", which represents the Docker
            instance's boot disk and has a mount point of `/`.
          type: string
        path:
          description: >-
            Required. The path within the user's docker container where

            this input should be localized to and from, relative to the specified

            disk's mount point. For example: file.txt,
          type: string
      type: object
    LoggingOptions:
      description: The logging options for the pipeline run.
      properties:
        gcsPath:
          description: |-
            The location in Google Cloud Storage to which the pipeline logs
            will be copied. Can be specified as a fully qualified directory
            path, in which case logs will be output with a unique identifier
            as the filename in that directory, or as a fully specified path,
            which must end in `.log`, in which case that path will be
            used, and the user must ensure that logs are not
            overwritten. Stdout and stderr logs from the run are also
            generated and output as `-stdout.log` and `-stderr.log`.
          type: string
      type: object
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a

        network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress.

            If `true`, the operation is completed, and either `error` or `response` is

            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: An OperationMetadata or Metadata object. This will always be
            returned with the Operation.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same
            service that originally returns it. For example&#58;
            `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: An Empty object.
          type: object
      type: object
    OperationEvent:
      description: An event that occurred during an Operation.
      properties:
        description:
          description: Required description of event.
          type: string
        endTime:
          description: >-
            Optional time of when event finished. An event can have a start time
            and no

            finish time. If an event has a finish time, there must be a start time.
          format: google-datetime
          type: string
        startTime:
          description: Optional time of when event started.
          format: google-datetime
          type: string
      type: object
    OperationMetadata:
      description: Metadata describing an Operation.
      properties:
        clientId:
          description: >-
            This field is deprecated. Use `labels` instead. Optionally provided
            by the

            caller when submitting the request that creates the operation.
          type: string
        createTime:
          description: The time at which the job was submitted to the Genomics service.
          format: google-datetime
          type: string
        endTime:
          description: The time at which the job stopped running.
          format: google-datetime
          type: string
        events:
          description: >-
            Optional event messages that were generated during the job's
            execution.

            This also contains any warnings that were generated during import

            or export.
          items:
            $ref: "#/components/schemas/OperationEvent"
          type: array
        labels:
          additionalProperties:
            type: string
          description: >-
            Optionally provided by the caller when submitting the request that
            creates

            the operation.
          type: object
        projectId:
          description: The Google Cloud Project in which the job is scoped.
          type: string
        request:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The original request that started the operation. Note that this will
            be in

            current version of the API. If the operation was started with v1beta2 API

            and a GetOperation is performed on v1 API, a v1 request will be returned.
          type: object
        runtimeMetadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Runtime metadata on this Operation.
          type: object
        startTime:
          description: The time at which the job began to run.
          format: google-datetime
          type: string
      type: object
    Pipeline:
      description: >-
        The pipeline object. Represents a transformation from a set of input

        parameters to a set of output parameters. The transformation is defined

        as a docker image and command to run within that image. Each pipeline

        is run on a Google Compute Engine VM. A pipeline can be created with the

        `create` method and then later run with the `run` method, or a pipeline can

        be defined and run all at once with the `run` method.
      properties:
        description:
          description: User-specified description.
          type: string
        docker:
          $ref: "#/components/schemas/DockerExecutor"
        inputParameters:
          description: Input parameters of the pipeline.
          items:
            $ref: "#/components/schemas/PipelineParameter"
          type: array
        name:
          description: >-
            Required. A user specified pipeline name that does not have to be
            unique.

            This name can be used for filtering Pipelines in ListPipelines.
          type: string
        outputParameters:
          description: Output parameters of the pipeline.
          items:
            $ref: "#/components/schemas/PipelineParameter"
          type: array
        pipelineId:
          description: >-
            Unique pipeline id that is generated by the service when
            CreatePipeline

            is called. Cannot be specified in the Pipeline used in the

            CreatePipelineRequest, and will be populated in the response to

            CreatePipeline and all subsequent Get and List calls. Indicates that the

            service has registered this pipeline.
          type: string
        projectId:
          description: >-
            Required. The project in which to create the pipeline. The caller
            must have

            WRITE access.
          type: string
        resources:
          $ref: "#/components/schemas/PipelineResources"
      type: object
    PipelineParameter:
      description: >-
        Parameters facilitate setting and delivering data into the

        pipeline's execution environment. They are defined at create time,

        with optional defaults, and can be overridden at run time.


        If `localCopy` is unset, then the parameter specifies a string that

        is passed as-is into the pipeline, as the value of the environment

        variable with the given name.  A default value can be optionally

        specified at create time. The default can be overridden at run time

        using the inputs map. If no default is given, a value must be

        supplied at runtime.


        If `localCopy` is defined, then the parameter specifies a data

        source or sink, both in Google Cloud Storage and on the Docker container

        where the pipeline computation is run. The service account associated with

        the Pipeline (by

        default the project's Compute Engine service account) must have access to the

        Google Cloud Storage paths.


        At run time, the Google Cloud Storage paths can be overridden if a default

        was provided at create time, or must be set otherwise. The pipeline runner

        should add a key/value pair to either the inputs or outputs map. The

        indicated data copies will be carried out before/after pipeline execution,

        just as if the corresponding arguments were provided to `gsutil cp`.


        For example: Given the following `PipelineParameter`, specified

        in the `inputParameters` list:


        ```

        {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}

        ```


        where `disk` is defined in the `PipelineResources` object as:


        ```

        {name: "pd1", mountPoint: "/mnt/disk/"}

        ```


        We create a disk named `pd1`, mount it on the host VM, and map

        `/mnt/pd1` to `/mnt/disk` in the docker container.  At

        runtime, an entry for `input_file` would be required in the inputs

        map, such as:


        ```
          inputs["input_file"] = "gs://my-bucket/bar.txt"
        ```


        This would generate the following gsutil call:


        ```
          gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt
        ```


        The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the

        Docker container. Acceptable paths are:


        <table>
          <thead>
            <tr><th>Google Cloud storage path</th><th>Local path</th></tr>
          </thead>
          <tbody>
            <tr><td>file</td><td>file</td></tr>
            <tr><td>glob</td><td>directory</td></tr>
          </tbody>
        </table>


        For outputs, the direction of the copy is reversed:


        ```
          gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt
        ```


        Acceptable paths are:


        <table>
          <thead>
            <tr><th>Local path</th><th>Google Cloud Storage path</th></tr>
          </thead>
          <tbody>
            <tr><td>file</td><td>file</td></tr>
            <tr>
              <td>file</td>
              <td>directory - directory must already exist</td>
            </tr>
            <tr>
              <td>glob</td>
              <td>directory - directory will be created if it doesn't exist</td></tr>
          </tbody>
        </table>


        One restriction due to docker limitations, is that for outputs that are found

        on the boot disk, the local path cannot be a glob and must be a file.
      properties:
        defaultValue:
          description: >-
            The default value for this parameter. Can be overridden at runtime.

            If `localCopy` is present, then this must be a Google Cloud Storage path

            beginning with `gs://`.
          type: string
        description:
          description: Human-readable description.
          type: string
        localCopy:
          $ref: "#/components/schemas/LocalCopy"
        name:
          description: >-
            Required. Name of the parameter - the pipeline runner uses this
            string

            as the key to the input and output maps in RunPipeline.
          type: string
      type: object
    PipelineResources:
      description: The system resources for the pipeline run.
      properties:
        acceleratorCount:
          description: >-
            Optional. The number of accelerators of the specified type to
            attach.

            By specifying this parameter, you will download and install the following

            third-party software onto your managed Compute Engine instances:

            NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
          format: int64
          type: string
        acceleratorType:
          description: >-
            Optional. The Compute Engine defined accelerator type.

            By specifying this parameter, you will download and install the following

            third-party software onto your managed Compute Engine instances: NVIDIA®

            Tesla® drivers and NVIDIA® CUDA toolkit.

            Please see https://cloud.google.com/compute/docs/gpus/ for a list of

            available accelerator types.
          type: string
        bootDiskSizeGb:
          description: The size of the boot disk. Defaults to 10 (GB).
          format: int32
          type: integer
        disks:
          description: Disks to attach.
          items:
            $ref: "#/components/schemas/Disk"
          type: array
        minimumCpuCores:
          description: The minimum number of cores to use. Defaults to 1.
          format: int32
          type: integer
        minimumRamGb:
          description: The minimum amount of RAM to use. Defaults to 3.75 (GB)
          format: double
          type: number
        noAddress:
          description: >-
            Whether to assign an external IP to the instance. This is an
            experimental

            feature that may go away. Defaults to false.

            Corresponds to `--no_address` flag for [gcloud compute instances create]

            (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).

            In order to use this, must be true for both create time and run time.

            Cannot be true at run time if false at create time. If you need to ssh into

            a private IP VM for debugging, you can ssh to a public VM and then ssh into

            the private VM's Internal IP.  If noAddress is set, this pipeline run may

            only load docker images from Google Container Registry and not Docker Hub.

            Before using this, you must

            [configure access to Google services from internal

            IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
          type: boolean
        preemptible:
          description: >-
            Whether to use preemptible VMs. Defaults to `false`. In order to use
            this,

            must be true for both create time and run time. Cannot be true at run time

            if false at create time.
          type: boolean
        zones:
          description: |-
            List of Google Compute Engine availability zones to which resource
            creation will restricted. If empty, any zone may be chosen.
          items:
            type: string
          type: array
      type: object
    PullStartedEvent:
      description: An event generated when the worker starts pulling an image.
      properties:
        imageUri:
          description: The URI of the image that was pulled.
          type: string
      type: object
    PullStoppedEvent:
      description: An event generated when the worker stops pulling an image.
      properties:
        imageUri:
          description: The URI of the image that was pulled.
          type: string
      type: object
    RepeatedString:
      properties:
        values:
          items:
            type: string
          type: array
      type: object
    RunPipelineArgs:
      description: The pipeline run arguments.
      properties:
        clientId:
          description: >-
            This field is deprecated. Use `labels` instead. Client-specified
            pipeline

            operation identifier.
          type: string
        inputs:
          additionalProperties:
            type: string
          description: >-
            Pipeline input arguments; keys are defined in the pipeline
            documentation.

            All input parameters that do not have default values  must be specified.

            If parameters with defaults are specified here, the defaults will be

            overridden.
          type: object
        keepVmAliveOnFailureDuration:
          description: >-
            How long to keep the VM up after a failure (for example docker
            command

            failed, copying input or output files failed, etc). While the VM is up, one

            can ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.
          format: google-duration
          type: string
        labels:
          additionalProperties:
            type: string
          description: >-
            Labels to apply to this pipeline run. Labels will also be applied to

            compute resources (VM, disks) created by this pipeline run. When listing

            operations, operations can filtered by labels.

            Label keys may not be empty; label values may be empty. Non-empty labels

            must be 1-63 characters long, and comply with [RFC1035]

            (https://www.ietf.org/rfc/rfc1035.txt).

            Specifically, the name must be 1-63 characters long and match the regular

            expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first

            character must be a lowercase letter, and all following characters must be

            a dash, lowercase letter, or digit, except the last character, which cannot

            be a dash.
          type: object
        logging:
          $ref: "#/components/schemas/LoggingOptions"
        outputs:
          additionalProperties:
            type: string
          description: |-
            Pipeline output arguments; keys are defined in the pipeline
            documentation.  All output parameters of without default values
            must be specified.  If parameters with defaults are specified
            here, the defaults will be overridden.
          type: object
        projectId:
          description: >-
            Required. The project in which to run the pipeline. The caller must
            have

            WRITER access to all Google Cloud services and resources (e.g. Google

            Compute Engine) will be used.
          type: string
        resources:
          $ref: "#/components/schemas/PipelineResources"
        serviceAccount:
          $ref: "#/components/schemas/ServiceAccount"
      type: object
    RunPipelineRequest:
      description: |-
        The request to run a pipeline. If `pipelineId` is specified, it
        refers to a saved pipeline created with CreatePipeline and set as
        the `pipelineId` of the returned Pipeline object. If
        `ephemeralPipeline` is specified, that pipeline is run once
        with the given args and not saved. It is an error to specify both
        `pipelineId` and `ephemeralPipeline`. `pipelineArgs`
        must be specified.
      properties:
        ephemeralPipeline:
          $ref: "#/components/schemas/Pipeline"
        pipelineArgs:
          $ref: "#/components/schemas/RunPipelineArgs"
        pipelineId:
          description: The already created pipeline to run.
          type: string
      type: object
    RunPipelineResponse:
      description: >-
        The response to the RunPipeline method, returned in the operation's
        result

        field on success.
      properties: {}
      type: object
    RuntimeMetadata:
      description: |-
        Runtime metadata that will be populated in the
        runtimeMetadata
        field of the Operation associated with a RunPipeline execution.
      properties:
        computeEngine:
          $ref: "#/components/schemas/ComputeEngine"
      type: object
    ServiceAccount:
      description: A Google Cloud Service Account.
      properties:
        email:
          description: |-
            Email address of the service account. Defaults to `default`,
            which uses the compute service account associated with the project.
          type: string
        scopes:
          description: |-
            List of scopes to be enabled for this service account on the VM.
            The following scopes are automatically included:

            * https://www.googleapis.com/auth/compute
            * https://www.googleapis.com/auth/devstorage.full_control
            * https://www.googleapis.com/auth/genomics
            * https://www.googleapis.com/auth/logging.write
            * https://www.googleapis.com/auth/monitoring.write
          items:
            type: string
          type: array
      type: object
    SetOperationStatusRequest:
      description: |-
        Request to set operation status. Should only be used by VMs
        created by the Pipelines Service and not by end users.
      properties:
        errorCode:
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          type: string
        errorMessage:
          type: string
        operationId:
          type: string
        timestampEvents:
          items:
            $ref: "#/components/schemas/TimestampEvent"
          type: array
        validationToken:
          format: uint64
          type: string
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    TimestampEvent:
      description: |-
        Stores the list of events and times they occured for major events in job
        execution.
      properties:
        description:
          description: String indicating the type of event
          type: string
        timestamp:
          description: The time this event occured.
          format: google-datetime
          type: string
      type: object
    UnexpectedExitStatusEvent:
      description: |-
        An event generated when the execution of a container results in a
        non-zero exit status that was not otherwise ignored. Execution will
        continue, but only actions that are flagged as `ALWAYS_RUN` will be
        executed. Other actions will be skipped.
      properties:
        actionId:
          description: The numeric ID of the action that started the container.
          format: int32
          type: integer
        exitStatus:
          description: The exit status of the container.
          format: int32
          type: integer
      type: object
    WorkerAssignedEvent:
      description: |-
        An event generated after a worker VM has been assigned to run the
        pipeline.
      properties:
        instance:
          description: The worker's instance name.
          type: string
        machineType:
          description: The machine type that was assigned for the worker.
          type: string
        zone:
          description: The zone the worker is running in.
          type: string
      type: object
    WorkerReleasedEvent:
      description: |-
        An event generated when the worker VM that was assigned to the pipeline
        has been released (deleted).
      properties:
        instance:
          description: The worker's instance name.
          type: string
        zone:
          description: The zone the worker was running in.
          type: string
      type: object
