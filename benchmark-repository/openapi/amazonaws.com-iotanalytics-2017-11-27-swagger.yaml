openapi: 3.0.0
info:
  version: 2017-11-27
  x-release: v4
  title: AWS IoT Analytics
  description: <p>AWS IoT Analytics allows you to collect large amounts of device data,
    process messages, and store them. You can then query the data and run
    sophisticated analytics on it. AWS IoT Analytics enables advanced data
    exploration through integration with Jupyter Notebooks and data
    visualization through integration with Amazon QuickSight.</p> <p>Traditional
    analytics and business intelligence tools are designed to process structured
    data. IoT data often comes from devices that record noisy processes (such as
    temperature, motion, or sound). As a result the data from these devices can
    have significant gaps, corrupted messages, and false readings that must be
    cleaned up before analysis can occur. Also, IoT data is often only
    meaningful in the context of other data from external sources. </p> <p>AWS
    IoT Analytics automates the steps required to analyze data from IoT devices.
    AWS IoT Analytics filters, transforms, and enriches IoT data before storing
    it in a time-series data store for analysis. You can set up the service to
    collect only the data you need from your devices, apply mathematical
    transforms to process the data, and enrich the data with device-specific
    metadata such as device type and location before storing it. Then, you can
    analyze your data by running queries using the built-in SQL query engine, or
    perform more complex analytics and machine learning inference. AWS IoT
    Analytics includes pre-built models for common IoT use cases so you can
    answer questions like which devices are about to fail or which customers are
    at risk of abandoning their wearable devices.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: iotanalytics
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotanalytics-2017-11-27.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/iotanalytics/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /messages/batch:
    post:
      operationId: BatchPutMessage
      description: Sends messages to a channel.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchPutMessageResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channelName
                - messages
              properties:
                channelName:
                  description: The name of the channel where the messages are sent.
                  type: string
                  pattern: ^[a-zA-Z0-9_]+$
                  minLength: 1
                  maxLength: 128
                messages:
                  description: "<p>The list of messages to be sent. Each message has
                    format: '{ \"messageId\": \"string\", \"payload\":
                    \"string\"}'.</p> <p>Note that the field names of message
                    payloads (data) that you send to AWS IoT Analytics:</p> <ul>
                    <li> <p>Must contain only alphanumeric characters and
                    undescores (_); no other special characters are allowed.</p>
                    </li> <li> <p>Must begin with an alphabetic character or
                    single underscore (_).</p> </li> <li> <p>Cannot contain
                    hyphens (-).</p> </li> <li> <p>In regular expression terms:
                    \"^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$\". </p>
                    </li> <li> <p>Cannot be greater than 255 characters.</p>
                    </li> <li> <p>Are case-insensitive. (Fields named \"foo\"
                    and \"FOO\" in the same payload are considered
                    duplicates.)</p> </li> </ul> <p>For example, {\"temp_01\":
                    29} or {\"_temp_01\": 29} are valid, but {\"temp-01\": 29},
                    {\"01_temp\": 29} or {\"__temp_01\": 29} are invalid in
                    message payloads. </p>"
                  type: array
                  items:
                    $ref: "#/components/schemas/Message"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/pipelines/{pipelineName}/reprocessing/{reprocessingId}":
    delete:
      operationId: CancelPipelineReprocessing
      description: Cancels the reprocessing of data through the pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelPipelineReprocessingResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of pipeline for which data reprocessing is canceled.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: reprocessingId
          in: path
          required: true
          description: The ID of the reprocessing task (returned by
            "StartPipelineReprocessing").
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /channels:
    post:
      operationId: CreateChannel
      description: Creates a channel. A channel collects data from an MQTT topic and
        archives the raw, unprocessed messages before publishing the data to a
        pipeline.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateChannelResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channelName
              properties:
                channelName:
                  description: The name of the channel.
                  type: string
                  pattern: ^[a-zA-Z0-9_]+$
                  minLength: 1
                  maxLength: 128
                channelStorage:
                  description: Where channel data is stored.
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: "#/components/schemas/ServiceManagedChannelS3Storage"
                    customerManagedS3:
                      $ref: "#/components/schemas/CustomerManagedChannelS3Storage"
                retentionPeriod:
                  description: How long, in days, message data is kept.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedRetentionPeriod"
                    numberOfDays:
                      $ref: "#/components/schemas/RetentionPeriodInDays"
                tags:
                  description: Metadata which can be used to manage the channel.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                  minItems: 1
                  maxItems: 50
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListChannels
      description: Retrieves a list of channels.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListChannelsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p>
            <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  /datasets:
    post:
      operationId: CreateDataset
      description: Creates a data set. A data set stores data retrieved from a data store
        by applying a "queryAction" (a SQL query) or a "containerAction"
        (executing a containerized application). This operation creates the
        skeleton of a data set. The data set can be populated manually by
        calling "CreateDatasetContent" or automatically according to a "trigger"
        you specify.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDatasetResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - datasetName
                - actions
              properties:
                datasetName:
                  description: The name of the data set.
                  type: string
                  pattern: ^[a-zA-Z0-9_]+$
                  minLength: 1
                  maxLength: 128
                actions:
                  description: A list of actions that create the data set contents.
                  type: array
                  items:
                    $ref: "#/components/schemas/DatasetAction"
                  minItems: 1
                  maxItems: 1
                triggers:
                  description: A list of triggers. A trigger causes data set contents to be
                    populated at a specified time interval or when another data
                    set's contents are created. The list of triggers can be
                    empty or contain up to five <b>DataSetTrigger</b> objects.
                  type: array
                  items:
                    $ref: "#/components/schemas/DatasetTrigger"
                  minItems: 0
                  maxItems: 5
                contentDeliveryRules:
                  description: When data set contents are created they are delivered to
                    destinations specified here.
                  type: array
                  items:
                    $ref: "#/components/schemas/DatasetContentDeliveryRule"
                  minItems: 0
                  maxItems: 20
                retentionPeriod:
                  description: How long, in days, message data is kept.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedRetentionPeriod"
                    numberOfDays:
                      $ref: "#/components/schemas/RetentionPeriodInDays"
                versioningConfiguration:
                  description: Information about the versioning of data set contents.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedVersioning"
                    maxVersions:
                      $ref: "#/components/schemas/MaxVersions"
                tags:
                  description: Metadata which can be used to manage the data set.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                  minItems: 1
                  maxItems: 50
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListDatasets
      description: Retrieves information about data sets.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDatasetsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p>
            <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  "/datasets/{datasetName}/content":
    post:
      operationId: CreateDatasetContent
      description: Creates the content of a data set by applying a "queryAction" (a SQL
        query) or a "containerAction" (executing a containerized application).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDatasetContentResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    delete:
      operationId: DeleteDatasetContent
      description: Deletes the content of the specified data set.
      responses:
        "204":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose content is deleted.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: versionId
          in: query
          required: false
          description: The version of the data set whose content is deleted. You can also
            use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the
            latest or latest successfully completed data set. If not specified,
            "$LATEST_SUCCEEDED" is the default.
          schema:
            type: string
            minLength: 7
            maxLength: 36
    get:
      operationId: GetDatasetContent
      description: Retrieves the contents of a data set as pre-signed URIs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDatasetContentResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose contents are retrieved.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: versionId
          in: query
          required: false
          description: The version of the data set whose contents are retrieved. You can
            also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve
            the contents of the latest or latest successfully completed data
            set. If not specified, "$LATEST_SUCCEEDED" is the default.
          schema:
            type: string
            minLength: 7
            maxLength: 36
  /datastores:
    post:
      operationId: CreateDatastore
      description: Creates a data store, which is a repository for messages.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDatastoreResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - datastoreName
              properties:
                datastoreName:
                  description: The name of the data store.
                  type: string
                  pattern: ^[a-zA-Z0-9_]+$
                  minLength: 1
                  maxLength: 128
                datastoreStorage:
                  description: Where data store data is stored.
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: "#/components/schemas/ServiceManagedDatastoreS3Storage"
                    customerManagedS3:
                      $ref: "#/components/schemas/CustomerManagedDatastoreS3Storage"
                retentionPeriod:
                  description: How long, in days, message data is kept.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedRetentionPeriod"
                    numberOfDays:
                      $ref: "#/components/schemas/RetentionPeriodInDays"
                tags:
                  description: Metadata which can be used to manage the data store.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                  minItems: 1
                  maxItems: 50
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListDatastores
      description: Retrieves a list of data stores.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDatastoresResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p>
            <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  /pipelines:
    post:
      operationId: CreatePipeline
      description: Creates a pipeline. A pipeline consumes messages from one or more
        channels and allows you to process the messages before storing them in a
        data store. You must specify both a <code>channel</code> and a
        <code>datastore</code> activity and, optionally, as many as 23
        additional activities in the <code>pipelineActivities</code> array.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePipelineResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pipelineName
                - pipelineActivities
              properties:
                pipelineName:
                  description: The name of the pipeline.
                  type: string
                  pattern: ^[a-zA-Z0-9_]+$
                  minLength: 1
                  maxLength: 128
                pipelineActivities:
                  description: '<p>A list of "PipelineActivity" objects. Activities perform
                    transformations on your messages, such as removing, renaming
                    or adding message attributes; filtering messages based on
                    attribute values; invoking your Lambda functions on messages
                    for advanced processing; or performing mathematical
                    transformations to normalize device data.</p> <p>The list
                    can be 2-25 <b>PipelineActivity</b> objects and must contain
                    both a <code>channel</code> and a <code>datastore</code>
                    activity. Each entry in the list must contain only one
                    activity, for example:</p> <p> <code>pipelineActivities = [
                    { "channel": { ... } }, { "lambda": { ... } }, ... ]</code>
                    </p>'
                  type: array
                  items:
                    $ref: "#/components/schemas/PipelineActivity"
                  minItems: 1
                  maxItems: 25
                tags:
                  description: Metadata which can be used to manage the pipeline.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                  minItems: 1
                  maxItems: 50
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListPipelines
      description: Retrieves a list of pipelines.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPipelinesResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p>
            <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  "/channels/{channelName}":
    delete:
      operationId: DeleteChannel
      description: Deletes the specified channel.
      responses:
        "204":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeChannel
      description: Retrieves information about a channel.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeChannelResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel whose information is retrieved.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: includeStatistics
          in: query
          required: false
          description: If true, additional statistical information about the channel is
            included in the response.
          schema:
            type: boolean
    put:
      operationId: UpdateChannel
      description: Updates the settings of a channel.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel to be updated.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channelStorage:
                  description: Where channel data is stored.
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: "#/components/schemas/ServiceManagedChannelS3Storage"
                    customerManagedS3:
                      $ref: "#/components/schemas/CustomerManagedChannelS3Storage"
                retentionPeriod:
                  description: How long, in days, message data is kept.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedRetentionPeriod"
                    numberOfDays:
                      $ref: "#/components/schemas/RetentionPeriodInDays"
        required: true
  "/datasets/{datasetName}":
    delete:
      operationId: DeleteDataset
      description: <p>Deletes the specified data set.</p> <p>You do not have to delete the
        content of the data set before you perform this operation.</p>
      responses:
        "204":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeDataset
      description: Retrieves information about a data set.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeDatasetResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose information is retrieved.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    put:
      operationId: UpdateDataset
      description: Updates the settings of a data set.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - actions
              properties:
                actions:
                  description: A list of "DatasetAction" objects.
                  type: array
                  items:
                    $ref: "#/components/schemas/DatasetAction"
                  minItems: 1
                  maxItems: 1
                triggers:
                  description: A list of "DatasetTrigger" objects. The list can be empty or
                    can contain up to five <b>DataSetTrigger</b> objects.
                  type: array
                  items:
                    $ref: "#/components/schemas/DatasetTrigger"
                  minItems: 0
                  maxItems: 5
                contentDeliveryRules:
                  description: When data set contents are created they are delivered to
                    destinations specified here.
                  type: array
                  items:
                    $ref: "#/components/schemas/DatasetContentDeliveryRule"
                  minItems: 0
                  maxItems: 20
                retentionPeriod:
                  description: How long, in days, message data is kept.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedRetentionPeriod"
                    numberOfDays:
                      $ref: "#/components/schemas/RetentionPeriodInDays"
                versioningConfiguration:
                  description: Information about the versioning of data set contents.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedVersioning"
                    maxVersions:
                      $ref: "#/components/schemas/MaxVersions"
        required: true
  "/datastores/{datastoreName}":
    delete:
      operationId: DeleteDatastore
      description: Deletes the specified data store.
      responses:
        "204":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datastoreName
          in: path
          required: true
          description: The name of the data store to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeDatastore
      description: Retrieves information about a data store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeDatastoreResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datastoreName
          in: path
          required: true
          description: The name of the data store
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: includeStatistics
          in: query
          required: false
          description: If true, additional statistical information about the datastore is
            included in the response.
          schema:
            type: boolean
    put:
      operationId: UpdateDatastore
      description: Updates the settings of a data store.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: datastoreName
          in: path
          required: true
          description: The name of the data store to be updated.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                retentionPeriod:
                  description: How long, in days, message data is kept.
                  type: object
                  properties:
                    unlimited:
                      $ref: "#/components/schemas/UnlimitedRetentionPeriod"
                    numberOfDays:
                      $ref: "#/components/schemas/RetentionPeriodInDays"
                datastoreStorage:
                  description: Where data store data is stored.
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: "#/components/schemas/ServiceManagedDatastoreS3Storage"
                    customerManagedS3:
                      $ref: "#/components/schemas/CustomerManagedDatastoreS3Storage"
        required: true
  "/pipelines/{pipelineName}":
    delete:
      operationId: DeletePipeline
      description: Deletes the specified pipeline.
      responses:
        "204":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribePipeline
      description: Retrieves information about a pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribePipelineResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline whose information is retrieved.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
    put:
      operationId: UpdatePipeline
      description: Updates the settings of a pipeline. You must specify both a
        <code>channel</code> and a <code>datastore</code> activity and,
        optionally, as many as 23 additional activities in the
        <code>pipelineActivities</code> array.
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "485":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline to update.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pipelineActivities
              properties:
                pipelineActivities:
                  description: '<p>A list of "PipelineActivity" objects. Activities perform
                    transformations on your messages, such as removing, renaming
                    or adding message attributes; filtering messages based on
                    attribute values; invoking your Lambda functions on messages
                    for advanced processing; or performing mathematical
                    transformations to normalize device data.</p> <p>The list
                    can be 2-25 <b>PipelineActivity</b> objects and must contain
                    both a <code>channel</code> and a <code>datastore</code>
                    activity. Each entry in the list must contain only one
                    activity, for example:</p> <p> <code>pipelineActivities = [
                    { "channel": { ... } }, { "lambda": { ... } }, ... ]</code>
                    </p>'
                  type: array
                  items:
                    $ref: "#/components/schemas/PipelineActivity"
                  minItems: 1
                  maxItems: 25
        required: true
  /logging:
    get:
      operationId: DescribeLoggingOptions
      description: Retrieves the current settings of the AWS IoT Analytics logging options.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeLoggingOptionsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    put:
      operationId: PutLoggingOptions
      description: <p>Sets or updates the AWS IoT Analytics logging options.</p> <p>Note
        that if you update the value of any <code>loggingOptions</code> field,
        it takes up to one minute for the change to take effect. Also, if you
        change the policy attached to the role you specified in the roleArn
        field (for example, to correct an invalid policy) it takes up to 5
        minutes for that change to take effect. </p>
      responses:
        "200":
          description: Success
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - loggingOptions
              properties:
                loggingOptions:
                  description: Information about logging options.
                  type: object
                  properties:
                    roleArn:
                      $ref: "#/components/schemas/RoleArn"
                    level:
                      $ref: "#/components/schemas/LoggingLevel"
                    enabled:
                      $ref: "#/components/schemas/LoggingEnabled"
        required: true
  "/datasets/{datasetName}/contents":
    get:
      operationId: ListDatasetContents
      description: Lists information about data set contents that have been created.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDatasetContentsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose contents information you want to list.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in this request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: scheduledOnOrAfter
          in: query
          required: false
          description: A filter to limit results to those data set contents whose creation
            is scheduled on or after the given time. See the field
            <code>triggers.schedule</code> in the CreateDataset request.
            (timestamp)
          schema:
            type: string
            format: date-time
        - name: scheduledBefore
          in: query
          required: false
          description: A filter to limit results to those data set contents whose creation
            is scheduled before the given time. See the field
            <code>triggers.schedule</code> in the CreateDataset request.
            (timestamp)
          schema:
            type: string
            format: date-time
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /tags#resourceArn:
    get:
      operationId: ListTagsForResource
      description: Lists the tags (metadata) which you have assigned to the resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource whose tags you want to list.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: Adds to or modifies the tags of the given resource. Tags are metadata
        which can be used to manage a resource.
      responses:
        "204":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource whose tags you want to modify.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The new or modified tags for the resource.
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                  minItems: 1
                  maxItems: 50
        required: true
  /pipelineactivities/run:
    post:
      operationId: RunPipelineActivity
      description: Simulates the results of running a pipeline activity on a message
        payload.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunPipelineActivityResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pipelineActivity
                - payloads
              properties:
                pipelineActivity:
                  description: An activity that performs a transformation on a message.
                  type: object
                  properties:
                    channel:
                      $ref: "#/components/schemas/ChannelActivity"
                    lambda:
                      $ref: "#/components/schemas/LambdaActivity"
                    datastore:
                      $ref: "#/components/schemas/DatastoreActivity"
                    addAttributes:
                      $ref: "#/components/schemas/AddAttributesActivity"
                    removeAttributes:
                      $ref: "#/components/schemas/RemoveAttributesActivity"
                    selectAttributes:
                      $ref: "#/components/schemas/SelectAttributesActivity"
                    filter:
                      $ref: "#/components/schemas/FilterActivity"
                    math:
                      $ref: "#/components/schemas/MathActivity"
                    deviceRegistryEnrich:
                      $ref: "#/components/schemas/DeviceRegistryEnrichActivity"
                    deviceShadowEnrich:
                      $ref: "#/components/schemas/DeviceShadowEnrichActivity"
                payloads:
                  description: The sample message payloads on which the pipeline activity
                    is run.
                  type: array
                  items:
                    $ref: "#/components/schemas/MessagePayload"
                  minItems: 1
                  maxItems: 10
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/channels/{channelName}/sample":
    get:
      operationId: SampleChannelData
      description: Retrieves a sample of messages from the specified channel ingested
        during the specified timeframe. Up to 10 messages can be retrieved.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SampleChannelDataResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel whose message samples are retrieved.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
        - name: maxMessages
          in: query
          required: false
          description: The number of sample messages to be retrieved. The limit is 10, the
            default is also 10.
          schema:
            type: integer
            minimum: 1
            maximum: 10
        - name: startTime
          in: query
          required: false
          description: The start of the time window from which sample messages are
            retrieved.
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          required: false
          description: The end of the time window from which sample messages are retrieved.
          schema:
            type: string
            format: date-time
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/pipelines/{pipelineName}/reprocessing":
    post:
      operationId: StartPipelineReprocessing
      description: Starts the reprocessing of raw message data through the pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartPipelineReprocessingResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline on which to start reprocessing.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_]+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startTime:
                  description: The start time (inclusive) of raw message data that is
                    reprocessed.
                  type: string
                  format: date-time
                endTime:
                  description: The end time (exclusive) of raw message data that is
                    reprocessed.
                  type: string
                  format: date-time
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /tags#resourceArn&tagKeys:
    delete:
      operationId: UntagResource
      description: Removes the given tags (metadata) from the resource.
      responses:
        "204":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource whose tags you want to remove.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
        - name: tagKeys
          in: query
          required: true
          description: The keys of those tags which you want to remove.
          schema:
            type: array
            items:
              type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://iotanalytics.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Analytics multi-region endpoint
  - url: https://iotanalytics.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Analytics multi-region endpoint
  - url: http://iotanalytics.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Analytics endpoint for China (Beijing) and China (Ningxia)
  - url: https://iotanalytics.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Analytics endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchPutMessageResponse:
      type: object
      properties:
        batchPutMessageErrorEntries:
          $ref: "#/components/schemas/BatchPutMessageErrorEntries"
    Message:
      type: object
      required:
        - messageId
        - payload
      properties:
        messageId:
          $ref: "#/components/schemas/MessageId"
        payload:
          $ref: "#/components/schemas/MessagePayload"
      description: Information about a message.
    ResourceNotFoundException: {}
    InvalidRequestException: {}
    InternalFailureException: {}
    ServiceUnavailableException: {}
    ThrottlingException: {}
    CancelPipelineReprocessingResponse:
      type: object
      properties: {}
    CreateChannelResponse:
      type: object
      properties:
        channelName:
          $ref: "#/components/schemas/ChannelName"
        channelArn:
          $ref: "#/components/schemas/ChannelArn"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
    ServiceManagedChannelS3Storage:
      type: object
      properties: {}
      description: Use this to store channel data in an S3 bucket managed by the AWS IoT
        Analytics service.
    CustomerManagedChannelS3Storage:
      type: object
      required:
        - bucket
        - roleArn
      properties:
        bucket:
          $ref: "#/components/schemas/BucketName"
        keyPrefix:
          $ref: "#/components/schemas/S3KeyPrefix"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Use this to store channel data in an S3 bucket that you manage.
    UnlimitedRetentionPeriod:
      type: boolean
    RetentionPeriodInDays:
      type: integer
      minimum: 1
    Tag:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: "#/components/schemas/TagKey"
        value:
          $ref: "#/components/schemas/TagValue"
      description: A set of key/value pairs which are used to manage the resource.
    ResourceAlreadyExistsException: {}
    LimitExceededException: {}
    CreateDatasetResponse:
      type: object
      properties:
        datasetName:
          $ref: "#/components/schemas/DatasetName"
        datasetArn:
          $ref: "#/components/schemas/DatasetArn"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
    DatasetAction:
      type: object
      properties:
        actionName:
          $ref: "#/components/schemas/DatasetActionName"
        queryAction:
          $ref: "#/components/schemas/SqlQueryDatasetAction"
        containerAction:
          $ref: "#/components/schemas/ContainerDatasetAction"
      description: A "DatasetAction" object that specifies how data set contents are
        automatically created.
    DatasetTrigger:
      type: object
      properties:
        schedule:
          $ref: "#/components/schemas/Schedule"
        dataset:
          $ref: "#/components/schemas/TriggeringDataset"
      description: The "DatasetTrigger" that specifies when the data set is automatically
        updated.
    DatasetContentDeliveryRule:
      type: object
      required:
        - destination
      properties:
        entryName:
          $ref: "#/components/schemas/EntryName"
        destination:
          $ref: "#/components/schemas/DatasetContentDeliveryDestination"
      description: When data set contents are created they are delivered to destination
        specified here.
    UnlimitedVersioning:
      type: boolean
    MaxVersions:
      type: integer
      minimum: 1
      maximum: 1000
    CreateDatasetContentResponse:
      type: object
      properties:
        versionId:
          $ref: "#/components/schemas/DatasetContentVersion"
    CreateDatastoreResponse:
      type: object
      properties:
        datastoreName:
          $ref: "#/components/schemas/DatastoreName"
        datastoreArn:
          $ref: "#/components/schemas/DatastoreArn"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
    ServiceManagedDatastoreS3Storage:
      type: object
      properties: {}
      description: Use this to store data store data in an S3 bucket managed by the AWS IoT
        Analytics service.
    CustomerManagedDatastoreS3Storage:
      type: object
      required:
        - bucket
        - roleArn
      properties:
        bucket:
          $ref: "#/components/schemas/BucketName"
        keyPrefix:
          $ref: "#/components/schemas/S3KeyPrefix"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Use this to store data store data in an S3 bucket that you manage.
    CreatePipelineResponse:
      type: object
      properties:
        pipelineName:
          $ref: "#/components/schemas/PipelineName"
        pipelineArn:
          $ref: "#/components/schemas/PipelineArn"
    PipelineActivity:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/ChannelActivity"
        lambda:
          $ref: "#/components/schemas/LambdaActivity"
        datastore:
          $ref: "#/components/schemas/DatastoreActivity"
        addAttributes:
          $ref: "#/components/schemas/AddAttributesActivity"
        removeAttributes:
          $ref: "#/components/schemas/RemoveAttributesActivity"
        selectAttributes:
          $ref: "#/components/schemas/SelectAttributesActivity"
        filter:
          $ref: "#/components/schemas/FilterActivity"
        math:
          $ref: "#/components/schemas/MathActivity"
        deviceRegistryEnrich:
          $ref: "#/components/schemas/DeviceRegistryEnrichActivity"
        deviceShadowEnrich:
          $ref: "#/components/schemas/DeviceShadowEnrichActivity"
      description: An activity that performs a transformation on a message.
    DescribeChannelResponse:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/Channel"
        statistics:
          $ref: "#/components/schemas/ChannelStatistics"
    DescribeDatasetResponse:
      type: object
      properties:
        dataset:
          $ref: "#/components/schemas/Dataset"
    DescribeDatastoreResponse:
      type: object
      properties:
        datastore:
          $ref: "#/components/schemas/Datastore"
        statistics:
          $ref: "#/components/schemas/DatastoreStatistics"
    DescribeLoggingOptionsResponse:
      type: object
      properties:
        loggingOptions:
          $ref: "#/components/schemas/LoggingOptions"
    DescribePipelineResponse:
      type: object
      properties:
        pipeline:
          $ref: "#/components/schemas/Pipeline"
    GetDatasetContentResponse:
      type: object
      properties:
        entries:
          $ref: "#/components/schemas/DatasetEntries"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        status:
          $ref: "#/components/schemas/DatasetContentStatus"
    ListChannelsResponse:
      type: object
      properties:
        channelSummaries:
          $ref: "#/components/schemas/ChannelSummaries"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListDatasetContentsResponse:
      type: object
      properties:
        datasetContentSummaries:
          $ref: "#/components/schemas/DatasetContentSummaries"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListDatasetsResponse:
      type: object
      properties:
        datasetSummaries:
          $ref: "#/components/schemas/DatasetSummaries"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListDatastoresResponse:
      type: object
      properties:
        datastoreSummaries:
          $ref: "#/components/schemas/DatastoreSummaries"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListPipelinesResponse:
      type: object
      properties:
        pipelineSummaries:
          $ref: "#/components/schemas/PipelineSummaries"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: "#/components/schemas/TagList"
    RoleArn:
      type: string
      minLength: 20
      maxLength: 2048
    LoggingLevel:
      type: string
      enum:
        - ERROR
    LoggingEnabled:
      type: boolean
    RunPipelineActivityResponse:
      type: object
      properties:
        payloads:
          $ref: "#/components/schemas/MessagePayloads"
        logResult:
          $ref: "#/components/schemas/LogResult"
    ChannelActivity:
      type: object
      required:
        - name
        - channelName
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        channelName:
          $ref: "#/components/schemas/ChannelName"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: The activity that determines the source of the messages to be processed.
    LambdaActivity:
      type: object
      required:
        - name
        - lambdaName
        - batchSize
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        lambdaName:
          $ref: "#/components/schemas/LambdaName"
        batchSize:
          $ref: "#/components/schemas/ActivityBatchSize"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that runs a Lambda function to modify the message.
    DatastoreActivity:
      type: object
      required:
        - name
        - datastoreName
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        datastoreName:
          $ref: "#/components/schemas/DatastoreName"
      description: The 'datastore' activity that specifies where to store the processed
        data.
    AddAttributesActivity:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        attributes:
          $ref: "#/components/schemas/AttributeNameMapping"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that adds other attributes based on existing attributes in
        the message.
    RemoveAttributesActivity:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        attributes:
          $ref: "#/components/schemas/AttributeNames"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that removes attributes from a message.
    SelectAttributesActivity:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        attributes:
          $ref: "#/components/schemas/AttributeNames"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: Creates a new message using only the specified attributes from the
        original message.
    FilterActivity:
      type: object
      required:
        - name
        - filter
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        filter:
          $ref: "#/components/schemas/FilterExpression"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that filters a message based on its attributes.
    MathActivity:
      type: object
      required:
        - name
        - attribute
        - math
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        attribute:
          $ref: "#/components/schemas/AttributeName"
        math:
          $ref: "#/components/schemas/MathExpression"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that computes an arithmetic expression using the message's
        attributes.
    DeviceRegistryEnrichActivity:
      type: object
      required:
        - name
        - attribute
        - thingName
        - roleArn
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        attribute:
          $ref: "#/components/schemas/AttributeName"
        thingName:
          $ref: "#/components/schemas/AttributeName"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that adds data from the AWS IoT device registry to your
        message.
    DeviceShadowEnrichActivity:
      type: object
      required:
        - name
        - attribute
        - thingName
        - roleArn
      properties:
        name:
          $ref: "#/components/schemas/ActivityName"
        attribute:
          $ref: "#/components/schemas/AttributeName"
        thingName:
          $ref: "#/components/schemas/AttributeName"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        next:
          $ref: "#/components/schemas/ActivityName"
      description: An activity that adds information from the AWS IoT Device Shadows
        service to a message.
    MessagePayload:
      type: string
    SampleChannelDataResponse:
      type: object
      properties:
        payloads:
          $ref: "#/components/schemas/MessagePayloads"
    StartPipelineReprocessingResponse:
      type: object
      properties:
        reprocessingId:
          $ref: "#/components/schemas/ReprocessingId"
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      minLength: 1
      maxLength: 256
    ActivityBatchSize:
      type: integer
      minimum: 1
      maximum: 1000
    ActivityName:
      type: string
      minLength: 1
      maxLength: 128
    AttributeNameMapping:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: "#/components/schemas/AttributeName"
    AttributeName:
      type: string
      minLength: 1
      maxLength: 256
    AttributeNames:
      type: array
      items:
        $ref: "#/components/schemas/AttributeName"
      minItems: 1
      maxItems: 50
    BatchPutMessageErrorEntry:
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/MessageId"
        errorCode:
          $ref: "#/components/schemas/ErrorCode"
        errorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Contains informations about errors.
    BatchPutMessageErrorEntries:
      type: array
      items:
        $ref: "#/components/schemas/BatchPutMessageErrorEntry"
    MessageId:
      type: string
      minLength: 1
      maxLength: 128
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    ChannelName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    Messages:
      type: array
      items:
        $ref: "#/components/schemas/Message"
    BatchPutMessageRequest:
      type: object
      required:
        - channelName
        - messages
      properties:
        channelName:
          $ref: "#/components/schemas/ChannelName"
        messages:
          $ref: "#/components/schemas/Messages"
    BucketKeyExpression:
      type: string
      pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*$
      minLength: 1
      maxLength: 255
    BucketName:
      type: string
      pattern: ^[a-zA-Z0-9.\-_]*$
      minLength: 3
      maxLength: 255
    PipelineName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    ReprocessingId:
      type: string
    CancelPipelineReprocessingRequest:
      type: object
      properties: {}
    ChannelStorage:
      type: object
      properties:
        serviceManagedS3:
          $ref: "#/components/schemas/ServiceManagedChannelS3Storage"
        customerManagedS3:
          $ref: "#/components/schemas/CustomerManagedChannelS3Storage"
      description: Where channel data is stored.
    ChannelArn:
      type: string
    ChannelStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
    RetentionPeriod:
      type: object
      properties:
        unlimited:
          $ref: "#/components/schemas/UnlimitedRetentionPeriod"
        numberOfDays:
          $ref: "#/components/schemas/RetentionPeriodInDays"
      description: How long, in days, message data is kept.
    Timestamp:
      type: string
      format: date-time
    Channel:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ChannelName"
        storage:
          $ref: "#/components/schemas/ChannelStorage"
        arn:
          $ref: "#/components/schemas/ChannelArn"
        status:
          $ref: "#/components/schemas/ChannelStatus"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: A collection of data from an MQTT topic. Channels archive the raw,
        unprocessed messages before publishing the data to a pipeline.
    EstimatedResourceSize:
      type: object
      properties:
        estimatedSizeInBytes:
          $ref: "#/components/schemas/SizeInBytes"
        estimatedOn:
          $ref: "#/components/schemas/Timestamp"
      description: The estimated size of the resource.
    ChannelStatistics:
      type: object
      properties:
        size:
          $ref: "#/components/schemas/EstimatedResourceSize"
      description: Statistics information about the channel.
    ServiceManagedChannelS3StorageSummary:
      type: object
      properties: {}
      description: Used to store channel data in an S3 bucket managed by the AWS IoT
        Analytics service.
    CustomerManagedChannelS3StorageSummary:
      type: object
      properties:
        bucket:
          $ref: "#/components/schemas/BucketName"
        keyPrefix:
          $ref: "#/components/schemas/S3KeyPrefix"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Used to store channel data in an S3 bucket that you manage.
    ChannelStorageSummary:
      type: object
      properties:
        serviceManagedS3:
          $ref: "#/components/schemas/ServiceManagedChannelS3StorageSummary"
        customerManagedS3:
          $ref: "#/components/schemas/CustomerManagedChannelS3StorageSummary"
      description: Where channel data is stored.
    ChannelSummary:
      type: object
      properties:
        channelName:
          $ref: "#/components/schemas/ChannelName"
        channelStorage:
          $ref: "#/components/schemas/ChannelStorageSummary"
        status:
          $ref: "#/components/schemas/ChannelStatus"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: A summary of information about a channel.
    ChannelSummaries:
      type: array
      items:
        $ref: "#/components/schemas/ChannelSummary"
    ComputeType:
      type: string
      enum:
        - ACU_1
        - ACU_2
    Image:
      type: string
      maxLength: 255
    ResourceConfiguration:
      type: object
      required:
        - computeType
        - volumeSizeInGB
      properties:
        computeType:
          $ref: "#/components/schemas/ComputeType"
        volumeSizeInGB:
          $ref: "#/components/schemas/VolumeSizeInGB"
      description: The configuration of the resource used to execute the "containerAction".
    Variables:
      type: array
      items:
        $ref: "#/components/schemas/Variable"
      minItems: 0
      maxItems: 50
    ContainerDatasetAction:
      type: object
      required:
        - image
        - executionRoleArn
        - resourceConfiguration
      properties:
        image:
          $ref: "#/components/schemas/Image"
        executionRoleArn:
          $ref: "#/components/schemas/RoleArn"
        resourceConfiguration:
          $ref: "#/components/schemas/ResourceConfiguration"
        variables:
          $ref: "#/components/schemas/Variables"
      description: Information needed to run the "containerAction" to produce data set
        contents.
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 1
      maxItems: 50
    CreateChannelRequest:
      type: object
      required:
        - channelName
      properties:
        channelName:
          $ref: "#/components/schemas/ChannelName"
        channelStorage:
          $ref: "#/components/schemas/ChannelStorage"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        tags:
          $ref: "#/components/schemas/TagList"
    DatasetName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    CreateDatasetContentRequest:
      type: object
      properties: {}
    DatasetContentVersion:
      type: string
      minLength: 7
      maxLength: 36
    DatasetActions:
      type: array
      items:
        $ref: "#/components/schemas/DatasetAction"
      minItems: 1
      maxItems: 1
    DatasetTriggers:
      type: array
      items:
        $ref: "#/components/schemas/DatasetTrigger"
      minItems: 0
      maxItems: 5
    DatasetContentDeliveryRules:
      type: array
      items:
        $ref: "#/components/schemas/DatasetContentDeliveryRule"
      minItems: 0
      maxItems: 20
    VersioningConfiguration:
      type: object
      properties:
        unlimited:
          $ref: "#/components/schemas/UnlimitedVersioning"
        maxVersions:
          $ref: "#/components/schemas/MaxVersions"
      description: Information about the versioning of data set contents.
    CreateDatasetRequest:
      type: object
      required:
        - datasetName
        - actions
      properties:
        datasetName:
          $ref: "#/components/schemas/DatasetName"
        actions:
          $ref: "#/components/schemas/DatasetActions"
        triggers:
          $ref: "#/components/schemas/DatasetTriggers"
        contentDeliveryRules:
          $ref: "#/components/schemas/DatasetContentDeliveryRules"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        versioningConfiguration:
          $ref: "#/components/schemas/VersioningConfiguration"
        tags:
          $ref: "#/components/schemas/TagList"
    DatasetArn:
      type: string
    DatastoreName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    DatastoreStorage:
      type: object
      properties:
        serviceManagedS3:
          $ref: "#/components/schemas/ServiceManagedDatastoreS3Storage"
        customerManagedS3:
          $ref: "#/components/schemas/CustomerManagedDatastoreS3Storage"
      description: Where data store data is stored.
    CreateDatastoreRequest:
      type: object
      required:
        - datastoreName
      properties:
        datastoreName:
          $ref: "#/components/schemas/DatastoreName"
        datastoreStorage:
          $ref: "#/components/schemas/DatastoreStorage"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        tags:
          $ref: "#/components/schemas/TagList"
    DatastoreArn:
      type: string
    PipelineActivities:
      type: array
      items:
        $ref: "#/components/schemas/PipelineActivity"
      minItems: 1
      maxItems: 25
    CreatePipelineRequest:
      type: object
      required:
        - pipelineName
        - pipelineActivities
      properties:
        pipelineName:
          $ref: "#/components/schemas/PipelineName"
        pipelineActivities:
          $ref: "#/components/schemas/PipelineActivities"
        tags:
          $ref: "#/components/schemas/TagList"
    PipelineArn:
      type: string
    S3KeyPrefix:
      type: string
      pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*/$
      minLength: 1
      maxLength: 255
    CustomerManagedDatastoreS3StorageSummary:
      type: object
      properties:
        bucket:
          $ref: "#/components/schemas/BucketName"
        keyPrefix:
          $ref: "#/components/schemas/S3KeyPrefix"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Used to store data store data in an S3 bucket that you manage.
    DatasetStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
    Dataset:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/DatasetName"
        arn:
          $ref: "#/components/schemas/DatasetArn"
        actions:
          $ref: "#/components/schemas/DatasetActions"
        triggers:
          $ref: "#/components/schemas/DatasetTriggers"
        contentDeliveryRules:
          $ref: "#/components/schemas/DatasetContentDeliveryRules"
        status:
          $ref: "#/components/schemas/DatasetStatus"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        versioningConfiguration:
          $ref: "#/components/schemas/VersioningConfiguration"
      description: Information about a data set.
    DatasetActionName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    SqlQueryDatasetAction:
      type: object
      required:
        - sqlQuery
      properties:
        sqlQuery:
          $ref: "#/components/schemas/SqlQuery"
        filters:
          $ref: "#/components/schemas/QueryFilters"
      description: The SQL query to modify the message.
    DatasetActionSummary:
      type: object
      properties:
        actionName:
          $ref: "#/components/schemas/DatasetActionName"
        actionType:
          $ref: "#/components/schemas/DatasetActionType"
      description: Information about the action which automatically creates the data set's
        contents.
    DatasetActionSummaries:
      type: array
      items:
        $ref: "#/components/schemas/DatasetActionSummary"
      minItems: 1
      maxItems: 1
    DatasetActionType:
      type: string
      enum:
        - QUERY
        - CONTAINER
    IotEventsDestinationConfiguration:
      type: object
      required:
        - inputName
        - roleArn
      properties:
        inputName:
          $ref: "#/components/schemas/IotEventsInputName"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Configuration information for delivery of data set contents to AWS IoT
        Events.
    S3DestinationConfiguration:
      type: object
      required:
        - bucket
        - key
        - roleArn
      properties:
        bucket:
          $ref: "#/components/schemas/BucketName"
        key:
          $ref: "#/components/schemas/BucketKeyExpression"
        glueConfiguration:
          $ref: "#/components/schemas/GlueConfiguration"
        roleArn:
          $ref: "#/components/schemas/RoleArn"
      description: Configuration information for delivery of data set contents to Amazon S3.
    DatasetContentDeliveryDestination:
      type: object
      properties:
        iotEventsDestinationConfiguration:
          $ref: "#/components/schemas/IotEventsDestinationConfiguration"
        s3DestinationConfiguration:
          $ref: "#/components/schemas/S3DestinationConfiguration"
      description: The destination to which data set contents are delivered.
    EntryName:
      type: string
    DatasetContentState:
      type: string
      enum:
        - CREATING
        - SUCCEEDED
        - FAILED
    Reason:
      type: string
    DatasetContentStatus:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/DatasetContentState"
        reason:
          $ref: "#/components/schemas/Reason"
      description: The state of the data set contents and the reason they are in this state.
    DatasetContentSummary:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/DatasetContentVersion"
        status:
          $ref: "#/components/schemas/DatasetContentStatus"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        scheduleTime:
          $ref: "#/components/schemas/Timestamp"
      description: Summary information about data set contents.
    DatasetContentSummaries:
      type: array
      items:
        $ref: "#/components/schemas/DatasetContentSummary"
    DatasetContentVersionValue:
      type: object
      required:
        - datasetName
      properties:
        datasetName:
          $ref: "#/components/schemas/DatasetName"
      description: The data set whose latest contents are used as input to the notebook or
        application.
    DatasetEntry:
      type: object
      properties:
        entryName:
          $ref: "#/components/schemas/EntryName"
        dataURI:
          $ref: "#/components/schemas/PresignedURI"
      description: The reference to a data set entry.
    DatasetEntries:
      type: array
      items:
        $ref: "#/components/schemas/DatasetEntry"
    PresignedURI:
      type: string
    DatasetSummary:
      type: object
      properties:
        datasetName:
          $ref: "#/components/schemas/DatasetName"
        status:
          $ref: "#/components/schemas/DatasetStatus"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
        triggers:
          $ref: "#/components/schemas/DatasetTriggers"
        actions:
          $ref: "#/components/schemas/DatasetActionSummaries"
      description: A summary of information about a data set.
    DatasetSummaries:
      type: array
      items:
        $ref: "#/components/schemas/DatasetSummary"
    Schedule:
      type: object
      properties:
        expression:
          $ref: "#/components/schemas/ScheduleExpression"
      description: The schedule for when to trigger an update.
    TriggeringDataset:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/DatasetName"
      description: Information about the data set whose content generation triggers the new
        data set content generation.
    DatastoreStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
    Datastore:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/DatastoreName"
        storage:
          $ref: "#/components/schemas/DatastoreStorage"
        arn:
          $ref: "#/components/schemas/DatastoreArn"
        status:
          $ref: "#/components/schemas/DatastoreStatus"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about a data store.
    DatastoreStatistics:
      type: object
      properties:
        size:
          $ref: "#/components/schemas/EstimatedResourceSize"
      description: Statistical information about the data store.
    ServiceManagedDatastoreS3StorageSummary:
      type: object
      properties: {}
      description: Used to store data store data in an S3 bucket managed by the AWS IoT
        Analytics service.
    DatastoreStorageSummary:
      type: object
      properties:
        serviceManagedS3:
          $ref: "#/components/schemas/ServiceManagedDatastoreS3StorageSummary"
        customerManagedS3:
          $ref: "#/components/schemas/CustomerManagedDatastoreS3StorageSummary"
      description: Where data store data is stored.
    DatastoreSummary:
      type: object
      properties:
        datastoreName:
          $ref: "#/components/schemas/DatastoreName"
        datastoreStorage:
          $ref: "#/components/schemas/DatastoreStorageSummary"
        status:
          $ref: "#/components/schemas/DatastoreStatus"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: A summary of information about a data store.
    DatastoreSummaries:
      type: array
      items:
        $ref: "#/components/schemas/DatastoreSummary"
    DeleteChannelRequest:
      type: object
      properties: {}
    DeleteDatasetContentRequest:
      type: object
      properties: {}
    DeleteDatasetRequest:
      type: object
      properties: {}
    DeleteDatastoreRequest:
      type: object
      properties: {}
    DeletePipelineRequest:
      type: object
      properties: {}
    OffsetSeconds:
      type: integer
    TimeExpression:
      type: string
    DeltaTime:
      type: object
      required:
        - offsetSeconds
        - timeExpression
      properties:
        offsetSeconds:
          $ref: "#/components/schemas/OffsetSeconds"
        timeExpression:
          $ref: "#/components/schemas/TimeExpression"
      description: Used to limit data to that which has arrived since the last execution of
        the action.
    IncludeStatisticsFlag:
      type: boolean
    DescribeChannelRequest:
      type: object
      properties: {}
    DescribeDatasetRequest:
      type: object
      properties: {}
    DescribeDatastoreRequest:
      type: object
      properties: {}
    DescribeLoggingOptionsRequest:
      type: object
      properties: {}
    LoggingOptions:
      type: object
      required:
        - roleArn
        - level
        - enabled
      properties:
        roleArn:
          $ref: "#/components/schemas/RoleArn"
        level:
          $ref: "#/components/schemas/LoggingLevel"
        enabled:
          $ref: "#/components/schemas/LoggingEnabled"
      description: Information about logging options.
    DescribePipelineRequest:
      type: object
      properties: {}
    Pipeline:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/PipelineName"
        arn:
          $ref: "#/components/schemas/PipelineArn"
        activities:
          $ref: "#/components/schemas/PipelineActivities"
        reprocessingSummaries:
          $ref: "#/components/schemas/ReprocessingSummaries"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: Contains information about a pipeline.
    DoubleValue:
      type: number
      format: double
    EndTime:
      type: string
      format: date-time
    SizeInBytes:
      type: number
      format: double
    FilterExpression:
      type: string
      minLength: 1
      maxLength: 256
    GetDatasetContentRequest:
      type: object
      properties: {}
    GlueTableName:
      type: string
      minLength: 1
      maxLength: 150
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    GlueDatabaseName:
      type: string
      minLength: 1
      maxLength: 150
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    GlueConfiguration:
      type: object
      required:
        - tableName
        - databaseName
      properties:
        tableName:
          $ref: "#/components/schemas/GlueTableName"
        databaseName:
          $ref: "#/components/schemas/GlueDatabaseName"
      description: Configuration information for coordination with the AWS Glue ETL
        (extract, transform and load) service.
    IotEventsInputName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 128
    LambdaName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 64
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 250
    ListChannelsRequest:
      type: object
      properties: {}
    ListDatasetContentsRequest:
      type: object
      properties: {}
    ListDatasetsRequest:
      type: object
      properties: {}
    ListDatastoresRequest:
      type: object
      properties: {}
    ListPipelinesRequest:
      type: object
      properties: {}
    PipelineSummaries:
      type: array
      items:
        $ref: "#/components/schemas/PipelineSummary"
    ResourceArn:
      type: string
      minLength: 20
      maxLength: 2048
    ListTagsForResourceRequest:
      type: object
      properties: {}
    LogResult:
      type: string
    MathExpression:
      type: string
      minLength: 1
      maxLength: 256
    MaxMessages:
      type: integer
      minimum: 1
      maximum: 10
    MessagePayloads:
      type: array
      items:
        $ref: "#/components/schemas/MessagePayload"
      minItems: 1
      maxItems: 10
    OutputFileName:
      type: string
      pattern: "[\\w\\.-]{1,255}"
    OutputFileUriValue:
      type: object
      required:
        - fileName
      properties:
        fileName:
          $ref: "#/components/schemas/OutputFileName"
      description: The value of the variable as a structure that specifies an output file
        URI.
    ReprocessingSummaries:
      type: array
      items:
        $ref: "#/components/schemas/ReprocessingSummary"
    PipelineSummary:
      type: object
      properties:
        pipelineName:
          $ref: "#/components/schemas/PipelineName"
        reprocessingSummaries:
          $ref: "#/components/schemas/ReprocessingSummaries"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: A summary of information about a pipeline.
    PutLoggingOptionsRequest:
      type: object
      required:
        - loggingOptions
      properties:
        loggingOptions:
          $ref: "#/components/schemas/LoggingOptions"
    QueryFilter:
      type: object
      properties:
        deltaTime:
          $ref: "#/components/schemas/DeltaTime"
      description: Information which is used to filter message data, to segregate it
        according to the time frame in which it arrives.
    QueryFilters:
      type: array
      items:
        $ref: "#/components/schemas/QueryFilter"
      minItems: 0
      maxItems: 1
    ReprocessingStatus:
      type: string
      enum:
        - RUNNING
        - SUCCEEDED
        - CANCELLED
        - FAILED
    ReprocessingSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ReprocessingId"
        status:
          $ref: "#/components/schemas/ReprocessingStatus"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about pipeline reprocessing.
    VolumeSizeInGB:
      type: integer
      minimum: 1
      maximum: 50
    RunPipelineActivityRequest:
      type: object
      required:
        - pipelineActivity
        - payloads
      properties:
        pipelineActivity:
          $ref: "#/components/schemas/PipelineActivity"
        payloads:
          $ref: "#/components/schemas/MessagePayloads"
    StartTime:
      type: string
      format: date-time
    SampleChannelDataRequest:
      type: object
      properties: {}
    ScheduleExpression:
      type: string
    SqlQuery:
      type: string
    StartPipelineReprocessingRequest:
      type: object
      properties:
        startTime:
          $ref: "#/components/schemas/StartTime"
        endTime:
          $ref: "#/components/schemas/EndTime"
    StringValue:
      type: string
      minLength: 0
      maxLength: 1024
    TagValue:
      type: string
      minLength: 1
      maxLength: 256
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      properties:
        tags:
          $ref: "#/components/schemas/TagList"
    UntagResourceRequest:
      type: object
      properties: {}
    UpdateChannelRequest:
      type: object
      properties:
        channelStorage:
          $ref: "#/components/schemas/ChannelStorage"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
    UpdateDatasetRequest:
      type: object
      required:
        - actions
      properties:
        actions:
          $ref: "#/components/schemas/DatasetActions"
        triggers:
          $ref: "#/components/schemas/DatasetTriggers"
        contentDeliveryRules:
          $ref: "#/components/schemas/DatasetContentDeliveryRules"
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        versioningConfiguration:
          $ref: "#/components/schemas/VersioningConfiguration"
    UpdateDatastoreRequest:
      type: object
      properties:
        retentionPeriod:
          $ref: "#/components/schemas/RetentionPeriod"
        datastoreStorage:
          $ref: "#/components/schemas/DatastoreStorage"
    UpdatePipelineRequest:
      type: object
      required:
        - pipelineActivities
      properties:
        pipelineActivities:
          $ref: "#/components/schemas/PipelineActivities"
    VariableName:
      type: string
      minLength: 1
      maxLength: 256
    Variable:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/VariableName"
        stringValue:
          $ref: "#/components/schemas/StringValue"
        doubleValue:
          $ref: "#/components/schemas/DoubleValue"
        datasetContentVersionValue:
          $ref: "#/components/schemas/DatasetContentVersionValue"
        outputFileUriValue:
          $ref: "#/components/schemas/OutputFileUriValue"
      description: An instance of a variable to be passed to the "containerAction"
        execution. Each variable must have a name and a value given by one of
        "stringValue", "datasetContentVersionValue", or "outputFileUriValue".
