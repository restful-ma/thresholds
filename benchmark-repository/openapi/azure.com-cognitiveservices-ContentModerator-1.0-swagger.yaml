openapi: 3.0.0
info:
  description: "You use the API to scan your content as it is generated. Content Moderator
    then processes your content and sends the results along with relevant
    information either back to your systems or to the built-in review tool. You
    can use this information to take decisions e.g. take it down, send to human
    judge, etc.\r

    \r

    When using the API, images need to have a minimum of 128 pixels and a
    maximum file size of 4MB. \r

    Text can be at most 1024 characters long. \r

    If the content passed to the text API or the image API exceeds the size
    limits, the API will return an error code that informs about the issue."
  title: Content Moderator Client
  version: "1.0"
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cognitiveservices/data-plane/ContentModerator/stable/v1.0/ContentModerator.json
      version: "2.0"
  x-providerName: azure.com
  x-serviceName: cognitiveservices-ContentModerator
  x-tags:
    - Azure
    - Microsoft
security:
  - apim_key: []
paths:
  /contentmoderator/lists/v1.0/imagelists:
    get:
      description: Gets all the Image Lists.
      operationId: ListManagementImageLists_GetAllImageLists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageLists"
              examples:
                Get All Imagelists request:
                  $ref: "#/components/examples/Get_All_Imagelists_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImageLists
    post:
      description: Creates an image list.
      operationId: ListManagementImageLists_Create
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Create Imagelist request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImageLists_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
              examples:
                Create Imagelist request:
                  $ref: "#/components/examples/Create_Imagelist_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImageLists
  "/contentmoderator/lists/v1.0/imagelists/{listId}":
    delete:
      description: Deletes image list with the list Id equal to list Id passed.
      operationId: ListManagementImageLists_Delete
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImageLists
    get:
      description: Returns the details of the image list with list Id equal to list Id
        passed.
      operationId: ListManagementImageLists_GetDetails
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
              examples:
                Get List Id Details request:
                  $ref: "#/components/examples/Get_List_Id_Details_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImageLists
    put:
      description: Updates an image list with list Id equal to list Id passed.
      operationId: ListManagementImageLists_Update
      parameters:
        - $ref: "#/components/parameters/listId"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Update Imagelist request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImageLists_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageList"
              examples:
                Update Imagelist request:
                  $ref: "#/components/examples/Update_Imagelist_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImageLists
  "/contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex":
    post:
      description: Refreshes the index of the list with list Id equal to list Id passed.
      operationId: ListManagementImageLists_RefreshIndex
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshIndex"
              examples:
                Refresh Image Index request:
                  $ref: "#/components/examples/Refresh_Image_Index_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImageLists
  "/contentmoderator/lists/v1.0/imagelists/{listId}/images":
    delete:
      description: Deletes all images from the list with list Id equal to list Id passed.
      operationId: ListManagementImage_DeleteAllImages
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImage
    get:
      description: Gets all image Ids from the list with list Id equal to list Id passed.
      operationId: ListManagementImage_GetAllImageIds
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageIds"
              examples:
                Get All Image Ids request:
                  $ref: "#/components/examples/Get_All_Image_Ids_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImage
    post:
      description: Add an image to the list with list Id equal to list Id passed.
      operationId: ListManagementImage_AddImage
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/tag"
        - $ref: "#/components/parameters/label"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
              examples:
                Add Image request:
                  $ref: "#/components/examples/Add_Image_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImage
  "/contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}":
    delete:
      description: Deletes an image from the list with list Id and image Id passed.
      operationId: ListManagementImage_DeleteImage
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImage
  /contentmoderator/lists/v1.0/termlists:
    get:
      description: gets all the Term Lists
      operationId: ListManagementTermLists_GetAllTermLists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermLists"
              examples:
                Get All Termlists request:
                  $ref: "#/components/examples/Get_All_Termlists_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTermLists
    post:
      description: Creates a Term List
      operationId: ListManagementTermLists_Create
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Create Termlist request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImageLists_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermList"
              examples:
                Create Termlist request:
                  $ref: "#/components/examples/Create_Termlist_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTermLists
  "/contentmoderator/lists/v1.0/termlists/{listId}":
    delete:
      description: Deletes term list with the list Id equal to list Id passed.
      operationId: ListManagementTermLists_Delete
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTermLists
    get:
      description: Returns list Id details of the term list with list Id equal to list Id
        passed.
      operationId: ListManagementTermLists_GetDetails
      parameters:
        - $ref: "#/components/parameters/listId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermList"
              examples:
                Get Term ListId Details request:
                  $ref: "#/components/examples/Get_Term_ListId_Details_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTermLists
    put:
      description: Updates an Term List.
      operationId: ListManagementTermLists_Update
      parameters:
        - $ref: "#/components/parameters/listId"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Update Termlist request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImageLists_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermList"
              examples:
                Update Termlist request:
                  $ref: "#/components/examples/Update_Termlist_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTermLists
  "/contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex":
    post:
      description: Refreshes the index of the list with list Id equal to list ID passed.
      operationId: ListManagementTermLists_RefreshIndex
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/language"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshIndex"
              examples:
                Refresh Term Index request:
                  $ref: "#/components/examples/Refresh_Term_Index_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTermLists
  "/contentmoderator/lists/v1.0/termlists/{listId}/terms":
    delete:
      description: Deletes all terms from the list with list Id equal to the list Id passed.
      operationId: ListManagementTerm_DeleteAllTerms
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/language"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTerm
    get:
      description: Gets all terms from the list with list Id equal to the list Id passed.
      operationId: ListManagementTerm_GetAllTerms
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/language"
        - description: The pagination start index.
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: The max limit.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Terms"
              examples:
                Get All Terms request:
                  $ref: "#/components/examples/Get_All_Terms_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTerm
  "/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}":
    delete:
      description: Deletes a term from the list with list Id equal to the list Id passed.
      operationId: ListManagementTerm_DeleteTerm
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/term"
        - $ref: "#/components/parameters/language"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: string
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTerm
    post:
      description: Add a term to the term list with list Id equal to list Id passed.
      operationId: ListManagementTerm_AddTerm
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/term"
        - $ref: "#/components/parameters/language"
      responses:
        "201":
          description: Created
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementTerm
  /contentmoderator/moderate/v1.0/ProcessImage/Evaluate:
    post:
      description: Returns probabilities of the image containing racy or adult content.
      operationId: ImageModeration_Evaluate
      parameters:
        - $ref: "#/components/parameters/CacheImage"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Evaluate"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/FindFaces:
    post:
      description: Returns the list of faces found.
      operationId: ImageModeration_FindFaces
      parameters:
        - $ref: "#/components/parameters/CacheImage"
      responses:
        "200":
          description: The list of faces found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoundFaces"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/Match:
    post:
      description: "Fuzzily match an image against one of your custom Image Lists. You can
        create and manage your custom image lists using <a
        href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b127037\
        41568569abe\">this</a> API. \r

        \r

        Returns ID and tags of matching image.<br/>\r

        <br/>\r

        Note: Refresh Index must be run on the corresponding Image List
        before additions and removals are reflected in the response."
      operationId: ImageModeration_Match
      parameters:
        - $ref: "#/components/parameters/listIdQueryParameter"
        - $ref: "#/components/parameters/CacheImage"
      responses:
        "200":
          description: "Supported values for tags are:\r

            <ul>\r

            <li>101: Nudity</li>\r

            <li>102: Sexual Content</li>\r

            <li>201: Alcohol</li>\r

            <li>202: Tobacco</li>\r

            <li>203: Drugs</li>\r

            <li>301: Child Exploitation</li>\r

            <li>401: Violence</li>\r

            <li>402: Weapons</li>\r

            <li>403: Gore</li>\r

            <li>501: Profanity</li>\r

            <li>502: Vulgarity</li>\r

            </ul>."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/OCR:
    post:
      description: Returns any text found in the image for the language specified. If no
        language is specified in input then the detection defaults to English.
      operationId: ImageModeration_OCR
      parameters:
        - $ref: "#/components/parameters/language"
        - $ref: "#/components/parameters/CacheImage"
        - $ref: "#/components/parameters/enhanced"
      responses:
        "200":
          description: The text found and list of candidate text details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OCR"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessText/DetectLanguage:
    post:
      description: This operation will detect the language of given input content. Returns
        the <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3
        code</a> for the predominant language comprising the submitted text.
        Over 110 languages supported.
      operationId: TextModeration_DetectLanguage
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          x-ms-client-name: textContentType
          schema:
            type: string
            enum:
              - text/plain
              - text/html
              - text/xml
              - text/markdown
          examples:
            Detect Language request:
              value: text/plain
      requestBody:
        $ref: "#/components/requestBodies/TextModeration_DetectLanguageTextContent"
      responses:
        "200":
          description: The detected language result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetectedLanguage"
              examples:
                Detect Language request:
                  $ref: "#/components/examples/Detect_Language_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - TextModeration
  /contentmoderator/moderate/v1.0/ProcessText/Screen/:
    post:
      description: Detects profanity in more than 100 languages and match against custom
        and shared blacklists.
      operationId: TextModeration_ScreenText
      parameters:
        - $ref: "#/components/parameters/textLanguage"
        - $ref: "#/components/parameters/autocorrect"
        - $ref: "#/components/parameters/PII"
        - $ref: "#/components/parameters/listIdQueryParameter"
        - $ref: "#/components/parameters/classify"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          x-ms-client-name: textContentType
          schema:
            type: string
            enum:
              - text/plain
              - text/html
              - text/xml
              - text/markdown
          examples:
            Detect Language request:
              value: text/plain
      requestBody:
        $ref: "#/components/requestBodies/TextModeration_DetectLanguageTextContent"
      responses:
        "200":
          description: Status 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Screen"
              examples:
                Detect Language request:
                  $ref: "#/components/examples/Detect_Language_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      summary: Detect profanity and match against custom and shared blacklists
      tags:
        - TextModeration
  "/contentmoderator/review/v1.0/teams/{teamName}/jobs":
    post:
      description: "A job Id will be returned for the content posted on this endpoint. \r

        \r

        Once the content is evaluated against the Workflow provided the
        review will be created or ignored based on the workflow expression.\r

        \r

        <h3>CallBack Schemas </h3>\r

        \r

        <p>\r

        <h4>Job Completion CallBack Sample</h4><br/>\r

        \r

        {<br/>\r

        \  \"JobId\": \"<Job Id>,<br/>\r

        \  \"ReviewId\": \"<Review Id, if the Job resulted in a Review
        to be created>\",<br/>\r

        \  \"WorkFlowId\": \"default\",<br/>\r

        \  \"Status\": \"<This will be one of Complete, InProgress,
        Error>\",<br/>\r

        \  \"ContentType\": \"Image\",<br/>\r

        \  \"ContentId\": \"<This is the ContentId that was specified on
        input>\",<br/>\r

        \  \"CallBackType\": \"Job\",<br/>\r

        \  \"Metadata\": {<br/>\r

        \    \"adultscore\": \"0.xxx\",<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"racyscore\": \"0.xxx\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  }<br/>\r

        }<br/>\r

        \r

        </p>\r

        <p>\r

        <h4>Review Completion CallBack Sample</h4><br/>\r

        \r

        {\r

        \  \"ReviewId\": \"<Review Id>\",<br/>\r

        \  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r

        \  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r

        \  \"CallBackType\": \"Review\",<br/>\r

        \  \"ContentId\": \"<The ContentId that was specified
        input>\",<br/>\r

        \  \"Metadata\": {<br/>\r

        \    \"adultscore\": \"0.xxx\",\r

        \    \"a\": \"False\",<br/>\r

        \    \"racyscore\": \"0.xxx\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  },<br/>\r

        \  \"ReviewerResultTags\": {<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  }<br/>\r

        }<br/>\r

        \r

        </p>."
      operationId: Reviews_CreateJob
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/ContentType"
        - $ref: "#/components/parameters/ContentId"
        - $ref: "#/components/parameters/WorkflowName"
        - $ref: "#/components/parameters/CallBackEndpoint"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          x-ms-client-name: jobContentType
          schema:
            type: string
            enum:
              - application/json
              - image/jpeg
          examples:
            Create Job request:
              value: application/json
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ContentValue:
                  description: Content to evaluate for a job.
                  type: string
              required:
                - ContentValue
              type: object
          image/jpeg:
            schema:
              properties:
                ContentValue:
                  description: Content to evaluate for a job.
                  type: string
              required:
                - ContentValue
              type: object
        description: Content to evaluate.
        required: true
        x-examples:
          application/json: |-
            {
              "ContentValue": "<Replace with you Image Url>"
            }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobId"
              examples:
                Create Job request:
                  $ref: "#/components/examples/Create_Job_request"
            text/json:
              schema:
                $ref: "#/components/schemas/JobId"
              examples:
                Create Job request:
                  $ref: "#/components/examples/Create_Job_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
            text/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}":
    get:
      description: Get the Job Details for a Job Id.
      operationId: Reviews_GetJobDetails
      parameters:
        - description: Your Team Name.
          in: path
          name: teamName
          required: true
          schema:
            type: string
          examples:
            Get Job Details request:
              value: ModeratorTeam
        - description: Id of the job.
          in: path
          name: JobId
          required: true
          schema:
            type: string
          examples:
            Get Job Details request:
              value: 201709i96f295aa5748101436064c42ddf
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
              examples:
                Get Job Details request:
                  $ref: "#/components/examples/Get_Job_Details_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews":
    post:
      description: "The reviews created would show up for Reviewers on your team. As
        Reviewers complete reviewing, results of the Review would be POSTED
        (i.e. HTTP POST) on the specified CallBackEndpoint.\r

        \r

        <h3>CallBack Schemas </h3>\r

        <h4>Review Completion CallBack Sample</h4>\r

        <p>\r

        {<br/>\r

        \  \"ReviewId\": \"<Review Id>\",<br/>\r

        \  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r

        \  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r

        \  \"CallBackType\": \"Review\",<br/>\r

        \  \"ContentId\": \"<The ContentId that was specified
        input>\",<br/>\r

        \  \"Metadata\": {<br/>\r

        \    \"adultscore\": \"0.xxx\",<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"racyscore\": \"0.xxx\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  },<br/>\r

        \  \"ReviewerResultTags\": {<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  }<br/>\r

        }<br/>\r

        \r

        </p>."
      operationId: Reviews_CreateReviews
      parameters:
        - description: The content type.
          in: header
          name: UrlContentType
          required: true
          schema:
            type: string
          examples:
            Create Review request:
              value: application/json
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/subTeam"
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  CallbackEndpoint:
                    description: Optional CallbackEndpoint.
                    type: string
                  Content:
                    description: Content to review.
                    type: string
                  ContentId:
                    description: Content Identifier.
                    type: string
                  Metadata:
                    description: Optional metadata details.
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  Type:
                    description: Type of the content.
                    enum:
                      - Image
                      - Text
                    type: string
                required:
                  - Content
                  - ContentId
                  - Type
                type: object
              type: array
        description: Body for create reviews API
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewList"
              examples:
                Create Review request:
                  $ref: "#/components/examples/Create_Review_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}":
    get:
      description: Returns review details for the review Id passed.
      operationId: Reviews_GetReview
      parameters:
        - description: Your Team Name.
          in: path
          name: teamName
          required: true
          schema:
            type: string
          examples:
            Get Review request:
              value: ModeratorTeam
        - description: Id of the review.
          in: path
          name: reviewId
          required: true
          schema:
            type: string
          examples:
            Get Review request:
              value: 201709i96f295aa5748101436064c42ddf
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
              examples:
                Get Review request:
                  $ref: "#/components/examples/Get_Review_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames":
    get:
      description: "The reviews created would show up for Reviewers on your team. As
        Reviewers complete reviewing, results of the Review would be POSTED
        (i.e. HTTP POST) on the specified CallBackEndpoint.\r

        \r

        <h3>CallBack Schemas </h3>\r

        <h4>Review Completion CallBack Sample</h4>\r

        <p>\r

        {<br/>\r

        \  \"ReviewId\": \"<Review Id>\",<br/>\r

        \  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r

        \  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r

        \  \"CallBackType\": \"Review\",<br/>\r

        \  \"ContentId\": \"<The ContentId that was specified
        input>\",<br/>\r

        \  \"Metadata\": {<br/>\r

        \    \"adultscore\": \"0.xxx\",<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"racyscore\": \"0.xxx\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  },<br/>\r

        \  \"ReviewerResultTags\": {<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  }<br/>\r

        }<br/>\r

        \r

        </p>."
      operationId: Reviews_GetVideoFrames
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/reviewId"
        - description: Time stamp of the frame from where you want to start fetching the
            frames.
          in: query
          name: startSeed
          schema:
            type: integer
        - description: Number of frames to fetch.
          in: query
          name: noOfRecords
          schema:
            type: integer
        - description: Get frames filtered by tags.
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Frames"
              examples:
                Get Frames Request:
                  $ref: "#/components/examples/Get_Frames_Request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
    post:
      description: "The reviews created would show up for Reviewers on your team. As
        Reviewers complete reviewing, results of the Review would be POSTED
        (i.e. HTTP POST) on the specified CallBackEndpoint.\r

        \r

        <h3>CallBack Schemas </h3>\r

        <h4>Review Completion CallBack Sample</h4>\r

        <p>\r

        {<br/>\r

        \  \"ReviewId\": \"<Review Id>\",<br/>\r

        \  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r

        \  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r

        \  \"CallBackType\": \"Review\",<br/>\r

        \  \"ContentId\": \"<The ContentId that was specified
        input>\",<br/>\r

        \  \"Metadata\": {<br/>\r

        \    \"adultscore\": \"0.xxx\",<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"racyscore\": \"0.xxx\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  },<br/>\r

        \  \"ReviewerResultTags\": {<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  }<br/>\r

        }<br/>\r

        \r

        </p>."
      operationId: Reviews_AddVideoFrame
      parameters:
        - $ref: "#/components/parameters/teamName"
        - description: Id of the review.
          in: path
          name: reviewId
          required: true
          schema:
            type: string
        - description: Timescale of the video you are adding frames to.
          in: query
          name: timescale
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish":
    post:
      description: Publish video review to make it available for review.
      operationId: Reviews_PublishVideoReview
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/reviewId"
      responses:
        "204":
          description: No Content
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript":
    put:
      description: This API adds a transcript file (text version of all the words spoken in
        a video) to a video review. The file should be a valid WebVTT format.
      operationId: Reviews_AddVideoTranscript
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/reviewId"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          x-ms-client-name: ContentType
          schema:
            type: string
            enum:
              - text/plain
          examples:
            Add transcript request:
              value: text/plain
      requestBody:
        content:
          text/plain:
            schema:
              format: file
              type: object
        description: Transcript file of the video.
        required: true
        x-ms-parameter-location: method
      responses:
        "204":
          description: No Content
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult":
    put:
      description: This API adds a transcript screen text result file for a video review.
        Transcript screen text result file is a result of Screen Text API . In
        order to generate transcript screen text result file , a transcript file
        has to be screened for profanity using Screen Text API.
      operationId: Reviews_AddVideoTranscriptModerationResult
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          x-ms-client-name: ContentType
          schema:
            type: string
          examples:
            Transcript moderation result request:
              value: application/json
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/reviewId"
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  Terms:
                    description: Optional metadata details.
                    items:
                      properties:
                        Index:
                          description: Index of the word
                          type: integer
                        Term:
                          description: Detected word.
                          type: string
                      required:
                        - Index
                        - Term
                      type: object
                    type: array
                  Timestamp:
                    description: Timestamp of the image.
                    type: string
                required:
                  - Timestamp
                  - Terms
                type: object
              type: array
        description: Body for add video transcript moderation result API
        required: true
        x-ms-parameter-location: method
      responses:
        "204":
          description: No Content
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
x-ms-paths:
  "/contentmoderator/lists/v1.0/imagelists/{listId}/images?overload=stream":
    post:
      description: Add an image to the list with list Id equal to list Id passed.
      operationId: ListManagementImage_AddImageFileInput
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/tag"
        - $ref: "#/components/parameters/label"
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageFileInputImag\
          estream"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImage
  "/contentmoderator/lists/v1.0/imagelists/{listId}/images?overload=url":
    post:
      description: Add an image to the list with list Id equal to list Id passed.
      operationId: ListManagementImage_AddImageUrlInput
      parameters:
        - $ref: "#/components/parameters/listId"
        - $ref: "#/components/parameters/tag"
        - $ref: "#/components/parameters/label"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Add Image request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageUrlInputImage\
          url"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
              examples:
                Add Image request:
                  $ref: "#/components/examples/Add_Image_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ListManagementImage
  /contentmoderator/moderate/v1.0/ProcessImage/Evaluate?overload=stream:
    post:
      description: Returns probabilities of the image containing racy or adult content.
      operationId: ImageModeration_EvaluateFileInput
      parameters:
        - $ref: "#/components/parameters/CacheImage"
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageFileInputImag\
          estream"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Evaluate"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/Evaluate?overload=url:
    post:
      description: Returns probabilities of the image containing racy or adult content.
      operationId: ImageModeration_EvaluateUrlInput
      parameters:
        - $ref: "#/components/parameters/CacheImage"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Evaluate Image request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageUrlInputImage\
          url"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Evaluate"
              examples:
                Evaluate Image request:
                  $ref: "#/components/examples/Evaluate_Image_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/FindFaces?overload=stream:
    post:
      description: Returns the list of faces found.
      operationId: ImageModeration_FindFacesFileInput
      parameters:
        - $ref: "#/components/parameters/CacheImage"
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageFileInputImag\
          estream"
      responses:
        "200":
          description: The list of faces found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoundFaces"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/FindFaces?overload=url:
    post:
      description: Returns the list of faces found.
      operationId: ImageModeration_FindFacesUrlInput
      parameters:
        - $ref: "#/components/parameters/CacheImage"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Find Faces request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageUrlInputImage\
          url"
      responses:
        "200":
          description: The list of faces found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoundFaces"
              examples:
                Find Faces request:
                  $ref: "#/components/examples/Find_Faces_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/Match?overload=stream:
    post:
      description: "Fuzzily match an image against one of your custom Image Lists. You can
        create and manage your custom image lists using <a
        href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b127037\
        41568569abe\">this</a> API. \r

        \r

        Returns ID and tags of matching image.<br/>\r

        <br/>\r

        Note: Refresh Index must be run on the corresponding Image List
        before additions and removals are reflected in the response."
      operationId: ImageModeration_MatchFileInput
      parameters:
        - $ref: "#/components/parameters/listIdQueryParameter"
        - $ref: "#/components/parameters/CacheImage"
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageFileInputImag\
          estream"
      responses:
        "200":
          description: "Supported values for tags are:\r

            <ul>\r

            <li>101: Nudity</li>\r

            <li>102: Sexual Content</li>\r

            <li>201: Alcohol</li>\r

            <li>202: Tobacco</li>\r

            <li>203: Drugs</li>\r

            <li>301: Child Exploitation</li>\r

            <li>401: Violence</li>\r

            <li>402: Weapons</li>\r

            <li>403: Gore</li>\r

            <li>501: Profanity</li>\r

            <li>502: Vulgarity</li>\r

            </ul>."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/Match?overload=url:
    post:
      description: "Fuzzily match an image against one of your custom Image Lists. You can
        create and manage your custom image lists using <a
        href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b127037\
        41568569abe\">this</a> API. \r

        \r

        Returns ID and tags of matching image.<br/>\r

        <br/>\r

        Note: Refresh Index must be run on the corresponding Image List
        before additions and removals are reflected in the response."
      operationId: ImageModeration_MatchUrlInput
      parameters:
        - $ref: "#/components/parameters/listIdQueryParameter"
        - $ref: "#/components/parameters/CacheImage"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Match Image request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageUrlInputImage\
          url"
      responses:
        "200":
          description: "Supported values for tags are:\r

            <ul>\r

            <li>101: Nudity</li>\r

            <li>102: Sexual Content</li>\r

            <li>201: Alcohol</li>\r

            <li>202: Tobacco</li>\r

            <li>203: Drugs</li>\r

            <li>301: Child Exploitation</li>\r

            <li>401: Violence</li>\r

            <li>402: Weapons</li>\r

            <li>403: Gore</li>\r

            <li>501: Profanity</li>\r

            <li>502: Vulgarity</li>\r

            </ul>."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchResponse"
              examples:
                Match Image request:
                  $ref: "#/components/examples/Match_Image_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/OCR?overload=stream:
    post:
      description: Returns any text found in the image for the language specified. If no
        language is specified in input then the detection defaults to English.
      operationId: ImageModeration_OCRFileInput
      parameters:
        - $ref: "#/components/parameters/language"
        - $ref: "#/components/parameters/CacheImage"
        - $ref: "#/components/parameters/enhanced"
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageFileInputImag\
          estream"
      responses:
        "200":
          description: The found text and list of candidate text.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OCR"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  /contentmoderator/moderate/v1.0/ProcessImage/OCR?overload=url:
    post:
      description: Returns any text found in the image for the language specified. If no
        language is specified in input then the detection defaults to English.
      operationId: ImageModeration_OCRUrlInput
      parameters:
        - $ref: "#/components/parameters/language"
        - $ref: "#/components/parameters/CacheImage"
        - $ref: "#/components/parameters/enhanced"
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Image OCR request:
              value: application/json
      requestBody:
        $ref: "#/components/requestBodies/ListManagementImage_AddImageUrlInputImage\
          url"
      responses:
        "200":
          description: The found text and list of candidate text.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OCR"
              examples:
                Image OCR request:
                  $ref: "#/components/examples/Image_OCR_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - ImageModeration
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames?overload=stream":
    post:
      description: "Use this method to add frames for a video review.Timescale: This
        parameter is a factor which is used to convert the timestamp on a frame
        into milliseconds. Timescale is provided in the output of the Content
        Moderator video media processor on the Azure Media Services
        platform.Timescale in the Video Moderation output is Ticks/Second."
      operationId: Reviews_AddVideoFrameStream
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
        - description: Your team name.
          in: path
          name: teamName
          required: true
          schema:
            type: string
        - description: Id of the review.
          in: path
          name: reviewId
          required: true
          schema:
            type: string
        - description: Timescale of the video .
          in: query
          name: timescale
          required: false
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                frameImageZip:
                  description: Zip file containing frame images.
                  type: string
                  format: binary
                frameMetadata:
                  description: Metadata of the frame.
                  type: string
              required:
                - frameImageZip
                - frameMetadata
      responses:
        "204":
          description: No Content
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames?overload=url":
    post:
      description: "Use this method to add frames for a video review.Timescale: This
        parameter is a factor which is used to convert the timestamp on a frame
        into milliseconds. Timescale is provided in the output of the Content
        Moderator video media processor on the Azure Media Services
        platform.Timescale in the Video Moderation output is Ticks/Second."
      operationId: Reviews_AddVideoFrameUrl
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Add video frame url input request:
              value: application/json
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/reviewId"
        - $ref: "#/components/parameters/timescale"
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  FrameImage:
                    description: Content to review.
                    type: string
                  Metadata:
                    description: Optional metadata details.
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  ReviewerResultTags:
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  Timestamp:
                    description: Timestamp of the frame.
                    type: string
                required:
                  - Timestamp
                  - FrameImage
                type: object
              type: array
        description: Body for add video frames API
        required: true
        x-ms-parameter-location: method
      responses:
        "204":
          description: No Content
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
  "/contentmoderator/review/v1.0/teams/{teamName}/reviews?overload=video":
    post:
      description: "The reviews created would show up for Reviewers on your team. As
        Reviewers complete reviewing, results of the Review would be POSTED
        (i.e. HTTP POST) on the specified CallBackEndpoint.\r

        \r

        <h3>CallBack Schemas </h3>\r

        <h4>Review Completion CallBack Sample</h4>\r

        <p>\r

        {<br/>\r

        \  \"ReviewId\": \"<Review Id>\",<br/>\r

        \  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r

        \  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r

        \  \"CallBackType\": \"Review\",<br/>\r

        \  \"ContentId\": \"<The ContentId that was specified
        input>\",<br/>\r

        \  \"Metadata\": {<br/>\r

        \    \"adultscore\": \"0.xxx\",<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"racyscore\": \"0.xxx\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  },<br/>\r

        \  \"ReviewerResultTags\": {<br/>\r

        \    \"a\": \"False\",<br/>\r

        \    \"r\": \"True\"<br/>\r

        \  }<br/>\r

        }<br/>\r

        \r

        </p>."
      operationId: Reviews_CreateVideoReviews
      parameters:
        - description: The content type.
          in: header
          name: Content-Type
          required: true
          schema:
            type: string
          examples:
            Create video review request:
              value: application/json
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/subTeam"
      requestBody:
        content:
          application/json:
            schema:
              description: Schema of the body.
              items:
                description: Schema items of the body.
                properties:
                  CallbackEndpoint:
                    description: Optional CallbackEndpoint.
                    type: string
                  Content:
                    description: Video content url to review.
                    type: string
                  ContentId:
                    description: Content Identifier.
                    type: string
                  Metadata:
                    description: Optional metadata details.
                    items:
                      properties:
                        Key:
                          description: Your key parameter.
                          type: string
                        Value:
                          description: Your value parameter.
                          type: string
                      required:
                        - Key
                        - Value
                      type: object
                    type: array
                  Status:
                    description: Status of the video(Complete,Unpublished,Pending)
                    enum:
                      - Complete
                      - Unpublished
                      - Pending
                    type: string
                  Timescale:
                    description: Timescale of the video.
                    type: integer
                  Type:
                    description: Type of the content.
                    enum:
                      - Video
                    type: string
                  VideoFrames:
                    description: Optional metadata details.
                    items:
                      properties:
                        FrameImage:
                          description: Frame image Url.
                          type: string
                        Id:
                          description: Id of the frame.
                          type: string
                        Metadata:
                          description: Optional metadata details.
                          items:
                            properties:
                              Key:
                                description: Your key parameter.
                                type: string
                              Value:
                                description: Your value parameter.
                                type: string
                            required:
                              - Key
                              - Value
                            type: object
                          type: array
                        ReviewerResultTags:
                          items:
                            properties:
                              Key:
                                description: Your key parameter.
                                type: string
                              Value:
                                description: Your value parameter.
                                type: string
                            required:
                              - Key
                              - Value
                            type: object
                          type: array
                        Timestamp:
                          description: Timestamp of the frame.
                          type: integer
                      required:
                        - Id
                        - Timestamp
                        - FrameImage
                      type: object
                    type: array
                required:
                  - Content
                  - ContentId
                  - Type
                  - Status
                type: object
              type: array
        description: Body for create reviews API
        required: true
        x-ms-parameter-location: method
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewList"
              examples:
                Create video review request:
                  $ref: "#/components/examples/Create_video_review_request"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
      tags:
        - Reviews
servers:
  - url: https://azure.local
  - url: "{Endpoint}"
    variables:
      Endpoint:
        description: "Supported Cognitive Services endpoints (protocol and hostname, for
          example: https://westus.api.cognitive.microsoft.com)."
        x-ms-parameter-location: client
        x-ms-skip-url-encoding: true
        default: ""
components:
  examples:
    Get_All_Imagelists_request:
      value:
        - Description: List of images with racy content.
          Id: 99083
          Metadata:
            Contentsource: content source A
            Purpose: task A
          Name: RacyContentList
        - Description: List of images with abuse content.
          Id: 89117
          Metadata:
            Contentsource: content source B
            TaggedAs: abuse
          Name: AbuseContentList
    Create_Imagelist_request:
      value:
        Description: List of images with racy content
        Id: 89023
        Metadata:
          ContentSource: Content Source A
          TaggedAs: Racy
        Name: ImageList B
    Get_List_Id_Details_request:
      value:
        Description: sample string 3
        Id: 94557
        Metadata:
          Sample string 1: sample string 2
          Sample string 3: sample string 4
        Name: ImageList A
    Update_Imagelist_request:
      value:
        Description: List of images.
        Id: 89023
        Metadata:
          ContentSource: Content Source A
          TaggedAs: Racy
        Name: ImageList B
    Refresh_Image_Index_request:
      value:
        AdvancedInfo: []
        ContentSourceId: "89003"
        IsUpdateSuccess: true
        Status:
          Code: 3000
          Description: RefreshIndex successfully completed.
          Exception: ""
        TrackingId: WE_7be12265b82742749e6b6b1b0_ContentModerator.Preview_e220d7be-49d0-4553-94f6-fa5ad4ae488e
    Get_All_Image_Ids_request:
      value:
        ContentIds:
          - 89207
          - 89209
          - 94162
        ContentSource: "79017"
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        TrackingId: WE_7be12265b8014274baea9219e6cg6b1b0_ContentModerator.Preview_5614wrl328-ba52-40b2-a220-16e55uha78a
    Add_Image_request:
      value:
        AdditionalInfo:
          - Key: Source
            Value: "81117"
        ContentId: "90102"
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        TrackingId: WE_7be12265b8274274baea18e6b6b1b0_ContentModerator.Preview_e7dfcfe4-af54-2b1c-8a43-e1400c10893b9
    Get_All_Termlists_request:
      value:
        - Description: List of racy terms.
          Id: 99083
          Metadata:
            Contentsource: content source A
            Purpose: task A
          Name: RacyContentList
        - Description: List of abusive terms.
          Id: 89117
          Metadata:
            Contentsource: content source B
            TaggedAs: abuse
          Name: AbuseContentList
    Create_Termlist_request:
      value:
        Description: List of racy terms.
        Id: 89023
        Metadata:
          ContentSource: Content Source A
          TaggedAs: Racy
        Name: TermList B
    Get_Term_ListId_Details_request:
      value:
        Description: sample string 3
        Id: 89003
        Metadata:
          Sample string 1: sample string 2
          Sample string 3: sample string 4
        Name: TermList A
    Update_Termlist_request:
      value:
        Description: List of offensive terms.
        Id: 89023
        Metadata:
          ContentSource: Content Source A
          TaggedAs: Offensive
        Name: TermList B
    Refresh_Term_Index_request:
      value:
        AdvancedInfo: []
        ContentSourceId: "89003"
        IsUpdateSuccess: true
        Status:
          Code: 3000
          Description: RefreshIndex successfully completed.
          Exception: ""
        TrackingId: WE_7be12265b82742749e6b6b1b0_ContentModerator.Preview_e220d7be-49d0-4553-94f6-fa5ad4ae488e
    Get_All_Terms_request:
      value:
        Data:
          Language: eng
          Status:
            Code: 3000
            Description: OK
            Exception: ""
          Terms:
            - Term: testA
            - Term: testB
          TrackingId: 1239cc41a-b123-4983-8446-ef1df9a6768
        Paging:
          Limit: 50
          Offset: 0
          Returned: 2
          Total: 2
    Detect_Language_request:
      value:
        Classification:
          Category1:
            Score: 0.00040505084325559437
          Category2:
            Score: 0.2234508991241455
          Category3:
            Score: 0.9879999756813049
          ReviewRecommended: true
        Language: eng
        Misrepresentation: []
        NormalizedText: "Is this a crap email abcdef@ abcd. com, phone: 6657789887, IP: 255.
          255. 255. 255, 1 Microsoft Way, Redmond, WA 98052"
        OriginalText: "Is this a crap email abcdef@abcd.com, phone: 6657789887, IP:
          255.255.255.255, 1 Microsoft Way, Redmond, WA 98052"
        PII:
          Address:
            - Index: 78
              Text: 1 Microsoft Way, Redmond, WA 98052
          Email:
            - Detected: abcdef@abcd.com
              Index: 21
              SubType: Regular
              Text: abcdef@abcd.com
          IPA:
            - Index: 61
              SubType: IPV4
              Text: 255.255.255.255
          Phone:
            - CountryCode: US
              Index: 45
              Text: "6657789887"
          SSN:
            - Index: 45
              Text: "665778988"
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        Terms:
          - Index: 10
            ListId: 0
            OriginalIndex: 10
            Term: crap
        TrackingId: 9fdfef70-6ed8-4a88-99a0-5b6d0b8d7108
    Create_Job_request:
      value:
        JobId: "234"
    Get_Job_Details_request:
      value:
        CallBackEndpoint: ""
        Id: 2017213fee37b184345gu9606e5d14e3
        JobExecutionReport:
          - Msg: Job marked completed and job content has been removed
            Ts: 2017-09-21T22:00:47.4920565
          - Msg: Execution Complete
            Ts: 2017-09-21T22:00:47.420048
          - Msg: Successfully got isadult response from Moderator
            Ts: 2017-09-21T22:00:47.3900424
          - Msg: Getting isadult from Moderator
            Ts: 2017-09-21T22:00:46.3538907
          - Msg: Starting Execution - Try 1
            Ts: 2017-09-21T22:00:46.1098543
        ResultMetaData:
          - Key: adultScore
            Value: "0.007"
          - Key: isAdult
            Value: "False"
          - Key: racyScore
            Value: "0.022"
          - Key: isRacy
            Value: "False"
        ReviewId: ""
        Status: Complete
        TeamName: teamA
        Type: Image
        WorkflowId: default
    Create_Review_request:
      value:
        - 201709i9srfj128775481f9955033096ddf
    Get_Review_request:
      value:
        CallbackEndpoint: ""
        Content: https://reviewcontentstoragesea.blob.core.windows.net/ModeratorTeam/IMG_201709i96f295987701f9955036064c42ddf
        ContentId: contentIdA
        CreatedBy: ModeratorTeam
        Metadata:
          - Key: string
            Value: string
        ReviewId: 201709i96f295aa5748101436064c42ddf
        ReviewerResultTags: []
        Status: Pending
        SubTeam: public
        Type: Image
    Get_Frames_Request:
      value:
        ReviewId: 201711v18ea829372b14f9e9d382621e62429a9
        VideoFrames:
          - FrameImage: https://rtsvccontentwu.blob.core.windows.net/580040/FRM_201711v18ea829372b14f9e9d382621e62429a9_1122.jpg
            Metadata:
              - Key: apiScoreVal
                Value: "0.206"
              - Key: a
                Value: "False"
            ReviewerResultTags: []
            Timestamp: "1122"
    Evaluate_Image_request:
      value:
        AdultClassificationScore: 0.021854378283023834
        AdvancedInfo:
          - Key: ImageDownloadTimeInMs
            Value: "2328"
        CacheID: c660dfa6-eba9-4950-aa58-a6967de57ea8_636422189473647994
        IsImageAdultClassified: false
        IsImageRacyClassified: false
        RacyClassificationScore: 0.045791395008563995
        Result: false
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        TrackingId: SEA_ad975eeae1f24f81bebb40be0c3ba4fd_ContentModerator.Preview_c6ca58fc-dc30-4961-9526-e8bdfb3b3bf5
    Find_Faces_request:
      value:
        AdvancedInfo: []
        Count: 1
        Faces:
          - Bottom: 82
            Left: 80
            Right: 118
            Top: 44
        Result: true
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        TrackingId: SEA_ad975eeae1f24f81bebb40be0c3ba4fd_ContentModerator.Preview_01158625-4fea-4dd5-8f21-5e2657ea2eee
    Match_Image_request:
      value:
        CacheID: c660dfa6-eba9-4950-aa58-a6967de57ea8_636422189473647994
        IsMatch: true
        Matches:
          - Label: ImageA
            MatchId: 89203
            Score: 1
            Source: "89117"
            Tags: []
          - Label: ImageB
            MatchId: 92708
            Score: 1
            Source: "89083"
            Tags: []
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        TrackingId: WE_7be19175b8274274baea9219e6b6b1b0_ContentModerator.Preview_44b1f691-35ee-4d49-a981-0d01d07f18d6
    Image_OCR_request:
      value:
        Candidates: []
        Language: eng
        Metadata:
          - Key: ImageDownloadTimeInMs
            Value: "2239"
          - Key: ImageSizeInBytes
            Value: "273405"
        Status:
          Code: 3000
          Description: OK
          Exception: ""
        Text: "IF WE DID \r

          ALL \r

          THE THINGS \r

          WE ARE \r

          CAPABLE \r

          OF DOING, \r

          WE WOULD \r

          LITERALLY \r

          ASTOUND \r

          OURSELVE \r\n"
        TrackingId: SEA_ad975eeae1f24f81bebb40be0c3ba4fd_ContentModerator.Preview_e68fa0d1-6c83-499d-958c-9abd96263e10
    Create_video_review_request:
      value:
        - 201709i9srfj128775481f9955033096ddf
  parameters:
    CacheImage:
      description: Whether to retain the submitted image for future use; defaults to false
        if omitted.
      in: query
      name: CacheImage
      x-ms-parameter-location: method
      schema:
        type: boolean
      examples:
        Image OCR request:
          value: false
    CallBackEndpoint:
      description: Callback endpoint for posting the create job result.
      in: query
      name: CallBackEndpoint
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Create Job request:
          value: ""
    ContentId:
      description: Id/Name to identify the content submitted.
      in: query
      name: ContentId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Create Job request:
          value: ContentID A
    ContentType:
      description: Image, Text or Video.
      in: query
      name: ContentType
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
        enum:
          - Image
          - Text
          - Video
      examples:
        Create Job request:
          value: Image
    Endpoint:
      description: "Supported Cognitive Services endpoints (protocol and hostname, for
        example: https://westus.api.cognitive.microsoft.com)."
      in: path
      name: Endpoint
      required: true
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
      schema:
        type: string
    ImageId:
      description: Id of the image.
      in: path
      name: ImageId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Delete Image request:
          value: "34562"
    PII:
      description: Detect personal identifiable information.
      in: query
      name: PII
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Detect Language request:
          value: false
    WorkflowName:
      description: Workflow Name that you want to invoke.
      in: query
      name: WorkflowName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Create Job request:
          value: TestWorkflow
    autocorrect:
      description: Autocorrect text.
      in: query
      name: autocorrect
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Detect Language request:
          value: false
    classify:
      description: Classify input.
      in: query
      name: classify
      required: false
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Detect Language request:
          value: false
    enhanced:
      description: >-
        When set to True, the image goes through additional processing to come
        with additional candidates.


        image/tiff is not supported when enhanced is set to true


        Note: This impacts the response time.
      in: query
      name: enhanced
      x-ms-parameter-location: method
      schema:
        type: boolean
        default: false
      examples:
        Image OCR request:
          value: false
    label:
      description: The image label.
      in: query
      name: label
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Add Image request:
          value: test
    language:
      description: Language of the terms.
      in: query
      name: language
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Refresh Term Index request:
          value: eng
        Delete AllTerms request:
          value: eng
        Get All Terms request:
          value: eng
        Delete Term request:
          value: eng
        Add Term request:
          value: eng
        Image OCR request:
          value: eng
    listId:
      description: List Id of the image list.
      in: path
      name: listId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Delete Imagelist request:
          value: "89003"
        Get List Id Details request:
          value: "123"
        Update Imagelist request:
          value: "89003"
        Refresh Image Index request:
          value: "89003"
        Delete All Images request:
          value: "89003"
        Get All Image Ids request:
          value: "89003"
        Add Image request:
          value: "89003"
        Delete Image request:
          value: "89003"
        Delete Termlist request:
          value: "89003"
        Get Term ListId Details request:
          value: "89003"
        Update Termlist request:
          value: "89003"
        Refresh Term Index request:
          value: "89003"
        Delete AllTerms request:
          value: "89003"
        Get All Terms request:
          value: "89003"
        Delete Term request:
          value: "89003"
        Add Term request:
          value: "89003"
    listIdQueryParameter:
      description: The list Id.
      in: query
      name: listId
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Detect Language request:
          value: ""
        Match Image request:
          value: "12345"
    reviewId:
      description: Id of the review.
      in: path
      name: reviewId
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Get Frames Request:
          value: 201711v18ea829372b14f9e9d382621e62429a9
        publish video request:
          value: 201711v18ea829372b14f9e9d382621e62429a9
        Add transcript request:
          value: 201711v18ea829372b14f9e9d382621e62429a9
        Transcript moderation result request:
          value: 201711v627c579149ec4220bc674214d93f5fe5
        Add video frame url input request:
          value: 201711v18ea829372b14f9e9d382621e62429a9
    subTeam:
      description: SubTeam of your team, you want to assign the created review to.
      in: query
      name: subTeam
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Create Review request:
          value: SubteamA
        Create video review request:
          value: SubteamA
    tag:
      description: Tag for the image.
      in: query
      name: tag
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
    teamName:
      description: Your team name.
      in: path
      name: teamName
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Create Job request:
          value: sonaliProdTeam
        Create Review request:
          value: ModeratorTeam
        Get Frames Request:
          value: Content moderator
        publish video request:
          value: Content moderator
        Add transcript request:
          value: Content moderator
        Transcript moderation result request:
          value: ModeratorTeam
        Add video frame url input request:
          value: ModeratorTeam
        Create video review request:
          value: ModeratorTeam
    term:
      description: Term to be deleted
      in: path
      name: term
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Delete Term request:
          value: hell
        Add Term request:
          value: hell
    textLanguage:
      description: Language of the text.
      in: query
      name: language
      x-ms-parameter-location: method
      schema:
        type: string
      examples:
        Detect Language request:
          value: eng
    timescale:
      description: Timescale of the video.
      in: query
      name: timescale
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
  requestBodies:
    TextModeration_DetectLanguageTextContent:
      content:
        text/plain:
          schema:
            format: file
            type: object
        text/html:
          schema:
            format: file
            type: object
        text/xml:
          schema:
            format: file
            type: object
        text/markdown:
          schema:
            format: file
            type: object
      description: Content to screen.
      required: true
      x-ms-parameter-location: method
    ListManagementImage_AddImageFileInputImagestream:
      content:
        image/gif:
          schema:
            format: file
            type: object
        image/jpeg:
          schema:
            format: file
            type: object
        image/png:
          schema:
            format: file
            type: object
        image/bmp:
          schema:
            format: file
            type: object
        image/tiff:
          schema:
            format: file
            type: object
      description: The image file.
      required: true
      x-ms-parameter-location: method
    ListManagementImageLists_CreateBody:
      content:
        application/json:
          schema:
            properties:
              Description:
                description: Description of the list.
                type: string
              Metadata:
                additionalProperties:
                  type: string
                description: Metadata of the list.
                type: object
              Name:
                description: Name of the list.
                type: string
            type: object
      description: Schema of the body.
      required: true
      x-ms-parameter-location: method
    ListManagementImage_AddImageUrlInputImageurl:
      content:
        application/json:
          schema:
            properties:
              DataRepresentation:
                default: URL
                type: string
              Value:
                type: string
            type: object
      description: The image url.
      required: true
      x-ms-parameter-location: method
  securitySchemes:
    apim_key:
      in: header
      name: Ocp-Apim-Subscription-Key
      type: apiKey
  schemas:
    APIError:
      description: Error information returned by the API
      properties:
        Error:
          $ref: "#/components/schemas/Error"
      type: object
    Address:
      description: Address details.
      properties:
        Index:
          description: Index(Location) of the Address in the input text content.
          type: integer
        Text:
          description: Detected Address.
          type: string
    Candidate:
      description: OCR candidate text.
      properties:
        Confidence:
          description: The confidence level.
          type: number
        Text:
          description: The text found.
          type: string
    Classification:
      description: The classification details of the text.
      properties:
        Category1:
          description: The category1 score details of the text. <a
            href="https://aka.ms/textClassifyCategories">Click here</a> for more
            details on category classification.
          properties:
            Score:
              description: The category1 score.
              type: number
        Category2:
          description: The category2 score details of the text. <a
            href="https://aka.ms/textClassifyCategories">Click here</a> for more
            details on category classification.
          properties:
            Score:
              description: The category2 score.
              type: number
        Category3:
          description: The category3 score details of the text. <a
            href="https://aka.ms/textClassifyCategories">Click here</a> for more
            details on category classification.
          properties:
            Score:
              description: The category3 score.
              type: number
        ReviewRecommended:
          description: The review recommended flag.
          type: boolean
    DetectedLanguage:
      description: Detect language result.
      properties:
        DetectedLanguage:
          description: The detected language.
          type: string
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: The tracking id.
          type: string
    DetectedTerms:
      description: Detected Terms details.
      properties:
        Index:
          description: Index(Location) of the detected profanity term in the input text
            content.
          type: integer
        ListId:
          description: Matched Terms list Id.
          type: integer
        OriginalIndex:
          description: Original Index(Location) of the detected profanity term in the input
            text content.
          type: integer
        Term:
          description: Detected profanity term.
          type: string
    Email:
      description: Email Address details.
      properties:
        Detected:
          description: Detected Email Address from the input text content.
          type: string
        Index:
          description: Index(Location) of the Email address in the input text content.
          type: integer
        SubType:
          description: Subtype of the detected Email Address.
          type: string
        Text:
          description: Email Address in the input text content.
          type: string
    Error:
      description: Error body.
      properties:
        Code:
          type: string
        Message:
          type: string
      type: object
    Evaluate:
      description: Evaluate response object.
      properties:
        AdultClassificationScore:
          description: The adult classification score.
          type: number
        AdvancedInfo:
          description: The advanced info.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        CacheID:
          description: The cache id.
          type: string
        IsImageAdultClassified:
          description: Indicates if an image is classified as adult.
          type: boolean
        IsImageRacyClassified:
          description: Indicates if the image is classified as racy.
          type: boolean
        RacyClassificationScore:
          description: The racy classification score.
          type: number
        Result:
          description: Evaluate result.
          type: boolean
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: The tracking id.
          type: string
    Face:
      description: Coordinates to the found face.
      properties:
        Bottom:
          description: The bottom coordinate.
          type: integer
        Left:
          description: The left coordinate.
          type: integer
        Right:
          description: The right coordinate.
          type: integer
        Top:
          description: The top coordinate.
          type: integer
    FoundFaces:
      description: Request object the contains found faces.
      properties:
        AdvancedInfo:
          description: The advanced info.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        CacheId:
          description: The cache id.
          type: string
        Count:
          description: Number of faces found.
          type: integer
        Faces:
          description: The list of faces.
          items:
            $ref: "#/components/schemas/Face"
          type: array
        Result:
          description: True if result was found.
          type: boolean
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: The tracking id.
          type: string
    Frame:
      description: Video frame property details.
      properties:
        FrameImage:
          description: Frame image.
          type: string
        Metadata:
          description: Array of KeyValue.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        ReviewerResultTags:
          description: Reviewer result tags.
          items:
            $ref: "#/components/schemas/Tag"
          type: array
        Timestamp:
          description: Timestamp of the frame.
          type: string
    Frames:
      description: The response for a Get Frames request.
      properties:
        ReviewId:
          description: Id of the review.
          type: string
        VideoFrames:
          items:
            $ref: "#/components/schemas/Frame"
          type: array
    IPA:
      description: IP Address details.
      properties:
        Index:
          description: Index(Location) of the IP Address in the input text content.
          type: integer
        SubType:
          description: Subtype of the detected IP Address.
          type: string
        Text:
          description: Detected IP Address.
          type: string
    Image:
      description: Image Properties.
      properties:
        AdditionalInfo:
          description: Advanced info list.
          items:
            properties:
              Key:
                description: Key parameter.
                type: string
              Value:
                description: Value parameter.
                type: string
            type: object
          type: array
        ContentId:
          description: Content Id.
          type: string
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: Tracking Id.
          type: string
    ImageIds:
      description: Image Id properties.
      properties:
        ContentIds:
          description: Id of the contents.
          items:
            type: integer
          type: array
        ContentSource:
          description: Source of the content.
          type: string
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: Tracking Id.
          type: string
    ImageList:
      description: Image List Properties.
      properties:
        Description:
          description: Description for image list.
          type: string
        Id:
          description: Image List Id.
          type: integer
        Metadata:
          additionalProperties:
            type: string
          description: Image List Metadata.
          type: object
        Name:
          description: Image List Name.
          type: string
    ImageLists:
      items:
        $ref: "#/components/schemas/ImageList"
      type: array
    Job:
      description: The Job object.
      properties:
        CallBackEndpoint:
          description: The callback endpoint.
          type: string
        Id:
          description: The job id.
          type: string
        JobExecutionReport:
          description: Job execution report- Array of KeyValue pairs object.
          items:
            $ref: "#/components/schemas/JobExecutionReportDetails"
          type: array
        ResultMetaData:
          description: Array of KeyValue pairs.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        ReviewId:
          description: Review Id if one is created.
          type: string
        Status:
          description: The status string (<Pending, Failed, Completed>).
          type: string
        TeamName:
          description: The team name associated with the job.
          type: string
        Type:
          description: Type of the content.
          type: string
        WorkflowId:
          description: The Id of the workflow.
          type: string
    JobExecutionReportDetails:
      description: Job Execution Report Values.
      properties:
        Msg:
          description: Message details.
          type: string
        Ts:
          description: Time details.
          type: string
    JobId:
      properties:
        JobId:
          description: Id of the created job.
          type: string
    JobListResult:
      description: The list of job ids.
      properties:
        Value:
          description: The job id.
          items:
            type: string
          type: array
    KeyValuePair:
      description: The key value pair object properties.
      properties:
        Key:
          description: The key parameter.
          type: string
        Value:
          description: The value parameter.
          type: string
    Match:
      description: The match details.
      properties:
        Label:
          description: The label.
          type: string
        MatchId:
          description: The match id.
          type: integer
        Score:
          description: Confidence score of the image match.
          type: number
        Source:
          description: The source.
          type: string
        Tags:
          description: The tags for match details.
          items:
            type: integer
          type: array
    MatchResponse:
      description: The response for a Match request.
      properties:
        CacheID:
          description: The cache id.
          type: string
        IsMatch:
          description: Indicates if there is a match.
          type: boolean
        Matches:
          description: The match details.
          items:
            $ref: "#/components/schemas/Match"
          type: array
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: The tracking id.
          type: string
    OCR:
      description: Contains the text found in image for the language specified.
      properties:
        CacheId:
          description: The cache id.
          type: string
        Candidates:
          description: The list of candidate text.
          items:
            $ref: "#/components/schemas/Candidate"
          type: array
        Language:
          description: The ISO 639-3 code.
          type: string
        Metadata:
          description: Array of KeyValue.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        Status:
          $ref: "#/components/schemas/Status"
        Text:
          description: The found text.
          type: string
        TrackingId:
          description: The tracking id.
          type: string
    PII:
      description: Personal Identifier Information details.
      properties:
        Address:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        Email:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        IPA:
          items:
            $ref: "#/components/schemas/IPA"
          type: array
        Phone:
          items:
            $ref: "#/components/schemas/Phone"
          type: array
        SSN:
          items:
            $ref: "#/components/schemas/SSN"
          type: array
    Phone:
      description: Phone Property details.
      properties:
        CountryCode:
          description: CountryCode of the detected Phone number.
          type: string
        Index:
          description: Index(Location) of the Phone number in the input text content.
          type: integer
        Text:
          description: Detected Phone number.
          type: string
    RefreshIndex:
      description: Refresh Index Response.
      properties:
        AdvancedInfo:
          description: Advanced info list.
          items:
            additionalProperties:
              type: string
            type: object
          type: array
        ContentSourceId:
          description: Content source Id.
          type: string
        IsUpdateSuccess:
          description: Update success status.
          type: boolean
        Status:
          $ref: "#/components/schemas/Status"
        TrackingId:
          description: Tracking Id.
          type: string
    Review:
      description: The Review object.
      properties:
        CallbackEndpoint:
          description: The callback endpoint.
          type: string
        Content:
          description: The content value.
          type: string
        ContentId:
          description: Id of the content.
          type: string
        CreatedBy:
          description: The reviewer name.
          type: string
        Metadata:
          description: Array of KeyValue.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        ReviewId:
          description: Id of the review.
          type: string
        ReviewerResultTags:
          description: Array of KeyValue with Reviewer set Tags.
          items:
            $ref: "#/components/schemas/KeyValuePair"
          type: array
        Status:
          description: The status string (<Pending, Complete>).
          type: string
        SubTeam:
          description: Name of the subteam.
          type: string
        Type:
          description: The type of content.
          type: string
    ReviewList:
      description: The list of review ids.
      items:
        type: string
      type: array
    SSN:
      description: Detected SSN details.
      properties:
        Index:
          description: Index(Location) of the SSN in the input text content.
          type: integer
        Text:
          description: Detected SSN in the input text content.
          type: string
    Screen:
      description: The response for a Screen text request.
      properties:
        AutoCorrectedText:
          description: The autocorrected text
          type: string
        Classification:
          $ref: "#/components/schemas/Classification"
        Language:
          description: Language of the input text content.
          type: string
        Misrepresentation:
          description: The misrepresentation text.
          items:
            type: string
          type: array
        NormalizedText:
          description: The normalized text.
          type: string
        OriginalText:
          description: The original text.
          type: string
        PII:
          $ref: "#/components/schemas/PII"
        Status:
          $ref: "#/components/schemas/Status"
        Terms:
          items:
            $ref: "#/components/schemas/DetectedTerms"
          type: array
        TrackingId:
          description: Unique Content Moderator transaction Id.
          type: string
    Status:
      description: Status properties.
      properties:
        Code:
          description: Status code.
          type: integer
        Description:
          description: Status description.
          type: string
        Exception:
          description: Exception status.
          type: string
    Tag:
      description: Tag details.
      properties:
        Key:
          description: The key parameter.
          type: string
        Value:
          description: The value parameter.
          type: string
    TermList:
      description: Term List  Properties.
      properties:
        Description:
          description: Description for term list.
          type: string
        Id:
          description: Term list Id.
          type: integer
        Metadata:
          additionalProperties:
            type: string
          description: Term list metadata.
          type: object
        Name:
          description: Term list name.
          type: string
    TermLists:
      items:
        $ref: "#/components/schemas/TermList"
      type: array
    Terms:
      description: Terms properties.
      properties:
        Data:
          $ref: "#/components/schemas/TermsData"
        Paging:
          description: Paging details.
          properties:
            Limit:
              description: Limit details.
              type: integer
            Offset:
              description: Offset details.
              type: integer
            Returned:
              description: Returned text details.
              type: integer
            Total:
              description: Total details.
              type: integer
    TermsData:
      description: All term Id response properties.
      properties:
        Language:
          description: Language of the terms.
          type: string
        Status:
          $ref: "#/components/schemas/Status"
        Terms:
          description: List of terms.
          items:
            $ref: "#/components/schemas/TermsInList"
          type: array
        TrackingId:
          description: Tracking Id.
          type: string
    TermsInList:
      description: Terms in list Id passed.
      properties:
        Term:
          description: Added term details.
          type: string
