openapi: 3.0.0
info:
  version: 2017-05-18
  x-release: v4
  title: Amazon Athena
  description: <p>Amazon Athena is an interactive query service that lets you use standard
    SQL to analyze data directly in Amazon S3. You can point Athena at your data
    in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is
    serverless, so there is no infrastructure to set up or manage. You pay only
    for the queries you run. Athena scales automatically—executing queries in
    parallel—so results are fast, even with large datasets and complex queries.
    For more information, see <a
    href="http://docs.aws.amazon.com/athena/latest/ug/what-is.html">What is
    Amazon Athena</a> in the <i>Amazon Athena User Guide</i>.</p> <p>If you
    connect to Athena using the JDBC driver, use version 1.1.0 of the driver or
    later with the Amazon Athena API. Earlier version drivers do not support the
    API. For more information and to download the driver, see <a
    href="https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html">Accessing
    Amazon Athena with JDBC</a>.</p> <p>For code samples using the AWS SDK for
    Java, see <a
    href="https://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
    and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: athena
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/athena-2017-05-18.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/athena/
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /#X-Amz-Target=AmazonAthena.BatchGetNamedQuery:
    post:
      operationId: BatchGetNamedQuery
      description: Returns the details of a single named query or a list of up to 50
        queries, which you provide as an array of query ID strings. Requires you
        to have access to the workgroup in which the queries were saved. Use
        <a>ListNamedQueriesInput</a> to get the list of named query IDs in the
        specified workgroup. If information could not be retrieved for a
        submitted query ID, information about the query ID submitted is listed
        under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed
        queries. Use <a>BatchGetQueryExecutionInput</a> to get details about
        each unique query execution, and <a>ListQueryExecutionsInput</a> to get
        a list of query execution IDs.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.BatchGetNamedQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetNamedQueryInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.BatchGetQueryExecution:
    post:
      operationId: BatchGetQueryExecution
      description: Returns the details of a single query execution or a list of up to 50
        query executions, which you provide as an array of query execution ID
        strings. Requires you to have access to the workgroup in which the
        queries ran. To get a list of query execution IDs, use
        <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ from
        named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details
        about named queries.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGetQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.BatchGetQueryExecution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchGetQueryExecutionInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreateNamedQuery:
    post:
      operationId: CreateNamedQuery
      description: <p>Creates a named query in the specified workgroup. Requires that you
        have access to the workgroup.</p> <p>For code samples using the AWS SDK
        for Java, see <a
        href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
        and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreateNamedQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNamedQueryInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.CreateWorkGroup:
    post:
      operationId: CreateWorkGroup
      description: Creates a workgroup with the specified name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.CreateWorkGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkGroupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeleteNamedQuery:
    post:
      operationId: DeleteNamedQuery
      description: <p>Deletes the named query if you have access to the workgroup in which
        the query was saved.</p> <p>For code samples using the AWS SDK for Java,
        see <a
        href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
        and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeleteNamedQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteNamedQueryInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.DeleteWorkGroup:
    post:
      operationId: DeleteWorkGroup
      description: Deletes the workgroup with the specified name. The primary workgroup
        cannot be deleted.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.DeleteWorkGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteWorkGroupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetNamedQuery:
    post:
      operationId: GetNamedQuery
      description: Returns information about a single query. Requires that you have access
        to the workgroup in which the query was saved.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNamedQueryOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetNamedQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetNamedQueryInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetQueryExecution:
    post:
      operationId: GetQueryExecution
      description: Returns information about a single execution of a query if you have
        access to the workgroup in which the query ran. Each time a query
        executes, information about the query execution is saved with a unique
        ID.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetQueryExecution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetQueryExecutionInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetQueryResults:
    post:
      operationId: GetQueryResults
      description: <p>Streams the results of a single query execution specified by
        <code>QueryExecutionId</code> from the Athena query results location in
        Amazon S3. For more information, see <a
        href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query
        Results</a> in the <i>Amazon Athena User Guide</i>. This request does
        not execute the query but returns results. Use
        <a>StartQueryExecution</a> to run a query.</p> <p>To stream query
        results successfully, the IAM principal with permission to call
        <code>GetQueryResults</code> also must have permissions to the Amazon S3
        <code>GetObject</code> action for the Athena query results location.</p>
        <important> <p>IAM principals with permission to the Amazon S3
        <code>GetObject</code> action for the query results location are able to
        retrieve query results from Amazon S3 even if permission to the
        <code>GetQueryResults</code> action is denied. To restrict user or role
        access, ensure that Amazon S3 permissions to the Athena query location
        are denied.</p> </important>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryResultsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetQueryResults
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetQueryResultsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.GetWorkGroup:
    post:
      operationId: GetWorkGroup
      description: Returns information about the workgroup with the specified name.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.GetWorkGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetWorkGroupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListNamedQueries:
    post:
      operationId: ListNamedQueries
      description: <p>Provides a list of available query IDs only for queries saved in the
        specified workgroup. Requires that you have access to the workgroup.</p>
        <p>For code samples using the AWS SDK for Java, see <a
        href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
        and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNamedQueriesOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListNamedQueries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListNamedQueriesInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListQueryExecutions:
    post:
      operationId: ListQueryExecutions
      description: <p>Provides a list of available query execution IDs for the queries in
        the specified workgroup. Requires you to have access to the workgroup in
        which the queries ran.</p> <p>For code samples using the AWS SDK for
        Java, see <a
        href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
        and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryExecutionsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListQueryExecutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListQueryExecutionsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: Lists the tags associated with this workgroup.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListTagsForResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListTagsForResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.ListWorkGroups:
    post:
      operationId: ListWorkGroups
      description: Lists available workgroups for the account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkGroupsOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: MaxResults
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: NextToken
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.ListWorkGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListWorkGroupsInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StartQueryExecution:
    post:
      operationId: StartQueryExecution
      description: <p>Runs the SQL query statements contained in the <code>Query</code>.
        Requires you to have access to the workgroup in which the query ran.</p>
        <p>For code samples using the AWS SDK for Java, see <a
        href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
        and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StartQueryExecution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartQueryExecutionInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.StopQueryExecution:
    post:
      operationId: StopQueryExecution
      description: <p>Stops a query execution. Requires you to have access to the workgroup
        in which the query ran.</p> <p>For code samples using the AWS SDK for
        Java, see <a
        href="http://docs.aws.amazon.com/athena/latest/ug/code-samples.html">Examples
        and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopQueryExecutionOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.StopQueryExecution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopQueryExecutionInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.TagResource:
    post:
      operationId: TagResource
      description: 'Adds one or more tags to the resource, such as a workgroup. A tag is a
        label that you assign to an AWS Athena resource (a workgroup). Each tag
        consists of a key and an optional value, both of which you define. Tags
        enable you to categorize resources (workgroups) in Athena, for example,
        by purpose, owner, or environment. Use a consistent set of tag keys to
        make it easier to search and filter workgroups in your account. For best
        practices, see <a
        href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS
        Tagging Strategies</a>. The key length is from 1 (minimum) to 128
        (maximum) Unicode characters in UTF-8. The tag value length is from 0
        (minimum) to 256 (maximum) Unicode characters in UTF-8. You can use
        letters and numbers representable in UTF-8, and the following
        characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag
        keys must be unique per resource. If you specify more than one, separate
        them by commas.'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.TagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UntagResource:
    post:
      operationId: UntagResource
      description: Removes one or more tags from the workgroup resource. Takes as an input
        a list of TagKey Strings separated by commas, and removes their tags at
        the same time.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UntagResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UntagResourceInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AmazonAthena.UpdateWorkGroup:
    post:
      operationId: UpdateWorkGroup
      description: Updates the workgroup with the specified name. The workgroup's name
        cannot be changed.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateWorkGroupOutput"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AmazonAthena.UpdateWorkGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkGroupInput"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://athena.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Athena multi-region endpoint
  - url: https://athena.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon Athena multi-region endpoint
  - url: http://athena.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Athena endpoint for China (Beijing) and China (Ningxia)
  - url: https://athena.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon Athena endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchGetNamedQueryOutput:
      type: object
      properties:
        NamedQueries:
          $ref: "#/components/schemas/NamedQueryList"
        UnprocessedNamedQueryIds:
          $ref: "#/components/schemas/UnprocessedNamedQueryIdList"
    BatchGetNamedQueryInput:
      type: object
      required:
        - NamedQueryIds
      properties:
        NamedQueryIds:
          $ref: "#/components/schemas/NamedQueryIdList"
    InternalServerException: {}
    InvalidRequestException: {}
    BatchGetQueryExecutionOutput:
      type: object
      properties:
        QueryExecutions:
          $ref: "#/components/schemas/QueryExecutionList"
        UnprocessedQueryExecutionIds:
          $ref: "#/components/schemas/UnprocessedQueryExecutionIdList"
    BatchGetQueryExecutionInput:
      type: object
      required:
        - QueryExecutionIds
      properties:
        QueryExecutionIds:
          $ref: "#/components/schemas/QueryExecutionIdList"
    CreateNamedQueryOutput:
      type: object
      properties:
        NamedQueryId:
          $ref: "#/components/schemas/NamedQueryId"
    CreateNamedQueryInput:
      type: object
      required:
        - Name
        - Database
        - QueryString
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Database:
          $ref: "#/components/schemas/DatabaseString"
        QueryString:
          $ref: "#/components/schemas/QueryString"
        ClientRequestToken:
          $ref: "#/components/schemas/IdempotencyToken"
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
    CreateWorkGroupOutput:
      type: object
      properties: {}
    CreateWorkGroupInput:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/WorkGroupName"
        Configuration:
          $ref: "#/components/schemas/WorkGroupConfiguration"
        Description:
          $ref: "#/components/schemas/WorkGroupDescriptionString"
        Tags:
          $ref: "#/components/schemas/TagList"
    DeleteNamedQueryOutput:
      type: object
      properties: {}
    DeleteNamedQueryInput:
      type: object
      required:
        - NamedQueryId
      properties:
        NamedQueryId:
          $ref: "#/components/schemas/NamedQueryId"
    DeleteWorkGroupOutput:
      type: object
      properties: {}
    DeleteWorkGroupInput:
      type: object
      required:
        - WorkGroup
      properties:
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
        RecursiveDeleteOption:
          $ref: "#/components/schemas/BoxedBoolean"
    GetNamedQueryOutput:
      type: object
      properties:
        NamedQuery:
          $ref: "#/components/schemas/NamedQuery"
    GetNamedQueryInput:
      type: object
      required:
        - NamedQueryId
      properties:
        NamedQueryId:
          $ref: "#/components/schemas/NamedQueryId"
    GetQueryExecutionOutput:
      type: object
      properties:
        QueryExecution:
          $ref: "#/components/schemas/QueryExecution"
    GetQueryExecutionInput:
      type: object
      required:
        - QueryExecutionId
      properties:
        QueryExecutionId:
          $ref: "#/components/schemas/QueryExecutionId"
    GetQueryResultsOutput:
      type: object
      properties:
        UpdateCount:
          $ref: "#/components/schemas/Long"
        ResultSet:
          $ref: "#/components/schemas/ResultSet"
        NextToken:
          $ref: "#/components/schemas/Token"
    GetQueryResultsInput:
      type: object
      required:
        - QueryExecutionId
      properties:
        QueryExecutionId:
          $ref: "#/components/schemas/QueryExecutionId"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/MaxQueryResults"
    GetWorkGroupOutput:
      type: object
      properties:
        WorkGroup:
          $ref: "#/components/schemas/WorkGroup"
    GetWorkGroupInput:
      type: object
      required:
        - WorkGroup
      properties:
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
    ListNamedQueriesOutput:
      type: object
      properties:
        NamedQueryIds:
          $ref: "#/components/schemas/NamedQueryIdList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListNamedQueriesInput:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/MaxNamedQueriesCount"
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
    ListQueryExecutionsOutput:
      type: object
      properties:
        QueryExecutionIds:
          $ref: "#/components/schemas/QueryExecutionIdList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListQueryExecutionsInput:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/MaxQueryExecutionsCount"
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
    ListTagsForResourceOutput:
      type: object
      properties:
        Tags:
          $ref: "#/components/schemas/TagList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListTagsForResourceInput:
      type: object
      required:
        - ResourceARN
      properties:
        ResourceARN:
          $ref: "#/components/schemas/AmazonResourceName"
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/MaxTagsCount"
    ResourceNotFoundException: {}
    ListWorkGroupsOutput:
      type: object
      properties:
        WorkGroups:
          $ref: "#/components/schemas/WorkGroupsList"
        NextToken:
          $ref: "#/components/schemas/Token"
    ListWorkGroupsInput:
      type: object
      properties:
        NextToken:
          $ref: "#/components/schemas/Token"
        MaxResults:
          $ref: "#/components/schemas/MaxWorkGroupsCount"
    StartQueryExecutionOutput:
      type: object
      properties:
        QueryExecutionId:
          $ref: "#/components/schemas/QueryExecutionId"
    StartQueryExecutionInput:
      type: object
      required:
        - QueryString
      properties:
        QueryString:
          $ref: "#/components/schemas/QueryString"
        ClientRequestToken:
          $ref: "#/components/schemas/IdempotencyToken"
        QueryExecutionContext:
          $ref: "#/components/schemas/QueryExecutionContext"
        ResultConfiguration:
          $ref: "#/components/schemas/ResultConfiguration"
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
    TooManyRequestsException: {}
    StopQueryExecutionOutput:
      type: object
      properties: {}
    StopQueryExecutionInput:
      type: object
      required:
        - QueryExecutionId
      properties:
        QueryExecutionId:
          $ref: "#/components/schemas/QueryExecutionId"
    TagResourceOutput:
      type: object
      properties: {}
    TagResourceInput:
      type: object
      required:
        - ResourceARN
        - Tags
      properties:
        ResourceARN:
          $ref: "#/components/schemas/AmazonResourceName"
        Tags:
          $ref: "#/components/schemas/TagList"
    UntagResourceOutput:
      type: object
      properties: {}
    UntagResourceInput:
      type: object
      required:
        - ResourceARN
        - TagKeys
      properties:
        ResourceARN:
          $ref: "#/components/schemas/AmazonResourceName"
        TagKeys:
          $ref: "#/components/schemas/TagKeyList"
    UpdateWorkGroupOutput:
      type: object
      properties: {}
    UpdateWorkGroupInput:
      type: object
      required:
        - WorkGroup
      properties:
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
        Description:
          $ref: "#/components/schemas/WorkGroupDescriptionString"
        ConfigurationUpdates:
          $ref: "#/components/schemas/WorkGroupConfigurationUpdates"
        State:
          $ref: "#/components/schemas/WorkGroupState"
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    NamedQueryIdList:
      type: array
      items:
        $ref: "#/components/schemas/NamedQueryId"
      minItems: 1
      maxItems: 50
    NamedQueryList:
      type: array
      items:
        $ref: "#/components/schemas/NamedQuery"
    UnprocessedNamedQueryIdList:
      type: array
      items:
        $ref: "#/components/schemas/UnprocessedNamedQueryId"
    QueryExecutionIdList:
      type: array
      items:
        $ref: "#/components/schemas/QueryExecutionId"
      minItems: 1
      maxItems: 50
    QueryExecutionList:
      type: array
      items:
        $ref: "#/components/schemas/QueryExecution"
    UnprocessedQueryExecutionIdList:
      type: array
      items:
        $ref: "#/components/schemas/UnprocessedQueryExecutionId"
    Boolean:
      type: boolean
    BoxedBoolean:
      type: boolean
    BytesScannedCutoffValue:
      type: integer
      minimum: 10000000
    String:
      type: string
    Integer:
      type: integer
    ColumnNullable:
      type: string
      enum:
        - NOT_NULL
        - NULLABLE
        - UNKNOWN
    ColumnInfo:
      type: object
      required:
        - Name
        - Type
      properties:
        CatalogName:
          $ref: "#/components/schemas/String"
        SchemaName:
          $ref: "#/components/schemas/String"
        TableName:
          $ref: "#/components/schemas/String"
        Name:
          $ref: "#/components/schemas/String"
        Label:
          $ref: "#/components/schemas/String"
        Type:
          $ref: "#/components/schemas/String"
        Precision:
          $ref: "#/components/schemas/Integer"
        Scale:
          $ref: "#/components/schemas/Integer"
        Nullable:
          $ref: "#/components/schemas/ColumnNullable"
        CaseSensitive:
          $ref: "#/components/schemas/Boolean"
      description: Information about the columns in a query execution result.
    ColumnInfoList:
      type: array
      items:
        $ref: "#/components/schemas/ColumnInfo"
    NameString:
      type: string
      minLength: 1
      maxLength: 128
    DescriptionString:
      type: string
      minLength: 1
      maxLength: 1024
    DatabaseString:
      type: string
      minLength: 1
      maxLength: 255
    QueryString:
      type: string
      minLength: 1
      maxLength: 262144
    IdempotencyToken:
      type: string
      minLength: 32
      maxLength: 128
    WorkGroupName:
      type: string
      pattern: "[a-zA-z0-9._-]{1,128}"
    NamedQueryId:
      type: string
    WorkGroupConfiguration:
      type: object
      properties:
        ResultConfiguration:
          $ref: "#/components/schemas/ResultConfiguration"
        EnforceWorkGroupConfiguration:
          $ref: "#/components/schemas/BoxedBoolean"
        PublishCloudWatchMetricsEnabled:
          $ref: "#/components/schemas/BoxedBoolean"
        BytesScannedCutoffPerQuery:
          $ref: "#/components/schemas/BytesScannedCutoffValue"
        RequesterPaysEnabled:
          $ref: "#/components/schemas/BoxedBoolean"
      description: "The configuration of the workgroup, which includes the location in
        Amazon S3 where query results are stored, the encryption option, if any,
        used for query results, whether the Amazon CloudWatch Metrics are
        enabled for the workgroup and whether workgroup settings override query
        settings, and the data usage limits for the amount of data scanned per
        query or per workgroup. The workgroup settings override is specified in
        EnforceWorkGroupConfiguration (true/false) in the
        WorkGroupConfiguration. See
        <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. "
    WorkGroupDescriptionString:
      type: string
      minLength: 0
      maxLength: 1024
    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    Date:
      type: string
      format: date-time
    datumString:
      type: string
    Datum:
      type: object
      properties:
        VarCharValue:
          $ref: "#/components/schemas/datumString"
      description: A piece of data (a field in the table).
    EncryptionOption:
      type: string
      enum:
        - SSE_S3
        - SSE_KMS
        - CSE_KMS
    EncryptionConfiguration:
      type: object
      required:
        - EncryptionOption
      properties:
        EncryptionOption:
          $ref: "#/components/schemas/EncryptionOption"
        KmsKey:
          $ref: "#/components/schemas/String"
      description: If query results are encrypted in Amazon S3, indicates the encryption
        option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>)
        and key information.
    ErrorCode:
      type: string
      description: The error code returned when the query execution failed to process, or
        when the processing request for the named query failed.
      minLength: 1
      maxLength: 256
    ErrorMessage:
      type: string
    NamedQuery:
      type: object
      required:
        - Name
        - Database
        - QueryString
      properties:
        Name:
          $ref: "#/components/schemas/NameString"
        Description:
          $ref: "#/components/schemas/DescriptionString"
        Database:
          $ref: "#/components/schemas/DatabaseString"
        QueryString:
          $ref: "#/components/schemas/QueryString"
        NamedQueryId:
          $ref: "#/components/schemas/NamedQueryId"
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
      description: A query, where <code>QueryString</code> is the list of SQL query
        statements that comprise the query.
    QueryExecutionId:
      type: string
    QueryExecution:
      type: object
      properties:
        QueryExecutionId:
          $ref: "#/components/schemas/QueryExecutionId"
        Query:
          $ref: "#/components/schemas/QueryString"
        StatementType:
          $ref: "#/components/schemas/StatementType"
        ResultConfiguration:
          $ref: "#/components/schemas/ResultConfiguration"
        QueryExecutionContext:
          $ref: "#/components/schemas/QueryExecutionContext"
        Status:
          $ref: "#/components/schemas/QueryExecutionStatus"
        Statistics:
          $ref: "#/components/schemas/QueryExecutionStatistics"
        WorkGroup:
          $ref: "#/components/schemas/WorkGroupName"
      description: Information about a single instance of a query execution.
    Token:
      type: string
      minLength: 1
      maxLength: 1024
    MaxQueryResults:
      type: integer
      minimum: 1
      maximum: 1000
    Long:
      type: integer
    ResultSet:
      type: object
      properties:
        Rows:
          $ref: "#/components/schemas/RowList"
        ResultSetMetadata:
          $ref: "#/components/schemas/ResultSetMetadata"
      description: The metadata and rows that comprise a query result set. The metadata
        describes the column structure and data types.
    WorkGroup:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: "#/components/schemas/WorkGroupName"
        State:
          $ref: "#/components/schemas/WorkGroupState"
        Configuration:
          $ref: "#/components/schemas/WorkGroupConfiguration"
        Description:
          $ref: "#/components/schemas/WorkGroupDescriptionString"
        CreationTime:
          $ref: "#/components/schemas/Date"
      description: A workgroup, which contains a name, description, creation time, state,
        and other configuration, listed under <a>WorkGroup$Configuration</a>.
        Each workgroup enables you to isolate queries for you or your group of
        users from other queries in the same account, to configure the query
        results location and the encryption configuration (known as workgroup
        settings), to enable sending query metrics to Amazon CloudWatch, and to
        establish per-query data usage control limits for all queries in a
        workgroup. The workgroup settings override is specified in
        EnforceWorkGroupConfiguration (true/false) in the
        WorkGroupConfiguration. See
        <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    MaxNamedQueriesCount:
      type: integer
      minimum: 0
      maximum: 50
    MaxQueryExecutionsCount:
      type: integer
      minimum: 0
      maximum: 50
    MaxTagsCount:
      type: integer
      minimum: 75
    MaxWorkGroupsCount:
      type: integer
      minimum: 1
      maximum: 50
    WorkGroupsList:
      type: array
      items:
        $ref: "#/components/schemas/WorkGroupSummary"
      minItems: 0
      maxItems: 50
    StatementType:
      type: string
      enum:
        - DDL
        - DML
        - UTILITY
    ResultConfiguration:
      type: object
      properties:
        OutputLocation:
          $ref: "#/components/schemas/String"
        EncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
      description: The location in Amazon S3 where query results are stored and the
        encryption option, if any, used for query results. These are known as
        "client-side settings". If workgroup settings override client-side
        settings, then the query uses the workgroup settings.
    QueryExecutionContext:
      type: object
      properties:
        Database:
          $ref: "#/components/schemas/DatabaseString"
      description: The database in which the query execution occurs.
    QueryExecutionStatus:
      type: object
      properties:
        State:
          $ref: "#/components/schemas/QueryExecutionState"
        StateChangeReason:
          $ref: "#/components/schemas/String"
        SubmissionDateTime:
          $ref: "#/components/schemas/Date"
        CompletionDateTime:
          $ref: "#/components/schemas/Date"
      description: The completion date, current state, submission time, and state change
        reason (if applicable) for the query execution.
    QueryExecutionStatistics:
      type: object
      properties:
        EngineExecutionTimeInMillis:
          $ref: "#/components/schemas/Long"
        DataScannedInBytes:
          $ref: "#/components/schemas/Long"
        DataManifestLocation:
          $ref: "#/components/schemas/String"
      description: The location of a manifest file that tracks file locations generated by
        the query, the amount of data scanned by the query, and the amount of
        time that it took the query to run.
    QueryExecutionState:
      type: string
      enum:
        - QUEUED
        - RUNNING
        - SUCCEEDED
        - FAILED
        - CANCELLED
    ResultConfigurationUpdates:
      type: object
      properties:
        OutputLocation:
          $ref: "#/components/schemas/String"
        RemoveOutputLocation:
          $ref: "#/components/schemas/BoxedBoolean"
        EncryptionConfiguration:
          $ref: "#/components/schemas/EncryptionConfiguration"
        RemoveEncryptionConfiguration:
          $ref: "#/components/schemas/BoxedBoolean"
      description: The information about the updates in the query results, such as output
        location and encryption configuration for the query results.
    RowList:
      type: array
      items:
        $ref: "#/components/schemas/Row"
    ResultSetMetadata:
      type: object
      properties:
        ColumnInfo:
          $ref: "#/components/schemas/ColumnInfoList"
      description: "The metadata that describes the column structure and data types of a
        table of query results. "
    datumList:
      type: array
      items:
        $ref: "#/components/schemas/Datum"
    Row:
      type: object
      properties:
        Data:
          $ref: "#/components/schemas/datumList"
      description: The rows that comprise a query result table.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      properties:
        Key:
          $ref: "#/components/schemas/TagKey"
        Value:
          $ref: "#/components/schemas/TagValue"
      description: "A tag that you can add to a resource. A tag is a label that you assign
        to an AWS Athena resource (a workgroup). Each tag consists of a key and
        an optional value, both of which you define. Tags enable you to
        categorize workgroups in Athena, for example, by purpose, owner, or
        environment. Use a consistent set of tag keys to make it easier to
        search and filter workgroups in your account. The maximum tag key length
        is 128 Unicode characters in UTF-8. The maximum tag value length is 256
        Unicode characters in UTF-8. You can use letters and numbers
        representable in UTF-8, and the following characters: + - = . _ : / @.
        Tag keys and values are case-sensitive. Tag keys must be unique per
        resource. "
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
    UnprocessedNamedQueryId:
      type: object
      properties:
        NamedQueryId:
          $ref: "#/components/schemas/NamedQueryId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Information about a named query ID that could not be processed.
    UnprocessedQueryExecutionId:
      type: object
      properties:
        QueryExecutionId:
          $ref: "#/components/schemas/QueryExecutionId"
        ErrorCode:
          $ref: "#/components/schemas/ErrorCode"
        ErrorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Describes a query execution that failed to process.
    WorkGroupConfigurationUpdates:
      type: object
      properties:
        EnforceWorkGroupConfiguration:
          $ref: "#/components/schemas/BoxedBoolean"
        ResultConfigurationUpdates:
          $ref: "#/components/schemas/ResultConfigurationUpdates"
        PublishCloudWatchMetricsEnabled:
          $ref: "#/components/schemas/BoxedBoolean"
        BytesScannedCutoffPerQuery:
          $ref: "#/components/schemas/BytesScannedCutoffValue"
        RemoveBytesScannedCutoffPerQuery:
          $ref: "#/components/schemas/BoxedBoolean"
        RequesterPaysEnabled:
          $ref: "#/components/schemas/BoxedBoolean"
      description: The configuration information that will be updated for this workgroup,
        which includes the location in Amazon S3 where query results are stored,
        the encryption option, if any, used for query results, whether the
        Amazon CloudWatch Metrics are enabled for the workgroup, whether the
        workgroup settings override the client-side settings, and the data usage
        limit for the amount of bytes scanned per query, if it is specified.
    WorkGroupState:
      type: string
      enum:
        - ENABLED
        - DISABLED
    WorkGroupSummary:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/WorkGroupName"
        State:
          $ref: "#/components/schemas/WorkGroupState"
        Description:
          $ref: "#/components/schemas/WorkGroupDescriptionString"
        CreationTime:
          $ref: "#/components/schemas/Date"
      description: The summary information for the workgroup, which includes its name,
        state, description, and the date and time it was created.
