openapi: 3.0.0
x-hasEquivalentPaths: true
info:
  contact:
    name: Google
    url: https://google.com
  description: An implementation of the Grafeas API, which stores, and enables querying and
    retrieval of critical metadata about all of your software artifacts.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Container Analysis
  version: v1alpha1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/lucybot/api-spec-converter
        version: 2.7.31
      format: google
      url: https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: containeranalysis
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
tags:
  - name: projects
  - name: providers
paths:
  "/v1alpha1/{name}":
    delete:
      description: Deletes the given `Note` from the system.
      operationId: containeranalysis.providers.notes.delete
      parameters:
        - description: |-
            The name of the note in the form of
            "providers/{provider_id}/notes/{NOTE_ID}"
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    get:
      description: Returns the requested `Note`.
      operationId: containeranalysis.providers.notes.get
      parameters:
        - description: |-
            The name of the note in the form of
            "providers/{provider_id}/notes/{NOTE_ID}"
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Note"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    patch:
      description: Updates an existing `Note`.
      operationId: containeranalysis.providers.notes.patch
      parameters:
        - description: |-
            The name of the note.
            Should be of the form "projects/{provider_id}/notes/{note_id}".
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: The fields to update.
          in: query
          name: updateMask
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Note"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Note"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  "/v1alpha1/{name}/notes":
    get:
      description: Lists all `Notes` for a given project.
      operationId: containeranalysis.providers.notes.list
      parameters:
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: |-
            The name field will contain the project Id for example:
            "providers/{provider_id}
            @Deprecated
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Number of notes to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: 'This field contains the project Id for example:
            "projects/{PROJECT_ID}".'
          in: query
          name: parent
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListNotesResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Creates a new `Note`.
      operationId: containeranalysis.providers.notes.create
      parameters:
        - description: |-
            The name of the project.
            Should be of the form "providers/{provider_id}".
            @Deprecated
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: The ID to use for this note.
          in: query
          name: noteId
          schema:
            type: string
        - description: |-
            This field contains the project Id for example:
            "projects/{project_id}
          in: query
          name: parent
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Note"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Note"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  "/v1alpha1/{name}/occurrences":
    get:
      description: |-
        Lists `Occurrences` referencing the specified `Note`. Use this method to
        get all occurrences referencing your `Note` across all your customer
        projects.
      operationId: containeranalysis.providers.notes.occurrences.list
      parameters:
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: |-
            The name field will contain the note name for example:
              "provider/{provider_id}/notes/{note_id}"
          in: path
          name: name
          required: true
          x-reservedExpansion: true
          schema:
            type: string
        - description: Number of notes to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListNoteOccurrencesResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1alpha1/{parent}/notes":
    get:
      description: Lists all `Notes` for a given project.
      operationId: containeranalysis.projects.notes.list
      parameters:
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: |-
            The name field will contain the project Id for example:
            "providers/{provider_id}
            @Deprecated
          in: query
          name: name
          schema:
            type: string
        - description: Number of notes to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: 'This field contains the project Id for example:
            "projects/{PROJECT_ID}".'
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListNotesResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Creates a new `Note`.
      operationId: containeranalysis.projects.notes.create
      parameters:
        - description: |-
            The name of the project.
            Should be of the form "providers/{provider_id}".
            @Deprecated
          in: query
          name: name
          schema:
            type: string
        - description: The ID to use for this note.
          in: query
          name: noteId
          schema:
            type: string
        - description: |-
            This field contains the project Id for example:
            "projects/{project_id}
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Note"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Note"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1alpha1/{parent}/occurrences":
    get:
      description: Lists active `Occurrences` for a given project matching the filters.
      operationId: containeranalysis.projects.occurrences.list
      parameters:
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: The kind of occurrences to filter on.
          in: query
          name: kind
          schema:
            type: string
            enum:
              - KIND_UNSPECIFIED
              - PACKAGE_VULNERABILITY
              - BUILD_DETAILS
              - IMAGE_BASIS
              - PACKAGE_MANAGER
              - DEPLOYABLE
              - DISCOVERY
              - ATTESTATION_AUTHORITY
              - UPGRADE
        - description: |-
            The name field contains the project Id. For example:
            "projects/{project_id}
            @Deprecated
          in: query
          name: name
          schema:
            type: string
        - description: Number of occurrences to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "This contains the project Id for example: projects/{project_id}."
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListOccurrencesResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: |-
        Creates a new `Occurrence`. Use this method to create `Occurrences`
        for a resource.
      operationId: containeranalysis.projects.occurrences.create
      parameters:
        - description: >-
            The name of the project.  Should be of the form
            "projects/{project_id}".

            @Deprecated
          in: query
          name: name
          schema:
            type: string
        - description: 'This field contains the project Id for example:
            "projects/{project_id}"'
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Occurrence"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Occurrence"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1alpha1/{parent}/occurrences:vulnerabilitySummary":
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      parameters:
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: "This contains the project Id for example: projects/{project_id}"
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GetVulnzOccurrencesSummaryResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1alpha1/{parent}/operations":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: Creates a new `Operation`.
      operationId: containeranalysis.projects.operations.create
      parameters:
        - description: The project Id that this operation should be created under.
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOperationRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Operation"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1alpha1/{parent}/scanConfigs":
    get:
      description: Lists scan configurations for a project.
      operationId: containeranalysis.projects.scanConfigs.list
      parameters:
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: The number of items to return.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The page token to use for the next request.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "This containers the project Id i.e.: projects/{project_id}"
          in: path
          name: parent
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ListScanConfigsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
  "/v1alpha1/{resource}:getIamPolicy":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Gets the access control policy for a note or an `Occurrence` resource.

        Requires `containeranalysis.notes.setIamPolicy` or

        `containeranalysis.occurrences.setIamPolicy` permission if the resource is

        a note or occurrence, respectively.

        Attempting to call this method on a resource without the required

        permission will result in a `PERMISSION_DENIED` error. Attempting to call

        this method on a non-existent resource will result in a `NOT_FOUND` error

        if the user has list permission on the project, or a `PERMISSION_DENIED`

        error otherwise. The resource takes the following formats:

        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and

        projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      operationId: containeranalysis.providers.notes.getIamPolicy
      parameters:
        - description: >-
            REQUIRED: The resource for which the policy is being requested.

            See the operation documentation for the appropriate value for this field.
          in: path
          name: resource
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIamPolicyRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Policy"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  "/v1alpha1/{resource}:setIamPolicy":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Sets the access control policy on the specified `Note` or `Occurrence`.

        Requires `containeranalysis.notes.setIamPolicy` or

        `containeranalysis.occurrences.setIamPolicy` permission if the resource is

        a `Note` or an `Occurrence`, respectively.

        Attempting to call this method without these permissions will result in a `

        `PERMISSION_DENIED` error.

        Attempting to call this method on a non-existent resource will result in a

        `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission

        on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or

        a `PERMISSION_DENIED` error otherwise. The resource takes the following

        formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences

        and projects/{projectid}/notes/{noteid} for notes
      operationId: containeranalysis.providers.notes.setIamPolicy
      parameters:
        - description: >-
            REQUIRED: The resource for which the policy is being specified.

            See the operation documentation for the appropriate value for this field.
          in: path
          name: resource
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetIamPolicyRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Policy"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  "/v1alpha1/{resource}:testIamPermissions":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/upload_protocol"
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or

        occurrence resource. Requires list permission on the project (for example,

        "storage.objects.list" on the containing bucket for testing permission of

        an object). Attempting to call this method on a non-existent resource will

        result in a `NOT_FOUND` error if the user has list permission on the

        project, or a `PERMISSION_DENIED` error otherwise. The resource takes the

        following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for

        `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      operationId: containeranalysis.providers.notes.testIamPermissions
      parameters:
        - description: >-
            REQUIRED: The resource for which the policy detail is being
            requested.

            See the operation documentation for the appropriate value for this field.
          in: path
          name: resource
          required: true
          x-reservedExpansion: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestIamPermissionsRequest"
      responses:
        "200":
          description: Successful response
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TestIamPermissionsResponse"
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
servers:
  - url: https://containeranalysis.googleapis.com/
components:
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
  requestBodies:
    Note:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Note"
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services
  schemas:
    Artifact:
      description: Artifact describes a build product.
      properties:
        checksum:
          description: >-
            Hash or checksum value of a binary, or Docker Registry 2.0 digest of
            a

            container.
          type: string
        id:
          description: >-
            Artifact ID, if any; for container images, this will be a URL by
            digest

            like gcr.io/projectID/imagename@sha256:123456
          type: string
        name:
          description: >-
            Name of the artifact. This may be the path to a binary or jar file,
            or in

            the case of a container build, the name used to push the container image to

            Google Container Registry, as presented to `docker push`.


            This field is deprecated in favor of the plural `names` field; it continues

            to exist here to allow existing BuildProvenance serialized to json in

            google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to

            deserialize back into proto.
          type: string
        names:
          description: >-
            Related artifact names. This may be the path to a binary or jar
            file, or in

            the case of a container build, the name used to push the container image to

            Google Container Registry, as presented to `docker push`. Note that a

            single Artifact ID can have multiple names, for example if two tags are

            applied to one image.
          items:
            type: string
          type: array
      type: object
    Attestation:
      description: >-
        Occurrence that represents a single "attestation".  The authenticity of
        an

        Attestation can be verified using the attached signature. If the verifier

        trusts the public key of the signer, then verifying the signature is

        sufficient to establish trust.  In this circumstance, the

        AttestationAuthority to which this Attestation is attached is primarily

        useful for look-up (how to find this Attestation if you already know the

        Authority and artifact to be verified) and intent (which authority was this

        attestation intended to sign for).
      properties:
        pgpSignedAttestation:
          $ref: "#/components/schemas/PgpSignedAttestation"
      type: object
    AttestationAuthority:
      description: >-
        Note kind that represents a logical attestation "role" or
        "authority".  For

        example, an organization might have one `AttestationAuthority` for "QA" and

        one for "build".  This Note is intended to act strictly as a grouping

        mechanism for the attached Occurrences (Attestations).  This grouping

        mechanism also provides a security boundary, since IAM ACLs gate the ability

        for a principle to attach an Occurrence to a given Note.  It also provides a

        single point of lookup to find all attached Attestation Occurrences, even if

        they don't all live in the same project.
      properties:
        hint:
          $ref: "#/components/schemas/AttestationAuthorityHint"
      type: object
    AttestationAuthorityHint:
      description: >-
        This submessage provides human-readable hints about the purpose of the

        AttestationAuthority.  Because the name of a Note acts as its resource

        reference, it is important to disambiguate the canonical name of the Note

        (which might be a UUID for security purposes) from "readable" names more

        suitable for debug output.  Note that these hints should NOT be used to

        look up AttestationAuthorities in security sensitive contexts, such as when

        looking up Attestations to verify.
      properties:
        humanReadableName:
          description: The human readable name of this Attestation Authority, for example
            "qa".
          type: string
      type: object
    Basis:
      description: |-
        Basis describes the base image portion (Note) of the DockerImage
        relationship.  Linked occurrences are derived from this or an
        equivalent image via:
          FROM <Basis.resource_url>
        Or an equivalent reference, e.g. a tag of the resource_url.
      properties:
        fingerprint:
          $ref: "#/components/schemas/Fingerprint"
        resourceUrl:
          description: |-
            The resource_url for the resource representing the basis of
            associated occurrence images.
          type: string
      type: object
    Binding:
      description: Associates `members` with a `role`.
      properties:
        condition:
          $ref: "#/components/schemas/Expr"
        members:
          description: >+
            Specifies the identities requesting access for a Cloud Platform
            resource.

            `members` can have the following values:


            * `allUsers`: A special identifier that represents anyone who is
               on the internet; with or without a Google account.

            * `allAuthenticatedUsers`: A special identifier that represents anyone
               who is authenticated with a Google account or a service account.

            * `user:{emailid}`: An email address that represents a specific Google
               account. For example, `alice@example.com` .


            * `serviceAccount:{emailid}`: An email address that represents a service
               account. For example, `my-other-app@appspot.gserviceaccount.com`.

            * `group:{emailid}`: An email address that represents a Google group.
               For example, `admins@example.com`.


            * `domain:{domain}`: The G Suite domain (primary) that represents all the
               users of that domain. For example, `google.com` or `example.com`.

          items:
            type: string
          type: array
        role:
          description: |-
            Role that is assigned to `members`.
            For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
      type: object
    BuildDetails:
      description: Message encapsulating build provenance details.
      properties:
        provenance:
          $ref: "#/components/schemas/BuildProvenance"
        provenanceBytes:
          description: >-
            Serialized JSON representation of the provenance, used in generating
            the

            `BuildSignature` in the corresponding Result. After verifying the

            signature, `provenance_bytes` can be unmarshalled and compared to the

            provenance to confirm that it is unchanged. A base64-encoded string

            representation of the provenance bytes is used for the signature in order

            to interoperate with openssl which expects this format for signature

            verification.


            The serialized form is captured both to avoid ambiguity in how the

            provenance is marshalled to json as well to prevent incompatibilities with

            future changes.
          type: string
      type: object
    BuildProvenance:
      description: >-
        Provenance of a build. Contains all information needed to verify the
        full

        details about the build from source to completion.
      properties:
        buildOptions:
          additionalProperties:
            type: string
          description: >-
            Special options applied to this build. This is a catch-all field
            where

            build providers can enter any desired additional details.
          type: object
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
        builtArtifacts:
          description: Output of the build.
          items:
            $ref: "#/components/schemas/Artifact"
          type: array
        commands:
          description: Commands requested by the build.
          items:
            $ref: "#/components/schemas/Command"
          type: array
        createTime:
          description: Time at which the build was created.
          format: google-datetime
          type: string
        creator:
          description: >-
            E-mail address of the user who initiated this build. Note that this
            was the

            user's e-mail address at the time the build was initiated; this address may

            not represent the same end-user for all time.
          type: string
        finishTime:
          description: Time at which execution of the build was finished.
          format: google-datetime
          type: string
        id:
          description: Unique identifier of the build.
          type: string
        logsBucket:
          description: Google Cloud Storage bucket where logs were written.
          type: string
        projectId:
          description: ID of the project.
          type: string
        sourceProvenance:
          $ref: "#/components/schemas/Source"
        startTime:
          description: Time at which execution of the build was started.
          format: google-datetime
          type: string
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty
            if not.
          type: string
      type: object
    BuildSignature:
      description: Message encapsulating the signature of the verified build.
      properties:
        keyId:
          description: >-
            An Id for the key used to sign. This could be either an Id for the
            key

            stored in `public_key` (such as the Id or fingerprint for a PGP key, or the

            CN for a cert), or a reference to an external key (such as a reference to a

            key in Cloud Key Management Service).
          type: string
        keyType:
          description: |-
            The type of the key, either stored in `public_key` or referenced in
            `key_id`
          enum:
            - KEY_TYPE_UNSPECIFIED
            - PGP_ASCII_ARMORED
            - PKIX_PEM
          type: string
        publicKey:
          description: >-
            Public key of the builder which can be used to verify that the
            related

            findings are valid and unchanged. If `key_type` is empty, this defaults

            to PEM encoded public keys.


            This field may be empty if `key_id` references an external key.


            For Cloud Build based signatures, this is a PEM encoded public

            key. To verify the Cloud Build signature, place the contents of

            this field into a file (public.pem). The signature field is base64-decoded

            into its binary representation in signature.bin, and the provenance bytes

            from `BuildDetails` are base64-decoded into a binary representation in

            signed.bin. OpenSSL can then verify the signature:

            `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
          type: string
        signature:
          description: Signature of the related `BuildProvenance`, encoded in a base64
            string.
          type: string
      type: object
    BuildType:
      description: |-
        Note holding the version of the provider's builder and the signature of
        the provenance message in linked BuildDetails.
      properties:
        builderVersion:
          description: Version of the builder which produced this Note.
          type: string
        signature:
          $ref: "#/components/schemas/BuildSignature"
      type: object
    Command:
      description: Command describes a step performed as part of the build pipeline.
      properties:
        args:
          description: Command-line arguments used when executing this Command.
          items:
            type: string
          type: array
        dir:
          description: >-
            Working directory (relative to project source root) used when
            running

            this Command.
          type: string
        env:
          description: Environment variables set before running this Command.
          items:
            type: string
          type: array
        id:
          description: >-
            Optional unique identifier for this Command, used in wait_for to
            reference

            this Command as a dependency.
          type: string
        name:
          description: >-
            Name of the command, as presented on the command line, or if the
            command is

            packaged as a Docker container, as presented to `docker pull`.
          type: string
        waitFor:
          description: The ID(s) of the Command(s) that this Command depends on.
          items:
            type: string
          type: array
      type: object
    CreateOperationRequest:
      description: Request for creating an operation
      properties:
        operation:
          $ref: "#/components/schemas/Operation"
        operationId:
          description: The ID to use for this operation.
          type: string
      type: object
    Deployable:
      description: An artifact that can be deployed in some runtime.
      properties:
        resourceUri:
          description: Resource URI for the artifact being deployed.
          items:
            type: string
          type: array
      type: object
    Deployment:
      description: The period during which some deployable was active in a runtime.
      properties:
        address:
          description: Address of the runtime element hosting this deployment.
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        deployTime:
          description: Beginning of the lifetime of this deployment.
          format: google-datetime
          type: string
        platform:
          description: Platform hosting this deployment.
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          type: string
        resourceUri:
          description: >-
            Output only. Resource URI for the artifact being deployed taken from
            the

            deployable field with the same name.
          items:
            type: string
          type: array
        undeployTime:
          description: End of the lifetime of this deployment.
          format: google-datetime
          type: string
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
      type: object
    Derived:
      description: >-
        Derived describes the derived image portion (Occurrence) of the

        DockerImage relationship.  This image would be produced from a Dockerfile

        with FROM <DockerImage.Basis in attached Note>.
      properties:
        baseResourceUrl:
          description: |-
            Output only. This contains the base image URL for the derived image
            occurrence.
          type: string
        distance:
          description: >-
            Output only. The number of layers by which this image differs from
            the

            associated image basis.
          format: uint32
          type: integer
        fingerprint:
          $ref: "#/components/schemas/Fingerprint"
        layerInfo:
          description: >-
            This contains layer-specific metadata, if populated it has length

            "distance" and is ordered with [distance] being the layer immediately

            following the base image and [1] being the final layer.
          items:
            $ref: "#/components/schemas/Layer"
          type: array
      type: object
    Detail:
      description: >-
        Identifies all occurrences of this vulnerability in the package for a

        specific distro/location

        For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
      properties:
        cpeUri:
          description: >-
            The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
            in

            which the vulnerability manifests.  Examples include distro or storage

            location for vulnerable jar.

            This field can be used as a filter in list requests.
          type: string
        description:
          description: A vendor-specific description of this note.
          type: string
        fixedLocation:
          $ref: "#/components/schemas/VulnerabilityLocation"
        isObsolete:
          description: >-
            Whether this Detail is obsolete. Occurrences are expected not to
            point to

            obsolete details.
          type: boolean
        maxAffectedVersion:
          $ref: "#/components/schemas/Version"
        minAffectedVersion:
          $ref: "#/components/schemas/Version"
        package:
          description: |-
            The name of the package where the vulnerability was found.
            This field can be used as a filter in list requests.
          type: string
        packageType:
          description: |-
            The type of package; whether native or non native(ruby gems,
            node.js packages etc)
          type: string
        severityName:
          description: "The severity (eg: distro assigned severity) for this vulnerability."
          type: string
      type: object
    Discovered:
      description: Provides information about the scan status of a discovered resource.
      properties:
        analysisStatus:
          description: The status of discovery for the resource.
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          type: string
        analysisStatusError:
          $ref: "#/components/schemas/Status"
        continuousAnalysis:
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          type: string
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        operation:
          $ref: "#/components/schemas/Operation"
      type: object
    Discovery:
      description: >-
        A note that indicates a type of analysis a provider would perform. This
        note

        exists in a provider's project. A `Discovery` occurrence is created in a

        consumer's project at the start of analysis. The occurrence's operation will

        indicate the status of the analysis. Absence of an occurrence linked to this

        note for a resource indicates that analysis hasn't started.
      properties:
        analysisKind:
          description: The kind of analysis that is handled by this discovery.
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
          type: string
      type: object
    Distribution:
      description: >-
        This represents a particular channel of distribution for a given
        package.

        e.g. Debian's jessie-backports dpkg mirror
      properties:
        architecture:
          description: |-
            The CPU architecture for which packages in this distribution
            channel were built
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
        cpeUri:
          description: |-
            The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
            denoting the package manager version distributing a package.
          type: string
        description:
          description: The distribution channel-specific description of this package.
          type: string
        latestVersion:
          $ref: "#/components/schemas/Version"
        maintainer:
          description: A freeform string denoting the maintainer of this package.
          type: string
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated

        empty messages in your APIs. A typical example is to use it as the request

        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    Expr:
      description: |-
        Represents an expression text. Example:

            title: "User account presence"
            description: "Determines whether the request has a user account"
            expression: "size(request.user) > 0"
      properties:
        description:
          description: >-
            An optional description of the expression. This is a longer text
            which

            describes the expression, e.g. when hovered over it in a UI.
          type: string
        expression:
          description: |-
            Textual representation of an expression in
            Common Expression Language syntax.

            The application context of the containing message determines which
            well-known feature set of CEL is supported.
          type: string
        location:
          description: >-
            An optional string indicating the location of the expression for
            error

            reporting, e.g. a file name and a position in the file.
          type: string
        title:
          description: |-
            An optional title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
      type: object
    FileHashes:
      description: |-
        Container message for hashes of byte content of files, used in Source
        messages to verify integrity of source input to the build.
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: "#/components/schemas/Hash"
          type: array
      type: object
    Fingerprint:
      description: A set of properties that uniquely identify a given Docker image.
      properties:
        v1Name:
          description: |-
            The layer-id of the final layer in the Docker image's v1
            representation.
            This field can be used as a filter in list requests.
          type: string
        v2Blob:
          description: The ordered list of v2 blobs that represent a given image.
          items:
            type: string
          type: array
        v2Name:
          description: >-
            Output only. The name of the image's v2 blobs computed via:
              [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1])
            Only the name of the final blob is kept.

            This field can be used as a filter in list requests.
          type: string
      type: object
    GetIamPolicyRequest:
      description: Request message for `GetIamPolicy` method.
      properties:
        options:
          $ref: "#/components/schemas/GetPolicyOptions"
      type: object
    GetPolicyOptions:
      description: Encapsulates settings provided to GetIamPolicy.
      properties:
        requestedPolicyVersion:
          description: >-
            Optional. The policy format version to be returned.


            Valid values are 0, 1, and 3. Requests specifying an invalid value will be

            rejected.


            Requests for policies with any conditional bindings must specify version 3.

            Policies without any conditional bindings may specify any valid value or

            leave the field unset.
          format: int32
          type: integer
      type: object
    GetVulnzOccurrencesSummaryResponse:
      description: |-
        A summary of how many vulnz occurrences there are per severity type.
        counts by groups, or if we should have different summary messages
        like this.
      properties:
        counts:
          description: A map of how many occurrences were found for each severity.
          items:
            $ref: "#/components/schemas/SeverityCount"
          type: array
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1AliasContext:
      description: An alias to a repo revision.
      properties:
        kind:
          description: The alias kind.
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          type: string
        name:
          description: The alias name.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext:
      description: |-
        A CloudRepoSourceContext denotes a particular revision in a Google Cloud
        Source Repo.
      properties:
        aliasContext:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasC\
            ontext"
        repoId:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1RepoId"
        revisionId:
          description: A revision ID.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext:
      description: A SourceContext referring to a Gerrit project.
      properties:
        aliasContext:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasC\
            ontext"
        gerritProject:
          description: |-
            The full project name within the host. Projects may be nested, so
            "project/subproject" is a valid project name. The "repo name" is
            the hostURI/project.
          type: string
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        revisionId:
          description: A revision (commit) ID.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext:
      description: |-
        A GitSourceContext denotes a particular revision in a third party Git
        repository (e.g., GitHub).
      properties:
        revisionId:
          description: Required. Git commit hash.
          type: string
        url:
          description: Git repository URL.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      description: |-
        Metadata for all operations used and required for all operations
        that created by Container Analysis Providers
      properties:
        createTime:
          description: Output only. The time this operation was created.
          format: google-datetime
          type: string
        endTime:
          description: Output only. The time that this operation was marked completed or
            failed.
          format: google-datetime
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId:
      description: |-
        Selects a repo using a Google Cloud Platform project ID (e.g.,
        winged-cargo-31) and a repo name within that project.
      properties:
        projectId:
          description: The ID of the project.
          type: string
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1RepoId:
      description: A unique identifier for a Cloud Repo.
      properties:
        projectRepoId:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1Projec\
            tRepoId"
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SourceContext:
      description: >-
        A SourceContext is a reference to a tree of files. A SourceContext
        together

        with a path point to a unique revision of a single file or directory.
      properties:
        cloudRepo:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1CloudR\
            epoSourceContext"
        gerrit:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1Gerrit\
            SourceContext"
        git:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GitSou\
            rceContext"
        labels:
          additionalProperties:
            type: string
          description: Labels with user defined metadata.
          type: object
      type: object
    Hash:
      description: Container message for hash values.
      properties:
        type:
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
          type: string
        value:
          description: The hash value.
          format: byte
          type: string
      type: object
    Installation:
      description: |-
        This represents how a particular software package may be installed on
        a system.
      properties:
        location:
          description: |-
            All of the places within the filesystem versions of this package
            have been found.
          items:
            $ref: "#/components/schemas/Location"
          type: array
        name:
          description: Output only. The name of the installed package.
          type: string
      type: object
    Layer:
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
        directive:
          description: The recovered Dockerfile directive used to construct this layer.
          enum:
            - DIRECTIVE_UNSPECIFIED
            - MAINTAINER
            - RUN
            - CMD
            - LABEL
            - EXPOSE
            - ENV
            - ADD
            - COPY
            - ENTRYPOINT
            - VOLUME
            - USER
            - WORKDIR
            - ARG
            - ONBUILD
            - STOPSIGNAL
            - HEALTHCHECK
            - SHELL
          type: string
      type: object
    ListNoteOccurrencesResponse:
      description: Response including listed occurrences for a note.
      properties:
        nextPageToken:
          description: Token to receive the next page of notes.
          type: string
        occurrences:
          description: The occurrences attached to the specified note.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    ListNotesResponse:
      description: Response including listed notes.
      properties:
        nextPageToken:
          description: >-
            The next pagination token in the list response. It should be used as

            page_token for the following request. An empty value means no more result.
          type: string
        notes:
          description: The occurrences requested
          items:
            $ref: "#/components/schemas/Note"
          type: array
      type: object
    ListOccurrencesResponse:
      description: Response including listed active occurrences.
      properties:
        nextPageToken:
          description: |-
            The next pagination token in the list response. It should be used as
            `page_token` for the following request. An empty value means no more
            results.
          type: string
        occurrences:
          description: The occurrences requested.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    ListScanConfigsResponse:
      description: A list of scan configs for the project.
      properties:
        nextPageToken:
          description: A page token to pass in order to get more scan configs.
          type: string
        scanConfigs:
          description: The set of scan configs.
          items:
            $ref: "#/components/schemas/ScanConfig"
          type: array
      type: object
    Location:
      description: |-
        An occurrence of a particular package installation found within a
        system's filesystem.
        e.g. glibc was found in /var/lib/dpkg/status
      properties:
        cpeUri:
          description: |-
            The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
            denoting the package manager version distributing a package.
          type: string
        path:
          description: The path from which we gathered that this package/version is
            installed.
          type: string
        version:
          $ref: "#/components/schemas/Version"
      type: object
    Note:
      description: Provides a detailed description of a `Note`.
      properties:
        attestationAuthority:
          $ref: "#/components/schemas/AttestationAuthority"
        baseImage:
          $ref: "#/components/schemas/Basis"
        buildType:
          $ref: "#/components/schemas/BuildType"
        createTime:
          description: >-
            Output only. The time this note was created. This field can be used
            as a

            filter in list requests.
          format: google-datetime
          type: string
        deployable:
          $ref: "#/components/schemas/Deployable"
        discovery:
          $ref: "#/components/schemas/Discovery"
        expirationTime:
          description: Time of expiration for this note, null if note does not expire.
          format: google-datetime
          type: string
        kind:
          description: >-
            Output only. This explicitly denotes which kind of note is
            specified. This

            field can be used as a filter in list requests.
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
          type: string
        longDescription:
          description: A detailed description of this `Note`.
          type: string
        name:
          description: |-
            The name of the note in the form
            "projects/{provider_project_id}/notes/{NOTE_ID}"
          type: string
        package:
          $ref: "#/components/schemas/Package"
        relatedUrl:
          description: URLs associated with this note
          items:
            $ref: "#/components/schemas/RelatedUrl"
          type: array
        shortDescription:
          description: A one sentence description of this `Note`.
          type: string
        updateTime:
          description: >-
            Output only. The time this note was last updated. This field can be
            used as

            a filter in list requests.
          format: google-datetime
          type: string
        upgrade:
          $ref: "#/components/schemas/UpgradeNote"
        vulnerabilityType:
          $ref: "#/components/schemas/VulnerabilityType"
      type: object
    Occurrence:
      description: "`Occurrence` includes information about analysis occurrences for an
        image."
      properties:
        attestation:
          $ref: "#/components/schemas/Attestation"
        buildDetails:
          $ref: "#/components/schemas/BuildDetails"
        createTime:
          description: Output only. The time this `Occurrence` was created.
          format: google-datetime
          type: string
        deployment:
          $ref: "#/components/schemas/Deployment"
        derivedImage:
          $ref: "#/components/schemas/Derived"
        discovered:
          $ref: "#/components/schemas/Discovered"
        installation:
          $ref: "#/components/schemas/Installation"
        kind:
          description: >-
            Output only. This explicitly denotes which of the `Occurrence`
            details are

            specified. This field can be used as a filter in list requests.
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
          type: string
        name:
          description: |-
            Output only. The name of the `Occurrence` in the form
            "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
          type: string
        noteName:
          description: |-
            An analysis note associated with this image, in the form
            "providers/{provider_id}/notes/{NOTE_ID}"
            This field can be used as a filter in list requests.
          type: string
        remediation:
          description: A description of actions that can be taken to remedy the `Note`
          type: string
        resource:
          $ref: "#/components/schemas/Resource"
        resourceUrl:
          description: >-
            The unique URL of the image or the container for which the
            `Occurrence`

            applies. For example, https://gcr.io/project/image@sha256:foo This field

            can be used as a filter in list requests.
          type: string
        updateTime:
          description: Output only. The time this `Occurrence` was last updated.
          format: google-datetime
          type: string
        upgrade:
          $ref: "#/components/schemas/UpgradeOccurrence"
        vulnerabilityDetails:
          $ref: "#/components/schemas/VulnerabilityDetails"
      type: object
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a

        network API call.
      properties:
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress.

            If `true`, the operation is completed, and either `error` or `response` is

            available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation.  It
            typically

            contains progress information and common metadata such as create time.

            Some services might not provide such metadata.  Any method that returns a

            long-running operation should document the metadata type, if any.
          type: object
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that

            originally returns it. If you use the default HTTP mapping, the

            `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            The normal response of the operation in case of success.  If the
            original

            method returns no data on success, such as `Delete`, the response is

            `google.protobuf.Empty`.  If the original method is standard

            `Get`/`Create`/`Update`, the response should be the resource.  For other

            methods, the response should have the type `XxxResponse`, where `Xxx`

            is the original method name.  For example, if the original method name

            is `TakeSnapshot()`, the inferred response type is

            `TakeSnapshotResponse`.
          type: object
      type: object
    Package:
      description: |-
        This represents a particular package that is distributed over
        various channels.
        e.g. glibc (aka libc6) is distributed by many, at various versions.
      properties:
        distribution:
          description: The various channels by which a package is distributed.
          items:
            $ref: "#/components/schemas/Distribution"
          type: array
        name:
          description: The name of the package.
          type: string
      type: object
    PackageIssue:
      description: |-
        This message wraps a location affected by a vulnerability and its
        associated fix (if one is available).
      properties:
        affectedLocation:
          $ref: "#/components/schemas/VulnerabilityLocation"
        fixedLocation:
          $ref: "#/components/schemas/VulnerabilityLocation"
        severityName:
          type: string
      type: object
    PgpSignedAttestation:
      description: >-
        An attestation wrapper with a PGP-compatible signature.

        This message only supports `ATTACHED` signatures, where the payload that is

        signed is included alongside the signature itself in the same file.
      properties:
        contentType:
          description: >-
            Type (for example schema) of the attestation payload that was
            signed.

            The verifier must ensure that the provided type is one that the verifier

            supports, and that the attestation payload is a valid instantiation of that

            type (for example by validating a JSON schema).
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - SIMPLE_SIGNING_JSON
          type: string
        pgpKeyId:
          description: >-
            The cryptographic fingerprint of the key used to generate the
            signature,

            as output by, e.g. `gpg --list-keys`. This should be the version 4, full

            160-bit fingerprint, expressed as a 40 character hexadecimal string. See

            https://tools.ietf.org/html/rfc4880#section-12.2 for details.

            Implementations may choose to acknowledge "LONG", "SHORT", or other

            abbreviated key IDs, but only the full fingerprint is guaranteed to work.

            In gpg, the full fingerprint can be retrieved from the `fpr` field

            returned when calling --list-keys with --with-colons.  For example:

            ```

            gpg --with-colons --with-fingerprint --force-v4-certs \
                --list-keys attester@example.com
            tru::1:1513631572:0:3:1:5

            pub:...<SNIP>...

            fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:

            ```

            Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
          type: string
        signature:
          description: >-
            The raw content of the signature, as output by GNU Privacy Guard
            (GPG) or

            equivalent.  Since this message only supports attached signatures, the

            payload that was signed must be attached. While the signature format

            supported is dependent on the verification implementation, currently only

            ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than

            `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor

            --output=signature.gpg payload.json` will create the signature content

            expected in this field in `signature.gpg` for the `payload.json`

            attestation payload.
          type: string
      type: object
    Policy:
      description: >-
        Defines an Identity and Access Management (IAM) policy. It is used to

        specify access control policies for Cloud Platform resources.



        A `Policy` consists of a list of `bindings`. A `binding` binds a list of

        `members` to a `role`, where the members can be user accounts, Google groups,

        Google domains, and service accounts. A `role` is a named list of permissions

        defined by IAM.


        **JSON Example**

            {
              "bindings": [
                {
                  "role": "roles/owner",
                  "members": [
                    "user:mike@example.com",
                    "group:admins@example.com",
                    "domain:google.com",
                    "serviceAccount:my-other-app@appspot.gserviceaccount.com"
                  ]
                },
                {
                  "role": "roles/viewer",
                  "members": ["user:sean@example.com"]
                }
              ]
            }

        **YAML Example**

            bindings:
            - members:
              - user:mike@example.com
              - group:admins@example.com
              - domain:google.com
              - serviceAccount:my-other-app@appspot.gserviceaccount.com
              role: roles/owner
            - members:
              - user:sean@example.com
              role: roles/viewer


        For a description of IAM and its features, see the

        [IAM developer's guide](https://cloud.google.com/iam/docs).
      properties:
        bindings:
          description: |-
            Associates a list of `members` to a `role`.
            `bindings` with no members will result in an error.
          items:
            $ref: "#/components/schemas/Binding"
          type: array
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help

            prevent simultaneous updates of a policy from overwriting each other.

            It is strongly suggested that systems make use of the `etag` in the

            read-modify-write cycle to perform policy updates in order to avoid race

            conditions: An `etag` is returned in the response to `getIamPolicy`, and

            systems are expected to put that etag in the request to `setIamPolicy` to

            ensure that their change will be applied to the same version of the policy.


            If no `etag` is provided in the call to `setIamPolicy`, then the existing

            policy is overwritten.
          format: byte
          type: string
        version:
          description: >-
            Specifies the format of the policy.


            Valid values are 0, 1, and 3. Requests specifying an invalid value will be

            rejected.


            Policies with any conditional bindings must specify version 3. Policies

            without any conditional bindings may specify any valid value or leave the

            field unset.
          format: int32
          type: integer
      type: object
    RelatedUrl:
      description: Metadata for any related URL information
      properties:
        label:
          description: Label to describe usage of the URL
          type: string
        url:
          description: Specific URL to associate with the note
          type: string
      type: object
    RepoSource:
      description: |-
        RepoSource describes the location of the source in a Google Cloud Source
        Repository.
      properties:
        branchName:
          description: Name of the branch to build.
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        projectId:
          description: ID of the project that owns the repo.
          type: string
        repoName:
          description: Name of the repo.
          type: string
        tagName:
          description: Name of the tag to build.
          type: string
      type: object
    Resource:
      description: |-
        
        Resource is an entity that can have metadata. E.g., a Docker image.
      properties:
        contentHash:
          $ref: "#/components/schemas/Hash"
        name:
          description: The name of the resource. E.g., the name of a Docker image -
            "Debian".
          type: string
        uri:
          description: |-
            The unique URI of the resource. E.g.,
            "https://gcr.io/project/image@sha256:foo" for a Docker image.
          type: string
      type: object
    ScanConfig:
      description: Indicates various scans and whether they are turned on or off.
      properties:
        createTime:
          description: Output only. The time this scan config was created.
          format: google-datetime
          type: string
        description:
          description: Output only. A human-readable description of what the `ScanConfig`
            does.
          type: string
        enabled:
          description: Indicates whether the Scan is enabled.
          type: boolean
        name:
          description: |-
            Output only. The name of the ScanConfig in the form
            “projects/{project_id}/scanConfigs/{scan_config_id}".
          type: string
        updateTime:
          description: Output only. The time this scan config was last updated.
          format: google-datetime
          type: string
      type: object
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          $ref: "#/components/schemas/Policy"
      type: object
    SeverityCount:
      description: The number of occurrences created for a specific severity.
      properties:
        count:
          description: The number of occurrences with the severity.
          format: int64
          type: string
        severity:
          description: The severity of the occurrences.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      type: object
    Source:
      description: Source describes the location of the source used for the build.
      properties:
        additionalContexts:
          description: >-
            If provided, some of the source code used for the build may be found
            in

            these locations, in the case where the source repository had multiple

            remotes or submodules. This list will not include the context specified in

            the context field.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1Sour\
              ceContext"
          type: array
        artifactStorageSource:
          $ref: "#/components/schemas/StorageSource"
        context:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1Source\
            Context"
        fileHashes:
          additionalProperties:
            $ref: "#/components/schemas/FileHashes"
          description: >-
            Hash(es) of the build source, which can be used to verify that the
            original

            source integrity was maintained in the build.


            The keys to this map are file paths used as build source and the values

            contain the hash values for those files.


            If the build source came in a single package such as a gzipped tarfile

            (.tar.gz), the FileHash will be for the single path to that file.
          type: object
        repoSource:
          $ref: "#/components/schemas/RepoSource"
        storageSource:
          $ref: "#/components/schemas/StorageSource"
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for

        different programming environments, including REST APIs and RPC APIs. It is

        used by [gRPC](https://github.com/grpc). Each `Status` message contains

        three pieces of data: error code, error message, and error details.


        You can find out more about this error model and how to work with it in the

        [API Design Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details.  There is a common
            set of

            message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    StorageSource:
      description: |-
        StorageSource describes the location of the source in an archive file in
        Google Cloud Storage.
      properties:
        bucket:
          description: |-
            Google Cloud Storage bucket containing source (see [Bucket Name
            Requirements]
            (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: Google Cloud Storage generation for the object.
          format: int64
          type: string
        object:
          description: Google Cloud Storage object containing source.
          type: string
      type: object
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with

            wildcards (such as '*' or 'storage.*') are not allowed. For more

            information see

            [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
          items:
            type: string
          type: array
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          description: |-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          items:
            type: string
          type: array
      type: object
    UpdateOperationRequest:
      description: Request for updating an existing operation
      properties:
        operation:
          $ref: "#/components/schemas/Operation"
        updateMask:
          description: The fields to update.
          format: google-fieldmask
          type: string
      type: object
    UpgradeDistribution:
      description: >-
        The Upgrade Distribution represents metadata about the Upgrade for each

        operating system (CPE). Some distributions have additional metadata around

        updates, classifying them into various categories and severities.
      properties:
        classification:
          description: >-
            The operating system classification of this Upgrade, as specified by
            the

            upstream operating system upgrade feed.
          type: string
        cpeUri:
          description: >-
            Required - The specific operating system this metadata applies to.
            See

            https://cpe.mitre.org/specification/.
          type: string
        cve:
          description: The cve that would be resolved by this upgrade.
          items:
            type: string
          type: array
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
      type: object
    UpgradeNote:
      description: |-
        An Upgrade Note represents a potential upgrade of a package to a given
        version. For each package version combination (i.e. bash 4.0, bash 4.1,
        bash 4.1.2), there will be a Upgrade Note.
      properties:
        distributions:
          description: Metadata about the upgrade for each specific operating system.
          items:
            $ref: "#/components/schemas/UpgradeDistribution"
          type: array
        package:
          description: Required - The package this Upgrade is for.
          type: string
        version:
          $ref: "#/components/schemas/Version"
      type: object
    UpgradeOccurrence:
      description: >-
        An Upgrade Occurrence represents that a specific resource_url could
        install a

        specific upgrade. This presence is supplied via local sources (i.e. it is

        present in the mirror and the running system has noticed its availability).
      properties:
        distribution:
          $ref: "#/components/schemas/UpgradeDistribution"
        package:
          description: Required - The package this Upgrade is for.
          type: string
        parsedVersion:
          $ref: "#/components/schemas/Version"
      type: object
    Version:
      description: >-
        Version contains structured information about the version of the
        package.

        For a discussion of this in Debian/Ubuntu:

        http://serverfault.com/questions/604541/debian-packages-version-convention

        For a discussion of this in Redhat/Fedora/Centos:

        http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
      properties:
        epoch:
          description: Used to correct mistakes in the version numbering scheme.
          format: int32
          type: integer
        kind:
          description: |-
            Distinguish between sentinel MIN/MAX versions and normal versions.
            If kind is not NORMAL, then the other fields are ignored.
          enum:
            - NORMAL
            - MINIMUM
            - MAXIMUM
          type: string
        name:
          description: The main part of the version name.
          type: string
        revision:
          description: The iteration of the package build from the above version.
          type: string
      type: object
    VulnerabilityDetails:
      description: |-
        Used by Occurrence to point to where the vulnerability exists and how
        to fix it.
      properties:
        cvssScore:
          description: >-
            Output only. The CVSS score of this vulnerability. CVSS score is on
            a

            scale of 0-10 where 0 indicates low severity and 10 indicates high

            severity.
          format: float
          type: number
        effectiveSeverity:
          description: >-
            The distro assigned severity for this vulnerability when that is

            available and note provider assigned severity when distro has not yet

            assigned a severity for this vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        packageIssue:
          description: |-
            The set of affected locations and their fixes (if available) within
            the associated resource.
          items:
            $ref: "#/components/schemas/PackageIssue"
          type: array
        severity:
          description: Output only. The note provider assigned Severity of the
            vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        type:
          description: |-
            The type of package; whether native or non native(ruby gems,
            node.js packages etc)
          type: string
      type: object
    VulnerabilityLocation:
      description: The location of the vulnerability
      properties:
        cpeUri:
          description: >-
            The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)

            format. Examples include distro or storage location for vulnerable jar.

            This field can be used as a filter in list requests.
          type: string
        package:
          description: The package being described.
          type: string
        version:
          $ref: "#/components/schemas/Version"
      type: object
    VulnerabilityType:
      description: VulnerabilityType provides metadata about a security vulnerability.
      properties:
        cvssScore:
          description: The CVSS score for this Vulnerability.
          format: float
          type: number
        details:
          description: |-
            All information about the package to specifically identify this
            vulnerability. One entry per (version range and cpe_uri) the
            package vulnerability has manifested in.
          items:
            $ref: "#/components/schemas/Detail"
          type: array
        severity:
          description: Note provider assigned impact of the vulnerability
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      type: object
