openapi: 3.0.0
info:
  version: 2018-10-23
  x-release: v4
  title: AWS IoT Events Data
  description: AWS IoT Events monitors your equipment or device fleets for failures or
    changes in operation, and triggers actions when such events occur. AWS IoT
    Events Data API commands enable you to send inputs to detectors, list
    detectors, and view or update a detector's status.
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: iotevents-data
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotevents-data-2018-10-23.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/iotevents/
security:
  - hmac: []
paths:
  /inputs/messages:
    post:
      operationId: BatchPutMessage
      description: Sends a set of messages to the AWS IoT Events system. Each message
        payload is transformed into the input you specify
        (<code>"inputName"</code>) and ingested into any detectors that monitor
        that input. If multiple messages are sent, the order in which the
        messages are processed isn't guaranteed. To guarantee ordering, you must
        send messages one at a time and wait for a successful response.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchPutMessageResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - messages
              properties:
                messages:
                  description: "The list of messages to send. Each message has the
                    following format: <code>'{ \"messageId\": \"string\",
                    \"inputName\": \"string\", \"payload\": \"string\"}'</code>
                    "
                  type: array
                  items:
                    $ref: "#/components/schemas/Message"
                  minItems: 1
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /detectors:
    post:
      operationId: BatchUpdateDetector
      description: Updates the state, variable values, and timer settings of one or more
        detectors (instances) of a specified detector model.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchUpdateDetectorResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - detectors
              properties:
                detectors:
                  description: The list of detectors (instances) to update, along with the
                    values to update.
                  type: array
                  items:
                    $ref: "#/components/schemas/UpdateDetectorRequest"
                  minItems: 1
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/detectors/{detectorModelName}/keyValues/":
    get:
      operationId: DescribeDetector
      description: Returns information about the specified detector (instance).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeDetectorResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: detectorModelName
          in: path
          required: true
          description: The name of the detector model whose detectors (instances) you want
            information about.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_-]+$
        - name: keyValue
          in: query
          required: false
          description: A filter used to limit results to detectors (instances) created
            because of the given key ID.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_:]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/detectors/{detectorModelName}":
    get:
      operationId: ListDetectors
      description: Lists detectors (the instances of a detector model).
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDetectorsResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "482":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "483":
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalFailureException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters:
        - name: detectorModelName
          in: path
          required: true
          description: The name of the detector model whose detectors (instances) are
            listed.
          schema:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[a-zA-Z0-9_-]+$
        - name: stateName
          in: query
          required: false
          description: A filter that limits results to those detectors (instances) in the
            given state.
          schema:
            type: string
            minLength: 1
            maxLength: 128
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          schema:
            type: integer
            minimum: 1
            maximum: 250
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
servers:
  - url: http://data.iotevents.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Events Data multi-region endpoint
  - url: https://data.iotevents.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Events Data multi-region endpoint
  - url: http://data.iotevents.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Events Data endpoint for China (Beijing) and China (Ningxia)
  - url: https://data.iotevents.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Events Data endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchPutMessageResponse:
      type: object
      properties:
        BatchPutMessageErrorEntries:
          $ref: "#/components/schemas/BatchPutMessageErrorEntries"
    Message:
      type: object
      required:
        - messageId
        - inputName
        - payload
      properties:
        messageId:
          $ref: "#/components/schemas/MessageId"
        inputName:
          $ref: "#/components/schemas/InputName"
        payload:
          $ref: "#/components/schemas/Payload"
      description: Information about a message.
    InvalidRequestException: {}
    InternalFailureException: {}
    ServiceUnavailableException: {}
    ThrottlingException: {}
    BatchUpdateDetectorResponse:
      type: object
      properties:
        batchUpdateDetectorErrorEntries:
          $ref: "#/components/schemas/BatchUpdateDetectorErrorEntries"
    UpdateDetectorRequest:
      type: object
      required:
        - messageId
        - detectorModelName
        - state
      properties:
        messageId:
          $ref: "#/components/schemas/MessageId"
        detectorModelName:
          $ref: "#/components/schemas/DetectorModelName"
        keyValue:
          $ref: "#/components/schemas/KeyValue"
        state:
          $ref: "#/components/schemas/DetectorStateDefinition"
      description: Information used to update the detector (instance).
    DescribeDetectorResponse:
      type: object
      properties:
        detector:
          $ref: "#/components/schemas/Detector"
    ResourceNotFoundException: {}
    ListDetectorsResponse:
      type: object
      properties:
        detectorSummaries:
          $ref: "#/components/schemas/DetectorSummaries"
        nextToken:
          $ref: "#/components/schemas/NextToken"
    BatchPutMessageErrorEntry:
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/MessageId"
        errorCode:
          $ref: "#/components/schemas/ErrorCode"
        errorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Contains information about the errors encountered.
    BatchPutMessageErrorEntries:
      type: array
      items:
        $ref: "#/components/schemas/BatchPutMessageErrorEntry"
    MessageId:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 64
    ErrorCode:
      type: string
      enum:
        - ResourceNotFoundException
        - InvalidRequestException
        - InternalFailureException
        - ServiceUnavailableException
        - ThrottlingException
    ErrorMessage:
      type: string
    Messages:
      type: array
      items:
        $ref: "#/components/schemas/Message"
      minItems: 1
    BatchPutMessageRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          $ref: "#/components/schemas/Messages"
    BatchUpdateDetectorErrorEntry:
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/MessageId"
        errorCode:
          $ref: "#/components/schemas/ErrorCode"
        errorMessage:
          $ref: "#/components/schemas/ErrorMessage"
      description: Information about the error that occured when attempting to update a
        detector.
    BatchUpdateDetectorErrorEntries:
      type: array
      items:
        $ref: "#/components/schemas/BatchUpdateDetectorErrorEntry"
    UpdateDetectorRequests:
      type: array
      items:
        $ref: "#/components/schemas/UpdateDetectorRequest"
      minItems: 1
    BatchUpdateDetectorRequest:
      type: object
      required:
        - detectors
      properties:
        detectors:
          $ref: "#/components/schemas/UpdateDetectorRequests"
    DetectorModelName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 128
    KeyValue:
      type: string
      pattern: ^[a-zA-Z0-9\-_:]+$
      minLength: 1
      maxLength: 128
    DescribeDetectorRequest:
      type: object
      properties: {}
    Detector:
      type: object
      properties:
        detectorModelName:
          $ref: "#/components/schemas/DetectorModelName"
        keyValue:
          $ref: "#/components/schemas/KeyValue"
        detectorModelVersion:
          $ref: "#/components/schemas/DetectorModelVersion"
        state:
          $ref: "#/components/schemas/DetectorState"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about the detector (instance).
    DetectorModelVersion:
      type: string
      minLength: 1
      maxLength: 128
    DetectorState:
      type: object
      required:
        - stateName
        - variables
        - timers
      properties:
        stateName:
          $ref: "#/components/schemas/StateName"
        variables:
          $ref: "#/components/schemas/Variables"
        timers:
          $ref: "#/components/schemas/Timers"
      description: Information about the current state of the detector instance.
    Timestamp:
      type: string
      format: date-time
    StateName:
      type: string
      minLength: 1
      maxLength: 128
    Variables:
      type: array
      items:
        $ref: "#/components/schemas/Variable"
    Timers:
      type: array
      items:
        $ref: "#/components/schemas/Timer"
    VariableDefinitions:
      type: array
      items:
        $ref: "#/components/schemas/VariableDefinition"
    TimerDefinitions:
      type: array
      items:
        $ref: "#/components/schemas/TimerDefinition"
    DetectorStateDefinition:
      type: object
      required:
        - stateName
        - variables
        - timers
      properties:
        stateName:
          $ref: "#/components/schemas/StateName"
        variables:
          $ref: "#/components/schemas/VariableDefinitions"
        timers:
          $ref: "#/components/schemas/TimerDefinitions"
      description: The new state, variable values, and timer settings of the detector
        (instance).
    DetectorStateSummary:
      type: object
      properties:
        stateName:
          $ref: "#/components/schemas/StateName"
      description: Information about the detector state.
    DetectorSummary:
      type: object
      properties:
        detectorModelName:
          $ref: "#/components/schemas/DetectorModelName"
        keyValue:
          $ref: "#/components/schemas/KeyValue"
        detectorModelVersion:
          $ref: "#/components/schemas/DetectorModelVersion"
        state:
          $ref: "#/components/schemas/DetectorStateSummary"
        creationTime:
          $ref: "#/components/schemas/Timestamp"
        lastUpdateTime:
          $ref: "#/components/schemas/Timestamp"
      description: Information about the detector (instance).
    DetectorSummaries:
      type: array
      items:
        $ref: "#/components/schemas/DetectorSummary"
    InputName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 128
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 250
    ListDetectorsRequest:
      type: object
      properties: {}
    Payload:
      type: string
    Seconds:
      type: integer
    TimerName:
      type: string
      minLength: 1
      maxLength: 128
    Timer:
      type: object
      required:
        - name
        - timestamp
      properties:
        name:
          $ref: "#/components/schemas/TimerName"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
      description: The current state of a timer.
    TimerDefinition:
      type: object
      required:
        - name
        - seconds
      properties:
        name:
          $ref: "#/components/schemas/TimerName"
        seconds:
          $ref: "#/components/schemas/Seconds"
      description: The new setting of a timer.
    VariableName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 128
    VariableValue:
      type: string
      minLength: 1
      maxLength: 1024
    Variable:
      type: object
      required:
        - name
        - value
      properties:
        name:
          $ref: "#/components/schemas/VariableName"
        value:
          $ref: "#/components/schemas/VariableValue"
      description: The current state of the variable.
    VariableDefinition:
      type: object
      required:
        - name
        - value
      properties:
        name:
          $ref: "#/components/schemas/VariableName"
        value:
          $ref: "#/components/schemas/VariableValue"
      description: The new value of the variable.
