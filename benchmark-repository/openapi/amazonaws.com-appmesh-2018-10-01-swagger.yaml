openapi: 3.0.0
info:
  version: 2018-10-01
  x-release: v4
  title: AWS App Mesh
  description: >-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it
    easy to monitor and
             control containerized microservices. App Mesh standardizes how your microservices
             communicate, giving you end-to-end visibility and helping to ensure high-availability for
             your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with Amazon ECS
             (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>
             <note>
                <p>App Mesh supports containerized microservice applications that use service discovery
                naming for their components. To use App Mesh, you must have a containerized application
                running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For
                more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.
                For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2018-10-01.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: false
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/appmesh/
security:
  - hmac: []
paths:
  /meshes:
    put:
      operationId: CreateMesh
      description: >-
        <p>Creates a new service mesh. A service mesh is a logical boundary for
        network traffic
                 between the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual nodes, virtual routers, and
                 routes to distribute traffic between the applications in your mesh.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMeshOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - meshName
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                meshName:
                  description: The name to use for the service mesh.
                  type: string
                  minLength: 1
                  maxLength: 255
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListMeshes
      description: Returns a list of existing service meshes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMeshesOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: limit
          in: query
          required: false
          description: >-
            The maximum number of mesh results returned by
            <code>ListMeshes</code> in paginated
                     output. When this parameter is used, <code>ListMeshes</code> only returns
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. The remaining results of the initial request can be seen by sending another
                        <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This
                     value can be between 1 and 100. If this parameter is not
                     used, then <code>ListMeshes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: >-
            <p>The <code>nextToken</code> value returned from a previous
            paginated
                     <code>ListMeshes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.</p>
                     <note>
                        <p>This token should be treated as an opaque identifier that is only used to
                            retrieve the next items in a list and not for other programmatic purposes.</p>
                    </note>
          schema:
            type: string
  "/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes":
    put:
      operationId: CreateRoute
      description: >-
        <p>Creates a new route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual router service name is
                    <code>my-service.local</code>, and you want the route to match requests to
                    <code>my-service.local/metrics</code>, then your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRouteOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to create the route.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router in which to create the route.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - routeName
                - spec
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                routeName:
                  description: The name to use for the route.
                  type: string
                  minLength: 1
                  maxLength: 255
                spec:
                  description: An object representing the specification of a route.
                  type: object
                  properties:
                    httpRoute:
                      $ref: "#/components/schemas/HttpRoute"
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListRoutes
      description: Returns a list of existing routes in a service mesh.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRoutesOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: limit
          in: query
          required: false
          description: >-
            The maximum number of mesh results returned by
            <code>ListRoutes</code> in paginated
                     output. When this parameter is used, <code>ListRoutes</code> only returns
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. The remaining results of the initial request can be seen by sending another
                        <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This
                     value can be between 1 and 100. If this parameter is not
                     used, then <code>ListRoutes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to list routes.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: >-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListRoutes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router in which to list routes.
          schema:
            type: string
            minLength: 1
            maxLength: 255
  "/meshes/{meshName}/virtualNodes":
    put:
      operationId: CreateVirtualNode
      description: >-
        <p>Creates a new virtual node within a service mesh.</p>
                 <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you must specify the
                 DNS service discovery name for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateVirtualNodeOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to create the virtual node.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualNodeName
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object representing the specification of a virtual node.
                  type: object
                  properties:
                    backends:
                      $ref: "#/components/schemas/Backends"
                    listeners:
                      $ref: "#/components/schemas/Listeners"
                    serviceDiscovery:
                      $ref: "#/components/schemas/ServiceDiscovery"
                virtualNodeName:
                  description: The name to use for the virtual node.
                  type: string
                  minLength: 1
                  maxLength: 255
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListVirtualNodes
      description: Returns a list of existing virtual nodes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListVirtualNodesOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: limit
          in: query
          required: false
          description: >-
            The maximum number of mesh results returned by
            <code>ListVirtualNodes</code> in
                     paginated output. When this parameter is used, <code>ListVirtualNodes</code> only returns
                     <code>limit</code> results in a single page along with a <code>nextToken</code>
                     response element. The remaining results of the initial request can be seen by sending
                     another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code>
                     value. This value can be between 1 and 100. If this
                     parameter is not used, then <code>ListVirtualNodes</code> returns up to
                     100 results and a <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to list virtual nodes.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: >-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListVirtualNodes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  "/meshes/{meshName}/virtualRouters":
    put:
      operationId: CreateVirtualRouter
      description: >-
        <p>Creates a new virtual router within a service mesh.</p>
                 <p>Virtual routers handle traffic for one or more service names within your mesh. After you
                 create your virtual router, create and associate routes for your virtual router that direct
                 incoming requests to different virtual nodes.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateVirtualRouterOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to create the virtual router.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualRouterName
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object representing the specification of a virtual router.
                  type: object
                  properties:
                    serviceNames:
                      $ref: "#/components/schemas/ServiceNames"
                virtualRouterName:
                  description: The name to use for the virtual router.
                  type: string
                  minLength: 1
                  maxLength: 255
        required: true
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListVirtualRouters
      description: Returns a list of existing virtual routers in a service mesh.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListVirtualRoutersOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: limit
          in: query
          required: false
          description: >-
            The maximum number of mesh results returned by
            <code>ListVirtualRouters</code> in
                     paginated output. When this parameter is used, <code>ListVirtualRouters</code> only returns
                     <code>limit</code> results in a single page along with a <code>nextToken</code>
                     response element. The remaining results of the initial request can be seen by sending
                     another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code>
                     value. This value can be between 1 and 100. If this
                     parameter is not used, then <code>ListVirtualRouters</code> returns up to
                     100 results and a <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to list virtual routers.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: >-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  "/meshes/{meshName}":
    delete:
      operationId: DeleteMesh
      description: >-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (routes, virtual routers, virtual nodes) in the service
                 mesh before you can delete the mesh itself.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteMeshOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeMesh
      description: Describes an existing service mesh.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeMeshOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
  "/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}":
    delete:
      operationId: DeleteRoute
      description: Deletes an existing route.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRouteOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to delete the route.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: routeName
          in: path
          required: true
          description: The name of the route to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router in which to delete the route.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeRoute
      description: Describes an existing route.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeRouteOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which the route resides.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: routeName
          in: path
          required: true
          description: The name of the route to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router with which the route is associated.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateRoute
      description: Updates an existing route for a specified service mesh and virtual
        router.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRouteOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which the route resides.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: routeName
          in: path
          required: true
          description: The name of the route to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router with which the route is associated.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object representing the specification of a route.
                  type: object
                  properties:
                    httpRoute:
                      $ref: "#/components/schemas/HttpRoute"
        required: true
  "/meshes/{meshName}/virtualNodes/{virtualNodeName}":
    delete:
      operationId: DeleteVirtualNode
      description: Deletes an existing virtual node.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteVirtualNodeOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to delete the virtual node.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeVirtualNode
      description: Describes an existing virtual node.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeVirtualNodeOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which the virtual node resides.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualNode
      description: Updates an existing virtual node in a specified service mesh.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateVirtualNodeOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which the virtual node resides.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object representing the specification of a virtual node.
                  type: object
                  properties:
                    backends:
                      $ref: "#/components/schemas/Backends"
                    listeners:
                      $ref: "#/components/schemas/Listeners"
                    serviceDiscovery:
                      $ref: "#/components/schemas/ServiceDiscovery"
        required: true
  "/meshes/{meshName}/virtualRouters/{virtualRouterName}":
    delete:
      operationId: DeleteVirtualRouter
      description: >-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteVirtualRouterOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "485":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "486":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to delete the virtual router.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: DescribeVirtualRouter
      description: Describes an existing virtual router.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeVirtualRouterOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "482":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "483":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "484":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "485":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which the virtual router resides.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualRouter
      description: Updates an existing virtual router in a specified service mesh.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateVirtualRouterOutput"
        "480":
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "481":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "482":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "483":
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
        "484":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "485":
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "486":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "487":
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which the virtual router resides.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: >-
                    Unique, case-sensitive identifier that you provide to ensure
                    the idempotency of the

                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object representing the specification of a virtual router.
                  type: object
                  properties:
                    serviceNames:
                      $ref: "#/components/schemas/ServiceNames"
        required: true
servers:
  - url: http://appmesh.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS App Mesh multi-region endpoint
  - url: https://appmesh.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS App Mesh multi-region endpoint
  - url: http://appmesh.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  - url: https://appmesh.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateMeshOutput:
      type: object
      properties:
        mesh:
          $ref: "#/components/schemas/MeshData"
      description: ""
    BadRequestException: {}
    ConflictException: {}
    ForbiddenException: {}
    InternalServerErrorException: {}
    LimitExceededException: {}
    NotFoundException: {}
    ServiceUnavailableException: {}
    TooManyRequestsException: {}
    CreateRouteOutput:
      type: object
      properties:
        route:
          $ref: "#/components/schemas/RouteData"
      description: ""
    HttpRoute:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/HttpRouteAction"
        match:
          $ref: "#/components/schemas/HttpRouteMatch"
      description: An object representing the HTTP routing specification for a route.
    CreateVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          $ref: "#/components/schemas/VirtualNodeData"
      description: ""
    Backends:
      type: array
      items:
        $ref: "#/components/schemas/ServiceName"
    Listeners:
      type: array
      items:
        $ref: "#/components/schemas/Listener"
    ServiceDiscovery:
      type: object
      properties:
        dns:
          $ref: "#/components/schemas/DnsServiceDiscovery"
      description: An object representing the service discovery information for a virtual
        node.
    CreateVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          $ref: "#/components/schemas/VirtualRouterData"
      description: ""
    ServiceNames:
      type: array
      items:
        $ref: "#/components/schemas/ServiceName"
      maxItems: 10
    DeleteMeshOutput:
      type: object
      properties:
        mesh:
          $ref: "#/components/schemas/MeshData"
      description: ""
    ResourceInUseException: {}
    DeleteRouteOutput:
      type: object
      properties:
        route:
          $ref: "#/components/schemas/RouteData"
      description: ""
    DeleteVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          $ref: "#/components/schemas/VirtualNodeData"
      description: ""
    DeleteVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          $ref: "#/components/schemas/VirtualRouterData"
      description: ""
    DescribeMeshOutput:
      type: object
      properties:
        mesh:
          $ref: "#/components/schemas/MeshData"
      description: ""
    DescribeRouteOutput:
      type: object
      properties:
        route:
          $ref: "#/components/schemas/RouteData"
      description: ""
    DescribeVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          $ref: "#/components/schemas/VirtualNodeData"
      description: ""
    DescribeVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          $ref: "#/components/schemas/VirtualRouterData"
      description: ""
    ListMeshesOutput:
      type: object
      required:
        - meshes
      properties:
        meshes:
          $ref: "#/components/schemas/MeshList"
        nextToken:
          $ref: "#/components/schemas/String"
      description: ""
    ListRoutesOutput:
      type: object
      required:
        - routes
      properties:
        nextToken:
          $ref: "#/components/schemas/String"
        routes:
          $ref: "#/components/schemas/RouteList"
      description: ""
    ListVirtualNodesOutput:
      type: object
      required:
        - virtualNodes
      properties:
        nextToken:
          $ref: "#/components/schemas/String"
        virtualNodes:
          $ref: "#/components/schemas/VirtualNodeList"
      description: ""
    ListVirtualRoutersOutput:
      type: object
      required:
        - virtualRouters
      properties:
        nextToken:
          $ref: "#/components/schemas/String"
        virtualRouters:
          $ref: "#/components/schemas/VirtualRouterList"
      description: ""
    UpdateRouteOutput:
      type: object
      properties:
        route:
          $ref: "#/components/schemas/RouteData"
      description: ""
    UpdateVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          $ref: "#/components/schemas/VirtualNodeData"
      description: ""
    UpdateVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          $ref: "#/components/schemas/VirtualRouterData"
      description: ""
    ServiceName:
      type: string
    HealthCheckThreshold:
      type: integer
      minimum: 2
      maximum: 10
    MeshData:
      type: object
      required:
        - meshName
        - metadata
      properties:
        meshName:
          $ref: "#/components/schemas/ResourceName"
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
        status:
          $ref: "#/components/schemas/MeshStatus"
      description: An object representing a service mesh returned by a describe operation.
    Long:
      type: integer
    VirtualRouterData:
      type: object
      required:
        - meshName
        - virtualRouterName
      properties:
        meshName:
          $ref: "#/components/schemas/ResourceName"
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
        spec:
          $ref: "#/components/schemas/VirtualRouterSpec"
        status:
          $ref: "#/components/schemas/VirtualRouterStatus"
        virtualRouterName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a virtual router returned by a describe operation.
    MeshStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    PortNumber:
      type: integer
      minimum: 1
      maximum: 65535
    ResourceName:
      type: string
      minLength: 1
      maxLength: 255
    PercentInt:
      type: integer
      minimum: 0
      maximum: 100
    WeightedTarget:
      type: object
      properties:
        virtualNode:
          $ref: "#/components/schemas/ResourceName"
        weight:
          $ref: "#/components/schemas/PercentInt"
      description: >-
        An object representing a target and its relative weight. Traffic is
        distributed across
                 targets according to their relative weight. For example, a weighted target with a relative
                 weight of 50 receives five times as much traffic as one with a relative weight of
                 10.
    VirtualNodeRef:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/Arn"
        meshName:
          $ref: "#/components/schemas/ResourceName"
        virtualNodeName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a virtual node returned by a list operation.
    VirtualNodeList:
      type: array
      items:
        $ref: "#/components/schemas/VirtualNodeRef"
    RouteData:
      type: object
      required:
        - meshName
        - routeName
        - virtualRouterName
      properties:
        meshName:
          $ref: "#/components/schemas/ResourceName"
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
        routeName:
          $ref: "#/components/schemas/ResourceName"
        spec:
          $ref: "#/components/schemas/RouteSpec"
        status:
          $ref: "#/components/schemas/RouteStatus"
        virtualRouterName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a route returned by a describe operation.
    RouteRef:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/Arn"
        meshName:
          $ref: "#/components/schemas/ResourceName"
        routeName:
          $ref: "#/components/schemas/ResourceName"
        virtualRouterName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a route returned by a list operation.
    RouteList:
      type: array
      items:
        $ref: "#/components/schemas/RouteRef"
    DeleteVirtualNodeInput:
      type: object
      properties: {}
      description: ""
    ListVirtualRoutersLimit:
      type: integer
      minimum: 1
      maximum: 100
    DnsServiceDiscovery:
      type: object
      properties:
        serviceName:
          $ref: "#/components/schemas/ServiceName"
      description: The DNS service discovery information for your virtual node.
    HealthCheckIntervalMillis:
      type: integer
      minimum: 5000
      maximum: 300000
    Arn:
      type: string
    MeshStatus:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/MeshStatusCode"
      description: An object representing the status of a service mesh.
    ResourceMetadata:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/Arn"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        lastUpdatedAt:
          $ref: "#/components/schemas/Timestamp"
        uid:
          $ref: "#/components/schemas/String"
        version:
          $ref: "#/components/schemas/Long"
      description: An object representing metadata for a resource.
    VirtualNodeSpec:
      type: object
      properties:
        backends:
          $ref: "#/components/schemas/Backends"
        listeners:
          $ref: "#/components/schemas/Listeners"
        serviceDiscovery:
          $ref: "#/components/schemas/ServiceDiscovery"
      description: An object representing the specification of a virtual node.
    VirtualNodeStatus:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/VirtualNodeStatusCode"
      description: An object representing the current status of the virtual node.
    VirtualNodeData:
      type: object
      required:
        - meshName
        - virtualNodeName
      properties:
        meshName:
          $ref: "#/components/schemas/ResourceName"
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
        spec:
          $ref: "#/components/schemas/VirtualNodeSpec"
        status:
          $ref: "#/components/schemas/VirtualNodeStatus"
        virtualNodeName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a virtual node returned by a describe operation.
    MeshRef:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/Arn"
        meshName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a service mesh returned by a list operation.
    DescribeVirtualRouterInput:
      type: object
      properties: {}
      description: ""
    WeightedTargets:
      type: array
      items:
        $ref: "#/components/schemas/WeightedTarget"
    HttpRouteAction:
      type: object
      properties:
        weightedTargets:
          $ref: "#/components/schemas/WeightedTargets"
      description: >-
        An object representing the traffic distribution requirements for matched
        HTTP
                 requests.
    HealthCheckTimeoutMillis:
      type: integer
      minimum: 2000
      maximum: 60000
    String:
      type: string
    VirtualRouterSpec:
      type: object
      properties:
        serviceNames:
          $ref: "#/components/schemas/ServiceNames"
      description: An object representing the specification of a virtual router.
    CreateVirtualRouterInput:
      type: object
      required:
        - spec
        - virtualRouterName
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        spec:
          $ref: "#/components/schemas/VirtualRouterSpec"
        virtualRouterName:
          $ref: "#/components/schemas/ResourceName"
      description: ""
    RouteStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    RouteStatus:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/RouteStatusCode"
      description: An object representing the current status of a route.
    ListMeshesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListMeshesInput:
      type: object
      properties: {}
      description: ""
    VirtualRouterStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    VirtualRouterStatus:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/VirtualRouterStatusCode"
      description: "An object representing the status of a virtual router. "
    MeshList:
      type: array
      items:
        $ref: "#/components/schemas/MeshRef"
    RouteSpec:
      type: object
      properties:
        httpRoute:
          $ref: "#/components/schemas/HttpRoute"
      description: An object representing the specification of a route.
    UpdateVirtualNodeInput:
      type: object
      required:
        - spec
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        spec:
          $ref: "#/components/schemas/VirtualNodeSpec"
      description: ""
    DeleteRouteInput:
      type: object
      properties: {}
      description: ""
    Listener:
      type: object
      properties:
        healthCheck:
          $ref: "#/components/schemas/HealthCheckPolicy"
        portMapping:
          $ref: "#/components/schemas/PortMapping"
      description: An object representing a listener for a virtual node.
    ListRoutesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListRoutesInput:
      type: object
      properties: {}
      description: ""
    HttpRouteMatch:
      type: object
      properties:
        prefix:
          $ref: "#/components/schemas/String"
      description: >-
        An object representing the requirements for a route to match HTTP
        requests for a virtual
                 router.
    Timestamp:
      type: string
      format: date-time
    DescribeVirtualNodeInput:
      type: object
      properties: {}
      description: ""
    VirtualRouterRef:
      type: object
      properties:
        arn:
          $ref: "#/components/schemas/Arn"
        meshName:
          $ref: "#/components/schemas/ResourceName"
        virtualRouterName:
          $ref: "#/components/schemas/ResourceName"
      description: An object representing a virtual router returned by a list operation.
    UpdateVirtualRouterInput:
      type: object
      required:
        - spec
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        spec:
          $ref: "#/components/schemas/VirtualRouterSpec"
      description: ""
    DescribeRouteInput:
      type: object
      properties: {}
      description: ""
    VirtualRouterList:
      type: array
      items:
        $ref: "#/components/schemas/VirtualRouterRef"
    PortProtocol:
      type: string
      enum:
        - http
        - tcp
    CreateMeshInput:
      type: object
      required:
        - meshName
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        meshName:
          $ref: "#/components/schemas/ResourceName"
      description: ""
    PortMapping:
      type: object
      properties:
        port:
          $ref: "#/components/schemas/PortNumber"
        protocol:
          $ref: "#/components/schemas/PortProtocol"
      description: An object representing a virtual node listener port mapping.
    VirtualNodeStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    DeleteVirtualRouterInput:
      type: object
      properties: {}
      description: ""
    UpdateRouteInput:
      type: object
      required:
        - spec
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        spec:
          $ref: "#/components/schemas/RouteSpec"
      description: ""
    DescribeMeshInput:
      type: object
      properties: {}
      description: ""
    HealthCheckPolicy:
      type: object
      required:
        - healthyThreshold
        - intervalMillis
        - protocol
        - timeoutMillis
        - unhealthyThreshold
      properties:
        healthyThreshold:
          $ref: "#/components/schemas/HealthCheckThreshold"
        intervalMillis:
          $ref: "#/components/schemas/HealthCheckIntervalMillis"
        path:
          $ref: "#/components/schemas/String"
        port:
          $ref: "#/components/schemas/PortNumber"
        protocol:
          $ref: "#/components/schemas/PortProtocol"
        timeoutMillis:
          $ref: "#/components/schemas/HealthCheckTimeoutMillis"
        unhealthyThreshold:
          $ref: "#/components/schemas/HealthCheckThreshold"
      description: An object representing the health check policy for a virtual node's
        listener.
    ListVirtualRoutersInput:
      type: object
      properties: {}
      description: ""
    CreateVirtualNodeInput:
      type: object
      required:
        - spec
        - virtualNodeName
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        spec:
          $ref: "#/components/schemas/VirtualNodeSpec"
        virtualNodeName:
          $ref: "#/components/schemas/ResourceName"
      description: ""
    ListVirtualNodesLimit:
      type: integer
      minimum: 1
      maximum: 100
    DeleteMeshInput:
      type: object
      properties: {}
      description: ""
    CreateRouteInput:
      type: object
      required:
        - routeName
        - spec
      properties:
        clientToken:
          $ref: "#/components/schemas/String"
        routeName:
          $ref: "#/components/schemas/ResourceName"
        spec:
          $ref: "#/components/schemas/RouteSpec"
      description: ""
    ListVirtualNodesInput:
      type: object
      properties: {}
      description: ""
